/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.1.1/userguide/building_java_projects.html
 */

plugins {
    //id 'com.twitter.teruteru128.java.study.java-conventions'
    // https://docs.gradle.org/current/userguide/java_plugin.html
    id 'java'
    // Apply the application plugin to add support for building a CLI application in Java.
    // https://docs.gradle.org/current/userguide/application_plugin.html
    id 'application'
    // https://docs.gradle.org/current/userguide/eclipse_plugin.html
    id 'eclipse'
    // https://docs.gradle.org/current/userguide/java_library_plugin.html
    //id 'java-library'
    // https://github.com/java9-modularity/gradle-modules-plugin
    id 'org.javamodularity.moduleplugin' version '1.8.12' apply true
    id 'com.github.johnrengelman.shadow' version '8.1.0'
}

//javaModule.name = 'com.teruteru128.study'

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

application {
    mainModule = 'com.twitter.teruteru.study'
    mainClass = 'com.twitter.teruteru128.study.Main'
    applicationDefaultJvmArgs = ['-Xms64G', '-Xmx64G']
}

/* shadowJar {
    archiveClassifier = 'shade'
} */

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    maven {url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots'}
    maven {url 'https://papermc.io/repo/repository/maven-public/'}
}

dependencies {
    implementation project(':util')

    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    implementation 'org.apache.commons:commons-math3:3.6.1'

    // https://mvnrepository.com/artifact/commons-codec/commons-codec
    implementation 'commons-codec:commons-codec:1.15'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:31.1-jre'

    // https://mvnrepository.com/artifact/org.twitter4j/twitter4j-core
    implementation 'org.twitter4j:twitter4j-core:4.1.2';

    // https://mvnrepository.com/artifact/org.apache.hbase/hbase
    // implementation group: 'org.apache.hbase', name: 'hbase', version: '2.4.9', ext: 'pom'

    // https://mvnrepository.com/artifact/org.apache.hadoop/hadoop-common
    //implementation 'org.apache.hadoop:hadoop-common:3.3.2'

    // https://mvnrepository.com/artifact/org.bouncycastle/bcmail-jdk15on
    // implementation 'org.bouncycastle:bcmail-jdk15on:1.70'

    // https://mvnrepository.com/artifact/org.bouncycastle/bcmail-jdk15on
    implementation 'org.bouncycastle:bcprov-jdk15on:1.70'

    // https://mvnrepository.com/artifact/com.github.spotbugs/spotbugs
    // compile 'com.github.spotbugs:spotbugs:4.5.3'

    // https://spotbugs.readthedocs.io/ja/latest/migration.html#com-google-code-findbugs-jsr305
    // JSR305 is already Dormant status, so SpotBugs does not release jsr305 jar file. Please continue using findbugs’ one.
    // https://mvnrepository.com/artifact/com.google.code.findbugs/jsr305
    // implementation 'com.google.code.findbugs:jsr305:3.0.2'

    // https://mvnrepository.com/artifact/javax.xml.bind/jaxb-api
    implementation 'javax.xml.bind:jaxb-api:2.3.1'

    // https://mvnrepository.com/artifact/org.glassfish.jaxb/jaxb-runtime
    implementation 'org.glassfish.jaxb:jaxb-runtime:4.0.2'

    // jaxb-runtime -> jaxb-core -> jakarta.xml.bind-api
    // https://mvnrepository.com/artifact/jakarta.xml.bind/jakarta.xml.bind-api
    // implementation 'jakarta.xml.bind:jakarta.xml.bind-api:3.0.1'

    // https://mvnrepository.com/artifact/org.json/json
    implementation 'org.json:json:20230227'

    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    implementation 'com.google.code.gson:gson:2.10.1'

    // https://mvnrepository.com/artifact/jakarta.json/jakarta.json-api
    //implementation 'jakarta.json:jakarta.json-api:2.1.1'

    // https://mvnrepository.com/artifact/org.glassfish/jakarta.json
    implementation 'org.glassfish:jakarta.json:2.0.1'

    // https://mvnrepository.com/artifact/org.spigotmc/spigot-api
    implementation 'org.spigotmc:spigot-api:1.16.5-R0.1-SNAPSHOT'

    // https://mvnrepository.com/artifact/io.papermc.paper/paper-api
    //implementation 'io.papermc.paper:paper-api:1.18.1-R0.1-SNAPSHOT'

    // https://mvnrepository.com/artifact/com.twitter.twittertext/twitter-text
    implementation 'com.twitter.twittertext:twitter-text:3.1.0'

    // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
    implementation 'org.slf4j:slf4j-api:2.0.6'

    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-slf4j-impl
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.20.0'

    // log4j-slf4j-impl から依存されるので不要
    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core
    // implementation 'org.apache.logging.log4j:log4j-core:2.17.2'

    // https://github.com/greymd/CVE-2021-44228
    // https://mvnrepository.com/artifact/com.unboundid/unboundid-ldapsdk
    implementation 'com.unboundid:unboundid-ldapsdk:6.0.7'

    // https://mvnrepository.com/artifact/org.apache.tomcat.embed/tomcat-embed-core
    implementation "org.apache.tomcat.embed:tomcat-embed-core:10.1.6"

    // https://mvnrepository.com/artifact/org.xerial/sqlite-jdbc
    implementation 'org.xerial:sqlite-jdbc:3.41.0.0'
}

test {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

// thanks for https://github.com/eclipse/eclipse.jdt.ls/issues/957
eclipse {
    classpath {
        containers 'org.eclipse.buildship.core.gradleclasspathcontainer'
        file {
            whenMerged {
                entries.findAll { it.properties.kind.equals('lib') && !it.properties.path.contains("junit") }.each {
                    it.entryAttributes['module'] = 'true'
                }
                entries.findAll { it.properties.path.startsWith('org.eclipse.jdt.launching.JRE_CONTAINER') }.each {
                    it.entryAttributes['module'] = 'true'
                }
                entries.find { it.path == 'src/main/java' }.output = 'build/classes/java/main'

                entries.find { it.path == 'src/main/resources' }.output = 'build/resources/main'

                entries.findAll { it.path.startsWith('/') && !it.path.endsWith('.jar') }.each {
                    it.entryAttributes['module'] = 'true'
                }

                def testSrc = entries.find { it.path == 'src/test/java' }
                testSrc.output = 'build/classes/java/test'
                testSrc.entryAttributes['test'] = 'true'
                testSrc.entryAttributes['optional'] = 'true'
                testSrc.entryAttributes['ignore_optional_problems'] = 'true'
                //testSrc.entryAttributes['module'] = 'true'

                entries.find { it.path == 'src/test/resources' }.output = 'build/resources/test'

                entries.forEach { entry ->
                    def entryIn = { it.find { file(entry.path).equals(it) } }
                    if (entry.kind == 'lib') {
                        entry.entryAttributes['test'] =
                            entryIn(configurations.testRuntimeClasspath) &&
                            !entryIn(configurations.runtimeClasspath)
                    }
                }
            }
        }
    }
}

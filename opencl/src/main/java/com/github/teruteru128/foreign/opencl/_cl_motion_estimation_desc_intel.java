// Generated by jextract

package com.github.teruteru128.foreign.opencl;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _cl_motion_estimation_desc_intel {
 *     cl_uint mb_block_type;
 *     cl_uint subpixel_mode;
 *     cl_uint sad_adjust_mode;
 *     cl_uint search_path_type;
 * }
 * }
 */
public class _cl_motion_estimation_desc_intel {

    _cl_motion_estimation_desc_intel() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        opencl_h.C_INT.withName("mb_block_type"),
        opencl_h.C_INT.withName("subpixel_mode"),
        opencl_h.C_INT.withName("sad_adjust_mode"),
        opencl_h.C_INT.withName("search_path_type")
    ).withName("_cl_motion_estimation_desc_intel");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt mb_block_type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("mb_block_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cl_uint mb_block_type
     * }
     */
    public static final OfInt mb_block_type$layout() {
        return mb_block_type$LAYOUT;
    }

    private static final long mb_block_type$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cl_uint mb_block_type
     * }
     */
    public static final long mb_block_type$offset() {
        return mb_block_type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cl_uint mb_block_type
     * }
     */
    public static int mb_block_type(MemorySegment struct) {
        return struct.get(mb_block_type$LAYOUT, mb_block_type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cl_uint mb_block_type
     * }
     */
    public static void mb_block_type(MemorySegment struct, int fieldValue) {
        struct.set(mb_block_type$LAYOUT, mb_block_type$OFFSET, fieldValue);
    }

    private static final OfInt subpixel_mode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("subpixel_mode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cl_uint subpixel_mode
     * }
     */
    public static final OfInt subpixel_mode$layout() {
        return subpixel_mode$LAYOUT;
    }

    private static final long subpixel_mode$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cl_uint subpixel_mode
     * }
     */
    public static final long subpixel_mode$offset() {
        return subpixel_mode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cl_uint subpixel_mode
     * }
     */
    public static int subpixel_mode(MemorySegment struct) {
        return struct.get(subpixel_mode$LAYOUT, subpixel_mode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cl_uint subpixel_mode
     * }
     */
    public static void subpixel_mode(MemorySegment struct, int fieldValue) {
        struct.set(subpixel_mode$LAYOUT, subpixel_mode$OFFSET, fieldValue);
    }

    private static final OfInt sad_adjust_mode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sad_adjust_mode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cl_uint sad_adjust_mode
     * }
     */
    public static final OfInt sad_adjust_mode$layout() {
        return sad_adjust_mode$LAYOUT;
    }

    private static final long sad_adjust_mode$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cl_uint sad_adjust_mode
     * }
     */
    public static final long sad_adjust_mode$offset() {
        return sad_adjust_mode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cl_uint sad_adjust_mode
     * }
     */
    public static int sad_adjust_mode(MemorySegment struct) {
        return struct.get(sad_adjust_mode$LAYOUT, sad_adjust_mode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cl_uint sad_adjust_mode
     * }
     */
    public static void sad_adjust_mode(MemorySegment struct, int fieldValue) {
        struct.set(sad_adjust_mode$LAYOUT, sad_adjust_mode$OFFSET, fieldValue);
    }

    private static final OfInt search_path_type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("search_path_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cl_uint search_path_type
     * }
     */
    public static final OfInt search_path_type$layout() {
        return search_path_type$LAYOUT;
    }

    private static final long search_path_type$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cl_uint search_path_type
     * }
     */
    public static final long search_path_type$offset() {
        return search_path_type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cl_uint search_path_type
     * }
     */
    public static int search_path_type(MemorySegment struct) {
        return struct.get(search_path_type$LAYOUT, search_path_type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cl_uint search_path_type
     * }
     */
    public static void search_path_type(MemorySegment struct, int fieldValue) {
        struct.set(search_path_type$LAYOUT, search_path_type$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


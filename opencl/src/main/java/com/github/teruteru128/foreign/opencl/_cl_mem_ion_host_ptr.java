// Generated by jextract

package com.github.teruteru128.foreign.opencl;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _cl_mem_ion_host_ptr {
 *     cl_mem_ext_host_ptr ext_host_ptr;
 *     int ion_filedesc;
 *     void *ion_hostptr;
 * }
 * }
 */
public class _cl_mem_ion_host_ptr {

    _cl_mem_ion_host_ptr() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _cl_mem_ext_host_ptr.layout().withName("ext_host_ptr"),
        opencl_h.C_INT.withName("ion_filedesc"),
        MemoryLayout.paddingLayout(4),
        opencl_h.C_POINTER.withName("ion_hostptr")
    ).withName("_cl_mem_ion_host_ptr");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout ext_host_ptr$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ext_host_ptr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cl_mem_ext_host_ptr ext_host_ptr
     * }
     */
    public static final GroupLayout ext_host_ptr$layout() {
        return ext_host_ptr$LAYOUT;
    }

    private static final long ext_host_ptr$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cl_mem_ext_host_ptr ext_host_ptr
     * }
     */
    public static final long ext_host_ptr$offset() {
        return ext_host_ptr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cl_mem_ext_host_ptr ext_host_ptr
     * }
     */
    public static MemorySegment ext_host_ptr(MemorySegment struct) {
        return struct.asSlice(ext_host_ptr$OFFSET, ext_host_ptr$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cl_mem_ext_host_ptr ext_host_ptr
     * }
     */
    public static void ext_host_ptr(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ext_host_ptr$OFFSET, ext_host_ptr$LAYOUT.byteSize());
    }

    private static final OfInt ion_filedesc$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ion_filedesc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int ion_filedesc
     * }
     */
    public static final OfInt ion_filedesc$layout() {
        return ion_filedesc$LAYOUT;
    }

    private static final long ion_filedesc$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int ion_filedesc
     * }
     */
    public static final long ion_filedesc$offset() {
        return ion_filedesc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int ion_filedesc
     * }
     */
    public static int ion_filedesc(MemorySegment struct) {
        return struct.get(ion_filedesc$LAYOUT, ion_filedesc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int ion_filedesc
     * }
     */
    public static void ion_filedesc(MemorySegment struct, int fieldValue) {
        struct.set(ion_filedesc$LAYOUT, ion_filedesc$OFFSET, fieldValue);
    }

    private static final AddressLayout ion_hostptr$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ion_hostptr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *ion_hostptr
     * }
     */
    public static final AddressLayout ion_hostptr$layout() {
        return ion_hostptr$LAYOUT;
    }

    private static final long ion_hostptr$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *ion_hostptr
     * }
     */
    public static final long ion_hostptr$offset() {
        return ion_hostptr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *ion_hostptr
     * }
     */
    public static MemorySegment ion_hostptr(MemorySegment struct) {
        return struct.get(ion_hostptr$LAYOUT, ion_hostptr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *ion_hostptr
     * }
     */
    public static void ion_hostptr(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ion_hostptr$LAYOUT, ion_hostptr$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


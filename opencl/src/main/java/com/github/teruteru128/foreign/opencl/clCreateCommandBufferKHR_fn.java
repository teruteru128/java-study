// Generated by jextract

package com.github.teruteru128.foreign.opencl;

import java.lang.invoke.*;
import java.lang.foreign.*;

/**
 * {@snippet lang=c :
 * typedef cl_command_buffer_khr (*clCreateCommandBufferKHR_fn)(cl_uint, const cl_command_queue *, const cl_command_buffer_properties_khr *, cl_int *) __attribute__((stdcall))
 * }
 */
public class clCreateCommandBufferKHR_fn {

    clCreateCommandBufferKHR_fn() {
        // Should not be called directly
    }

    /**
     * The function pointer signature, expressed as a functional interface
     */
    public interface Function {
        MemorySegment apply(int num_queues, MemorySegment queues, MemorySegment properties, MemorySegment errcode_ret);
    }

    private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
        opencl_h.C_POINTER,
        opencl_h.C_INT,
        opencl_h.C_POINTER,
        opencl_h.C_POINTER,
        opencl_h.C_POINTER
    );

    /**
     * The descriptor of this function pointer
     */
    public static FunctionDescriptor descriptor() {
        return $DESC;
    }

    private static final MethodHandle UP$MH = opencl_h.upcallHandle(clCreateCommandBufferKHR_fn.Function.class, "apply", $DESC);

    /**
     * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
     * The lifetime of the returned segment is managed by {@code arena}
     */
    public static MemorySegment allocate(clCreateCommandBufferKHR_fn.Function fi, Arena arena) {
        return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
    }

    private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

    /**
     * Invoke the upcall stub {@code funcPtr}, with given parameters
     */
    public static MemorySegment invoke(MemorySegment funcPtr,int num_queues, MemorySegment queues, MemorySegment properties, MemorySegment errcode_ret) {
        try {
            return (MemorySegment) DOWN$MH.invokeExact(funcPtr, num_queues, queues, properties, errcode_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


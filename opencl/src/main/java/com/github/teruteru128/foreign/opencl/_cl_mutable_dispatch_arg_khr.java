// Generated by jextract

package com.github.teruteru128.foreign.opencl;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _cl_mutable_dispatch_arg_khr {
 *     cl_uint arg_index;
 *     size_t arg_size;
 *     const void *arg_value;
 * }
 * }
 */
public class _cl_mutable_dispatch_arg_khr {

    _cl_mutable_dispatch_arg_khr() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        opencl_h.C_INT.withName("arg_index"),
        MemoryLayout.paddingLayout(4),
        opencl_h.C_LONG_LONG.withName("arg_size"),
        opencl_h.C_POINTER.withName("arg_value")
    ).withName("_cl_mutable_dispatch_arg_khr");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt arg_index$LAYOUT = (OfInt)$LAYOUT.select(groupElement("arg_index"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cl_uint arg_index
     * }
     */
    public static final OfInt arg_index$layout() {
        return arg_index$LAYOUT;
    }

    private static final long arg_index$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cl_uint arg_index
     * }
     */
    public static final long arg_index$offset() {
        return arg_index$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cl_uint arg_index
     * }
     */
    public static int arg_index(MemorySegment struct) {
        return struct.get(arg_index$LAYOUT, arg_index$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cl_uint arg_index
     * }
     */
    public static void arg_index(MemorySegment struct, int fieldValue) {
        struct.set(arg_index$LAYOUT, arg_index$OFFSET, fieldValue);
    }

    private static final OfLong arg_size$LAYOUT = (OfLong)$LAYOUT.select(groupElement("arg_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t arg_size
     * }
     */
    public static final OfLong arg_size$layout() {
        return arg_size$LAYOUT;
    }

    private static final long arg_size$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t arg_size
     * }
     */
    public static final long arg_size$offset() {
        return arg_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t arg_size
     * }
     */
    public static long arg_size(MemorySegment struct) {
        return struct.get(arg_size$LAYOUT, arg_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t arg_size
     * }
     */
    public static void arg_size(MemorySegment struct, long fieldValue) {
        struct.set(arg_size$LAYOUT, arg_size$OFFSET, fieldValue);
    }

    private static final AddressLayout arg_value$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("arg_value"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const void *arg_value
     * }
     */
    public static final AddressLayout arg_value$layout() {
        return arg_value$LAYOUT;
    }

    private static final long arg_value$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const void *arg_value
     * }
     */
    public static final long arg_value$offset() {
        return arg_value$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const void *arg_value
     * }
     */
    public static MemorySegment arg_value(MemorySegment struct) {
        return struct.get(arg_value$LAYOUT, arg_value$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const void *arg_value
     * }
     */
    public static void arg_value(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(arg_value$LAYOUT, arg_value$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


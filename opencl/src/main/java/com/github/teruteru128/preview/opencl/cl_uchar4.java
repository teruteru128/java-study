// Generated by jextract

package com.github.teruteru128.preview.opencl;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * union {
 *     cl_uchar s[4];
 *     struct {
 *         cl_uchar x;
 *         cl_uchar y;
 *         cl_uchar z;
 *         cl_uchar w;
 *     };
 *     struct {
 *         cl_uchar s0;
 *         cl_uchar s1;
 *         cl_uchar s2;
 *         cl_uchar s3;
 *     };
 *     struct {
 *         cl_uchar2 lo;
 *         cl_uchar2 hi;
 *     };
 * }
 * }
 */
public class cl_uchar4 {

    cl_uchar4() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
        MemoryLayout.sequenceLayout(4, opencl_h.C_CHAR).withName("s"),
        MemoryLayout.structLayout(
            opencl_h.C_CHAR.withName("x"),
            opencl_h.C_CHAR.withName("y"),
            opencl_h.C_CHAR.withName("z"),
            opencl_h.C_CHAR.withName("w")
        ).withName("$anon$650:23"),
        MemoryLayout.structLayout(
            opencl_h.C_CHAR.withName("s0"),
            opencl_h.C_CHAR.withName("s1"),
            opencl_h.C_CHAR.withName("s2"),
            opencl_h.C_CHAR.withName("s3")
        ).withName("$anon$651:23"),
        MemoryLayout.structLayout(
            cl_uchar2.layout().withName("lo"),
            cl_uchar2.layout().withName("hi")
        ).withName("$anon$652:23")
    ).withName("$anon$646:9");

    /**
     * The layout of this union
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout s$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("s"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cl_uchar s[4]
     * }
     */
    public static final SequenceLayout s$layout() {
        return s$LAYOUT;
    }

    private static final long s$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cl_uchar s[4]
     * }
     */
    public static final long s$offset() {
        return s$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cl_uchar s[4]
     * }
     */
    public static MemorySegment s(MemorySegment union) {
        return union.asSlice(s$OFFSET, s$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cl_uchar s[4]
     * }
     */
    public static void s(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, s$OFFSET, s$LAYOUT.byteSize());
    }

    private static long[] s$DIMS = { 4 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * cl_uchar s[4]
     * }
     */
    public static long[] s$dimensions() {
        return s$DIMS;
    }
    private static final VarHandle s$ELEM_HANDLE = s$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * cl_uchar s[4]
     * }
     */
    public static byte s(MemorySegment union, long index0) {
        return (byte)s$ELEM_HANDLE.get(union, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * cl_uchar s[4]
     * }
     */
    public static void s(MemorySegment union, long index0, byte fieldValue) {
        s$ELEM_HANDLE.set(union, 0L, index0, fieldValue);
    }

    private static final OfByte x$LAYOUT = (OfByte)$LAYOUT.select(groupElement("$anon$650:23"), groupElement("x"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cl_uchar x
     * }
     */
    public static final OfByte x$layout() {
        return x$LAYOUT;
    }

    private static final long x$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cl_uchar x
     * }
     */
    public static final long x$offset() {
        return x$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cl_uchar x
     * }
     */
    public static byte x(MemorySegment union) {
        return union.get(x$LAYOUT, x$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cl_uchar x
     * }
     */
    public static void x(MemorySegment union, byte fieldValue) {
        union.set(x$LAYOUT, x$OFFSET, fieldValue);
    }

    private static final OfByte y$LAYOUT = (OfByte)$LAYOUT.select(groupElement("$anon$650:23"), groupElement("y"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cl_uchar y
     * }
     */
    public static final OfByte y$layout() {
        return y$LAYOUT;
    }

    private static final long y$OFFSET = 1;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cl_uchar y
     * }
     */
    public static final long y$offset() {
        return y$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cl_uchar y
     * }
     */
    public static byte y(MemorySegment union) {
        return union.get(y$LAYOUT, y$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cl_uchar y
     * }
     */
    public static void y(MemorySegment union, byte fieldValue) {
        union.set(y$LAYOUT, y$OFFSET, fieldValue);
    }

    private static final OfByte z$LAYOUT = (OfByte)$LAYOUT.select(groupElement("$anon$650:23"), groupElement("z"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cl_uchar z
     * }
     */
    public static final OfByte z$layout() {
        return z$LAYOUT;
    }

    private static final long z$OFFSET = 2;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cl_uchar z
     * }
     */
    public static final long z$offset() {
        return z$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cl_uchar z
     * }
     */
    public static byte z(MemorySegment union) {
        return union.get(z$LAYOUT, z$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cl_uchar z
     * }
     */
    public static void z(MemorySegment union, byte fieldValue) {
        union.set(z$LAYOUT, z$OFFSET, fieldValue);
    }

    private static final OfByte w$LAYOUT = (OfByte)$LAYOUT.select(groupElement("$anon$650:23"), groupElement("w"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cl_uchar w
     * }
     */
    public static final OfByte w$layout() {
        return w$LAYOUT;
    }

    private static final long w$OFFSET = 3;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cl_uchar w
     * }
     */
    public static final long w$offset() {
        return w$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cl_uchar w
     * }
     */
    public static byte w(MemorySegment union) {
        return union.get(w$LAYOUT, w$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cl_uchar w
     * }
     */
    public static void w(MemorySegment union, byte fieldValue) {
        union.set(w$LAYOUT, w$OFFSET, fieldValue);
    }

    private static final OfByte s0$LAYOUT = (OfByte)$LAYOUT.select(groupElement("$anon$651:23"), groupElement("s0"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cl_uchar s0
     * }
     */
    public static final OfByte s0$layout() {
        return s0$LAYOUT;
    }

    private static final long s0$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cl_uchar s0
     * }
     */
    public static final long s0$offset() {
        return s0$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cl_uchar s0
     * }
     */
    public static byte s0(MemorySegment union) {
        return union.get(s0$LAYOUT, s0$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cl_uchar s0
     * }
     */
    public static void s0(MemorySegment union, byte fieldValue) {
        union.set(s0$LAYOUT, s0$OFFSET, fieldValue);
    }

    private static final OfByte s1$LAYOUT = (OfByte)$LAYOUT.select(groupElement("$anon$651:23"), groupElement("s1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cl_uchar s1
     * }
     */
    public static final OfByte s1$layout() {
        return s1$LAYOUT;
    }

    private static final long s1$OFFSET = 1;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cl_uchar s1
     * }
     */
    public static final long s1$offset() {
        return s1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cl_uchar s1
     * }
     */
    public static byte s1(MemorySegment union) {
        return union.get(s1$LAYOUT, s1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cl_uchar s1
     * }
     */
    public static void s1(MemorySegment union, byte fieldValue) {
        union.set(s1$LAYOUT, s1$OFFSET, fieldValue);
    }

    private static final OfByte s2$LAYOUT = (OfByte)$LAYOUT.select(groupElement("$anon$651:23"), groupElement("s2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cl_uchar s2
     * }
     */
    public static final OfByte s2$layout() {
        return s2$LAYOUT;
    }

    private static final long s2$OFFSET = 2;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cl_uchar s2
     * }
     */
    public static final long s2$offset() {
        return s2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cl_uchar s2
     * }
     */
    public static byte s2(MemorySegment union) {
        return union.get(s2$LAYOUT, s2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cl_uchar s2
     * }
     */
    public static void s2(MemorySegment union, byte fieldValue) {
        union.set(s2$LAYOUT, s2$OFFSET, fieldValue);
    }

    private static final OfByte s3$LAYOUT = (OfByte)$LAYOUT.select(groupElement("$anon$651:23"), groupElement("s3"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cl_uchar s3
     * }
     */
    public static final OfByte s3$layout() {
        return s3$LAYOUT;
    }

    private static final long s3$OFFSET = 3;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cl_uchar s3
     * }
     */
    public static final long s3$offset() {
        return s3$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cl_uchar s3
     * }
     */
    public static byte s3(MemorySegment union) {
        return union.get(s3$LAYOUT, s3$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cl_uchar s3
     * }
     */
    public static void s3(MemorySegment union, byte fieldValue) {
        union.set(s3$LAYOUT, s3$OFFSET, fieldValue);
    }

    private static final GroupLayout lo$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$652:23"), groupElement("lo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cl_uchar2 lo
     * }
     */
    public static final GroupLayout lo$layout() {
        return lo$LAYOUT;
    }

    private static final long lo$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cl_uchar2 lo
     * }
     */
    public static final long lo$offset() {
        return lo$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cl_uchar2 lo
     * }
     */
    public static MemorySegment lo(MemorySegment union) {
        return union.asSlice(lo$OFFSET, lo$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cl_uchar2 lo
     * }
     */
    public static void lo(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, lo$OFFSET, lo$LAYOUT.byteSize());
    }

    private static final GroupLayout hi$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$652:23"), groupElement("hi"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cl_uchar2 hi
     * }
     */
    public static final GroupLayout hi$layout() {
        return hi$LAYOUT;
    }

    private static final long hi$OFFSET = 2;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cl_uchar2 hi
     * }
     */
    public static final long hi$offset() {
        return hi$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cl_uchar2 hi
     * }
     */
    public static MemorySegment hi(MemorySegment union) {
        return union.asSlice(hi$OFFSET, hi$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cl_uchar2 hi
     * }
     */
    public static void hi(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, hi$OFFSET, hi$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this union
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


// Generated by jextract

package com.twitter.teruteru128.preview.opencl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * int (*clEnqueueGenerateMipmapIMG_fn)(struct _cl_command_queue* command_queue,struct _cl_mem* src_image,struct _cl_mem* dst_image,unsigned int mipmap_filter_mode,unsigned long long* array_region,unsigned long long* mip_region,unsigned int num_events_in_wait_list,struct _cl_event** event_wait_list,struct _cl_event** event);
 * }
 */
public interface clEnqueueGenerateMipmapIMG_fn {

    int apply(java.lang.foreign.MemorySegment command_queue, java.lang.foreign.MemorySegment src_image, java.lang.foreign.MemorySegment dst_image, int mipmap_filter_mode, java.lang.foreign.MemorySegment array_region, java.lang.foreign.MemorySegment mip_region, int num_events_in_wait_list, java.lang.foreign.MemorySegment event_wait_list, java.lang.foreign.MemorySegment event);
    static MemorySegment allocate(clEnqueueGenerateMipmapIMG_fn fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$233.const$1, fi, constants$233.const$0, scope);
    }
    static clEnqueueGenerateMipmapIMG_fn ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (java.lang.foreign.MemorySegment _command_queue, java.lang.foreign.MemorySegment _src_image, java.lang.foreign.MemorySegment _dst_image, int _mipmap_filter_mode, java.lang.foreign.MemorySegment _array_region, java.lang.foreign.MemorySegment _mip_region, int _num_events_in_wait_list, java.lang.foreign.MemorySegment _event_wait_list, java.lang.foreign.MemorySegment _event) -> {
            try {
                return (int)constants$233.const$2.invokeExact(symbol, _command_queue, _src_image, _dst_image, _mipmap_filter_mode, _array_region, _mip_region, _num_events_in_wait_list, _event_wait_list, _event);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}



// Generated by jextract

package com.twitter.teruteru128.preview.opencl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _cl_image_desc {
 *     cl_mem_object_type image_type;
 *     size_t image_width;
 *     size_t image_height;
 *     size_t image_depth;
 *     size_t image_array_size;
 *     size_t image_row_pitch;
 *     size_t image_slice_pitch;
 *     cl_uint num_mip_levels;
 *     cl_uint num_samples;
 *     union {
 *         cl_mem buffer;
 *         cl_mem mem_object;
 *     };
 * };
 * }
 */
public class _cl_image_desc {

    public static MemoryLayout $LAYOUT() {
        return constants$173.const$3;
    }
    public static VarHandle image_type$VH() {
        return constants$173.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * cl_mem_object_type image_type;
     * }
     */
    public static int image_type$get(MemorySegment seg) {
        return (int)constants$173.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * cl_mem_object_type image_type;
     * }
     */
    public static void image_type$set(MemorySegment seg, int x) {
        constants$173.const$4.set(seg, x);
    }
    public static int image_type$get(MemorySegment seg, long index) {
        return (int)constants$173.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void image_type$set(MemorySegment seg, long index, int x) {
        constants$173.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle image_width$VH() {
        return constants$173.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t image_width;
     * }
     */
    public static long image_width$get(MemorySegment seg) {
        return (long)constants$173.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t image_width;
     * }
     */
    public static void image_width$set(MemorySegment seg, long x) {
        constants$173.const$5.set(seg, x);
    }
    public static long image_width$get(MemorySegment seg, long index) {
        return (long)constants$173.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void image_width$set(MemorySegment seg, long index, long x) {
        constants$173.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle image_height$VH() {
        return constants$174.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t image_height;
     * }
     */
    public static long image_height$get(MemorySegment seg) {
        return (long)constants$174.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t image_height;
     * }
     */
    public static void image_height$set(MemorySegment seg, long x) {
        constants$174.const$0.set(seg, x);
    }
    public static long image_height$get(MemorySegment seg, long index) {
        return (long)constants$174.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void image_height$set(MemorySegment seg, long index, long x) {
        constants$174.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle image_depth$VH() {
        return constants$174.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t image_depth;
     * }
     */
    public static long image_depth$get(MemorySegment seg) {
        return (long)constants$174.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t image_depth;
     * }
     */
    public static void image_depth$set(MemorySegment seg, long x) {
        constants$174.const$1.set(seg, x);
    }
    public static long image_depth$get(MemorySegment seg, long index) {
        return (long)constants$174.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void image_depth$set(MemorySegment seg, long index, long x) {
        constants$174.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle image_array_size$VH() {
        return constants$174.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t image_array_size;
     * }
     */
    public static long image_array_size$get(MemorySegment seg) {
        return (long)constants$174.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t image_array_size;
     * }
     */
    public static void image_array_size$set(MemorySegment seg, long x) {
        constants$174.const$2.set(seg, x);
    }
    public static long image_array_size$get(MemorySegment seg, long index) {
        return (long)constants$174.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void image_array_size$set(MemorySegment seg, long index, long x) {
        constants$174.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle image_row_pitch$VH() {
        return constants$174.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t image_row_pitch;
     * }
     */
    public static long image_row_pitch$get(MemorySegment seg) {
        return (long)constants$174.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t image_row_pitch;
     * }
     */
    public static void image_row_pitch$set(MemorySegment seg, long x) {
        constants$174.const$3.set(seg, x);
    }
    public static long image_row_pitch$get(MemorySegment seg, long index) {
        return (long)constants$174.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void image_row_pitch$set(MemorySegment seg, long index, long x) {
        constants$174.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle image_slice_pitch$VH() {
        return constants$174.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t image_slice_pitch;
     * }
     */
    public static long image_slice_pitch$get(MemorySegment seg) {
        return (long)constants$174.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t image_slice_pitch;
     * }
     */
    public static void image_slice_pitch$set(MemorySegment seg, long x) {
        constants$174.const$4.set(seg, x);
    }
    public static long image_slice_pitch$get(MemorySegment seg, long index) {
        return (long)constants$174.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void image_slice_pitch$set(MemorySegment seg, long index, long x) {
        constants$174.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle num_mip_levels$VH() {
        return constants$174.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * cl_uint num_mip_levels;
     * }
     */
    public static int num_mip_levels$get(MemorySegment seg) {
        return (int)constants$174.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * cl_uint num_mip_levels;
     * }
     */
    public static void num_mip_levels$set(MemorySegment seg, int x) {
        constants$174.const$5.set(seg, x);
    }
    public static int num_mip_levels$get(MemorySegment seg, long index) {
        return (int)constants$174.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void num_mip_levels$set(MemorySegment seg, long index, int x) {
        constants$174.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle num_samples$VH() {
        return constants$175.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * cl_uint num_samples;
     * }
     */
    public static int num_samples$get(MemorySegment seg) {
        return (int)constants$175.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * cl_uint num_samples;
     * }
     */
    public static void num_samples$set(MemorySegment seg, int x) {
        constants$175.const$0.set(seg, x);
    }
    public static int num_samples$get(MemorySegment seg, long index) {
        return (int)constants$175.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void num_samples$set(MemorySegment seg, long index, int x) {
        constants$175.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle buffer$VH() {
        return constants$175.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * cl_mem buffer;
     * }
     */
    public static MemorySegment buffer$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$175.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * cl_mem buffer;
     * }
     */
    public static void buffer$set(MemorySegment seg, MemorySegment x) {
        constants$175.const$1.set(seg, x);
    }
    public static MemorySegment buffer$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$175.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void buffer$set(MemorySegment seg, long index, MemorySegment x) {
        constants$175.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle mem_object$VH() {
        return constants$175.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * cl_mem mem_object;
     * }
     */
    public static MemorySegment mem_object$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$175.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * cl_mem mem_object;
     * }
     */
    public static void mem_object$set(MemorySegment seg, MemorySegment x) {
        constants$175.const$2.set(seg, x);
    }
    public static MemorySegment mem_object$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$175.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void mem_object$set(MemorySegment seg, long index, MemorySegment x) {
        constants$175.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



// Generated by jextract

package com.twitter.teruteru128.preview.opencl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * int (*clGetMemAllocInfoINTEL_fn)(struct _cl_context* context,void* ptr,unsigned int param_name,unsigned long long param_value_size,void* param_value,unsigned long long* param_value_size_ret);
 * }
 */
public interface clGetMemAllocInfoINTEL_fn {

    int apply(java.lang.foreign.MemorySegment context, java.lang.foreign.MemorySegment ptr, int param_name, long param_value_size, java.lang.foreign.MemorySegment param_value, java.lang.foreign.MemorySegment param_value_size_ret);
    static MemorySegment allocate(clGetMemAllocInfoINTEL_fn fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$249.const$2, fi, constants$190.const$2, scope);
    }
    static clGetMemAllocInfoINTEL_fn ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (java.lang.foreign.MemorySegment _context, java.lang.foreign.MemorySegment _ptr, int _param_name, long _param_value_size, java.lang.foreign.MemorySegment _param_value, java.lang.foreign.MemorySegment _param_value_size_ret) -> {
            try {
                return (int)constants$237.const$4.invokeExact(symbol, _context, _ptr, _param_name, _param_value_size, _param_value, _param_value_size_ret);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}



// Generated by jextract

package com.twitter.teruteru128.preview.opencl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * int (*clCommandFillBufferKHR_fn)(struct _cl_command_buffer_khr* command_buffer,struct _cl_command_queue* command_queue,struct _cl_mem* buffer,void* pattern,unsigned long long pattern_size,unsigned long long offset,unsigned long long size,unsigned int num_sync_points_in_wait_list,unsigned int* sync_point_wait_list,unsigned int* sync_point,struct _cl_mutable_command_khr** mutable_handle);
 * }
 */
public interface clCommandFillBufferKHR_fn {

    int apply(java.lang.foreign.MemorySegment command_buffer, java.lang.foreign.MemorySegment command_queue, java.lang.foreign.MemorySegment buffer, java.lang.foreign.MemorySegment pattern, long pattern_size, long offset, long size, int num_sync_points_in_wait_list, java.lang.foreign.MemorySegment sync_point_wait_list, java.lang.foreign.MemorySegment sync_point, java.lang.foreign.MemorySegment mutable_handle);
    static MemorySegment allocate(clCommandFillBufferKHR_fn fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$215.const$4, fi, constants$213.const$1, scope);
    }
    static clCommandFillBufferKHR_fn ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (java.lang.foreign.MemorySegment _command_buffer, java.lang.foreign.MemorySegment _command_queue, java.lang.foreign.MemorySegment _buffer, java.lang.foreign.MemorySegment _pattern, long _pattern_size, long _offset, long _size, int _num_sync_points_in_wait_list, java.lang.foreign.MemorySegment _sync_point_wait_list, java.lang.foreign.MemorySegment _sync_point, java.lang.foreign.MemorySegment _mutable_handle) -> {
            try {
                return (int)constants$213.const$3.invokeExact(symbol, _command_buffer, _command_queue, _buffer, _pattern, _pattern_size, _offset, _size, _num_sync_points_in_wait_list, _sync_point_wait_list, _sync_point, _mutable_handle);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}



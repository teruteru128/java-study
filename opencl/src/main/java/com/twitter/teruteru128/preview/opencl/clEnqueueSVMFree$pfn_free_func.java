// Generated by jextract

package com.twitter.teruteru128.preview.opencl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * void (*clEnqueueSVMFree$pfn_free_func)(cl_command_queue,cl_uint,void**,void*);
 * }
 */
public interface clEnqueueSVMFree$pfn_free_func {

    void apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
    static MemorySegment allocate(clEnqueueSVMFree$pfn_free_func fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$201.const$3, fi, constants$201.const$2, scope);
    }
    static clEnqueueSVMFree$pfn_free_func ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
            try {
                constants$201.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}



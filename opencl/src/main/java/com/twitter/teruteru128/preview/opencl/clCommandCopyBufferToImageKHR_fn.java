// Generated by jextract

package com.twitter.teruteru128.preview.opencl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * int (*clCommandCopyBufferToImageKHR_fn)(struct _cl_command_buffer_khr* command_buffer,struct _cl_command_queue* command_queue,struct _cl_mem* src_buffer,struct _cl_mem* dst_image,unsigned long long src_offset,unsigned long long* dst_origin,unsigned long long* region,unsigned int num_sync_points_in_wait_list,unsigned int* sync_point_wait_list,unsigned int* sync_point,struct _cl_mutable_command_khr** mutable_handle);
 * }
 */
public interface clCommandCopyBufferToImageKHR_fn {

    int apply(java.lang.foreign.MemorySegment command_buffer, java.lang.foreign.MemorySegment command_queue, java.lang.foreign.MemorySegment src_buffer, java.lang.foreign.MemorySegment dst_image, long src_offset, java.lang.foreign.MemorySegment dst_origin, java.lang.foreign.MemorySegment region, int num_sync_points_in_wait_list, java.lang.foreign.MemorySegment sync_point_wait_list, java.lang.foreign.MemorySegment sync_point, java.lang.foreign.MemorySegment mutable_handle);
    static MemorySegment allocate(clCommandCopyBufferToImageKHR_fn fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$214.const$2, fi, constants$214.const$1, scope);
    }
    static clCommandCopyBufferToImageKHR_fn ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (java.lang.foreign.MemorySegment _command_buffer, java.lang.foreign.MemorySegment _command_queue, java.lang.foreign.MemorySegment _src_buffer, java.lang.foreign.MemorySegment _dst_image, long _src_offset, java.lang.foreign.MemorySegment _dst_origin, java.lang.foreign.MemorySegment _region, int _num_sync_points_in_wait_list, java.lang.foreign.MemorySegment _sync_point_wait_list, java.lang.foreign.MemorySegment _sync_point, java.lang.foreign.MemorySegment _mutable_handle) -> {
            try {
                return (int)constants$214.const$3.invokeExact(symbol, _command_buffer, _command_queue, _src_buffer, _dst_image, _src_offset, _dst_origin, _region, _num_sync_points_in_wait_list, _sync_point_wait_list, _sync_point, _mutable_handle);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}



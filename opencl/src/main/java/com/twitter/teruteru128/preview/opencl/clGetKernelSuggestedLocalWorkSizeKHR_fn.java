// Generated by jextract

package com.twitter.teruteru128.preview.opencl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * int (*clGetKernelSuggestedLocalWorkSizeKHR_fn)(struct _cl_command_queue* command_queue,struct _cl_kernel* kernel,unsigned int work_dim,unsigned long long* global_work_offset,unsigned long long* global_work_size,unsigned long long* suggested_local_work_size);
 * }
 */
public interface clGetKernelSuggestedLocalWorkSizeKHR_fn {

    int apply(java.lang.foreign.MemorySegment command_queue, java.lang.foreign.MemorySegment kernel, int work_dim, java.lang.foreign.MemorySegment global_work_offset, java.lang.foreign.MemorySegment global_work_size, java.lang.foreign.MemorySegment suggested_local_work_size);
    static MemorySegment allocate(clGetKernelSuggestedLocalWorkSizeKHR_fn fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$235.const$2, fi, constants$212.const$4, scope);
    }
    static clGetKernelSuggestedLocalWorkSizeKHR_fn ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (java.lang.foreign.MemorySegment _command_queue, java.lang.foreign.MemorySegment _kernel, int _work_dim, java.lang.foreign.MemorySegment _global_work_offset, java.lang.foreign.MemorySegment _global_work_size, java.lang.foreign.MemorySegment _suggested_local_work_size) -> {
            try {
                return (int)constants$213.const$0.invokeExact(symbol, _command_queue, _kernel, _work_dim, _global_work_offset, _global_work_size, _suggested_local_work_size);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}



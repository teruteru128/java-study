// Generated by jextract

package com.github.teruteru128.mpfr;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class mpfr_h {

    mpfr_h() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.libraryLookup("C:\\msys64\\usr\\local\\bin\\libmpfr-6.dll", LIBRARY_ARENA)
            .or(SymbolLookup.loaderLookup())
            .or(Linker.nativeLinker().defaultLookup());

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));
    public static final ValueLayout.OfInt C_LONG = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfDouble C_LONG_DOUBLE = ValueLayout.JAVA_DOUBLE;
    private static final int MPFR_VERSION_MAJOR = (int)4L;
    /**
     * {@snippet lang=c :
     * #define MPFR_VERSION_MAJOR 4
     * }
     */
    public static int MPFR_VERSION_MAJOR() {
        return MPFR_VERSION_MAJOR;
    }
    private static final int MPFR_VERSION_MINOR = (int)2L;
    /**
     * {@snippet lang=c :
     * #define MPFR_VERSION_MINOR 2
     * }
     */
    public static int MPFR_VERSION_MINOR() {
        return MPFR_VERSION_MINOR;
    }
    private static final int MPFR_VERSION_PATCHLEVEL = (int)1L;
    /**
     * {@snippet lang=c :
     * #define MPFR_VERSION_PATCHLEVEL 1
     * }
     */
    public static int MPFR_VERSION_PATCHLEVEL() {
        return MPFR_VERSION_PATCHLEVEL;
    }
    private static final int MPFR_FLAGS_UNDERFLOW = (int)1L;
    /**
     * {@snippet lang=c :
     * #define MPFR_FLAGS_UNDERFLOW 1
     * }
     */
    public static int MPFR_FLAGS_UNDERFLOW() {
        return MPFR_FLAGS_UNDERFLOW;
    }
    private static final int MPFR_FLAGS_OVERFLOW = (int)2L;
    /**
     * {@snippet lang=c :
     * #define MPFR_FLAGS_OVERFLOW 2
     * }
     */
    public static int MPFR_FLAGS_OVERFLOW() {
        return MPFR_FLAGS_OVERFLOW;
    }
    private static final int MPFR_FLAGS_NAN = (int)4L;
    /**
     * {@snippet lang=c :
     * #define MPFR_FLAGS_NAN 4
     * }
     */
    public static int MPFR_FLAGS_NAN() {
        return MPFR_FLAGS_NAN;
    }
    private static final int MPFR_FLAGS_INEXACT = (int)8L;
    /**
     * {@snippet lang=c :
     * #define MPFR_FLAGS_INEXACT 8
     * }
     */
    public static int MPFR_FLAGS_INEXACT() {
        return MPFR_FLAGS_INEXACT;
    }
    private static final int MPFR_FLAGS_ERANGE = (int)16L;
    /**
     * {@snippet lang=c :
     * #define MPFR_FLAGS_ERANGE 16
     * }
     */
    public static int MPFR_FLAGS_ERANGE() {
        return MPFR_FLAGS_ERANGE;
    }
    private static final int MPFR_FLAGS_DIVBY0 = (int)32L;
    /**
     * {@snippet lang=c :
     * #define MPFR_FLAGS_DIVBY0 32
     * }
     */
    public static int MPFR_FLAGS_DIVBY0() {
        return MPFR_FLAGS_DIVBY0;
    }
    private static final int _MPFR_PREC_FORMAT = (int)3L;
    /**
     * {@snippet lang=c :
     * #define _MPFR_PREC_FORMAT 3
     * }
     */
    public static int _MPFR_PREC_FORMAT() {
        return _MPFR_PREC_FORMAT;
    }
    private static final int MPFR_PREC_MIN = (int)1L;
    /**
     * {@snippet lang=c :
     * #define MPFR_PREC_MIN 1
     * }
     */
    public static int MPFR_PREC_MIN() {
        return MPFR_PREC_MIN;
    }
    private static final int MPFR_USE_C99_FEATURE = (int)0L;
    /**
     * {@snippet lang=c :
     * #define MPFR_USE_C99_FEATURE 0
     * }
     */
    public static int MPFR_USE_C99_FEATURE() {
        return MPFR_USE_C99_FEATURE;
    }
    /**
     * {@snippet lang=c :
     * typedef int mpfr_int
     * }
     */
    public static final OfInt mpfr_int = mpfr_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int mpfr_uint
     * }
     */
    public static final OfInt mpfr_uint = mpfr_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long mpfr_long
     * }
     */
    public static final OfInt mpfr_long = mpfr_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long mpfr_ulong
     * }
     */
    public static final OfInt mpfr_ulong = mpfr_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef size_t mpfr_size_t
     * }
     */
    public static final OfLong mpfr_size_t = mpfr_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int mpfr_flags_t
     * }
     */
    public static final OfInt mpfr_flags_t = mpfr_h.C_INT;
    private static final int MPFR_RNDN = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MPFR_RNDN = 0
     * }
     */
    public static int MPFR_RNDN() {
        return MPFR_RNDN;
    }
    private static final int MPFR_RNDZ = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MPFR_RNDZ = 1
     * }
     */
    public static int MPFR_RNDZ() {
        return MPFR_RNDZ;
    }
    private static final int MPFR_RNDU = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MPFR_RNDU = 2
     * }
     */
    public static int MPFR_RNDU() {
        return MPFR_RNDU;
    }
    private static final int MPFR_RNDD = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MPFR_RNDD = 3
     * }
     */
    public static int MPFR_RNDD() {
        return MPFR_RNDD;
    }
    private static final int MPFR_RNDA = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MPFR_RNDA = 4
     * }
     */
    public static int MPFR_RNDA() {
        return MPFR_RNDA;
    }
    private static final int MPFR_RNDF = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MPFR_RNDF = 5
     * }
     */
    public static int MPFR_RNDF() {
        return MPFR_RNDF;
    }
    private static final int MPFR_RNDNA = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MPFR_RNDNA = -1
     * }
     */
    public static int MPFR_RNDNA() {
        return MPFR_RNDNA;
    }
    /**
     * {@snippet lang=c :
     * typedef long mpfr_prec_t
     * }
     */
    public static final OfInt mpfr_prec_t = mpfr_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long mpfr_uprec_t
     * }
     */
    public static final OfInt mpfr_uprec_t = mpfr_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int mpfr_sign_t
     * }
     */
    public static final OfInt mpfr_sign_t = mpfr_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long mpfr_exp_t
     * }
     */
    public static final OfInt mpfr_exp_t = mpfr_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long mpfr_uexp_t
     * }
     */
    public static final OfInt mpfr_uexp_t = mpfr_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __mpfr_struct *mpfr_ptr
     * }
     */
    public static final AddressLayout mpfr_ptr = mpfr_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const __mpfr_struct *mpfr_srcptr
     * }
     */
    public static final AddressLayout mpfr_srcptr = mpfr_h.C_POINTER;
    private static final int MPFR_NAN_KIND = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MPFR_NAN_KIND = 0
     * }
     */
    public static int MPFR_NAN_KIND() {
        return MPFR_NAN_KIND;
    }
    private static final int MPFR_INF_KIND = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MPFR_INF_KIND = 1
     * }
     */
    public static int MPFR_INF_KIND() {
        return MPFR_INF_KIND;
    }
    private static final int MPFR_ZERO_KIND = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MPFR_ZERO_KIND = 2
     * }
     */
    public static int MPFR_ZERO_KIND() {
        return MPFR_ZERO_KIND;
    }
    private static final int MPFR_REGULAR_KIND = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MPFR_REGULAR_KIND = 3
     * }
     */
    public static int MPFR_REGULAR_KIND() {
        return MPFR_REGULAR_KIND;
    }
    private static final int MPFR_FREE_LOCAL_CACHE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MPFR_FREE_LOCAL_CACHE = 1
     * }
     */
    public static int MPFR_FREE_LOCAL_CACHE() {
        return MPFR_FREE_LOCAL_CACHE;
    }
    private static final int MPFR_FREE_GLOBAL_CACHE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MPFR_FREE_GLOBAL_CACHE = 2
     * }
     */
    public static int MPFR_FREE_GLOBAL_CACHE() {
        return MPFR_FREE_GLOBAL_CACHE;
    }

    private static class mpfr_get_version {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_POINTER    );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_get_version");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *mpfr_get_version()
     * }
     */
    public static FunctionDescriptor mpfr_get_version$descriptor() {
        return mpfr_get_version.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *mpfr_get_version()
     * }
     */
    public static MethodHandle mpfr_get_version$handle() {
        return mpfr_get_version.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *mpfr_get_version()
     * }
     */
    public static MemorySegment mpfr_get_version$address() {
        return mpfr_get_version.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *mpfr_get_version()
     * }
     */
    public static MemorySegment mpfr_get_version() {
        var mh$ = mpfr_get_version.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_get_version");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_get_patches {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_POINTER    );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_get_patches");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *mpfr_get_patches()
     * }
     */
    public static FunctionDescriptor mpfr_get_patches$descriptor() {
        return mpfr_get_patches.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *mpfr_get_patches()
     * }
     */
    public static MethodHandle mpfr_get_patches$handle() {
        return mpfr_get_patches.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *mpfr_get_patches()
     * }
     */
    public static MemorySegment mpfr_get_patches$address() {
        return mpfr_get_patches.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *mpfr_get_patches()
     * }
     */
    public static MemorySegment mpfr_get_patches() {
        var mh$ = mpfr_get_patches.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_get_patches");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_buildopt_tls_p {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT    );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_buildopt_tls_p");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_buildopt_tls_p()
     * }
     */
    public static FunctionDescriptor mpfr_buildopt_tls_p$descriptor() {
        return mpfr_buildopt_tls_p.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_buildopt_tls_p()
     * }
     */
    public static MethodHandle mpfr_buildopt_tls_p$handle() {
        return mpfr_buildopt_tls_p.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_buildopt_tls_p()
     * }
     */
    public static MemorySegment mpfr_buildopt_tls_p$address() {
        return mpfr_buildopt_tls_p.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_buildopt_tls_p()
     * }
     */
    public static int mpfr_buildopt_tls_p() {
        var mh$ = mpfr_buildopt_tls_p.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_buildopt_tls_p");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_buildopt_float128_p {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT    );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_buildopt_float128_p");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_buildopt_float128_p()
     * }
     */
    public static FunctionDescriptor mpfr_buildopt_float128_p$descriptor() {
        return mpfr_buildopt_float128_p.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_buildopt_float128_p()
     * }
     */
    public static MethodHandle mpfr_buildopt_float128_p$handle() {
        return mpfr_buildopt_float128_p.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_buildopt_float128_p()
     * }
     */
    public static MemorySegment mpfr_buildopt_float128_p$address() {
        return mpfr_buildopt_float128_p.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_buildopt_float128_p()
     * }
     */
    public static int mpfr_buildopt_float128_p() {
        var mh$ = mpfr_buildopt_float128_p.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_buildopt_float128_p");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_buildopt_decimal_p {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT    );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_buildopt_decimal_p");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_buildopt_decimal_p()
     * }
     */
    public static FunctionDescriptor mpfr_buildopt_decimal_p$descriptor() {
        return mpfr_buildopt_decimal_p.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_buildopt_decimal_p()
     * }
     */
    public static MethodHandle mpfr_buildopt_decimal_p$handle() {
        return mpfr_buildopt_decimal_p.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_buildopt_decimal_p()
     * }
     */
    public static MemorySegment mpfr_buildopt_decimal_p$address() {
        return mpfr_buildopt_decimal_p.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_buildopt_decimal_p()
     * }
     */
    public static int mpfr_buildopt_decimal_p() {
        var mh$ = mpfr_buildopt_decimal_p.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_buildopt_decimal_p");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_buildopt_gmpinternals_p {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT    );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_buildopt_gmpinternals_p");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_buildopt_gmpinternals_p()
     * }
     */
    public static FunctionDescriptor mpfr_buildopt_gmpinternals_p$descriptor() {
        return mpfr_buildopt_gmpinternals_p.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_buildopt_gmpinternals_p()
     * }
     */
    public static MethodHandle mpfr_buildopt_gmpinternals_p$handle() {
        return mpfr_buildopt_gmpinternals_p.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_buildopt_gmpinternals_p()
     * }
     */
    public static MemorySegment mpfr_buildopt_gmpinternals_p$address() {
        return mpfr_buildopt_gmpinternals_p.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_buildopt_gmpinternals_p()
     * }
     */
    public static int mpfr_buildopt_gmpinternals_p() {
        var mh$ = mpfr_buildopt_gmpinternals_p.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_buildopt_gmpinternals_p");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_buildopt_sharedcache_p {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT    );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_buildopt_sharedcache_p");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_buildopt_sharedcache_p()
     * }
     */
    public static FunctionDescriptor mpfr_buildopt_sharedcache_p$descriptor() {
        return mpfr_buildopt_sharedcache_p.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_buildopt_sharedcache_p()
     * }
     */
    public static MethodHandle mpfr_buildopt_sharedcache_p$handle() {
        return mpfr_buildopt_sharedcache_p.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_buildopt_sharedcache_p()
     * }
     */
    public static MemorySegment mpfr_buildopt_sharedcache_p$address() {
        return mpfr_buildopt_sharedcache_p.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_buildopt_sharedcache_p()
     * }
     */
    public static int mpfr_buildopt_sharedcache_p() {
        var mh$ = mpfr_buildopt_sharedcache_p.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_buildopt_sharedcache_p");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_buildopt_tune_case {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_POINTER    );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_buildopt_tune_case");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *mpfr_buildopt_tune_case()
     * }
     */
    public static FunctionDescriptor mpfr_buildopt_tune_case$descriptor() {
        return mpfr_buildopt_tune_case.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *mpfr_buildopt_tune_case()
     * }
     */
    public static MethodHandle mpfr_buildopt_tune_case$handle() {
        return mpfr_buildopt_tune_case.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *mpfr_buildopt_tune_case()
     * }
     */
    public static MemorySegment mpfr_buildopt_tune_case$address() {
        return mpfr_buildopt_tune_case.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *mpfr_buildopt_tune_case()
     * }
     */
    public static MemorySegment mpfr_buildopt_tune_case() {
        var mh$ = mpfr_buildopt_tune_case.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_buildopt_tune_case");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_get_emin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_LONG    );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_get_emin");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * mpfr_exp_t mpfr_get_emin()
     * }
     */
    public static FunctionDescriptor mpfr_get_emin$descriptor() {
        return mpfr_get_emin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * mpfr_exp_t mpfr_get_emin()
     * }
     */
    public static MethodHandle mpfr_get_emin$handle() {
        return mpfr_get_emin.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * mpfr_exp_t mpfr_get_emin()
     * }
     */
    public static MemorySegment mpfr_get_emin$address() {
        return mpfr_get_emin.ADDR;
    }

    /**
     * {@snippet lang=c :
     * mpfr_exp_t mpfr_get_emin()
     * }
     */
    public static int mpfr_get_emin() {
        var mh$ = mpfr_get_emin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_get_emin");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_set_emin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_LONG
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_set_emin");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_set_emin(mpfr_exp_t)
     * }
     */
    public static FunctionDescriptor mpfr_set_emin$descriptor() {
        return mpfr_set_emin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_set_emin(mpfr_exp_t)
     * }
     */
    public static MethodHandle mpfr_set_emin$handle() {
        return mpfr_set_emin.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_set_emin(mpfr_exp_t)
     * }
     */
    public static MemorySegment mpfr_set_emin$address() {
        return mpfr_set_emin.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_set_emin(mpfr_exp_t)
     * }
     */
    public static int mpfr_set_emin(int x0) {
        var mh$ = mpfr_set_emin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_set_emin", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_get_emin_min {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_LONG    );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_get_emin_min");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * mpfr_exp_t mpfr_get_emin_min()
     * }
     */
    public static FunctionDescriptor mpfr_get_emin_min$descriptor() {
        return mpfr_get_emin_min.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * mpfr_exp_t mpfr_get_emin_min()
     * }
     */
    public static MethodHandle mpfr_get_emin_min$handle() {
        return mpfr_get_emin_min.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * mpfr_exp_t mpfr_get_emin_min()
     * }
     */
    public static MemorySegment mpfr_get_emin_min$address() {
        return mpfr_get_emin_min.ADDR;
    }

    /**
     * {@snippet lang=c :
     * mpfr_exp_t mpfr_get_emin_min()
     * }
     */
    public static int mpfr_get_emin_min() {
        var mh$ = mpfr_get_emin_min.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_get_emin_min");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_get_emin_max {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_LONG    );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_get_emin_max");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * mpfr_exp_t mpfr_get_emin_max()
     * }
     */
    public static FunctionDescriptor mpfr_get_emin_max$descriptor() {
        return mpfr_get_emin_max.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * mpfr_exp_t mpfr_get_emin_max()
     * }
     */
    public static MethodHandle mpfr_get_emin_max$handle() {
        return mpfr_get_emin_max.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * mpfr_exp_t mpfr_get_emin_max()
     * }
     */
    public static MemorySegment mpfr_get_emin_max$address() {
        return mpfr_get_emin_max.ADDR;
    }

    /**
     * {@snippet lang=c :
     * mpfr_exp_t mpfr_get_emin_max()
     * }
     */
    public static int mpfr_get_emin_max() {
        var mh$ = mpfr_get_emin_max.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_get_emin_max");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_get_emax {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_LONG    );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_get_emax");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * mpfr_exp_t mpfr_get_emax()
     * }
     */
    public static FunctionDescriptor mpfr_get_emax$descriptor() {
        return mpfr_get_emax.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * mpfr_exp_t mpfr_get_emax()
     * }
     */
    public static MethodHandle mpfr_get_emax$handle() {
        return mpfr_get_emax.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * mpfr_exp_t mpfr_get_emax()
     * }
     */
    public static MemorySegment mpfr_get_emax$address() {
        return mpfr_get_emax.ADDR;
    }

    /**
     * {@snippet lang=c :
     * mpfr_exp_t mpfr_get_emax()
     * }
     */
    public static int mpfr_get_emax() {
        var mh$ = mpfr_get_emax.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_get_emax");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_set_emax {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_LONG
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_set_emax");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_set_emax(mpfr_exp_t)
     * }
     */
    public static FunctionDescriptor mpfr_set_emax$descriptor() {
        return mpfr_set_emax.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_set_emax(mpfr_exp_t)
     * }
     */
    public static MethodHandle mpfr_set_emax$handle() {
        return mpfr_set_emax.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_set_emax(mpfr_exp_t)
     * }
     */
    public static MemorySegment mpfr_set_emax$address() {
        return mpfr_set_emax.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_set_emax(mpfr_exp_t)
     * }
     */
    public static int mpfr_set_emax(int x0) {
        var mh$ = mpfr_set_emax.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_set_emax", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_get_emax_min {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_LONG    );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_get_emax_min");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * mpfr_exp_t mpfr_get_emax_min()
     * }
     */
    public static FunctionDescriptor mpfr_get_emax_min$descriptor() {
        return mpfr_get_emax_min.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * mpfr_exp_t mpfr_get_emax_min()
     * }
     */
    public static MethodHandle mpfr_get_emax_min$handle() {
        return mpfr_get_emax_min.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * mpfr_exp_t mpfr_get_emax_min()
     * }
     */
    public static MemorySegment mpfr_get_emax_min$address() {
        return mpfr_get_emax_min.ADDR;
    }

    /**
     * {@snippet lang=c :
     * mpfr_exp_t mpfr_get_emax_min()
     * }
     */
    public static int mpfr_get_emax_min() {
        var mh$ = mpfr_get_emax_min.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_get_emax_min");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_get_emax_max {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_LONG    );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_get_emax_max");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * mpfr_exp_t mpfr_get_emax_max()
     * }
     */
    public static FunctionDescriptor mpfr_get_emax_max$descriptor() {
        return mpfr_get_emax_max.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * mpfr_exp_t mpfr_get_emax_max()
     * }
     */
    public static MethodHandle mpfr_get_emax_max$handle() {
        return mpfr_get_emax_max.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * mpfr_exp_t mpfr_get_emax_max()
     * }
     */
    public static MemorySegment mpfr_get_emax_max$address() {
        return mpfr_get_emax_max.ADDR;
    }

    /**
     * {@snippet lang=c :
     * mpfr_exp_t mpfr_get_emax_max()
     * }
     */
    public static int mpfr_get_emax_max() {
        var mh$ = mpfr_get_emax_max.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_get_emax_max");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_set_default_rounding_mode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_set_default_rounding_mode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void mpfr_set_default_rounding_mode(mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_set_default_rounding_mode$descriptor() {
        return mpfr_set_default_rounding_mode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void mpfr_set_default_rounding_mode(mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_set_default_rounding_mode$handle() {
        return mpfr_set_default_rounding_mode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void mpfr_set_default_rounding_mode(mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_set_default_rounding_mode$address() {
        return mpfr_set_default_rounding_mode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void mpfr_set_default_rounding_mode(mpfr_rnd_t)
     * }
     */
    public static void mpfr_set_default_rounding_mode(int x0) {
        var mh$ = mpfr_set_default_rounding_mode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_set_default_rounding_mode", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_get_default_rounding_mode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT    );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_get_default_rounding_mode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * mpfr_rnd_t mpfr_get_default_rounding_mode()
     * }
     */
    public static FunctionDescriptor mpfr_get_default_rounding_mode$descriptor() {
        return mpfr_get_default_rounding_mode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * mpfr_rnd_t mpfr_get_default_rounding_mode()
     * }
     */
    public static MethodHandle mpfr_get_default_rounding_mode$handle() {
        return mpfr_get_default_rounding_mode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * mpfr_rnd_t mpfr_get_default_rounding_mode()
     * }
     */
    public static MemorySegment mpfr_get_default_rounding_mode$address() {
        return mpfr_get_default_rounding_mode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * mpfr_rnd_t mpfr_get_default_rounding_mode()
     * }
     */
    public static int mpfr_get_default_rounding_mode() {
        var mh$ = mpfr_get_default_rounding_mode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_get_default_rounding_mode");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_print_rnd_mode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_print_rnd_mode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *mpfr_print_rnd_mode(mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_print_rnd_mode$descriptor() {
        return mpfr_print_rnd_mode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *mpfr_print_rnd_mode(mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_print_rnd_mode$handle() {
        return mpfr_print_rnd_mode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *mpfr_print_rnd_mode(mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_print_rnd_mode$address() {
        return mpfr_print_rnd_mode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *mpfr_print_rnd_mode(mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_print_rnd_mode(int x0) {
        var mh$ = mpfr_print_rnd_mode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_print_rnd_mode", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_clear_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_clear_flags");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void mpfr_clear_flags()
     * }
     */
    public static FunctionDescriptor mpfr_clear_flags$descriptor() {
        return mpfr_clear_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void mpfr_clear_flags()
     * }
     */
    public static MethodHandle mpfr_clear_flags$handle() {
        return mpfr_clear_flags.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void mpfr_clear_flags()
     * }
     */
    public static MemorySegment mpfr_clear_flags$address() {
        return mpfr_clear_flags.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void mpfr_clear_flags()
     * }
     */
    public static void mpfr_clear_flags() {
        var mh$ = mpfr_clear_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_clear_flags");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_clear_underflow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_clear_underflow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void mpfr_clear_underflow()
     * }
     */
    public static FunctionDescriptor mpfr_clear_underflow$descriptor() {
        return mpfr_clear_underflow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void mpfr_clear_underflow()
     * }
     */
    public static MethodHandle mpfr_clear_underflow$handle() {
        return mpfr_clear_underflow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void mpfr_clear_underflow()
     * }
     */
    public static MemorySegment mpfr_clear_underflow$address() {
        return mpfr_clear_underflow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void mpfr_clear_underflow()
     * }
     */
    public static void mpfr_clear_underflow() {
        var mh$ = mpfr_clear_underflow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_clear_underflow");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_clear_overflow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_clear_overflow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void mpfr_clear_overflow()
     * }
     */
    public static FunctionDescriptor mpfr_clear_overflow$descriptor() {
        return mpfr_clear_overflow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void mpfr_clear_overflow()
     * }
     */
    public static MethodHandle mpfr_clear_overflow$handle() {
        return mpfr_clear_overflow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void mpfr_clear_overflow()
     * }
     */
    public static MemorySegment mpfr_clear_overflow$address() {
        return mpfr_clear_overflow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void mpfr_clear_overflow()
     * }
     */
    public static void mpfr_clear_overflow() {
        var mh$ = mpfr_clear_overflow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_clear_overflow");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_clear_divby0 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_clear_divby0");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void mpfr_clear_divby0()
     * }
     */
    public static FunctionDescriptor mpfr_clear_divby0$descriptor() {
        return mpfr_clear_divby0.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void mpfr_clear_divby0()
     * }
     */
    public static MethodHandle mpfr_clear_divby0$handle() {
        return mpfr_clear_divby0.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void mpfr_clear_divby0()
     * }
     */
    public static MemorySegment mpfr_clear_divby0$address() {
        return mpfr_clear_divby0.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void mpfr_clear_divby0()
     * }
     */
    public static void mpfr_clear_divby0() {
        var mh$ = mpfr_clear_divby0.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_clear_divby0");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_clear_nanflag {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_clear_nanflag");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void mpfr_clear_nanflag()
     * }
     */
    public static FunctionDescriptor mpfr_clear_nanflag$descriptor() {
        return mpfr_clear_nanflag.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void mpfr_clear_nanflag()
     * }
     */
    public static MethodHandle mpfr_clear_nanflag$handle() {
        return mpfr_clear_nanflag.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void mpfr_clear_nanflag()
     * }
     */
    public static MemorySegment mpfr_clear_nanflag$address() {
        return mpfr_clear_nanflag.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void mpfr_clear_nanflag()
     * }
     */
    public static void mpfr_clear_nanflag() {
        var mh$ = mpfr_clear_nanflag.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_clear_nanflag");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_clear_inexflag {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_clear_inexflag");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void mpfr_clear_inexflag()
     * }
     */
    public static FunctionDescriptor mpfr_clear_inexflag$descriptor() {
        return mpfr_clear_inexflag.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void mpfr_clear_inexflag()
     * }
     */
    public static MethodHandle mpfr_clear_inexflag$handle() {
        return mpfr_clear_inexflag.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void mpfr_clear_inexflag()
     * }
     */
    public static MemorySegment mpfr_clear_inexflag$address() {
        return mpfr_clear_inexflag.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void mpfr_clear_inexflag()
     * }
     */
    public static void mpfr_clear_inexflag() {
        var mh$ = mpfr_clear_inexflag.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_clear_inexflag");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_clear_erangeflag {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_clear_erangeflag");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void mpfr_clear_erangeflag()
     * }
     */
    public static FunctionDescriptor mpfr_clear_erangeflag$descriptor() {
        return mpfr_clear_erangeflag.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void mpfr_clear_erangeflag()
     * }
     */
    public static MethodHandle mpfr_clear_erangeflag$handle() {
        return mpfr_clear_erangeflag.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void mpfr_clear_erangeflag()
     * }
     */
    public static MemorySegment mpfr_clear_erangeflag$address() {
        return mpfr_clear_erangeflag.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void mpfr_clear_erangeflag()
     * }
     */
    public static void mpfr_clear_erangeflag() {
        var mh$ = mpfr_clear_erangeflag.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_clear_erangeflag");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_set_underflow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_set_underflow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void mpfr_set_underflow()
     * }
     */
    public static FunctionDescriptor mpfr_set_underflow$descriptor() {
        return mpfr_set_underflow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void mpfr_set_underflow()
     * }
     */
    public static MethodHandle mpfr_set_underflow$handle() {
        return mpfr_set_underflow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void mpfr_set_underflow()
     * }
     */
    public static MemorySegment mpfr_set_underflow$address() {
        return mpfr_set_underflow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void mpfr_set_underflow()
     * }
     */
    public static void mpfr_set_underflow() {
        var mh$ = mpfr_set_underflow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_set_underflow");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_set_overflow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_set_overflow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void mpfr_set_overflow()
     * }
     */
    public static FunctionDescriptor mpfr_set_overflow$descriptor() {
        return mpfr_set_overflow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void mpfr_set_overflow()
     * }
     */
    public static MethodHandle mpfr_set_overflow$handle() {
        return mpfr_set_overflow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void mpfr_set_overflow()
     * }
     */
    public static MemorySegment mpfr_set_overflow$address() {
        return mpfr_set_overflow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void mpfr_set_overflow()
     * }
     */
    public static void mpfr_set_overflow() {
        var mh$ = mpfr_set_overflow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_set_overflow");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_set_divby0 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_set_divby0");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void mpfr_set_divby0()
     * }
     */
    public static FunctionDescriptor mpfr_set_divby0$descriptor() {
        return mpfr_set_divby0.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void mpfr_set_divby0()
     * }
     */
    public static MethodHandle mpfr_set_divby0$handle() {
        return mpfr_set_divby0.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void mpfr_set_divby0()
     * }
     */
    public static MemorySegment mpfr_set_divby0$address() {
        return mpfr_set_divby0.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void mpfr_set_divby0()
     * }
     */
    public static void mpfr_set_divby0() {
        var mh$ = mpfr_set_divby0.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_set_divby0");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_set_nanflag {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_set_nanflag");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void mpfr_set_nanflag()
     * }
     */
    public static FunctionDescriptor mpfr_set_nanflag$descriptor() {
        return mpfr_set_nanflag.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void mpfr_set_nanflag()
     * }
     */
    public static MethodHandle mpfr_set_nanflag$handle() {
        return mpfr_set_nanflag.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void mpfr_set_nanflag()
     * }
     */
    public static MemorySegment mpfr_set_nanflag$address() {
        return mpfr_set_nanflag.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void mpfr_set_nanflag()
     * }
     */
    public static void mpfr_set_nanflag() {
        var mh$ = mpfr_set_nanflag.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_set_nanflag");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_set_inexflag {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_set_inexflag");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void mpfr_set_inexflag()
     * }
     */
    public static FunctionDescriptor mpfr_set_inexflag$descriptor() {
        return mpfr_set_inexflag.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void mpfr_set_inexflag()
     * }
     */
    public static MethodHandle mpfr_set_inexflag$handle() {
        return mpfr_set_inexflag.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void mpfr_set_inexflag()
     * }
     */
    public static MemorySegment mpfr_set_inexflag$address() {
        return mpfr_set_inexflag.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void mpfr_set_inexflag()
     * }
     */
    public static void mpfr_set_inexflag() {
        var mh$ = mpfr_set_inexflag.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_set_inexflag");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_set_erangeflag {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_set_erangeflag");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void mpfr_set_erangeflag()
     * }
     */
    public static FunctionDescriptor mpfr_set_erangeflag$descriptor() {
        return mpfr_set_erangeflag.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void mpfr_set_erangeflag()
     * }
     */
    public static MethodHandle mpfr_set_erangeflag$handle() {
        return mpfr_set_erangeflag.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void mpfr_set_erangeflag()
     * }
     */
    public static MemorySegment mpfr_set_erangeflag$address() {
        return mpfr_set_erangeflag.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void mpfr_set_erangeflag()
     * }
     */
    public static void mpfr_set_erangeflag() {
        var mh$ = mpfr_set_erangeflag.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_set_erangeflag");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_underflow_p {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT    );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_underflow_p");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_underflow_p()
     * }
     */
    public static FunctionDescriptor mpfr_underflow_p$descriptor() {
        return mpfr_underflow_p.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_underflow_p()
     * }
     */
    public static MethodHandle mpfr_underflow_p$handle() {
        return mpfr_underflow_p.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_underflow_p()
     * }
     */
    public static MemorySegment mpfr_underflow_p$address() {
        return mpfr_underflow_p.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_underflow_p()
     * }
     */
    public static int mpfr_underflow_p() {
        var mh$ = mpfr_underflow_p.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_underflow_p");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_overflow_p {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT    );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_overflow_p");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_overflow_p()
     * }
     */
    public static FunctionDescriptor mpfr_overflow_p$descriptor() {
        return mpfr_overflow_p.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_overflow_p()
     * }
     */
    public static MethodHandle mpfr_overflow_p$handle() {
        return mpfr_overflow_p.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_overflow_p()
     * }
     */
    public static MemorySegment mpfr_overflow_p$address() {
        return mpfr_overflow_p.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_overflow_p()
     * }
     */
    public static int mpfr_overflow_p() {
        var mh$ = mpfr_overflow_p.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_overflow_p");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_divby0_p {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT    );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_divby0_p");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_divby0_p()
     * }
     */
    public static FunctionDescriptor mpfr_divby0_p$descriptor() {
        return mpfr_divby0_p.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_divby0_p()
     * }
     */
    public static MethodHandle mpfr_divby0_p$handle() {
        return mpfr_divby0_p.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_divby0_p()
     * }
     */
    public static MemorySegment mpfr_divby0_p$address() {
        return mpfr_divby0_p.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_divby0_p()
     * }
     */
    public static int mpfr_divby0_p() {
        var mh$ = mpfr_divby0_p.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_divby0_p");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_nanflag_p {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT    );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_nanflag_p");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_nanflag_p()
     * }
     */
    public static FunctionDescriptor mpfr_nanflag_p$descriptor() {
        return mpfr_nanflag_p.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_nanflag_p()
     * }
     */
    public static MethodHandle mpfr_nanflag_p$handle() {
        return mpfr_nanflag_p.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_nanflag_p()
     * }
     */
    public static MemorySegment mpfr_nanflag_p$address() {
        return mpfr_nanflag_p.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_nanflag_p()
     * }
     */
    public static int mpfr_nanflag_p() {
        var mh$ = mpfr_nanflag_p.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_nanflag_p");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_inexflag_p {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT    );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_inexflag_p");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_inexflag_p()
     * }
     */
    public static FunctionDescriptor mpfr_inexflag_p$descriptor() {
        return mpfr_inexflag_p.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_inexflag_p()
     * }
     */
    public static MethodHandle mpfr_inexflag_p$handle() {
        return mpfr_inexflag_p.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_inexflag_p()
     * }
     */
    public static MemorySegment mpfr_inexflag_p$address() {
        return mpfr_inexflag_p.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_inexflag_p()
     * }
     */
    public static int mpfr_inexflag_p() {
        var mh$ = mpfr_inexflag_p.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_inexflag_p");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_erangeflag_p {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT    );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_erangeflag_p");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_erangeflag_p()
     * }
     */
    public static FunctionDescriptor mpfr_erangeflag_p$descriptor() {
        return mpfr_erangeflag_p.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_erangeflag_p()
     * }
     */
    public static MethodHandle mpfr_erangeflag_p$handle() {
        return mpfr_erangeflag_p.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_erangeflag_p()
     * }
     */
    public static MemorySegment mpfr_erangeflag_p$address() {
        return mpfr_erangeflag_p.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_erangeflag_p()
     * }
     */
    public static int mpfr_erangeflag_p() {
        var mh$ = mpfr_erangeflag_p.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_erangeflag_p");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_flags_clear {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_flags_clear");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void mpfr_flags_clear(mpfr_flags_t)
     * }
     */
    public static FunctionDescriptor mpfr_flags_clear$descriptor() {
        return mpfr_flags_clear.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void mpfr_flags_clear(mpfr_flags_t)
     * }
     */
    public static MethodHandle mpfr_flags_clear$handle() {
        return mpfr_flags_clear.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void mpfr_flags_clear(mpfr_flags_t)
     * }
     */
    public static MemorySegment mpfr_flags_clear$address() {
        return mpfr_flags_clear.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void mpfr_flags_clear(mpfr_flags_t)
     * }
     */
    public static void mpfr_flags_clear(int x0) {
        var mh$ = mpfr_flags_clear.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_flags_clear", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_flags_set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_flags_set");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void mpfr_flags_set(mpfr_flags_t)
     * }
     */
    public static FunctionDescriptor mpfr_flags_set$descriptor() {
        return mpfr_flags_set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void mpfr_flags_set(mpfr_flags_t)
     * }
     */
    public static MethodHandle mpfr_flags_set$handle() {
        return mpfr_flags_set.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void mpfr_flags_set(mpfr_flags_t)
     * }
     */
    public static MemorySegment mpfr_flags_set$address() {
        return mpfr_flags_set.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void mpfr_flags_set(mpfr_flags_t)
     * }
     */
    public static void mpfr_flags_set(int x0) {
        var mh$ = mpfr_flags_set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_flags_set", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_flags_test {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_flags_test");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * mpfr_flags_t mpfr_flags_test(mpfr_flags_t)
     * }
     */
    public static FunctionDescriptor mpfr_flags_test$descriptor() {
        return mpfr_flags_test.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * mpfr_flags_t mpfr_flags_test(mpfr_flags_t)
     * }
     */
    public static MethodHandle mpfr_flags_test$handle() {
        return mpfr_flags_test.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * mpfr_flags_t mpfr_flags_test(mpfr_flags_t)
     * }
     */
    public static MemorySegment mpfr_flags_test$address() {
        return mpfr_flags_test.ADDR;
    }

    /**
     * {@snippet lang=c :
     * mpfr_flags_t mpfr_flags_test(mpfr_flags_t)
     * }
     */
    public static int mpfr_flags_test(int x0) {
        var mh$ = mpfr_flags_test.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_flags_test", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_flags_save {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT    );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_flags_save");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * mpfr_flags_t mpfr_flags_save()
     * }
     */
    public static FunctionDescriptor mpfr_flags_save$descriptor() {
        return mpfr_flags_save.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * mpfr_flags_t mpfr_flags_save()
     * }
     */
    public static MethodHandle mpfr_flags_save$handle() {
        return mpfr_flags_save.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * mpfr_flags_t mpfr_flags_save()
     * }
     */
    public static MemorySegment mpfr_flags_save$address() {
        return mpfr_flags_save.ADDR;
    }

    /**
     * {@snippet lang=c :
     * mpfr_flags_t mpfr_flags_save()
     * }
     */
    public static int mpfr_flags_save() {
        var mh$ = mpfr_flags_save.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_flags_save");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_flags_restore {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            mpfr_h.C_INT,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_flags_restore");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void mpfr_flags_restore(mpfr_flags_t, mpfr_flags_t)
     * }
     */
    public static FunctionDescriptor mpfr_flags_restore$descriptor() {
        return mpfr_flags_restore.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void mpfr_flags_restore(mpfr_flags_t, mpfr_flags_t)
     * }
     */
    public static MethodHandle mpfr_flags_restore$handle() {
        return mpfr_flags_restore.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void mpfr_flags_restore(mpfr_flags_t, mpfr_flags_t)
     * }
     */
    public static MemorySegment mpfr_flags_restore$address() {
        return mpfr_flags_restore.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void mpfr_flags_restore(mpfr_flags_t, mpfr_flags_t)
     * }
     */
    public static void mpfr_flags_restore(int x0, int x1) {
        var mh$ = mpfr_flags_restore.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_flags_restore", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_check_range {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_check_range");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_check_range(mpfr_ptr, int, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_check_range$descriptor() {
        return mpfr_check_range.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_check_range(mpfr_ptr, int, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_check_range$handle() {
        return mpfr_check_range.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_check_range(mpfr_ptr, int, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_check_range$address() {
        return mpfr_check_range.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_check_range(mpfr_ptr, int, mpfr_rnd_t)
     * }
     */
    public static int mpfr_check_range(MemorySegment x0, int x1, int x2) {
        var mh$ = mpfr_check_range.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_check_range", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_init2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_init2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void mpfr_init2(mpfr_ptr, mpfr_prec_t)
     * }
     */
    public static FunctionDescriptor mpfr_init2$descriptor() {
        return mpfr_init2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void mpfr_init2(mpfr_ptr, mpfr_prec_t)
     * }
     */
    public static MethodHandle mpfr_init2$handle() {
        return mpfr_init2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void mpfr_init2(mpfr_ptr, mpfr_prec_t)
     * }
     */
    public static MemorySegment mpfr_init2$address() {
        return mpfr_init2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void mpfr_init2(mpfr_ptr, mpfr_prec_t)
     * }
     */
    public static void mpfr_init2(MemorySegment x0, int x1) {
        var mh$ = mpfr_init2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_init2", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            mpfr_h.C_POINTER
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_init");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void mpfr_init(mpfr_ptr)
     * }
     */
    public static FunctionDescriptor mpfr_init$descriptor() {
        return mpfr_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void mpfr_init(mpfr_ptr)
     * }
     */
    public static MethodHandle mpfr_init$handle() {
        return mpfr_init.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void mpfr_init(mpfr_ptr)
     * }
     */
    public static MemorySegment mpfr_init$address() {
        return mpfr_init.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void mpfr_init(mpfr_ptr)
     * }
     */
    public static void mpfr_init(MemorySegment x0) {
        var mh$ = mpfr_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_init", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_clear {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            mpfr_h.C_POINTER
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_clear");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void mpfr_clear(mpfr_ptr)
     * }
     */
    public static FunctionDescriptor mpfr_clear$descriptor() {
        return mpfr_clear.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void mpfr_clear(mpfr_ptr)
     * }
     */
    public static MethodHandle mpfr_clear$handle() {
        return mpfr_clear.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void mpfr_clear(mpfr_ptr)
     * }
     */
    public static MemorySegment mpfr_clear$address() {
        return mpfr_clear.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void mpfr_clear(mpfr_ptr)
     * }
     */
    public static void mpfr_clear(MemorySegment x0) {
        var mh$ = mpfr_clear.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_clear", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * void mpfr_inits2(mpfr_prec_t, mpfr_ptr, ...)
     * }
     */
    public static class mpfr_inits2 {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                mpfr_h.C_LONG,
                mpfr_h.C_POINTER
            );
        private static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_inits2");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private mpfr_inits2(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * void mpfr_inits2(mpfr_prec_t, mpfr_ptr, ...)
         * }
         */
        public static mpfr_inits2 makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new mpfr_inits2(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(int x0, MemorySegment x1, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("mpfr_inits2", x0, x1, x2);
                }
                spreader.invokeExact(x0, x1, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * void mpfr_inits(mpfr_ptr, ...)
     * }
     */
    public static class mpfr_inits {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                mpfr_h.C_POINTER
            );
        private static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_inits");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private mpfr_inits(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * void mpfr_inits(mpfr_ptr, ...)
         * }
         */
        public static mpfr_inits makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new mpfr_inits(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment x0, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("mpfr_inits", x0, x1);
                }
                spreader.invokeExact(x0, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * void mpfr_clears(mpfr_ptr, ...)
     * }
     */
    public static class mpfr_clears {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                mpfr_h.C_POINTER
            );
        private static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_clears");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private mpfr_clears(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * void mpfr_clears(mpfr_ptr, ...)
         * }
         */
        public static mpfr_clears makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new mpfr_clears(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment x0, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("mpfr_clears", x0, x1);
                }
                spreader.invokeExact(x0, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class mpfr_prec_round {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_prec_round");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_prec_round(mpfr_ptr, mpfr_prec_t, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_prec_round$descriptor() {
        return mpfr_prec_round.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_prec_round(mpfr_ptr, mpfr_prec_t, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_prec_round$handle() {
        return mpfr_prec_round.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_prec_round(mpfr_ptr, mpfr_prec_t, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_prec_round$address() {
        return mpfr_prec_round.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_prec_round(mpfr_ptr, mpfr_prec_t, mpfr_rnd_t)
     * }
     */
    public static int mpfr_prec_round(MemorySegment x0, int x1, int x2) {
        var mh$ = mpfr_prec_round.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_prec_round", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_can_round {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG,
            mpfr_h.C_INT,
            mpfr_h.C_INT,
            mpfr_h.C_LONG
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_can_round");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_can_round(mpfr_srcptr, mpfr_exp_t, mpfr_rnd_t, mpfr_rnd_t, mpfr_prec_t)
     * }
     */
    public static FunctionDescriptor mpfr_can_round$descriptor() {
        return mpfr_can_round.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_can_round(mpfr_srcptr, mpfr_exp_t, mpfr_rnd_t, mpfr_rnd_t, mpfr_prec_t)
     * }
     */
    public static MethodHandle mpfr_can_round$handle() {
        return mpfr_can_round.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_can_round(mpfr_srcptr, mpfr_exp_t, mpfr_rnd_t, mpfr_rnd_t, mpfr_prec_t)
     * }
     */
    public static MemorySegment mpfr_can_round$address() {
        return mpfr_can_round.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_can_round(mpfr_srcptr, mpfr_exp_t, mpfr_rnd_t, mpfr_rnd_t, mpfr_prec_t)
     * }
     */
    public static int mpfr_can_round(MemorySegment x0, int x1, int x2, int x3, int x4) {
        var mh$ = mpfr_can_round.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_can_round", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_min_prec {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_LONG,
            mpfr_h.C_POINTER
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_min_prec");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * mpfr_prec_t mpfr_min_prec(mpfr_srcptr)
     * }
     */
    public static FunctionDescriptor mpfr_min_prec$descriptor() {
        return mpfr_min_prec.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * mpfr_prec_t mpfr_min_prec(mpfr_srcptr)
     * }
     */
    public static MethodHandle mpfr_min_prec$handle() {
        return mpfr_min_prec.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * mpfr_prec_t mpfr_min_prec(mpfr_srcptr)
     * }
     */
    public static MemorySegment mpfr_min_prec$address() {
        return mpfr_min_prec.ADDR;
    }

    /**
     * {@snippet lang=c :
     * mpfr_prec_t mpfr_min_prec(mpfr_srcptr)
     * }
     */
    public static int mpfr_min_prec(MemorySegment x0) {
        var mh$ = mpfr_min_prec.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_min_prec", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_get_exp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_LONG,
            mpfr_h.C_POINTER
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_get_exp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * mpfr_exp_t mpfr_get_exp(mpfr_srcptr)
     * }
     */
    public static FunctionDescriptor mpfr_get_exp$descriptor() {
        return mpfr_get_exp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * mpfr_exp_t mpfr_get_exp(mpfr_srcptr)
     * }
     */
    public static MethodHandle mpfr_get_exp$handle() {
        return mpfr_get_exp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * mpfr_exp_t mpfr_get_exp(mpfr_srcptr)
     * }
     */
    public static MemorySegment mpfr_get_exp$address() {
        return mpfr_get_exp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * mpfr_exp_t mpfr_get_exp(mpfr_srcptr)
     * }
     */
    public static int mpfr_get_exp(MemorySegment x0) {
        var mh$ = mpfr_get_exp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_get_exp", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_set_exp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_set_exp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_set_exp(mpfr_ptr, mpfr_exp_t)
     * }
     */
    public static FunctionDescriptor mpfr_set_exp$descriptor() {
        return mpfr_set_exp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_set_exp(mpfr_ptr, mpfr_exp_t)
     * }
     */
    public static MethodHandle mpfr_set_exp$handle() {
        return mpfr_set_exp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_set_exp(mpfr_ptr, mpfr_exp_t)
     * }
     */
    public static MemorySegment mpfr_set_exp$address() {
        return mpfr_set_exp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_set_exp(mpfr_ptr, mpfr_exp_t)
     * }
     */
    public static int mpfr_set_exp(MemorySegment x0, int x1) {
        var mh$ = mpfr_set_exp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_set_exp", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_get_prec {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_LONG,
            mpfr_h.C_POINTER
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_get_prec");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * mpfr_prec_t mpfr_get_prec(mpfr_srcptr)
     * }
     */
    public static FunctionDescriptor mpfr_get_prec$descriptor() {
        return mpfr_get_prec.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * mpfr_prec_t mpfr_get_prec(mpfr_srcptr)
     * }
     */
    public static MethodHandle mpfr_get_prec$handle() {
        return mpfr_get_prec.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * mpfr_prec_t mpfr_get_prec(mpfr_srcptr)
     * }
     */
    public static MemorySegment mpfr_get_prec$address() {
        return mpfr_get_prec.ADDR;
    }

    /**
     * {@snippet lang=c :
     * mpfr_prec_t mpfr_get_prec(mpfr_srcptr)
     * }
     */
    public static int mpfr_get_prec(MemorySegment x0) {
        var mh$ = mpfr_get_prec.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_get_prec", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_set_prec {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_set_prec");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void mpfr_set_prec(mpfr_ptr, mpfr_prec_t)
     * }
     */
    public static FunctionDescriptor mpfr_set_prec$descriptor() {
        return mpfr_set_prec.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void mpfr_set_prec(mpfr_ptr, mpfr_prec_t)
     * }
     */
    public static MethodHandle mpfr_set_prec$handle() {
        return mpfr_set_prec.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void mpfr_set_prec(mpfr_ptr, mpfr_prec_t)
     * }
     */
    public static MemorySegment mpfr_set_prec$address() {
        return mpfr_set_prec.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void mpfr_set_prec(mpfr_ptr, mpfr_prec_t)
     * }
     */
    public static void mpfr_set_prec(MemorySegment x0, int x1) {
        var mh$ = mpfr_set_prec.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_set_prec", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_set_prec_raw {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_set_prec_raw");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void mpfr_set_prec_raw(mpfr_ptr, mpfr_prec_t)
     * }
     */
    public static FunctionDescriptor mpfr_set_prec_raw$descriptor() {
        return mpfr_set_prec_raw.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void mpfr_set_prec_raw(mpfr_ptr, mpfr_prec_t)
     * }
     */
    public static MethodHandle mpfr_set_prec_raw$handle() {
        return mpfr_set_prec_raw.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void mpfr_set_prec_raw(mpfr_ptr, mpfr_prec_t)
     * }
     */
    public static MemorySegment mpfr_set_prec_raw$address() {
        return mpfr_set_prec_raw.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void mpfr_set_prec_raw(mpfr_ptr, mpfr_prec_t)
     * }
     */
    public static void mpfr_set_prec_raw(MemorySegment x0, int x1) {
        var mh$ = mpfr_set_prec_raw.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_set_prec_raw", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_set_default_prec {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            mpfr_h.C_LONG
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_set_default_prec");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void mpfr_set_default_prec(mpfr_prec_t)
     * }
     */
    public static FunctionDescriptor mpfr_set_default_prec$descriptor() {
        return mpfr_set_default_prec.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void mpfr_set_default_prec(mpfr_prec_t)
     * }
     */
    public static MethodHandle mpfr_set_default_prec$handle() {
        return mpfr_set_default_prec.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void mpfr_set_default_prec(mpfr_prec_t)
     * }
     */
    public static MemorySegment mpfr_set_default_prec$address() {
        return mpfr_set_default_prec.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void mpfr_set_default_prec(mpfr_prec_t)
     * }
     */
    public static void mpfr_set_default_prec(int x0) {
        var mh$ = mpfr_set_default_prec.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_set_default_prec", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_get_default_prec {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_LONG    );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_get_default_prec");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * mpfr_prec_t mpfr_get_default_prec()
     * }
     */
    public static FunctionDescriptor mpfr_get_default_prec$descriptor() {
        return mpfr_get_default_prec.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * mpfr_prec_t mpfr_get_default_prec()
     * }
     */
    public static MethodHandle mpfr_get_default_prec$handle() {
        return mpfr_get_default_prec.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * mpfr_prec_t mpfr_get_default_prec()
     * }
     */
    public static MemorySegment mpfr_get_default_prec$address() {
        return mpfr_get_default_prec.ADDR;
    }

    /**
     * {@snippet lang=c :
     * mpfr_prec_t mpfr_get_default_prec()
     * }
     */
    public static int mpfr_get_default_prec() {
        var mh$ = mpfr_get_default_prec.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_get_default_prec");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_set_d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_DOUBLE,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_set_d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_set_d(mpfr_ptr, double, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_set_d$descriptor() {
        return mpfr_set_d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_set_d(mpfr_ptr, double, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_set_d$handle() {
        return mpfr_set_d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_set_d(mpfr_ptr, double, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_set_d$address() {
        return mpfr_set_d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_set_d(mpfr_ptr, double, mpfr_rnd_t)
     * }
     */
    public static int mpfr_set_d(MemorySegment x0, double x1, int x2) {
        var mh$ = mpfr_set_d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_set_d", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_set_flt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_FLOAT,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_set_flt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_set_flt(mpfr_ptr, float, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_set_flt$descriptor() {
        return mpfr_set_flt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_set_flt(mpfr_ptr, float, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_set_flt$handle() {
        return mpfr_set_flt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_set_flt(mpfr_ptr, float, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_set_flt$address() {
        return mpfr_set_flt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_set_flt(mpfr_ptr, float, mpfr_rnd_t)
     * }
     */
    public static int mpfr_set_flt(MemorySegment x0, float x1, int x2) {
        var mh$ = mpfr_set_flt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_set_flt", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_set_ld {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG_DOUBLE,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_set_ld");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_set_ld(mpfr_ptr, long double, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_set_ld$descriptor() {
        return mpfr_set_ld.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_set_ld(mpfr_ptr, long double, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_set_ld$handle() {
        return mpfr_set_ld.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_set_ld(mpfr_ptr, long double, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_set_ld$address() {
        return mpfr_set_ld.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_set_ld(mpfr_ptr, long double, mpfr_rnd_t)
     * }
     */
    public static int mpfr_set_ld(MemorySegment x0, double x1, int x2) {
        var mh$ = mpfr_set_ld.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_set_ld", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_set_z {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_set_z");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_set_z(mpfr_ptr, mpz_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_set_z$descriptor() {
        return mpfr_set_z.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_set_z(mpfr_ptr, mpz_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_set_z$handle() {
        return mpfr_set_z.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_set_z(mpfr_ptr, mpz_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_set_z$address() {
        return mpfr_set_z.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_set_z(mpfr_ptr, mpz_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_set_z(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_set_z.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_set_z", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_set_z_2exp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_set_z_2exp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_set_z_2exp(mpfr_ptr, mpz_srcptr, mpfr_exp_t, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_set_z_2exp$descriptor() {
        return mpfr_set_z_2exp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_set_z_2exp(mpfr_ptr, mpz_srcptr, mpfr_exp_t, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_set_z_2exp$handle() {
        return mpfr_set_z_2exp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_set_z_2exp(mpfr_ptr, mpz_srcptr, mpfr_exp_t, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_set_z_2exp$address() {
        return mpfr_set_z_2exp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_set_z_2exp(mpfr_ptr, mpz_srcptr, mpfr_exp_t, mpfr_rnd_t)
     * }
     */
    public static int mpfr_set_z_2exp(MemorySegment x0, MemorySegment x1, int x2, int x3) {
        var mh$ = mpfr_set_z_2exp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_set_z_2exp", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_set_nan {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            mpfr_h.C_POINTER
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_set_nan");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void mpfr_set_nan(mpfr_ptr)
     * }
     */
    public static FunctionDescriptor mpfr_set_nan$descriptor() {
        return mpfr_set_nan.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void mpfr_set_nan(mpfr_ptr)
     * }
     */
    public static MethodHandle mpfr_set_nan$handle() {
        return mpfr_set_nan.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void mpfr_set_nan(mpfr_ptr)
     * }
     */
    public static MemorySegment mpfr_set_nan$address() {
        return mpfr_set_nan.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void mpfr_set_nan(mpfr_ptr)
     * }
     */
    public static void mpfr_set_nan(MemorySegment x0) {
        var mh$ = mpfr_set_nan.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_set_nan", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_set_inf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_set_inf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void mpfr_set_inf(mpfr_ptr, int)
     * }
     */
    public static FunctionDescriptor mpfr_set_inf$descriptor() {
        return mpfr_set_inf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void mpfr_set_inf(mpfr_ptr, int)
     * }
     */
    public static MethodHandle mpfr_set_inf$handle() {
        return mpfr_set_inf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void mpfr_set_inf(mpfr_ptr, int)
     * }
     */
    public static MemorySegment mpfr_set_inf$address() {
        return mpfr_set_inf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void mpfr_set_inf(mpfr_ptr, int)
     * }
     */
    public static void mpfr_set_inf(MemorySegment x0, int x1) {
        var mh$ = mpfr_set_inf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_set_inf", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_set_zero {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_set_zero");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void mpfr_set_zero(mpfr_ptr, int)
     * }
     */
    public static FunctionDescriptor mpfr_set_zero$descriptor() {
        return mpfr_set_zero.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void mpfr_set_zero(mpfr_ptr, int)
     * }
     */
    public static MethodHandle mpfr_set_zero$handle() {
        return mpfr_set_zero.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void mpfr_set_zero(mpfr_ptr, int)
     * }
     */
    public static MemorySegment mpfr_set_zero$address() {
        return mpfr_set_zero.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void mpfr_set_zero(mpfr_ptr, int)
     * }
     */
    public static void mpfr_set_zero(MemorySegment x0, int x1) {
        var mh$ = mpfr_set_zero.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_set_zero", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_set_f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_set_f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_set_f(mpfr_ptr, mpf_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_set_f$descriptor() {
        return mpfr_set_f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_set_f(mpfr_ptr, mpf_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_set_f$handle() {
        return mpfr_set_f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_set_f(mpfr_ptr, mpf_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_set_f$address() {
        return mpfr_set_f.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_set_f(mpfr_ptr, mpf_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_set_f(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_set_f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_set_f", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_cmp_f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_cmp_f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_cmp_f(mpfr_srcptr, mpf_srcptr)
     * }
     */
    public static FunctionDescriptor mpfr_cmp_f$descriptor() {
        return mpfr_cmp_f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_cmp_f(mpfr_srcptr, mpf_srcptr)
     * }
     */
    public static MethodHandle mpfr_cmp_f$handle() {
        return mpfr_cmp_f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_cmp_f(mpfr_srcptr, mpf_srcptr)
     * }
     */
    public static MemorySegment mpfr_cmp_f$address() {
        return mpfr_cmp_f.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_cmp_f(mpfr_srcptr, mpf_srcptr)
     * }
     */
    public static int mpfr_cmp_f(MemorySegment x0, MemorySegment x1) {
        var mh$ = mpfr_cmp_f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_cmp_f", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_get_f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_get_f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_get_f(mpf_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_get_f$descriptor() {
        return mpfr_get_f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_get_f(mpf_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_get_f$handle() {
        return mpfr_get_f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_get_f(mpf_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_get_f$address() {
        return mpfr_get_f.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_get_f(mpf_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_get_f(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_get_f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_get_f", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_set_si {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_set_si");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_set_si(mpfr_ptr, long, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_set_si$descriptor() {
        return mpfr_set_si.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_set_si(mpfr_ptr, long, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_set_si$handle() {
        return mpfr_set_si.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_set_si(mpfr_ptr, long, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_set_si$address() {
        return mpfr_set_si.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_set_si(mpfr_ptr, long, mpfr_rnd_t)
     * }
     */
    public static int mpfr_set_si(MemorySegment x0, int x1, int x2) {
        var mh$ = mpfr_set_si.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_set_si", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_set_ui {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_set_ui");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_set_ui(mpfr_ptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_set_ui$descriptor() {
        return mpfr_set_ui.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_set_ui(mpfr_ptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_set_ui$handle() {
        return mpfr_set_ui.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_set_ui(mpfr_ptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_set_ui$address() {
        return mpfr_set_ui.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_set_ui(mpfr_ptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static int mpfr_set_ui(MemorySegment x0, int x1, int x2) {
        var mh$ = mpfr_set_ui.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_set_ui", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_set_si_2exp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG,
            mpfr_h.C_LONG,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_set_si_2exp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_set_si_2exp(mpfr_ptr, long, mpfr_exp_t, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_set_si_2exp$descriptor() {
        return mpfr_set_si_2exp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_set_si_2exp(mpfr_ptr, long, mpfr_exp_t, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_set_si_2exp$handle() {
        return mpfr_set_si_2exp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_set_si_2exp(mpfr_ptr, long, mpfr_exp_t, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_set_si_2exp$address() {
        return mpfr_set_si_2exp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_set_si_2exp(mpfr_ptr, long, mpfr_exp_t, mpfr_rnd_t)
     * }
     */
    public static int mpfr_set_si_2exp(MemorySegment x0, int x1, int x2, int x3) {
        var mh$ = mpfr_set_si_2exp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_set_si_2exp", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_set_ui_2exp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG,
            mpfr_h.C_LONG,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_set_ui_2exp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_set_ui_2exp(mpfr_ptr, unsigned long, mpfr_exp_t, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_set_ui_2exp$descriptor() {
        return mpfr_set_ui_2exp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_set_ui_2exp(mpfr_ptr, unsigned long, mpfr_exp_t, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_set_ui_2exp$handle() {
        return mpfr_set_ui_2exp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_set_ui_2exp(mpfr_ptr, unsigned long, mpfr_exp_t, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_set_ui_2exp$address() {
        return mpfr_set_ui_2exp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_set_ui_2exp(mpfr_ptr, unsigned long, mpfr_exp_t, mpfr_rnd_t)
     * }
     */
    public static int mpfr_set_ui_2exp(MemorySegment x0, int x1, int x2, int x3) {
        var mh$ = mpfr_set_ui_2exp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_set_ui_2exp", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_set_q {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_set_q");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_set_q(mpfr_ptr, mpq_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_set_q$descriptor() {
        return mpfr_set_q.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_set_q(mpfr_ptr, mpq_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_set_q$handle() {
        return mpfr_set_q.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_set_q(mpfr_ptr, mpq_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_set_q$address() {
        return mpfr_set_q.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_set_q(mpfr_ptr, mpq_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_set_q(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_set_q.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_set_q", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_mul_q {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_mul_q");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_mul_q(mpfr_ptr, mpfr_srcptr, mpq_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_mul_q$descriptor() {
        return mpfr_mul_q.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_mul_q(mpfr_ptr, mpfr_srcptr, mpq_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_mul_q$handle() {
        return mpfr_mul_q.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_mul_q(mpfr_ptr, mpfr_srcptr, mpq_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_mul_q$address() {
        return mpfr_mul_q.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_mul_q(mpfr_ptr, mpfr_srcptr, mpq_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_mul_q(MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3) {
        var mh$ = mpfr_mul_q.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_mul_q", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_div_q {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_div_q");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_div_q(mpfr_ptr, mpfr_srcptr, mpq_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_div_q$descriptor() {
        return mpfr_div_q.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_div_q(mpfr_ptr, mpfr_srcptr, mpq_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_div_q$handle() {
        return mpfr_div_q.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_div_q(mpfr_ptr, mpfr_srcptr, mpq_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_div_q$address() {
        return mpfr_div_q.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_div_q(mpfr_ptr, mpfr_srcptr, mpq_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_div_q(MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3) {
        var mh$ = mpfr_div_q.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_div_q", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_add_q {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_add_q");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_add_q(mpfr_ptr, mpfr_srcptr, mpq_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_add_q$descriptor() {
        return mpfr_add_q.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_add_q(mpfr_ptr, mpfr_srcptr, mpq_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_add_q$handle() {
        return mpfr_add_q.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_add_q(mpfr_ptr, mpfr_srcptr, mpq_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_add_q$address() {
        return mpfr_add_q.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_add_q(mpfr_ptr, mpfr_srcptr, mpq_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_add_q(MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3) {
        var mh$ = mpfr_add_q.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_add_q", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_sub_q {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_sub_q");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_sub_q(mpfr_ptr, mpfr_srcptr, mpq_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_sub_q$descriptor() {
        return mpfr_sub_q.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_sub_q(mpfr_ptr, mpfr_srcptr, mpq_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_sub_q$handle() {
        return mpfr_sub_q.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_sub_q(mpfr_ptr, mpfr_srcptr, mpq_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_sub_q$address() {
        return mpfr_sub_q.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_sub_q(mpfr_ptr, mpfr_srcptr, mpq_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_sub_q(MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3) {
        var mh$ = mpfr_sub_q.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_sub_q", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_cmp_q {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_cmp_q");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_cmp_q(mpfr_srcptr, mpq_srcptr)
     * }
     */
    public static FunctionDescriptor mpfr_cmp_q$descriptor() {
        return mpfr_cmp_q.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_cmp_q(mpfr_srcptr, mpq_srcptr)
     * }
     */
    public static MethodHandle mpfr_cmp_q$handle() {
        return mpfr_cmp_q.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_cmp_q(mpfr_srcptr, mpq_srcptr)
     * }
     */
    public static MemorySegment mpfr_cmp_q$address() {
        return mpfr_cmp_q.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_cmp_q(mpfr_srcptr, mpq_srcptr)
     * }
     */
    public static int mpfr_cmp_q(MemorySegment x0, MemorySegment x1) {
        var mh$ = mpfr_cmp_q.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_cmp_q", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_get_q {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_get_q");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void mpfr_get_q(mpq_ptr q, mpfr_srcptr f)
     * }
     */
    public static FunctionDescriptor mpfr_get_q$descriptor() {
        return mpfr_get_q.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void mpfr_get_q(mpq_ptr q, mpfr_srcptr f)
     * }
     */
    public static MethodHandle mpfr_get_q$handle() {
        return mpfr_get_q.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void mpfr_get_q(mpq_ptr q, mpfr_srcptr f)
     * }
     */
    public static MemorySegment mpfr_get_q$address() {
        return mpfr_get_q.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void mpfr_get_q(mpq_ptr q, mpfr_srcptr f)
     * }
     */
    public static void mpfr_get_q(MemorySegment q, MemorySegment f) {
        var mh$ = mpfr_get_q.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_get_q", q, f);
            }
            mh$.invokeExact(q, f);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_set_str {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_set_str");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_set_str(mpfr_ptr, const char *, int, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_set_str$descriptor() {
        return mpfr_set_str.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_set_str(mpfr_ptr, const char *, int, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_set_str$handle() {
        return mpfr_set_str.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_set_str(mpfr_ptr, const char *, int, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_set_str$address() {
        return mpfr_set_str.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_set_str(mpfr_ptr, const char *, int, mpfr_rnd_t)
     * }
     */
    public static int mpfr_set_str(MemorySegment x0, MemorySegment x1, int x2, int x3) {
        var mh$ = mpfr_set_str.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_set_str", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_init_set_str {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_init_set_str");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_init_set_str(mpfr_ptr, const char *, int, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_init_set_str$descriptor() {
        return mpfr_init_set_str.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_init_set_str(mpfr_ptr, const char *, int, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_init_set_str$handle() {
        return mpfr_init_set_str.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_init_set_str(mpfr_ptr, const char *, int, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_init_set_str$address() {
        return mpfr_init_set_str.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_init_set_str(mpfr_ptr, const char *, int, mpfr_rnd_t)
     * }
     */
    public static int mpfr_init_set_str(MemorySegment x0, MemorySegment x1, int x2, int x3) {
        var mh$ = mpfr_init_set_str.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_init_set_str", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_set4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_set4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_set4(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t, int)
     * }
     */
    public static FunctionDescriptor mpfr_set4$descriptor() {
        return mpfr_set4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_set4(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t, int)
     * }
     */
    public static MethodHandle mpfr_set4$handle() {
        return mpfr_set4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_set4(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t, int)
     * }
     */
    public static MemorySegment mpfr_set4$address() {
        return mpfr_set4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_set4(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t, int)
     * }
     */
    public static int mpfr_set4(MemorySegment x0, MemorySegment x1, int x2, int x3) {
        var mh$ = mpfr_set4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_set4", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_abs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_abs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_abs(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_abs$descriptor() {
        return mpfr_abs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_abs(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_abs$handle() {
        return mpfr_abs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_abs(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_abs$address() {
        return mpfr_abs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_abs(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_abs(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_abs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_abs", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_set");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_set(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_set$descriptor() {
        return mpfr_set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_set(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_set$handle() {
        return mpfr_set.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_set(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_set$address() {
        return mpfr_set.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_set(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_set(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_set", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_neg {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_neg");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_neg(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_neg$descriptor() {
        return mpfr_neg.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_neg(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_neg$handle() {
        return mpfr_neg.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_neg(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_neg$address() {
        return mpfr_neg.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_neg(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_neg(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_neg.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_neg", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_signbit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_signbit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_signbit(mpfr_srcptr)
     * }
     */
    public static FunctionDescriptor mpfr_signbit$descriptor() {
        return mpfr_signbit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_signbit(mpfr_srcptr)
     * }
     */
    public static MethodHandle mpfr_signbit$handle() {
        return mpfr_signbit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_signbit(mpfr_srcptr)
     * }
     */
    public static MemorySegment mpfr_signbit$address() {
        return mpfr_signbit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_signbit(mpfr_srcptr)
     * }
     */
    public static int mpfr_signbit(MemorySegment x0) {
        var mh$ = mpfr_signbit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_signbit", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_setsign {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_setsign");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_setsign(mpfr_ptr, mpfr_srcptr, int, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_setsign$descriptor() {
        return mpfr_setsign.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_setsign(mpfr_ptr, mpfr_srcptr, int, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_setsign$handle() {
        return mpfr_setsign.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_setsign(mpfr_ptr, mpfr_srcptr, int, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_setsign$address() {
        return mpfr_setsign.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_setsign(mpfr_ptr, mpfr_srcptr, int, mpfr_rnd_t)
     * }
     */
    public static int mpfr_setsign(MemorySegment x0, MemorySegment x1, int x2, int x3) {
        var mh$ = mpfr_setsign.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_setsign", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_copysign {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_copysign");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_copysign(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_copysign$descriptor() {
        return mpfr_copysign.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_copysign(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_copysign$handle() {
        return mpfr_copysign.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_copysign(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_copysign$address() {
        return mpfr_copysign.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_copysign(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_copysign(MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3) {
        var mh$ = mpfr_copysign.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_copysign", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_get_z_2exp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_LONG,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_get_z_2exp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * mpfr_exp_t mpfr_get_z_2exp(mpz_ptr, mpfr_srcptr)
     * }
     */
    public static FunctionDescriptor mpfr_get_z_2exp$descriptor() {
        return mpfr_get_z_2exp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * mpfr_exp_t mpfr_get_z_2exp(mpz_ptr, mpfr_srcptr)
     * }
     */
    public static MethodHandle mpfr_get_z_2exp$handle() {
        return mpfr_get_z_2exp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * mpfr_exp_t mpfr_get_z_2exp(mpz_ptr, mpfr_srcptr)
     * }
     */
    public static MemorySegment mpfr_get_z_2exp$address() {
        return mpfr_get_z_2exp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * mpfr_exp_t mpfr_get_z_2exp(mpz_ptr, mpfr_srcptr)
     * }
     */
    public static int mpfr_get_z_2exp(MemorySegment x0, MemorySegment x1) {
        var mh$ = mpfr_get_z_2exp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_get_z_2exp", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_get_flt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_FLOAT,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_get_flt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * float mpfr_get_flt(mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_get_flt$descriptor() {
        return mpfr_get_flt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * float mpfr_get_flt(mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_get_flt$handle() {
        return mpfr_get_flt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * float mpfr_get_flt(mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_get_flt$address() {
        return mpfr_get_flt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * float mpfr_get_flt(mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static float mpfr_get_flt(MemorySegment x0, int x1) {
        var mh$ = mpfr_get_flt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_get_flt", x0, x1);
            }
            return (float)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_get_d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_DOUBLE,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_get_d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double mpfr_get_d(mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_get_d$descriptor() {
        return mpfr_get_d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double mpfr_get_d(mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_get_d$handle() {
        return mpfr_get_d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double mpfr_get_d(mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_get_d$address() {
        return mpfr_get_d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double mpfr_get_d(mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static double mpfr_get_d(MemorySegment x0, int x1) {
        var mh$ = mpfr_get_d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_get_d", x0, x1);
            }
            return (double)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_get_ld {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_LONG_DOUBLE,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_get_ld");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long double mpfr_get_ld(mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_get_ld$descriptor() {
        return mpfr_get_ld.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long double mpfr_get_ld(mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_get_ld$handle() {
        return mpfr_get_ld.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long double mpfr_get_ld(mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_get_ld$address() {
        return mpfr_get_ld.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long double mpfr_get_ld(mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static double mpfr_get_ld(MemorySegment x0, int x1) {
        var mh$ = mpfr_get_ld.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_get_ld", x0, x1);
            }
            return (double)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_get_d1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_DOUBLE,
            mpfr_h.C_POINTER
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_get_d1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double mpfr_get_d1(mpfr_srcptr)
     * }
     */
    public static FunctionDescriptor mpfr_get_d1$descriptor() {
        return mpfr_get_d1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double mpfr_get_d1(mpfr_srcptr)
     * }
     */
    public static MethodHandle mpfr_get_d1$handle() {
        return mpfr_get_d1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double mpfr_get_d1(mpfr_srcptr)
     * }
     */
    public static MemorySegment mpfr_get_d1$address() {
        return mpfr_get_d1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double mpfr_get_d1(mpfr_srcptr)
     * }
     */
    public static double mpfr_get_d1(MemorySegment x0) {
        var mh$ = mpfr_get_d1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_get_d1", x0);
            }
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_get_d_2exp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_DOUBLE,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_get_d_2exp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double mpfr_get_d_2exp(long *, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_get_d_2exp$descriptor() {
        return mpfr_get_d_2exp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double mpfr_get_d_2exp(long *, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_get_d_2exp$handle() {
        return mpfr_get_d_2exp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double mpfr_get_d_2exp(long *, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_get_d_2exp$address() {
        return mpfr_get_d_2exp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double mpfr_get_d_2exp(long *, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static double mpfr_get_d_2exp(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_get_d_2exp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_get_d_2exp", x0, x1, x2);
            }
            return (double)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_get_ld_2exp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_LONG_DOUBLE,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_get_ld_2exp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long double mpfr_get_ld_2exp(long *, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_get_ld_2exp$descriptor() {
        return mpfr_get_ld_2exp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long double mpfr_get_ld_2exp(long *, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_get_ld_2exp$handle() {
        return mpfr_get_ld_2exp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long double mpfr_get_ld_2exp(long *, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_get_ld_2exp$address() {
        return mpfr_get_ld_2exp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long double mpfr_get_ld_2exp(long *, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static double mpfr_get_ld_2exp(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_get_ld_2exp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_get_ld_2exp", x0, x1, x2);
            }
            return (double)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_frexp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_frexp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_frexp(mpfr_exp_t *, mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_frexp$descriptor() {
        return mpfr_frexp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_frexp(mpfr_exp_t *, mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_frexp$handle() {
        return mpfr_frexp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_frexp(mpfr_exp_t *, mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_frexp$address() {
        return mpfr_frexp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_frexp(mpfr_exp_t *, mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_frexp(MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3) {
        var mh$ = mpfr_frexp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_frexp", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_get_si {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_LONG,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_get_si");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long mpfr_get_si(mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_get_si$descriptor() {
        return mpfr_get_si.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long mpfr_get_si(mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_get_si$handle() {
        return mpfr_get_si.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long mpfr_get_si(mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_get_si$address() {
        return mpfr_get_si.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long mpfr_get_si(mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_get_si(MemorySegment x0, int x1) {
        var mh$ = mpfr_get_si.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_get_si", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_get_ui {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_LONG,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_get_ui");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long mpfr_get_ui(mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_get_ui$descriptor() {
        return mpfr_get_ui.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long mpfr_get_ui(mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_get_ui$handle() {
        return mpfr_get_ui.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long mpfr_get_ui(mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_get_ui$address() {
        return mpfr_get_ui.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long mpfr_get_ui(mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_get_ui(MemorySegment x0, int x1) {
        var mh$ = mpfr_get_ui.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_get_ui", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_get_str_ndigits {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_LONG_LONG,
            mpfr_h.C_INT,
            mpfr_h.C_LONG
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_get_str_ndigits");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t mpfr_get_str_ndigits(int, mpfr_prec_t)
     * }
     */
    public static FunctionDescriptor mpfr_get_str_ndigits$descriptor() {
        return mpfr_get_str_ndigits.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t mpfr_get_str_ndigits(int, mpfr_prec_t)
     * }
     */
    public static MethodHandle mpfr_get_str_ndigits$handle() {
        return mpfr_get_str_ndigits.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * size_t mpfr_get_str_ndigits(int, mpfr_prec_t)
     * }
     */
    public static MemorySegment mpfr_get_str_ndigits$address() {
        return mpfr_get_str_ndigits.ADDR;
    }

    /**
     * {@snippet lang=c :
     * size_t mpfr_get_str_ndigits(int, mpfr_prec_t)
     * }
     */
    public static long mpfr_get_str_ndigits(int x0, int x1) {
        var mh$ = mpfr_get_str_ndigits.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_get_str_ndigits", x0, x1);
            }
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_get_str {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT,
            mpfr_h.C_LONG_LONG,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_get_str");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *mpfr_get_str(char *, mpfr_exp_t *, int, size_t, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_get_str$descriptor() {
        return mpfr_get_str.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *mpfr_get_str(char *, mpfr_exp_t *, int, size_t, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_get_str$handle() {
        return mpfr_get_str.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *mpfr_get_str(char *, mpfr_exp_t *, int, size_t, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_get_str$address() {
        return mpfr_get_str.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *mpfr_get_str(char *, mpfr_exp_t *, int, size_t, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_get_str(MemorySegment x0, MemorySegment x1, int x2, long x3, MemorySegment x4, int x5) {
        var mh$ = mpfr_get_str.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_get_str", x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_get_z {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_get_z");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_get_z(mpz_ptr z, mpfr_srcptr f, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_get_z$descriptor() {
        return mpfr_get_z.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_get_z(mpz_ptr z, mpfr_srcptr f, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_get_z$handle() {
        return mpfr_get_z.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_get_z(mpz_ptr z, mpfr_srcptr f, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_get_z$address() {
        return mpfr_get_z.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_get_z(mpz_ptr z, mpfr_srcptr f, mpfr_rnd_t)
     * }
     */
    public static int mpfr_get_z(MemorySegment z, MemorySegment f, int x2) {
        var mh$ = mpfr_get_z.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_get_z", z, f, x2);
            }
            return (int)mh$.invokeExact(z, f, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_free_str {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            mpfr_h.C_POINTER
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_free_str");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void mpfr_free_str(char *)
     * }
     */
    public static FunctionDescriptor mpfr_free_str$descriptor() {
        return mpfr_free_str.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void mpfr_free_str(char *)
     * }
     */
    public static MethodHandle mpfr_free_str$handle() {
        return mpfr_free_str.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void mpfr_free_str(char *)
     * }
     */
    public static MemorySegment mpfr_free_str$address() {
        return mpfr_free_str.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void mpfr_free_str(char *)
     * }
     */
    public static void mpfr_free_str(MemorySegment x0) {
        var mh$ = mpfr_free_str.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_free_str", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_urandom {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_urandom");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_urandom(mpfr_ptr, gmp_randstate_t, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_urandom$descriptor() {
        return mpfr_urandom.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_urandom(mpfr_ptr, gmp_randstate_t, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_urandom$handle() {
        return mpfr_urandom.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_urandom(mpfr_ptr, gmp_randstate_t, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_urandom$address() {
        return mpfr_urandom.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_urandom(mpfr_ptr, gmp_randstate_t, mpfr_rnd_t)
     * }
     */
    public static int mpfr_urandom(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_urandom.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_urandom", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_grandom {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_grandom");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_grandom(mpfr_ptr, mpfr_ptr, gmp_randstate_t, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_grandom$descriptor() {
        return mpfr_grandom.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_grandom(mpfr_ptr, mpfr_ptr, gmp_randstate_t, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_grandom$handle() {
        return mpfr_grandom.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_grandom(mpfr_ptr, mpfr_ptr, gmp_randstate_t, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_grandom$address() {
        return mpfr_grandom.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_grandom(mpfr_ptr, mpfr_ptr, gmp_randstate_t, mpfr_rnd_t)
     * }
     */
    public static int mpfr_grandom(MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3) {
        var mh$ = mpfr_grandom.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_grandom", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_nrandom {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_nrandom");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_nrandom(mpfr_ptr, gmp_randstate_t, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_nrandom$descriptor() {
        return mpfr_nrandom.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_nrandom(mpfr_ptr, gmp_randstate_t, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_nrandom$handle() {
        return mpfr_nrandom.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_nrandom(mpfr_ptr, gmp_randstate_t, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_nrandom$address() {
        return mpfr_nrandom.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_nrandom(mpfr_ptr, gmp_randstate_t, mpfr_rnd_t)
     * }
     */
    public static int mpfr_nrandom(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_nrandom.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_nrandom", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_erandom {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_erandom");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_erandom(mpfr_ptr, gmp_randstate_t, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_erandom$descriptor() {
        return mpfr_erandom.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_erandom(mpfr_ptr, gmp_randstate_t, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_erandom$handle() {
        return mpfr_erandom.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_erandom(mpfr_ptr, gmp_randstate_t, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_erandom$address() {
        return mpfr_erandom.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_erandom(mpfr_ptr, gmp_randstate_t, mpfr_rnd_t)
     * }
     */
    public static int mpfr_erandom(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_erandom.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_erandom", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_urandomb {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_urandomb");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_urandomb(mpfr_ptr, gmp_randstate_t)
     * }
     */
    public static FunctionDescriptor mpfr_urandomb$descriptor() {
        return mpfr_urandomb.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_urandomb(mpfr_ptr, gmp_randstate_t)
     * }
     */
    public static MethodHandle mpfr_urandomb$handle() {
        return mpfr_urandomb.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_urandomb(mpfr_ptr, gmp_randstate_t)
     * }
     */
    public static MemorySegment mpfr_urandomb$address() {
        return mpfr_urandomb.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_urandomb(mpfr_ptr, gmp_randstate_t)
     * }
     */
    public static int mpfr_urandomb(MemorySegment x0, MemorySegment x1) {
        var mh$ = mpfr_urandomb.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_urandomb", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_nextabove {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            mpfr_h.C_POINTER
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_nextabove");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void mpfr_nextabove(mpfr_ptr)
     * }
     */
    public static FunctionDescriptor mpfr_nextabove$descriptor() {
        return mpfr_nextabove.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void mpfr_nextabove(mpfr_ptr)
     * }
     */
    public static MethodHandle mpfr_nextabove$handle() {
        return mpfr_nextabove.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void mpfr_nextabove(mpfr_ptr)
     * }
     */
    public static MemorySegment mpfr_nextabove$address() {
        return mpfr_nextabove.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void mpfr_nextabove(mpfr_ptr)
     * }
     */
    public static void mpfr_nextabove(MemorySegment x0) {
        var mh$ = mpfr_nextabove.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_nextabove", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_nextbelow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            mpfr_h.C_POINTER
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_nextbelow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void mpfr_nextbelow(mpfr_ptr)
     * }
     */
    public static FunctionDescriptor mpfr_nextbelow$descriptor() {
        return mpfr_nextbelow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void mpfr_nextbelow(mpfr_ptr)
     * }
     */
    public static MethodHandle mpfr_nextbelow$handle() {
        return mpfr_nextbelow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void mpfr_nextbelow(mpfr_ptr)
     * }
     */
    public static MemorySegment mpfr_nextbelow$address() {
        return mpfr_nextbelow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void mpfr_nextbelow(mpfr_ptr)
     * }
     */
    public static void mpfr_nextbelow(MemorySegment x0) {
        var mh$ = mpfr_nextbelow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_nextbelow", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_nexttoward {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_nexttoward");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void mpfr_nexttoward(mpfr_ptr, mpfr_srcptr)
     * }
     */
    public static FunctionDescriptor mpfr_nexttoward$descriptor() {
        return mpfr_nexttoward.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void mpfr_nexttoward(mpfr_ptr, mpfr_srcptr)
     * }
     */
    public static MethodHandle mpfr_nexttoward$handle() {
        return mpfr_nexttoward.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void mpfr_nexttoward(mpfr_ptr, mpfr_srcptr)
     * }
     */
    public static MemorySegment mpfr_nexttoward$address() {
        return mpfr_nexttoward.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void mpfr_nexttoward(mpfr_ptr, mpfr_srcptr)
     * }
     */
    public static void mpfr_nexttoward(MemorySegment x0, MemorySegment x1) {
        var mh$ = mpfr_nexttoward.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_nexttoward", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * int mpfr_printf(const char *, ...)
     * }
     */
    public static class mpfr_printf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                mpfr_h.C_INT,
                mpfr_h.C_POINTER
            );
        private static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_printf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private mpfr_printf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * int mpfr_printf(const char *, ...)
         * }
         */
        public static mpfr_printf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new mpfr_printf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment x0, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("mpfr_printf", x0, x1);
                }
                return (int)spreader.invokeExact(x0, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * int mpfr_asprintf(char **, const char *, ...)
     * }
     */
    public static class mpfr_asprintf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                mpfr_h.C_INT,
                mpfr_h.C_POINTER,
                mpfr_h.C_POINTER
            );
        private static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_asprintf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private mpfr_asprintf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * int mpfr_asprintf(char **, const char *, ...)
         * }
         */
        public static mpfr_asprintf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new mpfr_asprintf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment x0, MemorySegment x1, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("mpfr_asprintf", x0, x1, x2);
                }
                return (int)spreader.invokeExact(x0, x1, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * int mpfr_sprintf(char *, const char *, ...)
     * }
     */
    public static class mpfr_sprintf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                mpfr_h.C_INT,
                mpfr_h.C_POINTER,
                mpfr_h.C_POINTER
            );
        private static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_sprintf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private mpfr_sprintf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * int mpfr_sprintf(char *, const char *, ...)
         * }
         */
        public static mpfr_sprintf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new mpfr_sprintf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment x0, MemorySegment x1, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("mpfr_sprintf", x0, x1, x2);
                }
                return (int)spreader.invokeExact(x0, x1, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * int mpfr_snprintf(char *, size_t, const char *, ...)
     * }
     */
    public static class mpfr_snprintf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                mpfr_h.C_INT,
                mpfr_h.C_POINTER,
                mpfr_h.C_LONG_LONG,
                mpfr_h.C_POINTER
            );
        private static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_snprintf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private mpfr_snprintf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * int mpfr_snprintf(char *, size_t, const char *, ...)
         * }
         */
        public static mpfr_snprintf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new mpfr_snprintf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment x0, long x1, MemorySegment x2, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("mpfr_snprintf", x0, x1, x2, x3);
                }
                return (int)spreader.invokeExact(x0, x1, x2, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class mpfr_pow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_pow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_pow(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_pow$descriptor() {
        return mpfr_pow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_pow(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_pow$handle() {
        return mpfr_pow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_pow(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_pow$address() {
        return mpfr_pow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_pow(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_pow(MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3) {
        var mh$ = mpfr_pow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_pow", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_powr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_powr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_powr(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_powr$descriptor() {
        return mpfr_powr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_powr(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_powr$handle() {
        return mpfr_powr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_powr(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_powr$address() {
        return mpfr_powr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_powr(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_powr(MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3) {
        var mh$ = mpfr_powr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_powr", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_pow_si {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_pow_si");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_pow_si(mpfr_ptr, mpfr_srcptr, long, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_pow_si$descriptor() {
        return mpfr_pow_si.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_pow_si(mpfr_ptr, mpfr_srcptr, long, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_pow_si$handle() {
        return mpfr_pow_si.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_pow_si(mpfr_ptr, mpfr_srcptr, long, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_pow_si$address() {
        return mpfr_pow_si.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_pow_si(mpfr_ptr, mpfr_srcptr, long, mpfr_rnd_t)
     * }
     */
    public static int mpfr_pow_si(MemorySegment x0, MemorySegment x1, int x2, int x3) {
        var mh$ = mpfr_pow_si.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_pow_si", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_compound_si {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_compound_si");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_compound_si(mpfr_ptr, mpfr_srcptr, long, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_compound_si$descriptor() {
        return mpfr_compound_si.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_compound_si(mpfr_ptr, mpfr_srcptr, long, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_compound_si$handle() {
        return mpfr_compound_si.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_compound_si(mpfr_ptr, mpfr_srcptr, long, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_compound_si$address() {
        return mpfr_compound_si.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_compound_si(mpfr_ptr, mpfr_srcptr, long, mpfr_rnd_t)
     * }
     */
    public static int mpfr_compound_si(MemorySegment x0, MemorySegment x1, int x2, int x3) {
        var mh$ = mpfr_compound_si.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_compound_si", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_pow_ui {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_pow_ui");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_pow_ui(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_pow_ui$descriptor() {
        return mpfr_pow_ui.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_pow_ui(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_pow_ui$handle() {
        return mpfr_pow_ui.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_pow_ui(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_pow_ui$address() {
        return mpfr_pow_ui.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_pow_ui(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static int mpfr_pow_ui(MemorySegment x0, MemorySegment x1, int x2, int x3) {
        var mh$ = mpfr_pow_ui.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_pow_ui", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_ui_pow_ui {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG,
            mpfr_h.C_LONG,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_ui_pow_ui");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_ui_pow_ui(mpfr_ptr, unsigned long, unsigned long, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_ui_pow_ui$descriptor() {
        return mpfr_ui_pow_ui.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_ui_pow_ui(mpfr_ptr, unsigned long, unsigned long, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_ui_pow_ui$handle() {
        return mpfr_ui_pow_ui.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_ui_pow_ui(mpfr_ptr, unsigned long, unsigned long, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_ui_pow_ui$address() {
        return mpfr_ui_pow_ui.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_ui_pow_ui(mpfr_ptr, unsigned long, unsigned long, mpfr_rnd_t)
     * }
     */
    public static int mpfr_ui_pow_ui(MemorySegment x0, int x1, int x2, int x3) {
        var mh$ = mpfr_ui_pow_ui.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_ui_pow_ui", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_ui_pow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_ui_pow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_ui_pow(mpfr_ptr, unsigned long, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_ui_pow$descriptor() {
        return mpfr_ui_pow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_ui_pow(mpfr_ptr, unsigned long, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_ui_pow$handle() {
        return mpfr_ui_pow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_ui_pow(mpfr_ptr, unsigned long, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_ui_pow$address() {
        return mpfr_ui_pow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_ui_pow(mpfr_ptr, unsigned long, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_ui_pow(MemorySegment x0, int x1, MemorySegment x2, int x3) {
        var mh$ = mpfr_ui_pow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_ui_pow", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_pow_z {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_pow_z");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_pow_z(mpfr_ptr, mpfr_srcptr, mpz_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_pow_z$descriptor() {
        return mpfr_pow_z.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_pow_z(mpfr_ptr, mpfr_srcptr, mpz_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_pow_z$handle() {
        return mpfr_pow_z.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_pow_z(mpfr_ptr, mpfr_srcptr, mpz_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_pow_z$address() {
        return mpfr_pow_z.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_pow_z(mpfr_ptr, mpfr_srcptr, mpz_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_pow_z(MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3) {
        var mh$ = mpfr_pow_z.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_pow_z", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_sqrt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_sqrt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_sqrt(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_sqrt$descriptor() {
        return mpfr_sqrt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_sqrt(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_sqrt$handle() {
        return mpfr_sqrt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_sqrt(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_sqrt$address() {
        return mpfr_sqrt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_sqrt(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_sqrt(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_sqrt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_sqrt", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_sqrt_ui {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_sqrt_ui");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_sqrt_ui(mpfr_ptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_sqrt_ui$descriptor() {
        return mpfr_sqrt_ui.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_sqrt_ui(mpfr_ptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_sqrt_ui$handle() {
        return mpfr_sqrt_ui.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_sqrt_ui(mpfr_ptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_sqrt_ui$address() {
        return mpfr_sqrt_ui.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_sqrt_ui(mpfr_ptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static int mpfr_sqrt_ui(MemorySegment x0, int x1, int x2) {
        var mh$ = mpfr_sqrt_ui.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_sqrt_ui", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_rec_sqrt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_rec_sqrt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_rec_sqrt(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_rec_sqrt$descriptor() {
        return mpfr_rec_sqrt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_rec_sqrt(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_rec_sqrt$handle() {
        return mpfr_rec_sqrt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_rec_sqrt(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_rec_sqrt$address() {
        return mpfr_rec_sqrt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_rec_sqrt(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_rec_sqrt(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_rec_sqrt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_rec_sqrt", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_add {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_add");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_add(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_add$descriptor() {
        return mpfr_add.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_add(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_add$handle() {
        return mpfr_add.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_add(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_add$address() {
        return mpfr_add.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_add(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_add(MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3) {
        var mh$ = mpfr_add.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_add", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_sub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_sub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_sub(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_sub$descriptor() {
        return mpfr_sub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_sub(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_sub$handle() {
        return mpfr_sub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_sub(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_sub$address() {
        return mpfr_sub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_sub(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_sub(MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3) {
        var mh$ = mpfr_sub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_sub", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_mul {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_mul");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_mul(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_mul$descriptor() {
        return mpfr_mul.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_mul(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_mul$handle() {
        return mpfr_mul.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_mul(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_mul$address() {
        return mpfr_mul.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_mul(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_mul(MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3) {
        var mh$ = mpfr_mul.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_mul", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_div {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_div");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_div(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_div$descriptor() {
        return mpfr_div.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_div(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_div$handle() {
        return mpfr_div.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_div(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_div$address() {
        return mpfr_div.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_div(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_div(MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3) {
        var mh$ = mpfr_div.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_div", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_add_ui {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_add_ui");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_add_ui(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_add_ui$descriptor() {
        return mpfr_add_ui.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_add_ui(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_add_ui$handle() {
        return mpfr_add_ui.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_add_ui(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_add_ui$address() {
        return mpfr_add_ui.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_add_ui(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static int mpfr_add_ui(MemorySegment x0, MemorySegment x1, int x2, int x3) {
        var mh$ = mpfr_add_ui.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_add_ui", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_sub_ui {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_sub_ui");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_sub_ui(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_sub_ui$descriptor() {
        return mpfr_sub_ui.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_sub_ui(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_sub_ui$handle() {
        return mpfr_sub_ui.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_sub_ui(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_sub_ui$address() {
        return mpfr_sub_ui.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_sub_ui(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static int mpfr_sub_ui(MemorySegment x0, MemorySegment x1, int x2, int x3) {
        var mh$ = mpfr_sub_ui.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_sub_ui", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_ui_sub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_ui_sub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_ui_sub(mpfr_ptr, unsigned long, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_ui_sub$descriptor() {
        return mpfr_ui_sub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_ui_sub(mpfr_ptr, unsigned long, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_ui_sub$handle() {
        return mpfr_ui_sub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_ui_sub(mpfr_ptr, unsigned long, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_ui_sub$address() {
        return mpfr_ui_sub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_ui_sub(mpfr_ptr, unsigned long, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_ui_sub(MemorySegment x0, int x1, MemorySegment x2, int x3) {
        var mh$ = mpfr_ui_sub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_ui_sub", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_mul_ui {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_mul_ui");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_mul_ui(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_mul_ui$descriptor() {
        return mpfr_mul_ui.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_mul_ui(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_mul_ui$handle() {
        return mpfr_mul_ui.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_mul_ui(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_mul_ui$address() {
        return mpfr_mul_ui.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_mul_ui(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static int mpfr_mul_ui(MemorySegment x0, MemorySegment x1, int x2, int x3) {
        var mh$ = mpfr_mul_ui.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_mul_ui", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_div_ui {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_div_ui");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_div_ui(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_div_ui$descriptor() {
        return mpfr_div_ui.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_div_ui(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_div_ui$handle() {
        return mpfr_div_ui.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_div_ui(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_div_ui$address() {
        return mpfr_div_ui.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_div_ui(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static int mpfr_div_ui(MemorySegment x0, MemorySegment x1, int x2, int x3) {
        var mh$ = mpfr_div_ui.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_div_ui", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_ui_div {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_ui_div");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_ui_div(mpfr_ptr, unsigned long, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_ui_div$descriptor() {
        return mpfr_ui_div.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_ui_div(mpfr_ptr, unsigned long, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_ui_div$handle() {
        return mpfr_ui_div.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_ui_div(mpfr_ptr, unsigned long, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_ui_div$address() {
        return mpfr_ui_div.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_ui_div(mpfr_ptr, unsigned long, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_ui_div(MemorySegment x0, int x1, MemorySegment x2, int x3) {
        var mh$ = mpfr_ui_div.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_ui_div", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_add_si {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_add_si");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_add_si(mpfr_ptr, mpfr_srcptr, long, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_add_si$descriptor() {
        return mpfr_add_si.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_add_si(mpfr_ptr, mpfr_srcptr, long, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_add_si$handle() {
        return mpfr_add_si.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_add_si(mpfr_ptr, mpfr_srcptr, long, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_add_si$address() {
        return mpfr_add_si.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_add_si(mpfr_ptr, mpfr_srcptr, long, mpfr_rnd_t)
     * }
     */
    public static int mpfr_add_si(MemorySegment x0, MemorySegment x1, int x2, int x3) {
        var mh$ = mpfr_add_si.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_add_si", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_sub_si {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_sub_si");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_sub_si(mpfr_ptr, mpfr_srcptr, long, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_sub_si$descriptor() {
        return mpfr_sub_si.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_sub_si(mpfr_ptr, mpfr_srcptr, long, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_sub_si$handle() {
        return mpfr_sub_si.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_sub_si(mpfr_ptr, mpfr_srcptr, long, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_sub_si$address() {
        return mpfr_sub_si.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_sub_si(mpfr_ptr, mpfr_srcptr, long, mpfr_rnd_t)
     * }
     */
    public static int mpfr_sub_si(MemorySegment x0, MemorySegment x1, int x2, int x3) {
        var mh$ = mpfr_sub_si.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_sub_si", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_si_sub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_si_sub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_si_sub(mpfr_ptr, long, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_si_sub$descriptor() {
        return mpfr_si_sub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_si_sub(mpfr_ptr, long, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_si_sub$handle() {
        return mpfr_si_sub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_si_sub(mpfr_ptr, long, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_si_sub$address() {
        return mpfr_si_sub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_si_sub(mpfr_ptr, long, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_si_sub(MemorySegment x0, int x1, MemorySegment x2, int x3) {
        var mh$ = mpfr_si_sub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_si_sub", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_mul_si {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_mul_si");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_mul_si(mpfr_ptr, mpfr_srcptr, long, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_mul_si$descriptor() {
        return mpfr_mul_si.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_mul_si(mpfr_ptr, mpfr_srcptr, long, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_mul_si$handle() {
        return mpfr_mul_si.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_mul_si(mpfr_ptr, mpfr_srcptr, long, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_mul_si$address() {
        return mpfr_mul_si.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_mul_si(mpfr_ptr, mpfr_srcptr, long, mpfr_rnd_t)
     * }
     */
    public static int mpfr_mul_si(MemorySegment x0, MemorySegment x1, int x2, int x3) {
        var mh$ = mpfr_mul_si.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_mul_si", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_div_si {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_div_si");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_div_si(mpfr_ptr, mpfr_srcptr, long, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_div_si$descriptor() {
        return mpfr_div_si.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_div_si(mpfr_ptr, mpfr_srcptr, long, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_div_si$handle() {
        return mpfr_div_si.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_div_si(mpfr_ptr, mpfr_srcptr, long, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_div_si$address() {
        return mpfr_div_si.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_div_si(mpfr_ptr, mpfr_srcptr, long, mpfr_rnd_t)
     * }
     */
    public static int mpfr_div_si(MemorySegment x0, MemorySegment x1, int x2, int x3) {
        var mh$ = mpfr_div_si.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_div_si", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_si_div {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_si_div");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_si_div(mpfr_ptr, long, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_si_div$descriptor() {
        return mpfr_si_div.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_si_div(mpfr_ptr, long, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_si_div$handle() {
        return mpfr_si_div.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_si_div(mpfr_ptr, long, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_si_div$address() {
        return mpfr_si_div.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_si_div(mpfr_ptr, long, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_si_div(MemorySegment x0, int x1, MemorySegment x2, int x3) {
        var mh$ = mpfr_si_div.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_si_div", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_add_d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_DOUBLE,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_add_d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_add_d(mpfr_ptr, mpfr_srcptr, double, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_add_d$descriptor() {
        return mpfr_add_d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_add_d(mpfr_ptr, mpfr_srcptr, double, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_add_d$handle() {
        return mpfr_add_d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_add_d(mpfr_ptr, mpfr_srcptr, double, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_add_d$address() {
        return mpfr_add_d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_add_d(mpfr_ptr, mpfr_srcptr, double, mpfr_rnd_t)
     * }
     */
    public static int mpfr_add_d(MemorySegment x0, MemorySegment x1, double x2, int x3) {
        var mh$ = mpfr_add_d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_add_d", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_sub_d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_DOUBLE,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_sub_d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_sub_d(mpfr_ptr, mpfr_srcptr, double, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_sub_d$descriptor() {
        return mpfr_sub_d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_sub_d(mpfr_ptr, mpfr_srcptr, double, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_sub_d$handle() {
        return mpfr_sub_d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_sub_d(mpfr_ptr, mpfr_srcptr, double, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_sub_d$address() {
        return mpfr_sub_d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_sub_d(mpfr_ptr, mpfr_srcptr, double, mpfr_rnd_t)
     * }
     */
    public static int mpfr_sub_d(MemorySegment x0, MemorySegment x1, double x2, int x3) {
        var mh$ = mpfr_sub_d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_sub_d", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_d_sub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_DOUBLE,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_d_sub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_d_sub(mpfr_ptr, double, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_d_sub$descriptor() {
        return mpfr_d_sub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_d_sub(mpfr_ptr, double, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_d_sub$handle() {
        return mpfr_d_sub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_d_sub(mpfr_ptr, double, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_d_sub$address() {
        return mpfr_d_sub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_d_sub(mpfr_ptr, double, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_d_sub(MemorySegment x0, double x1, MemorySegment x2, int x3) {
        var mh$ = mpfr_d_sub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_d_sub", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_mul_d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_DOUBLE,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_mul_d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_mul_d(mpfr_ptr, mpfr_srcptr, double, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_mul_d$descriptor() {
        return mpfr_mul_d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_mul_d(mpfr_ptr, mpfr_srcptr, double, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_mul_d$handle() {
        return mpfr_mul_d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_mul_d(mpfr_ptr, mpfr_srcptr, double, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_mul_d$address() {
        return mpfr_mul_d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_mul_d(mpfr_ptr, mpfr_srcptr, double, mpfr_rnd_t)
     * }
     */
    public static int mpfr_mul_d(MemorySegment x0, MemorySegment x1, double x2, int x3) {
        var mh$ = mpfr_mul_d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_mul_d", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_div_d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_DOUBLE,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_div_d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_div_d(mpfr_ptr, mpfr_srcptr, double, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_div_d$descriptor() {
        return mpfr_div_d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_div_d(mpfr_ptr, mpfr_srcptr, double, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_div_d$handle() {
        return mpfr_div_d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_div_d(mpfr_ptr, mpfr_srcptr, double, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_div_d$address() {
        return mpfr_div_d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_div_d(mpfr_ptr, mpfr_srcptr, double, mpfr_rnd_t)
     * }
     */
    public static int mpfr_div_d(MemorySegment x0, MemorySegment x1, double x2, int x3) {
        var mh$ = mpfr_div_d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_div_d", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_d_div {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_DOUBLE,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_d_div");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_d_div(mpfr_ptr, double, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_d_div$descriptor() {
        return mpfr_d_div.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_d_div(mpfr_ptr, double, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_d_div$handle() {
        return mpfr_d_div.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_d_div(mpfr_ptr, double, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_d_div$address() {
        return mpfr_d_div.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_d_div(mpfr_ptr, double, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_d_div(MemorySegment x0, double x1, MemorySegment x2, int x3) {
        var mh$ = mpfr_d_div.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_d_div", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_sqr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_sqr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_sqr(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_sqr$descriptor() {
        return mpfr_sqr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_sqr(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_sqr$handle() {
        return mpfr_sqr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_sqr(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_sqr$address() {
        return mpfr_sqr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_sqr(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_sqr(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_sqr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_sqr", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_const_pi {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_const_pi");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_const_pi(mpfr_ptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_const_pi$descriptor() {
        return mpfr_const_pi.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_const_pi(mpfr_ptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_const_pi$handle() {
        return mpfr_const_pi.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_const_pi(mpfr_ptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_const_pi$address() {
        return mpfr_const_pi.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_const_pi(mpfr_ptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_const_pi(MemorySegment x0, int x1) {
        var mh$ = mpfr_const_pi.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_const_pi", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_const_log2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_const_log2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_const_log2(mpfr_ptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_const_log2$descriptor() {
        return mpfr_const_log2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_const_log2(mpfr_ptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_const_log2$handle() {
        return mpfr_const_log2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_const_log2(mpfr_ptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_const_log2$address() {
        return mpfr_const_log2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_const_log2(mpfr_ptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_const_log2(MemorySegment x0, int x1) {
        var mh$ = mpfr_const_log2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_const_log2", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_const_euler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_const_euler");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_const_euler(mpfr_ptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_const_euler$descriptor() {
        return mpfr_const_euler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_const_euler(mpfr_ptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_const_euler$handle() {
        return mpfr_const_euler.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_const_euler(mpfr_ptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_const_euler$address() {
        return mpfr_const_euler.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_const_euler(mpfr_ptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_const_euler(MemorySegment x0, int x1) {
        var mh$ = mpfr_const_euler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_const_euler", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_const_catalan {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_const_catalan");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_const_catalan(mpfr_ptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_const_catalan$descriptor() {
        return mpfr_const_catalan.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_const_catalan(mpfr_ptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_const_catalan$handle() {
        return mpfr_const_catalan.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_const_catalan(mpfr_ptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_const_catalan$address() {
        return mpfr_const_catalan.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_const_catalan(mpfr_ptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_const_catalan(MemorySegment x0, int x1) {
        var mh$ = mpfr_const_catalan.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_const_catalan", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_agm {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_agm");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_agm(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_agm$descriptor() {
        return mpfr_agm.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_agm(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_agm$handle() {
        return mpfr_agm.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_agm(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_agm$address() {
        return mpfr_agm.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_agm(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_agm(MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3) {
        var mh$ = mpfr_agm.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_agm", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_log {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_log");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_log(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_log$descriptor() {
        return mpfr_log.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_log(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_log$handle() {
        return mpfr_log.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_log(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_log$address() {
        return mpfr_log.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_log(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_log(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_log.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_log", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_log2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_log2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_log2(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_log2$descriptor() {
        return mpfr_log2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_log2(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_log2$handle() {
        return mpfr_log2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_log2(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_log2$address() {
        return mpfr_log2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_log2(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_log2(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_log2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_log2", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_log10 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_log10");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_log10(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_log10$descriptor() {
        return mpfr_log10.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_log10(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_log10$handle() {
        return mpfr_log10.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_log10(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_log10$address() {
        return mpfr_log10.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_log10(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_log10(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_log10.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_log10", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_log1p {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_log1p");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_log1p(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_log1p$descriptor() {
        return mpfr_log1p.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_log1p(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_log1p$handle() {
        return mpfr_log1p.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_log1p(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_log1p$address() {
        return mpfr_log1p.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_log1p(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_log1p(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_log1p.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_log1p", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_log2p1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_log2p1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_log2p1(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_log2p1$descriptor() {
        return mpfr_log2p1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_log2p1(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_log2p1$handle() {
        return mpfr_log2p1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_log2p1(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_log2p1$address() {
        return mpfr_log2p1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_log2p1(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_log2p1(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_log2p1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_log2p1", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_log10p1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_log10p1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_log10p1(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_log10p1$descriptor() {
        return mpfr_log10p1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_log10p1(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_log10p1$handle() {
        return mpfr_log10p1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_log10p1(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_log10p1$address() {
        return mpfr_log10p1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_log10p1(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_log10p1(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_log10p1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_log10p1", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_log_ui {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_log_ui");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_log_ui(mpfr_ptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_log_ui$descriptor() {
        return mpfr_log_ui.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_log_ui(mpfr_ptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_log_ui$handle() {
        return mpfr_log_ui.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_log_ui(mpfr_ptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_log_ui$address() {
        return mpfr_log_ui.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_log_ui(mpfr_ptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static int mpfr_log_ui(MemorySegment x0, int x1, int x2) {
        var mh$ = mpfr_log_ui.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_log_ui", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_exp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_exp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_exp(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_exp$descriptor() {
        return mpfr_exp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_exp(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_exp$handle() {
        return mpfr_exp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_exp(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_exp$address() {
        return mpfr_exp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_exp(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_exp(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_exp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_exp", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_exp2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_exp2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_exp2(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_exp2$descriptor() {
        return mpfr_exp2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_exp2(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_exp2$handle() {
        return mpfr_exp2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_exp2(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_exp2$address() {
        return mpfr_exp2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_exp2(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_exp2(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_exp2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_exp2", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_exp10 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_exp10");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_exp10(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_exp10$descriptor() {
        return mpfr_exp10.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_exp10(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_exp10$handle() {
        return mpfr_exp10.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_exp10(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_exp10$address() {
        return mpfr_exp10.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_exp10(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_exp10(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_exp10.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_exp10", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_expm1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_expm1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_expm1(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_expm1$descriptor() {
        return mpfr_expm1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_expm1(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_expm1$handle() {
        return mpfr_expm1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_expm1(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_expm1$address() {
        return mpfr_expm1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_expm1(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_expm1(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_expm1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_expm1", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_exp2m1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_exp2m1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_exp2m1(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_exp2m1$descriptor() {
        return mpfr_exp2m1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_exp2m1(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_exp2m1$handle() {
        return mpfr_exp2m1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_exp2m1(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_exp2m1$address() {
        return mpfr_exp2m1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_exp2m1(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_exp2m1(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_exp2m1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_exp2m1", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_exp10m1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_exp10m1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_exp10m1(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_exp10m1$descriptor() {
        return mpfr_exp10m1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_exp10m1(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_exp10m1$handle() {
        return mpfr_exp10m1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_exp10m1(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_exp10m1$address() {
        return mpfr_exp10m1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_exp10m1(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_exp10m1(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_exp10m1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_exp10m1", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_eint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_eint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_eint(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_eint$descriptor() {
        return mpfr_eint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_eint(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_eint$handle() {
        return mpfr_eint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_eint(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_eint$address() {
        return mpfr_eint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_eint(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_eint(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_eint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_eint", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_li2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_li2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_li2(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_li2$descriptor() {
        return mpfr_li2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_li2(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_li2$handle() {
        return mpfr_li2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_li2(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_li2$address() {
        return mpfr_li2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_li2(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_li2(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_li2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_li2", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_cmp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_cmp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_cmp(mpfr_srcptr, mpfr_srcptr)
     * }
     */
    public static FunctionDescriptor mpfr_cmp$descriptor() {
        return mpfr_cmp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_cmp(mpfr_srcptr, mpfr_srcptr)
     * }
     */
    public static MethodHandle mpfr_cmp$handle() {
        return mpfr_cmp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_cmp(mpfr_srcptr, mpfr_srcptr)
     * }
     */
    public static MemorySegment mpfr_cmp$address() {
        return mpfr_cmp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_cmp(mpfr_srcptr, mpfr_srcptr)
     * }
     */
    public static int mpfr_cmp(MemorySegment x0, MemorySegment x1) {
        var mh$ = mpfr_cmp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_cmp", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_cmp3 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_cmp3");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_cmp3(mpfr_srcptr, mpfr_srcptr, int)
     * }
     */
    public static FunctionDescriptor mpfr_cmp3$descriptor() {
        return mpfr_cmp3.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_cmp3(mpfr_srcptr, mpfr_srcptr, int)
     * }
     */
    public static MethodHandle mpfr_cmp3$handle() {
        return mpfr_cmp3.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_cmp3(mpfr_srcptr, mpfr_srcptr, int)
     * }
     */
    public static MemorySegment mpfr_cmp3$address() {
        return mpfr_cmp3.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_cmp3(mpfr_srcptr, mpfr_srcptr, int)
     * }
     */
    public static int mpfr_cmp3(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_cmp3.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_cmp3", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_cmp_d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_cmp_d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_cmp_d(mpfr_srcptr, double)
     * }
     */
    public static FunctionDescriptor mpfr_cmp_d$descriptor() {
        return mpfr_cmp_d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_cmp_d(mpfr_srcptr, double)
     * }
     */
    public static MethodHandle mpfr_cmp_d$handle() {
        return mpfr_cmp_d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_cmp_d(mpfr_srcptr, double)
     * }
     */
    public static MemorySegment mpfr_cmp_d$address() {
        return mpfr_cmp_d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_cmp_d(mpfr_srcptr, double)
     * }
     */
    public static int mpfr_cmp_d(MemorySegment x0, double x1) {
        var mh$ = mpfr_cmp_d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_cmp_d", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_cmp_ld {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG_DOUBLE
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_cmp_ld");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_cmp_ld(mpfr_srcptr, long double)
     * }
     */
    public static FunctionDescriptor mpfr_cmp_ld$descriptor() {
        return mpfr_cmp_ld.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_cmp_ld(mpfr_srcptr, long double)
     * }
     */
    public static MethodHandle mpfr_cmp_ld$handle() {
        return mpfr_cmp_ld.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_cmp_ld(mpfr_srcptr, long double)
     * }
     */
    public static MemorySegment mpfr_cmp_ld$address() {
        return mpfr_cmp_ld.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_cmp_ld(mpfr_srcptr, long double)
     * }
     */
    public static int mpfr_cmp_ld(MemorySegment x0, double x1) {
        var mh$ = mpfr_cmp_ld.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_cmp_ld", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_cmp_ui {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_cmp_ui");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_cmp_ui(mpfr_srcptr, unsigned long)
     * }
     */
    public static FunctionDescriptor mpfr_cmp_ui$descriptor() {
        return mpfr_cmp_ui.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_cmp_ui(mpfr_srcptr, unsigned long)
     * }
     */
    public static MethodHandle mpfr_cmp_ui$handle() {
        return mpfr_cmp_ui.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_cmp_ui(mpfr_srcptr, unsigned long)
     * }
     */
    public static MemorySegment mpfr_cmp_ui$address() {
        return mpfr_cmp_ui.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_cmp_ui(mpfr_srcptr, unsigned long)
     * }
     */
    public static int mpfr_cmp_ui(MemorySegment x0, int x1) {
        var mh$ = mpfr_cmp_ui.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_cmp_ui", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_cmp_si {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_cmp_si");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_cmp_si(mpfr_srcptr, long)
     * }
     */
    public static FunctionDescriptor mpfr_cmp_si$descriptor() {
        return mpfr_cmp_si.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_cmp_si(mpfr_srcptr, long)
     * }
     */
    public static MethodHandle mpfr_cmp_si$handle() {
        return mpfr_cmp_si.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_cmp_si(mpfr_srcptr, long)
     * }
     */
    public static MemorySegment mpfr_cmp_si$address() {
        return mpfr_cmp_si.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_cmp_si(mpfr_srcptr, long)
     * }
     */
    public static int mpfr_cmp_si(MemorySegment x0, int x1) {
        var mh$ = mpfr_cmp_si.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_cmp_si", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_cmp_ui_2exp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG,
            mpfr_h.C_LONG
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_cmp_ui_2exp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_cmp_ui_2exp(mpfr_srcptr, unsigned long, mpfr_exp_t)
     * }
     */
    public static FunctionDescriptor mpfr_cmp_ui_2exp$descriptor() {
        return mpfr_cmp_ui_2exp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_cmp_ui_2exp(mpfr_srcptr, unsigned long, mpfr_exp_t)
     * }
     */
    public static MethodHandle mpfr_cmp_ui_2exp$handle() {
        return mpfr_cmp_ui_2exp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_cmp_ui_2exp(mpfr_srcptr, unsigned long, mpfr_exp_t)
     * }
     */
    public static MemorySegment mpfr_cmp_ui_2exp$address() {
        return mpfr_cmp_ui_2exp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_cmp_ui_2exp(mpfr_srcptr, unsigned long, mpfr_exp_t)
     * }
     */
    public static int mpfr_cmp_ui_2exp(MemorySegment x0, int x1, int x2) {
        var mh$ = mpfr_cmp_ui_2exp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_cmp_ui_2exp", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_cmp_si_2exp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG,
            mpfr_h.C_LONG
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_cmp_si_2exp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_cmp_si_2exp(mpfr_srcptr, long, mpfr_exp_t)
     * }
     */
    public static FunctionDescriptor mpfr_cmp_si_2exp$descriptor() {
        return mpfr_cmp_si_2exp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_cmp_si_2exp(mpfr_srcptr, long, mpfr_exp_t)
     * }
     */
    public static MethodHandle mpfr_cmp_si_2exp$handle() {
        return mpfr_cmp_si_2exp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_cmp_si_2exp(mpfr_srcptr, long, mpfr_exp_t)
     * }
     */
    public static MemorySegment mpfr_cmp_si_2exp$address() {
        return mpfr_cmp_si_2exp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_cmp_si_2exp(mpfr_srcptr, long, mpfr_exp_t)
     * }
     */
    public static int mpfr_cmp_si_2exp(MemorySegment x0, int x1, int x2) {
        var mh$ = mpfr_cmp_si_2exp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_cmp_si_2exp", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_cmpabs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_cmpabs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_cmpabs(mpfr_srcptr, mpfr_srcptr)
     * }
     */
    public static FunctionDescriptor mpfr_cmpabs$descriptor() {
        return mpfr_cmpabs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_cmpabs(mpfr_srcptr, mpfr_srcptr)
     * }
     */
    public static MethodHandle mpfr_cmpabs$handle() {
        return mpfr_cmpabs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_cmpabs(mpfr_srcptr, mpfr_srcptr)
     * }
     */
    public static MemorySegment mpfr_cmpabs$address() {
        return mpfr_cmpabs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_cmpabs(mpfr_srcptr, mpfr_srcptr)
     * }
     */
    public static int mpfr_cmpabs(MemorySegment x0, MemorySegment x1) {
        var mh$ = mpfr_cmpabs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_cmpabs", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_cmpabs_ui {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_cmpabs_ui");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_cmpabs_ui(mpfr_srcptr, unsigned long)
     * }
     */
    public static FunctionDescriptor mpfr_cmpabs_ui$descriptor() {
        return mpfr_cmpabs_ui.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_cmpabs_ui(mpfr_srcptr, unsigned long)
     * }
     */
    public static MethodHandle mpfr_cmpabs_ui$handle() {
        return mpfr_cmpabs_ui.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_cmpabs_ui(mpfr_srcptr, unsigned long)
     * }
     */
    public static MemorySegment mpfr_cmpabs_ui$address() {
        return mpfr_cmpabs_ui.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_cmpabs_ui(mpfr_srcptr, unsigned long)
     * }
     */
    public static int mpfr_cmpabs_ui(MemorySegment x0, int x1) {
        var mh$ = mpfr_cmpabs_ui.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_cmpabs_ui", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_reldiff {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_reldiff");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void mpfr_reldiff(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_reldiff$descriptor() {
        return mpfr_reldiff.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void mpfr_reldiff(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_reldiff$handle() {
        return mpfr_reldiff.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void mpfr_reldiff(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_reldiff$address() {
        return mpfr_reldiff.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void mpfr_reldiff(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static void mpfr_reldiff(MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3) {
        var mh$ = mpfr_reldiff.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_reldiff", x0, x1, x2, x3);
            }
            mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_eq {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_eq");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_eq(mpfr_srcptr, mpfr_srcptr, unsigned long)
     * }
     */
    public static FunctionDescriptor mpfr_eq$descriptor() {
        return mpfr_eq.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_eq(mpfr_srcptr, mpfr_srcptr, unsigned long)
     * }
     */
    public static MethodHandle mpfr_eq$handle() {
        return mpfr_eq.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_eq(mpfr_srcptr, mpfr_srcptr, unsigned long)
     * }
     */
    public static MemorySegment mpfr_eq$address() {
        return mpfr_eq.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_eq(mpfr_srcptr, mpfr_srcptr, unsigned long)
     * }
     */
    public static int mpfr_eq(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_eq.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_eq", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_sgn {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_sgn");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_sgn(mpfr_srcptr)
     * }
     */
    public static FunctionDescriptor mpfr_sgn$descriptor() {
        return mpfr_sgn.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_sgn(mpfr_srcptr)
     * }
     */
    public static MethodHandle mpfr_sgn$handle() {
        return mpfr_sgn.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_sgn(mpfr_srcptr)
     * }
     */
    public static MemorySegment mpfr_sgn$address() {
        return mpfr_sgn.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_sgn(mpfr_srcptr)
     * }
     */
    public static int mpfr_sgn(MemorySegment x0) {
        var mh$ = mpfr_sgn.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_sgn", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_mul_2exp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_mul_2exp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_mul_2exp(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_mul_2exp$descriptor() {
        return mpfr_mul_2exp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_mul_2exp(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_mul_2exp$handle() {
        return mpfr_mul_2exp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_mul_2exp(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_mul_2exp$address() {
        return mpfr_mul_2exp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_mul_2exp(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static int mpfr_mul_2exp(MemorySegment x0, MemorySegment x1, int x2, int x3) {
        var mh$ = mpfr_mul_2exp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_mul_2exp", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_div_2exp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_div_2exp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_div_2exp(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_div_2exp$descriptor() {
        return mpfr_div_2exp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_div_2exp(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_div_2exp$handle() {
        return mpfr_div_2exp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_div_2exp(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_div_2exp$address() {
        return mpfr_div_2exp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_div_2exp(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static int mpfr_div_2exp(MemorySegment x0, MemorySegment x1, int x2, int x3) {
        var mh$ = mpfr_div_2exp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_div_2exp", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_mul_2ui {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_mul_2ui");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_mul_2ui(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_mul_2ui$descriptor() {
        return mpfr_mul_2ui.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_mul_2ui(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_mul_2ui$handle() {
        return mpfr_mul_2ui.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_mul_2ui(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_mul_2ui$address() {
        return mpfr_mul_2ui.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_mul_2ui(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static int mpfr_mul_2ui(MemorySegment x0, MemorySegment x1, int x2, int x3) {
        var mh$ = mpfr_mul_2ui.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_mul_2ui", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_div_2ui {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_div_2ui");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_div_2ui(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_div_2ui$descriptor() {
        return mpfr_div_2ui.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_div_2ui(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_div_2ui$handle() {
        return mpfr_div_2ui.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_div_2ui(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_div_2ui$address() {
        return mpfr_div_2ui.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_div_2ui(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static int mpfr_div_2ui(MemorySegment x0, MemorySegment x1, int x2, int x3) {
        var mh$ = mpfr_div_2ui.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_div_2ui", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_mul_2si {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_mul_2si");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_mul_2si(mpfr_ptr, mpfr_srcptr, long, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_mul_2si$descriptor() {
        return mpfr_mul_2si.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_mul_2si(mpfr_ptr, mpfr_srcptr, long, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_mul_2si$handle() {
        return mpfr_mul_2si.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_mul_2si(mpfr_ptr, mpfr_srcptr, long, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_mul_2si$address() {
        return mpfr_mul_2si.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_mul_2si(mpfr_ptr, mpfr_srcptr, long, mpfr_rnd_t)
     * }
     */
    public static int mpfr_mul_2si(MemorySegment x0, MemorySegment x1, int x2, int x3) {
        var mh$ = mpfr_mul_2si.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_mul_2si", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_div_2si {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_div_2si");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_div_2si(mpfr_ptr, mpfr_srcptr, long, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_div_2si$descriptor() {
        return mpfr_div_2si.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_div_2si(mpfr_ptr, mpfr_srcptr, long, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_div_2si$handle() {
        return mpfr_div_2si.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_div_2si(mpfr_ptr, mpfr_srcptr, long, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_div_2si$address() {
        return mpfr_div_2si.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_div_2si(mpfr_ptr, mpfr_srcptr, long, mpfr_rnd_t)
     * }
     */
    public static int mpfr_div_2si(MemorySegment x0, MemorySegment x1, int x2, int x3) {
        var mh$ = mpfr_div_2si.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_div_2si", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_rint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_rint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_rint(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_rint$descriptor() {
        return mpfr_rint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_rint(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_rint$handle() {
        return mpfr_rint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_rint(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_rint$address() {
        return mpfr_rint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_rint(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_rint(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_rint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_rint", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_roundeven {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_roundeven");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_roundeven(mpfr_ptr, mpfr_srcptr)
     * }
     */
    public static FunctionDescriptor mpfr_roundeven$descriptor() {
        return mpfr_roundeven.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_roundeven(mpfr_ptr, mpfr_srcptr)
     * }
     */
    public static MethodHandle mpfr_roundeven$handle() {
        return mpfr_roundeven.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_roundeven(mpfr_ptr, mpfr_srcptr)
     * }
     */
    public static MemorySegment mpfr_roundeven$address() {
        return mpfr_roundeven.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_roundeven(mpfr_ptr, mpfr_srcptr)
     * }
     */
    public static int mpfr_roundeven(MemorySegment x0, MemorySegment x1) {
        var mh$ = mpfr_roundeven.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_roundeven", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_round {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_round");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_round(mpfr_ptr, mpfr_srcptr)
     * }
     */
    public static FunctionDescriptor mpfr_round$descriptor() {
        return mpfr_round.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_round(mpfr_ptr, mpfr_srcptr)
     * }
     */
    public static MethodHandle mpfr_round$handle() {
        return mpfr_round.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_round(mpfr_ptr, mpfr_srcptr)
     * }
     */
    public static MemorySegment mpfr_round$address() {
        return mpfr_round.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_round(mpfr_ptr, mpfr_srcptr)
     * }
     */
    public static int mpfr_round(MemorySegment x0, MemorySegment x1) {
        var mh$ = mpfr_round.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_round", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_trunc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_trunc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_trunc(mpfr_ptr, mpfr_srcptr)
     * }
     */
    public static FunctionDescriptor mpfr_trunc$descriptor() {
        return mpfr_trunc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_trunc(mpfr_ptr, mpfr_srcptr)
     * }
     */
    public static MethodHandle mpfr_trunc$handle() {
        return mpfr_trunc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_trunc(mpfr_ptr, mpfr_srcptr)
     * }
     */
    public static MemorySegment mpfr_trunc$address() {
        return mpfr_trunc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_trunc(mpfr_ptr, mpfr_srcptr)
     * }
     */
    public static int mpfr_trunc(MemorySegment x0, MemorySegment x1) {
        var mh$ = mpfr_trunc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_trunc", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_ceil {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_ceil");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_ceil(mpfr_ptr, mpfr_srcptr)
     * }
     */
    public static FunctionDescriptor mpfr_ceil$descriptor() {
        return mpfr_ceil.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_ceil(mpfr_ptr, mpfr_srcptr)
     * }
     */
    public static MethodHandle mpfr_ceil$handle() {
        return mpfr_ceil.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_ceil(mpfr_ptr, mpfr_srcptr)
     * }
     */
    public static MemorySegment mpfr_ceil$address() {
        return mpfr_ceil.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_ceil(mpfr_ptr, mpfr_srcptr)
     * }
     */
    public static int mpfr_ceil(MemorySegment x0, MemorySegment x1) {
        var mh$ = mpfr_ceil.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_ceil", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_floor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_floor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_floor(mpfr_ptr, mpfr_srcptr)
     * }
     */
    public static FunctionDescriptor mpfr_floor$descriptor() {
        return mpfr_floor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_floor(mpfr_ptr, mpfr_srcptr)
     * }
     */
    public static MethodHandle mpfr_floor$handle() {
        return mpfr_floor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_floor(mpfr_ptr, mpfr_srcptr)
     * }
     */
    public static MemorySegment mpfr_floor$address() {
        return mpfr_floor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_floor(mpfr_ptr, mpfr_srcptr)
     * }
     */
    public static int mpfr_floor(MemorySegment x0, MemorySegment x1) {
        var mh$ = mpfr_floor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_floor", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_rint_roundeven {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_rint_roundeven");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_rint_roundeven(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_rint_roundeven$descriptor() {
        return mpfr_rint_roundeven.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_rint_roundeven(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_rint_roundeven$handle() {
        return mpfr_rint_roundeven.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_rint_roundeven(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_rint_roundeven$address() {
        return mpfr_rint_roundeven.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_rint_roundeven(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_rint_roundeven(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_rint_roundeven.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_rint_roundeven", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_rint_round {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_rint_round");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_rint_round(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_rint_round$descriptor() {
        return mpfr_rint_round.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_rint_round(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_rint_round$handle() {
        return mpfr_rint_round.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_rint_round(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_rint_round$address() {
        return mpfr_rint_round.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_rint_round(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_rint_round(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_rint_round.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_rint_round", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_rint_trunc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_rint_trunc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_rint_trunc(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_rint_trunc$descriptor() {
        return mpfr_rint_trunc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_rint_trunc(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_rint_trunc$handle() {
        return mpfr_rint_trunc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_rint_trunc(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_rint_trunc$address() {
        return mpfr_rint_trunc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_rint_trunc(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_rint_trunc(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_rint_trunc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_rint_trunc", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_rint_ceil {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_rint_ceil");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_rint_ceil(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_rint_ceil$descriptor() {
        return mpfr_rint_ceil.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_rint_ceil(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_rint_ceil$handle() {
        return mpfr_rint_ceil.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_rint_ceil(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_rint_ceil$address() {
        return mpfr_rint_ceil.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_rint_ceil(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_rint_ceil(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_rint_ceil.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_rint_ceil", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_rint_floor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_rint_floor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_rint_floor(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_rint_floor$descriptor() {
        return mpfr_rint_floor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_rint_floor(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_rint_floor$handle() {
        return mpfr_rint_floor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_rint_floor(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_rint_floor$address() {
        return mpfr_rint_floor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_rint_floor(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_rint_floor(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_rint_floor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_rint_floor", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_frac {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_frac");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_frac(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_frac$descriptor() {
        return mpfr_frac.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_frac(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_frac$handle() {
        return mpfr_frac.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_frac(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_frac$address() {
        return mpfr_frac.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_frac(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_frac(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_frac.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_frac", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_modf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_modf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_modf(mpfr_ptr, mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_modf$descriptor() {
        return mpfr_modf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_modf(mpfr_ptr, mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_modf$handle() {
        return mpfr_modf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_modf(mpfr_ptr, mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_modf$address() {
        return mpfr_modf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_modf(mpfr_ptr, mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_modf(MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3) {
        var mh$ = mpfr_modf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_modf", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_remquo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_remquo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_remquo(mpfr_ptr, long *, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_remquo$descriptor() {
        return mpfr_remquo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_remquo(mpfr_ptr, long *, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_remquo$handle() {
        return mpfr_remquo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_remquo(mpfr_ptr, long *, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_remquo$address() {
        return mpfr_remquo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_remquo(mpfr_ptr, long *, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_remquo(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, int x4) {
        var mh$ = mpfr_remquo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_remquo", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_remainder {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_remainder");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_remainder(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_remainder$descriptor() {
        return mpfr_remainder.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_remainder(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_remainder$handle() {
        return mpfr_remainder.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_remainder(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_remainder$address() {
        return mpfr_remainder.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_remainder(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_remainder(MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3) {
        var mh$ = mpfr_remainder.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_remainder", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_fmod {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_fmod");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_fmod(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_fmod$descriptor() {
        return mpfr_fmod.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_fmod(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_fmod$handle() {
        return mpfr_fmod.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_fmod(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_fmod$address() {
        return mpfr_fmod.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_fmod(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_fmod(MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3) {
        var mh$ = mpfr_fmod.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_fmod", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_fmod_ui {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_fmod_ui");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_fmod_ui(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_fmod_ui$descriptor() {
        return mpfr_fmod_ui.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_fmod_ui(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_fmod_ui$handle() {
        return mpfr_fmod_ui.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_fmod_ui(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_fmod_ui$address() {
        return mpfr_fmod_ui.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_fmod_ui(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static int mpfr_fmod_ui(MemorySegment x0, MemorySegment x1, int x2, int x3) {
        var mh$ = mpfr_fmod_ui.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_fmod_ui", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_fmodquo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_fmodquo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_fmodquo(mpfr_ptr, long *, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_fmodquo$descriptor() {
        return mpfr_fmodquo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_fmodquo(mpfr_ptr, long *, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_fmodquo$handle() {
        return mpfr_fmodquo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_fmodquo(mpfr_ptr, long *, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_fmodquo$address() {
        return mpfr_fmodquo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_fmodquo(mpfr_ptr, long *, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_fmodquo(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, int x4) {
        var mh$ = mpfr_fmodquo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_fmodquo", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_fits_ulong_p {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_fits_ulong_p");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_fits_ulong_p(mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_fits_ulong_p$descriptor() {
        return mpfr_fits_ulong_p.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_fits_ulong_p(mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_fits_ulong_p$handle() {
        return mpfr_fits_ulong_p.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_fits_ulong_p(mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_fits_ulong_p$address() {
        return mpfr_fits_ulong_p.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_fits_ulong_p(mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_fits_ulong_p(MemorySegment x0, int x1) {
        var mh$ = mpfr_fits_ulong_p.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_fits_ulong_p", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_fits_slong_p {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_fits_slong_p");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_fits_slong_p(mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_fits_slong_p$descriptor() {
        return mpfr_fits_slong_p.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_fits_slong_p(mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_fits_slong_p$handle() {
        return mpfr_fits_slong_p.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_fits_slong_p(mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_fits_slong_p$address() {
        return mpfr_fits_slong_p.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_fits_slong_p(mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_fits_slong_p(MemorySegment x0, int x1) {
        var mh$ = mpfr_fits_slong_p.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_fits_slong_p", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_fits_uint_p {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_fits_uint_p");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_fits_uint_p(mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_fits_uint_p$descriptor() {
        return mpfr_fits_uint_p.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_fits_uint_p(mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_fits_uint_p$handle() {
        return mpfr_fits_uint_p.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_fits_uint_p(mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_fits_uint_p$address() {
        return mpfr_fits_uint_p.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_fits_uint_p(mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_fits_uint_p(MemorySegment x0, int x1) {
        var mh$ = mpfr_fits_uint_p.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_fits_uint_p", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_fits_sint_p {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_fits_sint_p");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_fits_sint_p(mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_fits_sint_p$descriptor() {
        return mpfr_fits_sint_p.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_fits_sint_p(mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_fits_sint_p$handle() {
        return mpfr_fits_sint_p.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_fits_sint_p(mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_fits_sint_p$address() {
        return mpfr_fits_sint_p.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_fits_sint_p(mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_fits_sint_p(MemorySegment x0, int x1) {
        var mh$ = mpfr_fits_sint_p.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_fits_sint_p", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_fits_ushort_p {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_fits_ushort_p");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_fits_ushort_p(mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_fits_ushort_p$descriptor() {
        return mpfr_fits_ushort_p.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_fits_ushort_p(mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_fits_ushort_p$handle() {
        return mpfr_fits_ushort_p.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_fits_ushort_p(mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_fits_ushort_p$address() {
        return mpfr_fits_ushort_p.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_fits_ushort_p(mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_fits_ushort_p(MemorySegment x0, int x1) {
        var mh$ = mpfr_fits_ushort_p.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_fits_ushort_p", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_fits_sshort_p {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_fits_sshort_p");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_fits_sshort_p(mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_fits_sshort_p$descriptor() {
        return mpfr_fits_sshort_p.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_fits_sshort_p(mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_fits_sshort_p$handle() {
        return mpfr_fits_sshort_p.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_fits_sshort_p(mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_fits_sshort_p$address() {
        return mpfr_fits_sshort_p.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_fits_sshort_p(mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_fits_sshort_p(MemorySegment x0, int x1) {
        var mh$ = mpfr_fits_sshort_p.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_fits_sshort_p", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_fits_uintmax_p {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_fits_uintmax_p");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_fits_uintmax_p(mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_fits_uintmax_p$descriptor() {
        return mpfr_fits_uintmax_p.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_fits_uintmax_p(mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_fits_uintmax_p$handle() {
        return mpfr_fits_uintmax_p.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_fits_uintmax_p(mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_fits_uintmax_p$address() {
        return mpfr_fits_uintmax_p.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_fits_uintmax_p(mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_fits_uintmax_p(MemorySegment x0, int x1) {
        var mh$ = mpfr_fits_uintmax_p.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_fits_uintmax_p", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_fits_intmax_p {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_fits_intmax_p");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_fits_intmax_p(mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_fits_intmax_p$descriptor() {
        return mpfr_fits_intmax_p.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_fits_intmax_p(mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_fits_intmax_p$handle() {
        return mpfr_fits_intmax_p.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_fits_intmax_p(mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_fits_intmax_p$address() {
        return mpfr_fits_intmax_p.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_fits_intmax_p(mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_fits_intmax_p(MemorySegment x0, int x1) {
        var mh$ = mpfr_fits_intmax_p.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_fits_intmax_p", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_extract {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_extract");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void mpfr_extract(mpz_ptr, mpfr_srcptr, unsigned int)
     * }
     */
    public static FunctionDescriptor mpfr_extract$descriptor() {
        return mpfr_extract.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void mpfr_extract(mpz_ptr, mpfr_srcptr, unsigned int)
     * }
     */
    public static MethodHandle mpfr_extract$handle() {
        return mpfr_extract.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void mpfr_extract(mpz_ptr, mpfr_srcptr, unsigned int)
     * }
     */
    public static MemorySegment mpfr_extract$address() {
        return mpfr_extract.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void mpfr_extract(mpz_ptr, mpfr_srcptr, unsigned int)
     * }
     */
    public static void mpfr_extract(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_extract.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_extract", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_swap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_swap");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void mpfr_swap(mpfr_ptr, mpfr_ptr)
     * }
     */
    public static FunctionDescriptor mpfr_swap$descriptor() {
        return mpfr_swap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void mpfr_swap(mpfr_ptr, mpfr_ptr)
     * }
     */
    public static MethodHandle mpfr_swap$handle() {
        return mpfr_swap.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void mpfr_swap(mpfr_ptr, mpfr_ptr)
     * }
     */
    public static MemorySegment mpfr_swap$address() {
        return mpfr_swap.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void mpfr_swap(mpfr_ptr, mpfr_ptr)
     * }
     */
    public static void mpfr_swap(MemorySegment x0, MemorySegment x1) {
        var mh$ = mpfr_swap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_swap", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_dump {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            mpfr_h.C_POINTER
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_dump");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void mpfr_dump(mpfr_srcptr)
     * }
     */
    public static FunctionDescriptor mpfr_dump$descriptor() {
        return mpfr_dump.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void mpfr_dump(mpfr_srcptr)
     * }
     */
    public static MethodHandle mpfr_dump$handle() {
        return mpfr_dump.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void mpfr_dump(mpfr_srcptr)
     * }
     */
    public static MemorySegment mpfr_dump$address() {
        return mpfr_dump.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void mpfr_dump(mpfr_srcptr)
     * }
     */
    public static void mpfr_dump(MemorySegment x0) {
        var mh$ = mpfr_dump.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_dump", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_nan_p {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_nan_p");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_nan_p(mpfr_srcptr)
     * }
     */
    public static FunctionDescriptor mpfr_nan_p$descriptor() {
        return mpfr_nan_p.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_nan_p(mpfr_srcptr)
     * }
     */
    public static MethodHandle mpfr_nan_p$handle() {
        return mpfr_nan_p.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_nan_p(mpfr_srcptr)
     * }
     */
    public static MemorySegment mpfr_nan_p$address() {
        return mpfr_nan_p.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_nan_p(mpfr_srcptr)
     * }
     */
    public static int mpfr_nan_p(MemorySegment x0) {
        var mh$ = mpfr_nan_p.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_nan_p", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_inf_p {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_inf_p");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_inf_p(mpfr_srcptr)
     * }
     */
    public static FunctionDescriptor mpfr_inf_p$descriptor() {
        return mpfr_inf_p.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_inf_p(mpfr_srcptr)
     * }
     */
    public static MethodHandle mpfr_inf_p$handle() {
        return mpfr_inf_p.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_inf_p(mpfr_srcptr)
     * }
     */
    public static MemorySegment mpfr_inf_p$address() {
        return mpfr_inf_p.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_inf_p(mpfr_srcptr)
     * }
     */
    public static int mpfr_inf_p(MemorySegment x0) {
        var mh$ = mpfr_inf_p.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_inf_p", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_number_p {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_number_p");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_number_p(mpfr_srcptr)
     * }
     */
    public static FunctionDescriptor mpfr_number_p$descriptor() {
        return mpfr_number_p.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_number_p(mpfr_srcptr)
     * }
     */
    public static MethodHandle mpfr_number_p$handle() {
        return mpfr_number_p.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_number_p(mpfr_srcptr)
     * }
     */
    public static MemorySegment mpfr_number_p$address() {
        return mpfr_number_p.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_number_p(mpfr_srcptr)
     * }
     */
    public static int mpfr_number_p(MemorySegment x0) {
        var mh$ = mpfr_number_p.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_number_p", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_integer_p {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_integer_p");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_integer_p(mpfr_srcptr)
     * }
     */
    public static FunctionDescriptor mpfr_integer_p$descriptor() {
        return mpfr_integer_p.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_integer_p(mpfr_srcptr)
     * }
     */
    public static MethodHandle mpfr_integer_p$handle() {
        return mpfr_integer_p.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_integer_p(mpfr_srcptr)
     * }
     */
    public static MemorySegment mpfr_integer_p$address() {
        return mpfr_integer_p.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_integer_p(mpfr_srcptr)
     * }
     */
    public static int mpfr_integer_p(MemorySegment x0) {
        var mh$ = mpfr_integer_p.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_integer_p", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_zero_p {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_zero_p");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_zero_p(mpfr_srcptr)
     * }
     */
    public static FunctionDescriptor mpfr_zero_p$descriptor() {
        return mpfr_zero_p.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_zero_p(mpfr_srcptr)
     * }
     */
    public static MethodHandle mpfr_zero_p$handle() {
        return mpfr_zero_p.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_zero_p(mpfr_srcptr)
     * }
     */
    public static MemorySegment mpfr_zero_p$address() {
        return mpfr_zero_p.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_zero_p(mpfr_srcptr)
     * }
     */
    public static int mpfr_zero_p(MemorySegment x0) {
        var mh$ = mpfr_zero_p.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_zero_p", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_regular_p {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_regular_p");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_regular_p(mpfr_srcptr)
     * }
     */
    public static FunctionDescriptor mpfr_regular_p$descriptor() {
        return mpfr_regular_p.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_regular_p(mpfr_srcptr)
     * }
     */
    public static MethodHandle mpfr_regular_p$handle() {
        return mpfr_regular_p.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_regular_p(mpfr_srcptr)
     * }
     */
    public static MemorySegment mpfr_regular_p$address() {
        return mpfr_regular_p.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_regular_p(mpfr_srcptr)
     * }
     */
    public static int mpfr_regular_p(MemorySegment x0) {
        var mh$ = mpfr_regular_p.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_regular_p", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_greater_p {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_greater_p");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_greater_p(mpfr_srcptr, mpfr_srcptr)
     * }
     */
    public static FunctionDescriptor mpfr_greater_p$descriptor() {
        return mpfr_greater_p.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_greater_p(mpfr_srcptr, mpfr_srcptr)
     * }
     */
    public static MethodHandle mpfr_greater_p$handle() {
        return mpfr_greater_p.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_greater_p(mpfr_srcptr, mpfr_srcptr)
     * }
     */
    public static MemorySegment mpfr_greater_p$address() {
        return mpfr_greater_p.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_greater_p(mpfr_srcptr, mpfr_srcptr)
     * }
     */
    public static int mpfr_greater_p(MemorySegment x0, MemorySegment x1) {
        var mh$ = mpfr_greater_p.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_greater_p", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_greaterequal_p {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_greaterequal_p");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_greaterequal_p(mpfr_srcptr, mpfr_srcptr)
     * }
     */
    public static FunctionDescriptor mpfr_greaterequal_p$descriptor() {
        return mpfr_greaterequal_p.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_greaterequal_p(mpfr_srcptr, mpfr_srcptr)
     * }
     */
    public static MethodHandle mpfr_greaterequal_p$handle() {
        return mpfr_greaterequal_p.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_greaterequal_p(mpfr_srcptr, mpfr_srcptr)
     * }
     */
    public static MemorySegment mpfr_greaterequal_p$address() {
        return mpfr_greaterequal_p.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_greaterequal_p(mpfr_srcptr, mpfr_srcptr)
     * }
     */
    public static int mpfr_greaterequal_p(MemorySegment x0, MemorySegment x1) {
        var mh$ = mpfr_greaterequal_p.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_greaterequal_p", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_less_p {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_less_p");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_less_p(mpfr_srcptr, mpfr_srcptr)
     * }
     */
    public static FunctionDescriptor mpfr_less_p$descriptor() {
        return mpfr_less_p.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_less_p(mpfr_srcptr, mpfr_srcptr)
     * }
     */
    public static MethodHandle mpfr_less_p$handle() {
        return mpfr_less_p.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_less_p(mpfr_srcptr, mpfr_srcptr)
     * }
     */
    public static MemorySegment mpfr_less_p$address() {
        return mpfr_less_p.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_less_p(mpfr_srcptr, mpfr_srcptr)
     * }
     */
    public static int mpfr_less_p(MemorySegment x0, MemorySegment x1) {
        var mh$ = mpfr_less_p.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_less_p", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_lessequal_p {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_lessequal_p");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_lessequal_p(mpfr_srcptr, mpfr_srcptr)
     * }
     */
    public static FunctionDescriptor mpfr_lessequal_p$descriptor() {
        return mpfr_lessequal_p.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_lessequal_p(mpfr_srcptr, mpfr_srcptr)
     * }
     */
    public static MethodHandle mpfr_lessequal_p$handle() {
        return mpfr_lessequal_p.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_lessequal_p(mpfr_srcptr, mpfr_srcptr)
     * }
     */
    public static MemorySegment mpfr_lessequal_p$address() {
        return mpfr_lessequal_p.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_lessequal_p(mpfr_srcptr, mpfr_srcptr)
     * }
     */
    public static int mpfr_lessequal_p(MemorySegment x0, MemorySegment x1) {
        var mh$ = mpfr_lessequal_p.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_lessequal_p", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_lessgreater_p {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_lessgreater_p");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_lessgreater_p(mpfr_srcptr, mpfr_srcptr)
     * }
     */
    public static FunctionDescriptor mpfr_lessgreater_p$descriptor() {
        return mpfr_lessgreater_p.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_lessgreater_p(mpfr_srcptr, mpfr_srcptr)
     * }
     */
    public static MethodHandle mpfr_lessgreater_p$handle() {
        return mpfr_lessgreater_p.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_lessgreater_p(mpfr_srcptr, mpfr_srcptr)
     * }
     */
    public static MemorySegment mpfr_lessgreater_p$address() {
        return mpfr_lessgreater_p.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_lessgreater_p(mpfr_srcptr, mpfr_srcptr)
     * }
     */
    public static int mpfr_lessgreater_p(MemorySegment x0, MemorySegment x1) {
        var mh$ = mpfr_lessgreater_p.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_lessgreater_p", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_equal_p {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_equal_p");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_equal_p(mpfr_srcptr, mpfr_srcptr)
     * }
     */
    public static FunctionDescriptor mpfr_equal_p$descriptor() {
        return mpfr_equal_p.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_equal_p(mpfr_srcptr, mpfr_srcptr)
     * }
     */
    public static MethodHandle mpfr_equal_p$handle() {
        return mpfr_equal_p.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_equal_p(mpfr_srcptr, mpfr_srcptr)
     * }
     */
    public static MemorySegment mpfr_equal_p$address() {
        return mpfr_equal_p.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_equal_p(mpfr_srcptr, mpfr_srcptr)
     * }
     */
    public static int mpfr_equal_p(MemorySegment x0, MemorySegment x1) {
        var mh$ = mpfr_equal_p.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_equal_p", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_unordered_p {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_unordered_p");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_unordered_p(mpfr_srcptr, mpfr_srcptr)
     * }
     */
    public static FunctionDescriptor mpfr_unordered_p$descriptor() {
        return mpfr_unordered_p.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_unordered_p(mpfr_srcptr, mpfr_srcptr)
     * }
     */
    public static MethodHandle mpfr_unordered_p$handle() {
        return mpfr_unordered_p.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_unordered_p(mpfr_srcptr, mpfr_srcptr)
     * }
     */
    public static MemorySegment mpfr_unordered_p$address() {
        return mpfr_unordered_p.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_unordered_p(mpfr_srcptr, mpfr_srcptr)
     * }
     */
    public static int mpfr_unordered_p(MemorySegment x0, MemorySegment x1) {
        var mh$ = mpfr_unordered_p.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_unordered_p", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_atanh {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_atanh");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_atanh(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_atanh$descriptor() {
        return mpfr_atanh.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_atanh(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_atanh$handle() {
        return mpfr_atanh.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_atanh(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_atanh$address() {
        return mpfr_atanh.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_atanh(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_atanh(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_atanh.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_atanh", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_acosh {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_acosh");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_acosh(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_acosh$descriptor() {
        return mpfr_acosh.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_acosh(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_acosh$handle() {
        return mpfr_acosh.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_acosh(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_acosh$address() {
        return mpfr_acosh.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_acosh(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_acosh(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_acosh.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_acosh", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_asinh {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_asinh");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_asinh(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_asinh$descriptor() {
        return mpfr_asinh.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_asinh(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_asinh$handle() {
        return mpfr_asinh.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_asinh(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_asinh$address() {
        return mpfr_asinh.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_asinh(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_asinh(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_asinh.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_asinh", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_cosh {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_cosh");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_cosh(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_cosh$descriptor() {
        return mpfr_cosh.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_cosh(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_cosh$handle() {
        return mpfr_cosh.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_cosh(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_cosh$address() {
        return mpfr_cosh.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_cosh(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_cosh(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_cosh.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_cosh", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_sinh {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_sinh");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_sinh(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_sinh$descriptor() {
        return mpfr_sinh.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_sinh(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_sinh$handle() {
        return mpfr_sinh.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_sinh(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_sinh$address() {
        return mpfr_sinh.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_sinh(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_sinh(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_sinh.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_sinh", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_tanh {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_tanh");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_tanh(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_tanh$descriptor() {
        return mpfr_tanh.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_tanh(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_tanh$handle() {
        return mpfr_tanh.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_tanh(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_tanh$address() {
        return mpfr_tanh.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_tanh(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_tanh(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_tanh.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_tanh", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_sinh_cosh {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_sinh_cosh");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_sinh_cosh(mpfr_ptr, mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_sinh_cosh$descriptor() {
        return mpfr_sinh_cosh.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_sinh_cosh(mpfr_ptr, mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_sinh_cosh$handle() {
        return mpfr_sinh_cosh.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_sinh_cosh(mpfr_ptr, mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_sinh_cosh$address() {
        return mpfr_sinh_cosh.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_sinh_cosh(mpfr_ptr, mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_sinh_cosh(MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3) {
        var mh$ = mpfr_sinh_cosh.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_sinh_cosh", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_sech {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_sech");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_sech(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_sech$descriptor() {
        return mpfr_sech.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_sech(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_sech$handle() {
        return mpfr_sech.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_sech(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_sech$address() {
        return mpfr_sech.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_sech(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_sech(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_sech.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_sech", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_csch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_csch");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_csch(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_csch$descriptor() {
        return mpfr_csch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_csch(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_csch$handle() {
        return mpfr_csch.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_csch(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_csch$address() {
        return mpfr_csch.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_csch(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_csch(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_csch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_csch", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_coth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_coth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_coth(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_coth$descriptor() {
        return mpfr_coth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_coth(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_coth$handle() {
        return mpfr_coth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_coth(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_coth$address() {
        return mpfr_coth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_coth(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_coth(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_coth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_coth", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_acos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_acos");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_acos(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_acos$descriptor() {
        return mpfr_acos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_acos(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_acos$handle() {
        return mpfr_acos.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_acos(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_acos$address() {
        return mpfr_acos.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_acos(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_acos(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_acos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_acos", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_asin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_asin");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_asin(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_asin$descriptor() {
        return mpfr_asin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_asin(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_asin$handle() {
        return mpfr_asin.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_asin(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_asin$address() {
        return mpfr_asin.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_asin(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_asin(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_asin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_asin", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_atan {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_atan");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_atan(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_atan$descriptor() {
        return mpfr_atan.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_atan(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_atan$handle() {
        return mpfr_atan.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_atan(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_atan$address() {
        return mpfr_atan.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_atan(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_atan(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_atan.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_atan", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_sin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_sin");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_sin(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_sin$descriptor() {
        return mpfr_sin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_sin(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_sin$handle() {
        return mpfr_sin.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_sin(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_sin$address() {
        return mpfr_sin.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_sin(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_sin(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_sin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_sin", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_sin_cos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_sin_cos");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_sin_cos(mpfr_ptr, mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_sin_cos$descriptor() {
        return mpfr_sin_cos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_sin_cos(mpfr_ptr, mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_sin_cos$handle() {
        return mpfr_sin_cos.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_sin_cos(mpfr_ptr, mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_sin_cos$address() {
        return mpfr_sin_cos.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_sin_cos(mpfr_ptr, mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_sin_cos(MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3) {
        var mh$ = mpfr_sin_cos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_sin_cos", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_cos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_cos");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_cos(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_cos$descriptor() {
        return mpfr_cos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_cos(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_cos$handle() {
        return mpfr_cos.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_cos(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_cos$address() {
        return mpfr_cos.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_cos(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_cos(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_cos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_cos", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_tan {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_tan");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_tan(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_tan$descriptor() {
        return mpfr_tan.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_tan(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_tan$handle() {
        return mpfr_tan.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_tan(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_tan$address() {
        return mpfr_tan.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_tan(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_tan(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_tan.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_tan", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_atan2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_atan2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_atan2(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_atan2$descriptor() {
        return mpfr_atan2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_atan2(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_atan2$handle() {
        return mpfr_atan2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_atan2(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_atan2$address() {
        return mpfr_atan2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_atan2(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_atan2(MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3) {
        var mh$ = mpfr_atan2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_atan2", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_sec {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_sec");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_sec(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_sec$descriptor() {
        return mpfr_sec.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_sec(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_sec$handle() {
        return mpfr_sec.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_sec(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_sec$address() {
        return mpfr_sec.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_sec(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_sec(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_sec.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_sec", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_csc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_csc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_csc(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_csc$descriptor() {
        return mpfr_csc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_csc(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_csc$handle() {
        return mpfr_csc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_csc(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_csc$address() {
        return mpfr_csc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_csc(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_csc(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_csc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_csc", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_cot {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_cot");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_cot(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_cot$descriptor() {
        return mpfr_cot.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_cot(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_cot$handle() {
        return mpfr_cot.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_cot(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_cot$address() {
        return mpfr_cot.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_cot(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_cot(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_cot.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_cot", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_sinu {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_sinu");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_sinu(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_sinu$descriptor() {
        return mpfr_sinu.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_sinu(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_sinu$handle() {
        return mpfr_sinu.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_sinu(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_sinu$address() {
        return mpfr_sinu.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_sinu(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static int mpfr_sinu(MemorySegment x0, MemorySegment x1, int x2, int x3) {
        var mh$ = mpfr_sinu.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_sinu", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_cosu {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_cosu");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_cosu(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_cosu$descriptor() {
        return mpfr_cosu.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_cosu(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_cosu$handle() {
        return mpfr_cosu.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_cosu(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_cosu$address() {
        return mpfr_cosu.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_cosu(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static int mpfr_cosu(MemorySegment x0, MemorySegment x1, int x2, int x3) {
        var mh$ = mpfr_cosu.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_cosu", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_tanu {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_tanu");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_tanu(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_tanu$descriptor() {
        return mpfr_tanu.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_tanu(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_tanu$handle() {
        return mpfr_tanu.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_tanu(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_tanu$address() {
        return mpfr_tanu.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_tanu(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static int mpfr_tanu(MemorySegment x0, MemorySegment x1, int x2, int x3) {
        var mh$ = mpfr_tanu.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_tanu", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_acosu {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_acosu");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_acosu(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_acosu$descriptor() {
        return mpfr_acosu.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_acosu(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_acosu$handle() {
        return mpfr_acosu.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_acosu(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_acosu$address() {
        return mpfr_acosu.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_acosu(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static int mpfr_acosu(MemorySegment x0, MemorySegment x1, int x2, int x3) {
        var mh$ = mpfr_acosu.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_acosu", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_asinu {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_asinu");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_asinu(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_asinu$descriptor() {
        return mpfr_asinu.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_asinu(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_asinu$handle() {
        return mpfr_asinu.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_asinu(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_asinu$address() {
        return mpfr_asinu.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_asinu(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static int mpfr_asinu(MemorySegment x0, MemorySegment x1, int x2, int x3) {
        var mh$ = mpfr_asinu.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_asinu", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_atanu {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_atanu");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_atanu(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_atanu$descriptor() {
        return mpfr_atanu.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_atanu(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_atanu$handle() {
        return mpfr_atanu.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_atanu(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_atanu$address() {
        return mpfr_atanu.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_atanu(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static int mpfr_atanu(MemorySegment x0, MemorySegment x1, int x2, int x3) {
        var mh$ = mpfr_atanu.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_atanu", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_atan2u {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_atan2u");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_atan2u(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_atan2u$descriptor() {
        return mpfr_atan2u.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_atan2u(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_atan2u$handle() {
        return mpfr_atan2u.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_atan2u(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_atan2u$address() {
        return mpfr_atan2u.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_atan2u(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static int mpfr_atan2u(MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4) {
        var mh$ = mpfr_atan2u.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_atan2u", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_acospi {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_acospi");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_acospi(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_acospi$descriptor() {
        return mpfr_acospi.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_acospi(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_acospi$handle() {
        return mpfr_acospi.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_acospi(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_acospi$address() {
        return mpfr_acospi.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_acospi(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_acospi(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_acospi.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_acospi", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_asinpi {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_asinpi");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_asinpi(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_asinpi$descriptor() {
        return mpfr_asinpi.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_asinpi(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_asinpi$handle() {
        return mpfr_asinpi.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_asinpi(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_asinpi$address() {
        return mpfr_asinpi.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_asinpi(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_asinpi(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_asinpi.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_asinpi", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_atanpi {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_atanpi");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_atanpi(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_atanpi$descriptor() {
        return mpfr_atanpi.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_atanpi(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_atanpi$handle() {
        return mpfr_atanpi.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_atanpi(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_atanpi$address() {
        return mpfr_atanpi.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_atanpi(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_atanpi(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_atanpi.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_atanpi", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_atan2pi {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_atan2pi");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_atan2pi(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_atan2pi$descriptor() {
        return mpfr_atan2pi.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_atan2pi(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_atan2pi$handle() {
        return mpfr_atan2pi.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_atan2pi(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_atan2pi$address() {
        return mpfr_atan2pi.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_atan2pi(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_atan2pi(MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3) {
        var mh$ = mpfr_atan2pi.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_atan2pi", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_sinpi {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_sinpi");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_sinpi(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_sinpi$descriptor() {
        return mpfr_sinpi.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_sinpi(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_sinpi$handle() {
        return mpfr_sinpi.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_sinpi(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_sinpi$address() {
        return mpfr_sinpi.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_sinpi(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_sinpi(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_sinpi.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_sinpi", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_cospi {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_cospi");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_cospi(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_cospi$descriptor() {
        return mpfr_cospi.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_cospi(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_cospi$handle() {
        return mpfr_cospi.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_cospi(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_cospi$address() {
        return mpfr_cospi.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_cospi(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_cospi(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_cospi.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_cospi", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_tanpi {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_tanpi");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_tanpi(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_tanpi$descriptor() {
        return mpfr_tanpi.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_tanpi(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_tanpi$handle() {
        return mpfr_tanpi.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_tanpi(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_tanpi$address() {
        return mpfr_tanpi.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_tanpi(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_tanpi(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_tanpi.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_tanpi", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_hypot {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_hypot");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_hypot(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_hypot$descriptor() {
        return mpfr_hypot.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_hypot(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_hypot$handle() {
        return mpfr_hypot.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_hypot(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_hypot$address() {
        return mpfr_hypot.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_hypot(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_hypot(MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3) {
        var mh$ = mpfr_hypot.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_hypot", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_erf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_erf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_erf(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_erf$descriptor() {
        return mpfr_erf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_erf(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_erf$handle() {
        return mpfr_erf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_erf(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_erf$address() {
        return mpfr_erf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_erf(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_erf(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_erf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_erf", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_erfc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_erfc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_erfc(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_erfc$descriptor() {
        return mpfr_erfc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_erfc(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_erfc$handle() {
        return mpfr_erfc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_erfc(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_erfc$address() {
        return mpfr_erfc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_erfc(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_erfc(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_erfc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_erfc", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_cbrt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_cbrt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_cbrt(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_cbrt$descriptor() {
        return mpfr_cbrt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_cbrt(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_cbrt$handle() {
        return mpfr_cbrt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_cbrt(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_cbrt$address() {
        return mpfr_cbrt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_cbrt(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_cbrt(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_cbrt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_cbrt", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_root {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_root");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_root(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_root$descriptor() {
        return mpfr_root.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_root(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_root$handle() {
        return mpfr_root.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_root(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_root$address() {
        return mpfr_root.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_root(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static int mpfr_root(MemorySegment x0, MemorySegment x1, int x2, int x3) {
        var mh$ = mpfr_root.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_root", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_rootn_ui {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_rootn_ui");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_rootn_ui(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_rootn_ui$descriptor() {
        return mpfr_rootn_ui.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_rootn_ui(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_rootn_ui$handle() {
        return mpfr_rootn_ui.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_rootn_ui(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_rootn_ui$address() {
        return mpfr_rootn_ui.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_rootn_ui(mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static int mpfr_rootn_ui(MemorySegment x0, MemorySegment x1, int x2, int x3) {
        var mh$ = mpfr_rootn_ui.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_rootn_ui", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_rootn_si {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_rootn_si");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_rootn_si(mpfr_ptr, mpfr_srcptr, long, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_rootn_si$descriptor() {
        return mpfr_rootn_si.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_rootn_si(mpfr_ptr, mpfr_srcptr, long, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_rootn_si$handle() {
        return mpfr_rootn_si.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_rootn_si(mpfr_ptr, mpfr_srcptr, long, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_rootn_si$address() {
        return mpfr_rootn_si.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_rootn_si(mpfr_ptr, mpfr_srcptr, long, mpfr_rnd_t)
     * }
     */
    public static int mpfr_rootn_si(MemorySegment x0, MemorySegment x1, int x2, int x3) {
        var mh$ = mpfr_rootn_si.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_rootn_si", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_gamma {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_gamma");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_gamma(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_gamma$descriptor() {
        return mpfr_gamma.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_gamma(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_gamma$handle() {
        return mpfr_gamma.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_gamma(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_gamma$address() {
        return mpfr_gamma.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_gamma(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_gamma(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_gamma.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_gamma", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_gamma_inc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_gamma_inc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_gamma_inc(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_gamma_inc$descriptor() {
        return mpfr_gamma_inc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_gamma_inc(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_gamma_inc$handle() {
        return mpfr_gamma_inc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_gamma_inc(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_gamma_inc$address() {
        return mpfr_gamma_inc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_gamma_inc(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_gamma_inc(MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3) {
        var mh$ = mpfr_gamma_inc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_gamma_inc", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_beta {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_beta");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_beta(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_beta$descriptor() {
        return mpfr_beta.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_beta(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_beta$handle() {
        return mpfr_beta.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_beta(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_beta$address() {
        return mpfr_beta.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_beta(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_beta(MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3) {
        var mh$ = mpfr_beta.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_beta", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_lngamma {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_lngamma");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_lngamma(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_lngamma$descriptor() {
        return mpfr_lngamma.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_lngamma(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_lngamma$handle() {
        return mpfr_lngamma.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_lngamma(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_lngamma$address() {
        return mpfr_lngamma.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_lngamma(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_lngamma(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_lngamma.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_lngamma", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_lgamma {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_lgamma");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_lgamma(mpfr_ptr, int *, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_lgamma$descriptor() {
        return mpfr_lgamma.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_lgamma(mpfr_ptr, int *, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_lgamma$handle() {
        return mpfr_lgamma.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_lgamma(mpfr_ptr, int *, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_lgamma$address() {
        return mpfr_lgamma.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_lgamma(mpfr_ptr, int *, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_lgamma(MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3) {
        var mh$ = mpfr_lgamma.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_lgamma", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_digamma {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_digamma");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_digamma(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_digamma$descriptor() {
        return mpfr_digamma.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_digamma(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_digamma$handle() {
        return mpfr_digamma.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_digamma(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_digamma$address() {
        return mpfr_digamma.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_digamma(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_digamma(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_digamma.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_digamma", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_zeta {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_zeta");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_zeta(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_zeta$descriptor() {
        return mpfr_zeta.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_zeta(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_zeta$handle() {
        return mpfr_zeta.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_zeta(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_zeta$address() {
        return mpfr_zeta.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_zeta(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_zeta(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_zeta.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_zeta", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_zeta_ui {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_zeta_ui");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_zeta_ui(mpfr_ptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_zeta_ui$descriptor() {
        return mpfr_zeta_ui.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_zeta_ui(mpfr_ptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_zeta_ui$handle() {
        return mpfr_zeta_ui.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_zeta_ui(mpfr_ptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_zeta_ui$address() {
        return mpfr_zeta_ui.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_zeta_ui(mpfr_ptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static int mpfr_zeta_ui(MemorySegment x0, int x1, int x2) {
        var mh$ = mpfr_zeta_ui.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_zeta_ui", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_fac_ui {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_fac_ui");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_fac_ui(mpfr_ptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_fac_ui$descriptor() {
        return mpfr_fac_ui.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_fac_ui(mpfr_ptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_fac_ui$handle() {
        return mpfr_fac_ui.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_fac_ui(mpfr_ptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_fac_ui$address() {
        return mpfr_fac_ui.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_fac_ui(mpfr_ptr, unsigned long, mpfr_rnd_t)
     * }
     */
    public static int mpfr_fac_ui(MemorySegment x0, int x1, int x2) {
        var mh$ = mpfr_fac_ui.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_fac_ui", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_j0 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_j0");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_j0(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_j0$descriptor() {
        return mpfr_j0.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_j0(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_j0$handle() {
        return mpfr_j0.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_j0(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_j0$address() {
        return mpfr_j0.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_j0(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_j0(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_j0.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_j0", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_j1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_j1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_j1(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_j1$descriptor() {
        return mpfr_j1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_j1(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_j1$handle() {
        return mpfr_j1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_j1(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_j1$address() {
        return mpfr_j1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_j1(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_j1(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_j1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_j1", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_jn {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_jn");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_jn(mpfr_ptr, long, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_jn$descriptor() {
        return mpfr_jn.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_jn(mpfr_ptr, long, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_jn$handle() {
        return mpfr_jn.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_jn(mpfr_ptr, long, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_jn$address() {
        return mpfr_jn.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_jn(mpfr_ptr, long, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_jn(MemorySegment x0, int x1, MemorySegment x2, int x3) {
        var mh$ = mpfr_jn.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_jn", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_y0 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_y0");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_y0(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_y0$descriptor() {
        return mpfr_y0.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_y0(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_y0$handle() {
        return mpfr_y0.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_y0(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_y0$address() {
        return mpfr_y0.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_y0(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_y0(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_y0.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_y0", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_y1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_y1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_y1(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_y1$descriptor() {
        return mpfr_y1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_y1(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_y1$handle() {
        return mpfr_y1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_y1(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_y1$address() {
        return mpfr_y1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_y1(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_y1(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_y1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_y1", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_yn {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_yn");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_yn(mpfr_ptr, long, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_yn$descriptor() {
        return mpfr_yn.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_yn(mpfr_ptr, long, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_yn$handle() {
        return mpfr_yn.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_yn(mpfr_ptr, long, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_yn$address() {
        return mpfr_yn.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_yn(mpfr_ptr, long, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_yn(MemorySegment x0, int x1, MemorySegment x2, int x3) {
        var mh$ = mpfr_yn.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_yn", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_ai {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_ai");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_ai(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_ai$descriptor() {
        return mpfr_ai.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_ai(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_ai$handle() {
        return mpfr_ai.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_ai(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_ai$address() {
        return mpfr_ai.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_ai(mpfr_ptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_ai(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mpfr_ai.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_ai", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_min {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_min");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_min(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_min$descriptor() {
        return mpfr_min.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_min(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_min$handle() {
        return mpfr_min.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_min(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_min$address() {
        return mpfr_min.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_min(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_min(MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3) {
        var mh$ = mpfr_min.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_min", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_max {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_max");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_max(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_max$descriptor() {
        return mpfr_max.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_max(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_max$handle() {
        return mpfr_max.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_max(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_max$address() {
        return mpfr_max.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_max(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_max(MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3) {
        var mh$ = mpfr_max.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_max", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_dim {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_dim");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_dim(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_dim$descriptor() {
        return mpfr_dim.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_dim(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_dim$handle() {
        return mpfr_dim.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_dim(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_dim$address() {
        return mpfr_dim.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_dim(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_dim(MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3) {
        var mh$ = mpfr_dim.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_dim", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_mul_z {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_mul_z");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_mul_z(mpfr_ptr, mpfr_srcptr, mpz_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_mul_z$descriptor() {
        return mpfr_mul_z.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_mul_z(mpfr_ptr, mpfr_srcptr, mpz_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_mul_z$handle() {
        return mpfr_mul_z.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_mul_z(mpfr_ptr, mpfr_srcptr, mpz_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_mul_z$address() {
        return mpfr_mul_z.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_mul_z(mpfr_ptr, mpfr_srcptr, mpz_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_mul_z(MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3) {
        var mh$ = mpfr_mul_z.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_mul_z", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_div_z {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_div_z");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_div_z(mpfr_ptr, mpfr_srcptr, mpz_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_div_z$descriptor() {
        return mpfr_div_z.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_div_z(mpfr_ptr, mpfr_srcptr, mpz_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_div_z$handle() {
        return mpfr_div_z.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_div_z(mpfr_ptr, mpfr_srcptr, mpz_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_div_z$address() {
        return mpfr_div_z.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_div_z(mpfr_ptr, mpfr_srcptr, mpz_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_div_z(MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3) {
        var mh$ = mpfr_div_z.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_div_z", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_add_z {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_add_z");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_add_z(mpfr_ptr, mpfr_srcptr, mpz_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_add_z$descriptor() {
        return mpfr_add_z.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_add_z(mpfr_ptr, mpfr_srcptr, mpz_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_add_z$handle() {
        return mpfr_add_z.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_add_z(mpfr_ptr, mpfr_srcptr, mpz_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_add_z$address() {
        return mpfr_add_z.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_add_z(mpfr_ptr, mpfr_srcptr, mpz_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_add_z(MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3) {
        var mh$ = mpfr_add_z.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_add_z", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_sub_z {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_sub_z");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_sub_z(mpfr_ptr, mpfr_srcptr, mpz_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_sub_z$descriptor() {
        return mpfr_sub_z.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_sub_z(mpfr_ptr, mpfr_srcptr, mpz_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_sub_z$handle() {
        return mpfr_sub_z.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_sub_z(mpfr_ptr, mpfr_srcptr, mpz_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_sub_z$address() {
        return mpfr_sub_z.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_sub_z(mpfr_ptr, mpfr_srcptr, mpz_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_sub_z(MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3) {
        var mh$ = mpfr_sub_z.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_sub_z", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_z_sub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_z_sub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_z_sub(mpfr_ptr, mpz_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_z_sub$descriptor() {
        return mpfr_z_sub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_z_sub(mpfr_ptr, mpz_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_z_sub$handle() {
        return mpfr_z_sub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_z_sub(mpfr_ptr, mpz_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_z_sub$address() {
        return mpfr_z_sub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_z_sub(mpfr_ptr, mpz_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_z_sub(MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3) {
        var mh$ = mpfr_z_sub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_z_sub", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_cmp_z {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_cmp_z");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_cmp_z(mpfr_srcptr, mpz_srcptr)
     * }
     */
    public static FunctionDescriptor mpfr_cmp_z$descriptor() {
        return mpfr_cmp_z.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_cmp_z(mpfr_srcptr, mpz_srcptr)
     * }
     */
    public static MethodHandle mpfr_cmp_z$handle() {
        return mpfr_cmp_z.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_cmp_z(mpfr_srcptr, mpz_srcptr)
     * }
     */
    public static MemorySegment mpfr_cmp_z$address() {
        return mpfr_cmp_z.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_cmp_z(mpfr_srcptr, mpz_srcptr)
     * }
     */
    public static int mpfr_cmp_z(MemorySegment x0, MemorySegment x1) {
        var mh$ = mpfr_cmp_z.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_cmp_z", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_fma {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_fma");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_fma(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_fma$descriptor() {
        return mpfr_fma.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_fma(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_fma$handle() {
        return mpfr_fma.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_fma(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_fma$address() {
        return mpfr_fma.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_fma(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_fma(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, int x4) {
        var mh$ = mpfr_fma.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_fma", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_fms {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_fms");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_fms(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_fms$descriptor() {
        return mpfr_fms.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_fms(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_fms$handle() {
        return mpfr_fms.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_fms(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_fms$address() {
        return mpfr_fms.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_fms(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_fms(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, int x4) {
        var mh$ = mpfr_fms.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_fms", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_fmma {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_fmma");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_fmma(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_fmma$descriptor() {
        return mpfr_fmma.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_fmma(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_fmma$handle() {
        return mpfr_fmma.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_fmma(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_fmma$address() {
        return mpfr_fmma.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_fmma(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_fmma(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, int x5) {
        var mh$ = mpfr_fmma.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_fmma", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_fmms {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_fmms");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_fmms(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_fmms$descriptor() {
        return mpfr_fmms.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_fmms(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_fmms$handle() {
        return mpfr_fmms.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_fmms(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_fmms$address() {
        return mpfr_fmms.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_fmms(mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t)
     * }
     */
    public static int mpfr_fmms(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, int x5) {
        var mh$ = mpfr_fmms.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_fmms", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_sum {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_sum");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_sum(mpfr_ptr, const mpfr_ptr *, unsigned long, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_sum$descriptor() {
        return mpfr_sum.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_sum(mpfr_ptr, const mpfr_ptr *, unsigned long, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_sum$handle() {
        return mpfr_sum.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_sum(mpfr_ptr, const mpfr_ptr *, unsigned long, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_sum$address() {
        return mpfr_sum.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_sum(mpfr_ptr, const mpfr_ptr *, unsigned long, mpfr_rnd_t)
     * }
     */
    public static int mpfr_sum(MemorySegment x0, MemorySegment x1, int x2, int x3) {
        var mh$ = mpfr_sum.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_sum", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_dot {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_dot");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_dot(mpfr_ptr, const mpfr_ptr *, const mpfr_ptr *, unsigned long, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_dot$descriptor() {
        return mpfr_dot.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_dot(mpfr_ptr, const mpfr_ptr *, const mpfr_ptr *, unsigned long, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_dot$handle() {
        return mpfr_dot.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_dot(mpfr_ptr, const mpfr_ptr *, const mpfr_ptr *, unsigned long, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_dot$address() {
        return mpfr_dot.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_dot(mpfr_ptr, const mpfr_ptr *, const mpfr_ptr *, unsigned long, mpfr_rnd_t)
     * }
     */
    public static int mpfr_dot(MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4) {
        var mh$ = mpfr_dot.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_dot", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_free_cache {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_free_cache");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void mpfr_free_cache()
     * }
     */
    public static FunctionDescriptor mpfr_free_cache$descriptor() {
        return mpfr_free_cache.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void mpfr_free_cache()
     * }
     */
    public static MethodHandle mpfr_free_cache$handle() {
        return mpfr_free_cache.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void mpfr_free_cache()
     * }
     */
    public static MemorySegment mpfr_free_cache$address() {
        return mpfr_free_cache.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void mpfr_free_cache()
     * }
     */
    public static void mpfr_free_cache() {
        var mh$ = mpfr_free_cache.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_free_cache");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_free_cache2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_free_cache2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void mpfr_free_cache2(mpfr_free_cache_t)
     * }
     */
    public static FunctionDescriptor mpfr_free_cache2$descriptor() {
        return mpfr_free_cache2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void mpfr_free_cache2(mpfr_free_cache_t)
     * }
     */
    public static MethodHandle mpfr_free_cache2$handle() {
        return mpfr_free_cache2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void mpfr_free_cache2(mpfr_free_cache_t)
     * }
     */
    public static MemorySegment mpfr_free_cache2$address() {
        return mpfr_free_cache2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void mpfr_free_cache2(mpfr_free_cache_t)
     * }
     */
    public static void mpfr_free_cache2(int x0) {
        var mh$ = mpfr_free_cache2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_free_cache2", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_free_pool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_free_pool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void mpfr_free_pool()
     * }
     */
    public static FunctionDescriptor mpfr_free_pool$descriptor() {
        return mpfr_free_pool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void mpfr_free_pool()
     * }
     */
    public static MethodHandle mpfr_free_pool$handle() {
        return mpfr_free_pool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void mpfr_free_pool()
     * }
     */
    public static MemorySegment mpfr_free_pool$address() {
        return mpfr_free_pool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void mpfr_free_pool()
     * }
     */
    public static void mpfr_free_pool() {
        var mh$ = mpfr_free_pool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_free_pool");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_mp_memory_cleanup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT    );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_mp_memory_cleanup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_mp_memory_cleanup()
     * }
     */
    public static FunctionDescriptor mpfr_mp_memory_cleanup$descriptor() {
        return mpfr_mp_memory_cleanup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_mp_memory_cleanup()
     * }
     */
    public static MethodHandle mpfr_mp_memory_cleanup$handle() {
        return mpfr_mp_memory_cleanup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_mp_memory_cleanup()
     * }
     */
    public static MemorySegment mpfr_mp_memory_cleanup$address() {
        return mpfr_mp_memory_cleanup.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_mp_memory_cleanup()
     * }
     */
    public static int mpfr_mp_memory_cleanup() {
        var mh$ = mpfr_mp_memory_cleanup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_mp_memory_cleanup");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_subnormalize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_subnormalize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_subnormalize(mpfr_ptr, int, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_subnormalize$descriptor() {
        return mpfr_subnormalize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_subnormalize(mpfr_ptr, int, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_subnormalize$handle() {
        return mpfr_subnormalize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_subnormalize(mpfr_ptr, int, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_subnormalize$address() {
        return mpfr_subnormalize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_subnormalize(mpfr_ptr, int, mpfr_rnd_t)
     * }
     */
    public static int mpfr_subnormalize(MemorySegment x0, int x1, int x2) {
        var mh$ = mpfr_subnormalize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_subnormalize", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_strtofr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_strtofr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_strtofr(mpfr_ptr, const char *, char **, int, mpfr_rnd_t)
     * }
     */
    public static FunctionDescriptor mpfr_strtofr$descriptor() {
        return mpfr_strtofr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_strtofr(mpfr_ptr, const char *, char **, int, mpfr_rnd_t)
     * }
     */
    public static MethodHandle mpfr_strtofr$handle() {
        return mpfr_strtofr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_strtofr(mpfr_ptr, const char *, char **, int, mpfr_rnd_t)
     * }
     */
    public static MemorySegment mpfr_strtofr$address() {
        return mpfr_strtofr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_strtofr(mpfr_ptr, const char *, char **, int, mpfr_rnd_t)
     * }
     */
    public static int mpfr_strtofr(MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4) {
        var mh$ = mpfr_strtofr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_strtofr", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_round_nearest_away_begin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            mpfr_h.C_POINTER
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_round_nearest_away_begin");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void mpfr_round_nearest_away_begin(mpfr_ptr)
     * }
     */
    public static FunctionDescriptor mpfr_round_nearest_away_begin$descriptor() {
        return mpfr_round_nearest_away_begin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void mpfr_round_nearest_away_begin(mpfr_ptr)
     * }
     */
    public static MethodHandle mpfr_round_nearest_away_begin$handle() {
        return mpfr_round_nearest_away_begin.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void mpfr_round_nearest_away_begin(mpfr_ptr)
     * }
     */
    public static MemorySegment mpfr_round_nearest_away_begin$address() {
        return mpfr_round_nearest_away_begin.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void mpfr_round_nearest_away_begin(mpfr_ptr)
     * }
     */
    public static void mpfr_round_nearest_away_begin(MemorySegment x0) {
        var mh$ = mpfr_round_nearest_away_begin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_round_nearest_away_begin", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_round_nearest_away_end {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_INT
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_round_nearest_away_end");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_round_nearest_away_end(mpfr_ptr, int)
     * }
     */
    public static FunctionDescriptor mpfr_round_nearest_away_end$descriptor() {
        return mpfr_round_nearest_away_end.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_round_nearest_away_end(mpfr_ptr, int)
     * }
     */
    public static MethodHandle mpfr_round_nearest_away_end$handle() {
        return mpfr_round_nearest_away_end.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_round_nearest_away_end(mpfr_ptr, int)
     * }
     */
    public static MemorySegment mpfr_round_nearest_away_end$address() {
        return mpfr_round_nearest_away_end.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_round_nearest_away_end(mpfr_ptr, int)
     * }
     */
    public static int mpfr_round_nearest_away_end(MemorySegment x0, int x1) {
        var mh$ = mpfr_round_nearest_away_end.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_round_nearest_away_end", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_custom_get_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_LONG_LONG,
            mpfr_h.C_LONG
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_custom_get_size");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t mpfr_custom_get_size(mpfr_prec_t)
     * }
     */
    public static FunctionDescriptor mpfr_custom_get_size$descriptor() {
        return mpfr_custom_get_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t mpfr_custom_get_size(mpfr_prec_t)
     * }
     */
    public static MethodHandle mpfr_custom_get_size$handle() {
        return mpfr_custom_get_size.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * size_t mpfr_custom_get_size(mpfr_prec_t)
     * }
     */
    public static MemorySegment mpfr_custom_get_size$address() {
        return mpfr_custom_get_size.ADDR;
    }

    /**
     * {@snippet lang=c :
     * size_t mpfr_custom_get_size(mpfr_prec_t)
     * }
     */
    public static long mpfr_custom_get_size(int x0) {
        var mh$ = mpfr_custom_get_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_custom_get_size", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_custom_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            mpfr_h.C_POINTER,
            mpfr_h.C_LONG
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_custom_init");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void mpfr_custom_init(void *, mpfr_prec_t)
     * }
     */
    public static FunctionDescriptor mpfr_custom_init$descriptor() {
        return mpfr_custom_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void mpfr_custom_init(void *, mpfr_prec_t)
     * }
     */
    public static MethodHandle mpfr_custom_init$handle() {
        return mpfr_custom_init.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void mpfr_custom_init(void *, mpfr_prec_t)
     * }
     */
    public static MemorySegment mpfr_custom_init$address() {
        return mpfr_custom_init.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void mpfr_custom_init(void *, mpfr_prec_t)
     * }
     */
    public static void mpfr_custom_init(MemorySegment x0, int x1) {
        var mh$ = mpfr_custom_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_custom_init", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_custom_get_significand {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_custom_get_significand");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *mpfr_custom_get_significand(mpfr_srcptr)
     * }
     */
    public static FunctionDescriptor mpfr_custom_get_significand$descriptor() {
        return mpfr_custom_get_significand.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *mpfr_custom_get_significand(mpfr_srcptr)
     * }
     */
    public static MethodHandle mpfr_custom_get_significand$handle() {
        return mpfr_custom_get_significand.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *mpfr_custom_get_significand(mpfr_srcptr)
     * }
     */
    public static MemorySegment mpfr_custom_get_significand$address() {
        return mpfr_custom_get_significand.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *mpfr_custom_get_significand(mpfr_srcptr)
     * }
     */
    public static MemorySegment mpfr_custom_get_significand(MemorySegment x0) {
        var mh$ = mpfr_custom_get_significand.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_custom_get_significand", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_custom_get_exp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_LONG,
            mpfr_h.C_POINTER
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_custom_get_exp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * mpfr_exp_t mpfr_custom_get_exp(mpfr_srcptr)
     * }
     */
    public static FunctionDescriptor mpfr_custom_get_exp$descriptor() {
        return mpfr_custom_get_exp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * mpfr_exp_t mpfr_custom_get_exp(mpfr_srcptr)
     * }
     */
    public static MethodHandle mpfr_custom_get_exp$handle() {
        return mpfr_custom_get_exp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * mpfr_exp_t mpfr_custom_get_exp(mpfr_srcptr)
     * }
     */
    public static MemorySegment mpfr_custom_get_exp$address() {
        return mpfr_custom_get_exp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * mpfr_exp_t mpfr_custom_get_exp(mpfr_srcptr)
     * }
     */
    public static int mpfr_custom_get_exp(MemorySegment x0) {
        var mh$ = mpfr_custom_get_exp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_custom_get_exp", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_custom_move {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_custom_move");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void mpfr_custom_move(mpfr_ptr, void *)
     * }
     */
    public static FunctionDescriptor mpfr_custom_move$descriptor() {
        return mpfr_custom_move.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void mpfr_custom_move(mpfr_ptr, void *)
     * }
     */
    public static MethodHandle mpfr_custom_move$handle() {
        return mpfr_custom_move.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void mpfr_custom_move(mpfr_ptr, void *)
     * }
     */
    public static MemorySegment mpfr_custom_move$address() {
        return mpfr_custom_move.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void mpfr_custom_move(mpfr_ptr, void *)
     * }
     */
    public static void mpfr_custom_move(MemorySegment x0, MemorySegment x1) {
        var mh$ = mpfr_custom_move.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_custom_move", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_custom_init_set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            mpfr_h.C_POINTER,
            mpfr_h.C_INT,
            mpfr_h.C_LONG,
            mpfr_h.C_LONG,
            mpfr_h.C_POINTER
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_custom_init_set");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void mpfr_custom_init_set(mpfr_ptr, int, mpfr_exp_t, mpfr_prec_t, void *)
     * }
     */
    public static FunctionDescriptor mpfr_custom_init_set$descriptor() {
        return mpfr_custom_init_set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void mpfr_custom_init_set(mpfr_ptr, int, mpfr_exp_t, mpfr_prec_t, void *)
     * }
     */
    public static MethodHandle mpfr_custom_init_set$handle() {
        return mpfr_custom_init_set.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void mpfr_custom_init_set(mpfr_ptr, int, mpfr_exp_t, mpfr_prec_t, void *)
     * }
     */
    public static MemorySegment mpfr_custom_init_set$address() {
        return mpfr_custom_init_set.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void mpfr_custom_init_set(mpfr_ptr, int, mpfr_exp_t, mpfr_prec_t, void *)
     * }
     */
    public static void mpfr_custom_init_set(MemorySegment x0, int x1, int x2, int x3, MemorySegment x4) {
        var mh$ = mpfr_custom_init_set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_custom_init_set", x0, x1, x2, x3, x4);
            }
            mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_custom_get_kind {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_custom_get_kind");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_custom_get_kind(mpfr_srcptr)
     * }
     */
    public static FunctionDescriptor mpfr_custom_get_kind$descriptor() {
        return mpfr_custom_get_kind.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_custom_get_kind(mpfr_srcptr)
     * }
     */
    public static MethodHandle mpfr_custom_get_kind$handle() {
        return mpfr_custom_get_kind.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_custom_get_kind(mpfr_srcptr)
     * }
     */
    public static MemorySegment mpfr_custom_get_kind$address() {
        return mpfr_custom_get_kind.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_custom_get_kind(mpfr_srcptr)
     * }
     */
    public static int mpfr_custom_get_kind(MemorySegment x0) {
        var mh$ = mpfr_custom_get_kind.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_custom_get_kind", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpfr_total_order_p {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpfr_h.C_INT,
            mpfr_h.C_POINTER,
            mpfr_h.C_POINTER
        );

        public static final MemorySegment ADDR = mpfr_h.findOrThrow("mpfr_total_order_p");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpfr_total_order_p(mpfr_srcptr, mpfr_srcptr)
     * }
     */
    public static FunctionDescriptor mpfr_total_order_p$descriptor() {
        return mpfr_total_order_p.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpfr_total_order_p(mpfr_srcptr, mpfr_srcptr)
     * }
     */
    public static MethodHandle mpfr_total_order_p$handle() {
        return mpfr_total_order_p.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpfr_total_order_p(mpfr_srcptr, mpfr_srcptr)
     * }
     */
    public static MemorySegment mpfr_total_order_p$address() {
        return mpfr_total_order_p.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpfr_total_order_p(mpfr_srcptr, mpfr_srcptr)
     * }
     */
    public static int mpfr_total_order_p(MemorySegment x0, MemorySegment x1) {
        var mh$ = mpfr_total_order_p.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpfr_total_order_p", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * #define MPFR_VERSION_STRING "4.2.1"
     * }
     */
    public static MemorySegment MPFR_VERSION_STRING() {
        class Holder {
            static final MemorySegment MPFR_VERSION_STRING
                = mpfr_h.LIBRARY_ARENA.allocateFrom("4.2.1");
        }
        return Holder.MPFR_VERSION_STRING;
    }
    private static final int MPFR_VERSION = (int)262657L;
    /**
     * {@snippet lang=c :
     * #define MPFR_VERSION 262657
     * }
     */
    public static int MPFR_VERSION() {
        return MPFR_VERSION;
    }
    private static final int MPFR_FLAGS_ALL = (int)63L;
    /**
     * {@snippet lang=c :
     * #define MPFR_FLAGS_ALL 63
     * }
     */
    public static int MPFR_FLAGS_ALL() {
        return MPFR_FLAGS_ALL;
    }
    private static final int GMP_RNDN = (int)0L;
    /**
     * {@snippet lang=c :
     * #define GMP_RNDN 0
     * }
     */
    public static int GMP_RNDN() {
        return GMP_RNDN;
    }
    private static final int GMP_RNDZ = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GMP_RNDZ 1
     * }
     */
    public static int GMP_RNDZ() {
        return GMP_RNDZ;
    }
    private static final int GMP_RNDU = (int)2L;
    /**
     * {@snippet lang=c :
     * #define GMP_RNDU 2
     * }
     */
    public static int GMP_RNDU() {
        return GMP_RNDU;
    }
    private static final int GMP_RNDD = (int)3L;
    /**
     * {@snippet lang=c :
     * #define GMP_RNDD 3
     * }
     */
    public static int GMP_RNDD() {
        return GMP_RNDD;
    }
    private static final int _MPFR_EXP_FORMAT = (int)3L;
    /**
     * {@snippet lang=c :
     * #define _MPFR_EXP_FORMAT 3
     * }
     */
    public static int _MPFR_EXP_FORMAT() {
        return _MPFR_EXP_FORMAT;
    }
    private static final int MPFR_PREC_MAX = (int)2147483391L;
    /**
     * {@snippet lang=c :
     * #define MPFR_PREC_MAX 2147483391
     * }
     */
    public static int MPFR_PREC_MAX() {
        return MPFR_PREC_MAX;
    }
    private static final int MPFR_EMAX_DEFAULT = (int)1073741823L;
    /**
     * {@snippet lang=c :
     * #define MPFR_EMAX_DEFAULT 1073741823
     * }
     */
    public static int MPFR_EMAX_DEFAULT() {
        return MPFR_EMAX_DEFAULT;
    }
    private static final int MPFR_EMIN_DEFAULT = (int)-1073741823L;
    /**
     * {@snippet lang=c :
     * #define MPFR_EMIN_DEFAULT -1073741823
     * }
     */
    public static int MPFR_EMIN_DEFAULT() {
        return MPFR_EMIN_DEFAULT;
    }
    private static final int __MPFR_EXP_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define __MPFR_EXP_MAX 2147483647
     * }
     */
    public static int __MPFR_EXP_MAX() {
        return __MPFR_EXP_MAX;
    }
    private static final int __MPFR_EXP_NAN = (int)-2147483646L;
    /**
     * {@snippet lang=c :
     * #define __MPFR_EXP_NAN -2147483646
     * }
     */
    public static int __MPFR_EXP_NAN() {
        return __MPFR_EXP_NAN;
    }
    private static final int __MPFR_EXP_ZERO = (int)-2147483647L;
    /**
     * {@snippet lang=c :
     * #define __MPFR_EXP_ZERO -2147483647
     * }
     */
    public static int __MPFR_EXP_ZERO() {
        return __MPFR_EXP_ZERO;
    }
    private static final int __MPFR_EXP_INF = (int)-2147483645L;
    /**
     * {@snippet lang=c :
     * #define __MPFR_EXP_INF -2147483645
     * }
     */
    public static int __MPFR_EXP_INF() {
        return __MPFR_EXP_INF;
    }
}


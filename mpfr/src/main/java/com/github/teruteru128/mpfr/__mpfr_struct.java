// Generated by jextract

package com.github.teruteru128.mpfr;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     mpfr_prec_t _mpfr_prec;
 *     mpfr_sign_t _mpfr_sign;
 *     mpfr_exp_t _mpfr_exp;
 *     mp_limb_t *_mpfr_d;
 * }
 * }
 */
public class __mpfr_struct {

    __mpfr_struct() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        mpfr_h.C_LONG.withName("_mpfr_prec"),
        mpfr_h.C_INT.withName("_mpfr_sign"),
        mpfr_h.C_LONG.withName("_mpfr_exp"),
        MemoryLayout.paddingLayout(4),
        mpfr_h.C_POINTER.withName("_mpfr_d")
    ).withName("$anon$232:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt _mpfr_prec$LAYOUT = (OfInt)$LAYOUT.select(groupElement("_mpfr_prec"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * mpfr_prec_t _mpfr_prec
     * }
     */
    public static final OfInt _mpfr_prec$layout() {
        return _mpfr_prec$LAYOUT;
    }

    private static final long _mpfr_prec$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * mpfr_prec_t _mpfr_prec
     * }
     */
    public static final long _mpfr_prec$offset() {
        return _mpfr_prec$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * mpfr_prec_t _mpfr_prec
     * }
     */
    public static int _mpfr_prec(MemorySegment struct) {
        return struct.get(_mpfr_prec$LAYOUT, _mpfr_prec$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * mpfr_prec_t _mpfr_prec
     * }
     */
    public static void _mpfr_prec(MemorySegment struct, int fieldValue) {
        struct.set(_mpfr_prec$LAYOUT, _mpfr_prec$OFFSET, fieldValue);
    }

    private static final OfInt _mpfr_sign$LAYOUT = (OfInt)$LAYOUT.select(groupElement("_mpfr_sign"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * mpfr_sign_t _mpfr_sign
     * }
     */
    public static final OfInt _mpfr_sign$layout() {
        return _mpfr_sign$LAYOUT;
    }

    private static final long _mpfr_sign$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * mpfr_sign_t _mpfr_sign
     * }
     */
    public static final long _mpfr_sign$offset() {
        return _mpfr_sign$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * mpfr_sign_t _mpfr_sign
     * }
     */
    public static int _mpfr_sign(MemorySegment struct) {
        return struct.get(_mpfr_sign$LAYOUT, _mpfr_sign$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * mpfr_sign_t _mpfr_sign
     * }
     */
    public static void _mpfr_sign(MemorySegment struct, int fieldValue) {
        struct.set(_mpfr_sign$LAYOUT, _mpfr_sign$OFFSET, fieldValue);
    }

    private static final OfInt _mpfr_exp$LAYOUT = (OfInt)$LAYOUT.select(groupElement("_mpfr_exp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * mpfr_exp_t _mpfr_exp
     * }
     */
    public static final OfInt _mpfr_exp$layout() {
        return _mpfr_exp$LAYOUT;
    }

    private static final long _mpfr_exp$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * mpfr_exp_t _mpfr_exp
     * }
     */
    public static final long _mpfr_exp$offset() {
        return _mpfr_exp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * mpfr_exp_t _mpfr_exp
     * }
     */
    public static int _mpfr_exp(MemorySegment struct) {
        return struct.get(_mpfr_exp$LAYOUT, _mpfr_exp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * mpfr_exp_t _mpfr_exp
     * }
     */
    public static void _mpfr_exp(MemorySegment struct, int fieldValue) {
        struct.set(_mpfr_exp$LAYOUT, _mpfr_exp$OFFSET, fieldValue);
    }

    private static final AddressLayout _mpfr_d$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_mpfr_d"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * mp_limb_t *_mpfr_d
     * }
     */
    public static final AddressLayout _mpfr_d$layout() {
        return _mpfr_d$LAYOUT;
    }

    private static final long _mpfr_d$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * mp_limb_t *_mpfr_d
     * }
     */
    public static final long _mpfr_d$offset() {
        return _mpfr_d$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * mp_limb_t *_mpfr_d
     * }
     */
    public static MemorySegment _mpfr_d(MemorySegment struct) {
        return struct.get(_mpfr_d$LAYOUT, _mpfr_d$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * mp_limb_t *_mpfr_d
     * }
     */
    public static void _mpfr_d(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_mpfr_d$LAYOUT, _mpfr_d$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


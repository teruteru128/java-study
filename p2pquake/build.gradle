
plugins {
    //id 'com.twitter.teruteru128.java.study.java-conventions'
    id 'java'
    id 'application'
    id 'eclipse'
    id 'org.javamodularity.moduleplugin' version '1.8.10' apply false
    id 'org.openjfx.javafxplugin' version '0.0.13'
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
}

application {
    mainModule = 'com.twitter.teruteru.p2pquake'
    mainClass = 'com.twitter.teruteru128.p2pquake.Main'
}

test {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

// thanks for https://github.com/eclipse/eclipse.jdt.ls/issues/957
eclipse {
    /* 
    doFirst {
        File prefs = file("${project.projectDir}/.settings/org.eclipse.buildship.core.prefs")
        if(!prefs.exists()) {
            prefs.append('''
                connection.project.dir=
                eclipse.preferences.version=1
                '''.stripIndent())
        }
    } */
    classpath {
        containers 'org.eclipse.buildship.core.gradleclasspathcontainer'
        file {
            whenMerged {
                entries.findAll { it.properties.kind.equals('lib') && !it.properties.path.contains("junit") }.each {
                    it.entryAttributes['module'] = 'true'
                }
                entries.findAll { it.properties.path.startsWith('org.eclipse.jdt.launching.JRE_CONTAINER') }.each {
                    it.entryAttributes['module'] = 'true'
                }
                entries.find { it.path == 'src/main/java' }.output = 'bin/main'

                entries.findAll { it.path.startsWith('/') && !it.path.endsWith('.jar') }.each {
                    it.entryAttributes['module'] = 'true'
                }

                def testSrc = entries.find { it.path == 'src/test/java' }
                testSrc.output = 'bin/test'
                testSrc.entryAttributes['test'] = 'true'
                testSrc.entryAttributes['optional'] = 'true'
                testSrc.entryAttributes['ignore_optional_problems'] = 'true'

                entries.forEach { entry ->
                    def entryIn = { it.find { file(entry.path).equals(it) } }
                    if (entry.kind == 'lib') {
                        entry.entryAttributes['test'] =
                            entryIn(configurations.testRuntimeClasspath) &&
                            !entryIn(configurations.runtimeClasspath)
                    }
                }
            }
            //defaultOutputDir = file('bin/main')
        }
    }
}

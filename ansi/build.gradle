
plugins {
    // https://docs.gradle.org/current/userguide/java_plugin.html
    id 'java'
    // Apply the application plugin to add support for building a CLI application in Java.
    // https://docs.gradle.org/current/userguide/application_plugin.html
    id 'application'
    // https://docs.gradle.org/current/userguide/eclipse_plugin.html
    //id 'eclipse'
}

//javaModule.name = 'com.teruteru128.study'

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

application {
    // mainModule = 'com.twitter.teruteru.study'
    mainClass = 'com.twitter.teruteru128.ansi.EscapeCodeSample'
}

/* eclipse {
    classpath {
        containers 'org.eclipse.buildship.core.gradleclasspathcontainer'
        file {
            whenMerged {
                entries.findAll { it.properties.kind.equals('lib') && !it.properties.path.contains("junit") }.each {
                    it.entryAttributes['module'] = 'true'
                }
                entries.findAll { it.properties.path.startsWith('org.eclipse.jdt.launching.JRE_CONTAINER') }.each {
                    it.entryAttributes['module'] = 'true'
                }
                entries.find { it.path == 'src/main/java' }.output = 'bin/main'

                def testSrc = entries.find { it.path == 'src/test/java' }
                testSrc.output = 'bin/test'
                testSrc.entryAttributes['test'] = 'true'
                testSrc.entryAttributes['optional'] = 'true'
                testSrc.entryAttributes['ignore_optional_problems'] = 'true'

                entries.forEach { entry ->
                    def entryIn = { it.find { file(entry.path).equals(it) } }
                    if (entry.kind == 'lib') {
                        entry.entryAttributes['test'] =
                            entryIn(configurations.testRuntimeClasspath) &&
                            !entryIn(configurations.runtimeClasspath)
                    }
                }
            }
        }
    }
} */

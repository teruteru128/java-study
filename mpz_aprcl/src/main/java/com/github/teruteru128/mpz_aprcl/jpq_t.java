// Generated by jextract

package com.github.teruteru128.mpz_aprcl;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct jpq_t {
 *     int q;
 *     int index;
 *     char p;
 * }
 * }
 */
public class jpq_t {

    jpq_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        mpz_aprcl_h.C_INT.withName("q"),
        mpz_aprcl_h.C_INT.withName("index"),
        mpz_aprcl_h.C_CHAR.withName("p"),
        MemoryLayout.paddingLayout(3)
    ).withName("jpq_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt q$LAYOUT = (OfInt)$LAYOUT.select(groupElement("q"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int q
     * }
     */
    public static final OfInt q$layout() {
        return q$LAYOUT;
    }

    private static final long q$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int q
     * }
     */
    public static final long q$offset() {
        return q$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int q
     * }
     */
    public static int q(MemorySegment struct) {
        return struct.get(q$LAYOUT, q$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int q
     * }
     */
    public static void q(MemorySegment struct, int fieldValue) {
        struct.set(q$LAYOUT, q$OFFSET, fieldValue);
    }

    private static final OfInt index$LAYOUT = (OfInt)$LAYOUT.select(groupElement("index"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int index
     * }
     */
    public static final OfInt index$layout() {
        return index$LAYOUT;
    }

    private static final long index$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int index
     * }
     */
    public static final long index$offset() {
        return index$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int index
     * }
     */
    public static int index(MemorySegment struct) {
        return struct.get(index$LAYOUT, index$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int index
     * }
     */
    public static void index(MemorySegment struct, int fieldValue) {
        struct.set(index$LAYOUT, index$OFFSET, fieldValue);
    }

    private static final OfByte p$LAYOUT = (OfByte)$LAYOUT.select(groupElement("p"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char p
     * }
     */
    public static final OfByte p$layout() {
        return p$LAYOUT;
    }

    private static final long p$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char p
     * }
     */
    public static final long p$offset() {
        return p$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char p
     * }
     */
    public static byte p(MemorySegment struct) {
        return struct.get(p$LAYOUT, p$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char p
     * }
     */
    public static void p(MemorySegment struct, byte fieldValue) {
        struct.set(p$LAYOUT, p$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


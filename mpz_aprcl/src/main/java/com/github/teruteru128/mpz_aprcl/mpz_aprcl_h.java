// Generated by jextract

package com.github.teruteru128.mpz_aprcl;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.util.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;

public class mpz_aprcl_h {

    mpz_aprcl_h() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.libraryLookup(System.mapLibraryName("mpz_aprcl"), LIBRARY_ARENA)
            .or(SymbolLookup.loaderLookup())
            .or(Linker.nativeLinker().defaultLookup());

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));
    public static final ValueLayout.OfInt C_LONG = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfDouble C_LONG_DOUBLE = ValueLayout.JAVA_DOUBLE;
    private static final int SLSMAXVAL = (int)33949L;
    /**
     * {@snippet lang=c :
     * #define SLSMAXVAL 33949
     * }
     */
    public static int SLSMAXVAL() {
        return SLSMAXVAL;
    }
    private static final int SLSMAX = (int)36148L;
    /**
     * {@snippet lang=c :
     * #define SLSMAX 36148
     * }
     */
    public static int SLSMAX() {
        return SLSMAX;
    }
    private static final int JPQSMAX = (int)3493L;
    /**
     * {@snippet lang=c :
     * #define JPQSMAX 3493
     * }
     */
    public static int JPQSMAX() {
        return JPQSMAX;
    }
    private static final int PRP_COMPOSITE = (int)0L;
    /**
     * {@snippet lang=c :
     * #define PRP_COMPOSITE 0
     * }
     */
    public static int PRP_COMPOSITE() {
        return PRP_COMPOSITE;
    }
    private static final int PRP_PRP = (int)1L;
    /**
     * {@snippet lang=c :
     * #define PRP_PRP 1
     * }
     */
    public static int PRP_PRP() {
        return PRP_PRP;
    }
    private static final int PRP_PRIME = (int)2L;
    /**
     * {@snippet lang=c :
     * #define PRP_PRIME 2
     * }
     */
    public static int PRP_PRIME() {
        return PRP_PRIME;
    }
    private static final int APRTCLE_VERBOSE0 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define APRTCLE_VERBOSE0 0
     * }
     */
    public static int APRTCLE_VERBOSE0() {
        return APRTCLE_VERBOSE0;
    }
    private static final int APRTCLE_VERBOSE1 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define APRTCLE_VERBOSE1 1
     * }
     */
    public static int APRTCLE_VERBOSE1() {
        return APRTCLE_VERBOSE1;
    }
    private static final int APRTCLE_VERBOSE2 = (int)2L;
    /**
     * {@snippet lang=c :
     * #define APRTCLE_VERBOSE2 2
     * }
     */
    public static int APRTCLE_VERBOSE2() {
        return APRTCLE_VERBOSE2;
    }
    private static final int APRTCLE_COMPOSITE = (int)0L;
    /**
     * {@snippet lang=c :
     * #define APRTCLE_COMPOSITE 0
     * }
     */
    public static int APRTCLE_COMPOSITE() {
        return APRTCLE_COMPOSITE;
    }
    private static final int APRTCLE_PRP = (int)1L;
    /**
     * {@snippet lang=c :
     * #define APRTCLE_PRP 1
     * }
     */
    public static int APRTCLE_PRP() {
        return APRTCLE_PRP;
    }
    private static final int APRTCLE_PRIME = (int)2L;
    /**
     * {@snippet lang=c :
     * #define APRTCLE_PRIME 2
     * }
     */
    public static int APRTCLE_PRIME() {
        return APRTCLE_PRIME;
    }
    /**
     * {@snippet lang=c :
     * typedef long long s64_t
     * }
     */
    public static final OfLong s64_t = mpz_aprcl_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long long u64_t
     * }
     */
    public static final OfLong u64_t = mpz_aprcl_h.C_LONG_LONG;

    private static class mpz_prp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpz_aprcl_h.C_INT,
            mpz_aprcl_h.C_POINTER,
            mpz_aprcl_h.C_POINTER
        );

        public static final MemorySegment ADDR = mpz_aprcl_h.findOrThrow("mpz_prp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpz_prp(mpz_t n, mpz_t a)
     * }
     */
    public static FunctionDescriptor mpz_prp$descriptor() {
        return mpz_prp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpz_prp(mpz_t n, mpz_t a)
     * }
     */
    public static MethodHandle mpz_prp$handle() {
        return mpz_prp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpz_prp(mpz_t n, mpz_t a)
     * }
     */
    public static MemorySegment mpz_prp$address() {
        return mpz_prp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpz_prp(mpz_t n, mpz_t a)
     * }
     */
    public static int mpz_prp(MemorySegment n, MemorySegment a) {
        var mh$ = mpz_prp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpz_prp", n, a);
            }
            return (int)mh$.invokeExact(n, a);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpz_euler_prp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpz_aprcl_h.C_INT,
            mpz_aprcl_h.C_POINTER,
            mpz_aprcl_h.C_POINTER
        );

        public static final MemorySegment ADDR = mpz_aprcl_h.findOrThrow("mpz_euler_prp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpz_euler_prp(mpz_t n, mpz_t a)
     * }
     */
    public static FunctionDescriptor mpz_euler_prp$descriptor() {
        return mpz_euler_prp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpz_euler_prp(mpz_t n, mpz_t a)
     * }
     */
    public static MethodHandle mpz_euler_prp$handle() {
        return mpz_euler_prp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpz_euler_prp(mpz_t n, mpz_t a)
     * }
     */
    public static MemorySegment mpz_euler_prp$address() {
        return mpz_euler_prp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpz_euler_prp(mpz_t n, mpz_t a)
     * }
     */
    public static int mpz_euler_prp(MemorySegment n, MemorySegment a) {
        var mh$ = mpz_euler_prp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpz_euler_prp", n, a);
            }
            return (int)mh$.invokeExact(n, a);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpz_sprp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpz_aprcl_h.C_INT,
            mpz_aprcl_h.C_POINTER,
            mpz_aprcl_h.C_POINTER
        );

        public static final MemorySegment ADDR = mpz_aprcl_h.findOrThrow("mpz_sprp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpz_sprp(mpz_t n, mpz_t a)
     * }
     */
    public static FunctionDescriptor mpz_sprp$descriptor() {
        return mpz_sprp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpz_sprp(mpz_t n, mpz_t a)
     * }
     */
    public static MethodHandle mpz_sprp$handle() {
        return mpz_sprp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpz_sprp(mpz_t n, mpz_t a)
     * }
     */
    public static MemorySegment mpz_sprp$address() {
        return mpz_sprp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpz_sprp(mpz_t n, mpz_t a)
     * }
     */
    public static int mpz_sprp(MemorySegment n, MemorySegment a) {
        var mh$ = mpz_sprp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpz_sprp", n, a);
            }
            return (int)mh$.invokeExact(n, a);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpz_fibonacci_prp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpz_aprcl_h.C_INT,
            mpz_aprcl_h.C_POINTER,
            mpz_aprcl_h.C_LONG,
            mpz_aprcl_h.C_LONG
        );

        public static final MemorySegment ADDR = mpz_aprcl_h.findOrThrow("mpz_fibonacci_prp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpz_fibonacci_prp(mpz_t n, long p, long q)
     * }
     */
    public static FunctionDescriptor mpz_fibonacci_prp$descriptor() {
        return mpz_fibonacci_prp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpz_fibonacci_prp(mpz_t n, long p, long q)
     * }
     */
    public static MethodHandle mpz_fibonacci_prp$handle() {
        return mpz_fibonacci_prp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpz_fibonacci_prp(mpz_t n, long p, long q)
     * }
     */
    public static MemorySegment mpz_fibonacci_prp$address() {
        return mpz_fibonacci_prp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpz_fibonacci_prp(mpz_t n, long p, long q)
     * }
     */
    public static int mpz_fibonacci_prp(MemorySegment n, int p, int q) {
        var mh$ = mpz_fibonacci_prp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpz_fibonacci_prp", n, p, q);
            }
            return (int)mh$.invokeExact(n, p, q);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpz_lucas_prp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpz_aprcl_h.C_INT,
            mpz_aprcl_h.C_POINTER,
            mpz_aprcl_h.C_LONG,
            mpz_aprcl_h.C_LONG
        );

        public static final MemorySegment ADDR = mpz_aprcl_h.findOrThrow("mpz_lucas_prp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpz_lucas_prp(mpz_t n, long p, long q)
     * }
     */
    public static FunctionDescriptor mpz_lucas_prp$descriptor() {
        return mpz_lucas_prp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpz_lucas_prp(mpz_t n, long p, long q)
     * }
     */
    public static MethodHandle mpz_lucas_prp$handle() {
        return mpz_lucas_prp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpz_lucas_prp(mpz_t n, long p, long q)
     * }
     */
    public static MemorySegment mpz_lucas_prp$address() {
        return mpz_lucas_prp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpz_lucas_prp(mpz_t n, long p, long q)
     * }
     */
    public static int mpz_lucas_prp(MemorySegment n, int p, int q) {
        var mh$ = mpz_lucas_prp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpz_lucas_prp", n, p, q);
            }
            return (int)mh$.invokeExact(n, p, q);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpz_stronglucas_prp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpz_aprcl_h.C_INT,
            mpz_aprcl_h.C_POINTER,
            mpz_aprcl_h.C_LONG,
            mpz_aprcl_h.C_LONG
        );

        public static final MemorySegment ADDR = mpz_aprcl_h.findOrThrow("mpz_stronglucas_prp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpz_stronglucas_prp(mpz_t n, long p, long q)
     * }
     */
    public static FunctionDescriptor mpz_stronglucas_prp$descriptor() {
        return mpz_stronglucas_prp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpz_stronglucas_prp(mpz_t n, long p, long q)
     * }
     */
    public static MethodHandle mpz_stronglucas_prp$handle() {
        return mpz_stronglucas_prp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpz_stronglucas_prp(mpz_t n, long p, long q)
     * }
     */
    public static MemorySegment mpz_stronglucas_prp$address() {
        return mpz_stronglucas_prp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpz_stronglucas_prp(mpz_t n, long p, long q)
     * }
     */
    public static int mpz_stronglucas_prp(MemorySegment n, int p, int q) {
        var mh$ = mpz_stronglucas_prp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpz_stronglucas_prp", n, p, q);
            }
            return (int)mh$.invokeExact(n, p, q);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpz_extrastronglucas_prp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpz_aprcl_h.C_INT,
            mpz_aprcl_h.C_POINTER,
            mpz_aprcl_h.C_LONG
        );

        public static final MemorySegment ADDR = mpz_aprcl_h.findOrThrow("mpz_extrastronglucas_prp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpz_extrastronglucas_prp(mpz_t n, long p)
     * }
     */
    public static FunctionDescriptor mpz_extrastronglucas_prp$descriptor() {
        return mpz_extrastronglucas_prp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpz_extrastronglucas_prp(mpz_t n, long p)
     * }
     */
    public static MethodHandle mpz_extrastronglucas_prp$handle() {
        return mpz_extrastronglucas_prp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpz_extrastronglucas_prp(mpz_t n, long p)
     * }
     */
    public static MemorySegment mpz_extrastronglucas_prp$address() {
        return mpz_extrastronglucas_prp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpz_extrastronglucas_prp(mpz_t n, long p)
     * }
     */
    public static int mpz_extrastronglucas_prp(MemorySegment n, int p) {
        var mh$ = mpz_extrastronglucas_prp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpz_extrastronglucas_prp", n, p);
            }
            return (int)mh$.invokeExact(n, p);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpz_selfridge_prp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpz_aprcl_h.C_INT,
            mpz_aprcl_h.C_POINTER
        );

        public static final MemorySegment ADDR = mpz_aprcl_h.findOrThrow("mpz_selfridge_prp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpz_selfridge_prp(mpz_t n)
     * }
     */
    public static FunctionDescriptor mpz_selfridge_prp$descriptor() {
        return mpz_selfridge_prp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpz_selfridge_prp(mpz_t n)
     * }
     */
    public static MethodHandle mpz_selfridge_prp$handle() {
        return mpz_selfridge_prp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpz_selfridge_prp(mpz_t n)
     * }
     */
    public static MemorySegment mpz_selfridge_prp$address() {
        return mpz_selfridge_prp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpz_selfridge_prp(mpz_t n)
     * }
     */
    public static int mpz_selfridge_prp(MemorySegment n) {
        var mh$ = mpz_selfridge_prp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpz_selfridge_prp", n);
            }
            return (int)mh$.invokeExact(n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpz_strongselfridge_prp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpz_aprcl_h.C_INT,
            mpz_aprcl_h.C_POINTER
        );

        public static final MemorySegment ADDR = mpz_aprcl_h.findOrThrow("mpz_strongselfridge_prp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpz_strongselfridge_prp(mpz_t n)
     * }
     */
    public static FunctionDescriptor mpz_strongselfridge_prp$descriptor() {
        return mpz_strongselfridge_prp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpz_strongselfridge_prp(mpz_t n)
     * }
     */
    public static MethodHandle mpz_strongselfridge_prp$handle() {
        return mpz_strongselfridge_prp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpz_strongselfridge_prp(mpz_t n)
     * }
     */
    public static MemorySegment mpz_strongselfridge_prp$address() {
        return mpz_strongselfridge_prp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpz_strongselfridge_prp(mpz_t n)
     * }
     */
    public static int mpz_strongselfridge_prp(MemorySegment n) {
        var mh$ = mpz_strongselfridge_prp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpz_strongselfridge_prp", n);
            }
            return (int)mh$.invokeExact(n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpz_bpsw_prp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpz_aprcl_h.C_INT,
            mpz_aprcl_h.C_POINTER
        );

        public static final MemorySegment ADDR = mpz_aprcl_h.findOrThrow("mpz_bpsw_prp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpz_bpsw_prp(mpz_t n)
     * }
     */
    public static FunctionDescriptor mpz_bpsw_prp$descriptor() {
        return mpz_bpsw_prp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpz_bpsw_prp(mpz_t n)
     * }
     */
    public static MethodHandle mpz_bpsw_prp$handle() {
        return mpz_bpsw_prp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpz_bpsw_prp(mpz_t n)
     * }
     */
    public static MemorySegment mpz_bpsw_prp$address() {
        return mpz_bpsw_prp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpz_bpsw_prp(mpz_t n)
     * }
     */
    public static int mpz_bpsw_prp(MemorySegment n) {
        var mh$ = mpz_bpsw_prp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpz_bpsw_prp", n);
            }
            return (int)mh$.invokeExact(n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpz_strongbpsw_prp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpz_aprcl_h.C_INT,
            mpz_aprcl_h.C_POINTER
        );

        public static final MemorySegment ADDR = mpz_aprcl_h.findOrThrow("mpz_strongbpsw_prp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpz_strongbpsw_prp(mpz_t n)
     * }
     */
    public static FunctionDescriptor mpz_strongbpsw_prp$descriptor() {
        return mpz_strongbpsw_prp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpz_strongbpsw_prp(mpz_t n)
     * }
     */
    public static MethodHandle mpz_strongbpsw_prp$handle() {
        return mpz_strongbpsw_prp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpz_strongbpsw_prp(mpz_t n)
     * }
     */
    public static MemorySegment mpz_strongbpsw_prp$address() {
        return mpz_strongbpsw_prp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpz_strongbpsw_prp(mpz_t n)
     * }
     */
    public static int mpz_strongbpsw_prp(MemorySegment n) {
        var mh$ = mpz_strongbpsw_prp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpz_strongbpsw_prp", n);
            }
            return (int)mh$.invokeExact(n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpz_aprcl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpz_aprcl_h.C_INT,
            mpz_aprcl_h.C_POINTER
        );

        public static final MemorySegment ADDR = mpz_aprcl_h.findOrThrow("mpz_aprcl");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpz_aprcl(mpz_t N)
     * }
     */
    public static FunctionDescriptor mpz_aprcl$descriptor() {
        return mpz_aprcl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpz_aprcl(mpz_t N)
     * }
     */
    public static MethodHandle mpz_aprcl$handle() {
        return mpz_aprcl.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpz_aprcl(mpz_t N)
     * }
     */
    public static MemorySegment mpz_aprcl$address() {
        return mpz_aprcl.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpz_aprcl(mpz_t N)
     * }
     */
    public static int mpz_aprcl(MemorySegment N) {
        var mh$ = mpz_aprcl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpz_aprcl", N);
            }
            return (int)mh$.invokeExact(N);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mpz_aprtcle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mpz_aprcl_h.C_INT,
            mpz_aprcl_h.C_POINTER,
            mpz_aprcl_h.C_INT
        );

        public static final MemorySegment ADDR = mpz_aprcl_h.findOrThrow("mpz_aprtcle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mpz_aprtcle(mpz_t N, int verbose)
     * }
     */
    public static FunctionDescriptor mpz_aprtcle$descriptor() {
        return mpz_aprtcle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mpz_aprtcle(mpz_t N, int verbose)
     * }
     */
    public static MethodHandle mpz_aprtcle$handle() {
        return mpz_aprtcle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mpz_aprtcle(mpz_t N, int verbose)
     * }
     */
    public static MemorySegment mpz_aprtcle$address() {
        return mpz_aprtcle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mpz_aprtcle(mpz_t N, int verbose)
     * }
     */
    public static int mpz_aprtcle(MemorySegment N, int verbose) {
        var mh$ = mpz_aprtcle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mpz_aprtcle", N, verbose);
            }
            return (int)mh$.invokeExact(N, verbose);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int SLSMINVAL = (int)-44056L;
    /**
     * {@snippet lang=c :
     * #define SLSMINVAL -44056
     * }
     */
    public static int SLSMINVAL() {
        return SLSMINVAL;
    }
    private static final int PRP_ERROR = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define PRP_ERROR -1
     * }
     */
    public static int PRP_ERROR() {
        return PRP_ERROR;
    }
    private static final int APRTCLE_ERROR = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define APRTCLE_ERROR -1
     * }
     */
    public static int APRTCLE_ERROR() {
        return APRTCLE_ERROR;
    }
}

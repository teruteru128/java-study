// Generated by jextract

package com.github.teruteru128.gmp;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     int _mp_alloc;
 *     int _mp_size;
 *     mp_limb_t *_mp_d;
 * }
 * }
 */
public class __mpz_struct {

    __mpz_struct() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        gmp_h.C_INT.withName("_mp_alloc"),
        gmp_h.C_INT.withName("_mp_size"),
        gmp_h.C_POINTER.withName("_mp_d")
    ).withName("$anon$151:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt _mp_alloc$LAYOUT = (OfInt)$LAYOUT.select(groupElement("_mp_alloc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int _mp_alloc
     * }
     */
    public static final OfInt _mp_alloc$layout() {
        return _mp_alloc$LAYOUT;
    }

    private static final long _mp_alloc$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int _mp_alloc
     * }
     */
    public static final long _mp_alloc$offset() {
        return _mp_alloc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int _mp_alloc
     * }
     */
    public static int _mp_alloc(MemorySegment struct) {
        return struct.get(_mp_alloc$LAYOUT, _mp_alloc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int _mp_alloc
     * }
     */
    public static void _mp_alloc(MemorySegment struct, int fieldValue) {
        struct.set(_mp_alloc$LAYOUT, _mp_alloc$OFFSET, fieldValue);
    }

    private static final OfInt _mp_size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("_mp_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int _mp_size
     * }
     */
    public static final OfInt _mp_size$layout() {
        return _mp_size$LAYOUT;
    }

    private static final long _mp_size$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int _mp_size
     * }
     */
    public static final long _mp_size$offset() {
        return _mp_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int _mp_size
     * }
     */
    public static int _mp_size(MemorySegment struct) {
        return struct.get(_mp_size$LAYOUT, _mp_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int _mp_size
     * }
     */
    public static void _mp_size(MemorySegment struct, int fieldValue) {
        struct.set(_mp_size$LAYOUT, _mp_size$OFFSET, fieldValue);
    }

    private static final AddressLayout _mp_d$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_mp_d"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * mp_limb_t *_mp_d
     * }
     */
    public static final AddressLayout _mp_d$layout() {
        return _mp_d$LAYOUT;
    }

    private static final long _mp_d$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * mp_limb_t *_mp_d
     * }
     */
    public static final long _mp_d$offset() {
        return _mp_d$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * mp_limb_t *_mp_d
     * }
     */
    public static MemorySegment _mp_d(MemorySegment struct) {
        return struct.get(_mp_d$LAYOUT, _mp_d$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * mp_limb_t *_mp_d
     * }
     */
    public static void _mp_d(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_mp_d$LAYOUT, _mp_d$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


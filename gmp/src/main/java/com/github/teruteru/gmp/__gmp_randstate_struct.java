// Generated by jextract

package com.github.teruteru.gmp;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     mpz_t _mp_seed;
 *     gmp_randalg_t _mp_alg;
 *     union {
 *         void *_mp_lc;
 *     } _mp_algdata;
 * }
 * }
 */
public class __gmp_randstate_struct {

    __gmp_randstate_struct() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(1, __mpz_struct.layout()).withName("_mp_seed"),
        gmp_h.C_INT.withName("_mp_alg"),
        MemoryLayout.paddingLayout(4),
        __gmp_randstate_struct._mp_algdata.layout().withName("_mp_algdata")
    ).withName("$anon$213:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout _mp_seed$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("_mp_seed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * mpz_t _mp_seed
     * }
     */
    public static final SequenceLayout _mp_seed$layout() {
        return _mp_seed$LAYOUT;
    }

    private static final long _mp_seed$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * mpz_t _mp_seed
     * }
     */
    public static final long _mp_seed$offset() {
        return _mp_seed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * mpz_t _mp_seed
     * }
     */
    public static MemorySegment _mp_seed(MemorySegment struct) {
        return struct.asSlice(_mp_seed$OFFSET, _mp_seed$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * mpz_t _mp_seed
     * }
     */
    public static void _mp_seed(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _mp_seed$OFFSET, _mp_seed$LAYOUT.byteSize());
    }

    private static final OfInt _mp_alg$LAYOUT = (OfInt)$LAYOUT.select(groupElement("_mp_alg"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gmp_randalg_t _mp_alg
     * }
     */
    public static final OfInt _mp_alg$layout() {
        return _mp_alg$LAYOUT;
    }

    private static final long _mp_alg$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gmp_randalg_t _mp_alg
     * }
     */
    public static final long _mp_alg$offset() {
        return _mp_alg$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gmp_randalg_t _mp_alg
     * }
     */
    public static int _mp_alg(MemorySegment struct) {
        return struct.get(_mp_alg$LAYOUT, _mp_alg$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gmp_randalg_t _mp_alg
     * }
     */
    public static void _mp_alg(MemorySegment struct, int fieldValue) {
        struct.set(_mp_alg$LAYOUT, _mp_alg$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * union {
     *     void *_mp_lc;
     * }
     * }
     */
    public static class _mp_algdata {

        _mp_algdata() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
            gmp_h.C_POINTER.withName("_mp_lc")
        ).withName("$anon$217:3");

        /**
         * The layout of this union
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final AddressLayout _mp_lc$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_mp_lc"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * void *_mp_lc
         * }
         */
        public static final AddressLayout _mp_lc$layout() {
            return _mp_lc$LAYOUT;
        }

        private static final long _mp_lc$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * void *_mp_lc
         * }
         */
        public static final long _mp_lc$offset() {
            return _mp_lc$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * void *_mp_lc
         * }
         */
        public static MemorySegment _mp_lc(MemorySegment union) {
            return union.get(_mp_lc$LAYOUT, _mp_lc$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * void *_mp_lc
         * }
         */
        public static void _mp_lc(MemorySegment union, MemorySegment fieldValue) {
            union.set(_mp_lc$LAYOUT, _mp_lc$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this union
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout _mp_algdata$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_mp_algdata"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * union {
     *     void *_mp_lc;
     * } _mp_algdata
     * }
     */
    public static final GroupLayout _mp_algdata$layout() {
        return _mp_algdata$LAYOUT;
    }

    private static final long _mp_algdata$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * union {
     *     void *_mp_lc;
     * } _mp_algdata
     * }
     */
    public static final long _mp_algdata$offset() {
        return _mp_algdata$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * union {
     *     void *_mp_lc;
     * } _mp_algdata
     * }
     */
    public static MemorySegment _mp_algdata(MemorySegment struct) {
        return struct.asSlice(_mp_algdata$OFFSET, _mp_algdata$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * union {
     *     void *_mp_lc;
     * } _mp_algdata
     * }
     */
    public static void _mp_algdata(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _mp_algdata$OFFSET, _mp_algdata$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


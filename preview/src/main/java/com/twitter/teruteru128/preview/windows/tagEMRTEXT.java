// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tagEMRTEXT {
 *     POINTL ptlReference;
 *     DWORD nChars;
 *     DWORD offString;
 *     DWORD fOptions;
 *     RECTL rcl;
 *     DWORD offDx;
 * };
 * }
 */
public class tagEMRTEXT {

    public static MemoryLayout $LAYOUT() {
        return constants$1072.const$4;
    }
    public static MemorySegment ptlReference$slice(MemorySegment seg) {
        return seg.asSlice(0, 8);
    }
    public static VarHandle nChars$VH() {
        return constants$1072.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD nChars;
     * }
     */
    public static int nChars$get(MemorySegment seg) {
        return (int)constants$1072.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD nChars;
     * }
     */
    public static void nChars$set(MemorySegment seg, int x) {
        constants$1072.const$5.set(seg, x);
    }
    public static int nChars$get(MemorySegment seg, long index) {
        return (int)constants$1072.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void nChars$set(MemorySegment seg, long index, int x) {
        constants$1072.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle offString$VH() {
        return constants$1073.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD offString;
     * }
     */
    public static int offString$get(MemorySegment seg) {
        return (int)constants$1073.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD offString;
     * }
     */
    public static void offString$set(MemorySegment seg, int x) {
        constants$1073.const$0.set(seg, x);
    }
    public static int offString$get(MemorySegment seg, long index) {
        return (int)constants$1073.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void offString$set(MemorySegment seg, long index, int x) {
        constants$1073.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle fOptions$VH() {
        return constants$1073.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD fOptions;
     * }
     */
    public static int fOptions$get(MemorySegment seg) {
        return (int)constants$1073.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD fOptions;
     * }
     */
    public static void fOptions$set(MemorySegment seg, int x) {
        constants$1073.const$1.set(seg, x);
    }
    public static int fOptions$get(MemorySegment seg, long index) {
        return (int)constants$1073.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void fOptions$set(MemorySegment seg, long index, int x) {
        constants$1073.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment rcl$slice(MemorySegment seg) {
        return seg.asSlice(20, 16);
    }
    public static VarHandle offDx$VH() {
        return constants$1073.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD offDx;
     * }
     */
    public static int offDx$get(MemorySegment seg) {
        return (int)constants$1073.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD offDx;
     * }
     */
    public static void offDx$set(MemorySegment seg, int x) {
        constants$1073.const$2.set(seg, x);
    }
    public static int offDx$get(MemorySegment seg, long index) {
        return (int)constants$1073.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void offDx$set(MemorySegment seg, long index, int x) {
        constants$1073.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



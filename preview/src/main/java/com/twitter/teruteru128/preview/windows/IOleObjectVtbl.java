// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IOleObjectVtbl {
 *     HRESULT (*QueryInterface)(IOleObject*,const IID*,void**);
 *     ULONG (*AddRef)(IOleObject*);
 *     ULONG (*Release)(IOleObject*);
 *     HRESULT (*SetClientSite)(IOleObject*,IOleClientSite*);
 *     HRESULT (*GetClientSite)(IOleObject*,IOleClientSite**);
 *     HRESULT (*SetHostNames)(IOleObject*,LPCOLESTR,LPCOLESTR);
 *     HRESULT (*Close)(IOleObject*,DWORD);
 *     HRESULT (*SetMoniker)(IOleObject*,DWORD,IMoniker*);
 *     HRESULT (*GetMoniker)(IOleObject*,DWORD,DWORD,IMoniker**);
 *     HRESULT (*InitFromData)(IOleObject*,IDataObject*,BOOL,DWORD);
 *     HRESULT (*GetClipboardData)(IOleObject*,DWORD,IDataObject**);
 *     HRESULT (*DoVerb)(IOleObject*,LONG,LPMSG,IOleClientSite*,LONG,HWND,LPCRECT);
 *     HRESULT (*EnumVerbs)(IOleObject*,IEnumOLEVERB**);
 *     HRESULT (*Update)(IOleObject*);
 *     HRESULT (*IsUpToDate)(IOleObject*);
 *     HRESULT (*GetUserClassID)(IOleObject*,CLSID*);
 *     HRESULT (*GetUserType)(IOleObject*,DWORD,LPOLESTR*);
 *     HRESULT (*SetExtent)(IOleObject*,DWORD,SIZEL*);
 *     HRESULT (*GetExtent)(IOleObject*,DWORD,SIZEL*);
 *     HRESULT (*Advise)(IOleObject*,IAdviseSink*,DWORD*);
 *     HRESULT (*Unadvise)(IOleObject*,DWORD);
 *     HRESULT (*EnumAdvise)(IOleObject*,IEnumSTATDATA**);
 *     HRESULT (*GetMiscStatus)(IOleObject*,DWORD,DWORD*);
 *     HRESULT (*SetColorScheme)(IOleObject*,LOGPALETTE*);
 * };
 * }
 */
public class IOleObjectVtbl {

    public static MemoryLayout $LAYOUT() {
        return constants$3658.const$2;
    }
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IOleObject*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3658.const$3, fi, constants$37.const$3, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle QueryInterface$VH() {
        return constants$3658.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IOleObject*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3658.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IOleObject*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        constants$3658.const$4.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3658.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3658.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, Arena scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*AddRef)(IOleObject*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3658.const$5, fi, constants$18.const$5, scope);
        }
        static AddRef ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle AddRef$VH() {
        return constants$3659.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IOleObject*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3659.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IOleObject*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        constants$3659.const$0.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3659.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3659.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, Arena scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*Release)(IOleObject*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3659.const$1, fi, constants$18.const$5, scope);
        }
        static Release ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Release$VH() {
        return constants$3659.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IOleObject*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3659.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IOleObject*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        constants$3659.const$2.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3659.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3659.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, Arena scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetClientSite)(IOleObject*,IOleClientSite*);
     * }
     */
    public interface SetClientSite {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetClientSite fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3659.const$3, fi, constants$34.const$0, scope);
        }
        static SetClientSite ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetClientSite$VH() {
        return constants$3659.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetClientSite)(IOleObject*,IOleClientSite*);
     * }
     */
    public static MemorySegment SetClientSite$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3659.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetClientSite)(IOleObject*,IOleClientSite*);
     * }
     */
    public static void SetClientSite$set(MemorySegment seg, MemorySegment x) {
        constants$3659.const$4.set(seg, x);
    }
    public static MemorySegment SetClientSite$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3659.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void SetClientSite$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3659.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetClientSite SetClientSite(MemorySegment segment, Arena scope) {
        return SetClientSite.ofAddress(SetClientSite$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetClientSite)(IOleObject*,IOleClientSite**);
     * }
     */
    public interface GetClientSite {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetClientSite fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3659.const$5, fi, constants$34.const$0, scope);
        }
        static GetClientSite ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetClientSite$VH() {
        return constants$3660.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetClientSite)(IOleObject*,IOleClientSite**);
     * }
     */
    public static MemorySegment GetClientSite$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3660.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetClientSite)(IOleObject*,IOleClientSite**);
     * }
     */
    public static void GetClientSite$set(MemorySegment seg, MemorySegment x) {
        constants$3660.const$0.set(seg, x);
    }
    public static MemorySegment GetClientSite$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3660.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void GetClientSite$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3660.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetClientSite GetClientSite(MemorySegment segment, Arena scope) {
        return GetClientSite.ofAddress(GetClientSite$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetHostNames)(IOleObject*,LPCOLESTR,LPCOLESTR);
     * }
     */
    public interface SetHostNames {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(SetHostNames fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3660.const$1, fi, constants$37.const$3, scope);
        }
        static SetHostNames ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetHostNames$VH() {
        return constants$3660.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetHostNames)(IOleObject*,LPCOLESTR,LPCOLESTR);
     * }
     */
    public static MemorySegment SetHostNames$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3660.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetHostNames)(IOleObject*,LPCOLESTR,LPCOLESTR);
     * }
     */
    public static void SetHostNames$set(MemorySegment seg, MemorySegment x) {
        constants$3660.const$2.set(seg, x);
    }
    public static MemorySegment SetHostNames$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3660.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void SetHostNames$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3660.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetHostNames SetHostNames(MemorySegment segment, Arena scope) {
        return SetHostNames.ofAddress(SetHostNames$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*Close)(IOleObject*,DWORD);
     * }
     */
    public interface Close {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(Close fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3660.const$3, fi, constants$65.const$2, scope);
        }
        static Close ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)constants$800.const$4.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Close$VH() {
        return constants$3660.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Close)(IOleObject*,DWORD);
     * }
     */
    public static MemorySegment Close$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3660.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Close)(IOleObject*,DWORD);
     * }
     */
    public static void Close$set(MemorySegment seg, MemorySegment x) {
        constants$3660.const$4.set(seg, x);
    }
    public static MemorySegment Close$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3660.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void Close$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3660.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static Close Close(MemorySegment segment, Arena scope) {
        return Close.ofAddress(Close$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetMoniker)(IOleObject*,DWORD,IMoniker*);
     * }
     */
    public interface SetMoniker {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(SetMoniker fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3660.const$5, fi, constants$485.const$5, scope);
        }
        static SetMoniker ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$1770.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetMoniker$VH() {
        return constants$3661.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetMoniker)(IOleObject*,DWORD,IMoniker*);
     * }
     */
    public static MemorySegment SetMoniker$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3661.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetMoniker)(IOleObject*,DWORD,IMoniker*);
     * }
     */
    public static void SetMoniker$set(MemorySegment seg, MemorySegment x) {
        constants$3661.const$0.set(seg, x);
    }
    public static MemorySegment SetMoniker$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3661.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void SetMoniker$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3661.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetMoniker SetMoniker(MemorySegment segment, Arena scope) {
        return SetMoniker.ofAddress(SetMoniker$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetMoniker)(IOleObject*,DWORD,DWORD,IMoniker**);
     * }
     */
    public interface GetMoniker {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(GetMoniker fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3661.const$1, fi, constants$644.const$5, scope);
        }
        static GetMoniker ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)constants$2131.const$5.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetMoniker$VH() {
        return constants$3661.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetMoniker)(IOleObject*,DWORD,DWORD,IMoniker**);
     * }
     */
    public static MemorySegment GetMoniker$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3661.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetMoniker)(IOleObject*,DWORD,DWORD,IMoniker**);
     * }
     */
    public static void GetMoniker$set(MemorySegment seg, MemorySegment x) {
        constants$3661.const$2.set(seg, x);
    }
    public static MemorySegment GetMoniker$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3661.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void GetMoniker$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3661.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetMoniker GetMoniker(MemorySegment segment, Arena scope) {
        return GetMoniker.ofAddress(GetMoniker$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*InitFromData)(IOleObject*,IDataObject*,BOOL,DWORD);
     * }
     */
    public interface InitFromData {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3);
        static MemorySegment allocate(InitFromData fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3661.const$3, fi, constants$584.const$5, scope);
        }
        static InitFromData ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3) -> {
                try {
                    return (int)constants$2092.const$3.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle InitFromData$VH() {
        return constants$3661.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*InitFromData)(IOleObject*,IDataObject*,BOOL,DWORD);
     * }
     */
    public static MemorySegment InitFromData$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3661.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*InitFromData)(IOleObject*,IDataObject*,BOOL,DWORD);
     * }
     */
    public static void InitFromData$set(MemorySegment seg, MemorySegment x) {
        constants$3661.const$4.set(seg, x);
    }
    public static MemorySegment InitFromData$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3661.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void InitFromData$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3661.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static InitFromData InitFromData(MemorySegment segment, Arena scope) {
        return InitFromData.ofAddress(InitFromData$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetClipboardData)(IOleObject*,DWORD,IDataObject**);
     * }
     */
    public interface GetClipboardData {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetClipboardData fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3661.const$5, fi, constants$485.const$5, scope);
        }
        static GetClipboardData ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$1770.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetClipboardData$VH() {
        return constants$3662.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetClipboardData)(IOleObject*,DWORD,IDataObject**);
     * }
     */
    public static MemorySegment GetClipboardData$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3662.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetClipboardData)(IOleObject*,DWORD,IDataObject**);
     * }
     */
    public static void GetClipboardData$set(MemorySegment seg, MemorySegment x) {
        constants$3662.const$0.set(seg, x);
    }
    public static MemorySegment GetClipboardData$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3662.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void GetClipboardData$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3662.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetClipboardData GetClipboardData(MemorySegment segment, Arena scope) {
        return GetClipboardData.ofAddress(GetClipboardData$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*DoVerb)(IOleObject*,LONG,LPMSG,IOleClientSite*,LONG,HWND,LPCRECT);
     * }
     */
    public interface DoVerb {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, int _x4, java.lang.foreign.MemorySegment _x5, java.lang.foreign.MemorySegment _x6);
        static MemorySegment allocate(DoVerb fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3662.const$1, fi, constants$2163.const$5, scope);
        }
        static DoVerb ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, int __x4, java.lang.foreign.MemorySegment __x5, java.lang.foreign.MemorySegment __x6) -> {
                try {
                    return (int)constants$3662.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle DoVerb$VH() {
        return constants$3662.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*DoVerb)(IOleObject*,LONG,LPMSG,IOleClientSite*,LONG,HWND,LPCRECT);
     * }
     */
    public static MemorySegment DoVerb$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3662.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*DoVerb)(IOleObject*,LONG,LPMSG,IOleClientSite*,LONG,HWND,LPCRECT);
     * }
     */
    public static void DoVerb$set(MemorySegment seg, MemorySegment x) {
        constants$3662.const$3.set(seg, x);
    }
    public static MemorySegment DoVerb$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3662.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void DoVerb$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3662.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static DoVerb DoVerb(MemorySegment segment, Arena scope) {
        return DoVerb.ofAddress(DoVerb$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*EnumVerbs)(IOleObject*,IEnumOLEVERB**);
     * }
     */
    public interface EnumVerbs {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(EnumVerbs fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3662.const$4, fi, constants$34.const$0, scope);
        }
        static EnumVerbs ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle EnumVerbs$VH() {
        return constants$3662.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*EnumVerbs)(IOleObject*,IEnumOLEVERB**);
     * }
     */
    public static MemorySegment EnumVerbs$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3662.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*EnumVerbs)(IOleObject*,IEnumOLEVERB**);
     * }
     */
    public static void EnumVerbs$set(MemorySegment seg, MemorySegment x) {
        constants$3662.const$5.set(seg, x);
    }
    public static MemorySegment EnumVerbs$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3662.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void EnumVerbs$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3662.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static EnumVerbs EnumVerbs(MemorySegment segment, Arena scope) {
        return EnumVerbs.ofAddress(EnumVerbs$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*Update)(IOleObject*);
     * }
     */
    public interface Update {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Update fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3663.const$0, fi, constants$18.const$5, scope);
        }
        static Update ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Update$VH() {
        return constants$3663.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Update)(IOleObject*);
     * }
     */
    public static MemorySegment Update$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3663.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Update)(IOleObject*);
     * }
     */
    public static void Update$set(MemorySegment seg, MemorySegment x) {
        constants$3663.const$1.set(seg, x);
    }
    public static MemorySegment Update$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3663.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void Update$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3663.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static Update Update(MemorySegment segment, Arena scope) {
        return Update.ofAddress(Update$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*IsUpToDate)(IOleObject*);
     * }
     */
    public interface IsUpToDate {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(IsUpToDate fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3663.const$2, fi, constants$18.const$5, scope);
        }
        static IsUpToDate ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle IsUpToDate$VH() {
        return constants$3663.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*IsUpToDate)(IOleObject*);
     * }
     */
    public static MemorySegment IsUpToDate$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3663.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*IsUpToDate)(IOleObject*);
     * }
     */
    public static void IsUpToDate$set(MemorySegment seg, MemorySegment x) {
        constants$3663.const$3.set(seg, x);
    }
    public static MemorySegment IsUpToDate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3663.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void IsUpToDate$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3663.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static IsUpToDate IsUpToDate(MemorySegment segment, Arena scope) {
        return IsUpToDate.ofAddress(IsUpToDate$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetUserClassID)(IOleObject*,CLSID*);
     * }
     */
    public interface GetUserClassID {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetUserClassID fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3663.const$4, fi, constants$34.const$0, scope);
        }
        static GetUserClassID ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetUserClassID$VH() {
        return constants$3663.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetUserClassID)(IOleObject*,CLSID*);
     * }
     */
    public static MemorySegment GetUserClassID$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3663.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetUserClassID)(IOleObject*,CLSID*);
     * }
     */
    public static void GetUserClassID$set(MemorySegment seg, MemorySegment x) {
        constants$3663.const$5.set(seg, x);
    }
    public static MemorySegment GetUserClassID$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3663.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GetUserClassID$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3663.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetUserClassID GetUserClassID(MemorySegment segment, Arena scope) {
        return GetUserClassID.ofAddress(GetUserClassID$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetUserType)(IOleObject*,DWORD,LPOLESTR*);
     * }
     */
    public interface GetUserType {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetUserType fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3664.const$0, fi, constants$485.const$5, scope);
        }
        static GetUserType ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$1770.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetUserType$VH() {
        return constants$3664.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetUserType)(IOleObject*,DWORD,LPOLESTR*);
     * }
     */
    public static MemorySegment GetUserType$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3664.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetUserType)(IOleObject*,DWORD,LPOLESTR*);
     * }
     */
    public static void GetUserType$set(MemorySegment seg, MemorySegment x) {
        constants$3664.const$1.set(seg, x);
    }
    public static MemorySegment GetUserType$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3664.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void GetUserType$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3664.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetUserType GetUserType(MemorySegment segment, Arena scope) {
        return GetUserType.ofAddress(GetUserType$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetExtent)(IOleObject*,DWORD,SIZEL*);
     * }
     */
    public interface SetExtent {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(SetExtent fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3664.const$2, fi, constants$485.const$5, scope);
        }
        static SetExtent ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$1770.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetExtent$VH() {
        return constants$3664.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetExtent)(IOleObject*,DWORD,SIZEL*);
     * }
     */
    public static MemorySegment SetExtent$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3664.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetExtent)(IOleObject*,DWORD,SIZEL*);
     * }
     */
    public static void SetExtent$set(MemorySegment seg, MemorySegment x) {
        constants$3664.const$3.set(seg, x);
    }
    public static MemorySegment SetExtent$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3664.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void SetExtent$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3664.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetExtent SetExtent(MemorySegment segment, Arena scope) {
        return SetExtent.ofAddress(SetExtent$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetExtent)(IOleObject*,DWORD,SIZEL*);
     * }
     */
    public interface GetExtent {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetExtent fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3664.const$4, fi, constants$485.const$5, scope);
        }
        static GetExtent ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$1770.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetExtent$VH() {
        return constants$3664.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetExtent)(IOleObject*,DWORD,SIZEL*);
     * }
     */
    public static MemorySegment GetExtent$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3664.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetExtent)(IOleObject*,DWORD,SIZEL*);
     * }
     */
    public static void GetExtent$set(MemorySegment seg, MemorySegment x) {
        constants$3664.const$5.set(seg, x);
    }
    public static MemorySegment GetExtent$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3664.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GetExtent$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3664.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetExtent GetExtent(MemorySegment segment, Arena scope) {
        return GetExtent.ofAddress(GetExtent$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*Advise)(IOleObject*,IAdviseSink*,DWORD*);
     * }
     */
    public interface Advise {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(Advise fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3665.const$0, fi, constants$37.const$3, scope);
        }
        static Advise ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Advise$VH() {
        return constants$3665.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Advise)(IOleObject*,IAdviseSink*,DWORD*);
     * }
     */
    public static MemorySegment Advise$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3665.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Advise)(IOleObject*,IAdviseSink*,DWORD*);
     * }
     */
    public static void Advise$set(MemorySegment seg, MemorySegment x) {
        constants$3665.const$1.set(seg, x);
    }
    public static MemorySegment Advise$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3665.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void Advise$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3665.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static Advise Advise(MemorySegment segment, Arena scope) {
        return Advise.ofAddress(Advise$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*Unadvise)(IOleObject*,DWORD);
     * }
     */
    public interface Unadvise {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(Unadvise fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3665.const$2, fi, constants$65.const$2, scope);
        }
        static Unadvise ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)constants$800.const$4.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Unadvise$VH() {
        return constants$3665.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Unadvise)(IOleObject*,DWORD);
     * }
     */
    public static MemorySegment Unadvise$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3665.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Unadvise)(IOleObject*,DWORD);
     * }
     */
    public static void Unadvise$set(MemorySegment seg, MemorySegment x) {
        constants$3665.const$3.set(seg, x);
    }
    public static MemorySegment Unadvise$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3665.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void Unadvise$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3665.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static Unadvise Unadvise(MemorySegment segment, Arena scope) {
        return Unadvise.ofAddress(Unadvise$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*EnumAdvise)(IOleObject*,IEnumSTATDATA**);
     * }
     */
    public interface EnumAdvise {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(EnumAdvise fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3665.const$4, fi, constants$34.const$0, scope);
        }
        static EnumAdvise ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle EnumAdvise$VH() {
        return constants$3665.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*EnumAdvise)(IOleObject*,IEnumSTATDATA**);
     * }
     */
    public static MemorySegment EnumAdvise$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3665.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*EnumAdvise)(IOleObject*,IEnumSTATDATA**);
     * }
     */
    public static void EnumAdvise$set(MemorySegment seg, MemorySegment x) {
        constants$3665.const$5.set(seg, x);
    }
    public static MemorySegment EnumAdvise$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3665.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void EnumAdvise$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3665.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static EnumAdvise EnumAdvise(MemorySegment segment, Arena scope) {
        return EnumAdvise.ofAddress(EnumAdvise$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetMiscStatus)(IOleObject*,DWORD,DWORD*);
     * }
     */
    public interface GetMiscStatus {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetMiscStatus fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3666.const$0, fi, constants$485.const$5, scope);
        }
        static GetMiscStatus ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$1770.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetMiscStatus$VH() {
        return constants$3666.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetMiscStatus)(IOleObject*,DWORD,DWORD*);
     * }
     */
    public static MemorySegment GetMiscStatus$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3666.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetMiscStatus)(IOleObject*,DWORD,DWORD*);
     * }
     */
    public static void GetMiscStatus$set(MemorySegment seg, MemorySegment x) {
        constants$3666.const$1.set(seg, x);
    }
    public static MemorySegment GetMiscStatus$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3666.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void GetMiscStatus$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3666.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetMiscStatus GetMiscStatus(MemorySegment segment, Arena scope) {
        return GetMiscStatus.ofAddress(GetMiscStatus$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetColorScheme)(IOleObject*,LOGPALETTE*);
     * }
     */
    public interface SetColorScheme {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetColorScheme fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3666.const$2, fi, constants$34.const$0, scope);
        }
        static SetColorScheme ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetColorScheme$VH() {
        return constants$3666.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetColorScheme)(IOleObject*,LOGPALETTE*);
     * }
     */
    public static MemorySegment SetColorScheme$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3666.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetColorScheme)(IOleObject*,LOGPALETTE*);
     * }
     */
    public static void SetColorScheme$set(MemorySegment seg, MemorySegment x) {
        constants$3666.const$3.set(seg, x);
    }
    public static MemorySegment SetColorScheme$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3666.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void SetColorScheme$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3666.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetColorScheme SetColorScheme(MemorySegment segment, Arena scope) {
        return SetColorScheme.ofAddress(SetColorScheme$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



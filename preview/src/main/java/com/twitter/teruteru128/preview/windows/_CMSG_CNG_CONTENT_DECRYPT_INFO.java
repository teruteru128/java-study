// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _CMSG_CNG_CONTENT_DECRYPT_INFO {
 *     DWORD cbSize;
 *     CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
 *     PFN_CMSG_ALLOC pfnAlloc;
 *     PFN_CMSG_FREE pfnFree;
 *     NCRYPT_KEY_HANDLE hNCryptKey;
 *     BYTE* pbContentEncryptKey;
 *     DWORD cbContentEncryptKey;
 *     BCRYPT_KEY_HANDLE hCNGContentEncryptKey;
 *     BYTE* pbCNGContentEncryptKeyObject;
 * };
 * }
 */
public class _CMSG_CNG_CONTENT_DECRYPT_INFO {

    public static MemoryLayout $LAYOUT() {
        return constants$2115.const$3;
    }
    public static VarHandle cbSize$VH() {
        return constants$2115.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD cbSize;
     * }
     */
    public static int cbSize$get(MemorySegment seg) {
        return (int)constants$2115.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD cbSize;
     * }
     */
    public static void cbSize$set(MemorySegment seg, int x) {
        constants$2115.const$4.set(seg, x);
    }
    public static int cbSize$get(MemorySegment seg, long index) {
        return (int)constants$2115.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void cbSize$set(MemorySegment seg, long index, int x) {
        constants$2115.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment ContentEncryptionAlgorithm$slice(MemorySegment seg) {
        return seg.asSlice(8, 24);
    }
    public static VarHandle pfnAlloc$VH() {
        return constants$2115.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PFN_CMSG_ALLOC pfnAlloc;
     * }
     */
    public static MemorySegment pfnAlloc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2115.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PFN_CMSG_ALLOC pfnAlloc;
     * }
     */
    public static void pfnAlloc$set(MemorySegment seg, MemorySegment x) {
        constants$2115.const$5.set(seg, x);
    }
    public static MemorySegment pfnAlloc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2115.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void pfnAlloc$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2115.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static PFN_CMSG_ALLOC pfnAlloc(MemorySegment segment, Arena scope) {
        return PFN_CMSG_ALLOC.ofAddress(pfnAlloc$get(segment), scope);
    }
    public static VarHandle pfnFree$VH() {
        return constants$2116.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PFN_CMSG_FREE pfnFree;
     * }
     */
    public static MemorySegment pfnFree$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2116.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PFN_CMSG_FREE pfnFree;
     * }
     */
    public static void pfnFree$set(MemorySegment seg, MemorySegment x) {
        constants$2116.const$0.set(seg, x);
    }
    public static MemorySegment pfnFree$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2116.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void pfnFree$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2116.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static PFN_CMSG_FREE pfnFree(MemorySegment segment, Arena scope) {
        return PFN_CMSG_FREE.ofAddress(pfnFree$get(segment), scope);
    }
    public static VarHandle hNCryptKey$VH() {
        return constants$2116.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * NCRYPT_KEY_HANDLE hNCryptKey;
     * }
     */
    public static long hNCryptKey$get(MemorySegment seg) {
        return (long)constants$2116.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * NCRYPT_KEY_HANDLE hNCryptKey;
     * }
     */
    public static void hNCryptKey$set(MemorySegment seg, long x) {
        constants$2116.const$1.set(seg, x);
    }
    public static long hNCryptKey$get(MemorySegment seg, long index) {
        return (long)constants$2116.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void hNCryptKey$set(MemorySegment seg, long index, long x) {
        constants$2116.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pbContentEncryptKey$VH() {
        return constants$2116.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE* pbContentEncryptKey;
     * }
     */
    public static MemorySegment pbContentEncryptKey$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2116.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE* pbContentEncryptKey;
     * }
     */
    public static void pbContentEncryptKey$set(MemorySegment seg, MemorySegment x) {
        constants$2116.const$2.set(seg, x);
    }
    public static MemorySegment pbContentEncryptKey$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2116.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void pbContentEncryptKey$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2116.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cbContentEncryptKey$VH() {
        return constants$2116.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD cbContentEncryptKey;
     * }
     */
    public static int cbContentEncryptKey$get(MemorySegment seg) {
        return (int)constants$2116.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD cbContentEncryptKey;
     * }
     */
    public static void cbContentEncryptKey$set(MemorySegment seg, int x) {
        constants$2116.const$3.set(seg, x);
    }
    public static int cbContentEncryptKey$get(MemorySegment seg, long index) {
        return (int)constants$2116.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void cbContentEncryptKey$set(MemorySegment seg, long index, int x) {
        constants$2116.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hCNGContentEncryptKey$VH() {
        return constants$2116.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BCRYPT_KEY_HANDLE hCNGContentEncryptKey;
     * }
     */
    public static MemorySegment hCNGContentEncryptKey$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2116.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BCRYPT_KEY_HANDLE hCNGContentEncryptKey;
     * }
     */
    public static void hCNGContentEncryptKey$set(MemorySegment seg, MemorySegment x) {
        constants$2116.const$4.set(seg, x);
    }
    public static MemorySegment hCNGContentEncryptKey$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2116.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void hCNGContentEncryptKey$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2116.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pbCNGContentEncryptKeyObject$VH() {
        return constants$2116.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE* pbCNGContentEncryptKeyObject;
     * }
     */
    public static MemorySegment pbCNGContentEncryptKeyObject$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2116.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE* pbCNGContentEncryptKeyObject;
     * }
     */
    public static void pbCNGContentEncryptKeyObject$set(MemorySegment seg, MemorySegment x) {
        constants$2116.const$5.set(seg, x);
    }
    public static MemorySegment pbCNGContentEncryptKeyObject$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2116.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void pbCNGContentEncryptKeyObject$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2116.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



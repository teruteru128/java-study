// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IXMLHttpRequestVtbl {
 *     HRESULT (*QueryInterface)(IXMLHttpRequest*,const IID*,void**);
 *     ULONG (*AddRef)(IXMLHttpRequest*);
 *     ULONG (*Release)(IXMLHttpRequest*);
 *     HRESULT (*GetTypeInfoCount)(IXMLHttpRequest*,UINT*);
 *     HRESULT (*GetTypeInfo)(IXMLHttpRequest*,UINT,LCID,ITypeInfo**);
 *     HRESULT (*GetIDsOfNames)(IXMLHttpRequest*,const IID*,LPOLESTR*,UINT,LCID,DISPID*);
 *     HRESULT (*Invoke)(IXMLHttpRequest*,DISPID,const IID*,LCID,WORD,DISPPARAMS*,VARIANT*,EXCEPINFO*,UINT*);
 *     HRESULT (*open)(IXMLHttpRequest*,BSTR,BSTR,VARIANT,VARIANT,VARIANT);
 *     HRESULT (*setRequestHeader)(IXMLHttpRequest*,BSTR,BSTR);
 *     HRESULT (*getResponseHeader)(IXMLHttpRequest*,BSTR,BSTR*);
 *     HRESULT (*getAllResponseHeaders)(IXMLHttpRequest*,BSTR*);
 *     HRESULT (*send)(IXMLHttpRequest*,VARIANT);
 *     HRESULT (*abort)(IXMLHttpRequest*);
 *     HRESULT (*get_status)(IXMLHttpRequest*,long*);
 *     HRESULT (*get_statusText)(IXMLHttpRequest*,BSTR*);
 *     HRESULT (*get_responseXML)(IXMLHttpRequest*,IDispatch**);
 *     HRESULT (*get_responseText)(IXMLHttpRequest*,BSTR*);
 *     HRESULT (*get_responseBody)(IXMLHttpRequest*,VARIANT*);
 *     HRESULT (*get_responseStream)(IXMLHttpRequest*,VARIANT*);
 *     HRESULT (*get_readyState)(IXMLHttpRequest*,long*);
 *     HRESULT (*put_onreadystatechange)(IXMLHttpRequest*,IDispatch*);
 * };
 * }
 */
public class IXMLHttpRequestVtbl {

    public static MemoryLayout $LAYOUT() {
        return constants$4029.const$1;
    }
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IXMLHttpRequest*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4029.const$2, fi, constants$37.const$3, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle QueryInterface$VH() {
        return constants$4029.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IXMLHttpRequest*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4029.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IXMLHttpRequest*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        constants$4029.const$3.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4029.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4029.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, Arena scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*AddRef)(IXMLHttpRequest*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4029.const$4, fi, constants$18.const$5, scope);
        }
        static AddRef ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle AddRef$VH() {
        return constants$4029.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IXMLHttpRequest*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4029.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IXMLHttpRequest*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        constants$4029.const$5.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4029.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4029.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, Arena scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*Release)(IXMLHttpRequest*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4030.const$0, fi, constants$18.const$5, scope);
        }
        static Release ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Release$VH() {
        return constants$4030.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IXMLHttpRequest*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4030.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IXMLHttpRequest*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        constants$4030.const$1.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4030.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4030.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, Arena scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetTypeInfoCount)(IXMLHttpRequest*,UINT*);
     * }
     */
    public interface GetTypeInfoCount {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetTypeInfoCount fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4030.const$2, fi, constants$34.const$0, scope);
        }
        static GetTypeInfoCount ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetTypeInfoCount$VH() {
        return constants$4030.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetTypeInfoCount)(IXMLHttpRequest*,UINT*);
     * }
     */
    public static MemorySegment GetTypeInfoCount$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4030.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetTypeInfoCount)(IXMLHttpRequest*,UINT*);
     * }
     */
    public static void GetTypeInfoCount$set(MemorySegment seg, MemorySegment x) {
        constants$4030.const$3.set(seg, x);
    }
    public static MemorySegment GetTypeInfoCount$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4030.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeInfoCount$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4030.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeInfoCount GetTypeInfoCount(MemorySegment segment, Arena scope) {
        return GetTypeInfoCount.ofAddress(GetTypeInfoCount$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetTypeInfo)(IXMLHttpRequest*,UINT,LCID,ITypeInfo**);
     * }
     */
    public interface GetTypeInfo {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(GetTypeInfo fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4030.const$4, fi, constants$644.const$5, scope);
        }
        static GetTypeInfo ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)constants$2131.const$5.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetTypeInfo$VH() {
        return constants$4030.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetTypeInfo)(IXMLHttpRequest*,UINT,LCID,ITypeInfo**);
     * }
     */
    public static MemorySegment GetTypeInfo$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4030.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetTypeInfo)(IXMLHttpRequest*,UINT,LCID,ITypeInfo**);
     * }
     */
    public static void GetTypeInfo$set(MemorySegment seg, MemorySegment x) {
        constants$4030.const$5.set(seg, x);
    }
    public static MemorySegment GetTypeInfo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4030.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeInfo$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4030.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeInfo GetTypeInfo(MemorySegment segment, Arena scope) {
        return GetTypeInfo.ofAddress(GetTypeInfo$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetIDsOfNames)(IXMLHttpRequest*,const IID*,LPOLESTR*,UINT,LCID,DISPID*);
     * }
     */
    public interface GetIDsOfNames {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3, int _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(GetIDsOfNames fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4031.const$0, fi, constants$836.const$2, scope);
        }
        static GetIDsOfNames ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3, int __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    return (int)constants$3267.const$1.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetIDsOfNames$VH() {
        return constants$4031.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetIDsOfNames)(IXMLHttpRequest*,const IID*,LPOLESTR*,UINT,LCID,DISPID*);
     * }
     */
    public static MemorySegment GetIDsOfNames$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4031.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetIDsOfNames)(IXMLHttpRequest*,const IID*,LPOLESTR*,UINT,LCID,DISPID*);
     * }
     */
    public static void GetIDsOfNames$set(MemorySegment seg, MemorySegment x) {
        constants$4031.const$1.set(seg, x);
    }
    public static MemorySegment GetIDsOfNames$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4031.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void GetIDsOfNames$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4031.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetIDsOfNames GetIDsOfNames(MemorySegment segment, Arena scope) {
        return GetIDsOfNames.ofAddress(GetIDsOfNames$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*Invoke)(IXMLHttpRequest*,DISPID,const IID*,LCID,WORD,DISPPARAMS*,VARIANT*,EXCEPINFO*,UINT*);
     * }
     */
    public interface Invoke {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, int _x3, short _x4, java.lang.foreign.MemorySegment _x5, java.lang.foreign.MemorySegment _x6, java.lang.foreign.MemorySegment _x7, java.lang.foreign.MemorySegment _x8);
        static MemorySegment allocate(Invoke fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4031.const$2, fi, constants$3484.const$0, scope);
        }
        static Invoke ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, int __x3, short __x4, java.lang.foreign.MemorySegment __x5, java.lang.foreign.MemorySegment __x6, java.lang.foreign.MemorySegment __x7, java.lang.foreign.MemorySegment __x8) -> {
                try {
                    return (int)constants$3484.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7, __x8);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Invoke$VH() {
        return constants$4031.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Invoke)(IXMLHttpRequest*,DISPID,const IID*,LCID,WORD,DISPPARAMS*,VARIANT*,EXCEPINFO*,UINT*);
     * }
     */
    public static MemorySegment Invoke$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4031.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Invoke)(IXMLHttpRequest*,DISPID,const IID*,LCID,WORD,DISPPARAMS*,VARIANT*,EXCEPINFO*,UINT*);
     * }
     */
    public static void Invoke$set(MemorySegment seg, MemorySegment x) {
        constants$4031.const$3.set(seg, x);
    }
    public static MemorySegment Invoke$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4031.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void Invoke$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4031.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static Invoke Invoke(MemorySegment segment, Arena scope) {
        return Invoke.ofAddress(Invoke$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*open)(IXMLHttpRequest*,BSTR,BSTR,VARIANT,VARIANT,VARIANT);
     * }
     */
    public interface open {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(open fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4031.const$5, fi, constants$4031.const$4, scope);
        }
        static open ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    return (int)constants$4032.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle open$VH() {
        return constants$4032.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*open)(IXMLHttpRequest*,BSTR,BSTR,VARIANT,VARIANT,VARIANT);
     * }
     */
    public static MemorySegment open$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4032.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*open)(IXMLHttpRequest*,BSTR,BSTR,VARIANT,VARIANT,VARIANT);
     * }
     */
    public static void open$set(MemorySegment seg, MemorySegment x) {
        constants$4032.const$1.set(seg, x);
    }
    public static MemorySegment open$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4032.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void open$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4032.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static open open(MemorySegment segment, Arena scope) {
        return open.ofAddress(open$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*setRequestHeader)(IXMLHttpRequest*,BSTR,BSTR);
     * }
     */
    public interface setRequestHeader {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(setRequestHeader fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4032.const$2, fi, constants$37.const$3, scope);
        }
        static setRequestHeader ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle setRequestHeader$VH() {
        return constants$4032.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*setRequestHeader)(IXMLHttpRequest*,BSTR,BSTR);
     * }
     */
    public static MemorySegment setRequestHeader$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4032.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*setRequestHeader)(IXMLHttpRequest*,BSTR,BSTR);
     * }
     */
    public static void setRequestHeader$set(MemorySegment seg, MemorySegment x) {
        constants$4032.const$3.set(seg, x);
    }
    public static MemorySegment setRequestHeader$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4032.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void setRequestHeader$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4032.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static setRequestHeader setRequestHeader(MemorySegment segment, Arena scope) {
        return setRequestHeader.ofAddress(setRequestHeader$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*getResponseHeader)(IXMLHttpRequest*,BSTR,BSTR*);
     * }
     */
    public interface getResponseHeader {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(getResponseHeader fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4032.const$4, fi, constants$37.const$3, scope);
        }
        static getResponseHeader ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle getResponseHeader$VH() {
        return constants$4032.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*getResponseHeader)(IXMLHttpRequest*,BSTR,BSTR*);
     * }
     */
    public static MemorySegment getResponseHeader$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4032.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*getResponseHeader)(IXMLHttpRequest*,BSTR,BSTR*);
     * }
     */
    public static void getResponseHeader$set(MemorySegment seg, MemorySegment x) {
        constants$4032.const$5.set(seg, x);
    }
    public static MemorySegment getResponseHeader$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4032.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void getResponseHeader$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4032.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static getResponseHeader getResponseHeader(MemorySegment segment, Arena scope) {
        return getResponseHeader.ofAddress(getResponseHeader$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*getAllResponseHeaders)(IXMLHttpRequest*,BSTR*);
     * }
     */
    public interface getAllResponseHeaders {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(getAllResponseHeaders fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4033.const$0, fi, constants$34.const$0, scope);
        }
        static getAllResponseHeaders ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle getAllResponseHeaders$VH() {
        return constants$4033.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*getAllResponseHeaders)(IXMLHttpRequest*,BSTR*);
     * }
     */
    public static MemorySegment getAllResponseHeaders$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4033.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*getAllResponseHeaders)(IXMLHttpRequest*,BSTR*);
     * }
     */
    public static void getAllResponseHeaders$set(MemorySegment seg, MemorySegment x) {
        constants$4033.const$1.set(seg, x);
    }
    public static MemorySegment getAllResponseHeaders$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4033.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void getAllResponseHeaders$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4033.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static getAllResponseHeaders getAllResponseHeaders(MemorySegment segment, Arena scope) {
        return getAllResponseHeaders.ofAddress(getAllResponseHeaders$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*send)(IXMLHttpRequest*,VARIANT);
     * }
     */
    public interface send {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(send fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4033.const$2, fi, constants$3752.const$1, scope);
        }
        static send ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$3752.const$3.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle send$VH() {
        return constants$4033.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*send)(IXMLHttpRequest*,VARIANT);
     * }
     */
    public static MemorySegment send$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4033.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*send)(IXMLHttpRequest*,VARIANT);
     * }
     */
    public static void send$set(MemorySegment seg, MemorySegment x) {
        constants$4033.const$3.set(seg, x);
    }
    public static MemorySegment send$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4033.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void send$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4033.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static send send(MemorySegment segment, Arena scope) {
        return send.ofAddress(send$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*abort)(IXMLHttpRequest*);
     * }
     */
    public interface abort {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(abort fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4033.const$4, fi, constants$18.const$5, scope);
        }
        static abort ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle abort$VH() {
        return constants$4033.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*abort)(IXMLHttpRequest*);
     * }
     */
    public static MemorySegment abort$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4033.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*abort)(IXMLHttpRequest*);
     * }
     */
    public static void abort$set(MemorySegment seg, MemorySegment x) {
        constants$4033.const$5.set(seg, x);
    }
    public static MemorySegment abort$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4033.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void abort$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4033.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static abort abort(MemorySegment segment, Arena scope) {
        return abort.ofAddress(abort$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_status)(IXMLHttpRequest*,long*);
     * }
     */
    public interface get_status {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_status fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4034.const$0, fi, constants$34.const$0, scope);
        }
        static get_status ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_status$VH() {
        return constants$4034.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_status)(IXMLHttpRequest*,long*);
     * }
     */
    public static MemorySegment get_status$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4034.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_status)(IXMLHttpRequest*,long*);
     * }
     */
    public static void get_status$set(MemorySegment seg, MemorySegment x) {
        constants$4034.const$1.set(seg, x);
    }
    public static MemorySegment get_status$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4034.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_status$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4034.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_status get_status(MemorySegment segment, Arena scope) {
        return get_status.ofAddress(get_status$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_statusText)(IXMLHttpRequest*,BSTR*);
     * }
     */
    public interface get_statusText {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_statusText fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4034.const$2, fi, constants$34.const$0, scope);
        }
        static get_statusText ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_statusText$VH() {
        return constants$4034.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_statusText)(IXMLHttpRequest*,BSTR*);
     * }
     */
    public static MemorySegment get_statusText$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4034.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_statusText)(IXMLHttpRequest*,BSTR*);
     * }
     */
    public static void get_statusText$set(MemorySegment seg, MemorySegment x) {
        constants$4034.const$3.set(seg, x);
    }
    public static MemorySegment get_statusText$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4034.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void get_statusText$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4034.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_statusText get_statusText(MemorySegment segment, Arena scope) {
        return get_statusText.ofAddress(get_statusText$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_responseXML)(IXMLHttpRequest*,IDispatch**);
     * }
     */
    public interface get_responseXML {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_responseXML fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4034.const$4, fi, constants$34.const$0, scope);
        }
        static get_responseXML ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_responseXML$VH() {
        return constants$4034.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_responseXML)(IXMLHttpRequest*,IDispatch**);
     * }
     */
    public static MemorySegment get_responseXML$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4034.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_responseXML)(IXMLHttpRequest*,IDispatch**);
     * }
     */
    public static void get_responseXML$set(MemorySegment seg, MemorySegment x) {
        constants$4034.const$5.set(seg, x);
    }
    public static MemorySegment get_responseXML$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4034.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_responseXML$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4034.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_responseXML get_responseXML(MemorySegment segment, Arena scope) {
        return get_responseXML.ofAddress(get_responseXML$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_responseText)(IXMLHttpRequest*,BSTR*);
     * }
     */
    public interface get_responseText {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_responseText fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4035.const$0, fi, constants$34.const$0, scope);
        }
        static get_responseText ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_responseText$VH() {
        return constants$4035.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_responseText)(IXMLHttpRequest*,BSTR*);
     * }
     */
    public static MemorySegment get_responseText$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4035.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_responseText)(IXMLHttpRequest*,BSTR*);
     * }
     */
    public static void get_responseText$set(MemorySegment seg, MemorySegment x) {
        constants$4035.const$1.set(seg, x);
    }
    public static MemorySegment get_responseText$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4035.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_responseText$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4035.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_responseText get_responseText(MemorySegment segment, Arena scope) {
        return get_responseText.ofAddress(get_responseText$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_responseBody)(IXMLHttpRequest*,VARIANT*);
     * }
     */
    public interface get_responseBody {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_responseBody fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4035.const$2, fi, constants$34.const$0, scope);
        }
        static get_responseBody ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_responseBody$VH() {
        return constants$4035.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_responseBody)(IXMLHttpRequest*,VARIANT*);
     * }
     */
    public static MemorySegment get_responseBody$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4035.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_responseBody)(IXMLHttpRequest*,VARIANT*);
     * }
     */
    public static void get_responseBody$set(MemorySegment seg, MemorySegment x) {
        constants$4035.const$3.set(seg, x);
    }
    public static MemorySegment get_responseBody$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4035.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void get_responseBody$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4035.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_responseBody get_responseBody(MemorySegment segment, Arena scope) {
        return get_responseBody.ofAddress(get_responseBody$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_responseStream)(IXMLHttpRequest*,VARIANT*);
     * }
     */
    public interface get_responseStream {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_responseStream fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4035.const$4, fi, constants$34.const$0, scope);
        }
        static get_responseStream ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_responseStream$VH() {
        return constants$4035.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_responseStream)(IXMLHttpRequest*,VARIANT*);
     * }
     */
    public static MemorySegment get_responseStream$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4035.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_responseStream)(IXMLHttpRequest*,VARIANT*);
     * }
     */
    public static void get_responseStream$set(MemorySegment seg, MemorySegment x) {
        constants$4035.const$5.set(seg, x);
    }
    public static MemorySegment get_responseStream$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4035.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_responseStream$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4035.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_responseStream get_responseStream(MemorySegment segment, Arena scope) {
        return get_responseStream.ofAddress(get_responseStream$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_readyState)(IXMLHttpRequest*,long*);
     * }
     */
    public interface get_readyState {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_readyState fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4036.const$0, fi, constants$34.const$0, scope);
        }
        static get_readyState ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_readyState$VH() {
        return constants$4036.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_readyState)(IXMLHttpRequest*,long*);
     * }
     */
    public static MemorySegment get_readyState$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4036.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_readyState)(IXMLHttpRequest*,long*);
     * }
     */
    public static void get_readyState$set(MemorySegment seg, MemorySegment x) {
        constants$4036.const$1.set(seg, x);
    }
    public static MemorySegment get_readyState$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4036.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_readyState$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4036.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_readyState get_readyState(MemorySegment segment, Arena scope) {
        return get_readyState.ofAddress(get_readyState$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*put_onreadystatechange)(IXMLHttpRequest*,IDispatch*);
     * }
     */
    public interface put_onreadystatechange {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(put_onreadystatechange fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4036.const$2, fi, constants$34.const$0, scope);
        }
        static put_onreadystatechange ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle put_onreadystatechange$VH() {
        return constants$4036.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*put_onreadystatechange)(IXMLHttpRequest*,IDispatch*);
     * }
     */
    public static MemorySegment put_onreadystatechange$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4036.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*put_onreadystatechange)(IXMLHttpRequest*,IDispatch*);
     * }
     */
    public static void put_onreadystatechange$set(MemorySegment seg, MemorySegment x) {
        constants$4036.const$3.set(seg, x);
    }
    public static MemorySegment put_onreadystatechange$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4036.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void put_onreadystatechange$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4036.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static put_onreadystatechange put_onreadystatechange(MemorySegment segment, Arena scope) {
        return put_onreadystatechange.ofAddress(put_onreadystatechange$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2 {
 *     DWORD LimitFlags;
 *     DWORD ViolationLimitFlags;
 *     DWORD64 IoReadBytes;
 *     DWORD64 IoReadBytesLimit;
 *     DWORD64 IoWriteBytes;
 *     DWORD64 IoWriteBytesLimit;
 *     LARGE_INTEGER PerJobUserTime;
 *     LARGE_INTEGER PerJobUserTimeLimit;
 *     DWORD64 JobMemory;
 *     union {
 *         DWORD64 JobHighMemoryLimit;
 *         DWORD64 JobMemoryLimit;
 *     };
 *     union {
 *         JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
 *         JOBOBJECT_RATE_CONTROL_TOLERANCE CpuRateControlTolerance;
 *     };
 *     union {
 *         JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlToleranceLimit;
 *         JOBOBJECT_RATE_CONTROL_TOLERANCE CpuRateControlToleranceLimit;
 *     };
 *     DWORD64 JobLowMemoryLimit;
 *     JOBOBJECT_RATE_CONTROL_TOLERANCE IoRateControlTolerance;
 *     JOBOBJECT_RATE_CONTROL_TOLERANCE IoRateControlToleranceLimit;
 *     JOBOBJECT_RATE_CONTROL_TOLERANCE NetRateControlTolerance;
 *     JOBOBJECT_RATE_CONTROL_TOLERANCE NetRateControlToleranceLimit;
 * };
 * }
 */
public class JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2 {

    public static MemoryLayout $LAYOUT() {
        return constants$213.const$5;
    }
    public static VarHandle LimitFlags$VH() {
        return constants$214.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD LimitFlags;
     * }
     */
    public static int LimitFlags$get(MemorySegment seg) {
        return (int)constants$214.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD LimitFlags;
     * }
     */
    public static void LimitFlags$set(MemorySegment seg, int x) {
        constants$214.const$0.set(seg, x);
    }
    public static int LimitFlags$get(MemorySegment seg, long index) {
        return (int)constants$214.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void LimitFlags$set(MemorySegment seg, long index, int x) {
        constants$214.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ViolationLimitFlags$VH() {
        return constants$214.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD ViolationLimitFlags;
     * }
     */
    public static int ViolationLimitFlags$get(MemorySegment seg) {
        return (int)constants$214.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD ViolationLimitFlags;
     * }
     */
    public static void ViolationLimitFlags$set(MemorySegment seg, int x) {
        constants$214.const$1.set(seg, x);
    }
    public static int ViolationLimitFlags$get(MemorySegment seg, long index) {
        return (int)constants$214.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void ViolationLimitFlags$set(MemorySegment seg, long index, int x) {
        constants$214.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle IoReadBytes$VH() {
        return constants$214.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 IoReadBytes;
     * }
     */
    public static long IoReadBytes$get(MemorySegment seg) {
        return (long)constants$214.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 IoReadBytes;
     * }
     */
    public static void IoReadBytes$set(MemorySegment seg, long x) {
        constants$214.const$2.set(seg, x);
    }
    public static long IoReadBytes$get(MemorySegment seg, long index) {
        return (long)constants$214.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void IoReadBytes$set(MemorySegment seg, long index, long x) {
        constants$214.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle IoReadBytesLimit$VH() {
        return constants$214.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 IoReadBytesLimit;
     * }
     */
    public static long IoReadBytesLimit$get(MemorySegment seg) {
        return (long)constants$214.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 IoReadBytesLimit;
     * }
     */
    public static void IoReadBytesLimit$set(MemorySegment seg, long x) {
        constants$214.const$3.set(seg, x);
    }
    public static long IoReadBytesLimit$get(MemorySegment seg, long index) {
        return (long)constants$214.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void IoReadBytesLimit$set(MemorySegment seg, long index, long x) {
        constants$214.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle IoWriteBytes$VH() {
        return constants$214.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 IoWriteBytes;
     * }
     */
    public static long IoWriteBytes$get(MemorySegment seg) {
        return (long)constants$214.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 IoWriteBytes;
     * }
     */
    public static void IoWriteBytes$set(MemorySegment seg, long x) {
        constants$214.const$4.set(seg, x);
    }
    public static long IoWriteBytes$get(MemorySegment seg, long index) {
        return (long)constants$214.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void IoWriteBytes$set(MemorySegment seg, long index, long x) {
        constants$214.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle IoWriteBytesLimit$VH() {
        return constants$214.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 IoWriteBytesLimit;
     * }
     */
    public static long IoWriteBytesLimit$get(MemorySegment seg) {
        return (long)constants$214.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 IoWriteBytesLimit;
     * }
     */
    public static void IoWriteBytesLimit$set(MemorySegment seg, long x) {
        constants$214.const$5.set(seg, x);
    }
    public static long IoWriteBytesLimit$get(MemorySegment seg, long index) {
        return (long)constants$214.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void IoWriteBytesLimit$set(MemorySegment seg, long index, long x) {
        constants$214.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment PerJobUserTime$slice(MemorySegment seg) {
        return seg.asSlice(40, 8);
    }
    public static MemorySegment PerJobUserTimeLimit$slice(MemorySegment seg) {
        return seg.asSlice(48, 8);
    }
    public static VarHandle JobMemory$VH() {
        return constants$215.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 JobMemory;
     * }
     */
    public static long JobMemory$get(MemorySegment seg) {
        return (long)constants$215.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 JobMemory;
     * }
     */
    public static void JobMemory$set(MemorySegment seg, long x) {
        constants$215.const$0.set(seg, x);
    }
    public static long JobMemory$get(MemorySegment seg, long index) {
        return (long)constants$215.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void JobMemory$set(MemorySegment seg, long index, long x) {
        constants$215.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle JobHighMemoryLimit$VH() {
        return constants$215.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 JobHighMemoryLimit;
     * }
     */
    public static long JobHighMemoryLimit$get(MemorySegment seg) {
        return (long)constants$215.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 JobHighMemoryLimit;
     * }
     */
    public static void JobHighMemoryLimit$set(MemorySegment seg, long x) {
        constants$215.const$1.set(seg, x);
    }
    public static long JobHighMemoryLimit$get(MemorySegment seg, long index) {
        return (long)constants$215.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void JobHighMemoryLimit$set(MemorySegment seg, long index, long x) {
        constants$215.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle JobMemoryLimit$VH() {
        return constants$215.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 JobMemoryLimit;
     * }
     */
    public static long JobMemoryLimit$get(MemorySegment seg) {
        return (long)constants$215.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 JobMemoryLimit;
     * }
     */
    public static void JobMemoryLimit$set(MemorySegment seg, long x) {
        constants$215.const$2.set(seg, x);
    }
    public static long JobMemoryLimit$get(MemorySegment seg, long index) {
        return (long)constants$215.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void JobMemoryLimit$set(MemorySegment seg, long index, long x) {
        constants$215.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle RateControlTolerance$VH() {
        return constants$215.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
     * }
     */
    public static int RateControlTolerance$get(MemorySegment seg) {
        return (int)constants$215.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
     * }
     */
    public static void RateControlTolerance$set(MemorySegment seg, int x) {
        constants$215.const$3.set(seg, x);
    }
    public static int RateControlTolerance$get(MemorySegment seg, long index) {
        return (int)constants$215.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void RateControlTolerance$set(MemorySegment seg, long index, int x) {
        constants$215.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle CpuRateControlTolerance$VH() {
        return constants$215.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * JOBOBJECT_RATE_CONTROL_TOLERANCE CpuRateControlTolerance;
     * }
     */
    public static int CpuRateControlTolerance$get(MemorySegment seg) {
        return (int)constants$215.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * JOBOBJECT_RATE_CONTROL_TOLERANCE CpuRateControlTolerance;
     * }
     */
    public static void CpuRateControlTolerance$set(MemorySegment seg, int x) {
        constants$215.const$4.set(seg, x);
    }
    public static int CpuRateControlTolerance$get(MemorySegment seg, long index) {
        return (int)constants$215.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void CpuRateControlTolerance$set(MemorySegment seg, long index, int x) {
        constants$215.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle RateControlToleranceLimit$VH() {
        return constants$215.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlToleranceLimit;
     * }
     */
    public static int RateControlToleranceLimit$get(MemorySegment seg) {
        return (int)constants$215.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlToleranceLimit;
     * }
     */
    public static void RateControlToleranceLimit$set(MemorySegment seg, int x) {
        constants$215.const$5.set(seg, x);
    }
    public static int RateControlToleranceLimit$get(MemorySegment seg, long index) {
        return (int)constants$215.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void RateControlToleranceLimit$set(MemorySegment seg, long index, int x) {
        constants$215.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle CpuRateControlToleranceLimit$VH() {
        return constants$216.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * JOBOBJECT_RATE_CONTROL_TOLERANCE CpuRateControlToleranceLimit;
     * }
     */
    public static int CpuRateControlToleranceLimit$get(MemorySegment seg) {
        return (int)constants$216.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * JOBOBJECT_RATE_CONTROL_TOLERANCE CpuRateControlToleranceLimit;
     * }
     */
    public static void CpuRateControlToleranceLimit$set(MemorySegment seg, int x) {
        constants$216.const$0.set(seg, x);
    }
    public static int CpuRateControlToleranceLimit$get(MemorySegment seg, long index) {
        return (int)constants$216.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void CpuRateControlToleranceLimit$set(MemorySegment seg, long index, int x) {
        constants$216.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle JobLowMemoryLimit$VH() {
        return constants$216.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 JobLowMemoryLimit;
     * }
     */
    public static long JobLowMemoryLimit$get(MemorySegment seg) {
        return (long)constants$216.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 JobLowMemoryLimit;
     * }
     */
    public static void JobLowMemoryLimit$set(MemorySegment seg, long x) {
        constants$216.const$1.set(seg, x);
    }
    public static long JobLowMemoryLimit$get(MemorySegment seg, long index) {
        return (long)constants$216.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void JobLowMemoryLimit$set(MemorySegment seg, long index, long x) {
        constants$216.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle IoRateControlTolerance$VH() {
        return constants$216.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * JOBOBJECT_RATE_CONTROL_TOLERANCE IoRateControlTolerance;
     * }
     */
    public static int IoRateControlTolerance$get(MemorySegment seg) {
        return (int)constants$216.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * JOBOBJECT_RATE_CONTROL_TOLERANCE IoRateControlTolerance;
     * }
     */
    public static void IoRateControlTolerance$set(MemorySegment seg, int x) {
        constants$216.const$2.set(seg, x);
    }
    public static int IoRateControlTolerance$get(MemorySegment seg, long index) {
        return (int)constants$216.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void IoRateControlTolerance$set(MemorySegment seg, long index, int x) {
        constants$216.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle IoRateControlToleranceLimit$VH() {
        return constants$216.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * JOBOBJECT_RATE_CONTROL_TOLERANCE IoRateControlToleranceLimit;
     * }
     */
    public static int IoRateControlToleranceLimit$get(MemorySegment seg) {
        return (int)constants$216.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * JOBOBJECT_RATE_CONTROL_TOLERANCE IoRateControlToleranceLimit;
     * }
     */
    public static void IoRateControlToleranceLimit$set(MemorySegment seg, int x) {
        constants$216.const$3.set(seg, x);
    }
    public static int IoRateControlToleranceLimit$get(MemorySegment seg, long index) {
        return (int)constants$216.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void IoRateControlToleranceLimit$set(MemorySegment seg, long index, int x) {
        constants$216.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle NetRateControlTolerance$VH() {
        return constants$216.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * JOBOBJECT_RATE_CONTROL_TOLERANCE NetRateControlTolerance;
     * }
     */
    public static int NetRateControlTolerance$get(MemorySegment seg) {
        return (int)constants$216.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * JOBOBJECT_RATE_CONTROL_TOLERANCE NetRateControlTolerance;
     * }
     */
    public static void NetRateControlTolerance$set(MemorySegment seg, int x) {
        constants$216.const$4.set(seg, x);
    }
    public static int NetRateControlTolerance$get(MemorySegment seg, long index) {
        return (int)constants$216.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void NetRateControlTolerance$set(MemorySegment seg, long index, int x) {
        constants$216.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle NetRateControlToleranceLimit$VH() {
        return constants$216.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * JOBOBJECT_RATE_CONTROL_TOLERANCE NetRateControlToleranceLimit;
     * }
     */
    public static int NetRateControlToleranceLimit$get(MemorySegment seg) {
        return (int)constants$216.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * JOBOBJECT_RATE_CONTROL_TOLERANCE NetRateControlToleranceLimit;
     * }
     */
    public static void NetRateControlToleranceLimit$set(MemorySegment seg, int x) {
        constants$216.const$5.set(seg, x);
    }
    public static int NetRateControlToleranceLimit$get(MemorySegment seg, long index) {
        return (int)constants$216.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void NetRateControlToleranceLimit$set(MemorySegment seg, long index, int x) {
        constants$216.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



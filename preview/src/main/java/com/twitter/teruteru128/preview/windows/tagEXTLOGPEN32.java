// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tagEXTLOGPEN32 {
 *     DWORD elpPenStyle;
 *     DWORD elpWidth;
 *     UINT elpBrushStyle;
 *     COLORREF elpColor;
 *     ULONG elpHatch;
 *     DWORD elpNumEntries;
 *     DWORD elpStyleEntry[1];
 * };
 * }
 */
public class tagEXTLOGPEN32 {

    public static MemoryLayout $LAYOUT() {
        return constants$932.const$5;
    }
    public static VarHandle elpPenStyle$VH() {
        return constants$933.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD elpPenStyle;
     * }
     */
    public static int elpPenStyle$get(MemorySegment seg) {
        return (int)constants$933.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD elpPenStyle;
     * }
     */
    public static void elpPenStyle$set(MemorySegment seg, int x) {
        constants$933.const$0.set(seg, x);
    }
    public static int elpPenStyle$get(MemorySegment seg, long index) {
        return (int)constants$933.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void elpPenStyle$set(MemorySegment seg, long index, int x) {
        constants$933.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle elpWidth$VH() {
        return constants$933.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD elpWidth;
     * }
     */
    public static int elpWidth$get(MemorySegment seg) {
        return (int)constants$933.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD elpWidth;
     * }
     */
    public static void elpWidth$set(MemorySegment seg, int x) {
        constants$933.const$1.set(seg, x);
    }
    public static int elpWidth$get(MemorySegment seg, long index) {
        return (int)constants$933.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void elpWidth$set(MemorySegment seg, long index, int x) {
        constants$933.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle elpBrushStyle$VH() {
        return constants$933.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * UINT elpBrushStyle;
     * }
     */
    public static int elpBrushStyle$get(MemorySegment seg) {
        return (int)constants$933.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * UINT elpBrushStyle;
     * }
     */
    public static void elpBrushStyle$set(MemorySegment seg, int x) {
        constants$933.const$2.set(seg, x);
    }
    public static int elpBrushStyle$get(MemorySegment seg, long index) {
        return (int)constants$933.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void elpBrushStyle$set(MemorySegment seg, long index, int x) {
        constants$933.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle elpColor$VH() {
        return constants$933.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * COLORREF elpColor;
     * }
     */
    public static int elpColor$get(MemorySegment seg) {
        return (int)constants$933.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * COLORREF elpColor;
     * }
     */
    public static void elpColor$set(MemorySegment seg, int x) {
        constants$933.const$3.set(seg, x);
    }
    public static int elpColor$get(MemorySegment seg, long index) {
        return (int)constants$933.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void elpColor$set(MemorySegment seg, long index, int x) {
        constants$933.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle elpHatch$VH() {
        return constants$933.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG elpHatch;
     * }
     */
    public static int elpHatch$get(MemorySegment seg) {
        return (int)constants$933.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG elpHatch;
     * }
     */
    public static void elpHatch$set(MemorySegment seg, int x) {
        constants$933.const$4.set(seg, x);
    }
    public static int elpHatch$get(MemorySegment seg, long index) {
        return (int)constants$933.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void elpHatch$set(MemorySegment seg, long index, int x) {
        constants$933.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle elpNumEntries$VH() {
        return constants$933.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD elpNumEntries;
     * }
     */
    public static int elpNumEntries$get(MemorySegment seg) {
        return (int)constants$933.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD elpNumEntries;
     * }
     */
    public static void elpNumEntries$set(MemorySegment seg, int x) {
        constants$933.const$5.set(seg, x);
    }
    public static int elpNumEntries$get(MemorySegment seg, long index) {
        return (int)constants$933.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void elpNumEntries$set(MemorySegment seg, long index, int x) {
        constants$933.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment elpStyleEntry$slice(MemorySegment seg) {
        return seg.asSlice(24, 4);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _STORAGE_HW_ENDURANCE_INFO {
 *     DWORD ValidFields;
 *     DWORD GroupId;
 *     struct  Flags;
 *     DWORD LifePercentage;
 *     BYTE BytesReadCount[16];
 *     BYTE ByteWriteCount[16];
 * };
 * }
 */
public class _STORAGE_HW_ENDURANCE_INFO {

    public static MemoryLayout $LAYOUT() {
        return constants$2436.const$5;
    }
    public static VarHandle ValidFields$VH() {
        return constants$2437.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD ValidFields;
     * }
     */
    public static int ValidFields$get(MemorySegment seg) {
        return (int)constants$2437.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD ValidFields;
     * }
     */
    public static void ValidFields$set(MemorySegment seg, int x) {
        constants$2437.const$0.set(seg, x);
    }
    public static int ValidFields$get(MemorySegment seg, long index) {
        return (int)constants$2437.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void ValidFields$set(MemorySegment seg, long index, int x) {
        constants$2437.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle GroupId$VH() {
        return constants$2437.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD GroupId;
     * }
     */
    public static int GroupId$get(MemorySegment seg) {
        return (int)constants$2437.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD GroupId;
     * }
     */
    public static void GroupId$set(MemorySegment seg, int x) {
        constants$2437.const$1.set(seg, x);
    }
    public static int GroupId$get(MemorySegment seg, long index) {
        return (int)constants$2437.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void GroupId$set(MemorySegment seg, long index, int x) {
        constants$2437.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
     * struct {
     *          *     DWORD Shared;
     *     DWORD Reserved;
     * };
     * }
     */
    public static final class Flags {

        // Suppresses default constructor, ensuring non-instantiability.
        private Flags() {}
        public static MemoryLayout $LAYOUT() {
            return constants$128.const$3;
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment Flags$slice(MemorySegment seg) {
        return seg.asSlice(8, 4);
    }
    public static VarHandle LifePercentage$VH() {
        return constants$2437.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD LifePercentage;
     * }
     */
    public static int LifePercentage$get(MemorySegment seg) {
        return (int)constants$2437.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD LifePercentage;
     * }
     */
    public static void LifePercentage$set(MemorySegment seg, int x) {
        constants$2437.const$2.set(seg, x);
    }
    public static int LifePercentage$get(MemorySegment seg, long index) {
        return (int)constants$2437.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void LifePercentage$set(MemorySegment seg, long index, int x) {
        constants$2437.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment BytesReadCount$slice(MemorySegment seg) {
        return seg.asSlice(16, 16);
    }
    public static MemorySegment ByteWriteCount$slice(MemorySegment seg) {
        return seg.asSlice(32, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



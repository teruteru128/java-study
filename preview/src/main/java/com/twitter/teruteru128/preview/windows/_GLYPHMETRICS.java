// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _GLYPHMETRICS {
 *     UINT gmBlackBoxX;
 *     UINT gmBlackBoxY;
 *     POINT gmptGlyphOrigin;
 *     short gmCellIncX;
 *     short gmCellIncY;
 * };
 * }
 */
public class _GLYPHMETRICS {

    public static MemoryLayout $LAYOUT() {
        return constants$982.const$5;
    }
    public static VarHandle gmBlackBoxX$VH() {
        return constants$983.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * UINT gmBlackBoxX;
     * }
     */
    public static int gmBlackBoxX$get(MemorySegment seg) {
        return (int)constants$983.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * UINT gmBlackBoxX;
     * }
     */
    public static void gmBlackBoxX$set(MemorySegment seg, int x) {
        constants$983.const$0.set(seg, x);
    }
    public static int gmBlackBoxX$get(MemorySegment seg, long index) {
        return (int)constants$983.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void gmBlackBoxX$set(MemorySegment seg, long index, int x) {
        constants$983.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle gmBlackBoxY$VH() {
        return constants$983.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * UINT gmBlackBoxY;
     * }
     */
    public static int gmBlackBoxY$get(MemorySegment seg) {
        return (int)constants$983.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * UINT gmBlackBoxY;
     * }
     */
    public static void gmBlackBoxY$set(MemorySegment seg, int x) {
        constants$983.const$1.set(seg, x);
    }
    public static int gmBlackBoxY$get(MemorySegment seg, long index) {
        return (int)constants$983.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void gmBlackBoxY$set(MemorySegment seg, long index, int x) {
        constants$983.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment gmptGlyphOrigin$slice(MemorySegment seg) {
        return seg.asSlice(8, 8);
    }
    public static VarHandle gmCellIncX$VH() {
        return constants$983.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short gmCellIncX;
     * }
     */
    public static short gmCellIncX$get(MemorySegment seg) {
        return (short)constants$983.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short gmCellIncX;
     * }
     */
    public static void gmCellIncX$set(MemorySegment seg, short x) {
        constants$983.const$2.set(seg, x);
    }
    public static short gmCellIncX$get(MemorySegment seg, long index) {
        return (short)constants$983.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void gmCellIncX$set(MemorySegment seg, long index, short x) {
        constants$983.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle gmCellIncY$VH() {
        return constants$983.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short gmCellIncY;
     * }
     */
    public static short gmCellIncY$get(MemorySegment seg) {
        return (short)constants$983.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short gmCellIncY;
     * }
     */
    public static void gmCellIncY$set(MemorySegment seg, short x) {
        constants$983.const$3.set(seg, x);
    }
    public static short gmCellIncY$get(MemorySegment seg, long index) {
        return (short)constants$983.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void gmCellIncY$set(MemorySegment seg, long index, short x) {
        constants$983.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



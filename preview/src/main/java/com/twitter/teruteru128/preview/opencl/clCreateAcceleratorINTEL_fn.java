// Generated by jextract

package com.twitter.teruteru128.preview.opencl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _cl_accelerator_intel* (*clCreateAcceleratorINTEL_fn)(struct _cl_context* context,unsigned int accelerator_type,unsigned long long descriptor_size,void* descriptor,int* errcode_ret);
 * }
 */
public interface clCreateAcceleratorINTEL_fn {

    java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment context, int accelerator_type, long descriptor_size, java.lang.foreign.MemorySegment descriptor, java.lang.foreign.MemorySegment errcode_ret);
    static MemorySegment allocate(clCreateAcceleratorINTEL_fn fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$245.const$3, fi, constants$245.const$2, scope);
    }
    static clCreateAcceleratorINTEL_fn ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (java.lang.foreign.MemorySegment _context, int _accelerator_type, long _descriptor_size, java.lang.foreign.MemorySegment _descriptor, java.lang.foreign.MemorySegment _errcode_ret) -> {
            try {
                return (java.lang.foreign.MemorySegment)constants$245.const$4.invokeExact(symbol, _context, _accelerator_type, _descriptor_size, _descriptor, _errcode_ret);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}



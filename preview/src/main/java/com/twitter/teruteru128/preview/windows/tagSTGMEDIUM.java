// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tagSTGMEDIUM {
 *     DWORD tymed;
 *     union {
 *         HBITMAP hBitmap;
 *         HMETAFILEPICT hMetaFilePict;
 *         HENHMETAFILE hEnhMetaFile;
 *         HGLOBAL hGlobal;
 *         LPOLESTR lpszFileName;
 *         IStream* pstm;
 *         IStorage* pstg;
 *     };
 *     IUnknown* pUnkForRelease;
 * };
 * }
 */
public class tagSTGMEDIUM {

    public static MemoryLayout $LAYOUT() {
        return constants$3299.const$1;
    }
    public static VarHandle tymed$VH() {
        return constants$3299.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD tymed;
     * }
     */
    public static int tymed$get(MemorySegment seg) {
        return (int)constants$3299.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD tymed;
     * }
     */
    public static void tymed$set(MemorySegment seg, int x) {
        constants$3299.const$2.set(seg, x);
    }
    public static int tymed$get(MemorySegment seg, long index) {
        return (int)constants$3299.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void tymed$set(MemorySegment seg, long index, int x) {
        constants$3299.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hBitmap$VH() {
        return constants$3299.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HBITMAP hBitmap;
     * }
     */
    public static MemorySegment hBitmap$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3299.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HBITMAP hBitmap;
     * }
     */
    public static void hBitmap$set(MemorySegment seg, MemorySegment x) {
        constants$3299.const$3.set(seg, x);
    }
    public static MemorySegment hBitmap$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3299.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void hBitmap$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3299.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hMetaFilePict$VH() {
        return constants$3299.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HMETAFILEPICT hMetaFilePict;
     * }
     */
    public static MemorySegment hMetaFilePict$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3299.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HMETAFILEPICT hMetaFilePict;
     * }
     */
    public static void hMetaFilePict$set(MemorySegment seg, MemorySegment x) {
        constants$3299.const$4.set(seg, x);
    }
    public static MemorySegment hMetaFilePict$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3299.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void hMetaFilePict$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3299.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hEnhMetaFile$VH() {
        return constants$3299.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HENHMETAFILE hEnhMetaFile;
     * }
     */
    public static MemorySegment hEnhMetaFile$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3299.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HENHMETAFILE hEnhMetaFile;
     * }
     */
    public static void hEnhMetaFile$set(MemorySegment seg, MemorySegment x) {
        constants$3299.const$5.set(seg, x);
    }
    public static MemorySegment hEnhMetaFile$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3299.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void hEnhMetaFile$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3299.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hGlobal$VH() {
        return constants$3300.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HGLOBAL hGlobal;
     * }
     */
    public static MemorySegment hGlobal$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3300.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HGLOBAL hGlobal;
     * }
     */
    public static void hGlobal$set(MemorySegment seg, MemorySegment x) {
        constants$3300.const$0.set(seg, x);
    }
    public static MemorySegment hGlobal$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3300.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void hGlobal$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3300.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lpszFileName$VH() {
        return constants$3300.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPOLESTR lpszFileName;
     * }
     */
    public static MemorySegment lpszFileName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3300.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPOLESTR lpszFileName;
     * }
     */
    public static void lpszFileName$set(MemorySegment seg, MemorySegment x) {
        constants$3300.const$1.set(seg, x);
    }
    public static MemorySegment lpszFileName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3300.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void lpszFileName$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3300.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pstm$VH() {
        return constants$3300.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IStream* pstm;
     * }
     */
    public static MemorySegment pstm$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3300.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IStream* pstm;
     * }
     */
    public static void pstm$set(MemorySegment seg, MemorySegment x) {
        constants$3300.const$2.set(seg, x);
    }
    public static MemorySegment pstm$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3300.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void pstm$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3300.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pstg$VH() {
        return constants$3300.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IStorage* pstg;
     * }
     */
    public static MemorySegment pstg$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3300.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IStorage* pstg;
     * }
     */
    public static void pstg$set(MemorySegment seg, MemorySegment x) {
        constants$3300.const$3.set(seg, x);
    }
    public static MemorySegment pstg$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3300.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void pstg$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3300.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pUnkForRelease$VH() {
        return constants$3300.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IUnknown* pUnkForRelease;
     * }
     */
    public static MemorySegment pUnkForRelease$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3300.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IUnknown* pUnkForRelease;
     * }
     */
    public static void pUnkForRelease$set(MemorySegment seg, MemorySegment x) {
        constants$3300.const$4.set(seg, x);
    }
    public static MemorySegment pUnkForRelease$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3300.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void pUnkForRelease$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3300.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



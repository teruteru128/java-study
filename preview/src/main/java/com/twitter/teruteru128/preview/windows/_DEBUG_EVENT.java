// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _DEBUG_EVENT {
 *     DWORD dwDebugEventCode;
 *     DWORD dwProcessId;
 *     DWORD dwThreadId;
 *     union  u;
 * };
 * }
 */
public class _DEBUG_EVENT {

    public static MemoryLayout $LAYOUT() {
        return constants$568.const$0;
    }
    public static VarHandle dwDebugEventCode$VH() {
        return constants$568.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwDebugEventCode;
     * }
     */
    public static int dwDebugEventCode$get(MemorySegment seg) {
        return (int)constants$568.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwDebugEventCode;
     * }
     */
    public static void dwDebugEventCode$set(MemorySegment seg, int x) {
        constants$568.const$1.set(seg, x);
    }
    public static int dwDebugEventCode$get(MemorySegment seg, long index) {
        return (int)constants$568.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void dwDebugEventCode$set(MemorySegment seg, long index, int x) {
        constants$568.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwProcessId$VH() {
        return constants$568.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwProcessId;
     * }
     */
    public static int dwProcessId$get(MemorySegment seg) {
        return (int)constants$568.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwProcessId;
     * }
     */
    public static void dwProcessId$set(MemorySegment seg, int x) {
        constants$568.const$2.set(seg, x);
    }
    public static int dwProcessId$get(MemorySegment seg, long index) {
        return (int)constants$568.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void dwProcessId$set(MemorySegment seg, long index, int x) {
        constants$568.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwThreadId$VH() {
        return constants$568.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwThreadId;
     * }
     */
    public static int dwThreadId$get(MemorySegment seg) {
        return (int)constants$568.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwThreadId;
     * }
     */
    public static void dwThreadId$set(MemorySegment seg, int x) {
        constants$568.const$3.set(seg, x);
    }
    public static int dwThreadId$get(MemorySegment seg, long index) {
        return (int)constants$568.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void dwThreadId$set(MemorySegment seg, long index, int x) {
        constants$568.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
     * union {
     *     EXCEPTION_DEBUG_INFO Exception;
     *     CREATE_THREAD_DEBUG_INFO CreateThread;
     *     CREATE_PROCESS_DEBUG_INFO CreateProcessInfo;
     *     EXIT_THREAD_DEBUG_INFO ExitThread;
     *     EXIT_PROCESS_DEBUG_INFO ExitProcess;
     *     LOAD_DLL_DEBUG_INFO LoadDll;
     *     UNLOAD_DLL_DEBUG_INFO UnloadDll;
     *     OUTPUT_DEBUG_STRING_INFO DebugString;
     *     RIP_INFO RipInfo;
     * };
     * }
     */
    public static final class u {

        // Suppresses default constructor, ensuring non-instantiability.
        private u() {}
        public static MemoryLayout $LAYOUT() {
            return constants$568.const$4;
        }
        public static MemorySegment Exception$slice(MemorySegment seg) {
            return seg.asSlice(0, 160);
        }
        public static MemorySegment CreateThread$slice(MemorySegment seg) {
            return seg.asSlice(0, 24);
        }
        public static MemorySegment CreateProcessInfo$slice(MemorySegment seg) {
            return seg.asSlice(0, 72);
        }
        public static MemorySegment ExitThread$slice(MemorySegment seg) {
            return seg.asSlice(0, 4);
        }
        public static MemorySegment ExitProcess$slice(MemorySegment seg) {
            return seg.asSlice(0, 4);
        }
        public static MemorySegment LoadDll$slice(MemorySegment seg) {
            return seg.asSlice(0, 40);
        }
        public static MemorySegment UnloadDll$slice(MemorySegment seg) {
            return seg.asSlice(0, 8);
        }
        public static MemorySegment DebugString$slice(MemorySegment seg) {
            return seg.asSlice(0, 16);
        }
        public static MemorySegment RipInfo$slice(MemorySegment seg) {
            return seg.asSlice(0, 8);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment u$slice(MemorySegment seg) {
        return seg.asSlice(16, 160);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



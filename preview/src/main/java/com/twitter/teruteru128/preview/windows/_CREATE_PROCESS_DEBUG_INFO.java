// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _CREATE_PROCESS_DEBUG_INFO {
 *     HANDLE hFile;
 *     HANDLE hProcess;
 *     HANDLE hThread;
 *     LPVOID lpBaseOfImage;
 *     DWORD dwDebugInfoFileOffset;
 *     DWORD nDebugInfoSize;
 *     LPVOID lpThreadLocalBase;
 *     LPTHREAD_START_ROUTINE lpStartAddress;
 *     LPVOID lpImageName;
 *     WORD fUnicode;
 * };
 * }
 */
public class _CREATE_PROCESS_DEBUG_INFO {

    public static MemoryLayout $LAYOUT() {
        return constants$562.const$5;
    }
    public static VarHandle hFile$VH() {
        return constants$563.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HANDLE hFile;
     * }
     */
    public static MemorySegment hFile$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$563.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HANDLE hFile;
     * }
     */
    public static void hFile$set(MemorySegment seg, MemorySegment x) {
        constants$563.const$0.set(seg, x);
    }
    public static MemorySegment hFile$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$563.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void hFile$set(MemorySegment seg, long index, MemorySegment x) {
        constants$563.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hProcess$VH() {
        return constants$563.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HANDLE hProcess;
     * }
     */
    public static MemorySegment hProcess$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$563.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HANDLE hProcess;
     * }
     */
    public static void hProcess$set(MemorySegment seg, MemorySegment x) {
        constants$563.const$1.set(seg, x);
    }
    public static MemorySegment hProcess$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$563.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void hProcess$set(MemorySegment seg, long index, MemorySegment x) {
        constants$563.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hThread$VH() {
        return constants$563.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HANDLE hThread;
     * }
     */
    public static MemorySegment hThread$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$563.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HANDLE hThread;
     * }
     */
    public static void hThread$set(MemorySegment seg, MemorySegment x) {
        constants$563.const$2.set(seg, x);
    }
    public static MemorySegment hThread$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$563.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void hThread$set(MemorySegment seg, long index, MemorySegment x) {
        constants$563.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lpBaseOfImage$VH() {
        return constants$563.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPVOID lpBaseOfImage;
     * }
     */
    public static MemorySegment lpBaseOfImage$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$563.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPVOID lpBaseOfImage;
     * }
     */
    public static void lpBaseOfImage$set(MemorySegment seg, MemorySegment x) {
        constants$563.const$3.set(seg, x);
    }
    public static MemorySegment lpBaseOfImage$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$563.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void lpBaseOfImage$set(MemorySegment seg, long index, MemorySegment x) {
        constants$563.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwDebugInfoFileOffset$VH() {
        return constants$563.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwDebugInfoFileOffset;
     * }
     */
    public static int dwDebugInfoFileOffset$get(MemorySegment seg) {
        return (int)constants$563.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwDebugInfoFileOffset;
     * }
     */
    public static void dwDebugInfoFileOffset$set(MemorySegment seg, int x) {
        constants$563.const$4.set(seg, x);
    }
    public static int dwDebugInfoFileOffset$get(MemorySegment seg, long index) {
        return (int)constants$563.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void dwDebugInfoFileOffset$set(MemorySegment seg, long index, int x) {
        constants$563.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nDebugInfoSize$VH() {
        return constants$563.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD nDebugInfoSize;
     * }
     */
    public static int nDebugInfoSize$get(MemorySegment seg) {
        return (int)constants$563.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD nDebugInfoSize;
     * }
     */
    public static void nDebugInfoSize$set(MemorySegment seg, int x) {
        constants$563.const$5.set(seg, x);
    }
    public static int nDebugInfoSize$get(MemorySegment seg, long index) {
        return (int)constants$563.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void nDebugInfoSize$set(MemorySegment seg, long index, int x) {
        constants$563.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lpThreadLocalBase$VH() {
        return constants$564.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPVOID lpThreadLocalBase;
     * }
     */
    public static MemorySegment lpThreadLocalBase$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$564.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPVOID lpThreadLocalBase;
     * }
     */
    public static void lpThreadLocalBase$set(MemorySegment seg, MemorySegment x) {
        constants$564.const$0.set(seg, x);
    }
    public static MemorySegment lpThreadLocalBase$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$564.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void lpThreadLocalBase$set(MemorySegment seg, long index, MemorySegment x) {
        constants$564.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lpStartAddress$VH() {
        return constants$564.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPTHREAD_START_ROUTINE lpStartAddress;
     * }
     */
    public static MemorySegment lpStartAddress$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$564.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPTHREAD_START_ROUTINE lpStartAddress;
     * }
     */
    public static void lpStartAddress$set(MemorySegment seg, MemorySegment x) {
        constants$564.const$1.set(seg, x);
    }
    public static MemorySegment lpStartAddress$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$564.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void lpStartAddress$set(MemorySegment seg, long index, MemorySegment x) {
        constants$564.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static LPTHREAD_START_ROUTINE lpStartAddress(MemorySegment segment, Arena scope) {
        return LPTHREAD_START_ROUTINE.ofAddress(lpStartAddress$get(segment), scope);
    }
    public static VarHandle lpImageName$VH() {
        return constants$564.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPVOID lpImageName;
     * }
     */
    public static MemorySegment lpImageName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$564.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPVOID lpImageName;
     * }
     */
    public static void lpImageName$set(MemorySegment seg, MemorySegment x) {
        constants$564.const$2.set(seg, x);
    }
    public static MemorySegment lpImageName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$564.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void lpImageName$set(MemorySegment seg, long index, MemorySegment x) {
        constants$564.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle fUnicode$VH() {
        return constants$564.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD fUnicode;
     * }
     */
    public static short fUnicode$get(MemorySegment seg) {
        return (short)constants$564.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD fUnicode;
     * }
     */
    public static void fUnicode$set(MemorySegment seg, short x) {
        constants$564.const$3.set(seg, x);
    }
    public static short fUnicode$get(MemorySegment seg, long index) {
        return (short)constants$564.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void fUnicode$set(MemorySegment seg, long index, short x) {
        constants$564.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



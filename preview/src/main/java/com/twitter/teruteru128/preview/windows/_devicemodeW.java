// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _devicemodeW {
 *     WCHAR dmDeviceName[32];
 *     WORD dmSpecVersion;
 *     WORD dmDriverVersion;
 *     WORD dmSize;
 *     WORD dmDriverExtra;
 *     DWORD dmFields;
 *     union {
 *         struct {
 *             short dmOrientation;
 *             short dmPaperSize;
 *             short dmPaperLength;
 *             short dmPaperWidth;
 *             short dmScale;
 *             short dmCopies;
 *             short dmDefaultSource;
 *             short dmPrintQuality;
 *         };
 *         struct {
 *             POINTL dmPosition;
 *             DWORD dmDisplayOrientation;
 *             DWORD dmDisplayFixedOutput;
 *         };
 *     };
 *     short dmColor;
 *     short dmDuplex;
 *     short dmYResolution;
 *     short dmTTOption;
 *     short dmCollate;
 *     WCHAR dmFormName[32];
 *     WORD dmLogPixels;
 *     DWORD dmBitsPerPel;
 *     DWORD dmPelsWidth;
 *     DWORD dmPelsHeight;
 *     union {
 *         DWORD dmDisplayFlags;
 *         DWORD dmNup;
 *     };
 *     DWORD dmDisplayFrequency;
 *     DWORD dmICMMethod;
 *     DWORD dmICMIntent;
 *     DWORD dmMediaType;
 *     DWORD dmDitherType;
 *     DWORD dmReserved1;
 *     DWORD dmReserved2;
 *     DWORD dmPanningWidth;
 *     DWORD dmPanningHeight;
 * };
 * }
 */
public class _devicemodeW {

    public static MemoryLayout $LAYOUT() {
        return constants$950.const$3;
    }
    public static MemorySegment dmDeviceName$slice(MemorySegment seg) {
        return seg.asSlice(0, 64);
    }
    public static VarHandle dmSpecVersion$VH() {
        return constants$950.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD dmSpecVersion;
     * }
     */
    public static short dmSpecVersion$get(MemorySegment seg) {
        return (short)constants$950.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD dmSpecVersion;
     * }
     */
    public static void dmSpecVersion$set(MemorySegment seg, short x) {
        constants$950.const$4.set(seg, x);
    }
    public static short dmSpecVersion$get(MemorySegment seg, long index) {
        return (short)constants$950.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void dmSpecVersion$set(MemorySegment seg, long index, short x) {
        constants$950.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dmDriverVersion$VH() {
        return constants$950.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD dmDriverVersion;
     * }
     */
    public static short dmDriverVersion$get(MemorySegment seg) {
        return (short)constants$950.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD dmDriverVersion;
     * }
     */
    public static void dmDriverVersion$set(MemorySegment seg, short x) {
        constants$950.const$5.set(seg, x);
    }
    public static short dmDriverVersion$get(MemorySegment seg, long index) {
        return (short)constants$950.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void dmDriverVersion$set(MemorySegment seg, long index, short x) {
        constants$950.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dmSize$VH() {
        return constants$951.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD dmSize;
     * }
     */
    public static short dmSize$get(MemorySegment seg) {
        return (short)constants$951.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD dmSize;
     * }
     */
    public static void dmSize$set(MemorySegment seg, short x) {
        constants$951.const$0.set(seg, x);
    }
    public static short dmSize$get(MemorySegment seg, long index) {
        return (short)constants$951.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void dmSize$set(MemorySegment seg, long index, short x) {
        constants$951.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dmDriverExtra$VH() {
        return constants$951.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD dmDriverExtra;
     * }
     */
    public static short dmDriverExtra$get(MemorySegment seg) {
        return (short)constants$951.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD dmDriverExtra;
     * }
     */
    public static void dmDriverExtra$set(MemorySegment seg, short x) {
        constants$951.const$1.set(seg, x);
    }
    public static short dmDriverExtra$get(MemorySegment seg, long index) {
        return (short)constants$951.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void dmDriverExtra$set(MemorySegment seg, long index, short x) {
        constants$951.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dmFields$VH() {
        return constants$951.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dmFields;
     * }
     */
    public static int dmFields$get(MemorySegment seg) {
        return (int)constants$951.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dmFields;
     * }
     */
    public static void dmFields$set(MemorySegment seg, int x) {
        constants$951.const$2.set(seg, x);
    }
    public static int dmFields$get(MemorySegment seg, long index) {
        return (int)constants$951.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void dmFields$set(MemorySegment seg, long index, int x) {
        constants$951.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dmOrientation$VH() {
        return constants$951.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short dmOrientation;
     * }
     */
    public static short dmOrientation$get(MemorySegment seg) {
        return (short)constants$951.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short dmOrientation;
     * }
     */
    public static void dmOrientation$set(MemorySegment seg, short x) {
        constants$951.const$3.set(seg, x);
    }
    public static short dmOrientation$get(MemorySegment seg, long index) {
        return (short)constants$951.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void dmOrientation$set(MemorySegment seg, long index, short x) {
        constants$951.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dmPaperSize$VH() {
        return constants$951.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short dmPaperSize;
     * }
     */
    public static short dmPaperSize$get(MemorySegment seg) {
        return (short)constants$951.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short dmPaperSize;
     * }
     */
    public static void dmPaperSize$set(MemorySegment seg, short x) {
        constants$951.const$4.set(seg, x);
    }
    public static short dmPaperSize$get(MemorySegment seg, long index) {
        return (short)constants$951.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void dmPaperSize$set(MemorySegment seg, long index, short x) {
        constants$951.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dmPaperLength$VH() {
        return constants$951.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short dmPaperLength;
     * }
     */
    public static short dmPaperLength$get(MemorySegment seg) {
        return (short)constants$951.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short dmPaperLength;
     * }
     */
    public static void dmPaperLength$set(MemorySegment seg, short x) {
        constants$951.const$5.set(seg, x);
    }
    public static short dmPaperLength$get(MemorySegment seg, long index) {
        return (short)constants$951.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void dmPaperLength$set(MemorySegment seg, long index, short x) {
        constants$951.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dmPaperWidth$VH() {
        return constants$952.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short dmPaperWidth;
     * }
     */
    public static short dmPaperWidth$get(MemorySegment seg) {
        return (short)constants$952.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short dmPaperWidth;
     * }
     */
    public static void dmPaperWidth$set(MemorySegment seg, short x) {
        constants$952.const$0.set(seg, x);
    }
    public static short dmPaperWidth$get(MemorySegment seg, long index) {
        return (short)constants$952.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void dmPaperWidth$set(MemorySegment seg, long index, short x) {
        constants$952.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dmScale$VH() {
        return constants$952.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short dmScale;
     * }
     */
    public static short dmScale$get(MemorySegment seg) {
        return (short)constants$952.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short dmScale;
     * }
     */
    public static void dmScale$set(MemorySegment seg, short x) {
        constants$952.const$1.set(seg, x);
    }
    public static short dmScale$get(MemorySegment seg, long index) {
        return (short)constants$952.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void dmScale$set(MemorySegment seg, long index, short x) {
        constants$952.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dmCopies$VH() {
        return constants$952.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short dmCopies;
     * }
     */
    public static short dmCopies$get(MemorySegment seg) {
        return (short)constants$952.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short dmCopies;
     * }
     */
    public static void dmCopies$set(MemorySegment seg, short x) {
        constants$952.const$2.set(seg, x);
    }
    public static short dmCopies$get(MemorySegment seg, long index) {
        return (short)constants$952.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void dmCopies$set(MemorySegment seg, long index, short x) {
        constants$952.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dmDefaultSource$VH() {
        return constants$952.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short dmDefaultSource;
     * }
     */
    public static short dmDefaultSource$get(MemorySegment seg) {
        return (short)constants$952.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short dmDefaultSource;
     * }
     */
    public static void dmDefaultSource$set(MemorySegment seg, short x) {
        constants$952.const$3.set(seg, x);
    }
    public static short dmDefaultSource$get(MemorySegment seg, long index) {
        return (short)constants$952.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void dmDefaultSource$set(MemorySegment seg, long index, short x) {
        constants$952.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dmPrintQuality$VH() {
        return constants$952.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short dmPrintQuality;
     * }
     */
    public static short dmPrintQuality$get(MemorySegment seg) {
        return (short)constants$952.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short dmPrintQuality;
     * }
     */
    public static void dmPrintQuality$set(MemorySegment seg, short x) {
        constants$952.const$4.set(seg, x);
    }
    public static short dmPrintQuality$get(MemorySegment seg, long index) {
        return (short)constants$952.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void dmPrintQuality$set(MemorySegment seg, long index, short x) {
        constants$952.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment dmPosition$slice(MemorySegment seg) {
        return seg.asSlice(76, 8);
    }
    public static VarHandle dmDisplayOrientation$VH() {
        return constants$952.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dmDisplayOrientation;
     * }
     */
    public static int dmDisplayOrientation$get(MemorySegment seg) {
        return (int)constants$952.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dmDisplayOrientation;
     * }
     */
    public static void dmDisplayOrientation$set(MemorySegment seg, int x) {
        constants$952.const$5.set(seg, x);
    }
    public static int dmDisplayOrientation$get(MemorySegment seg, long index) {
        return (int)constants$952.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void dmDisplayOrientation$set(MemorySegment seg, long index, int x) {
        constants$952.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dmDisplayFixedOutput$VH() {
        return constants$953.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dmDisplayFixedOutput;
     * }
     */
    public static int dmDisplayFixedOutput$get(MemorySegment seg) {
        return (int)constants$953.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dmDisplayFixedOutput;
     * }
     */
    public static void dmDisplayFixedOutput$set(MemorySegment seg, int x) {
        constants$953.const$0.set(seg, x);
    }
    public static int dmDisplayFixedOutput$get(MemorySegment seg, long index) {
        return (int)constants$953.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void dmDisplayFixedOutput$set(MemorySegment seg, long index, int x) {
        constants$953.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dmColor$VH() {
        return constants$953.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short dmColor;
     * }
     */
    public static short dmColor$get(MemorySegment seg) {
        return (short)constants$953.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short dmColor;
     * }
     */
    public static void dmColor$set(MemorySegment seg, short x) {
        constants$953.const$1.set(seg, x);
    }
    public static short dmColor$get(MemorySegment seg, long index) {
        return (short)constants$953.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void dmColor$set(MemorySegment seg, long index, short x) {
        constants$953.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dmDuplex$VH() {
        return constants$953.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short dmDuplex;
     * }
     */
    public static short dmDuplex$get(MemorySegment seg) {
        return (short)constants$953.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short dmDuplex;
     * }
     */
    public static void dmDuplex$set(MemorySegment seg, short x) {
        constants$953.const$2.set(seg, x);
    }
    public static short dmDuplex$get(MemorySegment seg, long index) {
        return (short)constants$953.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void dmDuplex$set(MemorySegment seg, long index, short x) {
        constants$953.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dmYResolution$VH() {
        return constants$953.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short dmYResolution;
     * }
     */
    public static short dmYResolution$get(MemorySegment seg) {
        return (short)constants$953.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short dmYResolution;
     * }
     */
    public static void dmYResolution$set(MemorySegment seg, short x) {
        constants$953.const$3.set(seg, x);
    }
    public static short dmYResolution$get(MemorySegment seg, long index) {
        return (short)constants$953.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void dmYResolution$set(MemorySegment seg, long index, short x) {
        constants$953.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dmTTOption$VH() {
        return constants$953.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short dmTTOption;
     * }
     */
    public static short dmTTOption$get(MemorySegment seg) {
        return (short)constants$953.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short dmTTOption;
     * }
     */
    public static void dmTTOption$set(MemorySegment seg, short x) {
        constants$953.const$4.set(seg, x);
    }
    public static short dmTTOption$get(MemorySegment seg, long index) {
        return (short)constants$953.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void dmTTOption$set(MemorySegment seg, long index, short x) {
        constants$953.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dmCollate$VH() {
        return constants$953.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short dmCollate;
     * }
     */
    public static short dmCollate$get(MemorySegment seg) {
        return (short)constants$953.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short dmCollate;
     * }
     */
    public static void dmCollate$set(MemorySegment seg, short x) {
        constants$953.const$5.set(seg, x);
    }
    public static short dmCollate$get(MemorySegment seg, long index) {
        return (short)constants$953.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void dmCollate$set(MemorySegment seg, long index, short x) {
        constants$953.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment dmFormName$slice(MemorySegment seg) {
        return seg.asSlice(102, 64);
    }
    public static VarHandle dmLogPixels$VH() {
        return constants$954.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD dmLogPixels;
     * }
     */
    public static short dmLogPixels$get(MemorySegment seg) {
        return (short)constants$954.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD dmLogPixels;
     * }
     */
    public static void dmLogPixels$set(MemorySegment seg, short x) {
        constants$954.const$0.set(seg, x);
    }
    public static short dmLogPixels$get(MemorySegment seg, long index) {
        return (short)constants$954.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void dmLogPixels$set(MemorySegment seg, long index, short x) {
        constants$954.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dmBitsPerPel$VH() {
        return constants$954.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dmBitsPerPel;
     * }
     */
    public static int dmBitsPerPel$get(MemorySegment seg) {
        return (int)constants$954.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dmBitsPerPel;
     * }
     */
    public static void dmBitsPerPel$set(MemorySegment seg, int x) {
        constants$954.const$1.set(seg, x);
    }
    public static int dmBitsPerPel$get(MemorySegment seg, long index) {
        return (int)constants$954.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void dmBitsPerPel$set(MemorySegment seg, long index, int x) {
        constants$954.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dmPelsWidth$VH() {
        return constants$954.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dmPelsWidth;
     * }
     */
    public static int dmPelsWidth$get(MemorySegment seg) {
        return (int)constants$954.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dmPelsWidth;
     * }
     */
    public static void dmPelsWidth$set(MemorySegment seg, int x) {
        constants$954.const$2.set(seg, x);
    }
    public static int dmPelsWidth$get(MemorySegment seg, long index) {
        return (int)constants$954.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void dmPelsWidth$set(MemorySegment seg, long index, int x) {
        constants$954.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dmPelsHeight$VH() {
        return constants$954.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dmPelsHeight;
     * }
     */
    public static int dmPelsHeight$get(MemorySegment seg) {
        return (int)constants$954.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dmPelsHeight;
     * }
     */
    public static void dmPelsHeight$set(MemorySegment seg, int x) {
        constants$954.const$3.set(seg, x);
    }
    public static int dmPelsHeight$get(MemorySegment seg, long index) {
        return (int)constants$954.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void dmPelsHeight$set(MemorySegment seg, long index, int x) {
        constants$954.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dmDisplayFlags$VH() {
        return constants$954.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dmDisplayFlags;
     * }
     */
    public static int dmDisplayFlags$get(MemorySegment seg) {
        return (int)constants$954.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dmDisplayFlags;
     * }
     */
    public static void dmDisplayFlags$set(MemorySegment seg, int x) {
        constants$954.const$4.set(seg, x);
    }
    public static int dmDisplayFlags$get(MemorySegment seg, long index) {
        return (int)constants$954.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void dmDisplayFlags$set(MemorySegment seg, long index, int x) {
        constants$954.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dmNup$VH() {
        return constants$954.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dmNup;
     * }
     */
    public static int dmNup$get(MemorySegment seg) {
        return (int)constants$954.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dmNup;
     * }
     */
    public static void dmNup$set(MemorySegment seg, int x) {
        constants$954.const$5.set(seg, x);
    }
    public static int dmNup$get(MemorySegment seg, long index) {
        return (int)constants$954.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void dmNup$set(MemorySegment seg, long index, int x) {
        constants$954.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dmDisplayFrequency$VH() {
        return constants$955.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dmDisplayFrequency;
     * }
     */
    public static int dmDisplayFrequency$get(MemorySegment seg) {
        return (int)constants$955.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dmDisplayFrequency;
     * }
     */
    public static void dmDisplayFrequency$set(MemorySegment seg, int x) {
        constants$955.const$0.set(seg, x);
    }
    public static int dmDisplayFrequency$get(MemorySegment seg, long index) {
        return (int)constants$955.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void dmDisplayFrequency$set(MemorySegment seg, long index, int x) {
        constants$955.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dmICMMethod$VH() {
        return constants$955.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dmICMMethod;
     * }
     */
    public static int dmICMMethod$get(MemorySegment seg) {
        return (int)constants$955.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dmICMMethod;
     * }
     */
    public static void dmICMMethod$set(MemorySegment seg, int x) {
        constants$955.const$1.set(seg, x);
    }
    public static int dmICMMethod$get(MemorySegment seg, long index) {
        return (int)constants$955.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void dmICMMethod$set(MemorySegment seg, long index, int x) {
        constants$955.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dmICMIntent$VH() {
        return constants$955.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dmICMIntent;
     * }
     */
    public static int dmICMIntent$get(MemorySegment seg) {
        return (int)constants$955.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dmICMIntent;
     * }
     */
    public static void dmICMIntent$set(MemorySegment seg, int x) {
        constants$955.const$2.set(seg, x);
    }
    public static int dmICMIntent$get(MemorySegment seg, long index) {
        return (int)constants$955.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void dmICMIntent$set(MemorySegment seg, long index, int x) {
        constants$955.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dmMediaType$VH() {
        return constants$955.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dmMediaType;
     * }
     */
    public static int dmMediaType$get(MemorySegment seg) {
        return (int)constants$955.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dmMediaType;
     * }
     */
    public static void dmMediaType$set(MemorySegment seg, int x) {
        constants$955.const$3.set(seg, x);
    }
    public static int dmMediaType$get(MemorySegment seg, long index) {
        return (int)constants$955.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void dmMediaType$set(MemorySegment seg, long index, int x) {
        constants$955.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dmDitherType$VH() {
        return constants$955.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dmDitherType;
     * }
     */
    public static int dmDitherType$get(MemorySegment seg) {
        return (int)constants$955.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dmDitherType;
     * }
     */
    public static void dmDitherType$set(MemorySegment seg, int x) {
        constants$955.const$4.set(seg, x);
    }
    public static int dmDitherType$get(MemorySegment seg, long index) {
        return (int)constants$955.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void dmDitherType$set(MemorySegment seg, long index, int x) {
        constants$955.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dmReserved1$VH() {
        return constants$955.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dmReserved1;
     * }
     */
    public static int dmReserved1$get(MemorySegment seg) {
        return (int)constants$955.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dmReserved1;
     * }
     */
    public static void dmReserved1$set(MemorySegment seg, int x) {
        constants$955.const$5.set(seg, x);
    }
    public static int dmReserved1$get(MemorySegment seg, long index) {
        return (int)constants$955.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void dmReserved1$set(MemorySegment seg, long index, int x) {
        constants$955.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dmReserved2$VH() {
        return constants$956.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dmReserved2;
     * }
     */
    public static int dmReserved2$get(MemorySegment seg) {
        return (int)constants$956.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dmReserved2;
     * }
     */
    public static void dmReserved2$set(MemorySegment seg, int x) {
        constants$956.const$0.set(seg, x);
    }
    public static int dmReserved2$get(MemorySegment seg, long index) {
        return (int)constants$956.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void dmReserved2$set(MemorySegment seg, long index, int x) {
        constants$956.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dmPanningWidth$VH() {
        return constants$956.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dmPanningWidth;
     * }
     */
    public static int dmPanningWidth$get(MemorySegment seg) {
        return (int)constants$956.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dmPanningWidth;
     * }
     */
    public static void dmPanningWidth$set(MemorySegment seg, int x) {
        constants$956.const$1.set(seg, x);
    }
    public static int dmPanningWidth$get(MemorySegment seg, long index) {
        return (int)constants$956.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void dmPanningWidth$set(MemorySegment seg, long index, int x) {
        constants$956.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dmPanningHeight$VH() {
        return constants$956.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dmPanningHeight;
     * }
     */
    public static int dmPanningHeight$get(MemorySegment seg) {
        return (int)constants$956.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dmPanningHeight;
     * }
     */
    public static void dmPanningHeight$set(MemorySegment seg, int x) {
        constants$956.const$2.set(seg, x);
    }
    public static int dmPanningHeight$get(MemorySegment seg, long index) {
        return (int)constants$956.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void dmPanningHeight$set(MemorySegment seg, long index, int x) {
        constants$956.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



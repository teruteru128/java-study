// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * unsigned long (*LPPROGRESS_ROUTINE)(union _LARGE_INTEGER TotalFileSize,union _LARGE_INTEGER TotalBytesTransferred,union _LARGE_INTEGER StreamSize,union _LARGE_INTEGER StreamBytesTransferred,unsigned long dwStreamNumber,unsigned long dwCallbackReason,void* hSourceFile,void* hDestinationFile,void* lpData);
 * }
 */
public interface LPPROGRESS_ROUTINE {

    int apply(java.lang.foreign.MemorySegment TotalFileSize, java.lang.foreign.MemorySegment TotalBytesTransferred, java.lang.foreign.MemorySegment StreamSize, java.lang.foreign.MemorySegment StreamBytesTransferred, int dwStreamNumber, int dwCallbackReason, java.lang.foreign.MemorySegment hSourceFile, java.lang.foreign.MemorySegment hDestinationFile, java.lang.foreign.MemorySegment lpData);
    static MemorySegment allocate(LPPROGRESS_ROUTINE fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$807.const$0, fi, constants$806.const$5, scope);
    }
    static LPPROGRESS_ROUTINE ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (java.lang.foreign.MemorySegment _TotalFileSize, java.lang.foreign.MemorySegment _TotalBytesTransferred, java.lang.foreign.MemorySegment _StreamSize, java.lang.foreign.MemorySegment _StreamBytesTransferred, int _dwStreamNumber, int _dwCallbackReason, java.lang.foreign.MemorySegment _hSourceFile, java.lang.foreign.MemorySegment _hDestinationFile, java.lang.foreign.MemorySegment _lpData) -> {
            try {
                return (int)constants$807.const$1.invokeExact(symbol, _TotalFileSize, _TotalBytesTransferred, _StreamSize, _StreamBytesTransferred, _dwStreamNumber, _dwCallbackReason, _hSourceFile, _hDestinationFile, _lpData);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}



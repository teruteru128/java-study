// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _CERT_PHYSICAL_STORE_INFO {
 *     DWORD cbSize;
 *     LPSTR pszOpenStoreProvider;
 *     DWORD dwOpenEncodingType;
 *     DWORD dwOpenFlags;
 *     CRYPT_DATA_BLOB OpenParameters;
 *     DWORD dwFlags;
 *     DWORD dwPriority;
 * };
 * }
 */
public class _CERT_PHYSICAL_STORE_INFO {

    public static MemoryLayout $LAYOUT() {
        return constants$2149.const$1;
    }
    public static VarHandle cbSize$VH() {
        return constants$2149.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD cbSize;
     * }
     */
    public static int cbSize$get(MemorySegment seg) {
        return (int)constants$2149.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD cbSize;
     * }
     */
    public static void cbSize$set(MemorySegment seg, int x) {
        constants$2149.const$2.set(seg, x);
    }
    public static int cbSize$get(MemorySegment seg, long index) {
        return (int)constants$2149.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void cbSize$set(MemorySegment seg, long index, int x) {
        constants$2149.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pszOpenStoreProvider$VH() {
        return constants$2149.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPSTR pszOpenStoreProvider;
     * }
     */
    public static MemorySegment pszOpenStoreProvider$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2149.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPSTR pszOpenStoreProvider;
     * }
     */
    public static void pszOpenStoreProvider$set(MemorySegment seg, MemorySegment x) {
        constants$2149.const$3.set(seg, x);
    }
    public static MemorySegment pszOpenStoreProvider$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2149.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void pszOpenStoreProvider$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2149.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwOpenEncodingType$VH() {
        return constants$2149.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwOpenEncodingType;
     * }
     */
    public static int dwOpenEncodingType$get(MemorySegment seg) {
        return (int)constants$2149.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwOpenEncodingType;
     * }
     */
    public static void dwOpenEncodingType$set(MemorySegment seg, int x) {
        constants$2149.const$4.set(seg, x);
    }
    public static int dwOpenEncodingType$get(MemorySegment seg, long index) {
        return (int)constants$2149.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void dwOpenEncodingType$set(MemorySegment seg, long index, int x) {
        constants$2149.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwOpenFlags$VH() {
        return constants$2149.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwOpenFlags;
     * }
     */
    public static int dwOpenFlags$get(MemorySegment seg) {
        return (int)constants$2149.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwOpenFlags;
     * }
     */
    public static void dwOpenFlags$set(MemorySegment seg, int x) {
        constants$2149.const$5.set(seg, x);
    }
    public static int dwOpenFlags$get(MemorySegment seg, long index) {
        return (int)constants$2149.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void dwOpenFlags$set(MemorySegment seg, long index, int x) {
        constants$2149.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment OpenParameters$slice(MemorySegment seg) {
        return seg.asSlice(24, 16);
    }
    public static VarHandle dwFlags$VH() {
        return constants$2150.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwFlags;
     * }
     */
    public static int dwFlags$get(MemorySegment seg) {
        return (int)constants$2150.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwFlags;
     * }
     */
    public static void dwFlags$set(MemorySegment seg, int x) {
        constants$2150.const$0.set(seg, x);
    }
    public static int dwFlags$get(MemorySegment seg, long index) {
        return (int)constants$2150.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void dwFlags$set(MemorySegment seg, long index, int x) {
        constants$2150.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwPriority$VH() {
        return constants$2150.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwPriority;
     * }
     */
    public static int dwPriority$get(MemorySegment seg) {
        return (int)constants$2150.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwPriority;
     * }
     */
    public static void dwPriority$set(MemorySegment seg, int x) {
        constants$2150.const$1.set(seg, x);
    }
    public static int dwPriority$get(MemorySegment seg, long index) {
        return (int)constants$2150.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void dwPriority$set(MemorySegment seg, long index, int x) {
        constants$2150.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



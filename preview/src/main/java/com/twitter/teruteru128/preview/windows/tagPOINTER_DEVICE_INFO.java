// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tagPOINTER_DEVICE_INFO {
 *     DWORD displayOrientation;
 *     HANDLE device;
 *     POINTER_DEVICE_TYPE pointerDeviceType;
 *     HMONITOR monitor;
 *     ULONG startingCursorId;
 *     USHORT maxActiveContacts;
 *     WCHAR productString[520];
 * };
 * }
 */
public class tagPOINTER_DEVICE_INFO {

    public static MemoryLayout $LAYOUT() {
        return constants$1395.const$5;
    }
    public static VarHandle displayOrientation$VH() {
        return constants$1396.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD displayOrientation;
     * }
     */
    public static int displayOrientation$get(MemorySegment seg) {
        return (int)constants$1396.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD displayOrientation;
     * }
     */
    public static void displayOrientation$set(MemorySegment seg, int x) {
        constants$1396.const$0.set(seg, x);
    }
    public static int displayOrientation$get(MemorySegment seg, long index) {
        return (int)constants$1396.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void displayOrientation$set(MemorySegment seg, long index, int x) {
        constants$1396.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle device$VH() {
        return constants$1396.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HANDLE device;
     * }
     */
    public static MemorySegment device$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1396.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HANDLE device;
     * }
     */
    public static void device$set(MemorySegment seg, MemorySegment x) {
        constants$1396.const$1.set(seg, x);
    }
    public static MemorySegment device$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1396.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void device$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1396.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pointerDeviceType$VH() {
        return constants$1396.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * POINTER_DEVICE_TYPE pointerDeviceType;
     * }
     */
    public static int pointerDeviceType$get(MemorySegment seg) {
        return (int)constants$1396.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * POINTER_DEVICE_TYPE pointerDeviceType;
     * }
     */
    public static void pointerDeviceType$set(MemorySegment seg, int x) {
        constants$1396.const$2.set(seg, x);
    }
    public static int pointerDeviceType$get(MemorySegment seg, long index) {
        return (int)constants$1396.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void pointerDeviceType$set(MemorySegment seg, long index, int x) {
        constants$1396.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle monitor$VH() {
        return constants$1396.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HMONITOR monitor;
     * }
     */
    public static MemorySegment monitor$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1396.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HMONITOR monitor;
     * }
     */
    public static void monitor$set(MemorySegment seg, MemorySegment x) {
        constants$1396.const$3.set(seg, x);
    }
    public static MemorySegment monitor$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1396.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void monitor$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1396.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle startingCursorId$VH() {
        return constants$1396.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG startingCursorId;
     * }
     */
    public static int startingCursorId$get(MemorySegment seg) {
        return (int)constants$1396.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG startingCursorId;
     * }
     */
    public static void startingCursorId$set(MemorySegment seg, int x) {
        constants$1396.const$4.set(seg, x);
    }
    public static int startingCursorId$get(MemorySegment seg, long index) {
        return (int)constants$1396.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void startingCursorId$set(MemorySegment seg, long index, int x) {
        constants$1396.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxActiveContacts$VH() {
        return constants$1396.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * USHORT maxActiveContacts;
     * }
     */
    public static short maxActiveContacts$get(MemorySegment seg) {
        return (short)constants$1396.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * USHORT maxActiveContacts;
     * }
     */
    public static void maxActiveContacts$set(MemorySegment seg, short x) {
        constants$1396.const$5.set(seg, x);
    }
    public static short maxActiveContacts$get(MemorySegment seg, long index) {
        return (short)constants$1396.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void maxActiveContacts$set(MemorySegment seg, long index, short x) {
        constants$1396.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment productString$slice(MemorySegment seg) {
        return seg.asSlice(38, 1040);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



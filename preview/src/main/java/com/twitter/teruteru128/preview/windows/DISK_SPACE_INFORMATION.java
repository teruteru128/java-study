// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct DISK_SPACE_INFORMATION {
 *     ULONGLONG ActualTotalAllocationUnits;
 *     ULONGLONG ActualAvailableAllocationUnits;
 *     ULONGLONG ActualPoolUnavailableAllocationUnits;
 *     ULONGLONG CallerTotalAllocationUnits;
 *     ULONGLONG CallerAvailableAllocationUnits;
 *     ULONGLONG CallerPoolUnavailableAllocationUnits;
 *     ULONGLONG UsedAllocationUnits;
 *     ULONGLONG TotalReservedAllocationUnits;
 *     ULONGLONG VolumeStorageReserveAllocationUnits;
 *     ULONGLONG AvailableCommittedAllocationUnits;
 *     ULONGLONG PoolAvailableAllocationUnits;
 *     DWORD SectorsPerAllocationUnit;
 *     DWORD BytesPerSector;
 * };
 * }
 */
public class DISK_SPACE_INFORMATION {

    public static MemoryLayout $LAYOUT() {
        return constants$578.const$3;
    }
    public static VarHandle ActualTotalAllocationUnits$VH() {
        return constants$578.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONGLONG ActualTotalAllocationUnits;
     * }
     */
    public static long ActualTotalAllocationUnits$get(MemorySegment seg) {
        return (long)constants$578.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONGLONG ActualTotalAllocationUnits;
     * }
     */
    public static void ActualTotalAllocationUnits$set(MemorySegment seg, long x) {
        constants$578.const$4.set(seg, x);
    }
    public static long ActualTotalAllocationUnits$get(MemorySegment seg, long index) {
        return (long)constants$578.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void ActualTotalAllocationUnits$set(MemorySegment seg, long index, long x) {
        constants$578.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ActualAvailableAllocationUnits$VH() {
        return constants$578.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONGLONG ActualAvailableAllocationUnits;
     * }
     */
    public static long ActualAvailableAllocationUnits$get(MemorySegment seg) {
        return (long)constants$578.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONGLONG ActualAvailableAllocationUnits;
     * }
     */
    public static void ActualAvailableAllocationUnits$set(MemorySegment seg, long x) {
        constants$578.const$5.set(seg, x);
    }
    public static long ActualAvailableAllocationUnits$get(MemorySegment seg, long index) {
        return (long)constants$578.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void ActualAvailableAllocationUnits$set(MemorySegment seg, long index, long x) {
        constants$578.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ActualPoolUnavailableAllocationUnits$VH() {
        return constants$579.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONGLONG ActualPoolUnavailableAllocationUnits;
     * }
     */
    public static long ActualPoolUnavailableAllocationUnits$get(MemorySegment seg) {
        return (long)constants$579.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONGLONG ActualPoolUnavailableAllocationUnits;
     * }
     */
    public static void ActualPoolUnavailableAllocationUnits$set(MemorySegment seg, long x) {
        constants$579.const$0.set(seg, x);
    }
    public static long ActualPoolUnavailableAllocationUnits$get(MemorySegment seg, long index) {
        return (long)constants$579.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void ActualPoolUnavailableAllocationUnits$set(MemorySegment seg, long index, long x) {
        constants$579.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle CallerTotalAllocationUnits$VH() {
        return constants$579.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONGLONG CallerTotalAllocationUnits;
     * }
     */
    public static long CallerTotalAllocationUnits$get(MemorySegment seg) {
        return (long)constants$579.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONGLONG CallerTotalAllocationUnits;
     * }
     */
    public static void CallerTotalAllocationUnits$set(MemorySegment seg, long x) {
        constants$579.const$1.set(seg, x);
    }
    public static long CallerTotalAllocationUnits$get(MemorySegment seg, long index) {
        return (long)constants$579.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void CallerTotalAllocationUnits$set(MemorySegment seg, long index, long x) {
        constants$579.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle CallerAvailableAllocationUnits$VH() {
        return constants$579.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONGLONG CallerAvailableAllocationUnits;
     * }
     */
    public static long CallerAvailableAllocationUnits$get(MemorySegment seg) {
        return (long)constants$579.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONGLONG CallerAvailableAllocationUnits;
     * }
     */
    public static void CallerAvailableAllocationUnits$set(MemorySegment seg, long x) {
        constants$579.const$2.set(seg, x);
    }
    public static long CallerAvailableAllocationUnits$get(MemorySegment seg, long index) {
        return (long)constants$579.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void CallerAvailableAllocationUnits$set(MemorySegment seg, long index, long x) {
        constants$579.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle CallerPoolUnavailableAllocationUnits$VH() {
        return constants$579.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONGLONG CallerPoolUnavailableAllocationUnits;
     * }
     */
    public static long CallerPoolUnavailableAllocationUnits$get(MemorySegment seg) {
        return (long)constants$579.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONGLONG CallerPoolUnavailableAllocationUnits;
     * }
     */
    public static void CallerPoolUnavailableAllocationUnits$set(MemorySegment seg, long x) {
        constants$579.const$3.set(seg, x);
    }
    public static long CallerPoolUnavailableAllocationUnits$get(MemorySegment seg, long index) {
        return (long)constants$579.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void CallerPoolUnavailableAllocationUnits$set(MemorySegment seg, long index, long x) {
        constants$579.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle UsedAllocationUnits$VH() {
        return constants$579.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONGLONG UsedAllocationUnits;
     * }
     */
    public static long UsedAllocationUnits$get(MemorySegment seg) {
        return (long)constants$579.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONGLONG UsedAllocationUnits;
     * }
     */
    public static void UsedAllocationUnits$set(MemorySegment seg, long x) {
        constants$579.const$4.set(seg, x);
    }
    public static long UsedAllocationUnits$get(MemorySegment seg, long index) {
        return (long)constants$579.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void UsedAllocationUnits$set(MemorySegment seg, long index, long x) {
        constants$579.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle TotalReservedAllocationUnits$VH() {
        return constants$579.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONGLONG TotalReservedAllocationUnits;
     * }
     */
    public static long TotalReservedAllocationUnits$get(MemorySegment seg) {
        return (long)constants$579.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONGLONG TotalReservedAllocationUnits;
     * }
     */
    public static void TotalReservedAllocationUnits$set(MemorySegment seg, long x) {
        constants$579.const$5.set(seg, x);
    }
    public static long TotalReservedAllocationUnits$get(MemorySegment seg, long index) {
        return (long)constants$579.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void TotalReservedAllocationUnits$set(MemorySegment seg, long index, long x) {
        constants$579.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle VolumeStorageReserveAllocationUnits$VH() {
        return constants$580.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONGLONG VolumeStorageReserveAllocationUnits;
     * }
     */
    public static long VolumeStorageReserveAllocationUnits$get(MemorySegment seg) {
        return (long)constants$580.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONGLONG VolumeStorageReserveAllocationUnits;
     * }
     */
    public static void VolumeStorageReserveAllocationUnits$set(MemorySegment seg, long x) {
        constants$580.const$0.set(seg, x);
    }
    public static long VolumeStorageReserveAllocationUnits$get(MemorySegment seg, long index) {
        return (long)constants$580.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void VolumeStorageReserveAllocationUnits$set(MemorySegment seg, long index, long x) {
        constants$580.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle AvailableCommittedAllocationUnits$VH() {
        return constants$580.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONGLONG AvailableCommittedAllocationUnits;
     * }
     */
    public static long AvailableCommittedAllocationUnits$get(MemorySegment seg) {
        return (long)constants$580.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONGLONG AvailableCommittedAllocationUnits;
     * }
     */
    public static void AvailableCommittedAllocationUnits$set(MemorySegment seg, long x) {
        constants$580.const$1.set(seg, x);
    }
    public static long AvailableCommittedAllocationUnits$get(MemorySegment seg, long index) {
        return (long)constants$580.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void AvailableCommittedAllocationUnits$set(MemorySegment seg, long index, long x) {
        constants$580.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle PoolAvailableAllocationUnits$VH() {
        return constants$580.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONGLONG PoolAvailableAllocationUnits;
     * }
     */
    public static long PoolAvailableAllocationUnits$get(MemorySegment seg) {
        return (long)constants$580.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONGLONG PoolAvailableAllocationUnits;
     * }
     */
    public static void PoolAvailableAllocationUnits$set(MemorySegment seg, long x) {
        constants$580.const$2.set(seg, x);
    }
    public static long PoolAvailableAllocationUnits$get(MemorySegment seg, long index) {
        return (long)constants$580.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void PoolAvailableAllocationUnits$set(MemorySegment seg, long index, long x) {
        constants$580.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle SectorsPerAllocationUnit$VH() {
        return constants$580.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD SectorsPerAllocationUnit;
     * }
     */
    public static int SectorsPerAllocationUnit$get(MemorySegment seg) {
        return (int)constants$580.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD SectorsPerAllocationUnit;
     * }
     */
    public static void SectorsPerAllocationUnit$set(MemorySegment seg, int x) {
        constants$580.const$3.set(seg, x);
    }
    public static int SectorsPerAllocationUnit$get(MemorySegment seg, long index) {
        return (int)constants$580.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void SectorsPerAllocationUnit$set(MemorySegment seg, long index, int x) {
        constants$580.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle BytesPerSector$VH() {
        return constants$580.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD BytesPerSector;
     * }
     */
    public static int BytesPerSector$get(MemorySegment seg) {
        return (int)constants$580.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD BytesPerSector;
     * }
     */
    public static void BytesPerSector$set(MemorySegment seg, int x) {
        constants$580.const$4.set(seg, x);
    }
    public static int BytesPerSector$get(MemorySegment seg, long index) {
        return (int)constants$580.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void BytesPerSector$set(MemorySegment seg, long index, int x) {
        constants$580.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _IMAGE_EXPORT_DIRECTORY {
 *     DWORD Characteristics;
 *     DWORD TimeDateStamp;
 *     WORD MajorVersion;
 *     WORD MinorVersion;
 *     DWORD Name;
 *     DWORD Base;
 *     DWORD NumberOfFunctions;
 *     DWORD NumberOfNames;
 *     DWORD AddressOfFunctions;
 *     DWORD AddressOfNames;
 *     DWORD AddressOfNameOrdinals;
 * };
 * }
 */
public class _IMAGE_EXPORT_DIRECTORY {

    public static MemoryLayout $LAYOUT() {
        return constants$402.const$1;
    }
    public static VarHandle Characteristics$VH() {
        return constants$402.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Characteristics;
     * }
     */
    public static int Characteristics$get(MemorySegment seg) {
        return (int)constants$402.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Characteristics;
     * }
     */
    public static void Characteristics$set(MemorySegment seg, int x) {
        constants$402.const$2.set(seg, x);
    }
    public static int Characteristics$get(MemorySegment seg, long index) {
        return (int)constants$402.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void Characteristics$set(MemorySegment seg, long index, int x) {
        constants$402.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle TimeDateStamp$VH() {
        return constants$402.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD TimeDateStamp;
     * }
     */
    public static int TimeDateStamp$get(MemorySegment seg) {
        return (int)constants$402.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD TimeDateStamp;
     * }
     */
    public static void TimeDateStamp$set(MemorySegment seg, int x) {
        constants$402.const$3.set(seg, x);
    }
    public static int TimeDateStamp$get(MemorySegment seg, long index) {
        return (int)constants$402.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void TimeDateStamp$set(MemorySegment seg, long index, int x) {
        constants$402.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MajorVersion$VH() {
        return constants$402.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD MajorVersion;
     * }
     */
    public static short MajorVersion$get(MemorySegment seg) {
        return (short)constants$402.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD MajorVersion;
     * }
     */
    public static void MajorVersion$set(MemorySegment seg, short x) {
        constants$402.const$4.set(seg, x);
    }
    public static short MajorVersion$get(MemorySegment seg, long index) {
        return (short)constants$402.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void MajorVersion$set(MemorySegment seg, long index, short x) {
        constants$402.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MinorVersion$VH() {
        return constants$402.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD MinorVersion;
     * }
     */
    public static short MinorVersion$get(MemorySegment seg) {
        return (short)constants$402.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD MinorVersion;
     * }
     */
    public static void MinorVersion$set(MemorySegment seg, short x) {
        constants$402.const$5.set(seg, x);
    }
    public static short MinorVersion$get(MemorySegment seg, long index) {
        return (short)constants$402.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void MinorVersion$set(MemorySegment seg, long index, short x) {
        constants$402.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Name$VH() {
        return constants$403.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Name;
     * }
     */
    public static int Name$get(MemorySegment seg) {
        return (int)constants$403.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Name;
     * }
     */
    public static void Name$set(MemorySegment seg, int x) {
        constants$403.const$0.set(seg, x);
    }
    public static int Name$get(MemorySegment seg, long index) {
        return (int)constants$403.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Name$set(MemorySegment seg, long index, int x) {
        constants$403.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Base$VH() {
        return constants$403.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Base;
     * }
     */
    public static int Base$get(MemorySegment seg) {
        return (int)constants$403.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Base;
     * }
     */
    public static void Base$set(MemorySegment seg, int x) {
        constants$403.const$1.set(seg, x);
    }
    public static int Base$get(MemorySegment seg, long index) {
        return (int)constants$403.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void Base$set(MemorySegment seg, long index, int x) {
        constants$403.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle NumberOfFunctions$VH() {
        return constants$403.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD NumberOfFunctions;
     * }
     */
    public static int NumberOfFunctions$get(MemorySegment seg) {
        return (int)constants$403.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD NumberOfFunctions;
     * }
     */
    public static void NumberOfFunctions$set(MemorySegment seg, int x) {
        constants$403.const$2.set(seg, x);
    }
    public static int NumberOfFunctions$get(MemorySegment seg, long index) {
        return (int)constants$403.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void NumberOfFunctions$set(MemorySegment seg, long index, int x) {
        constants$403.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle NumberOfNames$VH() {
        return constants$403.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD NumberOfNames;
     * }
     */
    public static int NumberOfNames$get(MemorySegment seg) {
        return (int)constants$403.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD NumberOfNames;
     * }
     */
    public static void NumberOfNames$set(MemorySegment seg, int x) {
        constants$403.const$3.set(seg, x);
    }
    public static int NumberOfNames$get(MemorySegment seg, long index) {
        return (int)constants$403.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void NumberOfNames$set(MemorySegment seg, long index, int x) {
        constants$403.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle AddressOfFunctions$VH() {
        return constants$403.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD AddressOfFunctions;
     * }
     */
    public static int AddressOfFunctions$get(MemorySegment seg) {
        return (int)constants$403.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD AddressOfFunctions;
     * }
     */
    public static void AddressOfFunctions$set(MemorySegment seg, int x) {
        constants$403.const$4.set(seg, x);
    }
    public static int AddressOfFunctions$get(MemorySegment seg, long index) {
        return (int)constants$403.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void AddressOfFunctions$set(MemorySegment seg, long index, int x) {
        constants$403.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle AddressOfNames$VH() {
        return constants$403.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD AddressOfNames;
     * }
     */
    public static int AddressOfNames$get(MemorySegment seg) {
        return (int)constants$403.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD AddressOfNames;
     * }
     */
    public static void AddressOfNames$set(MemorySegment seg, int x) {
        constants$403.const$5.set(seg, x);
    }
    public static int AddressOfNames$get(MemorySegment seg, long index) {
        return (int)constants$403.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void AddressOfNames$set(MemorySegment seg, long index, int x) {
        constants$403.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle AddressOfNameOrdinals$VH() {
        return constants$404.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD AddressOfNameOrdinals;
     * }
     */
    public static int AddressOfNameOrdinals$get(MemorySegment seg) {
        return (int)constants$404.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD AddressOfNameOrdinals;
     * }
     */
    public static void AddressOfNameOrdinals$set(MemorySegment seg, int x) {
        constants$404.const$0.set(seg, x);
    }
    public static int AddressOfNameOrdinals$get(MemorySegment seg, long index) {
        return (int)constants$404.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void AddressOfNameOrdinals$set(MemorySegment seg, long index, int x) {
        constants$404.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD {
 *     BYTE Cdb[16];
 *     BYTE Command[16];
 *     DWORDLONG StartTime;
 *     DWORDLONG EndTime;
 *     DWORD OperationStatus;
 *     DWORD OperationError;
 *     union  StackSpecific;
 * };
 * }
 */
public class _DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD {

    public static MemoryLayout $LAYOUT() {
        return constants$2485.const$3;
    }
    public static MemorySegment Cdb$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    public static MemorySegment Command$slice(MemorySegment seg) {
        return seg.asSlice(16, 16);
    }
    public static VarHandle StartTime$VH() {
        return constants$2485.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORDLONG StartTime;
     * }
     */
    public static long StartTime$get(MemorySegment seg) {
        return (long)constants$2485.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORDLONG StartTime;
     * }
     */
    public static void StartTime$set(MemorySegment seg, long x) {
        constants$2485.const$4.set(seg, x);
    }
    public static long StartTime$get(MemorySegment seg, long index) {
        return (long)constants$2485.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void StartTime$set(MemorySegment seg, long index, long x) {
        constants$2485.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle EndTime$VH() {
        return constants$2485.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORDLONG EndTime;
     * }
     */
    public static long EndTime$get(MemorySegment seg) {
        return (long)constants$2485.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORDLONG EndTime;
     * }
     */
    public static void EndTime$set(MemorySegment seg, long x) {
        constants$2485.const$5.set(seg, x);
    }
    public static long EndTime$get(MemorySegment seg, long index) {
        return (long)constants$2485.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void EndTime$set(MemorySegment seg, long index, long x) {
        constants$2485.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle OperationStatus$VH() {
        return constants$2486.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD OperationStatus;
     * }
     */
    public static int OperationStatus$get(MemorySegment seg) {
        return (int)constants$2486.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD OperationStatus;
     * }
     */
    public static void OperationStatus$set(MemorySegment seg, int x) {
        constants$2486.const$0.set(seg, x);
    }
    public static int OperationStatus$get(MemorySegment seg, long index) {
        return (int)constants$2486.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void OperationStatus$set(MemorySegment seg, long index, int x) {
        constants$2486.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle OperationError$VH() {
        return constants$2486.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD OperationError;
     * }
     */
    public static int OperationError$get(MemorySegment seg) {
        return (int)constants$2486.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD OperationError;
     * }
     */
    public static void OperationError$set(MemorySegment seg, int x) {
        constants$2486.const$1.set(seg, x);
    }
    public static int OperationError$get(MemorySegment seg, long index) {
        return (int)constants$2486.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void OperationError$set(MemorySegment seg, long index, int x) {
        constants$2486.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
     * union {
     *     struct  ExternalStack;
     *     struct  AtaPort;
     *     struct  StorPort;
     * };
     * }
     */
    public static final class StackSpecific {

        // Suppresses default constructor, ensuring non-instantiability.
        private StackSpecific() {}
        public static MemoryLayout $LAYOUT() {
            return constants$2486.const$2;
        }
        /**
         * {@snippet :
         * struct {
         *     DWORD dwReserved;
         * };
         * }
         */
        public static final class ExternalStack {

            // Suppresses default constructor, ensuring non-instantiability.
            private ExternalStack() {}
            public static MemoryLayout $LAYOUT() {
                return constants$2486.const$3;
            }
            public static VarHandle dwReserved$VH() {
                return constants$2486.const$4;
            }
            /**
             * Getter for field:
             * {@snippet :
             * DWORD dwReserved;
             * }
             */
            public static int dwReserved$get(MemorySegment seg) {
                return (int)constants$2486.const$4.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * DWORD dwReserved;
             * }
             */
            public static void dwReserved$set(MemorySegment seg, int x) {
                constants$2486.const$4.set(seg, x);
            }
            public static int dwReserved$get(MemorySegment seg, long index) {
                return (int)constants$2486.const$4.get(seg.asSlice(index*sizeof()));
            }
            public static void dwReserved$set(MemorySegment seg, long index, int x) {
                constants$2486.const$4.set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
        }

        public static MemorySegment ExternalStack$slice(MemorySegment seg) {
            return seg.asSlice(0, 4);
        }
        /**
         * {@snippet :
         * struct {
         *     DWORD dwAtaPortSpecific;
         * };
         * }
         */
        public static final class AtaPort {

            // Suppresses default constructor, ensuring non-instantiability.
            private AtaPort() {}
            public static MemoryLayout $LAYOUT() {
                return constants$2486.const$5;
            }
            public static VarHandle dwAtaPortSpecific$VH() {
                return constants$2487.const$0;
            }
            /**
             * Getter for field:
             * {@snippet :
             * DWORD dwAtaPortSpecific;
             * }
             */
            public static int dwAtaPortSpecific$get(MemorySegment seg) {
                return (int)constants$2487.const$0.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * DWORD dwAtaPortSpecific;
             * }
             */
            public static void dwAtaPortSpecific$set(MemorySegment seg, int x) {
                constants$2487.const$0.set(seg, x);
            }
            public static int dwAtaPortSpecific$get(MemorySegment seg, long index) {
                return (int)constants$2487.const$0.get(seg.asSlice(index*sizeof()));
            }
            public static void dwAtaPortSpecific$set(MemorySegment seg, long index, int x) {
                constants$2487.const$0.set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
        }

        public static MemorySegment AtaPort$slice(MemorySegment seg) {
            return seg.asSlice(0, 4);
        }
        /**
         * {@snippet :
         * struct {
         *     DWORD SrbTag;
         * };
         * }
         */
        public static final class StorPort {

            // Suppresses default constructor, ensuring non-instantiability.
            private StorPort() {}
            public static MemoryLayout $LAYOUT() {
                return constants$2487.const$1;
            }
            public static VarHandle SrbTag$VH() {
                return constants$2487.const$2;
            }
            /**
             * Getter for field:
             * {@snippet :
             * DWORD SrbTag;
             * }
             */
            public static int SrbTag$get(MemorySegment seg) {
                return (int)constants$2487.const$2.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * DWORD SrbTag;
             * }
             */
            public static void SrbTag$set(MemorySegment seg, int x) {
                constants$2487.const$2.set(seg, x);
            }
            public static int SrbTag$get(MemorySegment seg, long index) {
                return (int)constants$2487.const$2.get(seg.asSlice(index*sizeof()));
            }
            public static void SrbTag$set(MemorySegment seg, long index, int x) {
                constants$2487.const$2.set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
        }

        public static MemorySegment StorPort$slice(MemorySegment seg) {
            return seg.asSlice(0, 4);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment StackSpecific$slice(MemorySegment seg) {
        return seg.asSlice(56, 4);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



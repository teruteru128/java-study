// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct DISPLAYCONFIG_SOURCE_MODE {
 *     UINT32 width;
 *     UINT32 height;
 *     DISPLAYCONFIG_PIXELFORMAT pixelFormat;
 *     POINTL position;
 * };
 * }
 */
public class DISPLAYCONFIG_SOURCE_MODE {

    public static MemoryLayout $LAYOUT() {
        return constants$959.const$1;
    }
    public static VarHandle width$VH() {
        return constants$959.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * UINT32 width;
     * }
     */
    public static int width$get(MemorySegment seg) {
        return (int)constants$959.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * UINT32 width;
     * }
     */
    public static void width$set(MemorySegment seg, int x) {
        constants$959.const$2.set(seg, x);
    }
    public static int width$get(MemorySegment seg, long index) {
        return (int)constants$959.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void width$set(MemorySegment seg, long index, int x) {
        constants$959.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle height$VH() {
        return constants$959.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * UINT32 height;
     * }
     */
    public static int height$get(MemorySegment seg) {
        return (int)constants$959.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * UINT32 height;
     * }
     */
    public static void height$set(MemorySegment seg, int x) {
        constants$959.const$3.set(seg, x);
    }
    public static int height$get(MemorySegment seg, long index) {
        return (int)constants$959.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void height$set(MemorySegment seg, long index, int x) {
        constants$959.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pixelFormat$VH() {
        return constants$959.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DISPLAYCONFIG_PIXELFORMAT pixelFormat;
     * }
     */
    public static int pixelFormat$get(MemorySegment seg) {
        return (int)constants$959.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DISPLAYCONFIG_PIXELFORMAT pixelFormat;
     * }
     */
    public static void pixelFormat$set(MemorySegment seg, int x) {
        constants$959.const$4.set(seg, x);
    }
    public static int pixelFormat$get(MemorySegment seg, long index) {
        return (int)constants$959.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void pixelFormat$set(MemorySegment seg, long index, int x) {
        constants$959.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment position$slice(MemorySegment seg) {
        return seg.asSlice(12, 8);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



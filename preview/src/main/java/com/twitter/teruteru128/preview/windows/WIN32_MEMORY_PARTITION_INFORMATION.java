// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct WIN32_MEMORY_PARTITION_INFORMATION {
 *     ULONG Flags;
 *     ULONG NumaNode;
 *     ULONG Channel;
 *     ULONG NumberOfNumaNodes;
 *     ULONG64 ResidentAvailablePages;
 *     ULONG64 CommittedPages;
 *     ULONG64 CommitLimit;
 *     ULONG64 PeakCommitment;
 *     ULONG64 TotalNumberOfPages;
 *     ULONG64 AvailablePages;
 *     ULONG64 ZeroPages;
 *     ULONG64 FreePages;
 *     ULONG64 StandbyPages;
 *     ULONG64 Reserved[16];
 *     ULONG64 MaximumCommitLimit;
 *     ULONG64 Reserved2;
 *     ULONG PartitionId;
 * };
 * }
 */
public class WIN32_MEMORY_PARTITION_INFORMATION {

    public static MemoryLayout $LAYOUT() {
        return constants$687.const$3;
    }
    public static VarHandle Flags$VH() {
        return constants$687.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG Flags;
     * }
     */
    public static int Flags$get(MemorySegment seg) {
        return (int)constants$687.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG Flags;
     * }
     */
    public static void Flags$set(MemorySegment seg, int x) {
        constants$687.const$4.set(seg, x);
    }
    public static int Flags$get(MemorySegment seg, long index) {
        return (int)constants$687.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, int x) {
        constants$687.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle NumaNode$VH() {
        return constants$687.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG NumaNode;
     * }
     */
    public static int NumaNode$get(MemorySegment seg) {
        return (int)constants$687.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG NumaNode;
     * }
     */
    public static void NumaNode$set(MemorySegment seg, int x) {
        constants$687.const$5.set(seg, x);
    }
    public static int NumaNode$get(MemorySegment seg, long index) {
        return (int)constants$687.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void NumaNode$set(MemorySegment seg, long index, int x) {
        constants$687.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Channel$VH() {
        return constants$688.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG Channel;
     * }
     */
    public static int Channel$get(MemorySegment seg) {
        return (int)constants$688.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG Channel;
     * }
     */
    public static void Channel$set(MemorySegment seg, int x) {
        constants$688.const$0.set(seg, x);
    }
    public static int Channel$get(MemorySegment seg, long index) {
        return (int)constants$688.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Channel$set(MemorySegment seg, long index, int x) {
        constants$688.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle NumberOfNumaNodes$VH() {
        return constants$688.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG NumberOfNumaNodes;
     * }
     */
    public static int NumberOfNumaNodes$get(MemorySegment seg) {
        return (int)constants$688.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG NumberOfNumaNodes;
     * }
     */
    public static void NumberOfNumaNodes$set(MemorySegment seg, int x) {
        constants$688.const$1.set(seg, x);
    }
    public static int NumberOfNumaNodes$get(MemorySegment seg, long index) {
        return (int)constants$688.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void NumberOfNumaNodes$set(MemorySegment seg, long index, int x) {
        constants$688.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ResidentAvailablePages$VH() {
        return constants$688.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG64 ResidentAvailablePages;
     * }
     */
    public static long ResidentAvailablePages$get(MemorySegment seg) {
        return (long)constants$688.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG64 ResidentAvailablePages;
     * }
     */
    public static void ResidentAvailablePages$set(MemorySegment seg, long x) {
        constants$688.const$2.set(seg, x);
    }
    public static long ResidentAvailablePages$get(MemorySegment seg, long index) {
        return (long)constants$688.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void ResidentAvailablePages$set(MemorySegment seg, long index, long x) {
        constants$688.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle CommittedPages$VH() {
        return constants$688.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG64 CommittedPages;
     * }
     */
    public static long CommittedPages$get(MemorySegment seg) {
        return (long)constants$688.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG64 CommittedPages;
     * }
     */
    public static void CommittedPages$set(MemorySegment seg, long x) {
        constants$688.const$3.set(seg, x);
    }
    public static long CommittedPages$get(MemorySegment seg, long index) {
        return (long)constants$688.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void CommittedPages$set(MemorySegment seg, long index, long x) {
        constants$688.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle CommitLimit$VH() {
        return constants$688.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG64 CommitLimit;
     * }
     */
    public static long CommitLimit$get(MemorySegment seg) {
        return (long)constants$688.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG64 CommitLimit;
     * }
     */
    public static void CommitLimit$set(MemorySegment seg, long x) {
        constants$688.const$4.set(seg, x);
    }
    public static long CommitLimit$get(MemorySegment seg, long index) {
        return (long)constants$688.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void CommitLimit$set(MemorySegment seg, long index, long x) {
        constants$688.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle PeakCommitment$VH() {
        return constants$688.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG64 PeakCommitment;
     * }
     */
    public static long PeakCommitment$get(MemorySegment seg) {
        return (long)constants$688.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG64 PeakCommitment;
     * }
     */
    public static void PeakCommitment$set(MemorySegment seg, long x) {
        constants$688.const$5.set(seg, x);
    }
    public static long PeakCommitment$get(MemorySegment seg, long index) {
        return (long)constants$688.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void PeakCommitment$set(MemorySegment seg, long index, long x) {
        constants$688.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle TotalNumberOfPages$VH() {
        return constants$689.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG64 TotalNumberOfPages;
     * }
     */
    public static long TotalNumberOfPages$get(MemorySegment seg) {
        return (long)constants$689.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG64 TotalNumberOfPages;
     * }
     */
    public static void TotalNumberOfPages$set(MemorySegment seg, long x) {
        constants$689.const$0.set(seg, x);
    }
    public static long TotalNumberOfPages$get(MemorySegment seg, long index) {
        return (long)constants$689.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void TotalNumberOfPages$set(MemorySegment seg, long index, long x) {
        constants$689.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle AvailablePages$VH() {
        return constants$689.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG64 AvailablePages;
     * }
     */
    public static long AvailablePages$get(MemorySegment seg) {
        return (long)constants$689.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG64 AvailablePages;
     * }
     */
    public static void AvailablePages$set(MemorySegment seg, long x) {
        constants$689.const$1.set(seg, x);
    }
    public static long AvailablePages$get(MemorySegment seg, long index) {
        return (long)constants$689.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void AvailablePages$set(MemorySegment seg, long index, long x) {
        constants$689.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ZeroPages$VH() {
        return constants$689.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG64 ZeroPages;
     * }
     */
    public static long ZeroPages$get(MemorySegment seg) {
        return (long)constants$689.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG64 ZeroPages;
     * }
     */
    public static void ZeroPages$set(MemorySegment seg, long x) {
        constants$689.const$2.set(seg, x);
    }
    public static long ZeroPages$get(MemorySegment seg, long index) {
        return (long)constants$689.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void ZeroPages$set(MemorySegment seg, long index, long x) {
        constants$689.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle FreePages$VH() {
        return constants$689.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG64 FreePages;
     * }
     */
    public static long FreePages$get(MemorySegment seg) {
        return (long)constants$689.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG64 FreePages;
     * }
     */
    public static void FreePages$set(MemorySegment seg, long x) {
        constants$689.const$3.set(seg, x);
    }
    public static long FreePages$get(MemorySegment seg, long index) {
        return (long)constants$689.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void FreePages$set(MemorySegment seg, long index, long x) {
        constants$689.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle StandbyPages$VH() {
        return constants$689.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG64 StandbyPages;
     * }
     */
    public static long StandbyPages$get(MemorySegment seg) {
        return (long)constants$689.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG64 StandbyPages;
     * }
     */
    public static void StandbyPages$set(MemorySegment seg, long x) {
        constants$689.const$4.set(seg, x);
    }
    public static long StandbyPages$get(MemorySegment seg, long index) {
        return (long)constants$689.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void StandbyPages$set(MemorySegment seg, long index, long x) {
        constants$689.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Reserved$slice(MemorySegment seg) {
        return seg.asSlice(88, 128);
    }
    public static VarHandle MaximumCommitLimit$VH() {
        return constants$689.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG64 MaximumCommitLimit;
     * }
     */
    public static long MaximumCommitLimit$get(MemorySegment seg) {
        return (long)constants$689.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG64 MaximumCommitLimit;
     * }
     */
    public static void MaximumCommitLimit$set(MemorySegment seg, long x) {
        constants$689.const$5.set(seg, x);
    }
    public static long MaximumCommitLimit$get(MemorySegment seg, long index) {
        return (long)constants$689.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void MaximumCommitLimit$set(MemorySegment seg, long index, long x) {
        constants$689.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Reserved2$VH() {
        return constants$690.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG64 Reserved2;
     * }
     */
    public static long Reserved2$get(MemorySegment seg) {
        return (long)constants$690.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG64 Reserved2;
     * }
     */
    public static void Reserved2$set(MemorySegment seg, long x) {
        constants$690.const$0.set(seg, x);
    }
    public static long Reserved2$get(MemorySegment seg, long index) {
        return (long)constants$690.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Reserved2$set(MemorySegment seg, long index, long x) {
        constants$690.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle PartitionId$VH() {
        return constants$690.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG PartitionId;
     * }
     */
    public static int PartitionId$get(MemorySegment seg) {
        return (int)constants$690.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG PartitionId;
     * }
     */
    public static void PartitionId$set(MemorySegment seg, int x) {
        constants$690.const$1.set(seg, x);
    }
    public static int PartitionId$get(MemorySegment seg, long index) {
        return (int)constants$690.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void PartitionId$set(MemorySegment seg, long index, int x) {
        constants$690.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



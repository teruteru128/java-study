// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * union _ARM64_NT_NEON128 {
 *     struct {
 *         ULONGLONG Low;
 *         LONGLONG High;
 *     };
 *     double D[2];
 *     float S[4];
 *     WORD H[8];
 *     BYTE B[16];
 * };
 * }
 */
public class _ARM64_NT_NEON128 {

    public static MemoryLayout $LAYOUT() {
        return constants$99.const$1;
    }
    public static VarHandle Low$VH() {
        return constants$99.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONGLONG Low;
     * }
     */
    public static long Low$get(MemorySegment seg) {
        return (long)constants$99.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONGLONG Low;
     * }
     */
    public static void Low$set(MemorySegment seg, long x) {
        constants$99.const$2.set(seg, x);
    }
    public static long Low$get(MemorySegment seg, long index) {
        return (long)constants$99.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void Low$set(MemorySegment seg, long index, long x) {
        constants$99.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle High$VH() {
        return constants$99.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LONGLONG High;
     * }
     */
    public static long High$get(MemorySegment seg) {
        return (long)constants$99.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LONGLONG High;
     * }
     */
    public static void High$set(MemorySegment seg, long x) {
        constants$99.const$3.set(seg, x);
    }
    public static long High$get(MemorySegment seg, long index) {
        return (long)constants$99.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void High$set(MemorySegment seg, long index, long x) {
        constants$99.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment D$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    public static MemorySegment S$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    public static MemorySegment H$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    public static MemorySegment B$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _RTL_CRITICAL_SECTION_DEBUG {
 *     WORD Type;
 *     WORD CreatorBackTraceIndex;
 *     struct _RTL_CRITICAL_SECTION* CriticalSection;
 *     LIST_ENTRY ProcessLocksList;
 *     DWORD EntryCount;
 *     DWORD ContentionCount;
 *     DWORD Flags;
 *     WORD CreatorBackTraceIndexHigh;
 *     WORD SpareWORD;
 * };
 * }
 */
public class _RTL_CRITICAL_SECTION_DEBUG {

    public static MemoryLayout $LAYOUT() {
        return constants$491.const$1;
    }
    public static VarHandle Type$VH() {
        return constants$491.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD Type;
     * }
     */
    public static short Type$get(MemorySegment seg) {
        return (short)constants$491.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD Type;
     * }
     */
    public static void Type$set(MemorySegment seg, short x) {
        constants$491.const$2.set(seg, x);
    }
    public static short Type$get(MemorySegment seg, long index) {
        return (short)constants$491.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void Type$set(MemorySegment seg, long index, short x) {
        constants$491.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle CreatorBackTraceIndex$VH() {
        return constants$491.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD CreatorBackTraceIndex;
     * }
     */
    public static short CreatorBackTraceIndex$get(MemorySegment seg) {
        return (short)constants$491.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD CreatorBackTraceIndex;
     * }
     */
    public static void CreatorBackTraceIndex$set(MemorySegment seg, short x) {
        constants$491.const$3.set(seg, x);
    }
    public static short CreatorBackTraceIndex$get(MemorySegment seg, long index) {
        return (short)constants$491.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void CreatorBackTraceIndex$set(MemorySegment seg, long index, short x) {
        constants$491.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle CriticalSection$VH() {
        return constants$491.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _RTL_CRITICAL_SECTION* CriticalSection;
     * }
     */
    public static MemorySegment CriticalSection$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$491.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _RTL_CRITICAL_SECTION* CriticalSection;
     * }
     */
    public static void CriticalSection$set(MemorySegment seg, MemorySegment x) {
        constants$491.const$4.set(seg, x);
    }
    public static MemorySegment CriticalSection$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$491.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void CriticalSection$set(MemorySegment seg, long index, MemorySegment x) {
        constants$491.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment ProcessLocksList$slice(MemorySegment seg) {
        return seg.asSlice(16, 16);
    }
    public static VarHandle EntryCount$VH() {
        return constants$491.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD EntryCount;
     * }
     */
    public static int EntryCount$get(MemorySegment seg) {
        return (int)constants$491.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD EntryCount;
     * }
     */
    public static void EntryCount$set(MemorySegment seg, int x) {
        constants$491.const$5.set(seg, x);
    }
    public static int EntryCount$get(MemorySegment seg, long index) {
        return (int)constants$491.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void EntryCount$set(MemorySegment seg, long index, int x) {
        constants$491.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ContentionCount$VH() {
        return constants$492.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD ContentionCount;
     * }
     */
    public static int ContentionCount$get(MemorySegment seg) {
        return (int)constants$492.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD ContentionCount;
     * }
     */
    public static void ContentionCount$set(MemorySegment seg, int x) {
        constants$492.const$0.set(seg, x);
    }
    public static int ContentionCount$get(MemorySegment seg, long index) {
        return (int)constants$492.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void ContentionCount$set(MemorySegment seg, long index, int x) {
        constants$492.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Flags$VH() {
        return constants$492.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Flags;
     * }
     */
    public static int Flags$get(MemorySegment seg) {
        return (int)constants$492.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Flags;
     * }
     */
    public static void Flags$set(MemorySegment seg, int x) {
        constants$492.const$1.set(seg, x);
    }
    public static int Flags$get(MemorySegment seg, long index) {
        return (int)constants$492.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, int x) {
        constants$492.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle CreatorBackTraceIndexHigh$VH() {
        return constants$492.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD CreatorBackTraceIndexHigh;
     * }
     */
    public static short CreatorBackTraceIndexHigh$get(MemorySegment seg) {
        return (short)constants$492.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD CreatorBackTraceIndexHigh;
     * }
     */
    public static void CreatorBackTraceIndexHigh$set(MemorySegment seg, short x) {
        constants$492.const$2.set(seg, x);
    }
    public static short CreatorBackTraceIndexHigh$get(MemorySegment seg, long index) {
        return (short)constants$492.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void CreatorBackTraceIndexHigh$set(MemorySegment seg, long index, short x) {
        constants$492.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle SpareWORD$VH() {
        return constants$492.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD SpareWORD;
     * }
     */
    public static short SpareWORD$get(MemorySegment seg) {
        return (short)constants$492.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD SpareWORD;
     * }
     */
    public static void SpareWORD$set(MemorySegment seg, short x) {
        constants$492.const$3.set(seg, x);
    }
    public static short SpareWORD$get(MemorySegment seg, long index) {
        return (short)constants$492.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void SpareWORD$set(MemorySegment seg, long index, short x) {
        constants$492.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



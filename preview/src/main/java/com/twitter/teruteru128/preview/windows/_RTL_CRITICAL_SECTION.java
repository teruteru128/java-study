// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _RTL_CRITICAL_SECTION {
 *     PRTL_CRITICAL_SECTION_DEBUG DebugInfo;
 *     LONG LockCount;
 *     LONG RecursionCount;
 *     HANDLE OwningThread;
 *     HANDLE LockSemaphore;
 *     ULONG_PTR SpinCount;
 * };
 * }
 */
public class _RTL_CRITICAL_SECTION {

    public static MemoryLayout $LAYOUT() {
        return constants$492.const$4;
    }
    public static VarHandle DebugInfo$VH() {
        return constants$492.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PRTL_CRITICAL_SECTION_DEBUG DebugInfo;
     * }
     */
    public static MemorySegment DebugInfo$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$492.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PRTL_CRITICAL_SECTION_DEBUG DebugInfo;
     * }
     */
    public static void DebugInfo$set(MemorySegment seg, MemorySegment x) {
        constants$492.const$5.set(seg, x);
    }
    public static MemorySegment DebugInfo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$492.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void DebugInfo$set(MemorySegment seg, long index, MemorySegment x) {
        constants$492.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle LockCount$VH() {
        return constants$493.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LONG LockCount;
     * }
     */
    public static int LockCount$get(MemorySegment seg) {
        return (int)constants$493.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LONG LockCount;
     * }
     */
    public static void LockCount$set(MemorySegment seg, int x) {
        constants$493.const$0.set(seg, x);
    }
    public static int LockCount$get(MemorySegment seg, long index) {
        return (int)constants$493.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void LockCount$set(MemorySegment seg, long index, int x) {
        constants$493.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle RecursionCount$VH() {
        return constants$493.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LONG RecursionCount;
     * }
     */
    public static int RecursionCount$get(MemorySegment seg) {
        return (int)constants$493.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LONG RecursionCount;
     * }
     */
    public static void RecursionCount$set(MemorySegment seg, int x) {
        constants$493.const$1.set(seg, x);
    }
    public static int RecursionCount$get(MemorySegment seg, long index) {
        return (int)constants$493.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void RecursionCount$set(MemorySegment seg, long index, int x) {
        constants$493.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle OwningThread$VH() {
        return constants$493.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HANDLE OwningThread;
     * }
     */
    public static MemorySegment OwningThread$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$493.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HANDLE OwningThread;
     * }
     */
    public static void OwningThread$set(MemorySegment seg, MemorySegment x) {
        constants$493.const$2.set(seg, x);
    }
    public static MemorySegment OwningThread$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$493.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void OwningThread$set(MemorySegment seg, long index, MemorySegment x) {
        constants$493.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle LockSemaphore$VH() {
        return constants$493.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HANDLE LockSemaphore;
     * }
     */
    public static MemorySegment LockSemaphore$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$493.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HANDLE LockSemaphore;
     * }
     */
    public static void LockSemaphore$set(MemorySegment seg, MemorySegment x) {
        constants$493.const$3.set(seg, x);
    }
    public static MemorySegment LockSemaphore$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$493.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void LockSemaphore$set(MemorySegment seg, long index, MemorySegment x) {
        constants$493.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle SpinCount$VH() {
        return constants$493.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG_PTR SpinCount;
     * }
     */
    public static long SpinCount$get(MemorySegment seg) {
        return (long)constants$493.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG_PTR SpinCount;
     * }
     */
    public static void SpinCount$set(MemorySegment seg, long x) {
        constants$493.const$4.set(seg, x);
    }
    public static long SpinCount$get(MemorySegment seg, long index) {
        return (long)constants$493.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void SpinCount$set(MemorySegment seg, long index, long x) {
        constants$493.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



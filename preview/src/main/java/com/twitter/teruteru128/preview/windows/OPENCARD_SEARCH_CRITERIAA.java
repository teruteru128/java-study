// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct {
 *     DWORD dwStructSize;
 *     LPSTR lpstrGroupNames;
 *     DWORD nMaxGroupNames;
 *     LPCGUID rgguidInterfaces;
 *     DWORD cguidInterfaces;
 *     LPSTR lpstrCardNames;
 *     DWORD nMaxCardNames;
 *     LPOCNCHKPROC lpfnCheck;
 *     LPOCNCONNPROCA lpfnConnect;
 *     LPOCNDSCPROC lpfnDisconnect;
 *     LPVOID pvUserData;
 *     DWORD dwShareMode;
 *     DWORD dwPreferredProtocols;
 * };
 * }
 */
public class OPENCARD_SEARCH_CRITERIAA {

    public static MemoryLayout $LAYOUT() {
        return constants$2761.const$5;
    }
    public static VarHandle dwStructSize$VH() {
        return constants$2762.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwStructSize;
     * }
     */
    public static int dwStructSize$get(MemorySegment seg) {
        return (int)constants$2762.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwStructSize;
     * }
     */
    public static void dwStructSize$set(MemorySegment seg, int x) {
        constants$2762.const$0.set(seg, x);
    }
    public static int dwStructSize$get(MemorySegment seg, long index) {
        return (int)constants$2762.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void dwStructSize$set(MemorySegment seg, long index, int x) {
        constants$2762.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lpstrGroupNames$VH() {
        return constants$2762.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPSTR lpstrGroupNames;
     * }
     */
    public static MemorySegment lpstrGroupNames$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2762.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPSTR lpstrGroupNames;
     * }
     */
    public static void lpstrGroupNames$set(MemorySegment seg, MemorySegment x) {
        constants$2762.const$1.set(seg, x);
    }
    public static MemorySegment lpstrGroupNames$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2762.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void lpstrGroupNames$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2762.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nMaxGroupNames$VH() {
        return constants$2762.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD nMaxGroupNames;
     * }
     */
    public static int nMaxGroupNames$get(MemorySegment seg) {
        return (int)constants$2762.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD nMaxGroupNames;
     * }
     */
    public static void nMaxGroupNames$set(MemorySegment seg, int x) {
        constants$2762.const$2.set(seg, x);
    }
    public static int nMaxGroupNames$get(MemorySegment seg, long index) {
        return (int)constants$2762.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void nMaxGroupNames$set(MemorySegment seg, long index, int x) {
        constants$2762.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle rgguidInterfaces$VH() {
        return constants$2762.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPCGUID rgguidInterfaces;
     * }
     */
    public static MemorySegment rgguidInterfaces$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2762.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPCGUID rgguidInterfaces;
     * }
     */
    public static void rgguidInterfaces$set(MemorySegment seg, MemorySegment x) {
        constants$2762.const$3.set(seg, x);
    }
    public static MemorySegment rgguidInterfaces$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2762.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void rgguidInterfaces$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2762.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cguidInterfaces$VH() {
        return constants$2762.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD cguidInterfaces;
     * }
     */
    public static int cguidInterfaces$get(MemorySegment seg) {
        return (int)constants$2762.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD cguidInterfaces;
     * }
     */
    public static void cguidInterfaces$set(MemorySegment seg, int x) {
        constants$2762.const$4.set(seg, x);
    }
    public static int cguidInterfaces$get(MemorySegment seg, long index) {
        return (int)constants$2762.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void cguidInterfaces$set(MemorySegment seg, long index, int x) {
        constants$2762.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lpstrCardNames$VH() {
        return constants$2762.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPSTR lpstrCardNames;
     * }
     */
    public static MemorySegment lpstrCardNames$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2762.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPSTR lpstrCardNames;
     * }
     */
    public static void lpstrCardNames$set(MemorySegment seg, MemorySegment x) {
        constants$2762.const$5.set(seg, x);
    }
    public static MemorySegment lpstrCardNames$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2762.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void lpstrCardNames$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2762.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nMaxCardNames$VH() {
        return constants$2763.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD nMaxCardNames;
     * }
     */
    public static int nMaxCardNames$get(MemorySegment seg) {
        return (int)constants$2763.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD nMaxCardNames;
     * }
     */
    public static void nMaxCardNames$set(MemorySegment seg, int x) {
        constants$2763.const$0.set(seg, x);
    }
    public static int nMaxCardNames$get(MemorySegment seg, long index) {
        return (int)constants$2763.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void nMaxCardNames$set(MemorySegment seg, long index, int x) {
        constants$2763.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lpfnCheck$VH() {
        return constants$2763.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPOCNCHKPROC lpfnCheck;
     * }
     */
    public static MemorySegment lpfnCheck$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2763.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPOCNCHKPROC lpfnCheck;
     * }
     */
    public static void lpfnCheck$set(MemorySegment seg, MemorySegment x) {
        constants$2763.const$1.set(seg, x);
    }
    public static MemorySegment lpfnCheck$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2763.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void lpfnCheck$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2763.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static LPOCNCHKPROC lpfnCheck(MemorySegment segment, Arena scope) {
        return LPOCNCHKPROC.ofAddress(lpfnCheck$get(segment), scope);
    }
    public static VarHandle lpfnConnect$VH() {
        return constants$2763.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPOCNCONNPROCA lpfnConnect;
     * }
     */
    public static MemorySegment lpfnConnect$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2763.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPOCNCONNPROCA lpfnConnect;
     * }
     */
    public static void lpfnConnect$set(MemorySegment seg, MemorySegment x) {
        constants$2763.const$2.set(seg, x);
    }
    public static MemorySegment lpfnConnect$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2763.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void lpfnConnect$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2763.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static LPOCNCONNPROCA lpfnConnect(MemorySegment segment, Arena scope) {
        return LPOCNCONNPROCA.ofAddress(lpfnConnect$get(segment), scope);
    }
    public static VarHandle lpfnDisconnect$VH() {
        return constants$2763.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPOCNDSCPROC lpfnDisconnect;
     * }
     */
    public static MemorySegment lpfnDisconnect$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2763.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPOCNDSCPROC lpfnDisconnect;
     * }
     */
    public static void lpfnDisconnect$set(MemorySegment seg, MemorySegment x) {
        constants$2763.const$3.set(seg, x);
    }
    public static MemorySegment lpfnDisconnect$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2763.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void lpfnDisconnect$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2763.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static LPOCNDSCPROC lpfnDisconnect(MemorySegment segment, Arena scope) {
        return LPOCNDSCPROC.ofAddress(lpfnDisconnect$get(segment), scope);
    }
    public static VarHandle pvUserData$VH() {
        return constants$2763.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPVOID pvUserData;
     * }
     */
    public static MemorySegment pvUserData$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2763.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPVOID pvUserData;
     * }
     */
    public static void pvUserData$set(MemorySegment seg, MemorySegment x) {
        constants$2763.const$4.set(seg, x);
    }
    public static MemorySegment pvUserData$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2763.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void pvUserData$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2763.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwShareMode$VH() {
        return constants$2763.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwShareMode;
     * }
     */
    public static int dwShareMode$get(MemorySegment seg) {
        return (int)constants$2763.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwShareMode;
     * }
     */
    public static void dwShareMode$set(MemorySegment seg, int x) {
        constants$2763.const$5.set(seg, x);
    }
    public static int dwShareMode$get(MemorySegment seg, long index) {
        return (int)constants$2763.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void dwShareMode$set(MemorySegment seg, long index, int x) {
        constants$2763.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwPreferredProtocols$VH() {
        return constants$2764.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwPreferredProtocols;
     * }
     */
    public static int dwPreferredProtocols$get(MemorySegment seg) {
        return (int)constants$2764.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwPreferredProtocols;
     * }
     */
    public static void dwPreferredProtocols$set(MemorySegment seg, int x) {
        constants$2764.const$0.set(seg, x);
    }
    public static int dwPreferredProtocols$get(MemorySegment seg, long index) {
        return (int)constants$2764.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void dwPreferredProtocols$set(MemorySegment seg, long index, int x) {
        constants$2764.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct ITypeLibRegistrationVtbl {
 *     HRESULT (*QueryInterface)(ITypeLibRegistration*,const IID*,void**);
 *     ULONG (*AddRef)(ITypeLibRegistration*);
 *     ULONG (*Release)(ITypeLibRegistration*);
 *     HRESULT (*GetGuid)(ITypeLibRegistration*,GUID*);
 *     HRESULT (*GetVersion)(ITypeLibRegistration*,BSTR*);
 *     HRESULT (*GetLcid)(ITypeLibRegistration*,LCID*);
 *     HRESULT (*GetWin32Path)(ITypeLibRegistration*,BSTR*);
 *     HRESULT (*GetWin64Path)(ITypeLibRegistration*,BSTR*);
 *     HRESULT (*GetDisplayName)(ITypeLibRegistration*,BSTR*);
 *     HRESULT (*GetFlags)(ITypeLibRegistration*,DWORD*);
 *     HRESULT (*GetHelpDir)(ITypeLibRegistration*,BSTR*);
 * };
 * }
 */
public class ITypeLibRegistrationVtbl {

    public static MemoryLayout $LAYOUT() {
        return constants$3565.const$4;
    }
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(ITypeLibRegistration*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3565.const$5, fi, constants$37.const$3, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle QueryInterface$VH() {
        return constants$3566.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(ITypeLibRegistration*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3566.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(ITypeLibRegistration*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        constants$3566.const$0.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3566.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3566.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, Arena scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*AddRef)(ITypeLibRegistration*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3566.const$1, fi, constants$18.const$5, scope);
        }
        static AddRef ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle AddRef$VH() {
        return constants$3566.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(ITypeLibRegistration*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3566.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(ITypeLibRegistration*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        constants$3566.const$2.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3566.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3566.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, Arena scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*Release)(ITypeLibRegistration*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3566.const$3, fi, constants$18.const$5, scope);
        }
        static Release ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Release$VH() {
        return constants$3566.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(ITypeLibRegistration*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3566.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(ITypeLibRegistration*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        constants$3566.const$4.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3566.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3566.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, Arena scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetGuid)(ITypeLibRegistration*,GUID*);
     * }
     */
    public interface GetGuid {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetGuid fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3566.const$5, fi, constants$34.const$0, scope);
        }
        static GetGuid ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetGuid$VH() {
        return constants$3567.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetGuid)(ITypeLibRegistration*,GUID*);
     * }
     */
    public static MemorySegment GetGuid$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3567.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetGuid)(ITypeLibRegistration*,GUID*);
     * }
     */
    public static void GetGuid$set(MemorySegment seg, MemorySegment x) {
        constants$3567.const$0.set(seg, x);
    }
    public static MemorySegment GetGuid$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3567.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void GetGuid$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3567.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetGuid GetGuid(MemorySegment segment, Arena scope) {
        return GetGuid.ofAddress(GetGuid$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetVersion)(ITypeLibRegistration*,BSTR*);
     * }
     */
    public interface GetVersion {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetVersion fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3567.const$1, fi, constants$34.const$0, scope);
        }
        static GetVersion ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetVersion$VH() {
        return constants$3567.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetVersion)(ITypeLibRegistration*,BSTR*);
     * }
     */
    public static MemorySegment GetVersion$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3567.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetVersion)(ITypeLibRegistration*,BSTR*);
     * }
     */
    public static void GetVersion$set(MemorySegment seg, MemorySegment x) {
        constants$3567.const$2.set(seg, x);
    }
    public static MemorySegment GetVersion$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3567.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void GetVersion$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3567.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetVersion GetVersion(MemorySegment segment, Arena scope) {
        return GetVersion.ofAddress(GetVersion$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetLcid)(ITypeLibRegistration*,LCID*);
     * }
     */
    public interface GetLcid {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetLcid fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3567.const$3, fi, constants$34.const$0, scope);
        }
        static GetLcid ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetLcid$VH() {
        return constants$3567.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetLcid)(ITypeLibRegistration*,LCID*);
     * }
     */
    public static MemorySegment GetLcid$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3567.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetLcid)(ITypeLibRegistration*,LCID*);
     * }
     */
    public static void GetLcid$set(MemorySegment seg, MemorySegment x) {
        constants$3567.const$4.set(seg, x);
    }
    public static MemorySegment GetLcid$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3567.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void GetLcid$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3567.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetLcid GetLcid(MemorySegment segment, Arena scope) {
        return GetLcid.ofAddress(GetLcid$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetWin32Path)(ITypeLibRegistration*,BSTR*);
     * }
     */
    public interface GetWin32Path {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetWin32Path fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3567.const$5, fi, constants$34.const$0, scope);
        }
        static GetWin32Path ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetWin32Path$VH() {
        return constants$3568.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetWin32Path)(ITypeLibRegistration*,BSTR*);
     * }
     */
    public static MemorySegment GetWin32Path$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3568.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetWin32Path)(ITypeLibRegistration*,BSTR*);
     * }
     */
    public static void GetWin32Path$set(MemorySegment seg, MemorySegment x) {
        constants$3568.const$0.set(seg, x);
    }
    public static MemorySegment GetWin32Path$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3568.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void GetWin32Path$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3568.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetWin32Path GetWin32Path(MemorySegment segment, Arena scope) {
        return GetWin32Path.ofAddress(GetWin32Path$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetWin64Path)(ITypeLibRegistration*,BSTR*);
     * }
     */
    public interface GetWin64Path {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetWin64Path fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3568.const$1, fi, constants$34.const$0, scope);
        }
        static GetWin64Path ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetWin64Path$VH() {
        return constants$3568.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetWin64Path)(ITypeLibRegistration*,BSTR*);
     * }
     */
    public static MemorySegment GetWin64Path$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3568.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetWin64Path)(ITypeLibRegistration*,BSTR*);
     * }
     */
    public static void GetWin64Path$set(MemorySegment seg, MemorySegment x) {
        constants$3568.const$2.set(seg, x);
    }
    public static MemorySegment GetWin64Path$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3568.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void GetWin64Path$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3568.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetWin64Path GetWin64Path(MemorySegment segment, Arena scope) {
        return GetWin64Path.ofAddress(GetWin64Path$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetDisplayName)(ITypeLibRegistration*,BSTR*);
     * }
     */
    public interface GetDisplayName {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetDisplayName fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3568.const$3, fi, constants$34.const$0, scope);
        }
        static GetDisplayName ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetDisplayName$VH() {
        return constants$3568.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetDisplayName)(ITypeLibRegistration*,BSTR*);
     * }
     */
    public static MemorySegment GetDisplayName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3568.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetDisplayName)(ITypeLibRegistration*,BSTR*);
     * }
     */
    public static void GetDisplayName$set(MemorySegment seg, MemorySegment x) {
        constants$3568.const$4.set(seg, x);
    }
    public static MemorySegment GetDisplayName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3568.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDisplayName$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3568.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDisplayName GetDisplayName(MemorySegment segment, Arena scope) {
        return GetDisplayName.ofAddress(GetDisplayName$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetFlags)(ITypeLibRegistration*,DWORD*);
     * }
     */
    public interface GetFlags {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetFlags fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3568.const$5, fi, constants$34.const$0, scope);
        }
        static GetFlags ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetFlags$VH() {
        return constants$3569.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetFlags)(ITypeLibRegistration*,DWORD*);
     * }
     */
    public static MemorySegment GetFlags$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3569.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetFlags)(ITypeLibRegistration*,DWORD*);
     * }
     */
    public static void GetFlags$set(MemorySegment seg, MemorySegment x) {
        constants$3569.const$0.set(seg, x);
    }
    public static MemorySegment GetFlags$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3569.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void GetFlags$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3569.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetFlags GetFlags(MemorySegment segment, Arena scope) {
        return GetFlags.ofAddress(GetFlags$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetHelpDir)(ITypeLibRegistration*,BSTR*);
     * }
     */
    public interface GetHelpDir {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetHelpDir fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3569.const$1, fi, constants$34.const$0, scope);
        }
        static GetHelpDir ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetHelpDir$VH() {
        return constants$3569.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetHelpDir)(ITypeLibRegistration*,BSTR*);
     * }
     */
    public static MemorySegment GetHelpDir$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3569.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetHelpDir)(ITypeLibRegistration*,BSTR*);
     * }
     */
    public static void GetHelpDir$set(MemorySegment seg, MemorySegment x) {
        constants$3569.const$2.set(seg, x);
    }
    public static MemorySegment GetHelpDir$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3569.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void GetHelpDir$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3569.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetHelpDir GetHelpDir(MemorySegment segment, Arena scope) {
        return GetHelpDir.ofAddress(GetHelpDir$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



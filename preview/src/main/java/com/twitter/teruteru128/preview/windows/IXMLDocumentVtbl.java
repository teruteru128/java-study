// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IXMLDocumentVtbl {
 *     HRESULT (*QueryInterface)(IXMLDocument*,const IID*,void**);
 *     ULONG (*AddRef)(IXMLDocument*);
 *     ULONG (*Release)(IXMLDocument*);
 *     HRESULT (*GetTypeInfoCount)(IXMLDocument*,UINT*);
 *     HRESULT (*GetTypeInfo)(IXMLDocument*,UINT,LCID,ITypeInfo**);
 *     HRESULT (*GetIDsOfNames)(IXMLDocument*,const IID*,LPOLESTR*,UINT,LCID,DISPID*);
 *     HRESULT (*Invoke)(IXMLDocument*,DISPID,const IID*,LCID,WORD,DISPPARAMS*,VARIANT*,EXCEPINFO*,UINT*);
 *     HRESULT (*get_root)(IXMLDocument*,IXMLElement**);
 *     HRESULT (*get_fileSize)(IXMLDocument*,BSTR*);
 *     HRESULT (*get_fileModifiedDate)(IXMLDocument*,BSTR*);
 *     HRESULT (*get_fileUpdatedDate)(IXMLDocument*,BSTR*);
 *     HRESULT (*get_URL)(IXMLDocument*,BSTR*);
 *     HRESULT (*put_URL)(IXMLDocument*,BSTR);
 *     HRESULT (*get_mimeType)(IXMLDocument*,BSTR*);
 *     HRESULT (*get_readyState)(IXMLDocument*,long*);
 *     HRESULT (*get_charset)(IXMLDocument*,BSTR*);
 *     HRESULT (*put_charset)(IXMLDocument*,BSTR);
 *     HRESULT (*get_version)(IXMLDocument*,BSTR*);
 *     HRESULT (*get_doctype)(IXMLDocument*,BSTR*);
 *     HRESULT (*get_dtdURL)(IXMLDocument*,BSTR*);
 *     HRESULT (*createElement)(IXMLDocument*,VARIANT,VARIANT,IXMLElement**);
 * };
 * }
 */
public class IXMLDocumentVtbl {

    public static MemoryLayout $LAYOUT() {
        return constants$4046.const$5;
    }
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IXMLDocument*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4047.const$0, fi, constants$37.const$3, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle QueryInterface$VH() {
        return constants$4047.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IXMLDocument*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4047.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IXMLDocument*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        constants$4047.const$1.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4047.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4047.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, Arena scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*AddRef)(IXMLDocument*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4047.const$2, fi, constants$18.const$5, scope);
        }
        static AddRef ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle AddRef$VH() {
        return constants$4047.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IXMLDocument*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4047.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IXMLDocument*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        constants$4047.const$3.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4047.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4047.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, Arena scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*Release)(IXMLDocument*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4047.const$4, fi, constants$18.const$5, scope);
        }
        static Release ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Release$VH() {
        return constants$4047.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IXMLDocument*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4047.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IXMLDocument*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        constants$4047.const$5.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4047.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4047.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, Arena scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetTypeInfoCount)(IXMLDocument*,UINT*);
     * }
     */
    public interface GetTypeInfoCount {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetTypeInfoCount fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4048.const$0, fi, constants$34.const$0, scope);
        }
        static GetTypeInfoCount ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetTypeInfoCount$VH() {
        return constants$4048.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetTypeInfoCount)(IXMLDocument*,UINT*);
     * }
     */
    public static MemorySegment GetTypeInfoCount$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4048.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetTypeInfoCount)(IXMLDocument*,UINT*);
     * }
     */
    public static void GetTypeInfoCount$set(MemorySegment seg, MemorySegment x) {
        constants$4048.const$1.set(seg, x);
    }
    public static MemorySegment GetTypeInfoCount$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4048.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeInfoCount$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4048.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeInfoCount GetTypeInfoCount(MemorySegment segment, Arena scope) {
        return GetTypeInfoCount.ofAddress(GetTypeInfoCount$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetTypeInfo)(IXMLDocument*,UINT,LCID,ITypeInfo**);
     * }
     */
    public interface GetTypeInfo {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(GetTypeInfo fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4048.const$2, fi, constants$644.const$5, scope);
        }
        static GetTypeInfo ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)constants$2131.const$5.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetTypeInfo$VH() {
        return constants$4048.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetTypeInfo)(IXMLDocument*,UINT,LCID,ITypeInfo**);
     * }
     */
    public static MemorySegment GetTypeInfo$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4048.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetTypeInfo)(IXMLDocument*,UINT,LCID,ITypeInfo**);
     * }
     */
    public static void GetTypeInfo$set(MemorySegment seg, MemorySegment x) {
        constants$4048.const$3.set(seg, x);
    }
    public static MemorySegment GetTypeInfo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4048.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeInfo$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4048.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeInfo GetTypeInfo(MemorySegment segment, Arena scope) {
        return GetTypeInfo.ofAddress(GetTypeInfo$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetIDsOfNames)(IXMLDocument*,const IID*,LPOLESTR*,UINT,LCID,DISPID*);
     * }
     */
    public interface GetIDsOfNames {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3, int _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(GetIDsOfNames fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4048.const$4, fi, constants$836.const$2, scope);
        }
        static GetIDsOfNames ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3, int __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    return (int)constants$3267.const$1.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetIDsOfNames$VH() {
        return constants$4048.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetIDsOfNames)(IXMLDocument*,const IID*,LPOLESTR*,UINT,LCID,DISPID*);
     * }
     */
    public static MemorySegment GetIDsOfNames$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4048.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetIDsOfNames)(IXMLDocument*,const IID*,LPOLESTR*,UINT,LCID,DISPID*);
     * }
     */
    public static void GetIDsOfNames$set(MemorySegment seg, MemorySegment x) {
        constants$4048.const$5.set(seg, x);
    }
    public static MemorySegment GetIDsOfNames$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4048.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GetIDsOfNames$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4048.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetIDsOfNames GetIDsOfNames(MemorySegment segment, Arena scope) {
        return GetIDsOfNames.ofAddress(GetIDsOfNames$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*Invoke)(IXMLDocument*,DISPID,const IID*,LCID,WORD,DISPPARAMS*,VARIANT*,EXCEPINFO*,UINT*);
     * }
     */
    public interface Invoke {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, int _x3, short _x4, java.lang.foreign.MemorySegment _x5, java.lang.foreign.MemorySegment _x6, java.lang.foreign.MemorySegment _x7, java.lang.foreign.MemorySegment _x8);
        static MemorySegment allocate(Invoke fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4049.const$0, fi, constants$3484.const$0, scope);
        }
        static Invoke ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, int __x3, short __x4, java.lang.foreign.MemorySegment __x5, java.lang.foreign.MemorySegment __x6, java.lang.foreign.MemorySegment __x7, java.lang.foreign.MemorySegment __x8) -> {
                try {
                    return (int)constants$3484.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7, __x8);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Invoke$VH() {
        return constants$4049.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Invoke)(IXMLDocument*,DISPID,const IID*,LCID,WORD,DISPPARAMS*,VARIANT*,EXCEPINFO*,UINT*);
     * }
     */
    public static MemorySegment Invoke$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4049.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Invoke)(IXMLDocument*,DISPID,const IID*,LCID,WORD,DISPPARAMS*,VARIANT*,EXCEPINFO*,UINT*);
     * }
     */
    public static void Invoke$set(MemorySegment seg, MemorySegment x) {
        constants$4049.const$1.set(seg, x);
    }
    public static MemorySegment Invoke$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4049.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void Invoke$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4049.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static Invoke Invoke(MemorySegment segment, Arena scope) {
        return Invoke.ofAddress(Invoke$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_root)(IXMLDocument*,IXMLElement**);
     * }
     */
    public interface get_root {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_root fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4049.const$2, fi, constants$34.const$0, scope);
        }
        static get_root ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_root$VH() {
        return constants$4049.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_root)(IXMLDocument*,IXMLElement**);
     * }
     */
    public static MemorySegment get_root$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4049.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_root)(IXMLDocument*,IXMLElement**);
     * }
     */
    public static void get_root$set(MemorySegment seg, MemorySegment x) {
        constants$4049.const$3.set(seg, x);
    }
    public static MemorySegment get_root$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4049.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void get_root$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4049.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_root get_root(MemorySegment segment, Arena scope) {
        return get_root.ofAddress(get_root$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_fileSize)(IXMLDocument*,BSTR*);
     * }
     */
    public interface get_fileSize {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_fileSize fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4049.const$4, fi, constants$34.const$0, scope);
        }
        static get_fileSize ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_fileSize$VH() {
        return constants$4049.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_fileSize)(IXMLDocument*,BSTR*);
     * }
     */
    public static MemorySegment get_fileSize$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4049.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_fileSize)(IXMLDocument*,BSTR*);
     * }
     */
    public static void get_fileSize$set(MemorySegment seg, MemorySegment x) {
        constants$4049.const$5.set(seg, x);
    }
    public static MemorySegment get_fileSize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4049.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_fileSize$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4049.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_fileSize get_fileSize(MemorySegment segment, Arena scope) {
        return get_fileSize.ofAddress(get_fileSize$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_fileModifiedDate)(IXMLDocument*,BSTR*);
     * }
     */
    public interface get_fileModifiedDate {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_fileModifiedDate fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4050.const$0, fi, constants$34.const$0, scope);
        }
        static get_fileModifiedDate ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_fileModifiedDate$VH() {
        return constants$4050.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_fileModifiedDate)(IXMLDocument*,BSTR*);
     * }
     */
    public static MemorySegment get_fileModifiedDate$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4050.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_fileModifiedDate)(IXMLDocument*,BSTR*);
     * }
     */
    public static void get_fileModifiedDate$set(MemorySegment seg, MemorySegment x) {
        constants$4050.const$1.set(seg, x);
    }
    public static MemorySegment get_fileModifiedDate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4050.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_fileModifiedDate$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4050.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_fileModifiedDate get_fileModifiedDate(MemorySegment segment, Arena scope) {
        return get_fileModifiedDate.ofAddress(get_fileModifiedDate$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_fileUpdatedDate)(IXMLDocument*,BSTR*);
     * }
     */
    public interface get_fileUpdatedDate {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_fileUpdatedDate fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4050.const$2, fi, constants$34.const$0, scope);
        }
        static get_fileUpdatedDate ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_fileUpdatedDate$VH() {
        return constants$4050.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_fileUpdatedDate)(IXMLDocument*,BSTR*);
     * }
     */
    public static MemorySegment get_fileUpdatedDate$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4050.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_fileUpdatedDate)(IXMLDocument*,BSTR*);
     * }
     */
    public static void get_fileUpdatedDate$set(MemorySegment seg, MemorySegment x) {
        constants$4050.const$3.set(seg, x);
    }
    public static MemorySegment get_fileUpdatedDate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4050.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void get_fileUpdatedDate$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4050.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_fileUpdatedDate get_fileUpdatedDate(MemorySegment segment, Arena scope) {
        return get_fileUpdatedDate.ofAddress(get_fileUpdatedDate$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_URL)(IXMLDocument*,BSTR*);
     * }
     */
    public interface get_URL {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_URL fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4050.const$4, fi, constants$34.const$0, scope);
        }
        static get_URL ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_URL$VH() {
        return constants$4050.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_URL)(IXMLDocument*,BSTR*);
     * }
     */
    public static MemorySegment get_URL$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4050.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_URL)(IXMLDocument*,BSTR*);
     * }
     */
    public static void get_URL$set(MemorySegment seg, MemorySegment x) {
        constants$4050.const$5.set(seg, x);
    }
    public static MemorySegment get_URL$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4050.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_URL$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4050.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_URL get_URL(MemorySegment segment, Arena scope) {
        return get_URL.ofAddress(get_URL$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*put_URL)(IXMLDocument*,BSTR);
     * }
     */
    public interface put_URL {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(put_URL fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4051.const$0, fi, constants$34.const$0, scope);
        }
        static put_URL ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle put_URL$VH() {
        return constants$4051.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*put_URL)(IXMLDocument*,BSTR);
     * }
     */
    public static MemorySegment put_URL$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4051.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*put_URL)(IXMLDocument*,BSTR);
     * }
     */
    public static void put_URL$set(MemorySegment seg, MemorySegment x) {
        constants$4051.const$1.set(seg, x);
    }
    public static MemorySegment put_URL$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4051.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void put_URL$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4051.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static put_URL put_URL(MemorySegment segment, Arena scope) {
        return put_URL.ofAddress(put_URL$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_mimeType)(IXMLDocument*,BSTR*);
     * }
     */
    public interface get_mimeType {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_mimeType fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4051.const$2, fi, constants$34.const$0, scope);
        }
        static get_mimeType ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_mimeType$VH() {
        return constants$4051.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_mimeType)(IXMLDocument*,BSTR*);
     * }
     */
    public static MemorySegment get_mimeType$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4051.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_mimeType)(IXMLDocument*,BSTR*);
     * }
     */
    public static void get_mimeType$set(MemorySegment seg, MemorySegment x) {
        constants$4051.const$3.set(seg, x);
    }
    public static MemorySegment get_mimeType$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4051.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void get_mimeType$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4051.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_mimeType get_mimeType(MemorySegment segment, Arena scope) {
        return get_mimeType.ofAddress(get_mimeType$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_readyState)(IXMLDocument*,long*);
     * }
     */
    public interface get_readyState {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_readyState fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4051.const$4, fi, constants$34.const$0, scope);
        }
        static get_readyState ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_readyState$VH() {
        return constants$4051.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_readyState)(IXMLDocument*,long*);
     * }
     */
    public static MemorySegment get_readyState$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4051.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_readyState)(IXMLDocument*,long*);
     * }
     */
    public static void get_readyState$set(MemorySegment seg, MemorySegment x) {
        constants$4051.const$5.set(seg, x);
    }
    public static MemorySegment get_readyState$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4051.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_readyState$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4051.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_readyState get_readyState(MemorySegment segment, Arena scope) {
        return get_readyState.ofAddress(get_readyState$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_charset)(IXMLDocument*,BSTR*);
     * }
     */
    public interface get_charset {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_charset fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4052.const$0, fi, constants$34.const$0, scope);
        }
        static get_charset ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_charset$VH() {
        return constants$4052.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_charset)(IXMLDocument*,BSTR*);
     * }
     */
    public static MemorySegment get_charset$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4052.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_charset)(IXMLDocument*,BSTR*);
     * }
     */
    public static void get_charset$set(MemorySegment seg, MemorySegment x) {
        constants$4052.const$1.set(seg, x);
    }
    public static MemorySegment get_charset$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4052.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_charset$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4052.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_charset get_charset(MemorySegment segment, Arena scope) {
        return get_charset.ofAddress(get_charset$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*put_charset)(IXMLDocument*,BSTR);
     * }
     */
    public interface put_charset {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(put_charset fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4052.const$2, fi, constants$34.const$0, scope);
        }
        static put_charset ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle put_charset$VH() {
        return constants$4052.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*put_charset)(IXMLDocument*,BSTR);
     * }
     */
    public static MemorySegment put_charset$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4052.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*put_charset)(IXMLDocument*,BSTR);
     * }
     */
    public static void put_charset$set(MemorySegment seg, MemorySegment x) {
        constants$4052.const$3.set(seg, x);
    }
    public static MemorySegment put_charset$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4052.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void put_charset$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4052.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static put_charset put_charset(MemorySegment segment, Arena scope) {
        return put_charset.ofAddress(put_charset$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_version)(IXMLDocument*,BSTR*);
     * }
     */
    public interface get_version {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_version fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4052.const$4, fi, constants$34.const$0, scope);
        }
        static get_version ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_version$VH() {
        return constants$4052.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_version)(IXMLDocument*,BSTR*);
     * }
     */
    public static MemorySegment get_version$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4052.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_version)(IXMLDocument*,BSTR*);
     * }
     */
    public static void get_version$set(MemorySegment seg, MemorySegment x) {
        constants$4052.const$5.set(seg, x);
    }
    public static MemorySegment get_version$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4052.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_version$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4052.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_version get_version(MemorySegment segment, Arena scope) {
        return get_version.ofAddress(get_version$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_doctype)(IXMLDocument*,BSTR*);
     * }
     */
    public interface get_doctype {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_doctype fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4053.const$0, fi, constants$34.const$0, scope);
        }
        static get_doctype ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_doctype$VH() {
        return constants$4053.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_doctype)(IXMLDocument*,BSTR*);
     * }
     */
    public static MemorySegment get_doctype$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4053.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_doctype)(IXMLDocument*,BSTR*);
     * }
     */
    public static void get_doctype$set(MemorySegment seg, MemorySegment x) {
        constants$4053.const$1.set(seg, x);
    }
    public static MemorySegment get_doctype$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4053.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_doctype$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4053.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_doctype get_doctype(MemorySegment segment, Arena scope) {
        return get_doctype.ofAddress(get_doctype$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_dtdURL)(IXMLDocument*,BSTR*);
     * }
     */
    public interface get_dtdURL {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_dtdURL fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4053.const$2, fi, constants$34.const$0, scope);
        }
        static get_dtdURL ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_dtdURL$VH() {
        return constants$4053.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_dtdURL)(IXMLDocument*,BSTR*);
     * }
     */
    public static MemorySegment get_dtdURL$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4053.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_dtdURL)(IXMLDocument*,BSTR*);
     * }
     */
    public static void get_dtdURL$set(MemorySegment seg, MemorySegment x) {
        constants$4053.const$3.set(seg, x);
    }
    public static MemorySegment get_dtdURL$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4053.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void get_dtdURL$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4053.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_dtdURL get_dtdURL(MemorySegment segment, Arena scope) {
        return get_dtdURL.ofAddress(get_dtdURL$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*createElement)(IXMLDocument*,VARIANT,VARIANT,IXMLElement**);
     * }
     */
    public interface createElement {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(createElement fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4053.const$4, fi, constants$4045.const$4, scope);
        }
        static createElement ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)constants$4046.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle createElement$VH() {
        return constants$4053.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*createElement)(IXMLDocument*,VARIANT,VARIANT,IXMLElement**);
     * }
     */
    public static MemorySegment createElement$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4053.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*createElement)(IXMLDocument*,VARIANT,VARIANT,IXMLElement**);
     * }
     */
    public static void createElement$set(MemorySegment seg, MemorySegment x) {
        constants$4053.const$5.set(seg, x);
    }
    public static MemorySegment createElement$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4053.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void createElement$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4053.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static createElement createElement(MemorySegment segment, Arena scope) {
        return createElement.ofAddress(createElement$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



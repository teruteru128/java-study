// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
final class constants$381 {

    // Suppresses default constructor, ensuring non-instantiability.
    private constants$381() {}
    static final VarHandle const$0 = constants$376.const$2.varHandle(MemoryLayout.PathElement.groupElement("LoaderFlags"));
    static final VarHandle const$1 = constants$376.const$2.varHandle(MemoryLayout.PathElement.groupElement("NumberOfRvaAndSizes"));
    static final StructLayout const$2 = MemoryLayout.structLayout(
        JAVA_INT.withName("Signature"),
        MemoryLayout.structLayout(
            JAVA_SHORT.withName("Machine"),
            JAVA_SHORT.withName("NumberOfSections"),
            JAVA_INT.withName("TimeDateStamp"),
            JAVA_INT.withName("PointerToSymbolTable"),
            JAVA_INT.withName("NumberOfSymbols"),
            JAVA_SHORT.withName("SizeOfOptionalHeader"),
            JAVA_SHORT.withName("Characteristics")
        ).withName("FileHeader"),
        MemoryLayout.structLayout(
            JAVA_SHORT.withName("Magic"),
            JAVA_BYTE.withName("MajorLinkerVersion"),
            JAVA_BYTE.withName("MinorLinkerVersion"),
            JAVA_INT.withName("SizeOfCode"),
            JAVA_INT.withName("SizeOfInitializedData"),
            JAVA_INT.withName("SizeOfUninitializedData"),
            JAVA_INT.withName("AddressOfEntryPoint"),
            JAVA_INT.withName("BaseOfCode"),
            JAVA_LONG.withByteAlignment(4).withName("ImageBase"),
            JAVA_INT.withName("SectionAlignment"),
            JAVA_INT.withName("FileAlignment"),
            JAVA_SHORT.withName("MajorOperatingSystemVersion"),
            JAVA_SHORT.withName("MinorOperatingSystemVersion"),
            JAVA_SHORT.withName("MajorImageVersion"),
            JAVA_SHORT.withName("MinorImageVersion"),
            JAVA_SHORT.withName("MajorSubsystemVersion"),
            JAVA_SHORT.withName("MinorSubsystemVersion"),
            JAVA_INT.withName("Win32VersionValue"),
            JAVA_INT.withName("SizeOfImage"),
            JAVA_INT.withName("SizeOfHeaders"),
            JAVA_INT.withName("CheckSum"),
            JAVA_SHORT.withName("Subsystem"),
            JAVA_SHORT.withName("DllCharacteristics"),
            JAVA_LONG.withByteAlignment(4).withName("SizeOfStackReserve"),
            JAVA_LONG.withByteAlignment(4).withName("SizeOfStackCommit"),
            JAVA_LONG.withByteAlignment(4).withName("SizeOfHeapReserve"),
            JAVA_LONG.withByteAlignment(4).withName("SizeOfHeapCommit"),
            JAVA_INT.withName("LoaderFlags"),
            JAVA_INT.withName("NumberOfRvaAndSizes"),
            MemoryLayout.sequenceLayout(16, MemoryLayout.structLayout(
                JAVA_INT.withName("VirtualAddress"),
                JAVA_INT.withName("Size")
            ).withName("_IMAGE_DATA_DIRECTORY")).withName("DataDirectory")
        ).withName("OptionalHeader")
    ).withName("_IMAGE_NT_HEADERS64");
    static final VarHandle const$3 = constants$381.const$2.varHandle(MemoryLayout.PathElement.groupElement("Signature"));
    static final StructLayout const$4 = MemoryLayout.structLayout(
        JAVA_INT.withName("Signature"),
        MemoryLayout.structLayout(
            JAVA_SHORT.withName("Machine"),
            JAVA_SHORT.withName("NumberOfSections"),
            JAVA_INT.withName("TimeDateStamp"),
            JAVA_INT.withName("PointerToSymbolTable"),
            JAVA_INT.withName("NumberOfSymbols"),
            JAVA_SHORT.withName("SizeOfOptionalHeader"),
            JAVA_SHORT.withName("Characteristics")
        ).withName("FileHeader"),
        MemoryLayout.structLayout(
            JAVA_SHORT.withName("Magic"),
            JAVA_BYTE.withName("MajorLinkerVersion"),
            JAVA_BYTE.withName("MinorLinkerVersion"),
            JAVA_INT.withName("SizeOfCode"),
            JAVA_INT.withName("SizeOfInitializedData"),
            JAVA_INT.withName("SizeOfUninitializedData"),
            JAVA_INT.withName("AddressOfEntryPoint"),
            JAVA_INT.withName("BaseOfCode"),
            JAVA_INT.withName("BaseOfData"),
            JAVA_INT.withName("ImageBase"),
            JAVA_INT.withName("SectionAlignment"),
            JAVA_INT.withName("FileAlignment"),
            JAVA_SHORT.withName("MajorOperatingSystemVersion"),
            JAVA_SHORT.withName("MinorOperatingSystemVersion"),
            JAVA_SHORT.withName("MajorImageVersion"),
            JAVA_SHORT.withName("MinorImageVersion"),
            JAVA_SHORT.withName("MajorSubsystemVersion"),
            JAVA_SHORT.withName("MinorSubsystemVersion"),
            JAVA_INT.withName("Win32VersionValue"),
            JAVA_INT.withName("SizeOfImage"),
            JAVA_INT.withName("SizeOfHeaders"),
            JAVA_INT.withName("CheckSum"),
            JAVA_SHORT.withName("Subsystem"),
            JAVA_SHORT.withName("DllCharacteristics"),
            JAVA_INT.withName("SizeOfStackReserve"),
            JAVA_INT.withName("SizeOfStackCommit"),
            JAVA_INT.withName("SizeOfHeapReserve"),
            JAVA_INT.withName("SizeOfHeapCommit"),
            JAVA_INT.withName("LoaderFlags"),
            JAVA_INT.withName("NumberOfRvaAndSizes"),
            MemoryLayout.sequenceLayout(16, MemoryLayout.structLayout(
                JAVA_INT.withName("VirtualAddress"),
                JAVA_INT.withName("Size")
            ).withName("_IMAGE_DATA_DIRECTORY")).withName("DataDirectory")
        ).withName("OptionalHeader")
    ).withName("_IMAGE_NT_HEADERS");
    static final VarHandle const$5 = constants$381.const$4.varHandle(MemoryLayout.PathElement.groupElement("Signature"));
}



// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tagEMRPOLYPOLYLINE16 {
 *     EMR emr;
 *     RECTL rclBounds;
 *     DWORD nPolys;
 *     DWORD cpts;
 *     DWORD aPolyCounts[1];
 *     POINTS apts[1];
 * };
 * }
 */
public class tagEMRPOLYPOLYLINE16 {

    public static MemoryLayout $LAYOUT() {
        return constants$1084.const$5;
    }
    public static MemorySegment emr$slice(MemorySegment seg) {
        return seg.asSlice(0, 8);
    }
    public static MemorySegment rclBounds$slice(MemorySegment seg) {
        return seg.asSlice(8, 16);
    }
    public static VarHandle nPolys$VH() {
        return constants$1085.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD nPolys;
     * }
     */
    public static int nPolys$get(MemorySegment seg) {
        return (int)constants$1085.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD nPolys;
     * }
     */
    public static void nPolys$set(MemorySegment seg, int x) {
        constants$1085.const$0.set(seg, x);
    }
    public static int nPolys$get(MemorySegment seg, long index) {
        return (int)constants$1085.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void nPolys$set(MemorySegment seg, long index, int x) {
        constants$1085.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cpts$VH() {
        return constants$1085.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD cpts;
     * }
     */
    public static int cpts$get(MemorySegment seg) {
        return (int)constants$1085.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD cpts;
     * }
     */
    public static void cpts$set(MemorySegment seg, int x) {
        constants$1085.const$1.set(seg, x);
    }
    public static int cpts$get(MemorySegment seg, long index) {
        return (int)constants$1085.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void cpts$set(MemorySegment seg, long index, int x) {
        constants$1085.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment aPolyCounts$slice(MemorySegment seg) {
        return seg.asSlice(32, 4);
    }
    public static MemorySegment apts$slice(MemorySegment seg) {
        return seg.asSlice(36, 4);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct ICreateTypeLib2Vtbl {
 *     HRESULT (*QueryInterface)(ICreateTypeLib2*,const IID*,void**);
 *     ULONG (*AddRef)(ICreateTypeLib2*);
 *     ULONG (*Release)(ICreateTypeLib2*);
 *     HRESULT (*CreateTypeInfo)(ICreateTypeLib2*,LPOLESTR,TYPEKIND,ICreateTypeInfo**);
 *     HRESULT (*SetName)(ICreateTypeLib2*,LPOLESTR);
 *     HRESULT (*SetVersion)(ICreateTypeLib2*,WORD,WORD);
 *     HRESULT (*SetGuid)(ICreateTypeLib2*,const GUID*);
 *     HRESULT (*SetDocString)(ICreateTypeLib2*,LPOLESTR);
 *     HRESULT (*SetHelpFileName)(ICreateTypeLib2*,LPOLESTR);
 *     HRESULT (*SetHelpContext)(ICreateTypeLib2*,DWORD);
 *     HRESULT (*SetLcid)(ICreateTypeLib2*,LCID);
 *     HRESULT (*SetLibFlags)(ICreateTypeLib2*,UINT);
 *     HRESULT (*SaveAllChanges)(ICreateTypeLib2*);
 *     HRESULT (*DeleteTypeInfo)(ICreateTypeLib2*,LPOLESTR);
 *     HRESULT (*SetCustData)(ICreateTypeLib2*,const GUID*,VARIANT*);
 *     HRESULT (*SetHelpStringContext)(ICreateTypeLib2*,ULONG);
 *     HRESULT (*SetHelpStringDll)(ICreateTypeLib2*,LPOLESTR);
 * };
 * }
 */
public class ICreateTypeLib2Vtbl {

    public static MemoryLayout $LAYOUT() {
        return constants$3475.const$1;
    }
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(ICreateTypeLib2*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3475.const$2, fi, constants$37.const$3, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle QueryInterface$VH() {
        return constants$3475.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(ICreateTypeLib2*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3475.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(ICreateTypeLib2*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        constants$3475.const$3.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3475.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3475.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, Arena scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*AddRef)(ICreateTypeLib2*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3475.const$4, fi, constants$18.const$5, scope);
        }
        static AddRef ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle AddRef$VH() {
        return constants$3475.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(ICreateTypeLib2*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3475.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(ICreateTypeLib2*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        constants$3475.const$5.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3475.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3475.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, Arena scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*Release)(ICreateTypeLib2*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3476.const$0, fi, constants$18.const$5, scope);
        }
        static Release ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Release$VH() {
        return constants$3476.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(ICreateTypeLib2*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3476.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(ICreateTypeLib2*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        constants$3476.const$1.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3476.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3476.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, Arena scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*CreateTypeInfo)(ICreateTypeLib2*,LPOLESTR,TYPEKIND,ICreateTypeInfo**);
     * }
     */
    public interface CreateTypeInfo {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(CreateTypeInfo fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3476.const$2, fi, constants$586.const$5, scope);
        }
        static CreateTypeInfo ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)constants$2117.const$1.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CreateTypeInfo$VH() {
        return constants$3476.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*CreateTypeInfo)(ICreateTypeLib2*,LPOLESTR,TYPEKIND,ICreateTypeInfo**);
     * }
     */
    public static MemorySegment CreateTypeInfo$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3476.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*CreateTypeInfo)(ICreateTypeLib2*,LPOLESTR,TYPEKIND,ICreateTypeInfo**);
     * }
     */
    public static void CreateTypeInfo$set(MemorySegment seg, MemorySegment x) {
        constants$3476.const$3.set(seg, x);
    }
    public static MemorySegment CreateTypeInfo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3476.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void CreateTypeInfo$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3476.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static CreateTypeInfo CreateTypeInfo(MemorySegment segment, Arena scope) {
        return CreateTypeInfo.ofAddress(CreateTypeInfo$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetName)(ICreateTypeLib2*,LPOLESTR);
     * }
     */
    public interface SetName {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetName fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3476.const$4, fi, constants$34.const$0, scope);
        }
        static SetName ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetName$VH() {
        return constants$3476.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetName)(ICreateTypeLib2*,LPOLESTR);
     * }
     */
    public static MemorySegment SetName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3476.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetName)(ICreateTypeLib2*,LPOLESTR);
     * }
     */
    public static void SetName$set(MemorySegment seg, MemorySegment x) {
        constants$3476.const$5.set(seg, x);
    }
    public static MemorySegment SetName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3476.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void SetName$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3476.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetName SetName(MemorySegment segment, Arena scope) {
        return SetName.ofAddress(SetName$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetVersion)(ICreateTypeLib2*,WORD,WORD);
     * }
     */
    public interface SetVersion {

        int apply(java.lang.foreign.MemorySegment _x0, short _x1, short _x2);
        static MemorySegment allocate(SetVersion fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3477.const$0, fi, constants$736.const$1, scope);
        }
        static SetVersion ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, short __x1, short __x2) -> {
                try {
                    return (int)constants$3448.const$3.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetVersion$VH() {
        return constants$3477.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetVersion)(ICreateTypeLib2*,WORD,WORD);
     * }
     */
    public static MemorySegment SetVersion$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3477.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetVersion)(ICreateTypeLib2*,WORD,WORD);
     * }
     */
    public static void SetVersion$set(MemorySegment seg, MemorySegment x) {
        constants$3477.const$1.set(seg, x);
    }
    public static MemorySegment SetVersion$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3477.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void SetVersion$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3477.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetVersion SetVersion(MemorySegment segment, Arena scope) {
        return SetVersion.ofAddress(SetVersion$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetGuid)(ICreateTypeLib2*,const GUID*);
     * }
     */
    public interface SetGuid {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetGuid fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3477.const$2, fi, constants$34.const$0, scope);
        }
        static SetGuid ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetGuid$VH() {
        return constants$3477.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetGuid)(ICreateTypeLib2*,const GUID*);
     * }
     */
    public static MemorySegment SetGuid$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3477.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetGuid)(ICreateTypeLib2*,const GUID*);
     * }
     */
    public static void SetGuid$set(MemorySegment seg, MemorySegment x) {
        constants$3477.const$3.set(seg, x);
    }
    public static MemorySegment SetGuid$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3477.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void SetGuid$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3477.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetGuid SetGuid(MemorySegment segment, Arena scope) {
        return SetGuid.ofAddress(SetGuid$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetDocString)(ICreateTypeLib2*,LPOLESTR);
     * }
     */
    public interface SetDocString {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetDocString fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3477.const$4, fi, constants$34.const$0, scope);
        }
        static SetDocString ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetDocString$VH() {
        return constants$3477.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetDocString)(ICreateTypeLib2*,LPOLESTR);
     * }
     */
    public static MemorySegment SetDocString$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3477.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetDocString)(ICreateTypeLib2*,LPOLESTR);
     * }
     */
    public static void SetDocString$set(MemorySegment seg, MemorySegment x) {
        constants$3477.const$5.set(seg, x);
    }
    public static MemorySegment SetDocString$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3477.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void SetDocString$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3477.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetDocString SetDocString(MemorySegment segment, Arena scope) {
        return SetDocString.ofAddress(SetDocString$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetHelpFileName)(ICreateTypeLib2*,LPOLESTR);
     * }
     */
    public interface SetHelpFileName {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetHelpFileName fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3478.const$0, fi, constants$34.const$0, scope);
        }
        static SetHelpFileName ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetHelpFileName$VH() {
        return constants$3478.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetHelpFileName)(ICreateTypeLib2*,LPOLESTR);
     * }
     */
    public static MemorySegment SetHelpFileName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3478.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetHelpFileName)(ICreateTypeLib2*,LPOLESTR);
     * }
     */
    public static void SetHelpFileName$set(MemorySegment seg, MemorySegment x) {
        constants$3478.const$1.set(seg, x);
    }
    public static MemorySegment SetHelpFileName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3478.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void SetHelpFileName$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3478.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetHelpFileName SetHelpFileName(MemorySegment segment, Arena scope) {
        return SetHelpFileName.ofAddress(SetHelpFileName$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetHelpContext)(ICreateTypeLib2*,DWORD);
     * }
     */
    public interface SetHelpContext {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(SetHelpContext fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3478.const$2, fi, constants$65.const$2, scope);
        }
        static SetHelpContext ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)constants$800.const$4.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetHelpContext$VH() {
        return constants$3478.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetHelpContext)(ICreateTypeLib2*,DWORD);
     * }
     */
    public static MemorySegment SetHelpContext$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3478.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetHelpContext)(ICreateTypeLib2*,DWORD);
     * }
     */
    public static void SetHelpContext$set(MemorySegment seg, MemorySegment x) {
        constants$3478.const$3.set(seg, x);
    }
    public static MemorySegment SetHelpContext$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3478.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void SetHelpContext$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3478.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetHelpContext SetHelpContext(MemorySegment segment, Arena scope) {
        return SetHelpContext.ofAddress(SetHelpContext$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetLcid)(ICreateTypeLib2*,LCID);
     * }
     */
    public interface SetLcid {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(SetLcid fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3478.const$4, fi, constants$65.const$2, scope);
        }
        static SetLcid ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)constants$800.const$4.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetLcid$VH() {
        return constants$3478.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetLcid)(ICreateTypeLib2*,LCID);
     * }
     */
    public static MemorySegment SetLcid$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3478.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetLcid)(ICreateTypeLib2*,LCID);
     * }
     */
    public static void SetLcid$set(MemorySegment seg, MemorySegment x) {
        constants$3478.const$5.set(seg, x);
    }
    public static MemorySegment SetLcid$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3478.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void SetLcid$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3478.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetLcid SetLcid(MemorySegment segment, Arena scope) {
        return SetLcid.ofAddress(SetLcid$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetLibFlags)(ICreateTypeLib2*,UINT);
     * }
     */
    public interface SetLibFlags {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(SetLibFlags fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3479.const$0, fi, constants$65.const$2, scope);
        }
        static SetLibFlags ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)constants$800.const$4.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetLibFlags$VH() {
        return constants$3479.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetLibFlags)(ICreateTypeLib2*,UINT);
     * }
     */
    public static MemorySegment SetLibFlags$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3479.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetLibFlags)(ICreateTypeLib2*,UINT);
     * }
     */
    public static void SetLibFlags$set(MemorySegment seg, MemorySegment x) {
        constants$3479.const$1.set(seg, x);
    }
    public static MemorySegment SetLibFlags$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3479.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void SetLibFlags$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3479.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetLibFlags SetLibFlags(MemorySegment segment, Arena scope) {
        return SetLibFlags.ofAddress(SetLibFlags$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SaveAllChanges)(ICreateTypeLib2*);
     * }
     */
    public interface SaveAllChanges {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(SaveAllChanges fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3479.const$2, fi, constants$18.const$5, scope);
        }
        static SaveAllChanges ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SaveAllChanges$VH() {
        return constants$3479.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SaveAllChanges)(ICreateTypeLib2*);
     * }
     */
    public static MemorySegment SaveAllChanges$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3479.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SaveAllChanges)(ICreateTypeLib2*);
     * }
     */
    public static void SaveAllChanges$set(MemorySegment seg, MemorySegment x) {
        constants$3479.const$3.set(seg, x);
    }
    public static MemorySegment SaveAllChanges$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3479.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void SaveAllChanges$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3479.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static SaveAllChanges SaveAllChanges(MemorySegment segment, Arena scope) {
        return SaveAllChanges.ofAddress(SaveAllChanges$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*DeleteTypeInfo)(ICreateTypeLib2*,LPOLESTR);
     * }
     */
    public interface DeleteTypeInfo {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(DeleteTypeInfo fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3479.const$4, fi, constants$34.const$0, scope);
        }
        static DeleteTypeInfo ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle DeleteTypeInfo$VH() {
        return constants$3479.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*DeleteTypeInfo)(ICreateTypeLib2*,LPOLESTR);
     * }
     */
    public static MemorySegment DeleteTypeInfo$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3479.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*DeleteTypeInfo)(ICreateTypeLib2*,LPOLESTR);
     * }
     */
    public static void DeleteTypeInfo$set(MemorySegment seg, MemorySegment x) {
        constants$3479.const$5.set(seg, x);
    }
    public static MemorySegment DeleteTypeInfo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3479.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void DeleteTypeInfo$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3479.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static DeleteTypeInfo DeleteTypeInfo(MemorySegment segment, Arena scope) {
        return DeleteTypeInfo.ofAddress(DeleteTypeInfo$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetCustData)(ICreateTypeLib2*,const GUID*,VARIANT*);
     * }
     */
    public interface SetCustData {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(SetCustData fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3480.const$0, fi, constants$37.const$3, scope);
        }
        static SetCustData ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetCustData$VH() {
        return constants$3480.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetCustData)(ICreateTypeLib2*,const GUID*,VARIANT*);
     * }
     */
    public static MemorySegment SetCustData$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3480.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetCustData)(ICreateTypeLib2*,const GUID*,VARIANT*);
     * }
     */
    public static void SetCustData$set(MemorySegment seg, MemorySegment x) {
        constants$3480.const$1.set(seg, x);
    }
    public static MemorySegment SetCustData$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3480.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void SetCustData$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3480.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetCustData SetCustData(MemorySegment segment, Arena scope) {
        return SetCustData.ofAddress(SetCustData$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetHelpStringContext)(ICreateTypeLib2*,ULONG);
     * }
     */
    public interface SetHelpStringContext {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(SetHelpStringContext fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3480.const$2, fi, constants$65.const$2, scope);
        }
        static SetHelpStringContext ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)constants$800.const$4.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetHelpStringContext$VH() {
        return constants$3480.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetHelpStringContext)(ICreateTypeLib2*,ULONG);
     * }
     */
    public static MemorySegment SetHelpStringContext$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3480.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetHelpStringContext)(ICreateTypeLib2*,ULONG);
     * }
     */
    public static void SetHelpStringContext$set(MemorySegment seg, MemorySegment x) {
        constants$3480.const$3.set(seg, x);
    }
    public static MemorySegment SetHelpStringContext$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3480.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void SetHelpStringContext$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3480.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetHelpStringContext SetHelpStringContext(MemorySegment segment, Arena scope) {
        return SetHelpStringContext.ofAddress(SetHelpStringContext$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetHelpStringDll)(ICreateTypeLib2*,LPOLESTR);
     * }
     */
    public interface SetHelpStringDll {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetHelpStringDll fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3480.const$4, fi, constants$34.const$0, scope);
        }
        static SetHelpStringDll ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetHelpStringDll$VH() {
        return constants$3480.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetHelpStringDll)(ICreateTypeLib2*,LPOLESTR);
     * }
     */
    public static MemorySegment SetHelpStringDll$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3480.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetHelpStringDll)(ICreateTypeLib2*,LPOLESTR);
     * }
     */
    public static void SetHelpStringDll$set(MemorySegment seg, MemorySegment x) {
        constants$3480.const$5.set(seg, x);
    }
    public static MemorySegment SetHelpStringDll$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3480.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void SetHelpStringDll$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3480.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetHelpStringDll SetHelpStringDll(MemorySegment segment, Arena scope) {
        return SetHelpStringDll.ofAddress(SetHelpStringDll$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



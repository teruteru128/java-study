// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct ICreateTypeInfoVtbl {
 *     HRESULT (*QueryInterface)(ICreateTypeInfo*,const IID*,void**);
 *     ULONG (*AddRef)(ICreateTypeInfo*);
 *     ULONG (*Release)(ICreateTypeInfo*);
 *     HRESULT (*SetGuid)(ICreateTypeInfo*,const GUID*);
 *     HRESULT (*SetTypeFlags)(ICreateTypeInfo*,UINT);
 *     HRESULT (*SetDocString)(ICreateTypeInfo*,LPOLESTR);
 *     HRESULT (*SetHelpContext)(ICreateTypeInfo*,DWORD);
 *     HRESULT (*SetVersion)(ICreateTypeInfo*,WORD,WORD);
 *     HRESULT (*AddRefTypeInfo)(ICreateTypeInfo*,ITypeInfo*,HREFTYPE*);
 *     HRESULT (*AddFuncDesc)(ICreateTypeInfo*,UINT,FUNCDESC*);
 *     HRESULT (*AddImplType)(ICreateTypeInfo*,UINT,HREFTYPE);
 *     HRESULT (*SetImplTypeFlags)(ICreateTypeInfo*,UINT,INT);
 *     HRESULT (*SetAlignment)(ICreateTypeInfo*,WORD);
 *     HRESULT (*SetSchema)(ICreateTypeInfo*,LPOLESTR);
 *     HRESULT (*AddVarDesc)(ICreateTypeInfo*,UINT,VARDESC*);
 *     HRESULT (*SetFuncAndParamNames)(ICreateTypeInfo*,UINT,LPOLESTR*,UINT);
 *     HRESULT (*SetVarName)(ICreateTypeInfo*,UINT,LPOLESTR);
 *     HRESULT (*SetTypeDescAlias)(ICreateTypeInfo*,TYPEDESC*);
 *     HRESULT (*DefineFuncAsDllEntry)(ICreateTypeInfo*,UINT,LPOLESTR,LPOLESTR);
 *     HRESULT (*SetFuncDocString)(ICreateTypeInfo*,UINT,LPOLESTR);
 *     HRESULT (*SetVarDocString)(ICreateTypeInfo*,UINT,LPOLESTR);
 *     HRESULT (*SetFuncHelpContext)(ICreateTypeInfo*,UINT,DWORD);
 *     HRESULT (*SetVarHelpContext)(ICreateTypeInfo*,UINT,DWORD);
 *     HRESULT (*SetMops)(ICreateTypeInfo*,UINT,BSTR);
 *     HRESULT (*SetTypeIdldesc)(ICreateTypeInfo*,IDLDESC*);
 *     HRESULT (*LayOut)(ICreateTypeInfo*);
 * };
 * }
 */
public class ICreateTypeInfoVtbl {

    public static MemoryLayout $LAYOUT() {
        return constants$3445.const$5;
    }
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(ICreateTypeInfo*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3446.const$0, fi, constants$37.const$3, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle QueryInterface$VH() {
        return constants$3446.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(ICreateTypeInfo*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3446.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(ICreateTypeInfo*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        constants$3446.const$1.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3446.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3446.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, Arena scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*AddRef)(ICreateTypeInfo*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3446.const$2, fi, constants$18.const$5, scope);
        }
        static AddRef ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle AddRef$VH() {
        return constants$3446.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(ICreateTypeInfo*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3446.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(ICreateTypeInfo*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        constants$3446.const$3.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3446.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3446.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, Arena scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*Release)(ICreateTypeInfo*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3446.const$4, fi, constants$18.const$5, scope);
        }
        static Release ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Release$VH() {
        return constants$3446.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(ICreateTypeInfo*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3446.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(ICreateTypeInfo*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        constants$3446.const$5.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3446.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3446.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, Arena scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetGuid)(ICreateTypeInfo*,const GUID*);
     * }
     */
    public interface SetGuid {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetGuid fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3447.const$0, fi, constants$34.const$0, scope);
        }
        static SetGuid ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetGuid$VH() {
        return constants$3447.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetGuid)(ICreateTypeInfo*,const GUID*);
     * }
     */
    public static MemorySegment SetGuid$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3447.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetGuid)(ICreateTypeInfo*,const GUID*);
     * }
     */
    public static void SetGuid$set(MemorySegment seg, MemorySegment x) {
        constants$3447.const$1.set(seg, x);
    }
    public static MemorySegment SetGuid$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3447.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void SetGuid$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3447.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetGuid SetGuid(MemorySegment segment, Arena scope) {
        return SetGuid.ofAddress(SetGuid$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetTypeFlags)(ICreateTypeInfo*,UINT);
     * }
     */
    public interface SetTypeFlags {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(SetTypeFlags fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3447.const$2, fi, constants$65.const$2, scope);
        }
        static SetTypeFlags ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)constants$800.const$4.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetTypeFlags$VH() {
        return constants$3447.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetTypeFlags)(ICreateTypeInfo*,UINT);
     * }
     */
    public static MemorySegment SetTypeFlags$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3447.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetTypeFlags)(ICreateTypeInfo*,UINT);
     * }
     */
    public static void SetTypeFlags$set(MemorySegment seg, MemorySegment x) {
        constants$3447.const$3.set(seg, x);
    }
    public static MemorySegment SetTypeFlags$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3447.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void SetTypeFlags$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3447.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetTypeFlags SetTypeFlags(MemorySegment segment, Arena scope) {
        return SetTypeFlags.ofAddress(SetTypeFlags$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetDocString)(ICreateTypeInfo*,LPOLESTR);
     * }
     */
    public interface SetDocString {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetDocString fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3447.const$4, fi, constants$34.const$0, scope);
        }
        static SetDocString ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetDocString$VH() {
        return constants$3447.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetDocString)(ICreateTypeInfo*,LPOLESTR);
     * }
     */
    public static MemorySegment SetDocString$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3447.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetDocString)(ICreateTypeInfo*,LPOLESTR);
     * }
     */
    public static void SetDocString$set(MemorySegment seg, MemorySegment x) {
        constants$3447.const$5.set(seg, x);
    }
    public static MemorySegment SetDocString$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3447.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void SetDocString$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3447.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetDocString SetDocString(MemorySegment segment, Arena scope) {
        return SetDocString.ofAddress(SetDocString$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetHelpContext)(ICreateTypeInfo*,DWORD);
     * }
     */
    public interface SetHelpContext {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(SetHelpContext fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3448.const$0, fi, constants$65.const$2, scope);
        }
        static SetHelpContext ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)constants$800.const$4.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetHelpContext$VH() {
        return constants$3448.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetHelpContext)(ICreateTypeInfo*,DWORD);
     * }
     */
    public static MemorySegment SetHelpContext$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3448.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetHelpContext)(ICreateTypeInfo*,DWORD);
     * }
     */
    public static void SetHelpContext$set(MemorySegment seg, MemorySegment x) {
        constants$3448.const$1.set(seg, x);
    }
    public static MemorySegment SetHelpContext$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3448.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void SetHelpContext$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3448.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetHelpContext SetHelpContext(MemorySegment segment, Arena scope) {
        return SetHelpContext.ofAddress(SetHelpContext$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetVersion)(ICreateTypeInfo*,WORD,WORD);
     * }
     */
    public interface SetVersion {

        int apply(java.lang.foreign.MemorySegment _x0, short _x1, short _x2);
        static MemorySegment allocate(SetVersion fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3448.const$2, fi, constants$736.const$1, scope);
        }
        static SetVersion ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, short __x1, short __x2) -> {
                try {
                    return (int)constants$3448.const$3.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetVersion$VH() {
        return constants$3448.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetVersion)(ICreateTypeInfo*,WORD,WORD);
     * }
     */
    public static MemorySegment SetVersion$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3448.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetVersion)(ICreateTypeInfo*,WORD,WORD);
     * }
     */
    public static void SetVersion$set(MemorySegment seg, MemorySegment x) {
        constants$3448.const$4.set(seg, x);
    }
    public static MemorySegment SetVersion$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3448.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void SetVersion$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3448.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetVersion SetVersion(MemorySegment segment, Arena scope) {
        return SetVersion.ofAddress(SetVersion$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*AddRefTypeInfo)(ICreateTypeInfo*,ITypeInfo*,HREFTYPE*);
     * }
     */
    public interface AddRefTypeInfo {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(AddRefTypeInfo fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3448.const$5, fi, constants$37.const$3, scope);
        }
        static AddRefTypeInfo ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle AddRefTypeInfo$VH() {
        return constants$3449.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*AddRefTypeInfo)(ICreateTypeInfo*,ITypeInfo*,HREFTYPE*);
     * }
     */
    public static MemorySegment AddRefTypeInfo$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3449.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*AddRefTypeInfo)(ICreateTypeInfo*,ITypeInfo*,HREFTYPE*);
     * }
     */
    public static void AddRefTypeInfo$set(MemorySegment seg, MemorySegment x) {
        constants$3449.const$0.set(seg, x);
    }
    public static MemorySegment AddRefTypeInfo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3449.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRefTypeInfo$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3449.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRefTypeInfo AddRefTypeInfo(MemorySegment segment, Arena scope) {
        return AddRefTypeInfo.ofAddress(AddRefTypeInfo$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*AddFuncDesc)(ICreateTypeInfo*,UINT,FUNCDESC*);
     * }
     */
    public interface AddFuncDesc {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(AddFuncDesc fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3449.const$1, fi, constants$485.const$5, scope);
        }
        static AddFuncDesc ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$1770.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle AddFuncDesc$VH() {
        return constants$3449.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*AddFuncDesc)(ICreateTypeInfo*,UINT,FUNCDESC*);
     * }
     */
    public static MemorySegment AddFuncDesc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3449.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*AddFuncDesc)(ICreateTypeInfo*,UINT,FUNCDESC*);
     * }
     */
    public static void AddFuncDesc$set(MemorySegment seg, MemorySegment x) {
        constants$3449.const$2.set(seg, x);
    }
    public static MemorySegment AddFuncDesc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3449.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void AddFuncDesc$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3449.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddFuncDesc AddFuncDesc(MemorySegment segment, Arena scope) {
        return AddFuncDesc.ofAddress(AddFuncDesc$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*AddImplType)(ICreateTypeInfo*,UINT,HREFTYPE);
     * }
     */
    public interface AddImplType {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2);
        static MemorySegment allocate(AddImplType fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3449.const$3, fi, constants$67.const$1, scope);
        }
        static AddImplType ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2) -> {
                try {
                    return (int)constants$3030.const$1.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle AddImplType$VH() {
        return constants$3449.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*AddImplType)(ICreateTypeInfo*,UINT,HREFTYPE);
     * }
     */
    public static MemorySegment AddImplType$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3449.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*AddImplType)(ICreateTypeInfo*,UINT,HREFTYPE);
     * }
     */
    public static void AddImplType$set(MemorySegment seg, MemorySegment x) {
        constants$3449.const$4.set(seg, x);
    }
    public static MemorySegment AddImplType$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3449.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void AddImplType$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3449.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddImplType AddImplType(MemorySegment segment, Arena scope) {
        return AddImplType.ofAddress(AddImplType$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetImplTypeFlags)(ICreateTypeInfo*,UINT,INT);
     * }
     */
    public interface SetImplTypeFlags {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2);
        static MemorySegment allocate(SetImplTypeFlags fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3449.const$5, fi, constants$67.const$1, scope);
        }
        static SetImplTypeFlags ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2) -> {
                try {
                    return (int)constants$3030.const$1.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetImplTypeFlags$VH() {
        return constants$3450.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetImplTypeFlags)(ICreateTypeInfo*,UINT,INT);
     * }
     */
    public static MemorySegment SetImplTypeFlags$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3450.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetImplTypeFlags)(ICreateTypeInfo*,UINT,INT);
     * }
     */
    public static void SetImplTypeFlags$set(MemorySegment seg, MemorySegment x) {
        constants$3450.const$0.set(seg, x);
    }
    public static MemorySegment SetImplTypeFlags$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3450.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void SetImplTypeFlags$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3450.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetImplTypeFlags SetImplTypeFlags(MemorySegment segment, Arena scope) {
        return SetImplTypeFlags.ofAddress(SetImplTypeFlags$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetAlignment)(ICreateTypeInfo*,WORD);
     * }
     */
    public interface SetAlignment {

        int apply(java.lang.foreign.MemorySegment _x0, short _x1);
        static MemorySegment allocate(SetAlignment fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3450.const$1, fi, constants$1463.const$0, scope);
        }
        static SetAlignment ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, short __x1) -> {
                try {
                    return (int)constants$3450.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetAlignment$VH() {
        return constants$3450.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetAlignment)(ICreateTypeInfo*,WORD);
     * }
     */
    public static MemorySegment SetAlignment$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3450.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetAlignment)(ICreateTypeInfo*,WORD);
     * }
     */
    public static void SetAlignment$set(MemorySegment seg, MemorySegment x) {
        constants$3450.const$3.set(seg, x);
    }
    public static MemorySegment SetAlignment$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3450.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void SetAlignment$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3450.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetAlignment SetAlignment(MemorySegment segment, Arena scope) {
        return SetAlignment.ofAddress(SetAlignment$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetSchema)(ICreateTypeInfo*,LPOLESTR);
     * }
     */
    public interface SetSchema {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetSchema fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3450.const$4, fi, constants$34.const$0, scope);
        }
        static SetSchema ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetSchema$VH() {
        return constants$3450.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetSchema)(ICreateTypeInfo*,LPOLESTR);
     * }
     */
    public static MemorySegment SetSchema$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3450.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetSchema)(ICreateTypeInfo*,LPOLESTR);
     * }
     */
    public static void SetSchema$set(MemorySegment seg, MemorySegment x) {
        constants$3450.const$5.set(seg, x);
    }
    public static MemorySegment SetSchema$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3450.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void SetSchema$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3450.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetSchema SetSchema(MemorySegment segment, Arena scope) {
        return SetSchema.ofAddress(SetSchema$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*AddVarDesc)(ICreateTypeInfo*,UINT,VARDESC*);
     * }
     */
    public interface AddVarDesc {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(AddVarDesc fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3451.const$0, fi, constants$485.const$5, scope);
        }
        static AddVarDesc ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$1770.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle AddVarDesc$VH() {
        return constants$3451.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*AddVarDesc)(ICreateTypeInfo*,UINT,VARDESC*);
     * }
     */
    public static MemorySegment AddVarDesc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3451.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*AddVarDesc)(ICreateTypeInfo*,UINT,VARDESC*);
     * }
     */
    public static void AddVarDesc$set(MemorySegment seg, MemorySegment x) {
        constants$3451.const$1.set(seg, x);
    }
    public static MemorySegment AddVarDesc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3451.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void AddVarDesc$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3451.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddVarDesc AddVarDesc(MemorySegment segment, Arena scope) {
        return AddVarDesc.ofAddress(AddVarDesc$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetFuncAndParamNames)(ICreateTypeInfo*,UINT,LPOLESTR*,UINT);
     * }
     */
    public interface SetFuncAndParamNames {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, int _x3);
        static MemorySegment allocate(SetFuncAndParamNames fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3451.const$2, fi, constants$590.const$0, scope);
        }
        static SetFuncAndParamNames ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, int __x3) -> {
                try {
                    return (int)constants$3451.const$3.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetFuncAndParamNames$VH() {
        return constants$3451.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetFuncAndParamNames)(ICreateTypeInfo*,UINT,LPOLESTR*,UINT);
     * }
     */
    public static MemorySegment SetFuncAndParamNames$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3451.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetFuncAndParamNames)(ICreateTypeInfo*,UINT,LPOLESTR*,UINT);
     * }
     */
    public static void SetFuncAndParamNames$set(MemorySegment seg, MemorySegment x) {
        constants$3451.const$4.set(seg, x);
    }
    public static MemorySegment SetFuncAndParamNames$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3451.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void SetFuncAndParamNames$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3451.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetFuncAndParamNames SetFuncAndParamNames(MemorySegment segment, Arena scope) {
        return SetFuncAndParamNames.ofAddress(SetFuncAndParamNames$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetVarName)(ICreateTypeInfo*,UINT,LPOLESTR);
     * }
     */
    public interface SetVarName {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(SetVarName fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3451.const$5, fi, constants$485.const$5, scope);
        }
        static SetVarName ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$1770.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetVarName$VH() {
        return constants$3452.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetVarName)(ICreateTypeInfo*,UINT,LPOLESTR);
     * }
     */
    public static MemorySegment SetVarName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3452.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetVarName)(ICreateTypeInfo*,UINT,LPOLESTR);
     * }
     */
    public static void SetVarName$set(MemorySegment seg, MemorySegment x) {
        constants$3452.const$0.set(seg, x);
    }
    public static MemorySegment SetVarName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3452.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void SetVarName$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3452.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetVarName SetVarName(MemorySegment segment, Arena scope) {
        return SetVarName.ofAddress(SetVarName$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetTypeDescAlias)(ICreateTypeInfo*,TYPEDESC*);
     * }
     */
    public interface SetTypeDescAlias {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetTypeDescAlias fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3452.const$1, fi, constants$34.const$0, scope);
        }
        static SetTypeDescAlias ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetTypeDescAlias$VH() {
        return constants$3452.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetTypeDescAlias)(ICreateTypeInfo*,TYPEDESC*);
     * }
     */
    public static MemorySegment SetTypeDescAlias$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3452.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetTypeDescAlias)(ICreateTypeInfo*,TYPEDESC*);
     * }
     */
    public static void SetTypeDescAlias$set(MemorySegment seg, MemorySegment x) {
        constants$3452.const$2.set(seg, x);
    }
    public static MemorySegment SetTypeDescAlias$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3452.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void SetTypeDescAlias$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3452.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetTypeDescAlias SetTypeDescAlias(MemorySegment segment, Arena scope) {
        return SetTypeDescAlias.ofAddress(SetTypeDescAlias$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*DefineFuncAsDllEntry)(ICreateTypeInfo*,UINT,LPOLESTR,LPOLESTR);
     * }
     */
    public interface DefineFuncAsDllEntry {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(DefineFuncAsDllEntry fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3452.const$3, fi, constants$585.const$2, scope);
        }
        static DefineFuncAsDllEntry ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)constants$2151.const$1.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle DefineFuncAsDllEntry$VH() {
        return constants$3452.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*DefineFuncAsDllEntry)(ICreateTypeInfo*,UINT,LPOLESTR,LPOLESTR);
     * }
     */
    public static MemorySegment DefineFuncAsDllEntry$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3452.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*DefineFuncAsDllEntry)(ICreateTypeInfo*,UINT,LPOLESTR,LPOLESTR);
     * }
     */
    public static void DefineFuncAsDllEntry$set(MemorySegment seg, MemorySegment x) {
        constants$3452.const$4.set(seg, x);
    }
    public static MemorySegment DefineFuncAsDllEntry$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3452.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void DefineFuncAsDllEntry$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3452.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static DefineFuncAsDllEntry DefineFuncAsDllEntry(MemorySegment segment, Arena scope) {
        return DefineFuncAsDllEntry.ofAddress(DefineFuncAsDllEntry$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetFuncDocString)(ICreateTypeInfo*,UINT,LPOLESTR);
     * }
     */
    public interface SetFuncDocString {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(SetFuncDocString fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3452.const$5, fi, constants$485.const$5, scope);
        }
        static SetFuncDocString ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$1770.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetFuncDocString$VH() {
        return constants$3453.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetFuncDocString)(ICreateTypeInfo*,UINT,LPOLESTR);
     * }
     */
    public static MemorySegment SetFuncDocString$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3453.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetFuncDocString)(ICreateTypeInfo*,UINT,LPOLESTR);
     * }
     */
    public static void SetFuncDocString$set(MemorySegment seg, MemorySegment x) {
        constants$3453.const$0.set(seg, x);
    }
    public static MemorySegment SetFuncDocString$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3453.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void SetFuncDocString$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3453.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetFuncDocString SetFuncDocString(MemorySegment segment, Arena scope) {
        return SetFuncDocString.ofAddress(SetFuncDocString$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetVarDocString)(ICreateTypeInfo*,UINT,LPOLESTR);
     * }
     */
    public interface SetVarDocString {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(SetVarDocString fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3453.const$1, fi, constants$485.const$5, scope);
        }
        static SetVarDocString ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$1770.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetVarDocString$VH() {
        return constants$3453.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetVarDocString)(ICreateTypeInfo*,UINT,LPOLESTR);
     * }
     */
    public static MemorySegment SetVarDocString$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3453.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetVarDocString)(ICreateTypeInfo*,UINT,LPOLESTR);
     * }
     */
    public static void SetVarDocString$set(MemorySegment seg, MemorySegment x) {
        constants$3453.const$2.set(seg, x);
    }
    public static MemorySegment SetVarDocString$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3453.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void SetVarDocString$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3453.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetVarDocString SetVarDocString(MemorySegment segment, Arena scope) {
        return SetVarDocString.ofAddress(SetVarDocString$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetFuncHelpContext)(ICreateTypeInfo*,UINT,DWORD);
     * }
     */
    public interface SetFuncHelpContext {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2);
        static MemorySegment allocate(SetFuncHelpContext fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3453.const$3, fi, constants$67.const$1, scope);
        }
        static SetFuncHelpContext ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2) -> {
                try {
                    return (int)constants$3030.const$1.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetFuncHelpContext$VH() {
        return constants$3453.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetFuncHelpContext)(ICreateTypeInfo*,UINT,DWORD);
     * }
     */
    public static MemorySegment SetFuncHelpContext$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3453.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetFuncHelpContext)(ICreateTypeInfo*,UINT,DWORD);
     * }
     */
    public static void SetFuncHelpContext$set(MemorySegment seg, MemorySegment x) {
        constants$3453.const$4.set(seg, x);
    }
    public static MemorySegment SetFuncHelpContext$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3453.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void SetFuncHelpContext$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3453.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetFuncHelpContext SetFuncHelpContext(MemorySegment segment, Arena scope) {
        return SetFuncHelpContext.ofAddress(SetFuncHelpContext$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetVarHelpContext)(ICreateTypeInfo*,UINT,DWORD);
     * }
     */
    public interface SetVarHelpContext {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2);
        static MemorySegment allocate(SetVarHelpContext fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3453.const$5, fi, constants$67.const$1, scope);
        }
        static SetVarHelpContext ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2) -> {
                try {
                    return (int)constants$3030.const$1.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetVarHelpContext$VH() {
        return constants$3454.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetVarHelpContext)(ICreateTypeInfo*,UINT,DWORD);
     * }
     */
    public static MemorySegment SetVarHelpContext$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3454.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetVarHelpContext)(ICreateTypeInfo*,UINT,DWORD);
     * }
     */
    public static void SetVarHelpContext$set(MemorySegment seg, MemorySegment x) {
        constants$3454.const$0.set(seg, x);
    }
    public static MemorySegment SetVarHelpContext$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3454.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void SetVarHelpContext$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3454.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetVarHelpContext SetVarHelpContext(MemorySegment segment, Arena scope) {
        return SetVarHelpContext.ofAddress(SetVarHelpContext$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetMops)(ICreateTypeInfo*,UINT,BSTR);
     * }
     */
    public interface SetMops {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(SetMops fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3454.const$1, fi, constants$485.const$5, scope);
        }
        static SetMops ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$1770.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetMops$VH() {
        return constants$3454.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetMops)(ICreateTypeInfo*,UINT,BSTR);
     * }
     */
    public static MemorySegment SetMops$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3454.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetMops)(ICreateTypeInfo*,UINT,BSTR);
     * }
     */
    public static void SetMops$set(MemorySegment seg, MemorySegment x) {
        constants$3454.const$2.set(seg, x);
    }
    public static MemorySegment SetMops$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3454.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void SetMops$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3454.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetMops SetMops(MemorySegment segment, Arena scope) {
        return SetMops.ofAddress(SetMops$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetTypeIdldesc)(ICreateTypeInfo*,IDLDESC*);
     * }
     */
    public interface SetTypeIdldesc {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetTypeIdldesc fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3454.const$3, fi, constants$34.const$0, scope);
        }
        static SetTypeIdldesc ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetTypeIdldesc$VH() {
        return constants$3454.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetTypeIdldesc)(ICreateTypeInfo*,IDLDESC*);
     * }
     */
    public static MemorySegment SetTypeIdldesc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3454.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetTypeIdldesc)(ICreateTypeInfo*,IDLDESC*);
     * }
     */
    public static void SetTypeIdldesc$set(MemorySegment seg, MemorySegment x) {
        constants$3454.const$4.set(seg, x);
    }
    public static MemorySegment SetTypeIdldesc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3454.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void SetTypeIdldesc$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3454.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetTypeIdldesc SetTypeIdldesc(MemorySegment segment, Arena scope) {
        return SetTypeIdldesc.ofAddress(SetTypeIdldesc$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*LayOut)(ICreateTypeInfo*);
     * }
     */
    public interface LayOut {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(LayOut fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3454.const$5, fi, constants$18.const$5, scope);
        }
        static LayOut ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle LayOut$VH() {
        return constants$3455.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*LayOut)(ICreateTypeInfo*);
     * }
     */
    public static MemorySegment LayOut$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3455.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*LayOut)(ICreateTypeInfo*);
     * }
     */
    public static void LayOut$set(MemorySegment seg, MemorySegment x) {
        constants$3455.const$0.set(seg, x);
    }
    public static MemorySegment LayOut$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3455.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void LayOut$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3455.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static LayOut LayOut(MemorySegment segment, Arena scope) {
        return LayOut.ofAddress(LayOut$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



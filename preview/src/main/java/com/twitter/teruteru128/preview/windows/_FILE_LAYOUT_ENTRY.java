// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _FILE_LAYOUT_ENTRY {
 *     DWORD Version;
 *     DWORD NextFileOffset;
 *     DWORD Flags;
 *     DWORD FileAttributes;
 *     DWORDLONG FileReferenceNumber;
 *     DWORD FirstNameOffset;
 *     DWORD FirstStreamOffset;
 *     DWORD ExtraInfoOffset;
 *     DWORD ExtraInfoLength;
 * };
 * }
 */
public class _FILE_LAYOUT_ENTRY {

    public static MemoryLayout $LAYOUT() {
        return constants$2692.const$1;
    }
    public static VarHandle Version$VH() {
        return constants$2692.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Version;
     * }
     */
    public static int Version$get(MemorySegment seg) {
        return (int)constants$2692.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Version;
     * }
     */
    public static void Version$set(MemorySegment seg, int x) {
        constants$2692.const$2.set(seg, x);
    }
    public static int Version$get(MemorySegment seg, long index) {
        return (int)constants$2692.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, int x) {
        constants$2692.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle NextFileOffset$VH() {
        return constants$2692.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD NextFileOffset;
     * }
     */
    public static int NextFileOffset$get(MemorySegment seg) {
        return (int)constants$2692.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD NextFileOffset;
     * }
     */
    public static void NextFileOffset$set(MemorySegment seg, int x) {
        constants$2692.const$3.set(seg, x);
    }
    public static int NextFileOffset$get(MemorySegment seg, long index) {
        return (int)constants$2692.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void NextFileOffset$set(MemorySegment seg, long index, int x) {
        constants$2692.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Flags$VH() {
        return constants$2692.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Flags;
     * }
     */
    public static int Flags$get(MemorySegment seg) {
        return (int)constants$2692.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Flags;
     * }
     */
    public static void Flags$set(MemorySegment seg, int x) {
        constants$2692.const$4.set(seg, x);
    }
    public static int Flags$get(MemorySegment seg, long index) {
        return (int)constants$2692.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, int x) {
        constants$2692.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle FileAttributes$VH() {
        return constants$2692.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD FileAttributes;
     * }
     */
    public static int FileAttributes$get(MemorySegment seg) {
        return (int)constants$2692.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD FileAttributes;
     * }
     */
    public static void FileAttributes$set(MemorySegment seg, int x) {
        constants$2692.const$5.set(seg, x);
    }
    public static int FileAttributes$get(MemorySegment seg, long index) {
        return (int)constants$2692.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void FileAttributes$set(MemorySegment seg, long index, int x) {
        constants$2692.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle FileReferenceNumber$VH() {
        return constants$2693.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORDLONG FileReferenceNumber;
     * }
     */
    public static long FileReferenceNumber$get(MemorySegment seg) {
        return (long)constants$2693.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORDLONG FileReferenceNumber;
     * }
     */
    public static void FileReferenceNumber$set(MemorySegment seg, long x) {
        constants$2693.const$0.set(seg, x);
    }
    public static long FileReferenceNumber$get(MemorySegment seg, long index) {
        return (long)constants$2693.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void FileReferenceNumber$set(MemorySegment seg, long index, long x) {
        constants$2693.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle FirstNameOffset$VH() {
        return constants$2693.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD FirstNameOffset;
     * }
     */
    public static int FirstNameOffset$get(MemorySegment seg) {
        return (int)constants$2693.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD FirstNameOffset;
     * }
     */
    public static void FirstNameOffset$set(MemorySegment seg, int x) {
        constants$2693.const$1.set(seg, x);
    }
    public static int FirstNameOffset$get(MemorySegment seg, long index) {
        return (int)constants$2693.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void FirstNameOffset$set(MemorySegment seg, long index, int x) {
        constants$2693.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle FirstStreamOffset$VH() {
        return constants$2693.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD FirstStreamOffset;
     * }
     */
    public static int FirstStreamOffset$get(MemorySegment seg) {
        return (int)constants$2693.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD FirstStreamOffset;
     * }
     */
    public static void FirstStreamOffset$set(MemorySegment seg, int x) {
        constants$2693.const$2.set(seg, x);
    }
    public static int FirstStreamOffset$get(MemorySegment seg, long index) {
        return (int)constants$2693.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void FirstStreamOffset$set(MemorySegment seg, long index, int x) {
        constants$2693.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ExtraInfoOffset$VH() {
        return constants$2693.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD ExtraInfoOffset;
     * }
     */
    public static int ExtraInfoOffset$get(MemorySegment seg) {
        return (int)constants$2693.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD ExtraInfoOffset;
     * }
     */
    public static void ExtraInfoOffset$set(MemorySegment seg, int x) {
        constants$2693.const$3.set(seg, x);
    }
    public static int ExtraInfoOffset$get(MemorySegment seg, long index) {
        return (int)constants$2693.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void ExtraInfoOffset$set(MemorySegment seg, long index, int x) {
        constants$2693.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ExtraInfoLength$VH() {
        return constants$2693.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD ExtraInfoLength;
     * }
     */
    public static int ExtraInfoLength$get(MemorySegment seg) {
        return (int)constants$2693.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD ExtraInfoLength;
     * }
     */
    public static void ExtraInfoLength$set(MemorySegment seg, int x) {
        constants$2693.const$4.set(seg, x);
    }
    public static int ExtraInfoLength$get(MemorySegment seg, long index) {
        return (int)constants$2693.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void ExtraInfoLength$set(MemorySegment seg, long index, int x) {
        constants$2693.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



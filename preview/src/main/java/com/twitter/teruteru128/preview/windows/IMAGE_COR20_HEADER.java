// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IMAGE_COR20_HEADER {
 *     DWORD cb;
 *     WORD MajorRuntimeVersion;
 *     WORD MinorRuntimeVersion;
 *     IMAGE_DATA_DIRECTORY MetaData;
 *     DWORD Flags;
 *     union {
 *         DWORD EntryPointToken;
 *         DWORD EntryPointRVA;
 *     };
 *     IMAGE_DATA_DIRECTORY Resources;
 *     IMAGE_DATA_DIRECTORY StrongNameSignature;
 *     IMAGE_DATA_DIRECTORY CodeManagerTable;
 *     IMAGE_DATA_DIRECTORY VTableFixups;
 *     IMAGE_DATA_DIRECTORY ExportAddressTableJumps;
 *     IMAGE_DATA_DIRECTORY ManagedNativeHeader;
 * };
 * }
 */
public class IMAGE_COR20_HEADER {

    public static MemoryLayout $LAYOUT() {
        return constants$463.const$2;
    }
    public static VarHandle cb$VH() {
        return constants$463.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD cb;
     * }
     */
    public static int cb$get(MemorySegment seg) {
        return (int)constants$463.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD cb;
     * }
     */
    public static void cb$set(MemorySegment seg, int x) {
        constants$463.const$3.set(seg, x);
    }
    public static int cb$get(MemorySegment seg, long index) {
        return (int)constants$463.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void cb$set(MemorySegment seg, long index, int x) {
        constants$463.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MajorRuntimeVersion$VH() {
        return constants$463.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD MajorRuntimeVersion;
     * }
     */
    public static short MajorRuntimeVersion$get(MemorySegment seg) {
        return (short)constants$463.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD MajorRuntimeVersion;
     * }
     */
    public static void MajorRuntimeVersion$set(MemorySegment seg, short x) {
        constants$463.const$4.set(seg, x);
    }
    public static short MajorRuntimeVersion$get(MemorySegment seg, long index) {
        return (short)constants$463.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void MajorRuntimeVersion$set(MemorySegment seg, long index, short x) {
        constants$463.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MinorRuntimeVersion$VH() {
        return constants$463.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD MinorRuntimeVersion;
     * }
     */
    public static short MinorRuntimeVersion$get(MemorySegment seg) {
        return (short)constants$463.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD MinorRuntimeVersion;
     * }
     */
    public static void MinorRuntimeVersion$set(MemorySegment seg, short x) {
        constants$463.const$5.set(seg, x);
    }
    public static short MinorRuntimeVersion$get(MemorySegment seg, long index) {
        return (short)constants$463.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void MinorRuntimeVersion$set(MemorySegment seg, long index, short x) {
        constants$463.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment MetaData$slice(MemorySegment seg) {
        return seg.asSlice(8, 8);
    }
    public static VarHandle Flags$VH() {
        return constants$464.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Flags;
     * }
     */
    public static int Flags$get(MemorySegment seg) {
        return (int)constants$464.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Flags;
     * }
     */
    public static void Flags$set(MemorySegment seg, int x) {
        constants$464.const$0.set(seg, x);
    }
    public static int Flags$get(MemorySegment seg, long index) {
        return (int)constants$464.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, int x) {
        constants$464.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle EntryPointToken$VH() {
        return constants$464.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD EntryPointToken;
     * }
     */
    public static int EntryPointToken$get(MemorySegment seg) {
        return (int)constants$464.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD EntryPointToken;
     * }
     */
    public static void EntryPointToken$set(MemorySegment seg, int x) {
        constants$464.const$1.set(seg, x);
    }
    public static int EntryPointToken$get(MemorySegment seg, long index) {
        return (int)constants$464.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void EntryPointToken$set(MemorySegment seg, long index, int x) {
        constants$464.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle EntryPointRVA$VH() {
        return constants$464.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD EntryPointRVA;
     * }
     */
    public static int EntryPointRVA$get(MemorySegment seg) {
        return (int)constants$464.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD EntryPointRVA;
     * }
     */
    public static void EntryPointRVA$set(MemorySegment seg, int x) {
        constants$464.const$2.set(seg, x);
    }
    public static int EntryPointRVA$get(MemorySegment seg, long index) {
        return (int)constants$464.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void EntryPointRVA$set(MemorySegment seg, long index, int x) {
        constants$464.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Resources$slice(MemorySegment seg) {
        return seg.asSlice(24, 8);
    }
    public static MemorySegment StrongNameSignature$slice(MemorySegment seg) {
        return seg.asSlice(32, 8);
    }
    public static MemorySegment CodeManagerTable$slice(MemorySegment seg) {
        return seg.asSlice(40, 8);
    }
    public static MemorySegment VTableFixups$slice(MemorySegment seg) {
        return seg.asSlice(48, 8);
    }
    public static MemorySegment ExportAddressTableJumps$slice(MemorySegment seg) {
        return seg.asSlice(56, 8);
    }
    public static MemorySegment ManagedNativeHeader$slice(MemorySegment seg) {
        return seg.asSlice(64, 8);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



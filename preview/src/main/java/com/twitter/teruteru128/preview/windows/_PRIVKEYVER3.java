// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _PRIVKEYVER3 {
 *     DWORD magic;
 *     DWORD bitlenP;
 *     DWORD bitlenQ;
 *     DWORD bitlenJ;
 *     DWORD bitlenX;
 *     DSSSEED DSSSeed;
 * };
 * }
 */
public class _PRIVKEYVER3 {

    public static MemoryLayout $LAYOUT() {
        return constants$1926.const$2;
    }
    public static VarHandle magic$VH() {
        return constants$1926.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD magic;
     * }
     */
    public static int magic$get(MemorySegment seg) {
        return (int)constants$1926.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD magic;
     * }
     */
    public static void magic$set(MemorySegment seg, int x) {
        constants$1926.const$3.set(seg, x);
    }
    public static int magic$get(MemorySegment seg, long index) {
        return (int)constants$1926.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void magic$set(MemorySegment seg, long index, int x) {
        constants$1926.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bitlenP$VH() {
        return constants$1926.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD bitlenP;
     * }
     */
    public static int bitlenP$get(MemorySegment seg) {
        return (int)constants$1926.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD bitlenP;
     * }
     */
    public static void bitlenP$set(MemorySegment seg, int x) {
        constants$1926.const$4.set(seg, x);
    }
    public static int bitlenP$get(MemorySegment seg, long index) {
        return (int)constants$1926.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void bitlenP$set(MemorySegment seg, long index, int x) {
        constants$1926.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bitlenQ$VH() {
        return constants$1926.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD bitlenQ;
     * }
     */
    public static int bitlenQ$get(MemorySegment seg) {
        return (int)constants$1926.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD bitlenQ;
     * }
     */
    public static void bitlenQ$set(MemorySegment seg, int x) {
        constants$1926.const$5.set(seg, x);
    }
    public static int bitlenQ$get(MemorySegment seg, long index) {
        return (int)constants$1926.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void bitlenQ$set(MemorySegment seg, long index, int x) {
        constants$1926.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bitlenJ$VH() {
        return constants$1927.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD bitlenJ;
     * }
     */
    public static int bitlenJ$get(MemorySegment seg) {
        return (int)constants$1927.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD bitlenJ;
     * }
     */
    public static void bitlenJ$set(MemorySegment seg, int x) {
        constants$1927.const$0.set(seg, x);
    }
    public static int bitlenJ$get(MemorySegment seg, long index) {
        return (int)constants$1927.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void bitlenJ$set(MemorySegment seg, long index, int x) {
        constants$1927.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bitlenX$VH() {
        return constants$1927.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD bitlenX;
     * }
     */
    public static int bitlenX$get(MemorySegment seg) {
        return (int)constants$1927.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD bitlenX;
     * }
     */
    public static void bitlenX$set(MemorySegment seg, int x) {
        constants$1927.const$1.set(seg, x);
    }
    public static int bitlenX$get(MemorySegment seg, long index) {
        return (int)constants$1927.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void bitlenX$set(MemorySegment seg, long index, int x) {
        constants$1927.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment DSSSeed$slice(MemorySegment seg) {
        return seg.asSlice(20, 24);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



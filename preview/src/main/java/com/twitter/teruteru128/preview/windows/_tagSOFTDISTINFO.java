// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _tagSOFTDISTINFO {
 *     ULONG cbSize;
 *     DWORD dwFlags;
 *     DWORD dwAdState;
 *     LPWSTR szTitle;
 *     LPWSTR szAbstract;
 *     LPWSTR szHREF;
 *     DWORD dwInstalledVersionMS;
 *     DWORD dwInstalledVersionLS;
 *     DWORD dwUpdateVersionMS;
 *     DWORD dwUpdateVersionLS;
 *     DWORD dwAdvertisedVersionMS;
 *     DWORD dwAdvertisedVersionLS;
 *     DWORD dwReserved;
 * };
 * }
 */
public class _tagSOFTDISTINFO {

    public static MemoryLayout $LAYOUT() {
        return constants$4298.const$5;
    }
    public static VarHandle cbSize$VH() {
        return constants$4299.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG cbSize;
     * }
     */
    public static int cbSize$get(MemorySegment seg) {
        return (int)constants$4299.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG cbSize;
     * }
     */
    public static void cbSize$set(MemorySegment seg, int x) {
        constants$4299.const$0.set(seg, x);
    }
    public static int cbSize$get(MemorySegment seg, long index) {
        return (int)constants$4299.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void cbSize$set(MemorySegment seg, long index, int x) {
        constants$4299.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwFlags$VH() {
        return constants$4299.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwFlags;
     * }
     */
    public static int dwFlags$get(MemorySegment seg) {
        return (int)constants$4299.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwFlags;
     * }
     */
    public static void dwFlags$set(MemorySegment seg, int x) {
        constants$4299.const$1.set(seg, x);
    }
    public static int dwFlags$get(MemorySegment seg, long index) {
        return (int)constants$4299.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void dwFlags$set(MemorySegment seg, long index, int x) {
        constants$4299.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwAdState$VH() {
        return constants$4299.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwAdState;
     * }
     */
    public static int dwAdState$get(MemorySegment seg) {
        return (int)constants$4299.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwAdState;
     * }
     */
    public static void dwAdState$set(MemorySegment seg, int x) {
        constants$4299.const$2.set(seg, x);
    }
    public static int dwAdState$get(MemorySegment seg, long index) {
        return (int)constants$4299.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void dwAdState$set(MemorySegment seg, long index, int x) {
        constants$4299.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle szTitle$VH() {
        return constants$4299.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPWSTR szTitle;
     * }
     */
    public static MemorySegment szTitle$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4299.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPWSTR szTitle;
     * }
     */
    public static void szTitle$set(MemorySegment seg, MemorySegment x) {
        constants$4299.const$3.set(seg, x);
    }
    public static MemorySegment szTitle$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4299.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void szTitle$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4299.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle szAbstract$VH() {
        return constants$4299.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPWSTR szAbstract;
     * }
     */
    public static MemorySegment szAbstract$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4299.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPWSTR szAbstract;
     * }
     */
    public static void szAbstract$set(MemorySegment seg, MemorySegment x) {
        constants$4299.const$4.set(seg, x);
    }
    public static MemorySegment szAbstract$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4299.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void szAbstract$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4299.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle szHREF$VH() {
        return constants$4299.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPWSTR szHREF;
     * }
     */
    public static MemorySegment szHREF$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4299.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPWSTR szHREF;
     * }
     */
    public static void szHREF$set(MemorySegment seg, MemorySegment x) {
        constants$4299.const$5.set(seg, x);
    }
    public static MemorySegment szHREF$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4299.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void szHREF$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4299.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwInstalledVersionMS$VH() {
        return constants$4300.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwInstalledVersionMS;
     * }
     */
    public static int dwInstalledVersionMS$get(MemorySegment seg) {
        return (int)constants$4300.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwInstalledVersionMS;
     * }
     */
    public static void dwInstalledVersionMS$set(MemorySegment seg, int x) {
        constants$4300.const$0.set(seg, x);
    }
    public static int dwInstalledVersionMS$get(MemorySegment seg, long index) {
        return (int)constants$4300.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void dwInstalledVersionMS$set(MemorySegment seg, long index, int x) {
        constants$4300.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwInstalledVersionLS$VH() {
        return constants$4300.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwInstalledVersionLS;
     * }
     */
    public static int dwInstalledVersionLS$get(MemorySegment seg) {
        return (int)constants$4300.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwInstalledVersionLS;
     * }
     */
    public static void dwInstalledVersionLS$set(MemorySegment seg, int x) {
        constants$4300.const$1.set(seg, x);
    }
    public static int dwInstalledVersionLS$get(MemorySegment seg, long index) {
        return (int)constants$4300.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void dwInstalledVersionLS$set(MemorySegment seg, long index, int x) {
        constants$4300.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwUpdateVersionMS$VH() {
        return constants$4300.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwUpdateVersionMS;
     * }
     */
    public static int dwUpdateVersionMS$get(MemorySegment seg) {
        return (int)constants$4300.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwUpdateVersionMS;
     * }
     */
    public static void dwUpdateVersionMS$set(MemorySegment seg, int x) {
        constants$4300.const$2.set(seg, x);
    }
    public static int dwUpdateVersionMS$get(MemorySegment seg, long index) {
        return (int)constants$4300.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void dwUpdateVersionMS$set(MemorySegment seg, long index, int x) {
        constants$4300.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwUpdateVersionLS$VH() {
        return constants$4300.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwUpdateVersionLS;
     * }
     */
    public static int dwUpdateVersionLS$get(MemorySegment seg) {
        return (int)constants$4300.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwUpdateVersionLS;
     * }
     */
    public static void dwUpdateVersionLS$set(MemorySegment seg, int x) {
        constants$4300.const$3.set(seg, x);
    }
    public static int dwUpdateVersionLS$get(MemorySegment seg, long index) {
        return (int)constants$4300.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void dwUpdateVersionLS$set(MemorySegment seg, long index, int x) {
        constants$4300.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwAdvertisedVersionMS$VH() {
        return constants$4300.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwAdvertisedVersionMS;
     * }
     */
    public static int dwAdvertisedVersionMS$get(MemorySegment seg) {
        return (int)constants$4300.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwAdvertisedVersionMS;
     * }
     */
    public static void dwAdvertisedVersionMS$set(MemorySegment seg, int x) {
        constants$4300.const$4.set(seg, x);
    }
    public static int dwAdvertisedVersionMS$get(MemorySegment seg, long index) {
        return (int)constants$4300.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void dwAdvertisedVersionMS$set(MemorySegment seg, long index, int x) {
        constants$4300.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwAdvertisedVersionLS$VH() {
        return constants$4300.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwAdvertisedVersionLS;
     * }
     */
    public static int dwAdvertisedVersionLS$get(MemorySegment seg) {
        return (int)constants$4300.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwAdvertisedVersionLS;
     * }
     */
    public static void dwAdvertisedVersionLS$set(MemorySegment seg, int x) {
        constants$4300.const$5.set(seg, x);
    }
    public static int dwAdvertisedVersionLS$get(MemorySegment seg, long index) {
        return (int)constants$4300.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void dwAdvertisedVersionLS$set(MemorySegment seg, long index, int x) {
        constants$4300.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwReserved$VH() {
        return constants$4301.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwReserved;
     * }
     */
    public static int dwReserved$get(MemorySegment seg) {
        return (int)constants$4301.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwReserved;
     * }
     */
    public static void dwReserved$set(MemorySegment seg, int x) {
        constants$4301.const$0.set(seg, x);
    }
    public static int dwReserved$get(MemorySegment seg, long index) {
        return (int)constants$4301.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void dwReserved$set(MemorySegment seg, long index, int x) {
        constants$4301.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



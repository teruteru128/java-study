// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct {
 *     DWORD ByteCount;
 *     DWORD MajorVersion;
 *     DWORD MinorVersion;
 *     DWORD BytesPerPhysicalSector;
 *     LARGE_INTEGER VolumeSerialNumber;
 *     LARGE_INTEGER NumberSectors;
 *     LARGE_INTEGER TotalClusters;
 *     LARGE_INTEGER FreeClusters;
 *     LARGE_INTEGER TotalReserved;
 *     DWORD BytesPerSector;
 *     DWORD BytesPerCluster;
 *     LARGE_INTEGER MaximumSizeOfResidentFile;
 *     WORD FastTierDataFillRatio;
 *     WORD SlowTierDataFillRatio;
 *     DWORD DestagesFastTierToSlowTierRate;
 *     LARGE_INTEGER Reserved[9];
 * };
 * }
 */
public class REFS_VOLUME_DATA_BUFFER {

    public static MemoryLayout $LAYOUT() {
        return constants$2575.const$1;
    }
    public static VarHandle ByteCount$VH() {
        return constants$2575.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD ByteCount;
     * }
     */
    public static int ByteCount$get(MemorySegment seg) {
        return (int)constants$2575.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD ByteCount;
     * }
     */
    public static void ByteCount$set(MemorySegment seg, int x) {
        constants$2575.const$2.set(seg, x);
    }
    public static int ByteCount$get(MemorySegment seg, long index) {
        return (int)constants$2575.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void ByteCount$set(MemorySegment seg, long index, int x) {
        constants$2575.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MajorVersion$VH() {
        return constants$2575.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD MajorVersion;
     * }
     */
    public static int MajorVersion$get(MemorySegment seg) {
        return (int)constants$2575.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD MajorVersion;
     * }
     */
    public static void MajorVersion$set(MemorySegment seg, int x) {
        constants$2575.const$3.set(seg, x);
    }
    public static int MajorVersion$get(MemorySegment seg, long index) {
        return (int)constants$2575.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void MajorVersion$set(MemorySegment seg, long index, int x) {
        constants$2575.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MinorVersion$VH() {
        return constants$2575.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD MinorVersion;
     * }
     */
    public static int MinorVersion$get(MemorySegment seg) {
        return (int)constants$2575.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD MinorVersion;
     * }
     */
    public static void MinorVersion$set(MemorySegment seg, int x) {
        constants$2575.const$4.set(seg, x);
    }
    public static int MinorVersion$get(MemorySegment seg, long index) {
        return (int)constants$2575.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void MinorVersion$set(MemorySegment seg, long index, int x) {
        constants$2575.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle BytesPerPhysicalSector$VH() {
        return constants$2575.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD BytesPerPhysicalSector;
     * }
     */
    public static int BytesPerPhysicalSector$get(MemorySegment seg) {
        return (int)constants$2575.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD BytesPerPhysicalSector;
     * }
     */
    public static void BytesPerPhysicalSector$set(MemorySegment seg, int x) {
        constants$2575.const$5.set(seg, x);
    }
    public static int BytesPerPhysicalSector$get(MemorySegment seg, long index) {
        return (int)constants$2575.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void BytesPerPhysicalSector$set(MemorySegment seg, long index, int x) {
        constants$2575.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment VolumeSerialNumber$slice(MemorySegment seg) {
        return seg.asSlice(16, 8);
    }
    public static MemorySegment NumberSectors$slice(MemorySegment seg) {
        return seg.asSlice(24, 8);
    }
    public static MemorySegment TotalClusters$slice(MemorySegment seg) {
        return seg.asSlice(32, 8);
    }
    public static MemorySegment FreeClusters$slice(MemorySegment seg) {
        return seg.asSlice(40, 8);
    }
    public static MemorySegment TotalReserved$slice(MemorySegment seg) {
        return seg.asSlice(48, 8);
    }
    public static VarHandle BytesPerSector$VH() {
        return constants$2576.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD BytesPerSector;
     * }
     */
    public static int BytesPerSector$get(MemorySegment seg) {
        return (int)constants$2576.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD BytesPerSector;
     * }
     */
    public static void BytesPerSector$set(MemorySegment seg, int x) {
        constants$2576.const$0.set(seg, x);
    }
    public static int BytesPerSector$get(MemorySegment seg, long index) {
        return (int)constants$2576.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void BytesPerSector$set(MemorySegment seg, long index, int x) {
        constants$2576.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle BytesPerCluster$VH() {
        return constants$2576.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD BytesPerCluster;
     * }
     */
    public static int BytesPerCluster$get(MemorySegment seg) {
        return (int)constants$2576.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD BytesPerCluster;
     * }
     */
    public static void BytesPerCluster$set(MemorySegment seg, int x) {
        constants$2576.const$1.set(seg, x);
    }
    public static int BytesPerCluster$get(MemorySegment seg, long index) {
        return (int)constants$2576.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void BytesPerCluster$set(MemorySegment seg, long index, int x) {
        constants$2576.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment MaximumSizeOfResidentFile$slice(MemorySegment seg) {
        return seg.asSlice(64, 8);
    }
    public static VarHandle FastTierDataFillRatio$VH() {
        return constants$2576.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD FastTierDataFillRatio;
     * }
     */
    public static short FastTierDataFillRatio$get(MemorySegment seg) {
        return (short)constants$2576.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD FastTierDataFillRatio;
     * }
     */
    public static void FastTierDataFillRatio$set(MemorySegment seg, short x) {
        constants$2576.const$2.set(seg, x);
    }
    public static short FastTierDataFillRatio$get(MemorySegment seg, long index) {
        return (short)constants$2576.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void FastTierDataFillRatio$set(MemorySegment seg, long index, short x) {
        constants$2576.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle SlowTierDataFillRatio$VH() {
        return constants$2576.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD SlowTierDataFillRatio;
     * }
     */
    public static short SlowTierDataFillRatio$get(MemorySegment seg) {
        return (short)constants$2576.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD SlowTierDataFillRatio;
     * }
     */
    public static void SlowTierDataFillRatio$set(MemorySegment seg, short x) {
        constants$2576.const$3.set(seg, x);
    }
    public static short SlowTierDataFillRatio$get(MemorySegment seg, long index) {
        return (short)constants$2576.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void SlowTierDataFillRatio$set(MemorySegment seg, long index, short x) {
        constants$2576.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle DestagesFastTierToSlowTierRate$VH() {
        return constants$2576.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD DestagesFastTierToSlowTierRate;
     * }
     */
    public static int DestagesFastTierToSlowTierRate$get(MemorySegment seg) {
        return (int)constants$2576.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD DestagesFastTierToSlowTierRate;
     * }
     */
    public static void DestagesFastTierToSlowTierRate$set(MemorySegment seg, int x) {
        constants$2576.const$4.set(seg, x);
    }
    public static int DestagesFastTierToSlowTierRate$get(MemorySegment seg, long index) {
        return (int)constants$2576.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void DestagesFastTierToSlowTierRate$set(MemorySegment seg, long index, int x) {
        constants$2576.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Reserved$slice(MemorySegment seg) {
        return seg.asSlice(80, 72);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



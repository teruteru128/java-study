// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tagSTGOPTIONS {
 *     USHORT usVersion;
 *     USHORT reserved;
 *     ULONG ulSectorSize;
 *     const WCHAR* pwcsTemplateFile;
 * };
 * }
 */
public class tagSTGOPTIONS {

    public static MemoryLayout $LAYOUT() {
        return constants$3624.const$3;
    }
    public static VarHandle usVersion$VH() {
        return constants$3624.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * USHORT usVersion;
     * }
     */
    public static short usVersion$get(MemorySegment seg) {
        return (short)constants$3624.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * USHORT usVersion;
     * }
     */
    public static void usVersion$set(MemorySegment seg, short x) {
        constants$3624.const$4.set(seg, x);
    }
    public static short usVersion$get(MemorySegment seg, long index) {
        return (short)constants$3624.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void usVersion$set(MemorySegment seg, long index, short x) {
        constants$3624.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle reserved$VH() {
        return constants$3624.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * USHORT reserved;
     * }
     */
    public static short reserved$get(MemorySegment seg) {
        return (short)constants$3624.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * USHORT reserved;
     * }
     */
    public static void reserved$set(MemorySegment seg, short x) {
        constants$3624.const$5.set(seg, x);
    }
    public static short reserved$get(MemorySegment seg, long index) {
        return (short)constants$3624.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void reserved$set(MemorySegment seg, long index, short x) {
        constants$3624.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ulSectorSize$VH() {
        return constants$3625.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG ulSectorSize;
     * }
     */
    public static int ulSectorSize$get(MemorySegment seg) {
        return (int)constants$3625.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG ulSectorSize;
     * }
     */
    public static void ulSectorSize$set(MemorySegment seg, int x) {
        constants$3625.const$0.set(seg, x);
    }
    public static int ulSectorSize$get(MemorySegment seg, long index) {
        return (int)constants$3625.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void ulSectorSize$set(MemorySegment seg, long index, int x) {
        constants$3625.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pwcsTemplateFile$VH() {
        return constants$3625.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const WCHAR* pwcsTemplateFile;
     * }
     */
    public static MemorySegment pwcsTemplateFile$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3625.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const WCHAR* pwcsTemplateFile;
     * }
     */
    public static void pwcsTemplateFile$set(MemorySegment seg, MemorySegment x) {
        constants$3625.const$1.set(seg, x);
    }
    public static MemorySegment pwcsTemplateFile$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3625.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void pwcsTemplateFile$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3625.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



// Generated by jextract

package com.twitter.teruteru128.preview.opencl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class opencl_h_1 {

    /**
     * {@snippet :
     * typedef long long int_least64_t;
     * }
     */
    public static final OfLong int_least64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned char uint_least8_t;
     * }
     */
    public static final OfByte uint_least8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned short uint_least16_t;
     * }
     */
    public static final OfShort uint_least16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned int uint_least32_t;
     * }
     */
    public static final OfInt uint_least32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long long uint_least64_t;
     * }
     */
    public static final OfLong uint_least64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef signed char int_fast8_t;
     * }
     */
    public static final OfByte int_fast8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef int int_fast16_t;
     * }
     */
    public static final OfInt int_fast16_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int int_fast32_t;
     * }
     */
    public static final OfInt int_fast32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long long int_fast64_t;
     * }
     */
    public static final OfLong int_fast64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned char uint_fast8_t;
     * }
     */
    public static final OfByte uint_fast8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned int uint_fast16_t;
     * }
     */
    public static final OfInt uint_fast16_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int uint_fast32_t;
     * }
     */
    public static final OfInt uint_fast32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long long uint_fast64_t;
     * }
     */
    public static final OfLong uint_fast64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long long intmax_t;
     * }
     */
    public static final OfLong intmax_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long uintmax_t;
     * }
     */
    public static final OfLong uintmax_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef signed char cl_char;
     * }
     */
    public static final OfByte cl_char = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned char cl_uchar;
     * }
     */
    public static final OfByte cl_uchar = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef short cl_short;
     * }
     */
    public static final OfShort cl_short = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned short cl_ushort;
     * }
     */
    public static final OfShort cl_ushort = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef int cl_int;
     * }
     */
    public static final OfInt cl_int = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int cl_uint;
     * }
     */
    public static final OfInt cl_uint = JAVA_INT;
    /**
     * {@snippet :
     * typedef long long cl_long;
     * }
     */
    public static final OfLong cl_long = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long cl_ulong;
     * }
     */
    public static final OfLong cl_ulong = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned short cl_half;
     * }
     */
    public static final OfShort cl_half = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef float cl_float;
     * }
     */
    public static final OfFloat cl_float = JAVA_FLOAT;
    /**
     * {@snippet :
     * typedef double cl_double;
     * }
     */
    public static final OfDouble cl_double = JAVA_DOUBLE;
    /**
     * {@snippet :
     * typedef double max_align_t;
     * }
     */
    public static final OfDouble max_align_t = JAVA_DOUBLE;
    /**
     * {@snippet :
     * typedef unsigned int cl_GLuint;
     * }
     */
    public static final OfInt cl_GLuint = JAVA_INT;
    /**
     * {@snippet :
     * typedef int cl_GLint;
     * }
     */
    public static final OfInt cl_GLint = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int cl_GLenum;
     * }
     */
    public static final OfInt cl_GLenum = JAVA_INT;
    public static MethodHandle _invalid_parameter_noinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$1.const$3,"_invalid_parameter_noinfo");
    }
    /**
     * {@snippet :
     * void _invalid_parameter_noinfo();
     * }
     */
    public static void _invalid_parameter_noinfo() {
        var mh$ = _invalid_parameter_noinfo$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _invalid_parameter_noinfo_noreturn$MH() {
        return RuntimeHelper.requireNonNull(constants$1.const$4,"_invalid_parameter_noinfo_noreturn");
    }
    /**
     * {@snippet :
     * void _invalid_parameter_noinfo_noreturn();
     * }
     */
    public static void _invalid_parameter_noinfo_noreturn() {
        var mh$ = _invalid_parameter_noinfo_noreturn$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _invoke_watson$MH() {
        return RuntimeHelper.requireNonNull(constants$1.const$6,"_invoke_watson");
    }
    /**
     * {@snippet :
     * void _invoke_watson(const wchar_t* _Expression, const wchar_t* _FunctionName, const wchar_t* _FileName, unsigned int _LineNo, uintptr_t _Reserved);
     * }
     */
    public static void _invoke_watson(MemorySegment _Expression, MemorySegment _FunctionName, MemorySegment _FileName, int _LineNo, long _Reserved) {
        var mh$ = _invoke_watson$MH();
        try {
            mh$.invokeExact(_Expression, _FunctionName, _FileName, _LineNo, _Reserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef int errno_t;
     * }
     */
    public static final OfInt errno_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned short wint_t;
     * }
     */
    public static final OfShort wint_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned short wctype_t;
     * }
     */
    public static final OfShort wctype_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef long __time32_t;
     * }
     */
    public static final OfInt __time32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long long __time64_t;
     * }
     */
    public static final OfLong __time64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef struct __crt_locale_pointers* _locale_t;
     * }
     */
    public static final AddressLayout _locale_t = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef long long time_t;
     * }
     */
    public static final OfLong time_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long rsize_t;
     * }
     */
    public static final OfLong rsize_t = JAVA_LONG;
    public static MethodHandle _calloc_base$MH() {
        return RuntimeHelper.requireNonNull(constants$3.const$6,"_calloc_base");
    }
    /**
     * {@snippet :
     * void* _calloc_base(size_t _Count, size_t _Size);
     * }
     */
    public static MemorySegment _calloc_base(long _Count, long _Size) {
        var mh$ = _calloc_base$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Count, _Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle calloc$MH() {
        return RuntimeHelper.requireNonNull(constants$4.const$0,"calloc");
    }
    /**
     * {@snippet :
     * void* calloc(size_t _Count, size_t _Size);
     * }
     */
    public static MemorySegment calloc(long _Count, long _Size) {
        var mh$ = calloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Count, _Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _callnewh$MH() {
        return RuntimeHelper.requireNonNull(constants$4.const$2,"_callnewh");
    }
    /**
     * {@snippet :
     * int _callnewh(size_t _Size);
     * }
     */
    public static int _callnewh(long _Size) {
        var mh$ = _callnewh$MH();
        try {
            return (int)mh$.invokeExact(_Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _expand$MH() {
        return RuntimeHelper.requireNonNull(constants$4.const$4,"_expand");
    }
    /**
     * {@snippet :
     * void* _expand(void* _Block, size_t _Size);
     * }
     */
    public static MemorySegment _expand(MemorySegment _Block, long _Size) {
        var mh$ = _expand$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Block, _Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _free_base$MH() {
        return RuntimeHelper.requireNonNull(constants$4.const$5,"_free_base");
    }
    /**
     * {@snippet :
     * void _free_base(void* _Block);
     * }
     */
    public static void _free_base(MemorySegment _Block) {
        var mh$ = _free_base$MH();
        try {
            mh$.invokeExact(_Block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle free$MH() {
        return RuntimeHelper.requireNonNull(constants$5.const$0,"free");
    }
    /**
     * {@snippet :
     * void free(void* _Block);
     * }
     */
    public static void free(MemorySegment _Block) {
        var mh$ = free$MH();
        try {
            mh$.invokeExact(_Block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _malloc_base$MH() {
        return RuntimeHelper.requireNonNull(constants$5.const$2,"_malloc_base");
    }
    /**
     * {@snippet :
     * void* _malloc_base(size_t _Size);
     * }
     */
    public static MemorySegment _malloc_base(long _Size) {
        var mh$ = _malloc_base$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle malloc$MH() {
        return RuntimeHelper.requireNonNull(constants$5.const$3,"malloc");
    }
    /**
     * {@snippet :
     * void* malloc(size_t _Size);
     * }
     */
    public static MemorySegment malloc(long _Size) {
        var mh$ = malloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _msize_base$MH() {
        return RuntimeHelper.requireNonNull(constants$5.const$5,"_msize_base");
    }
    /**
     * {@snippet :
     * size_t _msize_base(void* _Block);
     * }
     */
    public static long _msize_base(MemorySegment _Block) {
        var mh$ = _msize_base$MH();
        try {
            return (long)mh$.invokeExact(_Block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _msize$MH() {
        return RuntimeHelper.requireNonNull(constants$6.const$0,"_msize");
    }
    /**
     * {@snippet :
     * size_t _msize(void* _Block);
     * }
     */
    public static long _msize(MemorySegment _Block) {
        var mh$ = _msize$MH();
        try {
            return (long)mh$.invokeExact(_Block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _realloc_base$MH() {
        return RuntimeHelper.requireNonNull(constants$6.const$1,"_realloc_base");
    }
    /**
     * {@snippet :
     * void* _realloc_base(void* _Block, size_t _Size);
     * }
     */
    public static MemorySegment _realloc_base(MemorySegment _Block, long _Size) {
        var mh$ = _realloc_base$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Block, _Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle realloc$MH() {
        return RuntimeHelper.requireNonNull(constants$6.const$2,"realloc");
    }
    /**
     * {@snippet :
     * void* realloc(void* _Block, size_t _Size);
     * }
     */
    public static MemorySegment realloc(MemorySegment _Block, long _Size) {
        var mh$ = realloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Block, _Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _recalloc_base$MH() {
        return RuntimeHelper.requireNonNull(constants$6.const$4,"_recalloc_base");
    }
    /**
     * {@snippet :
     * void* _recalloc_base(void* _Block, size_t _Count, size_t _Size);
     * }
     */
    public static MemorySegment _recalloc_base(MemorySegment _Block, long _Count, long _Size) {
        var mh$ = _recalloc_base$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Block, _Count, _Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _recalloc$MH() {
        return RuntimeHelper.requireNonNull(constants$6.const$5,"_recalloc");
    }
    /**
     * {@snippet :
     * void* _recalloc(void* _Block, size_t _Count, size_t _Size);
     * }
     */
    public static MemorySegment _recalloc(MemorySegment _Block, long _Count, long _Size) {
        var mh$ = _recalloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Block, _Count, _Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _aligned_free$MH() {
        return RuntimeHelper.requireNonNull(constants$7.const$0,"_aligned_free");
    }
    /**
     * {@snippet :
     * void _aligned_free(void* _Block);
     * }
     */
    public static void _aligned_free(MemorySegment _Block) {
        var mh$ = _aligned_free$MH();
        try {
            mh$.invokeExact(_Block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _aligned_malloc$MH() {
        return RuntimeHelper.requireNonNull(constants$7.const$1,"_aligned_malloc");
    }
    /**
     * {@snippet :
     * void* _aligned_malloc(size_t _Size, size_t _Alignment);
     * }
     */
    public static MemorySegment _aligned_malloc(long _Size, long _Alignment) {
        var mh$ = _aligned_malloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Size, _Alignment);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _aligned_offset_malloc$MH() {
        return RuntimeHelper.requireNonNull(constants$7.const$3,"_aligned_offset_malloc");
    }
    /**
     * {@snippet :
     * void* _aligned_offset_malloc(size_t _Size, size_t _Alignment, size_t _Offset);
     * }
     */
    public static MemorySegment _aligned_offset_malloc(long _Size, long _Alignment, long _Offset) {
        var mh$ = _aligned_offset_malloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Size, _Alignment, _Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _aligned_msize$MH() {
        return RuntimeHelper.requireNonNull(constants$7.const$5,"_aligned_msize");
    }
    /**
     * {@snippet :
     * size_t _aligned_msize(void* _Block, size_t _Alignment, size_t _Offset);
     * }
     */
    public static long _aligned_msize(MemorySegment _Block, long _Alignment, long _Offset) {
        var mh$ = _aligned_msize$MH();
        try {
            return (long)mh$.invokeExact(_Block, _Alignment, _Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _aligned_offset_realloc$MH() {
        return RuntimeHelper.requireNonNull(constants$8.const$1,"_aligned_offset_realloc");
    }
    /**
     * {@snippet :
     * void* _aligned_offset_realloc(void* _Block, size_t _Size, size_t _Alignment, size_t _Offset);
     * }
     */
    public static MemorySegment _aligned_offset_realloc(MemorySegment _Block, long _Size, long _Alignment, long _Offset) {
        var mh$ = _aligned_offset_realloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Block, _Size, _Alignment, _Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _aligned_offset_recalloc$MH() {
        return RuntimeHelper.requireNonNull(constants$8.const$3,"_aligned_offset_recalloc");
    }
    /**
     * {@snippet :
     * void* _aligned_offset_recalloc(void* _Block, size_t _Count, size_t _Size, size_t _Alignment, size_t _Offset);
     * }
     */
    public static MemorySegment _aligned_offset_recalloc(MemorySegment _Block, long _Count, long _Size, long _Alignment, long _Offset) {
        var mh$ = _aligned_offset_recalloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Block, _Count, _Size, _Alignment, _Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _aligned_realloc$MH() {
        return RuntimeHelper.requireNonNull(constants$8.const$4,"_aligned_realloc");
    }
    /**
     * {@snippet :
     * void* _aligned_realloc(void* _Block, size_t _Size, size_t _Alignment);
     * }
     */
    public static MemorySegment _aligned_realloc(MemorySegment _Block, long _Size, long _Alignment) {
        var mh$ = _aligned_realloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Block, _Size, _Alignment);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _aligned_recalloc$MH() {
        return RuntimeHelper.requireNonNull(constants$8.const$5,"_aligned_recalloc");
    }
    /**
     * {@snippet :
     * void* _aligned_recalloc(void* _Block, size_t _Count, size_t _Size, size_t _Alignment);
     * }
     */
    public static MemorySegment _aligned_recalloc(MemorySegment _Block, long _Count, long _Size, long _Alignment) {
        var mh$ = _aligned_recalloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Block, _Count, _Size, _Alignment);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bsearch_s$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$1,"bsearch_s");
    }
    /**
     * {@snippet :
     * void* bsearch_s(void* _Key, void* _Base, rsize_t _NumOfElements, rsize_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void* _Context);
     * }
     */
    public static MemorySegment bsearch_s(MemorySegment _Key, MemorySegment _Base, long _NumOfElements, long _SizeOfElements, MemorySegment _CompareFunction, MemorySegment _Context) {
        var mh$ = bsearch_s$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction, _Context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle qsort_s$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$3,"qsort_s");
    }
    /**
     * {@snippet :
     * void qsort_s(void* _Base, rsize_t _NumOfElements, rsize_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void* _Context);
     * }
     */
    public static void qsort_s(MemorySegment _Base, long _NumOfElements, long _SizeOfElements, MemorySegment _CompareFunction, MemorySegment _Context) {
        var mh$ = qsort_s$MH();
        try {
            mh$.invokeExact(_Base, _NumOfElements, _SizeOfElements, _CompareFunction, _Context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bsearch$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$5,"bsearch");
    }
    /**
     * {@snippet :
     * void* bsearch(void* _Key, void* _Base, size_t _NumOfElements, size_t _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction);
     * }
     */
    public static MemorySegment bsearch(MemorySegment _Key, MemorySegment _Base, long _NumOfElements, long _SizeOfElements, MemorySegment _CompareFunction) {
        var mh$ = bsearch$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle qsort$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$1,"qsort");
    }
    /**
     * {@snippet :
     * void qsort(void* _Base, size_t _NumOfElements, size_t _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction);
     * }
     */
    public static void qsort(MemorySegment _Base, long _NumOfElements, long _SizeOfElements, MemorySegment _CompareFunction) {
        var mh$ = qsort$MH();
        try {
            mh$.invokeExact(_Base, _NumOfElements, _SizeOfElements, _CompareFunction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _lfind_s$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$3,"_lfind_s");
    }
    /**
     * {@snippet :
     * void* _lfind_s(void* _Key, void* _Base, unsigned int* _NumOfElements, size_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void* _Context);
     * }
     */
    public static MemorySegment _lfind_s(MemorySegment _Key, MemorySegment _Base, MemorySegment _NumOfElements, long _SizeOfElements, MemorySegment _CompareFunction, MemorySegment _Context) {
        var mh$ = _lfind_s$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction, _Context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _lfind$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$5,"_lfind");
    }
    /**
     * {@snippet :
     * void* _lfind(void* _Key, void* _Base, unsigned int* _NumOfElements, unsigned int _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction);
     * }
     */
    public static MemorySegment _lfind(MemorySegment _Key, MemorySegment _Base, MemorySegment _NumOfElements, int _SizeOfElements, MemorySegment _CompareFunction) {
        var mh$ = _lfind$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _lsearch_s$MH() {
        return RuntimeHelper.requireNonNull(constants$12.const$0,"_lsearch_s");
    }
    /**
     * {@snippet :
     * void* _lsearch_s(void* _Key, void* _Base, unsigned int* _NumOfElements, size_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void* _Context);
     * }
     */
    public static MemorySegment _lsearch_s(MemorySegment _Key, MemorySegment _Base, MemorySegment _NumOfElements, long _SizeOfElements, MemorySegment _CompareFunction, MemorySegment _Context) {
        var mh$ = _lsearch_s$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction, _Context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _lsearch$MH() {
        return RuntimeHelper.requireNonNull(constants$12.const$1,"_lsearch");
    }
    /**
     * {@snippet :
     * void* _lsearch(void* _Key, void* _Base, unsigned int* _NumOfElements, unsigned int _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction);
     * }
     */
    public static MemorySegment _lsearch(MemorySegment _Key, MemorySegment _Base, MemorySegment _NumOfElements, int _SizeOfElements, MemorySegment _CompareFunction) {
        var mh$ = _lsearch$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lfind$MH() {
        return RuntimeHelper.requireNonNull(constants$12.const$2,"lfind");
    }
    /**
     * {@snippet :
     * void* lfind(void* _Key, void* _Base, unsigned int* _NumOfElements, unsigned int _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction);
     * }
     */
    public static MemorySegment lfind(MemorySegment _Key, MemorySegment _Base, MemorySegment _NumOfElements, int _SizeOfElements, MemorySegment _CompareFunction) {
        var mh$ = lfind$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lsearch$MH() {
        return RuntimeHelper.requireNonNull(constants$12.const$3,"lsearch");
    }
    /**
     * {@snippet :
     * void* lsearch(void* _Key, void* _Base, unsigned int* _NumOfElements, unsigned int _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction);
     * }
     */
    public static MemorySegment lsearch(MemorySegment _Key, MemorySegment _Base, MemorySegment _NumOfElements, int _SizeOfElements, MemorySegment _CompareFunction) {
        var mh$ = lsearch$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _itow_s$MH() {
        return RuntimeHelper.requireNonNull(constants$12.const$5,"_itow_s");
    }
    /**
     * {@snippet :
     * errno_t _itow_s(int _Value, wchar_t* _Buffer, size_t _BufferCount, int _Radix);
     * }
     */
    public static int _itow_s(int _Value, MemorySegment _Buffer, long _BufferCount, int _Radix) {
        var mh$ = _itow_s$MH();
        try {
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _itow$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$1,"_itow");
    }
    /**
     * {@snippet :
     * wchar_t* _itow(int _Value, wchar_t* _Buffer, int _Radix);
     * }
     */
    public static MemorySegment _itow(int _Value, MemorySegment _Buffer, int _Radix) {
        var mh$ = _itow$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ltow_s$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$2,"_ltow_s");
    }
    /**
     * {@snippet :
     * errno_t _ltow_s(long _Value, wchar_t* _Buffer, size_t _BufferCount, int _Radix);
     * }
     */
    public static int _ltow_s(int _Value, MemorySegment _Buffer, long _BufferCount, int _Radix) {
        var mh$ = _ltow_s$MH();
        try {
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ltow$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$3,"_ltow");
    }
    /**
     * {@snippet :
     * wchar_t* _ltow(long _Value, wchar_t* _Buffer, int _Radix);
     * }
     */
    public static MemorySegment _ltow(int _Value, MemorySegment _Buffer, int _Radix) {
        var mh$ = _ltow$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ultow_s$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$4,"_ultow_s");
    }
    /**
     * {@snippet :
     * errno_t _ultow_s(unsigned long _Value, wchar_t* _Buffer, size_t _BufferCount, int _Radix);
     * }
     */
    public static int _ultow_s(int _Value, MemorySegment _Buffer, long _BufferCount, int _Radix) {
        var mh$ = _ultow_s$MH();
        try {
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ultow$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$5,"_ultow");
    }
    /**
     * {@snippet :
     * wchar_t* _ultow(unsigned long _Value, wchar_t* _Buffer, int _Radix);
     * }
     */
    public static MemorySegment _ultow(int _Value, MemorySegment _Buffer, int _Radix) {
        var mh$ = _ultow$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstod$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$1,"wcstod");
    }
    /**
     * {@snippet :
     * double wcstod(const wchar_t* _String, wchar_t** _EndPtr);
     * }
     */
    public static double wcstod(MemorySegment _String, MemorySegment _EndPtr) {
        var mh$ = wcstod$MH();
        try {
            return (double)mh$.invokeExact(_String, _EndPtr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcstod_l$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$3,"_wcstod_l");
    }
    /**
     * {@snippet :
     * double _wcstod_l(const wchar_t* _String, wchar_t** _EndPtr, _locale_t _Locale);
     * }
     */
    public static double _wcstod_l(MemorySegment _String, MemorySegment _EndPtr, MemorySegment _Locale) {
        var mh$ = _wcstod_l$MH();
        try {
            return (double)mh$.invokeExact(_String, _EndPtr, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstol$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$5,"wcstol");
    }
    /**
     * {@snippet :
     * long wcstol(const wchar_t* _String, wchar_t** _EndPtr, int _Radix);
     * }
     */
    public static int wcstol(MemorySegment _String, MemorySegment _EndPtr, int _Radix) {
        var mh$ = wcstol$MH();
        try {
            return (int)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcstol_l$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$1,"_wcstol_l");
    }
    /**
     * {@snippet :
     * long _wcstol_l(const wchar_t* _String, wchar_t** _EndPtr, int _Radix, _locale_t _Locale);
     * }
     */
    public static int _wcstol_l(MemorySegment _String, MemorySegment _EndPtr, int _Radix, MemorySegment _Locale) {
        var mh$ = _wcstol_l$MH();
        try {
            return (int)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstoll$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$3,"wcstoll");
    }
    /**
     * {@snippet :
     * long long wcstoll(const wchar_t* _String, wchar_t** _EndPtr, int _Radix);
     * }
     */
    public static long wcstoll(MemorySegment _String, MemorySegment _EndPtr, int _Radix) {
        var mh$ = wcstoll$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcstoll_l$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$5,"_wcstoll_l");
    }
    /**
     * {@snippet :
     * long long _wcstoll_l(const wchar_t* _String, wchar_t** _EndPtr, int _Radix, _locale_t _Locale);
     * }
     */
    public static long _wcstoll_l(MemorySegment _String, MemorySegment _EndPtr, int _Radix, MemorySegment _Locale) {
        var mh$ = _wcstoll_l$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstoul$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$0,"wcstoul");
    }
    /**
     * {@snippet :
     * unsigned long wcstoul(const wchar_t* _String, wchar_t** _EndPtr, int _Radix);
     * }
     */
    public static int wcstoul(MemorySegment _String, MemorySegment _EndPtr, int _Radix) {
        var mh$ = wcstoul$MH();
        try {
            return (int)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcstoul_l$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$1,"_wcstoul_l");
    }
    /**
     * {@snippet :
     * unsigned long _wcstoul_l(const wchar_t* _String, wchar_t** _EndPtr, int _Radix, _locale_t _Locale);
     * }
     */
    public static int _wcstoul_l(MemorySegment _String, MemorySegment _EndPtr, int _Radix, MemorySegment _Locale) {
        var mh$ = _wcstoul_l$MH();
        try {
            return (int)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstoull$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$2,"wcstoull");
    }
    /**
     * {@snippet :
     * unsigned long long wcstoull(const wchar_t* _String, wchar_t** _EndPtr, int _Radix);
     * }
     */
    public static long wcstoull(MemorySegment _String, MemorySegment _EndPtr, int _Radix) {
        var mh$ = wcstoull$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcstoull_l$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$3,"_wcstoull_l");
    }
    /**
     * {@snippet :
     * unsigned long long _wcstoull_l(const wchar_t* _String, wchar_t** _EndPtr, int _Radix, _locale_t _Locale);
     * }
     */
    public static long _wcstoull_l(MemorySegment _String, MemorySegment _EndPtr, int _Radix, MemorySegment _Locale) {
        var mh$ = _wcstoull_l$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstold$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$4,"wcstold");
    }
    /**
     * {@snippet :
     * long double wcstold(const wchar_t* _String, wchar_t** _EndPtr);
     * }
     */
    public static double wcstold(MemorySegment _String, MemorySegment _EndPtr) {
        var mh$ = wcstold$MH();
        try {
            return (double)mh$.invokeExact(_String, _EndPtr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcstold_l$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$5,"_wcstold_l");
    }
    /**
     * {@snippet :
     * long double _wcstold_l(const wchar_t* _String, wchar_t** _EndPtr, _locale_t _Locale);
     * }
     */
    public static double _wcstold_l(MemorySegment _String, MemorySegment _EndPtr, MemorySegment _Locale) {
        var mh$ = _wcstold_l$MH();
        try {
            return (double)mh$.invokeExact(_String, _EndPtr, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstof$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$1,"wcstof");
    }
    /**
     * {@snippet :
     * float wcstof(const wchar_t* _String, wchar_t** _EndPtr);
     * }
     */
    public static float wcstof(MemorySegment _String, MemorySegment _EndPtr) {
        var mh$ = wcstof$MH();
        try {
            return (float)mh$.invokeExact(_String, _EndPtr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcstof_l$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$3,"_wcstof_l");
    }
    /**
     * {@snippet :
     * float _wcstof_l(const wchar_t* _String, wchar_t** _EndPtr, _locale_t _Locale);
     * }
     */
    public static float _wcstof_l(MemorySegment _String, MemorySegment _EndPtr, MemorySegment _Locale) {
        var mh$ = _wcstof_l$MH();
        try {
            return (float)mh$.invokeExact(_String, _EndPtr, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wtof$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$5,"_wtof");
    }
    /**
     * {@snippet :
     * double _wtof(const wchar_t* _String);
     * }
     */
    public static double _wtof(MemorySegment _String) {
        var mh$ = _wtof$MH();
        try {
            return (double)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wtof_l$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$0,"_wtof_l");
    }
    /**
     * {@snippet :
     * double _wtof_l(const wchar_t* _String, _locale_t _Locale);
     * }
     */
    public static double _wtof_l(MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _wtof_l$MH();
        try {
            return (double)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wtoi$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$2,"_wtoi");
    }
    /**
     * {@snippet :
     * int _wtoi(const wchar_t* _String);
     * }
     */
    public static int _wtoi(MemorySegment _String) {
        var mh$ = _wtoi$MH();
        try {
            return (int)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wtoi_l$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$3,"_wtoi_l");
    }
    /**
     * {@snippet :
     * int _wtoi_l(const wchar_t* _String, _locale_t _Locale);
     * }
     */
    public static int _wtoi_l(MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _wtoi_l$MH();
        try {
            return (int)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wtol$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$4,"_wtol");
    }
    /**
     * {@snippet :
     * long _wtol(const wchar_t* _String);
     * }
     */
    public static int _wtol(MemorySegment _String) {
        var mh$ = _wtol$MH();
        try {
            return (int)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wtol_l$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$5,"_wtol_l");
    }
    /**
     * {@snippet :
     * long _wtol_l(const wchar_t* _String, _locale_t _Locale);
     * }
     */
    public static int _wtol_l(MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _wtol_l$MH();
        try {
            return (int)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wtoll$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$0,"_wtoll");
    }
    /**
     * {@snippet :
     * long long _wtoll(const wchar_t* _String);
     * }
     */
    public static long _wtoll(MemorySegment _String) {
        var mh$ = _wtoll$MH();
        try {
            return (long)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wtoll_l$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$2,"_wtoll_l");
    }
    /**
     * {@snippet :
     * long long _wtoll_l(const wchar_t* _String, _locale_t _Locale);
     * }
     */
    public static long _wtoll_l(MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _wtoll_l$MH();
        try {
            return (long)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _i64tow_s$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$4,"_i64tow_s");
    }
    /**
     * {@snippet :
     * errno_t _i64tow_s(long long _Value, wchar_t* _Buffer, size_t _BufferCount, int _Radix);
     * }
     */
    public static int _i64tow_s(long _Value, MemorySegment _Buffer, long _BufferCount, int _Radix) {
        var mh$ = _i64tow_s$MH();
        try {
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _i64tow$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$6,"_i64tow");
    }
    /**
     * {@snippet :
     * wchar_t* _i64tow(long long _Value, wchar_t* _Buffer, int _Radix);
     * }
     */
    public static MemorySegment _i64tow(long _Value, MemorySegment _Buffer, int _Radix) {
        var mh$ = _i64tow$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ui64tow_s$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$0,"_ui64tow_s");
    }
    /**
     * {@snippet :
     * errno_t _ui64tow_s(unsigned long long _Value, wchar_t* _Buffer, size_t _BufferCount, int _Radix);
     * }
     */
    public static int _ui64tow_s(long _Value, MemorySegment _Buffer, long _BufferCount, int _Radix) {
        var mh$ = _ui64tow_s$MH();
        try {
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ui64tow$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$1,"_ui64tow");
    }
    /**
     * {@snippet :
     * wchar_t* _ui64tow(unsigned long long _Value, wchar_t* _Buffer, int _Radix);
     * }
     */
    public static MemorySegment _ui64tow(long _Value, MemorySegment _Buffer, int _Radix) {
        var mh$ = _ui64tow$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wtoi64$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$2,"_wtoi64");
    }
    /**
     * {@snippet :
     * long long _wtoi64(const wchar_t* _String);
     * }
     */
    public static long _wtoi64(MemorySegment _String) {
        var mh$ = _wtoi64$MH();
        try {
            return (long)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wtoi64_l$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$3,"_wtoi64_l");
    }
    /**
     * {@snippet :
     * long long _wtoi64_l(const wchar_t* _String, _locale_t _Locale);
     * }
     */
    public static long _wtoi64_l(MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _wtoi64_l$MH();
        try {
            return (long)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcstoi64$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$4,"_wcstoi64");
    }
    /**
     * {@snippet :
     * long long _wcstoi64(const wchar_t* _String, wchar_t** _EndPtr, int _Radix);
     * }
     */
    public static long _wcstoi64(MemorySegment _String, MemorySegment _EndPtr, int _Radix) {
        var mh$ = _wcstoi64$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcstoi64_l$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$5,"_wcstoi64_l");
    }
    /**
     * {@snippet :
     * long long _wcstoi64_l(const wchar_t* _String, wchar_t** _EndPtr, int _Radix, _locale_t _Locale);
     * }
     */
    public static long _wcstoi64_l(MemorySegment _String, MemorySegment _EndPtr, int _Radix, MemorySegment _Locale) {
        var mh$ = _wcstoi64_l$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcstoui64$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$0,"_wcstoui64");
    }
    /**
     * {@snippet :
     * unsigned long long _wcstoui64(const wchar_t* _String, wchar_t** _EndPtr, int _Radix);
     * }
     */
    public static long _wcstoui64(MemorySegment _String, MemorySegment _EndPtr, int _Radix) {
        var mh$ = _wcstoui64$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcstoui64_l$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$1,"_wcstoui64_l");
    }
    /**
     * {@snippet :
     * unsigned long long _wcstoui64_l(const wchar_t* _String, wchar_t** _EndPtr, int _Radix, _locale_t _Locale);
     * }
     */
    public static long _wcstoui64_l(MemorySegment _String, MemorySegment _EndPtr, int _Radix, MemorySegment _Locale) {
        var mh$ = _wcstoui64_l$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wfullpath$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$3,"_wfullpath");
    }
    /**
     * {@snippet :
     * wchar_t* _wfullpath(wchar_t* _Buffer, const wchar_t* _Path, size_t _BufferCount);
     * }
     */
    public static MemorySegment _wfullpath(MemorySegment _Buffer, MemorySegment _Path, long _BufferCount) {
        var mh$ = _wfullpath$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Buffer, _Path, _BufferCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wmakepath_s$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$5,"_wmakepath_s");
    }
    /**
     * {@snippet :
     * errno_t _wmakepath_s(wchar_t* _Buffer, size_t _BufferCount, const wchar_t* _Drive, const wchar_t* _Dir, const wchar_t* _Filename, const wchar_t* _Ext);
     * }
     */
    public static int _wmakepath_s(MemorySegment _Buffer, long _BufferCount, MemorySegment _Drive, MemorySegment _Dir, MemorySegment _Filename, MemorySegment _Ext) {
        var mh$ = _wmakepath_s$MH();
        try {
            return (int)mh$.invokeExact(_Buffer, _BufferCount, _Drive, _Dir, _Filename, _Ext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wmakepath$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$1,"_wmakepath");
    }
    /**
     * {@snippet :
     * void _wmakepath(wchar_t* _Buffer, const wchar_t* _Drive, const wchar_t* _Dir, const wchar_t* _Filename, const wchar_t* _Ext);
     * }
     */
    public static void _wmakepath(MemorySegment _Buffer, MemorySegment _Drive, MemorySegment _Dir, MemorySegment _Filename, MemorySegment _Ext) {
        var mh$ = _wmakepath$MH();
        try {
            mh$.invokeExact(_Buffer, _Drive, _Dir, _Filename, _Ext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wperror$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$2,"_wperror");
    }
    /**
     * {@snippet :
     * void _wperror(const wchar_t* _ErrorMessage);
     * }
     */
    public static void _wperror(MemorySegment _ErrorMessage) {
        var mh$ = _wperror$MH();
        try {
            mh$.invokeExact(_ErrorMessage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wsplitpath$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$3,"_wsplitpath");
    }
    /**
     * {@snippet :
     * void _wsplitpath(const wchar_t* _FullPath, wchar_t* _Drive, wchar_t* _Dir, wchar_t* _Filename, wchar_t* _Ext);
     * }
     */
    public static void _wsplitpath(MemorySegment _FullPath, MemorySegment _Drive, MemorySegment _Dir, MemorySegment _Filename, MemorySegment _Ext) {
        var mh$ = _wsplitpath$MH();
        try {
            mh$.invokeExact(_FullPath, _Drive, _Dir, _Filename, _Ext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wsplitpath_s$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$5,"_wsplitpath_s");
    }
    /**
     * {@snippet :
     * errno_t _wsplitpath_s(const wchar_t* _FullPath, wchar_t* _Drive, size_t _DriveCount, wchar_t* _Dir, size_t _DirCount, wchar_t* _Filename, size_t _FilenameCount, wchar_t* _Ext, size_t _ExtCount);
     * }
     */
    public static int _wsplitpath_s(MemorySegment _FullPath, MemorySegment _Drive, long _DriveCount, MemorySegment _Dir, long _DirCount, MemorySegment _Filename, long _FilenameCount, MemorySegment _Ext, long _ExtCount) {
        var mh$ = _wsplitpath_s$MH();
        try {
            return (int)mh$.invokeExact(_FullPath, _Drive, _DriveCount, _Dir, _DirCount, _Filename, _FilenameCount, _Ext, _ExtCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wdupenv_s$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$0,"_wdupenv_s");
    }
    /**
     * {@snippet :
     * errno_t _wdupenv_s(wchar_t** _Buffer, size_t* _BufferCount, const wchar_t* _VarName);
     * }
     */
    public static int _wdupenv_s(MemorySegment _Buffer, MemorySegment _BufferCount, MemorySegment _VarName) {
        var mh$ = _wdupenv_s$MH();
        try {
            return (int)mh$.invokeExact(_Buffer, _BufferCount, _VarName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wgetenv$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$2,"_wgetenv");
    }
    /**
     * {@snippet :
     * wchar_t* _wgetenv(const wchar_t* _VarName);
     * }
     */
    public static MemorySegment _wgetenv(MemorySegment _VarName) {
        var mh$ = _wgetenv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_VarName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wgetenv_s$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$4,"_wgetenv_s");
    }
    /**
     * {@snippet :
     * errno_t _wgetenv_s(size_t* _RequiredCount, wchar_t* _Buffer, size_t _BufferCount, const wchar_t* _VarName);
     * }
     */
    public static int _wgetenv_s(MemorySegment _RequiredCount, MemorySegment _Buffer, long _BufferCount, MemorySegment _VarName) {
        var mh$ = _wgetenv_s$MH();
        try {
            return (int)mh$.invokeExact(_RequiredCount, _Buffer, _BufferCount, _VarName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wputenv$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$5,"_wputenv");
    }
    /**
     * {@snippet :
     * int _wputenv(const wchar_t* _EnvString);
     * }
     */
    public static int _wputenv(MemorySegment _EnvString) {
        var mh$ = _wputenv$MH();
        try {
            return (int)mh$.invokeExact(_EnvString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wputenv_s$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$0,"_wputenv_s");
    }
    /**
     * {@snippet :
     * errno_t _wputenv_s(const wchar_t* _Name, const wchar_t* _Value);
     * }
     */
    public static int _wputenv_s(MemorySegment _Name, MemorySegment _Value) {
        var mh$ = _wputenv_s$MH();
        try {
            return (int)mh$.invokeExact(_Name, _Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wsearchenv_s$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$2,"_wsearchenv_s");
    }
    /**
     * {@snippet :
     * errno_t _wsearchenv_s(const wchar_t* _Filename, const wchar_t* _VarName, wchar_t* _Buffer, size_t _BufferCount);
     * }
     */
    public static int _wsearchenv_s(MemorySegment _Filename, MemorySegment _VarName, MemorySegment _Buffer, long _BufferCount) {
        var mh$ = _wsearchenv_s$MH();
        try {
            return (int)mh$.invokeExact(_Filename, _VarName, _Buffer, _BufferCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wsearchenv$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$4,"_wsearchenv");
    }
    /**
     * {@snippet :
     * void _wsearchenv(const wchar_t* _Filename, const wchar_t* _VarName, wchar_t* _ResultPath);
     * }
     */
    public static void _wsearchenv(MemorySegment _Filename, MemorySegment _VarName, MemorySegment _ResultPath) {
        var mh$ = _wsearchenv$MH();
        try {
            mh$.invokeExact(_Filename, _VarName, _ResultPath);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wsystem$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$5,"_wsystem");
    }
    /**
     * {@snippet :
     * int _wsystem(const wchar_t* _Command);
     * }
     */
    public static int _wsystem(MemorySegment _Command) {
        var mh$ = _wsystem$MH();
        try {
            return (int)mh$.invokeExact(_Command);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _swab$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$1,"_swab");
    }
    /**
     * {@snippet :
     * void _swab(char* _Buf1, char* _Buf2, int _SizeInBytes);
     * }
     */
    public static void _swab(MemorySegment _Buf1, MemorySegment _Buf2, int _SizeInBytes) {
        var mh$ = _swab$MH();
        try {
            mh$.invokeExact(_Buf1, _Buf2, _SizeInBytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle exit$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$3,"exit");
    }
    /**
     * {@snippet :
     * void exit(int _Code);
     * }
     */
    public static void exit(int _Code) {
        var mh$ = exit$MH();
        try {
            mh$.invokeExact(_Code);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _exit$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$4,"_exit");
    }
    /**
     * {@snippet :
     * void _exit(int _Code);
     * }
     */
    public static void _exit(int _Code) {
        var mh$ = _exit$MH();
        try {
            mh$.invokeExact(_Code);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _Exit$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$5,"_Exit");
    }
    /**
     * {@snippet :
     * void _Exit(int _Code);
     * }
     */
    public static void _Exit(int _Code) {
        var mh$ = _Exit$MH();
        try {
            mh$.invokeExact(_Code);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle quick_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$0,"quick_exit");
    }
    /**
     * {@snippet :
     * void quick_exit(int _Code);
     * }
     */
    public static void quick_exit(int _Code) {
        var mh$ = quick_exit$MH();
        try {
            mh$.invokeExact(_Code);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle abort$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$1,"abort");
    }
    /**
     * {@snippet :
     * void abort();
     * }
     */
    public static void abort() {
        var mh$ = abort$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _set_abort_behavior$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$3,"_set_abort_behavior");
    }
    /**
     * {@snippet :
     * unsigned int _set_abort_behavior(unsigned int _Flags, unsigned int _Mask);
     * }
     */
    public static int _set_abort_behavior(int _Flags, int _Mask) {
        var mh$ = _set_abort_behavior$MH();
        try {
            return (int)mh$.invokeExact(_Flags, _Mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atexit$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$3,"atexit");
    }
    /**
     * {@snippet :
     * int atexit(void (*)());
     * }
     */
    public static int atexit(MemorySegment x0) {
        var mh$ = atexit$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _onexit$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$4,"_onexit");
    }
    /**
     * {@snippet :
     * _onexit_t _onexit(_onexit_t _Func);
     * }
     */
    public static MemorySegment _onexit(MemorySegment _Func) {
        var mh$ = _onexit$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle at_quick_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$0,"at_quick_exit");
    }
    /**
     * {@snippet :
     * int at_quick_exit(void (*)());
     * }
     */
    public static int at_quick_exit(MemorySegment x0) {
        var mh$ = at_quick_exit$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _set_purecall_handler$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$4,"_set_purecall_handler");
    }
    /**
     * {@snippet :
     * _purecall_handler _set_purecall_handler(_purecall_handler _Handler);
     * }
     */
    public static MemorySegment _set_purecall_handler(MemorySegment _Handler) {
        var mh$ = _set_purecall_handler$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Handler);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _get_purecall_handler$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$6,"_get_purecall_handler");
    }
    /**
     * {@snippet :
     * _purecall_handler _get_purecall_handler();
     * }
     */
    public static MemorySegment _get_purecall_handler() {
        var mh$ = _get_purecall_handler$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _set_invalid_parameter_handler$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$0,"_set_invalid_parameter_handler");
    }
    /**
     * {@snippet :
     * _invalid_parameter_handler _set_invalid_parameter_handler(_invalid_parameter_handler _Handler);
     * }
     */
    public static MemorySegment _set_invalid_parameter_handler(MemorySegment _Handler) {
        var mh$ = _set_invalid_parameter_handler$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Handler);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _get_invalid_parameter_handler$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$1,"_get_invalid_parameter_handler");
    }
    /**
     * {@snippet :
     * _invalid_parameter_handler _get_invalid_parameter_handler();
     * }
     */
    public static MemorySegment _get_invalid_parameter_handler() {
        var mh$ = _get_invalid_parameter_handler$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _set_thread_local_invalid_parameter_handler$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$2,"_set_thread_local_invalid_parameter_handler");
    }
    /**
     * {@snippet :
     * _invalid_parameter_handler _set_thread_local_invalid_parameter_handler(_invalid_parameter_handler _Handler);
     * }
     */
    public static MemorySegment _set_thread_local_invalid_parameter_handler(MemorySegment _Handler) {
        var mh$ = _set_thread_local_invalid_parameter_handler$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Handler);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _get_thread_local_invalid_parameter_handler$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$3,"_get_thread_local_invalid_parameter_handler");
    }
    /**
     * {@snippet :
     * _invalid_parameter_handler _get_thread_local_invalid_parameter_handler();
     * }
     */
    public static MemorySegment _get_thread_local_invalid_parameter_handler() {
        var mh$ = _get_thread_local_invalid_parameter_handler$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _set_error_mode$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$5,"_set_error_mode");
    }
    /**
     * {@snippet :
     * int _set_error_mode(int _Mode);
     * }
     */
    public static int _set_error_mode(int _Mode) {
        var mh$ = _set_error_mode$MH();
        try {
            return (int)mh$.invokeExact(_Mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _errno$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$0,"_errno");
    }
    /**
     * {@snippet :
     * int* _errno();
     * }
     */
    public static MemorySegment _errno() {
        var mh$ = _errno$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _set_errno$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$1,"_set_errno");
    }
    /**
     * {@snippet :
     * errno_t _set_errno(int _Value);
     * }
     */
    public static int _set_errno(int _Value) {
        var mh$ = _set_errno$MH();
        try {
            return (int)mh$.invokeExact(_Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _get_errno$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$2,"_get_errno");
    }
    /**
     * {@snippet :
     * errno_t _get_errno(int* _Value);
     * }
     */
    public static int _get_errno(MemorySegment _Value) {
        var mh$ = _get_errno$MH();
        try {
            return (int)mh$.invokeExact(_Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __doserrno$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$3,"__doserrno");
    }
    /**
     * {@snippet :
     * unsigned long* __doserrno();
     * }
     */
    public static MemorySegment __doserrno() {
        var mh$ = __doserrno$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _set_doserrno$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$4,"_set_doserrno");
    }
    /**
     * {@snippet :
     * errno_t _set_doserrno(unsigned long _Value);
     * }
     */
    public static int _set_doserrno(int _Value) {
        var mh$ = _set_doserrno$MH();
        try {
            return (int)mh$.invokeExact(_Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _get_doserrno$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$5,"_get_doserrno");
    }
    /**
     * {@snippet :
     * errno_t _get_doserrno(unsigned long* _Value);
     * }
     */
    public static int _get_doserrno(MemorySegment _Value) {
        var mh$ = _get_doserrno$MH();
        try {
            return (int)mh$.invokeExact(_Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sys_errlist$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$0,"__sys_errlist");
    }
    /**
     * {@snippet :
     * char** __sys_errlist();
     * }
     */
    public static MemorySegment __sys_errlist() {
        var mh$ = __sys_errlist$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sys_nerr$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$1,"__sys_nerr");
    }
    /**
     * {@snippet :
     * int* __sys_nerr();
     * }
     */
    public static MemorySegment __sys_nerr() {
        var mh$ = __sys_nerr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle perror$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$2,"perror");
    }
    /**
     * {@snippet :
     * void perror(char* _ErrMsg);
     * }
     */
    public static void perror(MemorySegment _ErrMsg) {
        var mh$ = perror$MH();
        try {
            mh$.invokeExact(_ErrMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __p__pgmptr$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$3,"__p__pgmptr");
    }
    /**
     * {@snippet :
     * char** __p__pgmptr();
     * }
     */
    public static MemorySegment __p__pgmptr() {
        var mh$ = __p__pgmptr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __p__wpgmptr$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$4,"__p__wpgmptr");
    }
    /**
     * {@snippet :
     * wchar_t** __p__wpgmptr();
     * }
     */
    public static MemorySegment __p__wpgmptr() {
        var mh$ = __p__wpgmptr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __p__fmode$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$5,"__p__fmode");
    }
    /**
     * {@snippet :
     * int* __p__fmode();
     * }
     */
    public static MemorySegment __p__fmode() {
        var mh$ = __p__fmode$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _get_pgmptr$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$0,"_get_pgmptr");
    }
    /**
     * {@snippet :
     * errno_t _get_pgmptr(char** _Value);
     * }
     */
    public static int _get_pgmptr(MemorySegment _Value) {
        var mh$ = _get_pgmptr$MH();
        try {
            return (int)mh$.invokeExact(_Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _get_wpgmptr$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$1,"_get_wpgmptr");
    }
    /**
     * {@snippet :
     * errno_t _get_wpgmptr(wchar_t** _Value);
     * }
     */
    public static int _get_wpgmptr(MemorySegment _Value) {
        var mh$ = _get_wpgmptr$MH();
        try {
            return (int)mh$.invokeExact(_Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _set_fmode$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$2,"_set_fmode");
    }
    /**
     * {@snippet :
     * errno_t _set_fmode(int _Mode);
     * }
     */
    public static int _set_fmode(int _Mode) {
        var mh$ = _set_fmode$MH();
        try {
            return (int)mh$.invokeExact(_Mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _get_fmode$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$3,"_get_fmode");
    }
    /**
     * {@snippet :
     * errno_t _get_fmode(int* _PMode);
     * }
     */
    public static int _get_fmode(MemorySegment _PMode) {
        var mh$ = _get_fmode$MH();
        try {
            return (int)mh$.invokeExact(_PMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle abs$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$1,"abs");
    }
    /**
     * {@snippet :
     * int abs(int _Number);
     * }
     */
    public static int abs(int _Number) {
        var mh$ = abs$MH();
        try {
            return (int)mh$.invokeExact(_Number);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle labs$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$2,"labs");
    }
    /**
     * {@snippet :
     * long labs(long _Number);
     * }
     */
    public static int labs(int _Number) {
        var mh$ = labs$MH();
        try {
            return (int)mh$.invokeExact(_Number);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llabs$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$4,"llabs");
    }
    /**
     * {@snippet :
     * long long llabs(long long _Number);
     * }
     */
    public static long llabs(long _Number) {
        var mh$ = llabs$MH();
        try {
            return (long)mh$.invokeExact(_Number);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _abs64$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$5,"_abs64");
    }
    /**
     * {@snippet :
     * long long _abs64(long long _Number);
     * }
     */
    public static long _abs64(long _Number) {
        var mh$ = _abs64$MH();
        try {
            return (long)mh$.invokeExact(_Number);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _byteswap_ushort$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$1,"_byteswap_ushort");
    }
    /**
     * {@snippet :
     * unsigned short _byteswap_ushort(unsigned short _Number);
     * }
     */
    public static short _byteswap_ushort(short _Number) {
        var mh$ = _byteswap_ushort$MH();
        try {
            return (short)mh$.invokeExact(_Number);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _byteswap_ulong$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$2,"_byteswap_ulong");
    }
    /**
     * {@snippet :
     * unsigned long _byteswap_ulong(unsigned long _Number);
     * }
     */
    public static int _byteswap_ulong(int _Number) {
        var mh$ = _byteswap_ulong$MH();
        try {
            return (int)mh$.invokeExact(_Number);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _byteswap_uint64$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$3,"_byteswap_uint64");
    }
    /**
     * {@snippet :
     * unsigned long long _byteswap_uint64(unsigned long long _Number);
     * }
     */
    public static long _byteswap_uint64(long _Number) {
        var mh$ = _byteswap_uint64$MH();
        try {
            return (long)mh$.invokeExact(_Number);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle div$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$5,"div");
    }
    /**
     * {@snippet :
     * div_t div(int _Numerator, int _Denominator);
     * }
     */
    public static MemorySegment div(SegmentAllocator allocator, int _Numerator, int _Denominator) {
        var mh$ = div$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, _Numerator, _Denominator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ldiv$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$1,"ldiv");
    }
    /**
     * {@snippet :
     * ldiv_t ldiv(long _Numerator, long _Denominator);
     * }
     */
    public static MemorySegment ldiv(SegmentAllocator allocator, int _Numerator, int _Denominator) {
        var mh$ = ldiv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, _Numerator, _Denominator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lldiv$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$3,"lldiv");
    }
    /**
     * {@snippet :
     * lldiv_t lldiv(long long _Numerator, long long _Denominator);
     * }
     */
    public static MemorySegment lldiv(SegmentAllocator allocator, long _Numerator, long _Denominator) {
        var mh$ = lldiv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, _Numerator, _Denominator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _rotl$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$4,"_rotl");
    }
    /**
     * {@snippet :
     * unsigned int _rotl(unsigned int _Value, int _Shift);
     * }
     */
    public static int _rotl(int _Value, int _Shift) {
        var mh$ = _rotl$MH();
        try {
            return (int)mh$.invokeExact(_Value, _Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _lrotl$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$5,"_lrotl");
    }
    /**
     * {@snippet :
     * unsigned long _lrotl(unsigned long _Value, int _Shift);
     * }
     */
    public static int _lrotl(int _Value, int _Shift) {
        var mh$ = _lrotl$MH();
        try {
            return (int)mh$.invokeExact(_Value, _Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _rotl64$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$1,"_rotl64");
    }
    /**
     * {@snippet :
     * unsigned long long _rotl64(unsigned long long _Value, int _Shift);
     * }
     */
    public static long _rotl64(long _Value, int _Shift) {
        var mh$ = _rotl64$MH();
        try {
            return (long)mh$.invokeExact(_Value, _Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _rotr$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$2,"_rotr");
    }
    /**
     * {@snippet :
     * unsigned int _rotr(unsigned int _Value, int _Shift);
     * }
     */
    public static int _rotr(int _Value, int _Shift) {
        var mh$ = _rotr$MH();
        try {
            return (int)mh$.invokeExact(_Value, _Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _lrotr$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$3,"_lrotr");
    }
    /**
     * {@snippet :
     * unsigned long _lrotr(unsigned long _Value, int _Shift);
     * }
     */
    public static int _lrotr(int _Value, int _Shift) {
        var mh$ = _lrotr$MH();
        try {
            return (int)mh$.invokeExact(_Value, _Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _rotr64$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$4,"_rotr64");
    }
    /**
     * {@snippet :
     * unsigned long long _rotr64(unsigned long long _Value, int _Shift);
     * }
     */
    public static long _rotr64(long _Value, int _Shift) {
        var mh$ = _rotr64$MH();
        try {
            return (long)mh$.invokeExact(_Value, _Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srand$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$5,"srand");
    }
    /**
     * {@snippet :
     * void srand(unsigned int _Seed);
     * }
     */
    public static void srand(int _Seed) {
        var mh$ = srand$MH();
        try {
            mh$.invokeExact(_Seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rand$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$0,"rand");
    }
    /**
     * {@snippet :
     * int rand();
     * }
     */
    public static int rand() {
        var mh$ = rand$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atof$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$2,"atof");
    }
    /**
     * {@snippet :
     * double atof(char* _String);
     * }
     */
    public static double atof(MemorySegment _String) {
        var mh$ = atof$MH();
        try {
            return (double)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atoi$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$3,"atoi");
    }
    /**
     * {@snippet :
     * int atoi(char* _String);
     * }
     */
    public static int atoi(MemorySegment _String) {
        var mh$ = atoi$MH();
        try {
            return (int)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atol$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$4,"atol");
    }
    /**
     * {@snippet :
     * long atol(char* _String);
     * }
     */
    public static int atol(MemorySegment _String) {
        var mh$ = atol$MH();
        try {
            return (int)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atoll$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$5,"atoll");
    }
    /**
     * {@snippet :
     * long long atoll(char* _String);
     * }
     */
    public static long atoll(MemorySegment _String) {
        var mh$ = atoll$MH();
        try {
            return (long)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _atoi64$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$0,"_atoi64");
    }
    /**
     * {@snippet :
     * long long _atoi64(char* _String);
     * }
     */
    public static long _atoi64(MemorySegment _String) {
        var mh$ = _atoi64$MH();
        try {
            return (long)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _atof_l$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$1,"_atof_l");
    }
    /**
     * {@snippet :
     * double _atof_l(char* _String, _locale_t _Locale);
     * }
     */
    public static double _atof_l(MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _atof_l$MH();
        try {
            return (double)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _atoi_l$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$2,"_atoi_l");
    }
    /**
     * {@snippet :
     * int _atoi_l(char* _String, _locale_t _Locale);
     * }
     */
    public static int _atoi_l(MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _atoi_l$MH();
        try {
            return (int)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _atol_l$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$3,"_atol_l");
    }
    /**
     * {@snippet :
     * long _atol_l(char* _String, _locale_t _Locale);
     * }
     */
    public static int _atol_l(MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _atol_l$MH();
        try {
            return (int)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _atoll_l$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$4,"_atoll_l");
    }
    /**
     * {@snippet :
     * long long _atoll_l(char* _String, _locale_t _Locale);
     * }
     */
    public static long _atoll_l(MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _atoll_l$MH();
        try {
            return (long)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _atoi64_l$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$5,"_atoi64_l");
    }
    /**
     * {@snippet :
     * long long _atoi64_l(char* _String, _locale_t _Locale);
     * }
     */
    public static long _atoi64_l(MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _atoi64_l$MH();
        try {
            return (long)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _atoflt$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$0,"_atoflt");
    }
    /**
     * {@snippet :
     * int _atoflt(_CRT_FLOAT* _Result, char* _String);
     * }
     */
    public static int _atoflt(MemorySegment _Result, MemorySegment _String) {
        var mh$ = _atoflt$MH();
        try {
            return (int)mh$.invokeExact(_Result, _String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _atodbl$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$1,"_atodbl");
    }
    /**
     * {@snippet :
     * int _atodbl(_CRT_DOUBLE* _Result, char* _String);
     * }
     */
    public static int _atodbl(MemorySegment _Result, MemorySegment _String) {
        var mh$ = _atodbl$MH();
        try {
            return (int)mh$.invokeExact(_Result, _String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _atoldbl$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$2,"_atoldbl");
    }
    /**
     * {@snippet :
     * int _atoldbl(_LDOUBLE* _Result, char* _String);
     * }
     */
    public static int _atoldbl(MemorySegment _Result, MemorySegment _String) {
        var mh$ = _atoldbl$MH();
        try {
            return (int)mh$.invokeExact(_Result, _String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _atoflt_l$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$3,"_atoflt_l");
    }
    /**
     * {@snippet :
     * int _atoflt_l(_CRT_FLOAT* _Result, char* _String, _locale_t _Locale);
     * }
     */
    public static int _atoflt_l(MemorySegment _Result, MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _atoflt_l$MH();
        try {
            return (int)mh$.invokeExact(_Result, _String, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _atodbl_l$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$4,"_atodbl_l");
    }
    /**
     * {@snippet :
     * int _atodbl_l(_CRT_DOUBLE* _Result, char* _String, _locale_t _Locale);
     * }
     */
    public static int _atodbl_l(MemorySegment _Result, MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _atodbl_l$MH();
        try {
            return (int)mh$.invokeExact(_Result, _String, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _atoldbl_l$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$5,"_atoldbl_l");
    }
    /**
     * {@snippet :
     * int _atoldbl_l(_LDOUBLE* _Result, char* _String, _locale_t _Locale);
     * }
     */
    public static int _atoldbl_l(MemorySegment _Result, MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _atoldbl_l$MH();
        try {
            return (int)mh$.invokeExact(_Result, _String, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtof$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$0,"strtof");
    }
    /**
     * {@snippet :
     * float strtof(char* _String, char** _EndPtr);
     * }
     */
    public static float strtof(MemorySegment _String, MemorySegment _EndPtr) {
        var mh$ = strtof$MH();
        try {
            return (float)mh$.invokeExact(_String, _EndPtr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strtof_l$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$1,"_strtof_l");
    }
    /**
     * {@snippet :
     * float _strtof_l(char* _String, char** _EndPtr, _locale_t _Locale);
     * }
     */
    public static float _strtof_l(MemorySegment _String, MemorySegment _EndPtr, MemorySegment _Locale) {
        var mh$ = _strtof_l$MH();
        try {
            return (float)mh$.invokeExact(_String, _EndPtr, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtod$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$2,"strtod");
    }
    /**
     * {@snippet :
     * double strtod(char* _String, char** _EndPtr);
     * }
     */
    public static double strtod(MemorySegment _String, MemorySegment _EndPtr) {
        var mh$ = strtod$MH();
        try {
            return (double)mh$.invokeExact(_String, _EndPtr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strtod_l$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$3,"_strtod_l");
    }
    /**
     * {@snippet :
     * double _strtod_l(char* _String, char** _EndPtr, _locale_t _Locale);
     * }
     */
    public static double _strtod_l(MemorySegment _String, MemorySegment _EndPtr, MemorySegment _Locale) {
        var mh$ = _strtod_l$MH();
        try {
            return (double)mh$.invokeExact(_String, _EndPtr, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtold$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$4,"strtold");
    }
    /**
     * {@snippet :
     * long double strtold(char* _String, char** _EndPtr);
     * }
     */
    public static double strtold(MemorySegment _String, MemorySegment _EndPtr) {
        var mh$ = strtold$MH();
        try {
            return (double)mh$.invokeExact(_String, _EndPtr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strtold_l$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$5,"_strtold_l");
    }
    /**
     * {@snippet :
     * long double _strtold_l(char* _String, char** _EndPtr, _locale_t _Locale);
     * }
     */
    public static double _strtold_l(MemorySegment _String, MemorySegment _EndPtr, MemorySegment _Locale) {
        var mh$ = _strtold_l$MH();
        try {
            return (double)mh$.invokeExact(_String, _EndPtr, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtol$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$0,"strtol");
    }
    /**
     * {@snippet :
     * long strtol(char* _String, char** _EndPtr, int _Radix);
     * }
     */
    public static int strtol(MemorySegment _String, MemorySegment _EndPtr, int _Radix) {
        var mh$ = strtol$MH();
        try {
            return (int)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strtol_l$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$1,"_strtol_l");
    }
    /**
     * {@snippet :
     * long _strtol_l(char* _String, char** _EndPtr, int _Radix, _locale_t _Locale);
     * }
     */
    public static int _strtol_l(MemorySegment _String, MemorySegment _EndPtr, int _Radix, MemorySegment _Locale) {
        var mh$ = _strtol_l$MH();
        try {
            return (int)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoll$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$2,"strtoll");
    }
    /**
     * {@snippet :
     * long long strtoll(char* _String, char** _EndPtr, int _Radix);
     * }
     */
    public static long strtoll(MemorySegment _String, MemorySegment _EndPtr, int _Radix) {
        var mh$ = strtoll$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strtoll_l$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$3,"_strtoll_l");
    }
    /**
     * {@snippet :
     * long long _strtoll_l(char* _String, char** _EndPtr, int _Radix, _locale_t _Locale);
     * }
     */
    public static long _strtoll_l(MemorySegment _String, MemorySegment _EndPtr, int _Radix, MemorySegment _Locale) {
        var mh$ = _strtoll_l$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoul$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$4,"strtoul");
    }
    /**
     * {@snippet :
     * unsigned long strtoul(char* _String, char** _EndPtr, int _Radix);
     * }
     */
    public static int strtoul(MemorySegment _String, MemorySegment _EndPtr, int _Radix) {
        var mh$ = strtoul$MH();
        try {
            return (int)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strtoul_l$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$5,"_strtoul_l");
    }
    /**
     * {@snippet :
     * unsigned long _strtoul_l(char* _String, char** _EndPtr, int _Radix, _locale_t _Locale);
     * }
     */
    public static int _strtoul_l(MemorySegment _String, MemorySegment _EndPtr, int _Radix, MemorySegment _Locale) {
        var mh$ = _strtoul_l$MH();
        try {
            return (int)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoull$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$0,"strtoull");
    }
    /**
     * {@snippet :
     * unsigned long long strtoull(char* _String, char** _EndPtr, int _Radix);
     * }
     */
    public static long strtoull(MemorySegment _String, MemorySegment _EndPtr, int _Radix) {
        var mh$ = strtoull$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strtoull_l$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$1,"_strtoull_l");
    }
    /**
     * {@snippet :
     * unsigned long long _strtoull_l(char* _String, char** _EndPtr, int _Radix, _locale_t _Locale);
     * }
     */
    public static long _strtoull_l(MemorySegment _String, MemorySegment _EndPtr, int _Radix, MemorySegment _Locale) {
        var mh$ = _strtoull_l$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strtoi64$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$2,"_strtoi64");
    }
    /**
     * {@snippet :
     * long long _strtoi64(char* _String, char** _EndPtr, int _Radix);
     * }
     */
    public static long _strtoi64(MemorySegment _String, MemorySegment _EndPtr, int _Radix) {
        var mh$ = _strtoi64$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strtoi64_l$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$3,"_strtoi64_l");
    }
    /**
     * {@snippet :
     * long long _strtoi64_l(char* _String, char** _EndPtr, int _Radix, _locale_t _Locale);
     * }
     */
    public static long _strtoi64_l(MemorySegment _String, MemorySegment _EndPtr, int _Radix, MemorySegment _Locale) {
        var mh$ = _strtoi64_l$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strtoui64$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$4,"_strtoui64");
    }
    /**
     * {@snippet :
     * unsigned long long _strtoui64(char* _String, char** _EndPtr, int _Radix);
     * }
     */
    public static long _strtoui64(MemorySegment _String, MemorySegment _EndPtr, int _Radix) {
        var mh$ = _strtoui64$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strtoui64_l$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$5,"_strtoui64_l");
    }
    /**
     * {@snippet :
     * unsigned long long _strtoui64_l(char* _String, char** _EndPtr, int _Radix, _locale_t _Locale);
     * }
     */
    public static long _strtoui64_l(MemorySegment _String, MemorySegment _EndPtr, int _Radix, MemorySegment _Locale) {
        var mh$ = _strtoui64_l$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _itoa_s$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$0,"_itoa_s");
    }
    /**
     * {@snippet :
     * errno_t _itoa_s(int _Value, char* _Buffer, size_t _BufferCount, int _Radix);
     * }
     */
    public static int _itoa_s(int _Value, MemorySegment _Buffer, long _BufferCount, int _Radix) {
        var mh$ = _itoa_s$MH();
        try {
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _itoa$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$1,"_itoa");
    }
    /**
     * {@snippet :
     * char* _itoa(int _Value, char* _Buffer, int _Radix);
     * }
     */
    public static MemorySegment _itoa(int _Value, MemorySegment _Buffer, int _Radix) {
        var mh$ = _itoa$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ltoa_s$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$2,"_ltoa_s");
    }
    /**
     * {@snippet :
     * errno_t _ltoa_s(long _Value, char* _Buffer, size_t _BufferCount, int _Radix);
     * }
     */
    public static int _ltoa_s(int _Value, MemorySegment _Buffer, long _BufferCount, int _Radix) {
        var mh$ = _ltoa_s$MH();
        try {
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ltoa$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$3,"_ltoa");
    }
    /**
     * {@snippet :
     * char* _ltoa(long _Value, char* _Buffer, int _Radix);
     * }
     */
    public static MemorySegment _ltoa(int _Value, MemorySegment _Buffer, int _Radix) {
        var mh$ = _ltoa$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ultoa_s$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$4,"_ultoa_s");
    }
    /**
     * {@snippet :
     * errno_t _ultoa_s(unsigned long _Value, char* _Buffer, size_t _BufferCount, int _Radix);
     * }
     */
    public static int _ultoa_s(int _Value, MemorySegment _Buffer, long _BufferCount, int _Radix) {
        var mh$ = _ultoa_s$MH();
        try {
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ultoa$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$5,"_ultoa");
    }
    /**
     * {@snippet :
     * char* _ultoa(unsigned long _Value, char* _Buffer, int _Radix);
     * }
     */
    public static MemorySegment _ultoa(int _Value, MemorySegment _Buffer, int _Radix) {
        var mh$ = _ultoa$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _i64toa_s$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$0,"_i64toa_s");
    }
    /**
     * {@snippet :
     * errno_t _i64toa_s(long long _Value, char* _Buffer, size_t _BufferCount, int _Radix);
     * }
     */
    public static int _i64toa_s(long _Value, MemorySegment _Buffer, long _BufferCount, int _Radix) {
        var mh$ = _i64toa_s$MH();
        try {
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _i64toa$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$1,"_i64toa");
    }
    /**
     * {@snippet :
     * char* _i64toa(long long _Value, char* _Buffer, int _Radix);
     * }
     */
    public static MemorySegment _i64toa(long _Value, MemorySegment _Buffer, int _Radix) {
        var mh$ = _i64toa$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ui64toa_s$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$2,"_ui64toa_s");
    }
    /**
     * {@snippet :
     * errno_t _ui64toa_s(unsigned long long _Value, char* _Buffer, size_t _BufferCount, int _Radix);
     * }
     */
    public static int _ui64toa_s(long _Value, MemorySegment _Buffer, long _BufferCount, int _Radix) {
        var mh$ = _ui64toa_s$MH();
        try {
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ui64toa$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$3,"_ui64toa");
    }
    /**
     * {@snippet :
     * char* _ui64toa(unsigned long long _Value, char* _Buffer, int _Radix);
     * }
     */
    public static MemorySegment _ui64toa(long _Value, MemorySegment _Buffer, int _Radix) {
        var mh$ = _ui64toa$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ecvt_s$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$5,"_ecvt_s");
    }
    /**
     * {@snippet :
     * errno_t _ecvt_s(char* _Buffer, size_t _BufferCount, double _Value, int _DigitCount, int* _PtDec, int* _PtSign);
     * }
     */
    public static int _ecvt_s(MemorySegment _Buffer, long _BufferCount, double _Value, int _DigitCount, MemorySegment _PtDec, MemorySegment _PtSign) {
        var mh$ = _ecvt_s$MH();
        try {
            return (int)mh$.invokeExact(_Buffer, _BufferCount, _Value, _DigitCount, _PtDec, _PtSign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ecvt$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$1,"_ecvt");
    }
    /**
     * {@snippet :
     * char* _ecvt(double _Value, int _DigitCount, int* _PtDec, int* _PtSign);
     * }
     */
    public static MemorySegment _ecvt(double _Value, int _DigitCount, MemorySegment _PtDec, MemorySegment _PtSign) {
        var mh$ = _ecvt$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Value, _DigitCount, _PtDec, _PtSign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _fcvt_s$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$2,"_fcvt_s");
    }
    /**
     * {@snippet :
     * errno_t _fcvt_s(char* _Buffer, size_t _BufferCount, double _Value, int _FractionalDigitCount, int* _PtDec, int* _PtSign);
     * }
     */
    public static int _fcvt_s(MemorySegment _Buffer, long _BufferCount, double _Value, int _FractionalDigitCount, MemorySegment _PtDec, MemorySegment _PtSign) {
        var mh$ = _fcvt_s$MH();
        try {
            return (int)mh$.invokeExact(_Buffer, _BufferCount, _Value, _FractionalDigitCount, _PtDec, _PtSign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _fcvt$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$3,"_fcvt");
    }
    /**
     * {@snippet :
     * char* _fcvt(double _Value, int _FractionalDigitCount, int* _PtDec, int* _PtSign);
     * }
     */
    public static MemorySegment _fcvt(double _Value, int _FractionalDigitCount, MemorySegment _PtDec, MemorySegment _PtSign) {
        var mh$ = _fcvt$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Value, _FractionalDigitCount, _PtDec, _PtSign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _gcvt_s$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$5,"_gcvt_s");
    }
    /**
     * {@snippet :
     * errno_t _gcvt_s(char* _Buffer, size_t _BufferCount, double _Value, int _DigitCount);
     * }
     */
    public static int _gcvt_s(MemorySegment _Buffer, long _BufferCount, double _Value, int _DigitCount) {
        var mh$ = _gcvt_s$MH();
        try {
            return (int)mh$.invokeExact(_Buffer, _BufferCount, _Value, _DigitCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _gcvt$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$1,"_gcvt");
    }
    /**
     * {@snippet :
     * char* _gcvt(double _Value, int _DigitCount, char* _Buffer);
     * }
     */
    public static MemorySegment _gcvt(double _Value, int _DigitCount, MemorySegment _Buffer) {
        var mh$ = _gcvt$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Value, _DigitCount, _Buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ___mb_cur_max_func$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$2,"___mb_cur_max_func");
    }
    /**
     * {@snippet :
     * int ___mb_cur_max_func();
     * }
     */
    public static int ___mb_cur_max_func() {
        var mh$ = ___mb_cur_max_func$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ___mb_cur_max_l_func$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$3,"___mb_cur_max_l_func");
    }
    /**
     * {@snippet :
     * int ___mb_cur_max_l_func(_locale_t _Locale);
     * }
     */
    public static int ___mb_cur_max_l_func(MemorySegment _Locale) {
        var mh$ = ___mb_cur_max_l_func$MH();
        try {
            return (int)mh$.invokeExact(_Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mblen$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$5,"mblen");
    }
    /**
     * {@snippet :
     * int mblen(char* _Ch, size_t _MaxCount);
     * }
     */
    public static int mblen(MemorySegment _Ch, long _MaxCount) {
        var mh$ = mblen$MH();
        try {
            return (int)mh$.invokeExact(_Ch, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mblen_l$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$1,"_mblen_l");
    }
    /**
     * {@snippet :
     * int _mblen_l(char* _Ch, size_t _MaxCount, _locale_t _Locale);
     * }
     */
    public static int _mblen_l(MemorySegment _Ch, long _MaxCount, MemorySegment _Locale) {
        var mh$ = _mblen_l$MH();
        try {
            return (int)mh$.invokeExact(_Ch, _MaxCount, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mbstrlen$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$2,"_mbstrlen");
    }
    /**
     * {@snippet :
     * size_t _mbstrlen(char* _String);
     * }
     */
    public static long _mbstrlen(MemorySegment _String) {
        var mh$ = _mbstrlen$MH();
        try {
            return (long)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mbstrlen_l$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$3,"_mbstrlen_l");
    }
    /**
     * {@snippet :
     * size_t _mbstrlen_l(char* _String, _locale_t _Locale);
     * }
     */
    public static long _mbstrlen_l(MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _mbstrlen_l$MH();
        try {
            return (long)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mbstrnlen$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$5,"_mbstrnlen");
    }
    /**
     * {@snippet :
     * size_t _mbstrnlen(char* _String, size_t _MaxCount);
     * }
     */
    public static long _mbstrnlen(MemorySegment _String, long _MaxCount) {
        var mh$ = _mbstrnlen$MH();
        try {
            return (long)mh$.invokeExact(_String, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mbstrnlen_l$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$1,"_mbstrnlen_l");
    }
    /**
     * {@snippet :
     * size_t _mbstrnlen_l(char* _String, size_t _MaxCount, _locale_t _Locale);
     * }
     */
    public static long _mbstrnlen_l(MemorySegment _String, long _MaxCount, MemorySegment _Locale) {
        var mh$ = _mbstrnlen_l$MH();
        try {
            return (long)mh$.invokeExact(_String, _MaxCount, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mbtowc$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$3,"mbtowc");
    }
    /**
     * {@snippet :
     * int mbtowc(wchar_t* _DstCh, char* _SrcCh, size_t _SrcSizeInBytes);
     * }
     */
    public static int mbtowc(MemorySegment _DstCh, MemorySegment _SrcCh, long _SrcSizeInBytes) {
        var mh$ = mbtowc$MH();
        try {
            return (int)mh$.invokeExact(_DstCh, _SrcCh, _SrcSizeInBytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mbtowc_l$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$4,"_mbtowc_l");
    }
    /**
     * {@snippet :
     * int _mbtowc_l(wchar_t* _DstCh, char* _SrcCh, size_t _SrcSizeInBytes, _locale_t _Locale);
     * }
     */
    public static int _mbtowc_l(MemorySegment _DstCh, MemorySegment _SrcCh, long _SrcSizeInBytes, MemorySegment _Locale) {
        var mh$ = _mbtowc_l$MH();
        try {
            return (int)mh$.invokeExact(_DstCh, _SrcCh, _SrcSizeInBytes, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mbstowcs_s$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$6,"mbstowcs_s");
    }
    /**
     * {@snippet :
     * errno_t mbstowcs_s(size_t* _PtNumOfCharConverted, wchar_t* _DstBuf, size_t _SizeInWords, char* _SrcBuf, size_t _MaxCount);
     * }
     */
    public static int mbstowcs_s(MemorySegment _PtNumOfCharConverted, MemorySegment _DstBuf, long _SizeInWords, MemorySegment _SrcBuf, long _MaxCount) {
        var mh$ = mbstowcs_s$MH();
        try {
            return (int)mh$.invokeExact(_PtNumOfCharConverted, _DstBuf, _SizeInWords, _SrcBuf, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mbstowcs$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$1,"mbstowcs");
    }
    /**
     * {@snippet :
     * size_t mbstowcs(wchar_t* _Dest, char* _Source, size_t _MaxCount);
     * }
     */
    public static long mbstowcs(MemorySegment _Dest, MemorySegment _Source, long _MaxCount) {
        var mh$ = mbstowcs$MH();
        try {
            return (long)mh$.invokeExact(_Dest, _Source, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mbstowcs_s_l$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$3,"_mbstowcs_s_l");
    }
    /**
     * {@snippet :
     * errno_t _mbstowcs_s_l(size_t* _PtNumOfCharConverted, wchar_t* _DstBuf, size_t _SizeInWords, char* _SrcBuf, size_t _MaxCount, _locale_t _Locale);
     * }
     */
    public static int _mbstowcs_s_l(MemorySegment _PtNumOfCharConverted, MemorySegment _DstBuf, long _SizeInWords, MemorySegment _SrcBuf, long _MaxCount, MemorySegment _Locale) {
        var mh$ = _mbstowcs_s_l$MH();
        try {
            return (int)mh$.invokeExact(_PtNumOfCharConverted, _DstBuf, _SizeInWords, _SrcBuf, _MaxCount, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mbstowcs_l$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$5,"_mbstowcs_l");
    }
    /**
     * {@snippet :
     * size_t _mbstowcs_l(wchar_t* _Dest, char* _Source, size_t _MaxCount, _locale_t _Locale);
     * }
     */
    public static long _mbstowcs_l(MemorySegment _Dest, MemorySegment _Source, long _MaxCount, MemorySegment _Locale) {
        var mh$ = _mbstowcs_l$MH();
        try {
            return (long)mh$.invokeExact(_Dest, _Source, _MaxCount, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wctomb$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$1,"wctomb");
    }
    /**
     * {@snippet :
     * int wctomb(char* _MbCh, wchar_t _WCh);
     * }
     */
    public static int wctomb(MemorySegment _MbCh, short _WCh) {
        var mh$ = wctomb$MH();
        try {
            return (int)mh$.invokeExact(_MbCh, _WCh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wctomb_l$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$3,"_wctomb_l");
    }
    /**
     * {@snippet :
     * int _wctomb_l(char* _MbCh, wchar_t _WCh, _locale_t _Locale);
     * }
     */
    public static int _wctomb_l(MemorySegment _MbCh, short _WCh, MemorySegment _Locale) {
        var mh$ = _wctomb_l$MH();
        try {
            return (int)mh$.invokeExact(_MbCh, _WCh, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wctomb_s$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$5,"wctomb_s");
    }
    /**
     * {@snippet :
     * errno_t wctomb_s(int* _SizeConverted, char* _MbCh, rsize_t _SizeInBytes, wchar_t _WCh);
     * }
     */
    public static int wctomb_s(MemorySegment _SizeConverted, MemorySegment _MbCh, long _SizeInBytes, short _WCh) {
        var mh$ = wctomb_s$MH();
        try {
            return (int)mh$.invokeExact(_SizeConverted, _MbCh, _SizeInBytes, _WCh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wctomb_s_l$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$1,"_wctomb_s_l");
    }
    /**
     * {@snippet :
     * errno_t _wctomb_s_l(int* _SizeConverted, char* _MbCh, size_t _SizeInBytes, wchar_t _WCh, _locale_t _Locale);
     * }
     */
    public static int _wctomb_s_l(MemorySegment _SizeConverted, MemorySegment _MbCh, long _SizeInBytes, short _WCh, MemorySegment _Locale) {
        var mh$ = _wctomb_s_l$MH();
        try {
            return (int)mh$.invokeExact(_SizeConverted, _MbCh, _SizeInBytes, _WCh, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstombs_s$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$2,"wcstombs_s");
    }
    /**
     * {@snippet :
     * errno_t wcstombs_s(size_t* _PtNumOfCharConverted, char* _Dst, size_t _DstSizeInBytes, const wchar_t* _Src, size_t _MaxCountInBytes);
     * }
     */
    public static int wcstombs_s(MemorySegment _PtNumOfCharConverted, MemorySegment _Dst, long _DstSizeInBytes, MemorySegment _Src, long _MaxCountInBytes) {
        var mh$ = wcstombs_s$MH();
        try {
            return (int)mh$.invokeExact(_PtNumOfCharConverted, _Dst, _DstSizeInBytes, _Src, _MaxCountInBytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstombs$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$3,"wcstombs");
    }
    /**
     * {@snippet :
     * size_t wcstombs(char* _Dest, const wchar_t* _Source, size_t _MaxCount);
     * }
     */
    public static long wcstombs(MemorySegment _Dest, MemorySegment _Source, long _MaxCount) {
        var mh$ = wcstombs$MH();
        try {
            return (long)mh$.invokeExact(_Dest, _Source, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcstombs_s_l$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$4,"_wcstombs_s_l");
    }
    /**
     * {@snippet :
     * errno_t _wcstombs_s_l(size_t* _PtNumOfCharConverted, char* _Dst, size_t _DstSizeInBytes, const wchar_t* _Src, size_t _MaxCountInBytes, _locale_t _Locale);
     * }
     */
    public static int _wcstombs_s_l(MemorySegment _PtNumOfCharConverted, MemorySegment _Dst, long _DstSizeInBytes, MemorySegment _Src, long _MaxCountInBytes, MemorySegment _Locale) {
        var mh$ = _wcstombs_s_l$MH();
        try {
            return (int)mh$.invokeExact(_PtNumOfCharConverted, _Dst, _DstSizeInBytes, _Src, _MaxCountInBytes, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcstombs_l$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$5,"_wcstombs_l");
    }
    /**
     * {@snippet :
     * size_t _wcstombs_l(char* _Dest, const wchar_t* _Source, size_t _MaxCount, _locale_t _Locale);
     * }
     */
    public static long _wcstombs_l(MemorySegment _Dest, MemorySegment _Source, long _MaxCount, MemorySegment _Locale) {
        var mh$ = _wcstombs_l$MH();
        try {
            return (long)mh$.invokeExact(_Dest, _Source, _MaxCount, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _fullpath$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$0,"_fullpath");
    }
    /**
     * {@snippet :
     * char* _fullpath(char* _Buffer, char* _Path, size_t _BufferCount);
     * }
     */
    public static MemorySegment _fullpath(MemorySegment _Buffer, MemorySegment _Path, long _BufferCount) {
        var mh$ = _fullpath$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Buffer, _Path, _BufferCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _makepath_s$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$1,"_makepath_s");
    }
    /**
     * {@snippet :
     * errno_t _makepath_s(char* _Buffer, size_t _BufferCount, char* _Drive, char* _Dir, char* _Filename, char* _Ext);
     * }
     */
    public static int _makepath_s(MemorySegment _Buffer, long _BufferCount, MemorySegment _Drive, MemorySegment _Dir, MemorySegment _Filename, MemorySegment _Ext) {
        var mh$ = _makepath_s$MH();
        try {
            return (int)mh$.invokeExact(_Buffer, _BufferCount, _Drive, _Dir, _Filename, _Ext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _makepath$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$2,"_makepath");
    }
    /**
     * {@snippet :
     * void _makepath(char* _Buffer, char* _Drive, char* _Dir, char* _Filename, char* _Ext);
     * }
     */
    public static void _makepath(MemorySegment _Buffer, MemorySegment _Drive, MemorySegment _Dir, MemorySegment _Filename, MemorySegment _Ext) {
        var mh$ = _makepath$MH();
        try {
            mh$.invokeExact(_Buffer, _Drive, _Dir, _Filename, _Ext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _splitpath$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$3,"_splitpath");
    }
    /**
     * {@snippet :
     * void _splitpath(char* _FullPath, char* _Drive, char* _Dir, char* _Filename, char* _Ext);
     * }
     */
    public static void _splitpath(MemorySegment _FullPath, MemorySegment _Drive, MemorySegment _Dir, MemorySegment _Filename, MemorySegment _Ext) {
        var mh$ = _splitpath$MH();
        try {
            mh$.invokeExact(_FullPath, _Drive, _Dir, _Filename, _Ext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _splitpath_s$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$4,"_splitpath_s");
    }
    /**
     * {@snippet :
     * errno_t _splitpath_s(char* _FullPath, char* _Drive, size_t _DriveCount, char* _Dir, size_t _DirCount, char* _Filename, size_t _FilenameCount, char* _Ext, size_t _ExtCount);
     * }
     */
    public static int _splitpath_s(MemorySegment _FullPath, MemorySegment _Drive, long _DriveCount, MemorySegment _Dir, long _DirCount, MemorySegment _Filename, long _FilenameCount, MemorySegment _Ext, long _ExtCount) {
        var mh$ = _splitpath_s$MH();
        try {
            return (int)mh$.invokeExact(_FullPath, _Drive, _DriveCount, _Dir, _DirCount, _Filename, _FilenameCount, _Ext, _ExtCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getenv_s$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$5,"getenv_s");
    }
    /**
     * {@snippet :
     * errno_t getenv_s(size_t* _RequiredCount, char* _Buffer, rsize_t _BufferCount, char* _VarName);
     * }
     */
    public static int getenv_s(MemorySegment _RequiredCount, MemorySegment _Buffer, long _BufferCount, MemorySegment _VarName) {
        var mh$ = getenv_s$MH();
        try {
            return (int)mh$.invokeExact(_RequiredCount, _Buffer, _BufferCount, _VarName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __p___argc$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$0,"__p___argc");
    }
    /**
     * {@snippet :
     * int* __p___argc();
     * }
     */
    public static MemorySegment __p___argc() {
        var mh$ = __p___argc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __p___argv$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$1,"__p___argv");
    }
    /**
     * {@snippet :
     * char*** __p___argv();
     * }
     */
    public static MemorySegment __p___argv() {
        var mh$ = __p___argv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __p___wargv$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$2,"__p___wargv");
    }
    /**
     * {@snippet :
     * wchar_t*** __p___wargv();
     * }
     */
    public static MemorySegment __p___wargv() {
        var mh$ = __p___wargv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __p__environ$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$3,"__p__environ");
    }
    /**
     * {@snippet :
     * char*** __p__environ();
     * }
     */
    public static MemorySegment __p__environ() {
        var mh$ = __p__environ$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __p__wenviron$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$4,"__p__wenviron");
    }
    /**
     * {@snippet :
     * wchar_t*** __p__wenviron();
     * }
     */
    public static MemorySegment __p__wenviron() {
        var mh$ = __p__wenviron$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getenv$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$5,"getenv");
    }
    /**
     * {@snippet :
     * char* getenv(char* _VarName);
     * }
     */
    public static MemorySegment getenv(MemorySegment _VarName) {
        var mh$ = getenv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_VarName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _dupenv_s$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$0,"_dupenv_s");
    }
    /**
     * {@snippet :
     * errno_t _dupenv_s(char** _Buffer, size_t* _BufferCount, char* _VarName);
     * }
     */
    public static int _dupenv_s(MemorySegment _Buffer, MemorySegment _BufferCount, MemorySegment _VarName) {
        var mh$ = _dupenv_s$MH();
        try {
            return (int)mh$.invokeExact(_Buffer, _BufferCount, _VarName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle system$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$1,"system");
    }
    /**
     * {@snippet :
     * int system(char* _Command);
     * }
     */
    public static int system(MemorySegment _Command) {
        var mh$ = system$MH();
        try {
            return (int)mh$.invokeExact(_Command);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _putenv$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$2,"_putenv");
    }
    /**
     * {@snippet :
     * int _putenv(char* _EnvString);
     * }
     */
    public static int _putenv(MemorySegment _EnvString) {
        var mh$ = _putenv$MH();
        try {
            return (int)mh$.invokeExact(_EnvString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _putenv_s$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$3,"_putenv_s");
    }
    /**
     * {@snippet :
     * errno_t _putenv_s(char* _Name, char* _Value);
     * }
     */
    public static int _putenv_s(MemorySegment _Name, MemorySegment _Value) {
        var mh$ = _putenv_s$MH();
        try {
            return (int)mh$.invokeExact(_Name, _Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _searchenv_s$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$4,"_searchenv_s");
    }
    /**
     * {@snippet :
     * errno_t _searchenv_s(char* _Filename, char* _VarName, char* _Buffer, size_t _BufferCount);
     * }
     */
    public static int _searchenv_s(MemorySegment _Filename, MemorySegment _VarName, MemorySegment _Buffer, long _BufferCount) {
        var mh$ = _searchenv_s$MH();
        try {
            return (int)mh$.invokeExact(_Filename, _VarName, _Buffer, _BufferCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _searchenv$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$5,"_searchenv");
    }
    /**
     * {@snippet :
     * void _searchenv(char* _Filename, char* _VarName, char* _Buffer);
     * }
     */
    public static void _searchenv(MemorySegment _Filename, MemorySegment _VarName, MemorySegment _Buffer) {
        var mh$ = _searchenv$MH();
        try {
            mh$.invokeExact(_Filename, _VarName, _Buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _seterrormode$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$0,"_seterrormode");
    }
    /**
     * {@snippet :
     * void _seterrormode(int _Mode);
     * }
     */
    public static void _seterrormode(int _Mode) {
        var mh$ = _seterrormode$MH();
        try {
            mh$.invokeExact(_Mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _beep$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$2,"_beep");
    }
    /**
     * {@snippet :
     * void _beep(unsigned int _Frequency, unsigned int _Duration);
     * }
     */
    public static void _beep(int _Frequency, int _Duration) {
        var mh$ = _beep$MH();
        try {
            mh$.invokeExact(_Frequency, _Duration);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _sleep$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$3,"_sleep");
    }
    /**
     * {@snippet :
     * void _sleep(unsigned long _Duration);
     * }
     */
    public static void _sleep(int _Duration) {
        var mh$ = _sleep$MH();
        try {
            mh$.invokeExact(_Duration);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ecvt$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$4,"ecvt");
    }
    /**
     * {@snippet :
     * char* ecvt(double _Value, int _DigitCount, int* _PtDec, int* _PtSign);
     * }
     */
    public static MemorySegment ecvt(double _Value, int _DigitCount, MemorySegment _PtDec, MemorySegment _PtSign) {
        var mh$ = ecvt$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Value, _DigitCount, _PtDec, _PtSign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fcvt$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$5,"fcvt");
    }
    /**
     * {@snippet :
     * char* fcvt(double _Value, int _FractionalDigitCount, int* _PtDec, int* _PtSign);
     * }
     */
    public static MemorySegment fcvt(double _Value, int _FractionalDigitCount, MemorySegment _PtDec, MemorySegment _PtSign) {
        var mh$ = fcvt$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Value, _FractionalDigitCount, _PtDec, _PtSign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gcvt$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$0,"gcvt");
    }
    /**
     * {@snippet :
     * char* gcvt(double _Value, int _DigitCount, char* _DstBuf);
     * }
     */
    public static MemorySegment gcvt(double _Value, int _DigitCount, MemorySegment _DstBuf) {
        var mh$ = gcvt$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Value, _DigitCount, _DstBuf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle itoa$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$1,"itoa");
    }
    /**
     * {@snippet :
     * char* itoa(int _Value, char* _Buffer, int _Radix);
     * }
     */
    public static MemorySegment itoa(int _Value, MemorySegment _Buffer, int _Radix) {
        var mh$ = itoa$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ltoa$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$2,"ltoa");
    }
    /**
     * {@snippet :
     * char* ltoa(long _Value, char* _Buffer, int _Radix);
     * }
     */
    public static MemorySegment ltoa(int _Value, MemorySegment _Buffer, int _Radix) {
        var mh$ = ltoa$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle swab$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$3,"swab");
    }
    /**
     * {@snippet :
     * void swab(char* _Buf1, char* _Buf2, int _SizeInBytes);
     * }
     */
    public static void swab(MemorySegment _Buf1, MemorySegment _Buf2, int _SizeInBytes) {
        var mh$ = swab$MH();
        try {
            mh$.invokeExact(_Buf1, _Buf2, _SizeInBytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ultoa$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$4,"ultoa");
    }
    /**
     * {@snippet :
     * char* ultoa(unsigned long _Value, char* _Buffer, int _Radix);
     * }
     */
    public static MemorySegment ultoa(int _Value, MemorySegment _Buffer, int _Radix) {
        var mh$ = ultoa$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putenv$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$5,"putenv");
    }
    /**
     * {@snippet :
     * int putenv(char* _EnvString);
     * }
     */
    public static int putenv(MemorySegment _EnvString) {
        var mh$ = putenv$MH();
        try {
            return (int)mh$.invokeExact(_EnvString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle onexit$MH() {
        return RuntimeHelper.requireNonNull(constants$59.const$0,"onexit");
    }
    /**
     * {@snippet :
     * _onexit_t onexit(_onexit_t _Func);
     * }
     */
    public static MemorySegment onexit(MemorySegment _Func) {
        var mh$ = onexit$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _alloca$MH() {
        return RuntimeHelper.requireNonNull(constants$59.const$5,"_alloca");
    }
    /**
     * {@snippet :
     * void* _alloca(size_t _Size);
     * }
     */
    public static MemorySegment _alloca(long _Size) {
        var mh$ = _alloca$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _get_heap_handle$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$1,"_get_heap_handle");
    }
    /**
     * {@snippet :
     * intptr_t _get_heap_handle();
     * }
     */
    public static long _get_heap_handle() {
        var mh$ = _get_heap_handle$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _heapmin$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$2,"_heapmin");
    }
    /**
     * {@snippet :
     * int _heapmin();
     * }
     */
    public static int _heapmin() {
        var mh$ = _heapmin$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _heapwalk$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$3,"_heapwalk");
    }
    /**
     * {@snippet :
     * int _heapwalk(_HEAPINFO* _EntryInfo);
     * }
     */
    public static int _heapwalk(MemorySegment _EntryInfo) {
        var mh$ = _heapwalk$MH();
        try {
            return (int)mh$.invokeExact(_EntryInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _heapchk$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$4,"_heapchk");
    }
    /**
     * {@snippet :
     * int _heapchk();
     * }
     */
    public static int _heapchk() {
        var mh$ = _heapchk$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _resetstkoflw$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$5,"_resetstkoflw");
    }
    /**
     * {@snippet :
     * int _resetstkoflw();
     * }
     */
    public static int _resetstkoflw() {
        var mh$ = _resetstkoflw$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mm_sfence$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$0,"_mm_sfence");
    }
    /**
     * {@snippet :
     * void _mm_sfence();
     * }
     */
    public static void _mm_sfence() {
        var mh$ = _mm_sfence$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mm_getcsr$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$1,"_mm_getcsr");
    }
    /**
     * {@snippet :
     * unsigned int _mm_getcsr();
     * }
     */
    public static int _mm_getcsr() {
        var mh$ = _mm_getcsr$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mm_setcsr$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$2,"_mm_setcsr");
    }
    /**
     * {@snippet :
     * void _mm_setcsr(unsigned int __i);
     * }
     */
    public static void _mm_setcsr(int __i) {
        var mh$ = _mm_setcsr$MH();
        try {
            mh$.invokeExact(__i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mm_clflush$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$3,"_mm_clflush");
    }
    /**
     * {@snippet :
     * void _mm_clflush(void* __p);
     * }
     */
    public static void _mm_clflush(MemorySegment __p) {
        var mh$ = _mm_clflush$MH();
        try {
            mh$.invokeExact(__p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mm_lfence$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$4,"_mm_lfence");
    }
    /**
     * {@snippet :
     * void _mm_lfence();
     * }
     */
    public static void _mm_lfence() {
        var mh$ = _mm_lfence$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mm_mfence$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$5,"_mm_mfence");
    }
    /**
     * {@snippet :
     * void _mm_mfence();
     * }
     */
    public static void _mm_mfence() {
        var mh$ = _mm_mfence$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mm_pause$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$0,"_mm_pause");
    }
    /**
     * {@snippet :
     * void _mm_pause();
     * }
     */
    public static void _mm_pause() {
        var mh$ = _mm_pause$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _cl_platform_id* cl_platform_id;
     * }
     */
    public static final AddressLayout cl_platform_id = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _cl_device_id* cl_device_id;
     * }
     */
    public static final AddressLayout cl_device_id = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _cl_context* cl_context;
     * }
     */
    public static final AddressLayout cl_context = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _cl_command_queue* cl_command_queue;
     * }
     */
    public static final AddressLayout cl_command_queue = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _cl_mem* cl_mem;
     * }
     */
    public static final AddressLayout cl_mem = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _cl_program* cl_program;
     * }
     */
    public static final AddressLayout cl_program = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _cl_kernel* cl_kernel;
     * }
     */
    public static final AddressLayout cl_kernel = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _cl_event* cl_event;
     * }
     */
    public static final AddressLayout cl_event = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _cl_sampler* cl_sampler;
     * }
     */
    public static final AddressLayout cl_sampler = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef unsigned int cl_bool;
     * }
     */
    public static final OfInt cl_bool = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long long cl_bitfield;
     * }
     */
    public static final OfLong cl_bitfield = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long cl_properties;
     * }
     */
    public static final OfLong cl_properties = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long cl_device_type;
     * }
     */
    public static final OfLong cl_device_type = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int cl_platform_info;
     * }
     */
    public static final OfInt cl_platform_info = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int cl_device_info;
     * }
     */
    public static final OfInt cl_device_info = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long long cl_device_fp_config;
     * }
     */
    public static final OfLong cl_device_fp_config = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int cl_device_mem_cache_type;
     * }
     */
    public static final OfInt cl_device_mem_cache_type = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int cl_device_local_mem_type;
     * }
     */
    public static final OfInt cl_device_local_mem_type = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long long cl_device_exec_capabilities;
     * }
     */
    public static final OfLong cl_device_exec_capabilities = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long cl_device_svm_capabilities;
     * }
     */
    public static final OfLong cl_device_svm_capabilities = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long cl_command_queue_properties;
     * }
     */
    public static final OfLong cl_command_queue_properties = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long long cl_device_partition_property;
     * }
     */
    public static final OfLong cl_device_partition_property = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long cl_device_affinity_domain;
     * }
     */
    public static final OfLong cl_device_affinity_domain = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long long cl_context_properties;
     * }
     */
    public static final OfLong cl_context_properties = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int cl_context_info;
     * }
     */
    public static final OfInt cl_context_info = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long long cl_queue_properties;
     * }
     */
    public static final OfLong cl_queue_properties = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int cl_command_queue_info;
     * }
     */
    public static final OfInt cl_command_queue_info = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int cl_channel_order;
     * }
     */
    public static final OfInt cl_channel_order = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int cl_channel_type;
     * }
     */
    public static final OfInt cl_channel_type = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long long cl_mem_flags;
     * }
     */
    public static final OfLong cl_mem_flags = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long cl_svm_mem_flags;
     * }
     */
    public static final OfLong cl_svm_mem_flags = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int cl_mem_object_type;
     * }
     */
    public static final OfInt cl_mem_object_type = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int cl_mem_info;
     * }
     */
    public static final OfInt cl_mem_info = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long long cl_mem_migration_flags;
     * }
     */
    public static final OfLong cl_mem_migration_flags = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int cl_image_info;
     * }
     */
    public static final OfInt cl_image_info = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int cl_buffer_create_type;
     * }
     */
    public static final OfInt cl_buffer_create_type = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int cl_addressing_mode;
     * }
     */
    public static final OfInt cl_addressing_mode = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int cl_filter_mode;
     * }
     */
    public static final OfInt cl_filter_mode = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int cl_sampler_info;
     * }
     */
    public static final OfInt cl_sampler_info = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long long cl_map_flags;
     * }
     */
    public static final OfLong cl_map_flags = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long long cl_pipe_properties;
     * }
     */
    public static final OfLong cl_pipe_properties = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int cl_pipe_info;
     * }
     */
    public static final OfInt cl_pipe_info = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int cl_program_info;
     * }
     */
    public static final OfInt cl_program_info = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int cl_program_build_info;
     * }
     */
    public static final OfInt cl_program_build_info = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int cl_program_binary_type;
     * }
     */
    public static final OfInt cl_program_binary_type = JAVA_INT;
    /**
     * {@snippet :
     * typedef int cl_build_status;
     * }
     */
    public static final OfInt cl_build_status = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int cl_kernel_info;
     * }
     */
    public static final OfInt cl_kernel_info = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int cl_kernel_arg_info;
     * }
     */
    public static final OfInt cl_kernel_arg_info = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int cl_kernel_arg_address_qualifier;
     * }
     */
    public static final OfInt cl_kernel_arg_address_qualifier = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int cl_kernel_arg_access_qualifier;
     * }
     */
    public static final OfInt cl_kernel_arg_access_qualifier = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long long cl_kernel_arg_type_qualifier;
     * }
     */
    public static final OfLong cl_kernel_arg_type_qualifier = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int cl_kernel_work_group_info;
     * }
     */
    public static final OfInt cl_kernel_work_group_info = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int cl_kernel_sub_group_info;
     * }
     */
    public static final OfInt cl_kernel_sub_group_info = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int cl_event_info;
     * }
     */
    public static final OfInt cl_event_info = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int cl_command_type;
     * }
     */
    public static final OfInt cl_command_type = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int cl_profiling_info;
     * }
     */
    public static final OfInt cl_profiling_info = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long long cl_sampler_properties;
     * }
     */
    public static final OfLong cl_sampler_properties = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int cl_kernel_exec_info;
     * }
     */
    public static final OfInt cl_kernel_exec_info = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long long cl_device_atomic_capabilities;
     * }
     */
    public static final OfLong cl_device_atomic_capabilities = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long cl_device_device_enqueue_capabilities;
     * }
     */
    public static final OfLong cl_device_device_enqueue_capabilities = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int cl_khronos_vendor_id;
     * }
     */
    public static final OfInt cl_khronos_vendor_id = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long long cl_mem_properties;
     * }
     */
    public static final OfLong cl_mem_properties = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int cl_version;
     * }
     */
    public static final OfInt cl_version = JAVA_INT;
    public static MethodHandle clGetPlatformIDs$MH() {
        return RuntimeHelper.requireNonNull(constants$176.const$3,"clGetPlatformIDs");
    }
    /**
     * {@snippet :
     * cl_int clGetPlatformIDs(cl_uint num_entries, cl_platform_id* platforms, cl_uint* num_platforms);
     * }
     */
    public static int clGetPlatformIDs(int num_entries, MemorySegment platforms, MemorySegment num_platforms) {
        var mh$ = clGetPlatformIDs$MH();
        try {
            return (int)mh$.invokeExact(num_entries, platforms, num_platforms);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clGetPlatformInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$176.const$5,"clGetPlatformInfo");
    }
    /**
     * {@snippet :
     * cl_int clGetPlatformInfo(cl_platform_id platform, cl_platform_info param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret);
     * }
     */
    public static int clGetPlatformInfo(MemorySegment platform, int param_name, long param_value_size, MemorySegment param_value, MemorySegment param_value_size_ret) {
        var mh$ = clGetPlatformInfo$MH();
        try {
            return (int)mh$.invokeExact(platform, param_name, param_value_size, param_value, param_value_size_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clGetDeviceIDs$MH() {
        return RuntimeHelper.requireNonNull(constants$177.const$1,"clGetDeviceIDs");
    }
    /**
     * {@snippet :
     * cl_int clGetDeviceIDs(cl_platform_id platform, cl_device_type device_type, cl_uint num_entries, cl_device_id* devices, cl_uint* num_devices);
     * }
     */
    public static int clGetDeviceIDs(MemorySegment platform, long device_type, int num_entries, MemorySegment devices, MemorySegment num_devices) {
        var mh$ = clGetDeviceIDs$MH();
        try {
            return (int)mh$.invokeExact(platform, device_type, num_entries, devices, num_devices);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clGetDeviceInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$177.const$2,"clGetDeviceInfo");
    }
    /**
     * {@snippet :
     * cl_int clGetDeviceInfo(cl_device_id device, cl_device_info param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret);
     * }
     */
    public static int clGetDeviceInfo(MemorySegment device, int param_name, long param_value_size, MemorySegment param_value, MemorySegment param_value_size_ret) {
        var mh$ = clGetDeviceInfo$MH();
        try {
            return (int)mh$.invokeExact(device, param_name, param_value_size, param_value, param_value_size_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clCreateSubDevices$MH() {
        return RuntimeHelper.requireNonNull(constants$177.const$4,"clCreateSubDevices");
    }
    /**
     * {@snippet :
     * cl_int clCreateSubDevices(cl_device_id in_device, const cl_device_partition_property* properties, cl_uint num_devices, cl_device_id* out_devices, cl_uint* num_devices_ret);
     * }
     */
    public static int clCreateSubDevices(MemorySegment in_device, MemorySegment properties, int num_devices, MemorySegment out_devices, MemorySegment num_devices_ret) {
        var mh$ = clCreateSubDevices$MH();
        try {
            return (int)mh$.invokeExact(in_device, properties, num_devices, out_devices, num_devices_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clRetainDevice$MH() {
        return RuntimeHelper.requireNonNull(constants$177.const$5,"clRetainDevice");
    }
    /**
     * {@snippet :
     * cl_int clRetainDevice(cl_device_id device);
     * }
     */
    public static int clRetainDevice(MemorySegment device) {
        var mh$ = clRetainDevice$MH();
        try {
            return (int)mh$.invokeExact(device);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clReleaseDevice$MH() {
        return RuntimeHelper.requireNonNull(constants$178.const$0,"clReleaseDevice");
    }
    /**
     * {@snippet :
     * cl_int clReleaseDevice(cl_device_id device);
     * }
     */
    public static int clReleaseDevice(MemorySegment device) {
        var mh$ = clReleaseDevice$MH();
        try {
            return (int)mh$.invokeExact(device);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clSetDefaultDeviceCommandQueue$MH() {
        return RuntimeHelper.requireNonNull(constants$178.const$1,"clSetDefaultDeviceCommandQueue");
    }
    /**
     * {@snippet :
     * cl_int clSetDefaultDeviceCommandQueue(cl_context context, cl_device_id device, cl_command_queue command_queue);
     * }
     */
    public static int clSetDefaultDeviceCommandQueue(MemorySegment context, MemorySegment device, MemorySegment command_queue) {
        var mh$ = clSetDefaultDeviceCommandQueue$MH();
        try {
            return (int)mh$.invokeExact(context, device, command_queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clGetDeviceAndHostTimer$MH() {
        return RuntimeHelper.requireNonNull(constants$178.const$2,"clGetDeviceAndHostTimer");
    }
    /**
     * {@snippet :
     * cl_int clGetDeviceAndHostTimer(cl_device_id device, cl_ulong* device_timestamp, cl_ulong* host_timestamp);
     * }
     */
    public static int clGetDeviceAndHostTimer(MemorySegment device, MemorySegment device_timestamp, MemorySegment host_timestamp) {
        var mh$ = clGetDeviceAndHostTimer$MH();
        try {
            return (int)mh$.invokeExact(device, device_timestamp, host_timestamp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clGetHostTimer$MH() {
        return RuntimeHelper.requireNonNull(constants$178.const$3,"clGetHostTimer");
    }
    /**
     * {@snippet :
     * cl_int clGetHostTimer(cl_device_id device, cl_ulong* host_timestamp);
     * }
     */
    public static int clGetHostTimer(MemorySegment device, MemorySegment host_timestamp) {
        var mh$ = clGetHostTimer$MH();
        try {
            return (int)mh$.invokeExact(device, host_timestamp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clCreateContext$MH() {
        return RuntimeHelper.requireNonNull(constants$179.const$2,"clCreateContext");
    }
    /**
     * {@snippet :
     * cl_context clCreateContext(const cl_context_properties* properties, cl_uint num_devices, const cl_device_id* devices, void (*pfn_notify)(char*,void*,size_t,void*), void* user_data, cl_int* errcode_ret);
     * }
     */
    public static MemorySegment clCreateContext(MemorySegment properties, int num_devices, MemorySegment devices, MemorySegment pfn_notify, MemorySegment user_data, MemorySegment errcode_ret) {
        var mh$ = clCreateContext$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(properties, num_devices, devices, pfn_notify, user_data, errcode_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clCreateContextFromType$MH() {
        return RuntimeHelper.requireNonNull(constants$179.const$5,"clCreateContextFromType");
    }
    /**
     * {@snippet :
     * cl_context clCreateContextFromType(const cl_context_properties* properties, cl_device_type device_type, void (*pfn_notify)(char*,void*,size_t,void*), void* user_data, cl_int* errcode_ret);
     * }
     */
    public static MemorySegment clCreateContextFromType(MemorySegment properties, long device_type, MemorySegment pfn_notify, MemorySegment user_data, MemorySegment errcode_ret) {
        var mh$ = clCreateContextFromType$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(properties, device_type, pfn_notify, user_data, errcode_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clRetainContext$MH() {
        return RuntimeHelper.requireNonNull(constants$180.const$0,"clRetainContext");
    }
    /**
     * {@snippet :
     * cl_int clRetainContext(cl_context context);
     * }
     */
    public static int clRetainContext(MemorySegment context) {
        var mh$ = clRetainContext$MH();
        try {
            return (int)mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clReleaseContext$MH() {
        return RuntimeHelper.requireNonNull(constants$180.const$1,"clReleaseContext");
    }
    /**
     * {@snippet :
     * cl_int clReleaseContext(cl_context context);
     * }
     */
    public static int clReleaseContext(MemorySegment context) {
        var mh$ = clReleaseContext$MH();
        try {
            return (int)mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clGetContextInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$180.const$2,"clGetContextInfo");
    }
    /**
     * {@snippet :
     * cl_int clGetContextInfo(cl_context context, cl_context_info param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret);
     * }
     */
    public static int clGetContextInfo(MemorySegment context, int param_name, long param_value_size, MemorySegment param_value, MemorySegment param_value_size_ret) {
        var mh$ = clGetContextInfo$MH();
        try {
            return (int)mh$.invokeExact(context, param_name, param_value_size, param_value, param_value_size_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clSetContextDestructorCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$181.const$0,"clSetContextDestructorCallback");
    }
    /**
     * {@snippet :
     * cl_int clSetContextDestructorCallback(cl_context context, void (*pfn_notify)(cl_context,void*), void* user_data);
     * }
     */
    public static int clSetContextDestructorCallback(MemorySegment context, MemorySegment pfn_notify, MemorySegment user_data) {
        var mh$ = clSetContextDestructorCallback$MH();
        try {
            return (int)mh$.invokeExact(context, pfn_notify, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clCreateCommandQueueWithProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$181.const$2,"clCreateCommandQueueWithProperties");
    }
    /**
     * {@snippet :
     * cl_command_queue clCreateCommandQueueWithProperties(cl_context context, cl_device_id device, const cl_queue_properties* properties, cl_int* errcode_ret);
     * }
     */
    public static MemorySegment clCreateCommandQueueWithProperties(MemorySegment context, MemorySegment device, MemorySegment properties, MemorySegment errcode_ret) {
        var mh$ = clCreateCommandQueueWithProperties$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(context, device, properties, errcode_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clRetainCommandQueue$MH() {
        return RuntimeHelper.requireNonNull(constants$181.const$3,"clRetainCommandQueue");
    }
    /**
     * {@snippet :
     * cl_int clRetainCommandQueue(cl_command_queue command_queue);
     * }
     */
    public static int clRetainCommandQueue(MemorySegment command_queue) {
        var mh$ = clRetainCommandQueue$MH();
        try {
            return (int)mh$.invokeExact(command_queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clReleaseCommandQueue$MH() {
        return RuntimeHelper.requireNonNull(constants$181.const$4,"clReleaseCommandQueue");
    }
    /**
     * {@snippet :
     * cl_int clReleaseCommandQueue(cl_command_queue command_queue);
     * }
     */
    public static int clReleaseCommandQueue(MemorySegment command_queue) {
        var mh$ = clReleaseCommandQueue$MH();
        try {
            return (int)mh$.invokeExact(command_queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clGetCommandQueueInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$181.const$5,"clGetCommandQueueInfo");
    }
    /**
     * {@snippet :
     * cl_int clGetCommandQueueInfo(cl_command_queue command_queue, cl_command_queue_info param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret);
     * }
     */
    public static int clGetCommandQueueInfo(MemorySegment command_queue, int param_name, long param_value_size, MemorySegment param_value, MemorySegment param_value_size_ret) {
        var mh$ = clGetCommandQueueInfo$MH();
        try {
            return (int)mh$.invokeExact(command_queue, param_name, param_value_size, param_value, param_value_size_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clCreateBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$182.const$1,"clCreateBuffer");
    }
    /**
     * {@snippet :
     * cl_mem clCreateBuffer(cl_context context, cl_mem_flags flags, size_t size, void* host_ptr, cl_int* errcode_ret);
     * }
     */
    public static MemorySegment clCreateBuffer(MemorySegment context, long flags, long size, MemorySegment host_ptr, MemorySegment errcode_ret) {
        var mh$ = clCreateBuffer$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(context, flags, size, host_ptr, errcode_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clCreateSubBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$182.const$3,"clCreateSubBuffer");
    }
    /**
     * {@snippet :
     * cl_mem clCreateSubBuffer(cl_mem buffer, cl_mem_flags flags, cl_buffer_create_type buffer_create_type, void* buffer_create_info, cl_int* errcode_ret);
     * }
     */
    public static MemorySegment clCreateSubBuffer(MemorySegment buffer, long flags, int buffer_create_type, MemorySegment buffer_create_info, MemorySegment errcode_ret) {
        var mh$ = clCreateSubBuffer$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(buffer, flags, buffer_create_type, buffer_create_info, errcode_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clCreateImage$MH() {
        return RuntimeHelper.requireNonNull(constants$182.const$5,"clCreateImage");
    }
    /**
     * {@snippet :
     * cl_mem clCreateImage(cl_context context, cl_mem_flags flags, const cl_image_format* image_format, const cl_image_desc* image_desc, void* host_ptr, cl_int* errcode_ret);
     * }
     */
    public static MemorySegment clCreateImage(MemorySegment context, long flags, MemorySegment image_format, MemorySegment image_desc, MemorySegment host_ptr, MemorySegment errcode_ret) {
        var mh$ = clCreateImage$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(context, flags, image_format, image_desc, host_ptr, errcode_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clCreatePipe$MH() {
        return RuntimeHelper.requireNonNull(constants$183.const$1,"clCreatePipe");
    }
    /**
     * {@snippet :
     * cl_mem clCreatePipe(cl_context context, cl_mem_flags flags, cl_uint pipe_packet_size, cl_uint pipe_max_packets, const cl_pipe_properties* properties, cl_int* errcode_ret);
     * }
     */
    public static MemorySegment clCreatePipe(MemorySegment context, long flags, int pipe_packet_size, int pipe_max_packets, MemorySegment properties, MemorySegment errcode_ret) {
        var mh$ = clCreatePipe$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(context, flags, pipe_packet_size, pipe_max_packets, properties, errcode_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clCreateBufferWithProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$183.const$2,"clCreateBufferWithProperties");
    }
    /**
     * {@snippet :
     * cl_mem clCreateBufferWithProperties(cl_context context, const cl_mem_properties* properties, cl_mem_flags flags, size_t size, void* host_ptr, cl_int* errcode_ret);
     * }
     */
    public static MemorySegment clCreateBufferWithProperties(MemorySegment context, MemorySegment properties, long flags, long size, MemorySegment host_ptr, MemorySegment errcode_ret) {
        var mh$ = clCreateBufferWithProperties$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(context, properties, flags, size, host_ptr, errcode_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clCreateImageWithProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$183.const$4,"clCreateImageWithProperties");
    }
    /**
     * {@snippet :
     * cl_mem clCreateImageWithProperties(cl_context context, const cl_mem_properties* properties, cl_mem_flags flags, const cl_image_format* image_format, const cl_image_desc* image_desc, void* host_ptr, cl_int* errcode_ret);
     * }
     */
    public static MemorySegment clCreateImageWithProperties(MemorySegment context, MemorySegment properties, long flags, MemorySegment image_format, MemorySegment image_desc, MemorySegment host_ptr, MemorySegment errcode_ret) {
        var mh$ = clCreateImageWithProperties$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(context, properties, flags, image_format, image_desc, host_ptr, errcode_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clRetainMemObject$MH() {
        return RuntimeHelper.requireNonNull(constants$183.const$5,"clRetainMemObject");
    }
    /**
     * {@snippet :
     * cl_int clRetainMemObject(cl_mem memobj);
     * }
     */
    public static int clRetainMemObject(MemorySegment memobj) {
        var mh$ = clRetainMemObject$MH();
        try {
            return (int)mh$.invokeExact(memobj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clReleaseMemObject$MH() {
        return RuntimeHelper.requireNonNull(constants$184.const$0,"clReleaseMemObject");
    }
    /**
     * {@snippet :
     * cl_int clReleaseMemObject(cl_mem memobj);
     * }
     */
    public static int clReleaseMemObject(MemorySegment memobj) {
        var mh$ = clReleaseMemObject$MH();
        try {
            return (int)mh$.invokeExact(memobj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clGetSupportedImageFormats$MH() {
        return RuntimeHelper.requireNonNull(constants$184.const$2,"clGetSupportedImageFormats");
    }
    /**
     * {@snippet :
     * cl_int clGetSupportedImageFormats(cl_context context, cl_mem_flags flags, cl_mem_object_type image_type, cl_uint num_entries, cl_image_format* image_formats, cl_uint* num_image_formats);
     * }
     */
    public static int clGetSupportedImageFormats(MemorySegment context, long flags, int image_type, int num_entries, MemorySegment image_formats, MemorySegment num_image_formats) {
        var mh$ = clGetSupportedImageFormats$MH();
        try {
            return (int)mh$.invokeExact(context, flags, image_type, num_entries, image_formats, num_image_formats);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clGetMemObjectInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$184.const$3,"clGetMemObjectInfo");
    }
    /**
     * {@snippet :
     * cl_int clGetMemObjectInfo(cl_mem memobj, cl_mem_info param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret);
     * }
     */
    public static int clGetMemObjectInfo(MemorySegment memobj, int param_name, long param_value_size, MemorySegment param_value, MemorySegment param_value_size_ret) {
        var mh$ = clGetMemObjectInfo$MH();
        try {
            return (int)mh$.invokeExact(memobj, param_name, param_value_size, param_value, param_value_size_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clGetImageInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$184.const$4,"clGetImageInfo");
    }
    /**
     * {@snippet :
     * cl_int clGetImageInfo(cl_mem image, cl_image_info param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret);
     * }
     */
    public static int clGetImageInfo(MemorySegment image, int param_name, long param_value_size, MemorySegment param_value, MemorySegment param_value_size_ret) {
        var mh$ = clGetImageInfo$MH();
        try {
            return (int)mh$.invokeExact(image, param_name, param_value_size, param_value, param_value_size_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clGetPipeInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$184.const$5,"clGetPipeInfo");
    }
    /**
     * {@snippet :
     * cl_int clGetPipeInfo(cl_mem pipe, cl_pipe_info param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret);
     * }
     */
    public static int clGetPipeInfo(MemorySegment pipe, int param_name, long param_value_size, MemorySegment param_value, MemorySegment param_value_size_ret) {
        var mh$ = clGetPipeInfo$MH();
        try {
            return (int)mh$.invokeExact(pipe, param_name, param_value_size, param_value, param_value_size_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clSetMemObjectDestructorCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$185.const$1,"clSetMemObjectDestructorCallback");
    }
    /**
     * {@snippet :
     * cl_int clSetMemObjectDestructorCallback(cl_mem memobj, void (*pfn_notify)(cl_mem,void*), void* user_data);
     * }
     */
    public static int clSetMemObjectDestructorCallback(MemorySegment memobj, MemorySegment pfn_notify, MemorySegment user_data) {
        var mh$ = clSetMemObjectDestructorCallback$MH();
        try {
            return (int)mh$.invokeExact(memobj, pfn_notify, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clSVMAlloc$MH() {
        return RuntimeHelper.requireNonNull(constants$185.const$3,"clSVMAlloc");
    }
    /**
     * {@snippet :
     * void* clSVMAlloc(cl_context context, cl_svm_mem_flags flags, size_t size, cl_uint alignment);
     * }
     */
    public static MemorySegment clSVMAlloc(MemorySegment context, long flags, long size, int alignment) {
        var mh$ = clSVMAlloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(context, flags, size, alignment);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clSVMFree$MH() {
        return RuntimeHelper.requireNonNull(constants$185.const$4,"clSVMFree");
    }
    /**
     * {@snippet :
     * void clSVMFree(cl_context context, void* svm_pointer);
     * }
     */
    public static void clSVMFree(MemorySegment context, MemorySegment svm_pointer) {
        var mh$ = clSVMFree$MH();
        try {
            mh$.invokeExact(context, svm_pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clCreateSamplerWithProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$185.const$6,"clCreateSamplerWithProperties");
    }
    /**
     * {@snippet :
     * cl_sampler clCreateSamplerWithProperties(cl_context context, const cl_sampler_properties* sampler_properties, cl_int* errcode_ret);
     * }
     */
    public static MemorySegment clCreateSamplerWithProperties(MemorySegment context, MemorySegment sampler_properties, MemorySegment errcode_ret) {
        var mh$ = clCreateSamplerWithProperties$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(context, sampler_properties, errcode_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clRetainSampler$MH() {
        return RuntimeHelper.requireNonNull(constants$186.const$0,"clRetainSampler");
    }
    /**
     * {@snippet :
     * cl_int clRetainSampler(cl_sampler sampler);
     * }
     */
    public static int clRetainSampler(MemorySegment sampler) {
        var mh$ = clRetainSampler$MH();
        try {
            return (int)mh$.invokeExact(sampler);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clReleaseSampler$MH() {
        return RuntimeHelper.requireNonNull(constants$186.const$1,"clReleaseSampler");
    }
    /**
     * {@snippet :
     * cl_int clReleaseSampler(cl_sampler sampler);
     * }
     */
    public static int clReleaseSampler(MemorySegment sampler) {
        var mh$ = clReleaseSampler$MH();
        try {
            return (int)mh$.invokeExact(sampler);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clGetSamplerInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$186.const$2,"clGetSamplerInfo");
    }
    /**
     * {@snippet :
     * cl_int clGetSamplerInfo(cl_sampler sampler, cl_sampler_info param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret);
     * }
     */
    public static int clGetSamplerInfo(MemorySegment sampler, int param_name, long param_value_size, MemorySegment param_value, MemorySegment param_value_size_ret) {
        var mh$ = clGetSamplerInfo$MH();
        try {
            return (int)mh$.invokeExact(sampler, param_name, param_value_size, param_value, param_value_size_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clCreateProgramWithSource$MH() {
        return RuntimeHelper.requireNonNull(constants$186.const$4,"clCreateProgramWithSource");
    }
    /**
     * {@snippet :
     * cl_program clCreateProgramWithSource(cl_context context, cl_uint count, char** strings, const size_t* lengths, cl_int* errcode_ret);
     * }
     */
    public static MemorySegment clCreateProgramWithSource(MemorySegment context, int count, MemorySegment strings, MemorySegment lengths, MemorySegment errcode_ret) {
        var mh$ = clCreateProgramWithSource$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(context, count, strings, lengths, errcode_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clCreateProgramWithBinary$MH() {
        return RuntimeHelper.requireNonNull(constants$186.const$6,"clCreateProgramWithBinary");
    }
    /**
     * {@snippet :
     * cl_program clCreateProgramWithBinary(cl_context context, cl_uint num_devices, const cl_device_id* device_list, const size_t* lengths, unsigned char** binaries, cl_int* binary_status, cl_int* errcode_ret);
     * }
     */
    public static MemorySegment clCreateProgramWithBinary(MemorySegment context, int num_devices, MemorySegment device_list, MemorySegment lengths, MemorySegment binaries, MemorySegment binary_status, MemorySegment errcode_ret) {
        var mh$ = clCreateProgramWithBinary$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(context, num_devices, device_list, lengths, binaries, binary_status, errcode_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clCreateProgramWithBuiltInKernels$MH() {
        return RuntimeHelper.requireNonNull(constants$187.const$0,"clCreateProgramWithBuiltInKernels");
    }
    /**
     * {@snippet :
     * cl_program clCreateProgramWithBuiltInKernels(cl_context context, cl_uint num_devices, const cl_device_id* device_list, char* kernel_names, cl_int* errcode_ret);
     * }
     */
    public static MemorySegment clCreateProgramWithBuiltInKernels(MemorySegment context, int num_devices, MemorySegment device_list, MemorySegment kernel_names, MemorySegment errcode_ret) {
        var mh$ = clCreateProgramWithBuiltInKernels$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(context, num_devices, device_list, kernel_names, errcode_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clCreateProgramWithIL$MH() {
        return RuntimeHelper.requireNonNull(constants$187.const$2,"clCreateProgramWithIL");
    }
    /**
     * {@snippet :
     * cl_program clCreateProgramWithIL(cl_context context, void* il, size_t length, cl_int* errcode_ret);
     * }
     */
    public static MemorySegment clCreateProgramWithIL(MemorySegment context, MemorySegment il, long length, MemorySegment errcode_ret) {
        var mh$ = clCreateProgramWithIL$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(context, il, length, errcode_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clRetainProgram$MH() {
        return RuntimeHelper.requireNonNull(constants$187.const$3,"clRetainProgram");
    }
    /**
     * {@snippet :
     * cl_int clRetainProgram(cl_program program);
     * }
     */
    public static int clRetainProgram(MemorySegment program) {
        var mh$ = clRetainProgram$MH();
        try {
            return (int)mh$.invokeExact(program);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clReleaseProgram$MH() {
        return RuntimeHelper.requireNonNull(constants$187.const$4,"clReleaseProgram");
    }
    /**
     * {@snippet :
     * cl_int clReleaseProgram(cl_program program);
     * }
     */
    public static int clReleaseProgram(MemorySegment program) {
        var mh$ = clReleaseProgram$MH();
        try {
            return (int)mh$.invokeExact(program);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clBuildProgram$MH() {
        return RuntimeHelper.requireNonNull(constants$188.const$1,"clBuildProgram");
    }
    /**
     * {@snippet :
     * cl_int clBuildProgram(cl_program program, cl_uint num_devices, const cl_device_id* device_list, char* options, void (*pfn_notify)(cl_program,void*), void* user_data);
     * }
     */
    public static int clBuildProgram(MemorySegment program, int num_devices, MemorySegment device_list, MemorySegment options, MemorySegment pfn_notify, MemorySegment user_data) {
        var mh$ = clBuildProgram$MH();
        try {
            return (int)mh$.invokeExact(program, num_devices, device_list, options, pfn_notify, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clCompileProgram$MH() {
        return RuntimeHelper.requireNonNull(constants$188.const$4,"clCompileProgram");
    }
    /**
     * {@snippet :
     * cl_int clCompileProgram(cl_program program, cl_uint num_devices, const cl_device_id* device_list, char* options, cl_uint num_input_headers, const cl_program* input_headers, char** header_include_names, void (*pfn_notify)(cl_program,void*), void* user_data);
     * }
     */
    public static int clCompileProgram(MemorySegment program, int num_devices, MemorySegment device_list, MemorySegment options, int num_input_headers, MemorySegment input_headers, MemorySegment header_include_names, MemorySegment pfn_notify, MemorySegment user_data) {
        var mh$ = clCompileProgram$MH();
        try {
            return (int)mh$.invokeExact(program, num_devices, device_list, options, num_input_headers, input_headers, header_include_names, pfn_notify, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clLinkProgram$MH() {
        return RuntimeHelper.requireNonNull(constants$189.const$1,"clLinkProgram");
    }
    /**
     * {@snippet :
     * cl_program clLinkProgram(cl_context context, cl_uint num_devices, const cl_device_id* device_list, char* options, cl_uint num_input_programs, const cl_program* input_programs, void (*pfn_notify)(cl_program,void*), void* user_data, cl_int* errcode_ret);
     * }
     */
    public static MemorySegment clLinkProgram(MemorySegment context, int num_devices, MemorySegment device_list, MemorySegment options, int num_input_programs, MemorySegment input_programs, MemorySegment pfn_notify, MemorySegment user_data, MemorySegment errcode_ret) {
        var mh$ = clLinkProgram$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(context, num_devices, device_list, options, num_input_programs, input_programs, pfn_notify, user_data, errcode_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clSetProgramReleaseCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$189.const$3,"clSetProgramReleaseCallback");
    }
    /**
     * {@snippet :
     * cl_int clSetProgramReleaseCallback(cl_program program, void (*pfn_notify)(cl_program,void*), void* user_data);
     * }
     */
    public static int clSetProgramReleaseCallback(MemorySegment program, MemorySegment pfn_notify, MemorySegment user_data) {
        var mh$ = clSetProgramReleaseCallback$MH();
        try {
            return (int)mh$.invokeExact(program, pfn_notify, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clSetProgramSpecializationConstant$MH() {
        return RuntimeHelper.requireNonNull(constants$189.const$5,"clSetProgramSpecializationConstant");
    }
    /**
     * {@snippet :
     * cl_int clSetProgramSpecializationConstant(cl_program program, cl_uint spec_id, size_t spec_size, void* spec_value);
     * }
     */
    public static int clSetProgramSpecializationConstant(MemorySegment program, int spec_id, long spec_size, MemorySegment spec_value) {
        var mh$ = clSetProgramSpecializationConstant$MH();
        try {
            return (int)mh$.invokeExact(program, spec_id, spec_size, spec_value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clUnloadPlatformCompiler$MH() {
        return RuntimeHelper.requireNonNull(constants$190.const$0,"clUnloadPlatformCompiler");
    }
    /**
     * {@snippet :
     * cl_int clUnloadPlatformCompiler(cl_platform_id platform);
     * }
     */
    public static int clUnloadPlatformCompiler(MemorySegment platform) {
        var mh$ = clUnloadPlatformCompiler$MH();
        try {
            return (int)mh$.invokeExact(platform);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clGetProgramInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$190.const$1,"clGetProgramInfo");
    }
    /**
     * {@snippet :
     * cl_int clGetProgramInfo(cl_program program, cl_program_info param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret);
     * }
     */
    public static int clGetProgramInfo(MemorySegment program, int param_name, long param_value_size, MemorySegment param_value, MemorySegment param_value_size_ret) {
        var mh$ = clGetProgramInfo$MH();
        try {
            return (int)mh$.invokeExact(program, param_name, param_value_size, param_value, param_value_size_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clGetProgramBuildInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$190.const$3,"clGetProgramBuildInfo");
    }
    /**
     * {@snippet :
     * cl_int clGetProgramBuildInfo(cl_program program, cl_device_id device, cl_program_build_info param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret);
     * }
     */
    public static int clGetProgramBuildInfo(MemorySegment program, MemorySegment device, int param_name, long param_value_size, MemorySegment param_value, MemorySegment param_value_size_ret) {
        var mh$ = clGetProgramBuildInfo$MH();
        try {
            return (int)mh$.invokeExact(program, device, param_name, param_value_size, param_value, param_value_size_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clCreateKernel$MH() {
        return RuntimeHelper.requireNonNull(constants$190.const$4,"clCreateKernel");
    }
    /**
     * {@snippet :
     * cl_kernel clCreateKernel(cl_program program, char* kernel_name, cl_int* errcode_ret);
     * }
     */
    public static MemorySegment clCreateKernel(MemorySegment program, MemorySegment kernel_name, MemorySegment errcode_ret) {
        var mh$ = clCreateKernel$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(program, kernel_name, errcode_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clCreateKernelsInProgram$MH() {
        return RuntimeHelper.requireNonNull(constants$190.const$6,"clCreateKernelsInProgram");
    }
    /**
     * {@snippet :
     * cl_int clCreateKernelsInProgram(cl_program program, cl_uint num_kernels, cl_kernel* kernels, cl_uint* num_kernels_ret);
     * }
     */
    public static int clCreateKernelsInProgram(MemorySegment program, int num_kernels, MemorySegment kernels, MemorySegment num_kernels_ret) {
        var mh$ = clCreateKernelsInProgram$MH();
        try {
            return (int)mh$.invokeExact(program, num_kernels, kernels, num_kernels_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clCloneKernel$MH() {
        return RuntimeHelper.requireNonNull(constants$191.const$1,"clCloneKernel");
    }
    /**
     * {@snippet :
     * cl_kernel clCloneKernel(cl_kernel source_kernel, cl_int* errcode_ret);
     * }
     */
    public static MemorySegment clCloneKernel(MemorySegment source_kernel, MemorySegment errcode_ret) {
        var mh$ = clCloneKernel$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(source_kernel, errcode_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clRetainKernel$MH() {
        return RuntimeHelper.requireNonNull(constants$191.const$2,"clRetainKernel");
    }
    /**
     * {@snippet :
     * cl_int clRetainKernel(cl_kernel kernel);
     * }
     */
    public static int clRetainKernel(MemorySegment kernel) {
        var mh$ = clRetainKernel$MH();
        try {
            return (int)mh$.invokeExact(kernel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clReleaseKernel$MH() {
        return RuntimeHelper.requireNonNull(constants$191.const$3,"clReleaseKernel");
    }
    /**
     * {@snippet :
     * cl_int clReleaseKernel(cl_kernel kernel);
     * }
     */
    public static int clReleaseKernel(MemorySegment kernel) {
        var mh$ = clReleaseKernel$MH();
        try {
            return (int)mh$.invokeExact(kernel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clSetKernelArg$MH() {
        return RuntimeHelper.requireNonNull(constants$191.const$4,"clSetKernelArg");
    }
    /**
     * {@snippet :
     * cl_int clSetKernelArg(cl_kernel kernel, cl_uint arg_index, size_t arg_size, void* arg_value);
     * }
     */
    public static int clSetKernelArg(MemorySegment kernel, int arg_index, long arg_size, MemorySegment arg_value) {
        var mh$ = clSetKernelArg$MH();
        try {
            return (int)mh$.invokeExact(kernel, arg_index, arg_size, arg_value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clSetKernelArgSVMPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$191.const$6,"clSetKernelArgSVMPointer");
    }
    /**
     * {@snippet :
     * cl_int clSetKernelArgSVMPointer(cl_kernel kernel, cl_uint arg_index, void* arg_value);
     * }
     */
    public static int clSetKernelArgSVMPointer(MemorySegment kernel, int arg_index, MemorySegment arg_value) {
        var mh$ = clSetKernelArgSVMPointer$MH();
        try {
            return (int)mh$.invokeExact(kernel, arg_index, arg_value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clSetKernelExecInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$192.const$0,"clSetKernelExecInfo");
    }
    /**
     * {@snippet :
     * cl_int clSetKernelExecInfo(cl_kernel kernel, cl_kernel_exec_info param_name, size_t param_value_size, void* param_value);
     * }
     */
    public static int clSetKernelExecInfo(MemorySegment kernel, int param_name, long param_value_size, MemorySegment param_value) {
        var mh$ = clSetKernelExecInfo$MH();
        try {
            return (int)mh$.invokeExact(kernel, param_name, param_value_size, param_value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clGetKernelInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$192.const$1,"clGetKernelInfo");
    }
    /**
     * {@snippet :
     * cl_int clGetKernelInfo(cl_kernel kernel, cl_kernel_info param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret);
     * }
     */
    public static int clGetKernelInfo(MemorySegment kernel, int param_name, long param_value_size, MemorySegment param_value, MemorySegment param_value_size_ret) {
        var mh$ = clGetKernelInfo$MH();
        try {
            return (int)mh$.invokeExact(kernel, param_name, param_value_size, param_value, param_value_size_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clGetKernelArgInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$192.const$3,"clGetKernelArgInfo");
    }
    /**
     * {@snippet :
     * cl_int clGetKernelArgInfo(cl_kernel kernel, cl_uint arg_indx, cl_kernel_arg_info param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret);
     * }
     */
    public static int clGetKernelArgInfo(MemorySegment kernel, int arg_indx, int param_name, long param_value_size, MemorySegment param_value, MemorySegment param_value_size_ret) {
        var mh$ = clGetKernelArgInfo$MH();
        try {
            return (int)mh$.invokeExact(kernel, arg_indx, param_name, param_value_size, param_value, param_value_size_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clGetKernelWorkGroupInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$192.const$4,"clGetKernelWorkGroupInfo");
    }
    /**
     * {@snippet :
     * cl_int clGetKernelWorkGroupInfo(cl_kernel kernel, cl_device_id device, cl_kernel_work_group_info param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret);
     * }
     */
    public static int clGetKernelWorkGroupInfo(MemorySegment kernel, MemorySegment device, int param_name, long param_value_size, MemorySegment param_value, MemorySegment param_value_size_ret) {
        var mh$ = clGetKernelWorkGroupInfo$MH();
        try {
            return (int)mh$.invokeExact(kernel, device, param_name, param_value_size, param_value, param_value_size_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clGetKernelSubGroupInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$192.const$6,"clGetKernelSubGroupInfo");
    }
    /**
     * {@snippet :
     * cl_int clGetKernelSubGroupInfo(cl_kernel kernel, cl_device_id device, cl_kernel_sub_group_info param_name, size_t input_value_size, void* input_value, size_t param_value_size, void* param_value, size_t* param_value_size_ret);
     * }
     */
    public static int clGetKernelSubGroupInfo(MemorySegment kernel, MemorySegment device, int param_name, long input_value_size, MemorySegment input_value, long param_value_size, MemorySegment param_value, MemorySegment param_value_size_ret) {
        var mh$ = clGetKernelSubGroupInfo$MH();
        try {
            return (int)mh$.invokeExact(kernel, device, param_name, input_value_size, input_value, param_value_size, param_value, param_value_size_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clWaitForEvents$MH() {
        return RuntimeHelper.requireNonNull(constants$193.const$1,"clWaitForEvents");
    }
    /**
     * {@snippet :
     * cl_int clWaitForEvents(cl_uint num_events, const cl_event* event_list);
     * }
     */
    public static int clWaitForEvents(int num_events, MemorySegment event_list) {
        var mh$ = clWaitForEvents$MH();
        try {
            return (int)mh$.invokeExact(num_events, event_list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clGetEventInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$193.const$2,"clGetEventInfo");
    }
    /**
     * {@snippet :
     * cl_int clGetEventInfo(cl_event event, cl_event_info param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret);
     * }
     */
    public static int clGetEventInfo(MemorySegment event, int param_name, long param_value_size, MemorySegment param_value, MemorySegment param_value_size_ret) {
        var mh$ = clGetEventInfo$MH();
        try {
            return (int)mh$.invokeExact(event, param_name, param_value_size, param_value, param_value_size_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clCreateUserEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$193.const$3,"clCreateUserEvent");
    }
    /**
     * {@snippet :
     * cl_event clCreateUserEvent(cl_context context, cl_int* errcode_ret);
     * }
     */
    public static MemorySegment clCreateUserEvent(MemorySegment context, MemorySegment errcode_ret) {
        var mh$ = clCreateUserEvent$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(context, errcode_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clRetainEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$193.const$4,"clRetainEvent");
    }
    /**
     * {@snippet :
     * cl_int clRetainEvent(cl_event event);
     * }
     */
    public static int clRetainEvent(MemorySegment event) {
        var mh$ = clRetainEvent$MH();
        try {
            return (int)mh$.invokeExact(event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clReleaseEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$193.const$5,"clReleaseEvent");
    }
    /**
     * {@snippet :
     * cl_int clReleaseEvent(cl_event event);
     * }
     */
    public static int clReleaseEvent(MemorySegment event) {
        var mh$ = clReleaseEvent$MH();
        try {
            return (int)mh$.invokeExact(event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clSetUserEventStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$194.const$1,"clSetUserEventStatus");
    }
    /**
     * {@snippet :
     * cl_int clSetUserEventStatus(cl_event event, cl_int execution_status);
     * }
     */
    public static int clSetUserEventStatus(MemorySegment event, int execution_status) {
        var mh$ = clSetUserEventStatus$MH();
        try {
            return (int)mh$.invokeExact(event, execution_status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clSetEventCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$194.const$5,"clSetEventCallback");
    }
    /**
     * {@snippet :
     * cl_int clSetEventCallback(cl_event event, cl_int command_exec_callback_type, void (*pfn_notify)(cl_event,cl_int,void*), void* user_data);
     * }
     */
    public static int clSetEventCallback(MemorySegment event, int command_exec_callback_type, MemorySegment pfn_notify, MemorySegment user_data) {
        var mh$ = clSetEventCallback$MH();
        try {
            return (int)mh$.invokeExact(event, command_exec_callback_type, pfn_notify, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clGetEventProfilingInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$195.const$0,"clGetEventProfilingInfo");
    }
    /**
     * {@snippet :
     * cl_int clGetEventProfilingInfo(cl_event event, cl_profiling_info param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret);
     * }
     */
    public static int clGetEventProfilingInfo(MemorySegment event, int param_name, long param_value_size, MemorySegment param_value, MemorySegment param_value_size_ret) {
        var mh$ = clGetEventProfilingInfo$MH();
        try {
            return (int)mh$.invokeExact(event, param_name, param_value_size, param_value, param_value_size_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clFlush$MH() {
        return RuntimeHelper.requireNonNull(constants$195.const$1,"clFlush");
    }
    /**
     * {@snippet :
     * cl_int clFlush(cl_command_queue command_queue);
     * }
     */
    public static int clFlush(MemorySegment command_queue) {
        var mh$ = clFlush$MH();
        try {
            return (int)mh$.invokeExact(command_queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clFinish$MH() {
        return RuntimeHelper.requireNonNull(constants$195.const$2,"clFinish");
    }
    /**
     * {@snippet :
     * cl_int clFinish(cl_command_queue command_queue);
     * }
     */
    public static int clFinish(MemorySegment command_queue) {
        var mh$ = clFinish$MH();
        try {
            return (int)mh$.invokeExact(command_queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clEnqueueReadBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$195.const$4,"clEnqueueReadBuffer");
    }
    /**
     * {@snippet :
     * cl_int clEnqueueReadBuffer(cl_command_queue command_queue, cl_mem buffer, cl_bool blocking_read, size_t offset, size_t size, void* ptr, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event);
     * }
     */
    public static int clEnqueueReadBuffer(MemorySegment command_queue, MemorySegment buffer, int blocking_read, long offset, long size, MemorySegment ptr, int num_events_in_wait_list, MemorySegment event_wait_list, MemorySegment event) {
        var mh$ = clEnqueueReadBuffer$MH();
        try {
            return (int)mh$.invokeExact(command_queue, buffer, blocking_read, offset, size, ptr, num_events_in_wait_list, event_wait_list, event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clEnqueueReadBufferRect$MH() {
        return RuntimeHelper.requireNonNull(constants$195.const$6,"clEnqueueReadBufferRect");
    }
    /**
     * {@snippet :
     * cl_int clEnqueueReadBufferRect(cl_command_queue command_queue, cl_mem buffer, cl_bool blocking_read, const size_t* buffer_origin, const size_t* host_origin, const size_t* region, size_t buffer_row_pitch, size_t buffer_slice_pitch, size_t host_row_pitch, size_t host_slice_pitch, void* ptr, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event);
     * }
     */
    public static int clEnqueueReadBufferRect(MemorySegment command_queue, MemorySegment buffer, int blocking_read, MemorySegment buffer_origin, MemorySegment host_origin, MemorySegment region, long buffer_row_pitch, long buffer_slice_pitch, long host_row_pitch, long host_slice_pitch, MemorySegment ptr, int num_events_in_wait_list, MemorySegment event_wait_list, MemorySegment event) {
        var mh$ = clEnqueueReadBufferRect$MH();
        try {
            return (int)mh$.invokeExact(command_queue, buffer, blocking_read, buffer_origin, host_origin, region, buffer_row_pitch, buffer_slice_pitch, host_row_pitch, host_slice_pitch, ptr, num_events_in_wait_list, event_wait_list, event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clEnqueueWriteBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$196.const$0,"clEnqueueWriteBuffer");
    }
    /**
     * {@snippet :
     * cl_int clEnqueueWriteBuffer(cl_command_queue command_queue, cl_mem buffer, cl_bool blocking_write, size_t offset, size_t size, void* ptr, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event);
     * }
     */
    public static int clEnqueueWriteBuffer(MemorySegment command_queue, MemorySegment buffer, int blocking_write, long offset, long size, MemorySegment ptr, int num_events_in_wait_list, MemorySegment event_wait_list, MemorySegment event) {
        var mh$ = clEnqueueWriteBuffer$MH();
        try {
            return (int)mh$.invokeExact(command_queue, buffer, blocking_write, offset, size, ptr, num_events_in_wait_list, event_wait_list, event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clEnqueueWriteBufferRect$MH() {
        return RuntimeHelper.requireNonNull(constants$196.const$1,"clEnqueueWriteBufferRect");
    }
    /**
     * {@snippet :
     * cl_int clEnqueueWriteBufferRect(cl_command_queue command_queue, cl_mem buffer, cl_bool blocking_write, const size_t* buffer_origin, const size_t* host_origin, const size_t* region, size_t buffer_row_pitch, size_t buffer_slice_pitch, size_t host_row_pitch, size_t host_slice_pitch, void* ptr, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event);
     * }
     */
    public static int clEnqueueWriteBufferRect(MemorySegment command_queue, MemorySegment buffer, int blocking_write, MemorySegment buffer_origin, MemorySegment host_origin, MemorySegment region, long buffer_row_pitch, long buffer_slice_pitch, long host_row_pitch, long host_slice_pitch, MemorySegment ptr, int num_events_in_wait_list, MemorySegment event_wait_list, MemorySegment event) {
        var mh$ = clEnqueueWriteBufferRect$MH();
        try {
            return (int)mh$.invokeExact(command_queue, buffer, blocking_write, buffer_origin, host_origin, region, buffer_row_pitch, buffer_slice_pitch, host_row_pitch, host_slice_pitch, ptr, num_events_in_wait_list, event_wait_list, event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clEnqueueFillBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$196.const$3,"clEnqueueFillBuffer");
    }
    /**
     * {@snippet :
     * cl_int clEnqueueFillBuffer(cl_command_queue command_queue, cl_mem buffer, void* pattern, size_t pattern_size, size_t offset, size_t size, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event);
     * }
     */
    public static int clEnqueueFillBuffer(MemorySegment command_queue, MemorySegment buffer, MemorySegment pattern, long pattern_size, long offset, long size, int num_events_in_wait_list, MemorySegment event_wait_list, MemorySegment event) {
        var mh$ = clEnqueueFillBuffer$MH();
        try {
            return (int)mh$.invokeExact(command_queue, buffer, pattern, pattern_size, offset, size, num_events_in_wait_list, event_wait_list, event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clEnqueueCopyBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$196.const$4,"clEnqueueCopyBuffer");
    }
    /**
     * {@snippet :
     * cl_int clEnqueueCopyBuffer(cl_command_queue command_queue, cl_mem src_buffer, cl_mem dst_buffer, size_t src_offset, size_t dst_offset, size_t size, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event);
     * }
     */
    public static int clEnqueueCopyBuffer(MemorySegment command_queue, MemorySegment src_buffer, MemorySegment dst_buffer, long src_offset, long dst_offset, long size, int num_events_in_wait_list, MemorySegment event_wait_list, MemorySegment event) {
        var mh$ = clEnqueueCopyBuffer$MH();
        try {
            return (int)mh$.invokeExact(command_queue, src_buffer, dst_buffer, src_offset, dst_offset, size, num_events_in_wait_list, event_wait_list, event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clEnqueueCopyBufferRect$MH() {
        return RuntimeHelper.requireNonNull(constants$196.const$6,"clEnqueueCopyBufferRect");
    }
    /**
     * {@snippet :
     * cl_int clEnqueueCopyBufferRect(cl_command_queue command_queue, cl_mem src_buffer, cl_mem dst_buffer, const size_t* src_origin, const size_t* dst_origin, const size_t* region, size_t src_row_pitch, size_t src_slice_pitch, size_t dst_row_pitch, size_t dst_slice_pitch, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event);
     * }
     */
    public static int clEnqueueCopyBufferRect(MemorySegment command_queue, MemorySegment src_buffer, MemorySegment dst_buffer, MemorySegment src_origin, MemorySegment dst_origin, MemorySegment region, long src_row_pitch, long src_slice_pitch, long dst_row_pitch, long dst_slice_pitch, int num_events_in_wait_list, MemorySegment event_wait_list, MemorySegment event) {
        var mh$ = clEnqueueCopyBufferRect$MH();
        try {
            return (int)mh$.invokeExact(command_queue, src_buffer, dst_buffer, src_origin, dst_origin, region, src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, event_wait_list, event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clEnqueueReadImage$MH() {
        return RuntimeHelper.requireNonNull(constants$197.const$1,"clEnqueueReadImage");
    }
    /**
     * {@snippet :
     * cl_int clEnqueueReadImage(cl_command_queue command_queue, cl_mem image, cl_bool blocking_read, const size_t* origin, const size_t* region, size_t row_pitch, size_t slice_pitch, void* ptr, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event);
     * }
     */
    public static int clEnqueueReadImage(MemorySegment command_queue, MemorySegment image, int blocking_read, MemorySegment origin, MemorySegment region, long row_pitch, long slice_pitch, MemorySegment ptr, int num_events_in_wait_list, MemorySegment event_wait_list, MemorySegment event) {
        var mh$ = clEnqueueReadImage$MH();
        try {
            return (int)mh$.invokeExact(command_queue, image, blocking_read, origin, region, row_pitch, slice_pitch, ptr, num_events_in_wait_list, event_wait_list, event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clEnqueueWriteImage$MH() {
        return RuntimeHelper.requireNonNull(constants$197.const$2,"clEnqueueWriteImage");
    }
    /**
     * {@snippet :
     * cl_int clEnqueueWriteImage(cl_command_queue command_queue, cl_mem image, cl_bool blocking_write, const size_t* origin, const size_t* region, size_t input_row_pitch, size_t input_slice_pitch, void* ptr, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event);
     * }
     */
    public static int clEnqueueWriteImage(MemorySegment command_queue, MemorySegment image, int blocking_write, MemorySegment origin, MemorySegment region, long input_row_pitch, long input_slice_pitch, MemorySegment ptr, int num_events_in_wait_list, MemorySegment event_wait_list, MemorySegment event) {
        var mh$ = clEnqueueWriteImage$MH();
        try {
            return (int)mh$.invokeExact(command_queue, image, blocking_write, origin, region, input_row_pitch, input_slice_pitch, ptr, num_events_in_wait_list, event_wait_list, event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clEnqueueFillImage$MH() {
        return RuntimeHelper.requireNonNull(constants$197.const$4,"clEnqueueFillImage");
    }
    /**
     * {@snippet :
     * cl_int clEnqueueFillImage(cl_command_queue command_queue, cl_mem image, void* fill_color, const size_t* origin, const size_t* region, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event);
     * }
     */
    public static int clEnqueueFillImage(MemorySegment command_queue, MemorySegment image, MemorySegment fill_color, MemorySegment origin, MemorySegment region, int num_events_in_wait_list, MemorySegment event_wait_list, MemorySegment event) {
        var mh$ = clEnqueueFillImage$MH();
        try {
            return (int)mh$.invokeExact(command_queue, image, fill_color, origin, region, num_events_in_wait_list, event_wait_list, event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clEnqueueCopyImage$MH() {
        return RuntimeHelper.requireNonNull(constants$197.const$6,"clEnqueueCopyImage");
    }
    /**
     * {@snippet :
     * cl_int clEnqueueCopyImage(cl_command_queue command_queue, cl_mem src_image, cl_mem dst_image, const size_t* src_origin, const size_t* dst_origin, const size_t* region, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event);
     * }
     */
    public static int clEnqueueCopyImage(MemorySegment command_queue, MemorySegment src_image, MemorySegment dst_image, MemorySegment src_origin, MemorySegment dst_origin, MemorySegment region, int num_events_in_wait_list, MemorySegment event_wait_list, MemorySegment event) {
        var mh$ = clEnqueueCopyImage$MH();
        try {
            return (int)mh$.invokeExact(command_queue, src_image, dst_image, src_origin, dst_origin, region, num_events_in_wait_list, event_wait_list, event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clEnqueueCopyImageToBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$198.const$1,"clEnqueueCopyImageToBuffer");
    }
    /**
     * {@snippet :
     * cl_int clEnqueueCopyImageToBuffer(cl_command_queue command_queue, cl_mem src_image, cl_mem dst_buffer, const size_t* src_origin, const size_t* region, size_t dst_offset, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event);
     * }
     */
    public static int clEnqueueCopyImageToBuffer(MemorySegment command_queue, MemorySegment src_image, MemorySegment dst_buffer, MemorySegment src_origin, MemorySegment region, long dst_offset, int num_events_in_wait_list, MemorySegment event_wait_list, MemorySegment event) {
        var mh$ = clEnqueueCopyImageToBuffer$MH();
        try {
            return (int)mh$.invokeExact(command_queue, src_image, dst_buffer, src_origin, region, dst_offset, num_events_in_wait_list, event_wait_list, event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clEnqueueCopyBufferToImage$MH() {
        return RuntimeHelper.requireNonNull(constants$198.const$3,"clEnqueueCopyBufferToImage");
    }
    /**
     * {@snippet :
     * cl_int clEnqueueCopyBufferToImage(cl_command_queue command_queue, cl_mem src_buffer, cl_mem dst_image, size_t src_offset, const size_t* dst_origin, const size_t* region, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event);
     * }
     */
    public static int clEnqueueCopyBufferToImage(MemorySegment command_queue, MemorySegment src_buffer, MemorySegment dst_image, long src_offset, MemorySegment dst_origin, MemorySegment region, int num_events_in_wait_list, MemorySegment event_wait_list, MemorySegment event) {
        var mh$ = clEnqueueCopyBufferToImage$MH();
        try {
            return (int)mh$.invokeExact(command_queue, src_buffer, dst_image, src_offset, dst_origin, region, num_events_in_wait_list, event_wait_list, event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clEnqueueMapBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$198.const$5,"clEnqueueMapBuffer");
    }
    /**
     * {@snippet :
     * void* clEnqueueMapBuffer(cl_command_queue command_queue, cl_mem buffer, cl_bool blocking_map, cl_map_flags map_flags, size_t offset, size_t size, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, cl_int* errcode_ret);
     * }
     */
    public static MemorySegment clEnqueueMapBuffer(MemorySegment command_queue, MemorySegment buffer, int blocking_map, long map_flags, long offset, long size, int num_events_in_wait_list, MemorySegment event_wait_list, MemorySegment event, MemorySegment errcode_ret) {
        var mh$ = clEnqueueMapBuffer$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(command_queue, buffer, blocking_map, map_flags, offset, size, num_events_in_wait_list, event_wait_list, event, errcode_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clEnqueueMapImage$MH() {
        return RuntimeHelper.requireNonNull(constants$199.const$1,"clEnqueueMapImage");
    }
    /**
     * {@snippet :
     * void* clEnqueueMapImage(cl_command_queue command_queue, cl_mem image, cl_bool blocking_map, cl_map_flags map_flags, const size_t* origin, const size_t* region, size_t* image_row_pitch, size_t* image_slice_pitch, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, cl_int* errcode_ret);
     * }
     */
    public static MemorySegment clEnqueueMapImage(MemorySegment command_queue, MemorySegment image, int blocking_map, long map_flags, MemorySegment origin, MemorySegment region, MemorySegment image_row_pitch, MemorySegment image_slice_pitch, int num_events_in_wait_list, MemorySegment event_wait_list, MemorySegment event, MemorySegment errcode_ret) {
        var mh$ = clEnqueueMapImage$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(command_queue, image, blocking_map, map_flags, origin, region, image_row_pitch, image_slice_pitch, num_events_in_wait_list, event_wait_list, event, errcode_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clEnqueueUnmapMemObject$MH() {
        return RuntimeHelper.requireNonNull(constants$199.const$3,"clEnqueueUnmapMemObject");
    }
    /**
     * {@snippet :
     * cl_int clEnqueueUnmapMemObject(cl_command_queue command_queue, cl_mem memobj, void* mapped_ptr, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event);
     * }
     */
    public static int clEnqueueUnmapMemObject(MemorySegment command_queue, MemorySegment memobj, MemorySegment mapped_ptr, int num_events_in_wait_list, MemorySegment event_wait_list, MemorySegment event) {
        var mh$ = clEnqueueUnmapMemObject$MH();
        try {
            return (int)mh$.invokeExact(command_queue, memobj, mapped_ptr, num_events_in_wait_list, event_wait_list, event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clEnqueueMigrateMemObjects$MH() {
        return RuntimeHelper.requireNonNull(constants$199.const$5,"clEnqueueMigrateMemObjects");
    }
    /**
     * {@snippet :
     * cl_int clEnqueueMigrateMemObjects(cl_command_queue command_queue, cl_uint num_mem_objects, const cl_mem* mem_objects, cl_mem_migration_flags flags, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event);
     * }
     */
    public static int clEnqueueMigrateMemObjects(MemorySegment command_queue, int num_mem_objects, MemorySegment mem_objects, long flags, int num_events_in_wait_list, MemorySegment event_wait_list, MemorySegment event) {
        var mh$ = clEnqueueMigrateMemObjects$MH();
        try {
            return (int)mh$.invokeExact(command_queue, num_mem_objects, mem_objects, flags, num_events_in_wait_list, event_wait_list, event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clEnqueueNDRangeKernel$MH() {
        return RuntimeHelper.requireNonNull(constants$200.const$1,"clEnqueueNDRangeKernel");
    }
    /**
     * {@snippet :
     * cl_int clEnqueueNDRangeKernel(cl_command_queue command_queue, cl_kernel kernel, cl_uint work_dim, const size_t* global_work_offset, const size_t* global_work_size, const size_t* local_work_size, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event);
     * }
     */
    public static int clEnqueueNDRangeKernel(MemorySegment command_queue, MemorySegment kernel, int work_dim, MemorySegment global_work_offset, MemorySegment global_work_size, MemorySegment local_work_size, int num_events_in_wait_list, MemorySegment event_wait_list, MemorySegment event) {
        var mh$ = clEnqueueNDRangeKernel$MH();
        try {
            return (int)mh$.invokeExact(command_queue, kernel, work_dim, global_work_offset, global_work_size, local_work_size, num_events_in_wait_list, event_wait_list, event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clEnqueueNativeKernel$MH() {
        return RuntimeHelper.requireNonNull(constants$200.const$5,"clEnqueueNativeKernel");
    }
    /**
     * {@snippet :
     * cl_int clEnqueueNativeKernel(cl_command_queue command_queue, void (*user_func)(void*), void* args, size_t cb_args, cl_uint num_mem_objects, const cl_mem* mem_list, void** args_mem_loc, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event);
     * }
     */
    public static int clEnqueueNativeKernel(MemorySegment command_queue, MemorySegment user_func, MemorySegment args, long cb_args, int num_mem_objects, MemorySegment mem_list, MemorySegment args_mem_loc, int num_events_in_wait_list, MemorySegment event_wait_list, MemorySegment event) {
        var mh$ = clEnqueueNativeKernel$MH();
        try {
            return (int)mh$.invokeExact(command_queue, user_func, args, cb_args, num_mem_objects, mem_list, args_mem_loc, num_events_in_wait_list, event_wait_list, event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clEnqueueMarkerWithWaitList$MH() {
        return RuntimeHelper.requireNonNull(constants$201.const$0,"clEnqueueMarkerWithWaitList");
    }
    /**
     * {@snippet :
     * cl_int clEnqueueMarkerWithWaitList(cl_command_queue command_queue, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event);
     * }
     */
    public static int clEnqueueMarkerWithWaitList(MemorySegment command_queue, int num_events_in_wait_list, MemorySegment event_wait_list, MemorySegment event) {
        var mh$ = clEnqueueMarkerWithWaitList$MH();
        try {
            return (int)mh$.invokeExact(command_queue, num_events_in_wait_list, event_wait_list, event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clEnqueueBarrierWithWaitList$MH() {
        return RuntimeHelper.requireNonNull(constants$201.const$1,"clEnqueueBarrierWithWaitList");
    }
    /**
     * {@snippet :
     * cl_int clEnqueueBarrierWithWaitList(cl_command_queue command_queue, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event);
     * }
     */
    public static int clEnqueueBarrierWithWaitList(MemorySegment command_queue, int num_events_in_wait_list, MemorySegment event_wait_list, MemorySegment event) {
        var mh$ = clEnqueueBarrierWithWaitList$MH();
        try {
            return (int)mh$.invokeExact(command_queue, num_events_in_wait_list, event_wait_list, event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clEnqueueSVMFree$MH() {
        return RuntimeHelper.requireNonNull(constants$201.const$6,"clEnqueueSVMFree");
    }
    /**
     * {@snippet :
     * cl_int clEnqueueSVMFree(cl_command_queue command_queue, cl_uint num_svm_pointers, void* svm_pointers[], void (*pfn_free_func)(cl_command_queue,cl_uint,void**,void*), void* user_data, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event);
     * }
     */
    public static int clEnqueueSVMFree(MemorySegment command_queue, int num_svm_pointers, MemorySegment svm_pointers, MemorySegment pfn_free_func, MemorySegment user_data, int num_events_in_wait_list, MemorySegment event_wait_list, MemorySegment event) {
        var mh$ = clEnqueueSVMFree$MH();
        try {
            return (int)mh$.invokeExact(command_queue, num_svm_pointers, svm_pointers, pfn_free_func, user_data, num_events_in_wait_list, event_wait_list, event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clEnqueueSVMMemcpy$MH() {
        return RuntimeHelper.requireNonNull(constants$202.const$1,"clEnqueueSVMMemcpy");
    }
    /**
     * {@snippet :
     * cl_int clEnqueueSVMMemcpy(cl_command_queue command_queue, cl_bool blocking_copy, void* dst_ptr, void* src_ptr, size_t size, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event);
     * }
     */
    public static int clEnqueueSVMMemcpy(MemorySegment command_queue, int blocking_copy, MemorySegment dst_ptr, MemorySegment src_ptr, long size, int num_events_in_wait_list, MemorySegment event_wait_list, MemorySegment event) {
        var mh$ = clEnqueueSVMMemcpy$MH();
        try {
            return (int)mh$.invokeExact(command_queue, blocking_copy, dst_ptr, src_ptr, size, num_events_in_wait_list, event_wait_list, event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clEnqueueSVMMemFill$MH() {
        return RuntimeHelper.requireNonNull(constants$202.const$3,"clEnqueueSVMMemFill");
    }
    /**
     * {@snippet :
     * cl_int clEnqueueSVMMemFill(cl_command_queue command_queue, void* svm_ptr, void* pattern, size_t pattern_size, size_t size, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event);
     * }
     */
    public static int clEnqueueSVMMemFill(MemorySegment command_queue, MemorySegment svm_ptr, MemorySegment pattern, long pattern_size, long size, int num_events_in_wait_list, MemorySegment event_wait_list, MemorySegment event) {
        var mh$ = clEnqueueSVMMemFill$MH();
        try {
            return (int)mh$.invokeExact(command_queue, svm_ptr, pattern, pattern_size, size, num_events_in_wait_list, event_wait_list, event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clEnqueueSVMMap$MH() {
        return RuntimeHelper.requireNonNull(constants$202.const$5,"clEnqueueSVMMap");
    }
    /**
     * {@snippet :
     * cl_int clEnqueueSVMMap(cl_command_queue command_queue, cl_bool blocking_map, cl_map_flags flags, void* svm_ptr, size_t size, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event);
     * }
     */
    public static int clEnqueueSVMMap(MemorySegment command_queue, int blocking_map, long flags, MemorySegment svm_ptr, long size, int num_events_in_wait_list, MemorySegment event_wait_list, MemorySegment event) {
        var mh$ = clEnqueueSVMMap$MH();
        try {
            return (int)mh$.invokeExact(command_queue, blocking_map, flags, svm_ptr, size, num_events_in_wait_list, event_wait_list, event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clEnqueueSVMUnmap$MH() {
        return RuntimeHelper.requireNonNull(constants$203.const$0,"clEnqueueSVMUnmap");
    }
    /**
     * {@snippet :
     * cl_int clEnqueueSVMUnmap(cl_command_queue command_queue, void* svm_ptr, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event);
     * }
     */
    public static int clEnqueueSVMUnmap(MemorySegment command_queue, MemorySegment svm_ptr, int num_events_in_wait_list, MemorySegment event_wait_list, MemorySegment event) {
        var mh$ = clEnqueueSVMUnmap$MH();
        try {
            return (int)mh$.invokeExact(command_queue, svm_ptr, num_events_in_wait_list, event_wait_list, event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clEnqueueSVMMigrateMem$MH() {
        return RuntimeHelper.requireNonNull(constants$203.const$1,"clEnqueueSVMMigrateMem");
    }
    /**
     * {@snippet :
     * cl_int clEnqueueSVMMigrateMem(cl_command_queue command_queue, cl_uint num_svm_pointers, void** svm_pointers, const size_t* sizes, cl_mem_migration_flags flags, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event);
     * }
     */
    public static int clEnqueueSVMMigrateMem(MemorySegment command_queue, int num_svm_pointers, MemorySegment svm_pointers, MemorySegment sizes, long flags, int num_events_in_wait_list, MemorySegment event_wait_list, MemorySegment event) {
        var mh$ = clEnqueueSVMMigrateMem$MH();
        try {
            return (int)mh$.invokeExact(command_queue, num_svm_pointers, svm_pointers, sizes, flags, num_events_in_wait_list, event_wait_list, event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clGetExtensionFunctionAddressForPlatform$MH() {
        return RuntimeHelper.requireNonNull(constants$203.const$2,"clGetExtensionFunctionAddressForPlatform");
    }
    /**
     * {@snippet :
     * void* clGetExtensionFunctionAddressForPlatform(cl_platform_id platform, char* func_name);
     * }
     */
    public static MemorySegment clGetExtensionFunctionAddressForPlatform(MemorySegment platform, MemorySegment func_name) {
        var mh$ = clGetExtensionFunctionAddressForPlatform$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(platform, func_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clCreateImage2D$MH() {
        return RuntimeHelper.requireNonNull(constants$203.const$4,"clCreateImage2D");
    }
    /**
     * {@snippet :
     * cl_mem clCreateImage2D(cl_context context, cl_mem_flags flags, const cl_image_format* image_format, size_t image_width, size_t image_height, size_t image_row_pitch, void* host_ptr, cl_int* errcode_ret);
     * }
     */
    public static MemorySegment clCreateImage2D(MemorySegment context, long flags, MemorySegment image_format, long image_width, long image_height, long image_row_pitch, MemorySegment host_ptr, MemorySegment errcode_ret) {
        var mh$ = clCreateImage2D$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(context, flags, image_format, image_width, image_height, image_row_pitch, host_ptr, errcode_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clCreateImage3D$MH() {
        return RuntimeHelper.requireNonNull(constants$203.const$6,"clCreateImage3D");
    }
    /**
     * {@snippet :
     * cl_mem clCreateImage3D(cl_context context, cl_mem_flags flags, const cl_image_format* image_format, size_t image_width, size_t image_height, size_t image_depth, size_t image_row_pitch, size_t image_slice_pitch, void* host_ptr, cl_int* errcode_ret);
     * }
     */
    public static MemorySegment clCreateImage3D(MemorySegment context, long flags, MemorySegment image_format, long image_width, long image_height, long image_depth, long image_row_pitch, long image_slice_pitch, MemorySegment host_ptr, MemorySegment errcode_ret) {
        var mh$ = clCreateImage3D$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(context, flags, image_format, image_width, image_height, image_depth, image_row_pitch, image_slice_pitch, host_ptr, errcode_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clEnqueueMarker$MH() {
        return RuntimeHelper.requireNonNull(constants$204.const$0,"clEnqueueMarker");
    }
    /**
     * {@snippet :
     * cl_int clEnqueueMarker(cl_command_queue command_queue, cl_event* event);
     * }
     */
    public static int clEnqueueMarker(MemorySegment command_queue, MemorySegment event) {
        var mh$ = clEnqueueMarker$MH();
        try {
            return (int)mh$.invokeExact(command_queue, event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clEnqueueWaitForEvents$MH() {
        return RuntimeHelper.requireNonNull(constants$204.const$1,"clEnqueueWaitForEvents");
    }
    /**
     * {@snippet :
     * cl_int clEnqueueWaitForEvents(cl_command_queue command_queue, cl_uint num_events, const cl_event* event_list);
     * }
     */
    public static int clEnqueueWaitForEvents(MemorySegment command_queue, int num_events, MemorySegment event_list) {
        var mh$ = clEnqueueWaitForEvents$MH();
        try {
            return (int)mh$.invokeExact(command_queue, num_events, event_list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clEnqueueBarrier$MH() {
        return RuntimeHelper.requireNonNull(constants$204.const$2,"clEnqueueBarrier");
    }
    /**
     * {@snippet :
     * cl_int clEnqueueBarrier(cl_command_queue command_queue);
     * }
     */
    public static int clEnqueueBarrier(MemorySegment command_queue) {
        var mh$ = clEnqueueBarrier$MH();
        try {
            return (int)mh$.invokeExact(command_queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clUnloadCompiler$MH() {
        return RuntimeHelper.requireNonNull(constants$204.const$3,"clUnloadCompiler");
    }
    /**
     * {@snippet :
     * cl_int clUnloadCompiler();
     * }
     */
    public static int clUnloadCompiler() {
        var mh$ = clUnloadCompiler$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clGetExtensionFunctionAddress$MH() {
        return RuntimeHelper.requireNonNull(constants$204.const$4,"clGetExtensionFunctionAddress");
    }
    /**
     * {@snippet :
     * void* clGetExtensionFunctionAddress(char* func_name);
     * }
     */
    public static MemorySegment clGetExtensionFunctionAddress(MemorySegment func_name) {
        var mh$ = clGetExtensionFunctionAddress$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(func_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clCreateCommandQueue$MH() {
        return RuntimeHelper.requireNonNull(constants$204.const$5,"clCreateCommandQueue");
    }
    /**
     * {@snippet :
     * cl_command_queue clCreateCommandQueue(cl_context context, cl_device_id device, cl_command_queue_properties properties, cl_int* errcode_ret);
     * }
     */
    public static MemorySegment clCreateCommandQueue(MemorySegment context, MemorySegment device, long properties, MemorySegment errcode_ret) {
        var mh$ = clCreateCommandQueue$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(context, device, properties, errcode_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clCreateSampler$MH() {
        return RuntimeHelper.requireNonNull(constants$205.const$1,"clCreateSampler");
    }
    /**
     * {@snippet :
     * cl_sampler clCreateSampler(cl_context context, cl_bool normalized_coords, cl_addressing_mode addressing_mode, cl_filter_mode filter_mode, cl_int* errcode_ret);
     * }
     */
    public static MemorySegment clCreateSampler(MemorySegment context, int normalized_coords, int addressing_mode, int filter_mode, MemorySegment errcode_ret) {
        var mh$ = clCreateSampler$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(context, normalized_coords, addressing_mode, filter_mode, errcode_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clEnqueueTask$MH() {
        return RuntimeHelper.requireNonNull(constants$205.const$2,"clEnqueueTask");
    }
    /**
     * {@snippet :
     * cl_int clEnqueueTask(cl_command_queue command_queue, cl_kernel kernel, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event);
     * }
     */
    public static int clEnqueueTask(MemorySegment command_queue, MemorySegment kernel, int num_events_in_wait_list, MemorySegment event_wait_list, MemorySegment event) {
        var mh$ = clEnqueueTask$MH();
        try {
            return (int)mh$.invokeExact(command_queue, kernel, num_events_in_wait_list, event_wait_list, event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned int cl_gl_context_info;
     * }
     */
    public static final OfInt cl_gl_context_info = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int cl_gl_object_type;
     * }
     */
    public static final OfInt cl_gl_object_type = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int cl_gl_texture_info;
     * }
     */
    public static final OfInt cl_gl_texture_info = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int cl_gl_platform_info;
     * }
     */
    public static final OfInt cl_gl_platform_info = JAVA_INT;
    public static MethodHandle clGetGLContextInfoKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$206.const$2,"clGetGLContextInfoKHR");
    }
    /**
     * {@snippet :
     * cl_int clGetGLContextInfoKHR(const cl_context_properties* properties, cl_gl_context_info param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret);
     * }
     */
    public static int clGetGLContextInfoKHR(MemorySegment properties, int param_name, long param_value_size, MemorySegment param_value, MemorySegment param_value_size_ret) {
        var mh$ = clGetGLContextInfoKHR$MH();
        try {
            return (int)mh$.invokeExact(properties, param_name, param_value_size, param_value, param_value_size_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clCreateFromGLBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$206.const$3,"clCreateFromGLBuffer");
    }
    /**
     * {@snippet :
     * cl_mem clCreateFromGLBuffer(cl_context context, cl_mem_flags flags, cl_GLuint bufobj, cl_int* errcode_ret);
     * }
     */
    public static MemorySegment clCreateFromGLBuffer(MemorySegment context, long flags, int bufobj, MemorySegment errcode_ret) {
        var mh$ = clCreateFromGLBuffer$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(context, flags, bufobj, errcode_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clCreateFromGLTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$207.const$1,"clCreateFromGLTexture");
    }
    /**
     * {@snippet :
     * cl_mem clCreateFromGLTexture(cl_context context, cl_mem_flags flags, cl_GLenum target, cl_GLint miplevel, cl_GLuint texture, cl_int* errcode_ret);
     * }
     */
    public static MemorySegment clCreateFromGLTexture(MemorySegment context, long flags, int target, int miplevel, int texture, MemorySegment errcode_ret) {
        var mh$ = clCreateFromGLTexture$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(context, flags, target, miplevel, texture, errcode_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clCreateFromGLRenderbuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$208.const$3,"clCreateFromGLRenderbuffer");
    }
    /**
     * {@snippet :
     * cl_mem clCreateFromGLRenderbuffer(cl_context context, cl_mem_flags flags, cl_GLuint renderbuffer, cl_int* errcode_ret);
     * }
     */
    public static MemorySegment clCreateFromGLRenderbuffer(MemorySegment context, long flags, int renderbuffer, MemorySegment errcode_ret) {
        var mh$ = clCreateFromGLRenderbuffer$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(context, flags, renderbuffer, errcode_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clGetGLObjectInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$208.const$4,"clGetGLObjectInfo");
    }
    /**
     * {@snippet :
     * cl_int clGetGLObjectInfo(cl_mem memobj, cl_gl_object_type* gl_object_type, cl_GLuint* gl_object_name);
     * }
     */
    public static int clGetGLObjectInfo(MemorySegment memobj, MemorySegment gl_object_type, MemorySegment gl_object_name) {
        var mh$ = clGetGLObjectInfo$MH();
        try {
            return (int)mh$.invokeExact(memobj, gl_object_type, gl_object_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clGetGLTextureInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$208.const$5,"clGetGLTextureInfo");
    }
    /**
     * {@snippet :
     * cl_int clGetGLTextureInfo(cl_mem memobj, cl_gl_texture_info param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret);
     * }
     */
    public static int clGetGLTextureInfo(MemorySegment memobj, int param_name, long param_value_size, MemorySegment param_value, MemorySegment param_value_size_ret) {
        var mh$ = clGetGLTextureInfo$MH();
        try {
            return (int)mh$.invokeExact(memobj, param_name, param_value_size, param_value, param_value_size_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clEnqueueAcquireGLObjects$MH() {
        return RuntimeHelper.requireNonNull(constants$209.const$0,"clEnqueueAcquireGLObjects");
    }
    /**
     * {@snippet :
     * cl_int clEnqueueAcquireGLObjects(cl_command_queue command_queue, cl_uint num_objects, const cl_mem* mem_objects, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event);
     * }
     */
    public static int clEnqueueAcquireGLObjects(MemorySegment command_queue, int num_objects, MemorySegment mem_objects, int num_events_in_wait_list, MemorySegment event_wait_list, MemorySegment event) {
        var mh$ = clEnqueueAcquireGLObjects$MH();
        try {
            return (int)mh$.invokeExact(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clEnqueueReleaseGLObjects$MH() {
        return RuntimeHelper.requireNonNull(constants$209.const$1,"clEnqueueReleaseGLObjects");
    }
    /**
     * {@snippet :
     * cl_int clEnqueueReleaseGLObjects(cl_command_queue command_queue, cl_uint num_objects, const cl_mem* mem_objects, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event);
     * }
     */
    public static int clEnqueueReleaseGLObjects(MemorySegment command_queue, int num_objects, MemorySegment mem_objects, int num_events_in_wait_list, MemorySegment event_wait_list, MemorySegment event) {
        var mh$ = clEnqueueReleaseGLObjects$MH();
        try {
            return (int)mh$.invokeExact(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clCreateFromGLTexture2D$MH() {
        return RuntimeHelper.requireNonNull(constants$209.const$4,"clCreateFromGLTexture2D");
    }
    /**
     * {@snippet :
     * cl_mem clCreateFromGLTexture2D(cl_context context, cl_mem_flags flags, cl_GLenum target, cl_GLint miplevel, cl_GLuint texture, cl_int* errcode_ret);
     * }
     */
    public static MemorySegment clCreateFromGLTexture2D(MemorySegment context, long flags, int target, int miplevel, int texture, MemorySegment errcode_ret) {
        var mh$ = clCreateFromGLTexture2D$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(context, flags, target, miplevel, texture, errcode_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clCreateFromGLTexture3D$MH() {
        return RuntimeHelper.requireNonNull(constants$209.const$5,"clCreateFromGLTexture3D");
    }
    /**
     * {@snippet :
     * cl_mem clCreateFromGLTexture3D(cl_context context, cl_mem_flags flags, cl_GLenum target, cl_GLint miplevel, cl_GLuint texture, cl_int* errcode_ret);
     * }
     */
    public static MemorySegment clCreateFromGLTexture3D(MemorySegment context, long flags, int target, int miplevel, int texture, MemorySegment errcode_ret) {
        var mh$ = clCreateFromGLTexture3D$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(context, flags, target, miplevel, texture, errcode_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct __GLsync* cl_GLsync;
     * }
     */
    public static final AddressLayout cl_GLsync = RuntimeHelper.POINTER;
    public static MethodHandle clCreateEventFromGLsyncKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$210.const$2,"clCreateEventFromGLsyncKHR");
    }
    /**
     * {@snippet :
     * cl_event clCreateEventFromGLsyncKHR(cl_context context, cl_GLsync sync, cl_int* errcode_ret);
     * }
     */
    public static MemorySegment clCreateEventFromGLsyncKHR(MemorySegment context, MemorySegment sync, MemorySegment errcode_ret) {
        var mh$ = clCreateEventFromGLsyncKHR$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(context, sync, errcode_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clGetSupportedGLTextureFormatsINTEL$MH() {
        return RuntimeHelper.requireNonNull(constants$210.const$5,"clGetSupportedGLTextureFormatsINTEL");
    }
    /**
     * {@snippet :
     * cl_int clGetSupportedGLTextureFormatsINTEL(cl_context context, cl_mem_flags flags, cl_mem_object_type image_type, cl_uint num_entries, cl_GLenum* gl_formats, cl_uint* num_texture_formats);
     * }
     */
    public static int clGetSupportedGLTextureFormatsINTEL(MemorySegment context, long flags, int image_type, int num_entries, MemorySegment gl_formats, MemorySegment num_texture_formats) {
        var mh$ = clGetSupportedGLTextureFormatsINTEL$MH();
        try {
            return (int)mh$.invokeExact(context, flags, image_type, num_entries, gl_formats, num_texture_formats);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned long long cl_device_command_buffer_capabilities_khr;
     * }
     */
    public static final OfLong cl_device_command_buffer_capabilities_khr = JAVA_LONG;
    /**
     * {@snippet :
     * typedef struct _cl_command_buffer_khr* cl_command_buffer_khr;
     * }
     */
    public static final AddressLayout cl_command_buffer_khr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef unsigned int cl_sync_point_khr;
     * }
     */
    public static final OfInt cl_sync_point_khr = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int cl_command_buffer_info_khr;
     * }
     */
    public static final OfInt cl_command_buffer_info_khr = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int cl_command_buffer_state_khr;
     * }
     */
    public static final OfInt cl_command_buffer_state_khr = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long long cl_command_buffer_properties_khr;
     * }
     */
    public static final OfLong cl_command_buffer_properties_khr = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long cl_command_buffer_flags_khr;
     * }
     */
    public static final OfLong cl_command_buffer_flags_khr = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long cl_ndrange_kernel_command_properties_khr;
     * }
     */
    public static final OfLong cl_ndrange_kernel_command_properties_khr = JAVA_LONG;
    /**
     * {@snippet :
     * typedef struct _cl_mutable_command_khr* cl_mutable_command_khr;
     * }
     */
    public static final AddressLayout cl_mutable_command_khr = RuntimeHelper.POINTER;
    public static MethodHandle clCreateCommandBufferKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$217.const$0,"clCreateCommandBufferKHR");
    }
    /**
     * {@snippet :
     * cl_command_buffer_khr clCreateCommandBufferKHR(cl_uint num_queues, const cl_command_queue* queues, const cl_command_buffer_properties_khr* properties, cl_int* errcode_ret);
     * }
     */
    public static MemorySegment clCreateCommandBufferKHR(int num_queues, MemorySegment queues, MemorySegment properties, MemorySegment errcode_ret) {
        var mh$ = clCreateCommandBufferKHR$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(num_queues, queues, properties, errcode_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clFinalizeCommandBufferKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$217.const$1,"clFinalizeCommandBufferKHR");
    }
    /**
     * {@snippet :
     * cl_int clFinalizeCommandBufferKHR(cl_command_buffer_khr command_buffer);
     * }
     */
    public static int clFinalizeCommandBufferKHR(MemorySegment command_buffer) {
        var mh$ = clFinalizeCommandBufferKHR$MH();
        try {
            return (int)mh$.invokeExact(command_buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clRetainCommandBufferKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$217.const$2,"clRetainCommandBufferKHR");
    }
    /**
     * {@snippet :
     * cl_int clRetainCommandBufferKHR(cl_command_buffer_khr command_buffer);
     * }
     */
    public static int clRetainCommandBufferKHR(MemorySegment command_buffer) {
        var mh$ = clRetainCommandBufferKHR$MH();
        try {
            return (int)mh$.invokeExact(command_buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clReleaseCommandBufferKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$217.const$3,"clReleaseCommandBufferKHR");
    }
    /**
     * {@snippet :
     * cl_int clReleaseCommandBufferKHR(cl_command_buffer_khr command_buffer);
     * }
     */
    public static int clReleaseCommandBufferKHR(MemorySegment command_buffer) {
        var mh$ = clReleaseCommandBufferKHR$MH();
        try {
            return (int)mh$.invokeExact(command_buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clEnqueueCommandBufferKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$217.const$4,"clEnqueueCommandBufferKHR");
    }
    /**
     * {@snippet :
     * cl_int clEnqueueCommandBufferKHR(cl_uint num_queues, cl_command_queue* queues, cl_command_buffer_khr command_buffer, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event);
     * }
     */
    public static int clEnqueueCommandBufferKHR(int num_queues, MemorySegment queues, MemorySegment command_buffer, int num_events_in_wait_list, MemorySegment event_wait_list, MemorySegment event) {
        var mh$ = clEnqueueCommandBufferKHR$MH();
        try {
            return (int)mh$.invokeExact(num_queues, queues, command_buffer, num_events_in_wait_list, event_wait_list, event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clCommandBarrierWithWaitListKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$217.const$5,"clCommandBarrierWithWaitListKHR");
    }
    /**
     * {@snippet :
     * cl_int clCommandBarrierWithWaitListKHR(cl_command_buffer_khr command_buffer, cl_command_queue command_queue, cl_uint num_sync_points_in_wait_list, const cl_sync_point_khr* sync_point_wait_list, cl_sync_point_khr* sync_point, cl_mutable_command_khr* mutable_handle);
     * }
     */
    public static int clCommandBarrierWithWaitListKHR(MemorySegment command_buffer, MemorySegment command_queue, int num_sync_points_in_wait_list, MemorySegment sync_point_wait_list, MemorySegment sync_point, MemorySegment mutable_handle) {
        var mh$ = clCommandBarrierWithWaitListKHR$MH();
        try {
            return (int)mh$.invokeExact(command_buffer, command_queue, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clCommandCopyBufferKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$218.const$0,"clCommandCopyBufferKHR");
    }
    /**
     * {@snippet :
     * cl_int clCommandCopyBufferKHR(cl_command_buffer_khr command_buffer, cl_command_queue command_queue, cl_mem src_buffer, cl_mem dst_buffer, size_t src_offset, size_t dst_offset, size_t size, cl_uint num_sync_points_in_wait_list, const cl_sync_point_khr* sync_point_wait_list, cl_sync_point_khr* sync_point, cl_mutable_command_khr* mutable_handle);
     * }
     */
    public static int clCommandCopyBufferKHR(MemorySegment command_buffer, MemorySegment command_queue, MemorySegment src_buffer, MemorySegment dst_buffer, long src_offset, long dst_offset, long size, int num_sync_points_in_wait_list, MemorySegment sync_point_wait_list, MemorySegment sync_point, MemorySegment mutable_handle) {
        var mh$ = clCommandCopyBufferKHR$MH();
        try {
            return (int)mh$.invokeExact(command_buffer, command_queue, src_buffer, dst_buffer, src_offset, dst_offset, size, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clCommandCopyBufferRectKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$218.const$1,"clCommandCopyBufferRectKHR");
    }
    /**
     * {@snippet :
     * cl_int clCommandCopyBufferRectKHR(cl_command_buffer_khr command_buffer, cl_command_queue command_queue, cl_mem src_buffer, cl_mem dst_buffer, const size_t* src_origin, const size_t* dst_origin, const size_t* region, size_t src_row_pitch, size_t src_slice_pitch, size_t dst_row_pitch, size_t dst_slice_pitch, cl_uint num_sync_points_in_wait_list, const cl_sync_point_khr* sync_point_wait_list, cl_sync_point_khr* sync_point, cl_mutable_command_khr* mutable_handle);
     * }
     */
    public static int clCommandCopyBufferRectKHR(MemorySegment command_buffer, MemorySegment command_queue, MemorySegment src_buffer, MemorySegment dst_buffer, MemorySegment src_origin, MemorySegment dst_origin, MemorySegment region, long src_row_pitch, long src_slice_pitch, long dst_row_pitch, long dst_slice_pitch, int num_sync_points_in_wait_list, MemorySegment sync_point_wait_list, MemorySegment sync_point, MemorySegment mutable_handle) {
        var mh$ = clCommandCopyBufferRectKHR$MH();
        try {
            return (int)mh$.invokeExact(command_buffer, command_queue, src_buffer, dst_buffer, src_origin, dst_origin, region, src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clCommandCopyBufferToImageKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$218.const$2,"clCommandCopyBufferToImageKHR");
    }
    /**
     * {@snippet :
     * cl_int clCommandCopyBufferToImageKHR(cl_command_buffer_khr command_buffer, cl_command_queue command_queue, cl_mem src_buffer, cl_mem dst_image, size_t src_offset, const size_t* dst_origin, const size_t* region, cl_uint num_sync_points_in_wait_list, const cl_sync_point_khr* sync_point_wait_list, cl_sync_point_khr* sync_point, cl_mutable_command_khr* mutable_handle);
     * }
     */
    public static int clCommandCopyBufferToImageKHR(MemorySegment command_buffer, MemorySegment command_queue, MemorySegment src_buffer, MemorySegment dst_image, long src_offset, MemorySegment dst_origin, MemorySegment region, int num_sync_points_in_wait_list, MemorySegment sync_point_wait_list, MemorySegment sync_point, MemorySegment mutable_handle) {
        var mh$ = clCommandCopyBufferToImageKHR$MH();
        try {
            return (int)mh$.invokeExact(command_buffer, command_queue, src_buffer, dst_image, src_offset, dst_origin, region, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clCommandCopyImageKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$218.const$3,"clCommandCopyImageKHR");
    }
    /**
     * {@snippet :
     * cl_int clCommandCopyImageKHR(cl_command_buffer_khr command_buffer, cl_command_queue command_queue, cl_mem src_image, cl_mem dst_image, const size_t* src_origin, const size_t* dst_origin, const size_t* region, cl_uint num_sync_points_in_wait_list, const cl_sync_point_khr* sync_point_wait_list, cl_sync_point_khr* sync_point, cl_mutable_command_khr* mutable_handle);
     * }
     */
    public static int clCommandCopyImageKHR(MemorySegment command_buffer, MemorySegment command_queue, MemorySegment src_image, MemorySegment dst_image, MemorySegment src_origin, MemorySegment dst_origin, MemorySegment region, int num_sync_points_in_wait_list, MemorySegment sync_point_wait_list, MemorySegment sync_point, MemorySegment mutable_handle) {
        var mh$ = clCommandCopyImageKHR$MH();
        try {
            return (int)mh$.invokeExact(command_buffer, command_queue, src_image, dst_image, src_origin, dst_origin, region, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clCommandCopyImageToBufferKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$218.const$4,"clCommandCopyImageToBufferKHR");
    }
    /**
     * {@snippet :
     * cl_int clCommandCopyImageToBufferKHR(cl_command_buffer_khr command_buffer, cl_command_queue command_queue, cl_mem src_image, cl_mem dst_buffer, const size_t* src_origin, const size_t* region, size_t dst_offset, cl_uint num_sync_points_in_wait_list, const cl_sync_point_khr* sync_point_wait_list, cl_sync_point_khr* sync_point, cl_mutable_command_khr* mutable_handle);
     * }
     */
    public static int clCommandCopyImageToBufferKHR(MemorySegment command_buffer, MemorySegment command_queue, MemorySegment src_image, MemorySegment dst_buffer, MemorySegment src_origin, MemorySegment region, long dst_offset, int num_sync_points_in_wait_list, MemorySegment sync_point_wait_list, MemorySegment sync_point, MemorySegment mutable_handle) {
        var mh$ = clCommandCopyImageToBufferKHR$MH();
        try {
            return (int)mh$.invokeExact(command_buffer, command_queue, src_image, dst_buffer, src_origin, region, dst_offset, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clCommandFillBufferKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$218.const$5,"clCommandFillBufferKHR");
    }
    /**
     * {@snippet :
     * cl_int clCommandFillBufferKHR(cl_command_buffer_khr command_buffer, cl_command_queue command_queue, cl_mem buffer, void* pattern, size_t pattern_size, size_t offset, size_t size, cl_uint num_sync_points_in_wait_list, const cl_sync_point_khr* sync_point_wait_list, cl_sync_point_khr* sync_point, cl_mutable_command_khr* mutable_handle);
     * }
     */
    public static int clCommandFillBufferKHR(MemorySegment command_buffer, MemorySegment command_queue, MemorySegment buffer, MemorySegment pattern, long pattern_size, long offset, long size, int num_sync_points_in_wait_list, MemorySegment sync_point_wait_list, MemorySegment sync_point, MemorySegment mutable_handle) {
        var mh$ = clCommandFillBufferKHR$MH();
        try {
            return (int)mh$.invokeExact(command_buffer, command_queue, buffer, pattern, pattern_size, offset, size, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clCommandFillImageKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$219.const$0,"clCommandFillImageKHR");
    }
    /**
     * {@snippet :
     * cl_int clCommandFillImageKHR(cl_command_buffer_khr command_buffer, cl_command_queue command_queue, cl_mem image, void* fill_color, const size_t* origin, const size_t* region, cl_uint num_sync_points_in_wait_list, const cl_sync_point_khr* sync_point_wait_list, cl_sync_point_khr* sync_point, cl_mutable_command_khr* mutable_handle);
     * }
     */
    public static int clCommandFillImageKHR(MemorySegment command_buffer, MemorySegment command_queue, MemorySegment image, MemorySegment fill_color, MemorySegment origin, MemorySegment region, int num_sync_points_in_wait_list, MemorySegment sync_point_wait_list, MemorySegment sync_point, MemorySegment mutable_handle) {
        var mh$ = clCommandFillImageKHR$MH();
        try {
            return (int)mh$.invokeExact(command_buffer, command_queue, image, fill_color, origin, region, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clCommandNDRangeKernelKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$219.const$1,"clCommandNDRangeKernelKHR");
    }
    /**
     * {@snippet :
     * cl_int clCommandNDRangeKernelKHR(cl_command_buffer_khr command_buffer, cl_command_queue command_queue, const cl_ndrange_kernel_command_properties_khr* properties, cl_kernel kernel, cl_uint work_dim, const size_t* global_work_offset, const size_t* global_work_size, const size_t* local_work_size, cl_uint num_sync_points_in_wait_list, const cl_sync_point_khr* sync_point_wait_list, cl_sync_point_khr* sync_point, cl_mutable_command_khr* mutable_handle);
     * }
     */
    public static int clCommandNDRangeKernelKHR(MemorySegment command_buffer, MemorySegment command_queue, MemorySegment properties, MemorySegment kernel, int work_dim, MemorySegment global_work_offset, MemorySegment global_work_size, MemorySegment local_work_size, int num_sync_points_in_wait_list, MemorySegment sync_point_wait_list, MemorySegment sync_point, MemorySegment mutable_handle) {
        var mh$ = clCommandNDRangeKernelKHR$MH();
        try {
            return (int)mh$.invokeExact(command_buffer, command_queue, properties, kernel, work_dim, global_work_offset, global_work_size, local_work_size, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clGetCommandBufferInfoKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$219.const$2,"clGetCommandBufferInfoKHR");
    }
    /**
     * {@snippet :
     * cl_int clGetCommandBufferInfoKHR(cl_command_buffer_khr command_buffer, cl_command_buffer_info_khr param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret);
     * }
     */
    public static int clGetCommandBufferInfoKHR(MemorySegment command_buffer, int param_name, long param_value_size, MemorySegment param_value, MemorySegment param_value_size_ret) {
        var mh$ = clGetCommandBufferInfoKHR$MH();
        try {
            return (int)mh$.invokeExact(command_buffer, param_name, param_value_size, param_value, param_value_size_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned long long cl_platform_command_buffer_capabilities_khr;
     * }
     */
    public static final OfLong cl_platform_command_buffer_capabilities_khr = JAVA_LONG;
    public static MethodHandle clRemapCommandBufferKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$220.const$0,"clRemapCommandBufferKHR");
    }
    /**
     * {@snippet :
     * cl_command_buffer_khr clRemapCommandBufferKHR(cl_command_buffer_khr command_buffer, cl_bool automatic, cl_uint num_queues, const cl_command_queue* queues, cl_uint num_handles, const cl_mutable_command_khr* handles, cl_mutable_command_khr* handles_ret, cl_int* errcode_ret);
     * }
     */
    public static MemorySegment clRemapCommandBufferKHR(MemorySegment command_buffer, int automatic, int num_queues, MemorySegment queues, int num_handles, MemorySegment handles, MemorySegment handles_ret, MemorySegment errcode_ret) {
        var mh$ = clRemapCommandBufferKHR$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(command_buffer, automatic, num_queues, queues, num_handles, handles, handles_ret, errcode_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned int cl_command_buffer_structure_type_khr;
     * }
     */
    public static final OfInt cl_command_buffer_structure_type_khr = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long long cl_mutable_dispatch_fields_khr;
     * }
     */
    public static final OfLong cl_mutable_dispatch_fields_khr = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int cl_mutable_command_info_khr;
     * }
     */
    public static final OfInt cl_mutable_command_info_khr = JAVA_INT;
    public static MethodHandle clUpdateMutableCommandsKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$225.const$0,"clUpdateMutableCommandsKHR");
    }
    /**
     * {@snippet :
     * cl_int clUpdateMutableCommandsKHR(cl_command_buffer_khr command_buffer, const cl_mutable_base_config_khr* mutable_config);
     * }
     */
    public static int clUpdateMutableCommandsKHR(MemorySegment command_buffer, MemorySegment mutable_config) {
        var mh$ = clUpdateMutableCommandsKHR$MH();
        try {
            return (int)mh$.invokeExact(command_buffer, mutable_config);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clGetMutableCommandInfoKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$225.const$1,"clGetMutableCommandInfoKHR");
    }
    /**
     * {@snippet :
     * cl_int clGetMutableCommandInfoKHR(cl_mutable_command_khr command, cl_mutable_command_info_khr param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret);
     * }
     */
    public static int clGetMutableCommandInfoKHR(MemorySegment command, int param_name, long param_value_size, MemorySegment param_value, MemorySegment param_value_size_ret) {
        var mh$ = clGetMutableCommandInfoKHR$MH();
        try {
            return (int)mh$.invokeExact(command, param_name, param_value_size, param_value, param_value_size_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clSetMemObjectDestructorAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$225.const$4,"clSetMemObjectDestructorAPPLE");
    }
    /**
     * {@snippet :
     * cl_int clSetMemObjectDestructorAPPLE(cl_mem memobj, void (*pfn_notify)(cl_mem,void*), void* user_data);
     * }
     */
    public static int clSetMemObjectDestructorAPPLE(MemorySegment memobj, MemorySegment pfn_notify, MemorySegment user_data) {
        var mh$ = clSetMemObjectDestructorAPPLE$MH();
        try {
            return (int)mh$.invokeExact(memobj, pfn_notify, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clLogMessagesToSystemLogAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$226.const$2,"clLogMessagesToSystemLogAPPLE");
    }
    /**
     * {@snippet :
     * void clLogMessagesToSystemLogAPPLE(char* errstr, void* private_info, size_t cb, void* user_data);
     * }
     */
    public static void clLogMessagesToSystemLogAPPLE(MemorySegment errstr, MemorySegment private_info, long cb, MemorySegment user_data) {
        var mh$ = clLogMessagesToSystemLogAPPLE$MH();
        try {
            mh$.invokeExact(errstr, private_info, cb, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clLogMessagesToStdoutAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$226.const$3,"clLogMessagesToStdoutAPPLE");
    }
    /**
     * {@snippet :
     * void clLogMessagesToStdoutAPPLE(char* errstr, void* private_info, size_t cb, void* user_data);
     * }
     */
    public static void clLogMessagesToStdoutAPPLE(MemorySegment errstr, MemorySegment private_info, long cb, MemorySegment user_data) {
        var mh$ = clLogMessagesToStdoutAPPLE$MH();
        try {
            mh$.invokeExact(errstr, private_info, cb, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clLogMessagesToStderrAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$226.const$4,"clLogMessagesToStderrAPPLE");
    }
    /**
     * {@snippet :
     * void clLogMessagesToStderrAPPLE(char* errstr, void* private_info, size_t cb, void* user_data);
     * }
     */
    public static void clLogMessagesToStderrAPPLE(MemorySegment errstr, MemorySegment private_info, long cb, MemorySegment user_data) {
        var mh$ = clLogMessagesToStderrAPPLE$MH();
        try {
            mh$.invokeExact(errstr, private_info, cb, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clIcdGetPlatformIDsKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$227.const$1,"clIcdGetPlatformIDsKHR");
    }
    /**
     * {@snippet :
     * cl_int clIcdGetPlatformIDsKHR(cl_uint num_entries, cl_platform_id* platforms, cl_uint* num_platforms);
     * }
     */
    public static int clIcdGetPlatformIDsKHR(int num_entries, MemorySegment platforms, MemorySegment num_platforms) {
        var mh$ = clIcdGetPlatformIDsKHR$MH();
        try {
            return (int)mh$.invokeExact(num_entries, platforms, num_platforms);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clCreateProgramWithILKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$227.const$4,"clCreateProgramWithILKHR");
    }
    /**
     * {@snippet :
     * cl_program clCreateProgramWithILKHR(cl_context context, void* il, size_t length, cl_int* errcode_ret);
     * }
     */
    public static MemorySegment clCreateProgramWithILKHR(MemorySegment context, MemorySegment il, long length, MemorySegment errcode_ret) {
        var mh$ = clCreateProgramWithILKHR$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(context, il, length, errcode_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned long long cl_device_terminate_capability_khr;
     * }
     */
    public static final OfLong cl_device_terminate_capability_khr = JAVA_LONG;
    public static MethodHandle clTerminateContextKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$228.const$0,"clTerminateContextKHR");
    }
    /**
     * {@snippet :
     * cl_int clTerminateContextKHR(cl_context context);
     * }
     */
    public static int clTerminateContextKHR(MemorySegment context) {
        var mh$ = clTerminateContextKHR$MH();
        try {
            return (int)mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned long long cl_queue_properties_khr;
     * }
     */
    public static final OfLong cl_queue_properties_khr = JAVA_LONG;
    public static MethodHandle clCreateCommandQueueWithPropertiesKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$228.const$3,"clCreateCommandQueueWithPropertiesKHR");
    }
    /**
     * {@snippet :
     * cl_command_queue clCreateCommandQueueWithPropertiesKHR(cl_context context, cl_device_id device, const cl_queue_properties_khr* properties, cl_int* errcode_ret);
     * }
     */
    public static MemorySegment clCreateCommandQueueWithPropertiesKHR(MemorySegment context, MemorySegment device, MemorySegment properties, MemorySegment errcode_ret) {
        var mh$ = clCreateCommandQueueWithPropertiesKHR$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(context, device, properties, errcode_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned long long cl_device_partition_property_ext;
     * }
     */
    public static final OfLong cl_device_partition_property_ext = JAVA_LONG;
    public static MethodHandle clReleaseDeviceEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$229.const$2,"clReleaseDeviceEXT");
    }
    /**
     * {@snippet :
     * cl_int clReleaseDeviceEXT(cl_device_id device);
     * }
     */
    public static int clReleaseDeviceEXT(MemorySegment device) {
        var mh$ = clReleaseDeviceEXT$MH();
        try {
            return (int)mh$.invokeExact(device);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clRetainDeviceEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$229.const$3,"clRetainDeviceEXT");
    }
    /**
     * {@snippet :
     * cl_int clRetainDeviceEXT(cl_device_id device);
     * }
     */
    public static int clRetainDeviceEXT(MemorySegment device) {
        var mh$ = clRetainDeviceEXT$MH();
        try {
            return (int)mh$.invokeExact(device);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clCreateSubDevicesEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$229.const$4,"clCreateSubDevicesEXT");
    }
    /**
     * {@snippet :
     * cl_int clCreateSubDevicesEXT(cl_device_id in_device, const cl_device_partition_property_ext* properties, cl_uint num_entries, cl_device_id* out_devices, cl_uint* num_devices);
     * }
     */
    public static int clCreateSubDevicesEXT(MemorySegment in_device, MemorySegment properties, int num_entries, MemorySegment out_devices, MemorySegment num_devices) {
        var mh$ = clCreateSubDevicesEXT$MH();
        try {
            return (int)mh$.invokeExact(in_device, properties, num_entries, out_devices, num_devices);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned long long cl_mem_migration_flags_ext;
     * }
     */
    public static final OfLong cl_mem_migration_flags_ext = JAVA_LONG;
    public static MethodHandle clEnqueueMigrateMemObjectEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$230.const$1,"clEnqueueMigrateMemObjectEXT");
    }
    /**
     * {@snippet :
     * cl_int clEnqueueMigrateMemObjectEXT(cl_command_queue command_queue, cl_uint num_mem_objects, const cl_mem* mem_objects, cl_mem_migration_flags_ext flags, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event);
     * }
     */
    public static int clEnqueueMigrateMemObjectEXT(MemorySegment command_queue, int num_mem_objects, MemorySegment mem_objects, long flags, int num_events_in_wait_list, MemorySegment event_wait_list, MemorySegment event) {
        var mh$ = clEnqueueMigrateMemObjectEXT$MH();
        try {
            return (int)mh$.invokeExact(command_queue, num_mem_objects, mem_objects, flags, num_events_in_wait_list, event_wait_list, event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned int cl_image_pitch_info_qcom;
     * }
     */
    public static final OfInt cl_image_pitch_info_qcom = JAVA_INT;
    public static MethodHandle clGetDeviceImageInfoQCOM$MH() {
        return RuntimeHelper.requireNonNull(constants$231.const$2,"clGetDeviceImageInfoQCOM");
    }
    /**
     * {@snippet :
     * cl_int clGetDeviceImageInfoQCOM(cl_device_id device, size_t image_width, size_t image_height, const cl_image_format* image_format, cl_image_pitch_info_qcom param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret);
     * }
     */
    public static int clGetDeviceImageInfoQCOM(MemorySegment device, long image_width, long image_height, MemorySegment image_format, int param_name, long param_value_size, MemorySegment param_value, MemorySegment param_value_size_ret) {
        var mh$ = clGetDeviceImageInfoQCOM$MH();
        try {
            return (int)mh$.invokeExact(device, image_width, image_height, image_format, param_name, param_value_size, param_value, param_value_size_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clEnqueueAcquireGrallocObjectsIMG$MH() {
        return RuntimeHelper.requireNonNull(constants$232.const$4,"clEnqueueAcquireGrallocObjectsIMG");
    }
    /**
     * {@snippet :
     * cl_int clEnqueueAcquireGrallocObjectsIMG(cl_command_queue command_queue, cl_uint num_objects, const cl_mem* mem_objects, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event);
     * }
     */
    public static int clEnqueueAcquireGrallocObjectsIMG(MemorySegment command_queue, int num_objects, MemorySegment mem_objects, int num_events_in_wait_list, MemorySegment event_wait_list, MemorySegment event) {
        var mh$ = clEnqueueAcquireGrallocObjectsIMG$MH();
        try {
            return (int)mh$.invokeExact(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clEnqueueReleaseGrallocObjectsIMG$MH() {
        return RuntimeHelper.requireNonNull(constants$232.const$5,"clEnqueueReleaseGrallocObjectsIMG");
    }
    /**
     * {@snippet :
     * cl_int clEnqueueReleaseGrallocObjectsIMG(cl_command_queue command_queue, cl_uint num_objects, const cl_mem* mem_objects, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event);
     * }
     */
    public static int clEnqueueReleaseGrallocObjectsIMG(MemorySegment command_queue, int num_objects, MemorySegment mem_objects, int num_events_in_wait_list, MemorySegment event_wait_list, MemorySegment event) {
        var mh$ = clEnqueueReleaseGrallocObjectsIMG$MH();
        try {
            return (int)mh$.invokeExact(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned int cl_mipmap_filter_mode_img;
     * }
     */
    public static final OfInt cl_mipmap_filter_mode_img = JAVA_INT;
    public static MethodHandle clEnqueueGenerateMipmapIMG$MH() {
        return RuntimeHelper.requireNonNull(constants$233.const$3,"clEnqueueGenerateMipmapIMG");
    }
    /**
     * {@snippet :
     * cl_int clEnqueueGenerateMipmapIMG(cl_command_queue command_queue, cl_mem src_image, cl_mem dst_image, cl_mipmap_filter_mode_img mipmap_filter_mode, const size_t* array_region, const size_t* mip_region, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event);
     * }
     */
    public static int clEnqueueGenerateMipmapIMG(MemorySegment command_queue, MemorySegment src_image, MemorySegment dst_image, int mipmap_filter_mode, MemorySegment array_region, MemorySegment mip_region, int num_events_in_wait_list, MemorySegment event_wait_list, MemorySegment event) {
        var mh$ = clEnqueueGenerateMipmapIMG$MH();
        try {
            return (int)mh$.invokeExact(command_queue, src_image, dst_image, mipmap_filter_mode, array_region, mip_region, num_events_in_wait_list, event_wait_list, event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clGetKernelSubGroupInfoKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$234.const$0,"clGetKernelSubGroupInfoKHR");
    }
    /**
     * {@snippet :
     * cl_int clGetKernelSubGroupInfoKHR(cl_kernel in_kernel, cl_device_id in_device, cl_kernel_sub_group_info param_name, size_t input_value_size, void* input_value, size_t param_value_size, void* param_value, size_t* param_value_size_ret);
     * }
     */
    public static int clGetKernelSubGroupInfoKHR(MemorySegment in_kernel, MemorySegment in_device, int param_name, long input_value_size, MemorySegment input_value, long param_value_size, MemorySegment param_value, MemorySegment param_value_size_ret) {
        var mh$ = clGetKernelSubGroupInfoKHR$MH();
        try {
            return (int)mh$.invokeExact(in_kernel, in_device, param_name, input_value_size, input_value, param_value_size, param_value, param_value_size_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned int cl_queue_priority_khr;
     * }
     */
    public static final OfInt cl_queue_priority_khr = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int cl_queue_throttle_khr;
     * }
     */
    public static final OfInt cl_queue_throttle_khr = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int cl_version_khr;
     * }
     */
    public static final OfInt cl_version_khr = JAVA_INT;
    public static MethodHandle clGetKernelSuggestedLocalWorkSizeKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$235.const$3,"clGetKernelSuggestedLocalWorkSizeKHR");
    }
    /**
     * {@snippet :
     * cl_int clGetKernelSuggestedLocalWorkSizeKHR(cl_command_queue command_queue, cl_kernel kernel, cl_uint work_dim, const size_t* global_work_offset, const size_t* global_work_size, size_t* suggested_local_work_size);
     * }
     */
    public static int clGetKernelSuggestedLocalWorkSizeKHR(MemorySegment command_queue, MemorySegment kernel, int work_dim, MemorySegment global_work_offset, MemorySegment global_work_size, MemorySegment suggested_local_work_size) {
        var mh$ = clGetKernelSuggestedLocalWorkSizeKHR$MH();
        try {
            return (int)mh$.invokeExact(command_queue, kernel, work_dim, global_work_offset, global_work_size, suggested_local_work_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned long long cl_device_integer_dot_product_capabilities_khr;
     * }
     */
    public static final OfLong cl_device_integer_dot_product_capabilities_khr = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int cl_external_memory_handle_type_khr;
     * }
     */
    public static final OfInt cl_external_memory_handle_type_khr = JAVA_INT;
    public static MethodHandle clEnqueueAcquireExternalMemObjectsKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$237.const$1,"clEnqueueAcquireExternalMemObjectsKHR");
    }
    /**
     * {@snippet :
     * cl_int clEnqueueAcquireExternalMemObjectsKHR(cl_command_queue command_queue, cl_uint num_mem_objects, const cl_mem* mem_objects, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event);
     * }
     */
    public static int clEnqueueAcquireExternalMemObjectsKHR(MemorySegment command_queue, int num_mem_objects, MemorySegment mem_objects, int num_events_in_wait_list, MemorySegment event_wait_list, MemorySegment event) {
        var mh$ = clEnqueueAcquireExternalMemObjectsKHR$MH();
        try {
            return (int)mh$.invokeExact(command_queue, num_mem_objects, mem_objects, num_events_in_wait_list, event_wait_list, event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clEnqueueReleaseExternalMemObjectsKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$237.const$2,"clEnqueueReleaseExternalMemObjectsKHR");
    }
    /**
     * {@snippet :
     * cl_int clEnqueueReleaseExternalMemObjectsKHR(cl_command_queue command_queue, cl_uint num_mem_objects, const cl_mem* mem_objects, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event);
     * }
     */
    public static int clEnqueueReleaseExternalMemObjectsKHR(MemorySegment command_queue, int num_mem_objects, MemorySegment mem_objects, int num_events_in_wait_list, MemorySegment event_wait_list, MemorySegment event) {
        var mh$ = clEnqueueReleaseExternalMemObjectsKHR$MH();
        try {
            return (int)mh$.invokeExact(command_queue, num_mem_objects, mem_objects, num_events_in_wait_list, event_wait_list, event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _cl_semaphore_khr* cl_semaphore_khr;
     * }
     */
    public static final AddressLayout cl_semaphore_khr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef unsigned int cl_external_semaphore_handle_type_khr;
     * }
     */
    public static final OfInt cl_external_semaphore_handle_type_khr = JAVA_INT;
    public static MethodHandle clGetSemaphoreHandleForTypeKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$237.const$5,"clGetSemaphoreHandleForTypeKHR");
    }
    /**
     * {@snippet :
     * cl_int clGetSemaphoreHandleForTypeKHR(cl_semaphore_khr sema_object, cl_device_id device, cl_external_semaphore_handle_type_khr handle_type, size_t handle_size, void* handle_ptr, size_t* handle_size_ret);
     * }
     */
    public static int clGetSemaphoreHandleForTypeKHR(MemorySegment sema_object, MemorySegment device, int handle_type, long handle_size, MemorySegment handle_ptr, MemorySegment handle_size_ret) {
        var mh$ = clGetSemaphoreHandleForTypeKHR$MH();
        try {
            return (int)mh$.invokeExact(sema_object, device, handle_type, handle_size, handle_ptr, handle_size_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned long long cl_semaphore_properties_khr;
     * }
     */
    public static final OfLong cl_semaphore_properties_khr = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int cl_semaphore_info_khr;
     * }
     */
    public static final OfInt cl_semaphore_info_khr = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int cl_semaphore_type_khr;
     * }
     */
    public static final OfInt cl_semaphore_type_khr = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long long cl_semaphore_payload_khr;
     * }
     */
    public static final OfLong cl_semaphore_payload_khr = JAVA_LONG;
    public static MethodHandle clCreateSemaphoreWithPropertiesKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$239.const$2,"clCreateSemaphoreWithPropertiesKHR");
    }
    /**
     * {@snippet :
     * cl_semaphore_khr clCreateSemaphoreWithPropertiesKHR(cl_context context, const cl_semaphore_properties_khr* sema_props, cl_int* errcode_ret);
     * }
     */
    public static MemorySegment clCreateSemaphoreWithPropertiesKHR(MemorySegment context, MemorySegment sema_props, MemorySegment errcode_ret) {
        var mh$ = clCreateSemaphoreWithPropertiesKHR$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(context, sema_props, errcode_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clEnqueueWaitSemaphoresKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$239.const$3,"clEnqueueWaitSemaphoresKHR");
    }
    /**
     * {@snippet :
     * cl_int clEnqueueWaitSemaphoresKHR(cl_command_queue command_queue, cl_uint num_sema_objects, const cl_semaphore_khr* sema_objects, const cl_semaphore_payload_khr* sema_payload_list, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event);
     * }
     */
    public static int clEnqueueWaitSemaphoresKHR(MemorySegment command_queue, int num_sema_objects, MemorySegment sema_objects, MemorySegment sema_payload_list, int num_events_in_wait_list, MemorySegment event_wait_list, MemorySegment event) {
        var mh$ = clEnqueueWaitSemaphoresKHR$MH();
        try {
            return (int)mh$.invokeExact(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, event_wait_list, event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clEnqueueSignalSemaphoresKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$239.const$4,"clEnqueueSignalSemaphoresKHR");
    }
    /**
     * {@snippet :
     * cl_int clEnqueueSignalSemaphoresKHR(cl_command_queue command_queue, cl_uint num_sema_objects, const cl_semaphore_khr* sema_objects, const cl_semaphore_payload_khr* sema_payload_list, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event);
     * }
     */
    public static int clEnqueueSignalSemaphoresKHR(MemorySegment command_queue, int num_sema_objects, MemorySegment sema_objects, MemorySegment sema_payload_list, int num_events_in_wait_list, MemorySegment event_wait_list, MemorySegment event) {
        var mh$ = clEnqueueSignalSemaphoresKHR$MH();
        try {
            return (int)mh$.invokeExact(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, event_wait_list, event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clGetSemaphoreInfoKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$239.const$5,"clGetSemaphoreInfoKHR");
    }
    /**
     * {@snippet :
     * cl_int clGetSemaphoreInfoKHR(cl_semaphore_khr sema_object, cl_semaphore_info_khr param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret);
     * }
     */
    public static int clGetSemaphoreInfoKHR(MemorySegment sema_object, int param_name, long param_value_size, MemorySegment param_value, MemorySegment param_value_size_ret) {
        var mh$ = clGetSemaphoreInfoKHR$MH();
        try {
            return (int)mh$.invokeExact(sema_object, param_name, param_value_size, param_value, param_value_size_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clReleaseSemaphoreKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$240.const$0,"clReleaseSemaphoreKHR");
    }
    /**
     * {@snippet :
     * cl_int clReleaseSemaphoreKHR(cl_semaphore_khr sema_object);
     * }
     */
    public static int clReleaseSemaphoreKHR(MemorySegment sema_object) {
        var mh$ = clReleaseSemaphoreKHR$MH();
        try {
            return (int)mh$.invokeExact(sema_object);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clRetainSemaphoreKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$240.const$1,"clRetainSemaphoreKHR");
    }
    /**
     * {@snippet :
     * cl_int clRetainSemaphoreKHR(cl_semaphore_khr sema_object);
     * }
     */
    public static int clRetainSemaphoreKHR(MemorySegment sema_object) {
        var mh$ = clRetainSemaphoreKHR$MH();
        try {
            return (int)mh$.invokeExact(sema_object);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef long long cl_import_properties_arm;
     * }
     */
    public static final OfLong cl_import_properties_arm = JAVA_LONG;
    public static MethodHandle clImportMemoryARM$MH() {
        return RuntimeHelper.requireNonNull(constants$240.const$5,"clImportMemoryARM");
    }
    /**
     * {@snippet :
     * cl_mem clImportMemoryARM(cl_context context, cl_mem_flags flags, const cl_import_properties_arm* properties, void* memory, size_t size, cl_int* errcode_ret);
     * }
     */
    public static MemorySegment clImportMemoryARM(MemorySegment context, long flags, MemorySegment properties, MemorySegment memory, long size, MemorySegment errcode_ret) {
        var mh$ = clImportMemoryARM$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(context, flags, properties, memory, size, errcode_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned long long cl_svm_mem_flags_arm;
     * }
     */
    public static final OfLong cl_svm_mem_flags_arm = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int cl_kernel_exec_info_arm;
     * }
     */
    public static final OfInt cl_kernel_exec_info_arm = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long long cl_device_svm_capabilities_arm;
     * }
     */
    public static final OfLong cl_device_svm_capabilities_arm = JAVA_LONG;
    public static MethodHandle clSVMAllocARM$MH() {
        return RuntimeHelper.requireNonNull(constants$243.const$4,"clSVMAllocARM");
    }
    /**
     * {@snippet :
     * void* clSVMAllocARM(cl_context context, cl_svm_mem_flags_arm flags, size_t size, cl_uint alignment);
     * }
     */
    public static MemorySegment clSVMAllocARM(MemorySegment context, long flags, long size, int alignment) {
        var mh$ = clSVMAllocARM$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(context, flags, size, alignment);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clSVMFreeARM$MH() {
        return RuntimeHelper.requireNonNull(constants$243.const$5,"clSVMFreeARM");
    }
    /**
     * {@snippet :
     * void clSVMFreeARM(cl_context context, void* svm_pointer);
     * }
     */
    public static void clSVMFreeARM(MemorySegment context, MemorySegment svm_pointer) {
        var mh$ = clSVMFreeARM$MH();
        try {
            mh$.invokeExact(context, svm_pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clEnqueueSVMFreeARM$MH() {
        return RuntimeHelper.requireNonNull(constants$244.const$1,"clEnqueueSVMFreeARM");
    }
    /**
     * {@snippet :
     * cl_int clEnqueueSVMFreeARM(cl_command_queue command_queue, cl_uint num_svm_pointers, void* svm_pointers[], void (*pfn_free_func)(cl_command_queue,cl_uint,void**,void*), void* user_data, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event);
     * }
     */
    public static int clEnqueueSVMFreeARM(MemorySegment command_queue, int num_svm_pointers, MemorySegment svm_pointers, MemorySegment pfn_free_func, MemorySegment user_data, int num_events_in_wait_list, MemorySegment event_wait_list, MemorySegment event) {
        var mh$ = clEnqueueSVMFreeARM$MH();
        try {
            return (int)mh$.invokeExact(command_queue, num_svm_pointers, svm_pointers, pfn_free_func, user_data, num_events_in_wait_list, event_wait_list, event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clEnqueueSVMMemcpyARM$MH() {
        return RuntimeHelper.requireNonNull(constants$244.const$2,"clEnqueueSVMMemcpyARM");
    }
    /**
     * {@snippet :
     * cl_int clEnqueueSVMMemcpyARM(cl_command_queue command_queue, cl_bool blocking_copy, void* dst_ptr, void* src_ptr, size_t size, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event);
     * }
     */
    public static int clEnqueueSVMMemcpyARM(MemorySegment command_queue, int blocking_copy, MemorySegment dst_ptr, MemorySegment src_ptr, long size, int num_events_in_wait_list, MemorySegment event_wait_list, MemorySegment event) {
        var mh$ = clEnqueueSVMMemcpyARM$MH();
        try {
            return (int)mh$.invokeExact(command_queue, blocking_copy, dst_ptr, src_ptr, size, num_events_in_wait_list, event_wait_list, event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clEnqueueSVMMemFillARM$MH() {
        return RuntimeHelper.requireNonNull(constants$244.const$3,"clEnqueueSVMMemFillARM");
    }
    /**
     * {@snippet :
     * cl_int clEnqueueSVMMemFillARM(cl_command_queue command_queue, void* svm_ptr, void* pattern, size_t pattern_size, size_t size, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event);
     * }
     */
    public static int clEnqueueSVMMemFillARM(MemorySegment command_queue, MemorySegment svm_ptr, MemorySegment pattern, long pattern_size, long size, int num_events_in_wait_list, MemorySegment event_wait_list, MemorySegment event) {
        var mh$ = clEnqueueSVMMemFillARM$MH();
        try {
            return (int)mh$.invokeExact(command_queue, svm_ptr, pattern, pattern_size, size, num_events_in_wait_list, event_wait_list, event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clEnqueueSVMMapARM$MH() {
        return RuntimeHelper.requireNonNull(constants$244.const$4,"clEnqueueSVMMapARM");
    }
    /**
     * {@snippet :
     * cl_int clEnqueueSVMMapARM(cl_command_queue command_queue, cl_bool blocking_map, cl_map_flags flags, void* svm_ptr, size_t size, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event);
     * }
     */
    public static int clEnqueueSVMMapARM(MemorySegment command_queue, int blocking_map, long flags, MemorySegment svm_ptr, long size, int num_events_in_wait_list, MemorySegment event_wait_list, MemorySegment event) {
        var mh$ = clEnqueueSVMMapARM$MH();
        try {
            return (int)mh$.invokeExact(command_queue, blocking_map, flags, svm_ptr, size, num_events_in_wait_list, event_wait_list, event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clEnqueueSVMUnmapARM$MH() {
        return RuntimeHelper.requireNonNull(constants$244.const$5,"clEnqueueSVMUnmapARM");
    }
    /**
     * {@snippet :
     * cl_int clEnqueueSVMUnmapARM(cl_command_queue command_queue, void* svm_ptr, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event);
     * }
     */
    public static int clEnqueueSVMUnmapARM(MemorySegment command_queue, MemorySegment svm_ptr, int num_events_in_wait_list, MemorySegment event_wait_list, MemorySegment event) {
        var mh$ = clEnqueueSVMUnmapARM$MH();
        try {
            return (int)mh$.invokeExact(command_queue, svm_ptr, num_events_in_wait_list, event_wait_list, event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clSetKernelArgSVMPointerARM$MH() {
        return RuntimeHelper.requireNonNull(constants$245.const$0,"clSetKernelArgSVMPointerARM");
    }
    /**
     * {@snippet :
     * cl_int clSetKernelArgSVMPointerARM(cl_kernel kernel, cl_uint arg_index, void* arg_value);
     * }
     */
    public static int clSetKernelArgSVMPointerARM(MemorySegment kernel, int arg_index, MemorySegment arg_value) {
        var mh$ = clSetKernelArgSVMPointerARM$MH();
        try {
            return (int)mh$.invokeExact(kernel, arg_index, arg_value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clSetKernelExecInfoARM$MH() {
        return RuntimeHelper.requireNonNull(constants$245.const$1,"clSetKernelExecInfoARM");
    }
    /**
     * {@snippet :
     * cl_int clSetKernelExecInfoARM(cl_kernel kernel, cl_kernel_exec_info_arm param_name, size_t param_value_size, void* param_value);
     * }
     */
    public static int clSetKernelExecInfoARM(MemorySegment kernel, int param_name, long param_value_size, MemorySegment param_value) {
        var mh$ = clSetKernelExecInfoARM$MH();
        try {
            return (int)mh$.invokeExact(kernel, param_name, param_value_size, param_value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned long long cl_device_scheduling_controls_capabilities_arm;
     * }
     */
    public static final OfLong cl_device_scheduling_controls_capabilities_arm = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long cl_device_controlled_termination_capabilities_arm;
     * }
     */
    public static final OfLong cl_device_controlled_termination_capabilities_arm = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long cl_device_feature_capabilities_intel;
     * }
     */
    public static final OfLong cl_device_feature_capabilities_intel = JAVA_LONG;
    /**
     * {@snippet :
     * typedef struct _cl_accelerator_intel* cl_accelerator_intel;
     * }
     */
    public static final AddressLayout cl_accelerator_intel = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef unsigned int cl_accelerator_type_intel;
     * }
     */
    public static final OfInt cl_accelerator_type_intel = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int cl_accelerator_info_intel;
     * }
     */
    public static final OfInt cl_accelerator_info_intel = JAVA_INT;
    public static MethodHandle clCreateAcceleratorINTEL$MH() {
        return RuntimeHelper.requireNonNull(constants$246.const$2,"clCreateAcceleratorINTEL");
    }
    /**
     * {@snippet :
     * cl_accelerator_intel clCreateAcceleratorINTEL(cl_context context, cl_accelerator_type_intel accelerator_type, size_t descriptor_size, void* descriptor, cl_int* errcode_ret);
     * }
     */
    public static MemorySegment clCreateAcceleratorINTEL(MemorySegment context, int accelerator_type, long descriptor_size, MemorySegment descriptor, MemorySegment errcode_ret) {
        var mh$ = clCreateAcceleratorINTEL$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(context, accelerator_type, descriptor_size, descriptor, errcode_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clGetAcceleratorInfoINTEL$MH() {
        return RuntimeHelper.requireNonNull(constants$246.const$3,"clGetAcceleratorInfoINTEL");
    }
    /**
     * {@snippet :
     * cl_int clGetAcceleratorInfoINTEL(cl_accelerator_intel accelerator, cl_accelerator_info_intel param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret);
     * }
     */
    public static int clGetAcceleratorInfoINTEL(MemorySegment accelerator, int param_name, long param_value_size, MemorySegment param_value, MemorySegment param_value_size_ret) {
        var mh$ = clGetAcceleratorInfoINTEL$MH();
        try {
            return (int)mh$.invokeExact(accelerator, param_name, param_value_size, param_value, param_value_size_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clRetainAcceleratorINTEL$MH() {
        return RuntimeHelper.requireNonNull(constants$246.const$4,"clRetainAcceleratorINTEL");
    }
    /**
     * {@snippet :
     * cl_int clRetainAcceleratorINTEL(cl_accelerator_intel accelerator);
     * }
     */
    public static int clRetainAcceleratorINTEL(MemorySegment accelerator) {
        var mh$ = clRetainAcceleratorINTEL$MH();
        try {
            return (int)mh$.invokeExact(accelerator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clReleaseAcceleratorINTEL$MH() {
        return RuntimeHelper.requireNonNull(constants$246.const$5,"clReleaseAcceleratorINTEL");
    }
    /**
     * {@snippet :
     * cl_int clReleaseAcceleratorINTEL(cl_accelerator_intel accelerator);
     * }
     */
    public static int clReleaseAcceleratorINTEL(MemorySegment accelerator) {
        var mh$ = clReleaseAcceleratorINTEL$MH();
        try {
            return (int)mh$.invokeExact(accelerator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned int cl_diagnostics_verbose_level;
     * }
     */
    public static final OfInt cl_diagnostics_verbose_level = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long long cl_device_unified_shared_memory_capabilities_intel;
     * }
     */
    public static final OfLong cl_device_unified_shared_memory_capabilities_intel = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long cl_mem_properties_intel;
     * }
     */
    public static final OfLong cl_mem_properties_intel = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long cl_mem_alloc_flags_intel;
     * }
     */
    public static final OfLong cl_mem_alloc_flags_intel = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int cl_mem_info_intel;
     * }
     */
    public static final OfInt cl_mem_info_intel = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int cl_unified_shared_memory_type_intel;
     * }
     */
    public static final OfInt cl_unified_shared_memory_type_intel = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int cl_mem_advice_intel;
     * }
     */
    public static final OfInt cl_mem_advice_intel = JAVA_INT;
    public static MethodHandle clHostMemAllocINTEL$MH() {
        return RuntimeHelper.requireNonNull(constants$250.const$3,"clHostMemAllocINTEL");
    }
    /**
     * {@snippet :
     * void* clHostMemAllocINTEL(cl_context context, const cl_mem_properties_intel* properties, size_t size, cl_uint alignment, cl_int* errcode_ret);
     * }
     */
    public static MemorySegment clHostMemAllocINTEL(MemorySegment context, MemorySegment properties, long size, int alignment, MemorySegment errcode_ret) {
        var mh$ = clHostMemAllocINTEL$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(context, properties, size, alignment, errcode_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clDeviceMemAllocINTEL$MH() {
        return RuntimeHelper.requireNonNull(constants$250.const$4,"clDeviceMemAllocINTEL");
    }
    /**
     * {@snippet :
     * void* clDeviceMemAllocINTEL(cl_context context, cl_device_id device, const cl_mem_properties_intel* properties, size_t size, cl_uint alignment, cl_int* errcode_ret);
     * }
     */
    public static MemorySegment clDeviceMemAllocINTEL(MemorySegment context, MemorySegment device, MemorySegment properties, long size, int alignment, MemorySegment errcode_ret) {
        var mh$ = clDeviceMemAllocINTEL$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(context, device, properties, size, alignment, errcode_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clSharedMemAllocINTEL$MH() {
        return RuntimeHelper.requireNonNull(constants$250.const$5,"clSharedMemAllocINTEL");
    }
    /**
     * {@snippet :
     * void* clSharedMemAllocINTEL(cl_context context, cl_device_id device, const cl_mem_properties_intel* properties, size_t size, cl_uint alignment, cl_int* errcode_ret);
     * }
     */
    public static MemorySegment clSharedMemAllocINTEL(MemorySegment context, MemorySegment device, MemorySegment properties, long size, int alignment, MemorySegment errcode_ret) {
        var mh$ = clSharedMemAllocINTEL$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(context, device, properties, size, alignment, errcode_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clMemFreeINTEL$MH() {
        return RuntimeHelper.requireNonNull(constants$251.const$0,"clMemFreeINTEL");
    }
    /**
     * {@snippet :
     * cl_int clMemFreeINTEL(cl_context context, void* ptr);
     * }
     */
    public static int clMemFreeINTEL(MemorySegment context, MemorySegment ptr) {
        var mh$ = clMemFreeINTEL$MH();
        try {
            return (int)mh$.invokeExact(context, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clMemBlockingFreeINTEL$MH() {
        return RuntimeHelper.requireNonNull(constants$251.const$1,"clMemBlockingFreeINTEL");
    }
    /**
     * {@snippet :
     * cl_int clMemBlockingFreeINTEL(cl_context context, void* ptr);
     * }
     */
    public static int clMemBlockingFreeINTEL(MemorySegment context, MemorySegment ptr) {
        var mh$ = clMemBlockingFreeINTEL$MH();
        try {
            return (int)mh$.invokeExact(context, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clGetMemAllocInfoINTEL$MH() {
        return RuntimeHelper.requireNonNull(constants$251.const$2,"clGetMemAllocInfoINTEL");
    }
    /**
     * {@snippet :
     * cl_int clGetMemAllocInfoINTEL(cl_context context, void* ptr, cl_mem_info_intel param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret);
     * }
     */
    public static int clGetMemAllocInfoINTEL(MemorySegment context, MemorySegment ptr, int param_name, long param_value_size, MemorySegment param_value, MemorySegment param_value_size_ret) {
        var mh$ = clGetMemAllocInfoINTEL$MH();
        try {
            return (int)mh$.invokeExact(context, ptr, param_name, param_value_size, param_value, param_value_size_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clSetKernelArgMemPointerINTEL$MH() {
        return RuntimeHelper.requireNonNull(constants$251.const$3,"clSetKernelArgMemPointerINTEL");
    }
    /**
     * {@snippet :
     * cl_int clSetKernelArgMemPointerINTEL(cl_kernel kernel, cl_uint arg_index, void* arg_value);
     * }
     */
    public static int clSetKernelArgMemPointerINTEL(MemorySegment kernel, int arg_index, MemorySegment arg_value) {
        var mh$ = clSetKernelArgMemPointerINTEL$MH();
        try {
            return (int)mh$.invokeExact(kernel, arg_index, arg_value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clEnqueueMemFillINTEL$MH() {
        return RuntimeHelper.requireNonNull(constants$251.const$4,"clEnqueueMemFillINTEL");
    }
    /**
     * {@snippet :
     * cl_int clEnqueueMemFillINTEL(cl_command_queue command_queue, void* dst_ptr, void* pattern, size_t pattern_size, size_t size, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event);
     * }
     */
    public static int clEnqueueMemFillINTEL(MemorySegment command_queue, MemorySegment dst_ptr, MemorySegment pattern, long pattern_size, long size, int num_events_in_wait_list, MemorySegment event_wait_list, MemorySegment event) {
        var mh$ = clEnqueueMemFillINTEL$MH();
        try {
            return (int)mh$.invokeExact(command_queue, dst_ptr, pattern, pattern_size, size, num_events_in_wait_list, event_wait_list, event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clEnqueueMemcpyINTEL$MH() {
        return RuntimeHelper.requireNonNull(constants$251.const$5,"clEnqueueMemcpyINTEL");
    }
    /**
     * {@snippet :
     * cl_int clEnqueueMemcpyINTEL(cl_command_queue command_queue, cl_bool blocking, void* dst_ptr, void* src_ptr, size_t size, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event);
     * }
     */
    public static int clEnqueueMemcpyINTEL(MemorySegment command_queue, int blocking, MemorySegment dst_ptr, MemorySegment src_ptr, long size, int num_events_in_wait_list, MemorySegment event_wait_list, MemorySegment event) {
        var mh$ = clEnqueueMemcpyINTEL$MH();
        try {
            return (int)mh$.invokeExact(command_queue, blocking, dst_ptr, src_ptr, size, num_events_in_wait_list, event_wait_list, event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clEnqueueMemAdviseINTEL$MH() {
        return RuntimeHelper.requireNonNull(constants$252.const$0,"clEnqueueMemAdviseINTEL");
    }
    /**
     * {@snippet :
     * cl_int clEnqueueMemAdviseINTEL(cl_command_queue command_queue, void* ptr, size_t size, cl_mem_advice_intel advice, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event);
     * }
     */
    public static int clEnqueueMemAdviseINTEL(MemorySegment command_queue, MemorySegment ptr, long size, int advice, int num_events_in_wait_list, MemorySegment event_wait_list, MemorySegment event) {
        var mh$ = clEnqueueMemAdviseINTEL$MH();
        try {
            return (int)mh$.invokeExact(command_queue, ptr, size, advice, num_events_in_wait_list, event_wait_list, event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clEnqueueMigrateMemINTEL$MH() {
        return RuntimeHelper.requireNonNull(constants$252.const$4,"clEnqueueMigrateMemINTEL");
    }
    /**
     * {@snippet :
     * cl_int clEnqueueMigrateMemINTEL(cl_command_queue command_queue, void* ptr, size_t size, cl_mem_migration_flags flags, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event);
     * }
     */
    public static int clEnqueueMigrateMemINTEL(MemorySegment command_queue, MemorySegment ptr, long size, long flags, int num_events_in_wait_list, MemorySegment event_wait_list, MemorySegment event) {
        var mh$ = clEnqueueMigrateMemINTEL$MH();
        try {
            return (int)mh$.invokeExact(command_queue, ptr, size, flags, num_events_in_wait_list, event_wait_list, event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clEnqueueMemsetINTEL$MH() {
        return RuntimeHelper.requireNonNull(constants$253.const$2,"clEnqueueMemsetINTEL");
    }
    /**
     * {@snippet :
     * cl_int clEnqueueMemsetINTEL(cl_command_queue command_queue, void* dst_ptr, cl_int value, size_t size, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event);
     * }
     */
    public static int clEnqueueMemsetINTEL(MemorySegment command_queue, MemorySegment dst_ptr, int value, long size, int num_events_in_wait_list, MemorySegment event_wait_list, MemorySegment event) {
        var mh$ = clEnqueueMemsetINTEL$MH();
        try {
            return (int)mh$.invokeExact(command_queue, dst_ptr, value, size, num_events_in_wait_list, event_wait_list, event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clCreateBufferWithPropertiesINTEL$MH() {
        return RuntimeHelper.requireNonNull(constants$253.const$5,"clCreateBufferWithPropertiesINTEL");
    }
    /**
     * {@snippet :
     * cl_mem clCreateBufferWithPropertiesINTEL(cl_context context, const cl_mem_properties_intel* properties, cl_mem_flags flags, size_t size, void* host_ptr, cl_int* errcode_ret);
     * }
     */
    public static MemorySegment clCreateBufferWithPropertiesINTEL(MemorySegment context, MemorySegment properties, long flags, long size, MemorySegment host_ptr, MemorySegment errcode_ret) {
        var mh$ = clCreateBufferWithPropertiesINTEL$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(context, properties, flags, size, host_ptr, errcode_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clEnqueueReadHostPipeINTEL$MH() {
        return RuntimeHelper.requireNonNull(constants$254.const$4,"clEnqueueReadHostPipeINTEL");
    }
    /**
     * {@snippet :
     * cl_int clEnqueueReadHostPipeINTEL(cl_command_queue command_queue, cl_program program, char* pipe_symbol, cl_bool blocking_read, void* ptr, size_t size, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event);
     * }
     */
    public static int clEnqueueReadHostPipeINTEL(MemorySegment command_queue, MemorySegment program, MemorySegment pipe_symbol, int blocking_read, MemorySegment ptr, long size, int num_events_in_wait_list, MemorySegment event_wait_list, MemorySegment event) {
        var mh$ = clEnqueueReadHostPipeINTEL$MH();
        try {
            return (int)mh$.invokeExact(command_queue, program, pipe_symbol, blocking_read, ptr, size, num_events_in_wait_list, event_wait_list, event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clEnqueueWriteHostPipeINTEL$MH() {
        return RuntimeHelper.requireNonNull(constants$254.const$5,"clEnqueueWriteHostPipeINTEL");
    }
    /**
     * {@snippet :
     * cl_int clEnqueueWriteHostPipeINTEL(cl_command_queue command_queue, cl_program program, char* pipe_symbol, cl_bool blocking_write, void* ptr, size_t size, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event);
     * }
     */
    public static int clEnqueueWriteHostPipeINTEL(MemorySegment command_queue, MemorySegment program, MemorySegment pipe_symbol, int blocking_write, MemorySegment ptr, long size, int num_events_in_wait_list, MemorySegment event_wait_list, MemorySegment event) {
        var mh$ = clEnqueueWriteHostPipeINTEL$MH();
        try {
            return (int)mh$.invokeExact(command_queue, program, pipe_symbol, blocking_write, ptr, size, num_events_in_wait_list, event_wait_list, event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned long long cl_command_queue_capabilities_intel;
     * }
     */
    public static final OfLong cl_command_queue_capabilities_intel = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int cl_image_requirements_info_ext;
     * }
     */
    public static final OfInt cl_image_requirements_info_ext = JAVA_INT;
    public static MethodHandle clGetImageRequirementsInfoEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$256.const$1,"clGetImageRequirementsInfoEXT");
    }
    /**
     * {@snippet :
     * cl_int clGetImageRequirementsInfoEXT(cl_context context, const cl_mem_properties* properties, cl_mem_flags flags, const cl_image_format* image_format, const cl_image_desc* image_desc, cl_image_requirements_info_ext param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret);
     * }
     */
    public static int clGetImageRequirementsInfoEXT(MemorySegment context, MemorySegment properties, long flags, MemorySegment image_format, MemorySegment image_desc, int param_name, long param_value_size, MemorySegment param_value, MemorySegment param_value_size_ret) {
        var mh$ = clGetImageRequirementsInfoEXT$MH();
        try {
            return (int)mh$.invokeExact(context, properties, flags, image_format, image_desc, param_name, param_value_size, param_value, param_value_size_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned int cl_icdl_info;
     * }
     */
    public static final OfInt cl_icdl_info = JAVA_INT;
    public static MethodHandle clGetICDLoaderInfoOCLICD$MH() {
        return RuntimeHelper.requireNonNull(constants$256.const$5,"clGetICDLoaderInfoOCLICD");
    }
    /**
     * {@snippet :
     * cl_int clGetICDLoaderInfoOCLICD(cl_icdl_info param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret);
     * }
     */
    public static int clGetICDLoaderInfoOCLICD(int param_name, long param_value_size, MemorySegment param_value, MemorySegment param_value_size_ret) {
        var mh$ = clGetICDLoaderInfoOCLICD$MH();
        try {
            return (int)mh$.invokeExact(param_name, param_value_size, param_value, param_value_size_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned long long cl_device_fp_atomic_capabilities_ext;
     * }
     */
    public static final OfLong cl_device_fp_atomic_capabilities_ext = JAVA_LONG;
    public static MethodHandle clSetContentSizeBufferPoCL$MH() {
        return RuntimeHelper.requireNonNull(constants$257.const$1,"clSetContentSizeBufferPoCL");
    }
    /**
     * {@snippet :
     * cl_int clSetContentSizeBufferPoCL(cl_mem buffer, cl_mem content_size_buffer);
     * }
     */
    public static int clSetContentSizeBufferPoCL(MemorySegment buffer, MemorySegment content_size_buffer) {
        var mh$ = clSetContentSizeBufferPoCL$MH();
        try {
            return (int)mh$.invokeExact(buffer, content_size_buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * #define _VCRUNTIME_DISABLED_WARNINGS 4514
     * }
     */
    public static int _VCRUNTIME_DISABLED_WARNINGS() {
        return (int)4514L;
    }
    /**
     * {@snippet :
     * #define NULL 0
     * }
     */
    public static MemorySegment NULL() {
        return constants$257.const$2;
    }
    /**
     * {@snippet :
     * #define INT8_MIN -128
     * }
     */
    public static int INT8_MIN() {
        return (int)-128L;
    }
    /**
     * {@snippet :
     * #define INT16_MIN -32768
     * }
     */
    public static int INT16_MIN() {
        return (int)-32768L;
    }
    /**
     * {@snippet :
     * #define INT32_MIN -2147483648
     * }
     */
    public static int INT32_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define INT64_MIN -9223372036854775808
     * }
     */
    public static long INT64_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INT8_MAX 127
     * }
     */
    public static byte INT8_MAX() {
        return (byte)127L;
    }
    /**
     * {@snippet :
     * #define INT16_MAX 32767
     * }
     */
    public static short INT16_MAX() {
        return (short)32767L;
    }
    /**
     * {@snippet :
     * #define INT32_MAX 2147483647
     * }
     */
    public static int INT32_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define INT64_MAX 9223372036854775807
     * }
     */
    public static long INT64_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define UINT8_MAX 255
     * }
     */
    public static byte UINT8_MAX() {
        return (byte)255L;
    }
    /**
     * {@snippet :
     * #define UINT16_MAX 65535
     * }
     */
    public static short UINT16_MAX() {
        return (short)65535L;
    }
    /**
     * {@snippet :
     * #define UINT32_MAX 4294967295
     * }
     */
    public static int UINT32_MAX() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define UINT64_MAX -1
     * }
     */
    public static long UINT64_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST8_MIN -128
     * }
     */
    public static int INT_LEAST8_MIN() {
        return (int)-128L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST16_MIN -32768
     * }
     */
    public static int INT_LEAST16_MIN() {
        return (int)-32768L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST32_MIN -2147483648
     * }
     */
    public static int INT_LEAST32_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_LEAST64_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST8_MAX 127
     * }
     */
    public static byte INT_LEAST8_MAX() {
        return (byte)127L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST16_MAX 32767
     * }
     */
    public static short INT_LEAST16_MAX() {
        return (short)32767L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST32_MAX 2147483647
     * }
     */
    public static int INT_LEAST32_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_LEAST64_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define UINT_LEAST8_MAX 255
     * }
     */
    public static byte UINT_LEAST8_MAX() {
        return (byte)255L;
    }
    /**
     * {@snippet :
     * #define UINT_LEAST16_MAX 65535
     * }
     */
    public static short UINT_LEAST16_MAX() {
        return (short)65535L;
    }
    /**
     * {@snippet :
     * #define UINT_LEAST32_MAX 4294967295
     * }
     */
    public static int UINT_LEAST32_MAX() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define UINT_LEAST64_MAX -1
     * }
     */
    public static long UINT_LEAST64_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define INT_FAST8_MIN -128
     * }
     */
    public static int INT_FAST8_MIN() {
        return (int)-128L;
    }
    /**
     * {@snippet :
     * #define INT_FAST16_MIN -2147483648
     * }
     */
    public static int INT_FAST16_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define INT_FAST32_MIN -2147483648
     * }
     */
    public static int INT_FAST32_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define INT_FAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST64_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INT_FAST8_MAX 127
     * }
     */
    public static byte INT_FAST8_MAX() {
        return (byte)127L;
    }
    /**
     * {@snippet :
     * #define INT_FAST16_MAX 2147483647
     * }
     */
    public static int INT_FAST16_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define INT_FAST32_MAX 2147483647
     * }
     */
    public static int INT_FAST32_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define INT_FAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST64_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define UINT_FAST8_MAX 255
     * }
     */
    public static byte UINT_FAST8_MAX() {
        return (byte)255L;
    }
    /**
     * {@snippet :
     * #define UINT_FAST16_MAX 4294967295
     * }
     */
    public static int UINT_FAST16_MAX() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define UINT_FAST32_MAX 4294967295
     * }
     */
    public static int UINT_FAST32_MAX() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define UINT_FAST64_MAX -1
     * }
     */
    public static long UINT_FAST64_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define INTPTR_MIN -9223372036854775808
     * }
     */
    public static long INTPTR_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INTPTR_MAX 9223372036854775807
     * }
     */
    public static long INTPTR_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define UINTPTR_MAX -1
     * }
     */
    public static long UINTPTR_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define INTMAX_MIN -9223372036854775808
     * }
     */
    public static long INTMAX_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INTMAX_MAX 9223372036854775807
     * }
     */
    public static long INTMAX_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define UINTMAX_MAX -1
     * }
     */
    public static long UINTMAX_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define PTRDIFF_MIN -9223372036854775808
     * }
     */
    public static long PTRDIFF_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define PTRDIFF_MAX 9223372036854775807
     * }
     */
    public static long PTRDIFF_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define SIZE_MAX -1
     * }
     */
    public static long SIZE_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define SIG_ATOMIC_MIN -2147483648
     * }
     */
    public static int SIG_ATOMIC_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define SIG_ATOMIC_MAX 2147483647
     * }
     */
    public static int SIG_ATOMIC_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define CL_SCHAR_MIN -128
     * }
     */
    public static int CL_SCHAR_MIN() {
        return (int)-128L;
    }
    /**
     * {@snippet :
     * #define CL_CHAR_MAX 127
     * }
     */
    public static int CL_CHAR_MAX() {
        return (int)127L;
    }
    /**
     * {@snippet :
     * #define CL_CHAR_MIN -128
     * }
     */
    public static int CL_CHAR_MIN() {
        return (int)-128L;
    }
    /**
     * {@snippet :
     * #define CL_SHRT_MIN -32768
     * }
     */
    public static int CL_SHRT_MIN() {
        return (int)-32768L;
    }
    /**
     * {@snippet :
     * #define CL_INT_MIN -2147483648
     * }
     */
    public static int CL_INT_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define CL_UINT_MAX 4294967295
     * }
     */
    public static int CL_UINT_MAX() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define CL_LONG_MAX 9223372036854775807
     * }
     */
    public static long CL_LONG_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define CL_LONG_MIN -9223372036854775808
     * }
     */
    public static long CL_LONG_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define CL_ULONG_MAX -1
     * }
     */
    public static long CL_ULONG_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define CL_FLT_MAX_10_EXP 38
     * }
     */
    public static int CL_FLT_MAX_10_EXP() {
        return (int)38L;
    }
    /**
     * {@snippet :
     * #define CL_FLT_MAX_EXP 128
     * }
     */
    public static int CL_FLT_MAX_EXP() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define CL_FLT_MIN_10_EXP -37
     * }
     */
    public static int CL_FLT_MIN_10_EXP() {
        return (int)-37L;
    }
    /**
     * {@snippet :
     * #define CL_FLT_MIN_EXP -125
     * }
     */
    public static int CL_FLT_MIN_EXP() {
        return (int)-125L;
    }
    /**
     * {@snippet :
     * #define CL_FLT_MAX 3.4028234663852886E38
     * }
     */
    public static float CL_FLT_MAX() {
        return 3.4028234663852886E38f;
    }
    /**
     * {@snippet :
     * #define CL_FLT_MIN 1.1754943508222875E-38
     * }
     */
    public static float CL_FLT_MIN() {
        return 1.1754943508222875E-38f;
    }
    /**
     * {@snippet :
     * #define CL_FLT_EPSILON 1.1920928955078125E-7
     * }
     */
    public static float CL_FLT_EPSILON() {
        return 1.1920928955078125E-7f;
    }
    /**
     * {@snippet :
     * #define CL_HALF_MAX_10_EXP 4
     * }
     */
    public static int CL_HALF_MAX_10_EXP() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define CL_HALF_MAX_EXP 16
     * }
     */
    public static int CL_HALF_MAX_EXP() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define CL_HALF_MIN_10_EXP -4
     * }
     */
    public static int CL_HALF_MIN_10_EXP() {
        return (int)-4L;
    }
    /**
     * {@snippet :
     * #define CL_HALF_MIN_EXP -13
     * }
     */
    public static int CL_HALF_MIN_EXP() {
        return (int)-13L;
    }
    /**
     * {@snippet :
     * #define CL_HALF_MAX 65504.0
     * }
     */
    public static float CL_HALF_MAX() {
        return 65504.0f;
    }
    /**
     * {@snippet :
     * #define CL_HALF_MIN 6.103515625E-5
     * }
     */
    public static float CL_HALF_MIN() {
        return 6.103515625E-5f;
    }
    /**
     * {@snippet :
     * #define CL_HALF_EPSILON 9.765625E-4
     * }
     */
    public static float CL_HALF_EPSILON() {
        return 9.765625E-4f;
    }
    /**
     * {@snippet :
     * #define CL_DBL_MAX_10_EXP 308
     * }
     */
    public static int CL_DBL_MAX_10_EXP() {
        return (int)308L;
    }
    /**
     * {@snippet :
     * #define CL_DBL_MAX_EXP 1024
     * }
     */
    public static int CL_DBL_MAX_EXP() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define CL_DBL_MIN_10_EXP -307
     * }
     */
    public static int CL_DBL_MIN_10_EXP() {
        return (int)-307L;
    }
    /**
     * {@snippet :
     * #define CL_DBL_MIN_EXP -1021
     * }
     */
    public static int CL_DBL_MIN_EXP() {
        return (int)-1021L;
    }
    /**
     * {@snippet :
     * #define CL_DBL_MAX 1.7976931348623157E308
     * }
     */
    public static double CL_DBL_MAX() {
        return 1.7976931348623157E308d;
    }
    /**
     * {@snippet :
     * #define CL_DBL_MIN 2.2250738585072014E-308
     * }
     */
    public static double CL_DBL_MIN() {
        return 2.2250738585072014E-308d;
    }
    /**
     * {@snippet :
     * #define CL_DBL_EPSILON 2.220446049250313E-16
     * }
     */
    public static double CL_DBL_EPSILON() {
        return 2.220446049250313E-16d;
    }
    /**
     * {@snippet :
     * #define CL_M_E 2.718281828459045
     * }
     */
    public static double CL_M_E() {
        return 2.718281828459045d;
    }
    /**
     * {@snippet :
     * #define CL_M_LOG2E 1.4426950408889634
     * }
     */
    public static double CL_M_LOG2E() {
        return 1.4426950408889634d;
    }
    /**
     * {@snippet :
     * #define CL_M_LOG10E 0.4342944819032518
     * }
     */
    public static double CL_M_LOG10E() {
        return 0.4342944819032518d;
    }
    /**
     * {@snippet :
     * #define CL_M_LN2 0.6931471805599453
     * }
     */
    public static double CL_M_LN2() {
        return 0.6931471805599453d;
    }
    /**
     * {@snippet :
     * #define CL_M_LN10 2.302585092994046
     * }
     */
    public static double CL_M_LN10() {
        return 2.302585092994046d;
    }
    /**
     * {@snippet :
     * #define CL_M_PI 3.141592653589793
     * }
     */
    public static double CL_M_PI() {
        return 3.141592653589793d;
    }
    /**
     * {@snippet :
     * #define CL_M_PI_2 1.5707963267948966
     * }
     */
    public static double CL_M_PI_2() {
        return 1.5707963267948966d;
    }
    /**
     * {@snippet :
     * #define CL_M_PI_4 0.7853981633974483
     * }
     */
    public static double CL_M_PI_4() {
        return 0.7853981633974483d;
    }
    /**
     * {@snippet :
     * #define CL_M_1_PI 0.3183098861837907
     * }
     */
    public static double CL_M_1_PI() {
        return 0.3183098861837907d;
    }
    /**
     * {@snippet :
     * #define CL_M_2_PI 0.6366197723675814
     * }
     */
    public static double CL_M_2_PI() {
        return 0.6366197723675814d;
    }
    /**
     * {@snippet :
     * #define CL_M_2_SQRTPI 1.1283791670955126
     * }
     */
    public static double CL_M_2_SQRTPI() {
        return 1.1283791670955126d;
    }
    /**
     * {@snippet :
     * #define CL_M_SQRT2 1.4142135623730951
     * }
     */
    public static double CL_M_SQRT2() {
        return 1.4142135623730951d;
    }
    /**
     * {@snippet :
     * #define CL_M_SQRT1_2 0.7071067811865476
     * }
     */
    public static double CL_M_SQRT1_2() {
        return 0.7071067811865476d;
    }
    /**
     * {@snippet :
     * #define CL_M_E_F 2.7182817459106445
     * }
     */
    public static float CL_M_E_F() {
        return 2.7182817459106445f;
    }
    /**
     * {@snippet :
     * #define CL_M_LOG2E_F 1.4426950216293335
     * }
     */
    public static float CL_M_LOG2E_F() {
        return 1.4426950216293335f;
    }
    /**
     * {@snippet :
     * #define CL_M_LOG10E_F 0.4342944920063019
     * }
     */
    public static float CL_M_LOG10E_F() {
        return 0.4342944920063019f;
    }
    /**
     * {@snippet :
     * #define CL_M_LN2_F 0.6931471824645996
     * }
     */
    public static float CL_M_LN2_F() {
        return 0.6931471824645996f;
    }
    /**
     * {@snippet :
     * #define CL_M_LN10_F 2.3025851249694824
     * }
     */
    public static float CL_M_LN10_F() {
        return 2.3025851249694824f;
    }
    /**
     * {@snippet :
     * #define CL_M_PI_F 3.1415927410125732
     * }
     */
    public static float CL_M_PI_F() {
        return 3.1415927410125732f;
    }
    /**
     * {@snippet :
     * #define CL_M_PI_2_F 1.5707963705062866
     * }
     */
    public static float CL_M_PI_2_F() {
        return 1.5707963705062866f;
    }
    /**
     * {@snippet :
     * #define CL_M_PI_4_F 0.7853981852531433
     * }
     */
    public static float CL_M_PI_4_F() {
        return 0.7853981852531433f;
    }
    /**
     * {@snippet :
     * #define CL_M_1_PI_F 0.31830987334251404
     * }
     */
    public static float CL_M_1_PI_F() {
        return 0.31830987334251404f;
    }
    /**
     * {@snippet :
     * #define CL_M_2_PI_F 0.6366197466850281
     * }
     */
    public static float CL_M_2_PI_F() {
        return 0.6366197466850281f;
    }
    /**
     * {@snippet :
     * #define CL_M_2_SQRTPI_F 1.128379225730896
     * }
     */
    public static float CL_M_2_SQRTPI_F() {
        return 1.128379225730896f;
    }
    /**
     * {@snippet :
     * #define CL_M_SQRT2_F 1.4142135381698608
     * }
     */
    public static float CL_M_SQRT2_F() {
        return 1.4142135381698608f;
    }
    /**
     * {@snippet :
     * #define CL_M_SQRT1_2_F 0.7071067690849304
     * }
     */
    public static float CL_M_SQRT1_2_F() {
        return 0.7071067690849304f;
    }
    /**
     * {@snippet :
     * #define CL_NAN NaN
     * }
     */
    public static float CL_NAN() {
        return Float.valueOf("NaN");
    }
    /**
     * {@snippet :
     * #define CL_HUGE_VALF Infinity
     * }
     */
    public static float CL_HUGE_VALF() {
        return Float.valueOf("Infinity");
    }
    /**
     * {@snippet :
     * #define CL_HUGE_VAL Infinity
     * }
     */
    public static double CL_HUGE_VAL() {
        return Double.valueOf("Infinity");
    }
    /**
     * {@snippet :
     * #define CL_MAXFLOAT 3.4028234663852886E38
     * }
     */
    public static float CL_MAXFLOAT() {
        return 3.4028234663852886E38f;
    }
    /**
     * {@snippet :
     * #define CL_INFINITY Infinity
     * }
     */
    public static float CL_INFINITY() {
        return Float.valueOf("Infinity");
    }
    /**
     * {@snippet :
     * #define _UCRT_DISABLED_WARNINGS 4324
     * }
     */
    public static int _UCRT_DISABLED_WARNINGS() {
        return (int)4324L;
    }
    /**
     * {@snippet :
     * #define _TRUNCATE -1
     * }
     */
    public static long _TRUNCATE() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define _CRT_SIZE_MAX -1
     * }
     */
    public static long _CRT_SIZE_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define __FILEW__ "C"
     * }
     */
    public static MemorySegment __FILEW__() {
        return constants$257.const$3;
    }
    /**
     * {@snippet :
     * #define __STDC_SECURE_LIB__ 200411
     * }
     */
    public static int __STDC_SECURE_LIB__() {
        return (int)200411L;
    }
    /**
     * {@snippet :
     * #define __GOT_SECURE_LIB__ 200411
     * }
     */
    public static int __GOT_SECURE_LIB__() {
        return (int)200411L;
    }
    /**
     * {@snippet :
     * #define _MAX_ITOSTR_BASE16_COUNT 9
     * }
     */
    public static int _MAX_ITOSTR_BASE16_COUNT() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define _MAX_ITOSTR_BASE10_COUNT 12
     * }
     */
    public static int _MAX_ITOSTR_BASE10_COUNT() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * #define _MAX_ITOSTR_BASE8_COUNT 12
     * }
     */
    public static int _MAX_ITOSTR_BASE8_COUNT() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * #define _MAX_ITOSTR_BASE2_COUNT 33
     * }
     */
    public static int _MAX_ITOSTR_BASE2_COUNT() {
        return (int)33L;
    }
    /**
     * {@snippet :
     * #define _MAX_LTOSTR_BASE16_COUNT 9
     * }
     */
    public static int _MAX_LTOSTR_BASE16_COUNT() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define _MAX_LTOSTR_BASE10_COUNT 12
     * }
     */
    public static int _MAX_LTOSTR_BASE10_COUNT() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * #define _MAX_LTOSTR_BASE8_COUNT 12
     * }
     */
    public static int _MAX_LTOSTR_BASE8_COUNT() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * #define _MAX_LTOSTR_BASE2_COUNT 33
     * }
     */
    public static int _MAX_LTOSTR_BASE2_COUNT() {
        return (int)33L;
    }
    /**
     * {@snippet :
     * #define _MAX_ULTOSTR_BASE16_COUNT 9
     * }
     */
    public static int _MAX_ULTOSTR_BASE16_COUNT() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define _MAX_ULTOSTR_BASE10_COUNT 11
     * }
     */
    public static int _MAX_ULTOSTR_BASE10_COUNT() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * #define _MAX_ULTOSTR_BASE8_COUNT 12
     * }
     */
    public static int _MAX_ULTOSTR_BASE8_COUNT() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * #define _MAX_ULTOSTR_BASE2_COUNT 33
     * }
     */
    public static int _MAX_ULTOSTR_BASE2_COUNT() {
        return (int)33L;
    }
    /**
     * {@snippet :
     * #define _MAX_I64TOSTR_BASE16_COUNT 17
     * }
     */
    public static int _MAX_I64TOSTR_BASE16_COUNT() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * #define _MAX_I64TOSTR_BASE10_COUNT 21
     * }
     */
    public static int _MAX_I64TOSTR_BASE10_COUNT() {
        return (int)21L;
    }
    /**
     * {@snippet :
     * #define _MAX_I64TOSTR_BASE8_COUNT 23
     * }
     */
    public static int _MAX_I64TOSTR_BASE8_COUNT() {
        return (int)23L;
    }
    /**
     * {@snippet :
     * #define _MAX_I64TOSTR_BASE2_COUNT 65
     * }
     */
    public static int _MAX_I64TOSTR_BASE2_COUNT() {
        return (int)65L;
    }
    /**
     * {@snippet :
     * #define _MAX_U64TOSTR_BASE16_COUNT 17
     * }
     */
    public static int _MAX_U64TOSTR_BASE16_COUNT() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * #define _MAX_U64TOSTR_BASE10_COUNT 21
     * }
     */
    public static int _MAX_U64TOSTR_BASE10_COUNT() {
        return (int)21L;
    }
    /**
     * {@snippet :
     * #define _MAX_U64TOSTR_BASE8_COUNT 23
     * }
     */
    public static int _MAX_U64TOSTR_BASE8_COUNT() {
        return (int)23L;
    }
    /**
     * {@snippet :
     * #define _MAX_U64TOSTR_BASE2_COUNT 65
     * }
     */
    public static int _MAX_U64TOSTR_BASE2_COUNT() {
        return (int)65L;
    }
    /**
     * {@snippet :
     * #define SCHAR_MIN -128
     * }
     */
    public static int SCHAR_MIN() {
        return (int)-128L;
    }
    /**
     * {@snippet :
     * #define CHAR_MIN -128
     * }
     */
    public static int CHAR_MIN() {
        return (int)-128L;
    }
    /**
     * {@snippet :
     * #define CHAR_MAX 127
     * }
     */
    public static int CHAR_MAX() {
        return (int)127L;
    }
    /**
     * {@snippet :
     * #define SHRT_MIN -32768
     * }
     */
    public static int SHRT_MIN() {
        return (int)-32768L;
    }
    /**
     * {@snippet :
     * #define INT_MIN -2147483648
     * }
     */
    public static int INT_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define UINT_MAX 4294967295
     * }
     */
    public static int UINT_MAX() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define LONG_MIN -2147483648
     * }
     */
    public static int LONG_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define LONG_MAX 2147483647
     * }
     */
    public static int LONG_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define ULONG_MAX 4294967295
     * }
     */
    public static int ULONG_MAX() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define LLONG_MAX 9223372036854775807
     * }
     */
    public static long LLONG_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define LLONG_MIN -9223372036854775808
     * }
     */
    public static long LLONG_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define ULLONG_MAX -1
     * }
     */
    public static long ULLONG_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define _I8_MIN -128
     * }
     */
    public static int _I8_MIN() {
        return (int)-128L;
    }
    /**
     * {@snippet :
     * #define _I8_MAX 127
     * }
     */
    public static byte _I8_MAX() {
        return (byte)127L;
    }
    /**
     * {@snippet :
     * #define _UI8_MAX 255
     * }
     */
    public static byte _UI8_MAX() {
        return (byte)255L;
    }
    /**
     * {@snippet :
     * #define _I16_MIN -32768
     * }
     */
    public static int _I16_MIN() {
        return (int)-32768L;
    }
    /**
     * {@snippet :
     * #define _I16_MAX 32767
     * }
     */
    public static short _I16_MAX() {
        return (short)32767L;
    }
    /**
     * {@snippet :
     * #define _UI16_MAX 65535
     * }
     */
    public static short _UI16_MAX() {
        return (short)65535L;
    }
    /**
     * {@snippet :
     * #define _I32_MIN -2147483648
     * }
     */
    public static int _I32_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define _I32_MAX 2147483647
     * }
     */
    public static int _I32_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define _UI32_MAX 4294967295
     * }
     */
    public static int _UI32_MAX() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define _I64_MIN -9223372036854775808
     * }
     */
    public static long _I64_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define _I64_MAX 9223372036854775807
     * }
     */
    public static long _I64_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define _UI64_MAX -1
     * }
     */
    public static long _UI64_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define RSIZE_MAX 9223372036854775807
     * }
     */
    public static long RSIZE_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define LONG_LONG_MAX 9223372036854775807
     * }
     */
    public static long LONG_LONG_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define LONG_LONG_MIN -9223372036854775808
     * }
     */
    public static long LONG_LONG_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define ULONG_LONG_MAX -1
     * }
     */
    public static long ULONG_LONG_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define _CVTBUFSIZE 349
     * }
     */
    public static int _CVTBUFSIZE() {
        return (int)349L;
    }
    /**
     * {@snippet :
     * #define _HEAP_MAXREQ -32
     * }
     */
    public static long _HEAP_MAXREQ() {
        return -32L;
    }
    /**
     * {@snippet :
     * #define _HEAPEMPTY -1
     * }
     */
    public static int _HEAPEMPTY() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * #define _HEAPOK -2
     * }
     */
    public static int _HEAPOK() {
        return (int)-2L;
    }
    /**
     * {@snippet :
     * #define _HEAPBADBEGIN -3
     * }
     */
    public static int _HEAPBADBEGIN() {
        return (int)-3L;
    }
    /**
     * {@snippet :
     * #define _HEAPBADNODE -4
     * }
     */
    public static int _HEAPBADNODE() {
        return (int)-4L;
    }
    /**
     * {@snippet :
     * #define _HEAPEND -5
     * }
     */
    public static int _HEAPEND() {
        return (int)-5L;
    }
    /**
     * {@snippet :
     * #define _HEAPBADPTR -6
     * }
     */
    public static int _HEAPBADPTR() {
        return (int)-6L;
    }
    /**
     * {@snippet :
     * #define _MM_EXCEPT_INVALID 1
     * }
     */
    public static int _MM_EXCEPT_INVALID() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _MM_EXCEPT_DENORM 2
     * }
     */
    public static int _MM_EXCEPT_DENORM() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define _MM_EXCEPT_DIV_ZERO 4
     * }
     */
    public static int _MM_EXCEPT_DIV_ZERO() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define _MM_EXCEPT_OVERFLOW 8
     * }
     */
    public static int _MM_EXCEPT_OVERFLOW() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define _MM_EXCEPT_UNDERFLOW 16
     * }
     */
    public static int _MM_EXCEPT_UNDERFLOW() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define _MM_EXCEPT_INEXACT 32
     * }
     */
    public static int _MM_EXCEPT_INEXACT() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define _MM_EXCEPT_MASK 63
     * }
     */
    public static int _MM_EXCEPT_MASK() {
        return (int)63L;
    }
    /**
     * {@snippet :
     * #define _MM_MASK_INVALID 128
     * }
     */
    public static int _MM_MASK_INVALID() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define _MM_MASK_DENORM 256
     * }
     */
    public static int _MM_MASK_DENORM() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define _MM_MASK_DIV_ZERO 512
     * }
     */
    public static int _MM_MASK_DIV_ZERO() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * #define _MM_MASK_OVERFLOW 1024
     * }
     */
    public static int _MM_MASK_OVERFLOW() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define _MM_MASK_UNDERFLOW 2048
     * }
     */
    public static int _MM_MASK_UNDERFLOW() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * #define _MM_MASK_INEXACT 4096
     * }
     */
    public static int _MM_MASK_INEXACT() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * #define _MM_MASK_MASK 8064
     * }
     */
    public static int _MM_MASK_MASK() {
        return (int)8064L;
    }
    /**
     * {@snippet :
     * #define _MM_ROUND_NEAREST 0
     * }
     */
    public static int _MM_ROUND_NEAREST() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _MM_ROUND_DOWN 8192
     * }
     */
    public static int _MM_ROUND_DOWN() {
        return (int)8192L;
    }
    /**
     * {@snippet :
     * #define _MM_ROUND_UP 16384
     * }
     */
    public static int _MM_ROUND_UP() {
        return (int)16384L;
    }
    /**
     * {@snippet :
     * #define _MM_ROUND_TOWARD_ZERO 24576
     * }
     */
    public static int _MM_ROUND_TOWARD_ZERO() {
        return (int)24576L;
    }
    /**
     * {@snippet :
     * #define _MM_ROUND_MASK 24576
     * }
     */
    public static int _MM_ROUND_MASK() {
        return (int)24576L;
    }
    /**
     * {@snippet :
     * #define _MM_FLUSH_ZERO_MASK 32768
     * }
     */
    public static int _MM_FLUSH_ZERO_MASK() {
        return (int)32768L;
    }
    /**
     * {@snippet :
     * #define _MM_FLUSH_ZERO_ON 32768
     * }
     */
    public static int _MM_FLUSH_ZERO_ON() {
        return (int)32768L;
    }
    /**
     * {@snippet :
     * #define _MM_FLUSH_ZERO_OFF 0
     * }
     */
    public static int _MM_FLUSH_ZERO_OFF() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _MM_DENORMALS_ZERO_ON 64
     * }
     */
    public static int _MM_DENORMALS_ZERO_ON() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define _MM_DENORMALS_ZERO_OFF 0
     * }
     */
    public static int _MM_DENORMALS_ZERO_OFF() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _MM_DENORMALS_ZERO_MASK 64
     * }
     */
    public static int _MM_DENORMALS_ZERO_MASK() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define CL_PROGRAM_STRING_DEBUG_INFO "#line 668 \"C:\\Users\\terut\\AppData\\Local\\Temp\\jextract$14505263843986650252.h\" \n\n"
     * }
     */
    public static MemorySegment CL_PROGRAM_STRING_DEBUG_INFO() {
        return constants$257.const$4;
    }
    /**
     * {@snippet :
     * #define CL_DEVICE_NOT_FOUND -1
     * }
     */
    public static int CL_DEVICE_NOT_FOUND() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * #define CL_DEVICE_NOT_AVAILABLE -2
     * }
     */
    public static int CL_DEVICE_NOT_AVAILABLE() {
        return (int)-2L;
    }
    /**
     * {@snippet :
     * #define CL_COMPILER_NOT_AVAILABLE -3
     * }
     */
    public static int CL_COMPILER_NOT_AVAILABLE() {
        return (int)-3L;
    }
    /**
     * {@snippet :
     * #define CL_MEM_OBJECT_ALLOCATION_FAILURE -4
     * }
     */
    public static int CL_MEM_OBJECT_ALLOCATION_FAILURE() {
        return (int)-4L;
    }
    /**
     * {@snippet :
     * #define CL_OUT_OF_RESOURCES -5
     * }
     */
    public static int CL_OUT_OF_RESOURCES() {
        return (int)-5L;
    }
    /**
     * {@snippet :
     * #define CL_OUT_OF_HOST_MEMORY -6
     * }
     */
    public static int CL_OUT_OF_HOST_MEMORY() {
        return (int)-6L;
    }
    /**
     * {@snippet :
     * #define CL_PROFILING_INFO_NOT_AVAILABLE -7
     * }
     */
    public static int CL_PROFILING_INFO_NOT_AVAILABLE() {
        return (int)-7L;
    }
    /**
     * {@snippet :
     * #define CL_MEM_COPY_OVERLAP -8
     * }
     */
    public static int CL_MEM_COPY_OVERLAP() {
        return (int)-8L;
    }
    /**
     * {@snippet :
     * #define CL_IMAGE_FORMAT_MISMATCH -9
     * }
     */
    public static int CL_IMAGE_FORMAT_MISMATCH() {
        return (int)-9L;
    }
    /**
     * {@snippet :
     * #define CL_IMAGE_FORMAT_NOT_SUPPORTED -10
     * }
     */
    public static int CL_IMAGE_FORMAT_NOT_SUPPORTED() {
        return (int)-10L;
    }
    /**
     * {@snippet :
     * #define CL_BUILD_PROGRAM_FAILURE -11
     * }
     */
    public static int CL_BUILD_PROGRAM_FAILURE() {
        return (int)-11L;
    }
    /**
     * {@snippet :
     * #define CL_MAP_FAILURE -12
     * }
     */
    public static int CL_MAP_FAILURE() {
        return (int)-12L;
    }
    /**
     * {@snippet :
     * #define CL_MISALIGNED_SUB_BUFFER_OFFSET -13
     * }
     */
    public static int CL_MISALIGNED_SUB_BUFFER_OFFSET() {
        return (int)-13L;
    }
    /**
     * {@snippet :
     * #define CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST -14
     * }
     */
    public static int CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST() {
        return (int)-14L;
    }
    /**
     * {@snippet :
     * #define CL_COMPILE_PROGRAM_FAILURE -15
     * }
     */
    public static int CL_COMPILE_PROGRAM_FAILURE() {
        return (int)-15L;
    }
    /**
     * {@snippet :
     * #define CL_LINKER_NOT_AVAILABLE -16
     * }
     */
    public static int CL_LINKER_NOT_AVAILABLE() {
        return (int)-16L;
    }
    /**
     * {@snippet :
     * #define CL_LINK_PROGRAM_FAILURE -17
     * }
     */
    public static int CL_LINK_PROGRAM_FAILURE() {
        return (int)-17L;
    }
    /**
     * {@snippet :
     * #define CL_DEVICE_PARTITION_FAILED -18
     * }
     */
    public static int CL_DEVICE_PARTITION_FAILED() {
        return (int)-18L;
    }
    /**
     * {@snippet :
     * #define CL_KERNEL_ARG_INFO_NOT_AVAILABLE -19
     * }
     */
    public static int CL_KERNEL_ARG_INFO_NOT_AVAILABLE() {
        return (int)-19L;
    }
    /**
     * {@snippet :
     * #define CL_INVALID_VALUE -30
     * }
     */
    public static int CL_INVALID_VALUE() {
        return (int)-30L;
    }
    /**
     * {@snippet :
     * #define CL_INVALID_DEVICE_TYPE -31
     * }
     */
    public static int CL_INVALID_DEVICE_TYPE() {
        return (int)-31L;
    }
    /**
     * {@snippet :
     * #define CL_INVALID_PLATFORM -32
     * }
     */
    public static int CL_INVALID_PLATFORM() {
        return (int)-32L;
    }
    /**
     * {@snippet :
     * #define CL_INVALID_DEVICE -33
     * }
     */
    public static int CL_INVALID_DEVICE() {
        return (int)-33L;
    }
    /**
     * {@snippet :
     * #define CL_INVALID_CONTEXT -34
     * }
     */
    public static int CL_INVALID_CONTEXT() {
        return (int)-34L;
    }
    /**
     * {@snippet :
     * #define CL_INVALID_QUEUE_PROPERTIES -35
     * }
     */
    public static int CL_INVALID_QUEUE_PROPERTIES() {
        return (int)-35L;
    }
    /**
     * {@snippet :
     * #define CL_INVALID_COMMAND_QUEUE -36
     * }
     */
    public static int CL_INVALID_COMMAND_QUEUE() {
        return (int)-36L;
    }
    /**
     * {@snippet :
     * #define CL_INVALID_HOST_PTR -37
     * }
     */
    public static int CL_INVALID_HOST_PTR() {
        return (int)-37L;
    }
    /**
     * {@snippet :
     * #define CL_INVALID_MEM_OBJECT -38
     * }
     */
    public static int CL_INVALID_MEM_OBJECT() {
        return (int)-38L;
    }
    /**
     * {@snippet :
     * #define CL_INVALID_IMAGE_FORMAT_DESCRIPTOR -39
     * }
     */
    public static int CL_INVALID_IMAGE_FORMAT_DESCRIPTOR() {
        return (int)-39L;
    }
    /**
     * {@snippet :
     * #define CL_INVALID_IMAGE_SIZE -40
     * }
     */
    public static int CL_INVALID_IMAGE_SIZE() {
        return (int)-40L;
    }
    /**
     * {@snippet :
     * #define CL_INVALID_SAMPLER -41
     * }
     */
    public static int CL_INVALID_SAMPLER() {
        return (int)-41L;
    }
    /**
     * {@snippet :
     * #define CL_INVALID_BINARY -42
     * }
     */
    public static int CL_INVALID_BINARY() {
        return (int)-42L;
    }
    /**
     * {@snippet :
     * #define CL_INVALID_BUILD_OPTIONS -43
     * }
     */
    public static int CL_INVALID_BUILD_OPTIONS() {
        return (int)-43L;
    }
    /**
     * {@snippet :
     * #define CL_INVALID_PROGRAM -44
     * }
     */
    public static int CL_INVALID_PROGRAM() {
        return (int)-44L;
    }
    /**
     * {@snippet :
     * #define CL_INVALID_PROGRAM_EXECUTABLE -45
     * }
     */
    public static int CL_INVALID_PROGRAM_EXECUTABLE() {
        return (int)-45L;
    }
    /**
     * {@snippet :
     * #define CL_INVALID_KERNEL_NAME -46
     * }
     */
    public static int CL_INVALID_KERNEL_NAME() {
        return (int)-46L;
    }
    /**
     * {@snippet :
     * #define CL_INVALID_KERNEL_DEFINITION -47
     * }
     */
    public static int CL_INVALID_KERNEL_DEFINITION() {
        return (int)-47L;
    }
    /**
     * {@snippet :
     * #define CL_INVALID_KERNEL -48
     * }
     */
    public static int CL_INVALID_KERNEL() {
        return (int)-48L;
    }
    /**
     * {@snippet :
     * #define CL_INVALID_ARG_INDEX -49
     * }
     */
    public static int CL_INVALID_ARG_INDEX() {
        return (int)-49L;
    }
    /**
     * {@snippet :
     * #define CL_INVALID_ARG_VALUE -50
     * }
     */
    public static int CL_INVALID_ARG_VALUE() {
        return (int)-50L;
    }
    /**
     * {@snippet :
     * #define CL_INVALID_ARG_SIZE -51
     * }
     */
    public static int CL_INVALID_ARG_SIZE() {
        return (int)-51L;
    }
    /**
     * {@snippet :
     * #define CL_INVALID_KERNEL_ARGS -52
     * }
     */
    public static int CL_INVALID_KERNEL_ARGS() {
        return (int)-52L;
    }
    /**
     * {@snippet :
     * #define CL_INVALID_WORK_DIMENSION -53
     * }
     */
    public static int CL_INVALID_WORK_DIMENSION() {
        return (int)-53L;
    }
    /**
     * {@snippet :
     * #define CL_INVALID_WORK_GROUP_SIZE -54
     * }
     */
    public static int CL_INVALID_WORK_GROUP_SIZE() {
        return (int)-54L;
    }
    /**
     * {@snippet :
     * #define CL_INVALID_WORK_ITEM_SIZE -55
     * }
     */
    public static int CL_INVALID_WORK_ITEM_SIZE() {
        return (int)-55L;
    }
    /**
     * {@snippet :
     * #define CL_INVALID_GLOBAL_OFFSET -56
     * }
     */
    public static int CL_INVALID_GLOBAL_OFFSET() {
        return (int)-56L;
    }
    /**
     * {@snippet :
     * #define CL_INVALID_EVENT_WAIT_LIST -57
     * }
     */
    public static int CL_INVALID_EVENT_WAIT_LIST() {
        return (int)-57L;
    }
    /**
     * {@snippet :
     * #define CL_INVALID_EVENT -58
     * }
     */
    public static int CL_INVALID_EVENT() {
        return (int)-58L;
    }
    /**
     * {@snippet :
     * #define CL_INVALID_OPERATION -59
     * }
     */
    public static int CL_INVALID_OPERATION() {
        return (int)-59L;
    }
    /**
     * {@snippet :
     * #define CL_INVALID_GL_OBJECT -60
     * }
     */
    public static int CL_INVALID_GL_OBJECT() {
        return (int)-60L;
    }
    /**
     * {@snippet :
     * #define CL_INVALID_BUFFER_SIZE -61
     * }
     */
    public static int CL_INVALID_BUFFER_SIZE() {
        return (int)-61L;
    }
    /**
     * {@snippet :
     * #define CL_INVALID_MIP_LEVEL -62
     * }
     */
    public static int CL_INVALID_MIP_LEVEL() {
        return (int)-62L;
    }
    /**
     * {@snippet :
     * #define CL_INVALID_GLOBAL_WORK_SIZE -63
     * }
     */
    public static int CL_INVALID_GLOBAL_WORK_SIZE() {
        return (int)-63L;
    }
    /**
     * {@snippet :
     * #define CL_INVALID_PROPERTY -64
     * }
     */
    public static int CL_INVALID_PROPERTY() {
        return (int)-64L;
    }
    /**
     * {@snippet :
     * #define CL_INVALID_IMAGE_DESCRIPTOR -65
     * }
     */
    public static int CL_INVALID_IMAGE_DESCRIPTOR() {
        return (int)-65L;
    }
    /**
     * {@snippet :
     * #define CL_INVALID_COMPILER_OPTIONS -66
     * }
     */
    public static int CL_INVALID_COMPILER_OPTIONS() {
        return (int)-66L;
    }
    /**
     * {@snippet :
     * #define CL_INVALID_LINKER_OPTIONS -67
     * }
     */
    public static int CL_INVALID_LINKER_OPTIONS() {
        return (int)-67L;
    }
    /**
     * {@snippet :
     * #define CL_INVALID_DEVICE_PARTITION_COUNT -68
     * }
     */
    public static int CL_INVALID_DEVICE_PARTITION_COUNT() {
        return (int)-68L;
    }
    /**
     * {@snippet :
     * #define CL_INVALID_PIPE_SIZE -69
     * }
     */
    public static int CL_INVALID_PIPE_SIZE() {
        return (int)-69L;
    }
    /**
     * {@snippet :
     * #define CL_INVALID_DEVICE_QUEUE -70
     * }
     */
    public static int CL_INVALID_DEVICE_QUEUE() {
        return (int)-70L;
    }
    /**
     * {@snippet :
     * #define CL_INVALID_SPEC_ID -71
     * }
     */
    public static int CL_INVALID_SPEC_ID() {
        return (int)-71L;
    }
    /**
     * {@snippet :
     * #define CL_MAX_SIZE_RESTRICTION_EXCEEDED -72
     * }
     */
    public static int CL_MAX_SIZE_RESTRICTION_EXCEEDED() {
        return (int)-72L;
    }
    /**
     * {@snippet :
     * #define CL_BLOCKING 1
     * }
     */
    public static int CL_BLOCKING() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define CL_NON_BLOCKING 0
     * }
     */
    public static int CL_NON_BLOCKING() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define CL_DEVICE_TYPE_DEFAULT 1
     * }
     */
    public static int CL_DEVICE_TYPE_DEFAULT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define CL_DEVICE_TYPE_CPU 2
     * }
     */
    public static int CL_DEVICE_TYPE_CPU() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define CL_DEVICE_TYPE_GPU 4
     * }
     */
    public static int CL_DEVICE_TYPE_GPU() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define CL_DEVICE_TYPE_ACCELERATOR 8
     * }
     */
    public static int CL_DEVICE_TYPE_ACCELERATOR() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define CL_DEVICE_TYPE_CUSTOM 16
     * }
     */
    public static int CL_DEVICE_TYPE_CUSTOM() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define CL_DEVICE_TYPE_ALL 4294967295
     * }
     */
    public static int CL_DEVICE_TYPE_ALL() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define CL_FP_DENORM 1
     * }
     */
    public static int CL_FP_DENORM() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define CL_FP_INF_NAN 2
     * }
     */
    public static int CL_FP_INF_NAN() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define CL_FP_ROUND_TO_NEAREST 4
     * }
     */
    public static int CL_FP_ROUND_TO_NEAREST() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define CL_FP_ROUND_TO_ZERO 8
     * }
     */
    public static int CL_FP_ROUND_TO_ZERO() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define CL_FP_ROUND_TO_INF 16
     * }
     */
    public static int CL_FP_ROUND_TO_INF() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define CL_FP_FMA 32
     * }
     */
    public static int CL_FP_FMA() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define CL_FP_SOFT_FLOAT 64
     * }
     */
    public static int CL_FP_SOFT_FLOAT() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define CL_FP_CORRECTLY_ROUNDED_DIVIDE_SQRT 128
     * }
     */
    public static int CL_FP_CORRECTLY_ROUNDED_DIVIDE_SQRT() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define CL_EXEC_KERNEL 1
     * }
     */
    public static int CL_EXEC_KERNEL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define CL_EXEC_NATIVE_KERNEL 2
     * }
     */
    public static int CL_EXEC_NATIVE_KERNEL() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define CL_QUEUE_OUT_OF_ORDER_EXEC_MODE_ENABLE 1
     * }
     */
    public static int CL_QUEUE_OUT_OF_ORDER_EXEC_MODE_ENABLE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define CL_QUEUE_PROFILING_ENABLE 2
     * }
     */
    public static int CL_QUEUE_PROFILING_ENABLE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define CL_QUEUE_ON_DEVICE 4
     * }
     */
    public static int CL_QUEUE_ON_DEVICE() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define CL_QUEUE_ON_DEVICE_DEFAULT 8
     * }
     */
    public static int CL_QUEUE_ON_DEVICE_DEFAULT() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define CL_DEVICE_AFFINITY_DOMAIN_NUMA 1
     * }
     */
    public static int CL_DEVICE_AFFINITY_DOMAIN_NUMA() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define CL_DEVICE_AFFINITY_DOMAIN_L4_CACHE 2
     * }
     */
    public static int CL_DEVICE_AFFINITY_DOMAIN_L4_CACHE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define CL_DEVICE_AFFINITY_DOMAIN_L3_CACHE 4
     * }
     */
    public static int CL_DEVICE_AFFINITY_DOMAIN_L3_CACHE() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define CL_DEVICE_AFFINITY_DOMAIN_L2_CACHE 8
     * }
     */
    public static int CL_DEVICE_AFFINITY_DOMAIN_L2_CACHE() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define CL_DEVICE_AFFINITY_DOMAIN_L1_CACHE 16
     * }
     */
    public static int CL_DEVICE_AFFINITY_DOMAIN_L1_CACHE() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define CL_DEVICE_AFFINITY_DOMAIN_NEXT_PARTITIONABLE 32
     * }
     */
    public static int CL_DEVICE_AFFINITY_DOMAIN_NEXT_PARTITIONABLE() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define CL_DEVICE_SVM_COARSE_GRAIN_BUFFER 1
     * }
     */
    public static int CL_DEVICE_SVM_COARSE_GRAIN_BUFFER() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define CL_DEVICE_SVM_FINE_GRAIN_BUFFER 2
     * }
     */
    public static int CL_DEVICE_SVM_FINE_GRAIN_BUFFER() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define CL_DEVICE_SVM_FINE_GRAIN_SYSTEM 4
     * }
     */
    public static int CL_DEVICE_SVM_FINE_GRAIN_SYSTEM() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define CL_DEVICE_SVM_ATOMICS 8
     * }
     */
    public static int CL_DEVICE_SVM_ATOMICS() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define CL_MEM_READ_WRITE 1
     * }
     */
    public static int CL_MEM_READ_WRITE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define CL_MEM_WRITE_ONLY 2
     * }
     */
    public static int CL_MEM_WRITE_ONLY() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define CL_MEM_READ_ONLY 4
     * }
     */
    public static int CL_MEM_READ_ONLY() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define CL_MEM_USE_HOST_PTR 8
     * }
     */
    public static int CL_MEM_USE_HOST_PTR() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define CL_MEM_ALLOC_HOST_PTR 16
     * }
     */
    public static int CL_MEM_ALLOC_HOST_PTR() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define CL_MEM_COPY_HOST_PTR 32
     * }
     */
    public static int CL_MEM_COPY_HOST_PTR() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define CL_MEM_HOST_WRITE_ONLY 128
     * }
     */
    public static int CL_MEM_HOST_WRITE_ONLY() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define CL_MEM_HOST_READ_ONLY 256
     * }
     */
    public static int CL_MEM_HOST_READ_ONLY() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define CL_MEM_HOST_NO_ACCESS 512
     * }
     */
    public static int CL_MEM_HOST_NO_ACCESS() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * #define CL_MEM_SVM_FINE_GRAIN_BUFFER 1024
     * }
     */
    public static int CL_MEM_SVM_FINE_GRAIN_BUFFER() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define CL_MEM_SVM_ATOMICS 2048
     * }
     */
    public static int CL_MEM_SVM_ATOMICS() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * #define CL_MEM_KERNEL_READ_AND_WRITE 4096
     * }
     */
    public static int CL_MEM_KERNEL_READ_AND_WRITE() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * #define CL_MIGRATE_MEM_OBJECT_HOST 1
     * }
     */
    public static int CL_MIGRATE_MEM_OBJECT_HOST() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define CL_MIGRATE_MEM_OBJECT_CONTENT_UNDEFINED 2
     * }
     */
    public static int CL_MIGRATE_MEM_OBJECT_CONTENT_UNDEFINED() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define CL_MAP_READ 1
     * }
     */
    public static int CL_MAP_READ() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define CL_MAP_WRITE 2
     * }
     */
    public static int CL_MAP_WRITE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define CL_MAP_WRITE_INVALIDATE_REGION 4
     * }
     */
    public static int CL_MAP_WRITE_INVALIDATE_REGION() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define CL_BUILD_NONE -1
     * }
     */
    public static int CL_BUILD_NONE() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * #define CL_BUILD_ERROR -2
     * }
     */
    public static int CL_BUILD_ERROR() {
        return (int)-2L;
    }
    /**
     * {@snippet :
     * #define CL_BUILD_IN_PROGRESS -3
     * }
     */
    public static int CL_BUILD_IN_PROGRESS() {
        return (int)-3L;
    }
    /**
     * {@snippet :
     * #define CL_KERNEL_ARG_TYPE_CONST 1
     * }
     */
    public static int CL_KERNEL_ARG_TYPE_CONST() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define CL_KERNEL_ARG_TYPE_RESTRICT 2
     * }
     */
    public static int CL_KERNEL_ARG_TYPE_RESTRICT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define CL_KERNEL_ARG_TYPE_VOLATILE 4
     * }
     */
    public static int CL_KERNEL_ARG_TYPE_VOLATILE() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define CL_KERNEL_ARG_TYPE_PIPE 8
     * }
     */
    public static int CL_KERNEL_ARG_TYPE_PIPE() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define CL_DEVICE_ATOMIC_ORDER_RELAXED 1
     * }
     */
    public static int CL_DEVICE_ATOMIC_ORDER_RELAXED() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define CL_DEVICE_ATOMIC_ORDER_ACQ_REL 2
     * }
     */
    public static int CL_DEVICE_ATOMIC_ORDER_ACQ_REL() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define CL_DEVICE_ATOMIC_ORDER_SEQ_CST 4
     * }
     */
    public static int CL_DEVICE_ATOMIC_ORDER_SEQ_CST() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define CL_DEVICE_ATOMIC_SCOPE_WORK_ITEM 8
     * }
     */
    public static int CL_DEVICE_ATOMIC_SCOPE_WORK_ITEM() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define CL_DEVICE_ATOMIC_SCOPE_WORK_GROUP 16
     * }
     */
    public static int CL_DEVICE_ATOMIC_SCOPE_WORK_GROUP() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define CL_DEVICE_ATOMIC_SCOPE_DEVICE 32
     * }
     */
    public static int CL_DEVICE_ATOMIC_SCOPE_DEVICE() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define CL_DEVICE_ATOMIC_SCOPE_ALL_DEVICES 64
     * }
     */
    public static int CL_DEVICE_ATOMIC_SCOPE_ALL_DEVICES() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define CL_DEVICE_QUEUE_SUPPORTED 1
     * }
     */
    public static int CL_DEVICE_QUEUE_SUPPORTED() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define CL_DEVICE_QUEUE_REPLACEABLE_DEFAULT 2
     * }
     */
    public static int CL_DEVICE_QUEUE_REPLACEABLE_DEFAULT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define CL_VERSION_MAJOR_BITS 10
     * }
     */
    public static int CL_VERSION_MAJOR_BITS() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * #define CL_VERSION_MINOR_BITS 10
     * }
     */
    public static int CL_VERSION_MINOR_BITS() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * #define CL_VERSION_PATCH_BITS 12
     * }
     */
    public static int CL_VERSION_PATCH_BITS() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * #define CL_VERSION_MAJOR_MASK 1023
     * }
     */
    public static int CL_VERSION_MAJOR_MASK() {
        return (int)1023L;
    }
    /**
     * {@snippet :
     * #define CL_VERSION_MINOR_MASK 1023
     * }
     */
    public static int CL_VERSION_MINOR_MASK() {
        return (int)1023L;
    }
    /**
     * {@snippet :
     * #define CL_VERSION_PATCH_MASK 4095
     * }
     */
    public static int CL_VERSION_PATCH_MASK() {
        return (int)4095L;
    }
    /**
     * {@snippet :
     * #define CL_KHR_GL_SHARING_EXTENSION_NAME "cl_khr_gl_sharing"
     * }
     */
    public static MemorySegment CL_KHR_GL_SHARING_EXTENSION_NAME() {
        return constants$257.const$5;
    }
    /**
     * {@snippet :
     * #define CL_INVALID_GL_SHAREGROUP_REFERENCE_KHR -1000
     * }
     */
    public static int CL_INVALID_GL_SHAREGROUP_REFERENCE_KHR() {
        return (int)-1000L;
    }
    /**
     * {@snippet :
     * #define CL_KHR_GL_EVENT_EXTENSION_NAME "cl_khr_gl_event"
     * }
     */
    public static MemorySegment CL_KHR_GL_EVENT_EXTENSION_NAME() {
        return constants$258.const$0;
    }
    /**
     * {@snippet :
     * #define CL_KHR_GL_DEPTH_IMAGES_EXTENSION_NAME "cl_khr_gl_depth_images"
     * }
     */
    public static MemorySegment CL_KHR_GL_DEPTH_IMAGES_EXTENSION_NAME() {
        return constants$258.const$1;
    }
    /**
     * {@snippet :
     * #define CL_KHR_GL_MSAA_SHARING_EXTENSION_NAME "cl_khr_gl_msaa_sharing"
     * }
     */
    public static MemorySegment CL_KHR_GL_MSAA_SHARING_EXTENSION_NAME() {
        return constants$258.const$2;
    }
    /**
     * {@snippet :
     * #define CL_INTEL_SHARING_FORMAT_QUERY_GL_EXTENSION_NAME "cl_intel_sharing_format_query_gl"
     * }
     */
    public static MemorySegment CL_INTEL_SHARING_FORMAT_QUERY_GL_EXTENSION_NAME() {
        return constants$258.const$3;
    }
    /**
     * {@snippet :
     * #define CL_KHR_COMMAND_BUFFER_EXTENSION_NAME "cl_khr_command_buffer"
     * }
     */
    public static MemorySegment CL_KHR_COMMAND_BUFFER_EXTENSION_NAME() {
        return constants$258.const$4;
    }
    /**
     * {@snippet :
     * #define CL_COMMAND_BUFFER_CAPABILITY_KERNEL_PRINTF_KHR 1
     * }
     */
    public static int CL_COMMAND_BUFFER_CAPABILITY_KERNEL_PRINTF_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define CL_COMMAND_BUFFER_CAPABILITY_DEVICE_SIDE_ENQUEUE_KHR 2
     * }
     */
    public static int CL_COMMAND_BUFFER_CAPABILITY_DEVICE_SIDE_ENQUEUE_KHR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define CL_COMMAND_BUFFER_CAPABILITY_SIMULTANEOUS_USE_KHR 4
     * }
     */
    public static int CL_COMMAND_BUFFER_CAPABILITY_SIMULTANEOUS_USE_KHR() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define CL_COMMAND_BUFFER_CAPABILITY_OUT_OF_ORDER_KHR 8
     * }
     */
    public static int CL_COMMAND_BUFFER_CAPABILITY_OUT_OF_ORDER_KHR() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define CL_COMMAND_BUFFER_SIMULTANEOUS_USE_KHR 1
     * }
     */
    public static int CL_COMMAND_BUFFER_SIMULTANEOUS_USE_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define CL_INVALID_COMMAND_BUFFER_KHR -1138
     * }
     */
    public static int CL_INVALID_COMMAND_BUFFER_KHR() {
        return (int)-1138L;
    }
    /**
     * {@snippet :
     * #define CL_INVALID_SYNC_POINT_WAIT_LIST_KHR -1139
     * }
     */
    public static int CL_INVALID_SYNC_POINT_WAIT_LIST_KHR() {
        return (int)-1139L;
    }
    /**
     * {@snippet :
     * #define CL_INCOMPATIBLE_COMMAND_QUEUE_KHR -1140
     * }
     */
    public static int CL_INCOMPATIBLE_COMMAND_QUEUE_KHR() {
        return (int)-1140L;
    }
    /**
     * {@snippet :
     * #define CL_KHR_COMMAND_BUFFER_MULTI_DEVICE_EXTENSION_NAME "cl_khr_command_buffer_multi_device"
     * }
     */
    public static MemorySegment CL_KHR_COMMAND_BUFFER_MULTI_DEVICE_EXTENSION_NAME() {
        return constants$258.const$5;
    }
    /**
     * {@snippet :
     * #define CL_COMMAND_BUFFER_PLATFORM_UNIVERSAL_SYNC_KHR 1
     * }
     */
    public static int CL_COMMAND_BUFFER_PLATFORM_UNIVERSAL_SYNC_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define CL_COMMAND_BUFFER_PLATFORM_REMAP_QUEUES_KHR 2
     * }
     */
    public static int CL_COMMAND_BUFFER_PLATFORM_REMAP_QUEUES_KHR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define CL_COMMAND_BUFFER_PLATFORM_AUTOMATIC_REMAP_KHR 4
     * }
     */
    public static int CL_COMMAND_BUFFER_PLATFORM_AUTOMATIC_REMAP_KHR() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define CL_COMMAND_BUFFER_CAPABILITY_MULTIPLE_QUEUE_KHR 16
     * }
     */
    public static int CL_COMMAND_BUFFER_CAPABILITY_MULTIPLE_QUEUE_KHR() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define CL_COMMAND_BUFFER_DEVICE_SIDE_SYNC_KHR 4
     * }
     */
    public static int CL_COMMAND_BUFFER_DEVICE_SIDE_SYNC_KHR() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define CL_KHR_COMMAND_BUFFER_MUTABLE_DISPATCH_EXTENSION_NAME "cl_khr_command_buffer_mutable_dispatch"
     * }
     */
    public static MemorySegment CL_KHR_COMMAND_BUFFER_MUTABLE_DISPATCH_EXTENSION_NAME() {
        return constants$259.const$0;
    }
    /**
     * {@snippet :
     * #define CL_COMMAND_BUFFER_MUTABLE_KHR 2
     * }
     */
    public static int CL_COMMAND_BUFFER_MUTABLE_KHR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define CL_INVALID_MUTABLE_COMMAND_KHR -1141
     * }
     */
    public static int CL_INVALID_MUTABLE_COMMAND_KHR() {
        return (int)-1141L;
    }
    /**
     * {@snippet :
     * #define CL_MUTABLE_DISPATCH_GLOBAL_OFFSET_KHR 1
     * }
     */
    public static int CL_MUTABLE_DISPATCH_GLOBAL_OFFSET_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define CL_MUTABLE_DISPATCH_GLOBAL_SIZE_KHR 2
     * }
     */
    public static int CL_MUTABLE_DISPATCH_GLOBAL_SIZE_KHR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define CL_MUTABLE_DISPATCH_LOCAL_SIZE_KHR 4
     * }
     */
    public static int CL_MUTABLE_DISPATCH_LOCAL_SIZE_KHR() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define CL_MUTABLE_DISPATCH_ARGUMENTS_KHR 8
     * }
     */
    public static int CL_MUTABLE_DISPATCH_ARGUMENTS_KHR() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define CL_MUTABLE_DISPATCH_EXEC_INFO_KHR 16
     * }
     */
    public static int CL_MUTABLE_DISPATCH_EXEC_INFO_KHR() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define CL_KHR_FP64_EXTENSION_NAME "cl_khr_fp64"
     * }
     */
    public static MemorySegment CL_KHR_FP64_EXTENSION_NAME() {
        return constants$259.const$1;
    }
    /**
     * {@snippet :
     * #define CL_KHR_FP16_EXTENSION_NAME "cl_khr_fp16"
     * }
     */
    public static MemorySegment CL_KHR_FP16_EXTENSION_NAME() {
        return constants$259.const$2;
    }
    /**
     * {@snippet :
     * #define CL_APPLE_SETMEMOBJECTDESTRUCTOR_EXTENSION_NAME "cl_APPLE_SetMemObjectDestructor"
     * }
     */
    public static MemorySegment CL_APPLE_SETMEMOBJECTDESTRUCTOR_EXTENSION_NAME() {
        return constants$259.const$3;
    }
    /**
     * {@snippet :
     * #define CL_APPLE_CONTEXTLOGGINGFUNCTIONS_EXTENSION_NAME "cl_APPLE_ContextLoggingFunctions"
     * }
     */
    public static MemorySegment CL_APPLE_CONTEXTLOGGINGFUNCTIONS_EXTENSION_NAME() {
        return constants$259.const$4;
    }
    /**
     * {@snippet :
     * #define CL_KHR_ICD_EXTENSION_NAME "cl_khr_icd"
     * }
     */
    public static MemorySegment CL_KHR_ICD_EXTENSION_NAME() {
        return constants$259.const$5;
    }
    /**
     * {@snippet :
     * #define CL_PLATFORM_NOT_FOUND_KHR -1001
     * }
     */
    public static int CL_PLATFORM_NOT_FOUND_KHR() {
        return (int)-1001L;
    }
    /**
     * {@snippet :
     * #define CL_KHR_IL_PROGRAM_EXTENSION_NAME "cl_khr_il_program"
     * }
     */
    public static MemorySegment CL_KHR_IL_PROGRAM_EXTENSION_NAME() {
        return constants$260.const$0;
    }
    /**
     * {@snippet :
     * #define CL_KHR_IMAGE2D_FROM_BUFFER_EXTENSION_NAME "cl_khr_image2d_from_buffer"
     * }
     */
    public static MemorySegment CL_KHR_IMAGE2D_FROM_BUFFER_EXTENSION_NAME() {
        return constants$260.const$1;
    }
    /**
     * {@snippet :
     * #define CL_KHR_INITIALIZE_MEMORY_EXTENSION_NAME "cl_khr_initialize_memory"
     * }
     */
    public static MemorySegment CL_KHR_INITIALIZE_MEMORY_EXTENSION_NAME() {
        return constants$260.const$2;
    }
    /**
     * {@snippet :
     * #define CL_KHR_TERMINATE_CONTEXT_EXTENSION_NAME "cl_khr_terminate_context"
     * }
     */
    public static MemorySegment CL_KHR_TERMINATE_CONTEXT_EXTENSION_NAME() {
        return constants$260.const$3;
    }
    /**
     * {@snippet :
     * #define CL_DEVICE_TERMINATE_CAPABILITY_CONTEXT_KHR 1
     * }
     */
    public static int CL_DEVICE_TERMINATE_CAPABILITY_CONTEXT_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define CL_CONTEXT_TERMINATED_KHR -1121
     * }
     */
    public static int CL_CONTEXT_TERMINATED_KHR() {
        return (int)-1121L;
    }
    /**
     * {@snippet :
     * #define CL_KHR_SPIR_EXTENSION_NAME "cl_khr_spir"
     * }
     */
    public static MemorySegment CL_KHR_SPIR_EXTENSION_NAME() {
        return constants$260.const$4;
    }
    /**
     * {@snippet :
     * #define CL_KHR_CREATE_COMMAND_QUEUE_EXTENSION_NAME "cl_khr_create_command_queue"
     * }
     */
    public static MemorySegment CL_KHR_CREATE_COMMAND_QUEUE_EXTENSION_NAME() {
        return constants$260.const$5;
    }
    /**
     * {@snippet :
     * #define CL_NV_DEVICE_ATTRIBUTE_QUERY_EXTENSION_NAME "cl_nv_device_attribute_query"
     * }
     */
    public static MemorySegment CL_NV_DEVICE_ATTRIBUTE_QUERY_EXTENSION_NAME() {
        return constants$261.const$0;
    }
    /**
     * {@snippet :
     * #define CL_AMD_DEVICE_ATTRIBUTE_QUERY_EXTENSION_NAME "cl_amd_device_attribute_query"
     * }
     */
    public static MemorySegment CL_AMD_DEVICE_ATTRIBUTE_QUERY_EXTENSION_NAME() {
        return constants$261.const$1;
    }
    /**
     * {@snippet :
     * #define CL_ARM_PRINTF_EXTENSION_NAME "cl_arm_printf"
     * }
     */
    public static MemorySegment CL_ARM_PRINTF_EXTENSION_NAME() {
        return constants$261.const$2;
    }
    /**
     * {@snippet :
     * #define CL_EXT_DEVICE_FISSION_EXTENSION_NAME "cl_ext_device_fission"
     * }
     */
    public static MemorySegment CL_EXT_DEVICE_FISSION_EXTENSION_NAME() {
        return constants$261.const$3;
    }
    /**
     * {@snippet :
     * #define CL_DEVICE_PARTITION_FAILED_EXT -1057
     * }
     */
    public static int CL_DEVICE_PARTITION_FAILED_EXT() {
        return (int)-1057L;
    }
    /**
     * {@snippet :
     * #define CL_INVALID_PARTITION_COUNT_EXT -1058
     * }
     */
    public static int CL_INVALID_PARTITION_COUNT_EXT() {
        return (int)-1058L;
    }
    /**
     * {@snippet :
     * #define CL_INVALID_PARTITION_NAME_EXT -1059
     * }
     */
    public static int CL_INVALID_PARTITION_NAME_EXT() {
        return (int)-1059L;
    }
    /**
     * {@snippet :
     * #define CL_PROPERTIES_LIST_END_EXT 0
     * }
     */
    public static long CL_PROPERTIES_LIST_END_EXT() {
        return 0L;
    }
    /**
     * {@snippet :
     * #define CL_PARTITION_BY_COUNTS_LIST_END_EXT 0
     * }
     */
    public static long CL_PARTITION_BY_COUNTS_LIST_END_EXT() {
        return 0L;
    }
    /**
     * {@snippet :
     * #define CL_PARTITION_BY_NAMES_LIST_END_EXT -1
     * }
     */
    public static long CL_PARTITION_BY_NAMES_LIST_END_EXT() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define CL_EXT_MIGRATE_MEMOBJECT_EXTENSION_NAME "cl_ext_migrate_memobject"
     * }
     */
    public static MemorySegment CL_EXT_MIGRATE_MEMOBJECT_EXTENSION_NAME() {
        return constants$261.const$4;
    }
    /**
     * {@snippet :
     * #define CL_MIGRATE_MEM_OBJECT_HOST_EXT 1
     * }
     */
    public static int CL_MIGRATE_MEM_OBJECT_HOST_EXT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define CL_EXT_CXX_FOR_OPENCL_EXTENSION_NAME "cl_ext_cxx_for_opencl"
     * }
     */
    public static MemorySegment CL_EXT_CXX_FOR_OPENCL_EXTENSION_NAME() {
        return constants$261.const$5;
    }
}



// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _IMAGE_LOAD_CONFIG_DIRECTORY32 {
 *     DWORD Size;
 *     DWORD TimeDateStamp;
 *     WORD MajorVersion;
 *     WORD MinorVersion;
 *     DWORD GlobalFlagsClear;
 *     DWORD GlobalFlagsSet;
 *     DWORD CriticalSectionDefaultTimeout;
 *     DWORD DeCommitFreeBlockThreshold;
 *     DWORD DeCommitTotalFreeThreshold;
 *     DWORD LockPrefixTable;
 *     DWORD MaximumAllocationSize;
 *     DWORD VirtualMemoryThreshold;
 *     DWORD ProcessHeapFlags;
 *     DWORD ProcessAffinityMask;
 *     WORD CSDVersion;
 *     WORD DependentLoadFlags;
 *     DWORD EditList;
 *     DWORD SecurityCookie;
 *     DWORD SEHandlerTable;
 *     DWORD SEHandlerCount;
 *     DWORD GuardCFCheckFunctionPointer;
 *     DWORD GuardCFDispatchFunctionPointer;
 *     DWORD GuardCFFunctionTable;
 *     DWORD GuardCFFunctionCount;
 *     DWORD GuardFlags;
 *     IMAGE_LOAD_CONFIG_CODE_INTEGRITY CodeIntegrity;
 *     DWORD GuardAddressTakenIatEntryTable;
 *     DWORD GuardAddressTakenIatEntryCount;
 *     DWORD GuardLongJumpTargetTable;
 *     DWORD GuardLongJumpTargetCount;
 *     DWORD DynamicValueRelocTable;
 *     DWORD CHPEMetadataPointer;
 *     DWORD GuardRFFailureRoutine;
 *     DWORD GuardRFFailureRoutineFunctionPointer;
 *     DWORD DynamicValueRelocTableOffset;
 *     WORD DynamicValueRelocTableSection;
 *     WORD Reserved2;
 *     DWORD GuardRFVerifyStackPointerFunctionPointer;
 *     DWORD HotPatchTableOffset;
 *     DWORD Reserved3;
 *     DWORD EnclaveConfigurationPointer;
 *     DWORD VolatileMetadataPointer;
 *     DWORD GuardEHContinuationTable;
 *     DWORD GuardEHContinuationCount;
 *     DWORD GuardXFGCheckFunctionPointer;
 *     DWORD GuardXFGDispatchFunctionPointer;
 *     DWORD GuardXFGTableDispatchFunctionPointer;
 *     DWORD CastGuardOsDeterminedFailureMode;
 * };
 * }
 */
public class _IMAGE_LOAD_CONFIG_DIRECTORY32 {

    public static MemoryLayout $LAYOUT() {
        return constants$422.const$5;
    }
    public static VarHandle Size$VH() {
        return constants$423.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Size;
     * }
     */
    public static int Size$get(MemorySegment seg) {
        return (int)constants$423.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Size;
     * }
     */
    public static void Size$set(MemorySegment seg, int x) {
        constants$423.const$0.set(seg, x);
    }
    public static int Size$get(MemorySegment seg, long index) {
        return (int)constants$423.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Size$set(MemorySegment seg, long index, int x) {
        constants$423.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle TimeDateStamp$VH() {
        return constants$423.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD TimeDateStamp;
     * }
     */
    public static int TimeDateStamp$get(MemorySegment seg) {
        return (int)constants$423.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD TimeDateStamp;
     * }
     */
    public static void TimeDateStamp$set(MemorySegment seg, int x) {
        constants$423.const$1.set(seg, x);
    }
    public static int TimeDateStamp$get(MemorySegment seg, long index) {
        return (int)constants$423.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void TimeDateStamp$set(MemorySegment seg, long index, int x) {
        constants$423.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MajorVersion$VH() {
        return constants$423.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD MajorVersion;
     * }
     */
    public static short MajorVersion$get(MemorySegment seg) {
        return (short)constants$423.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD MajorVersion;
     * }
     */
    public static void MajorVersion$set(MemorySegment seg, short x) {
        constants$423.const$2.set(seg, x);
    }
    public static short MajorVersion$get(MemorySegment seg, long index) {
        return (short)constants$423.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void MajorVersion$set(MemorySegment seg, long index, short x) {
        constants$423.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MinorVersion$VH() {
        return constants$423.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD MinorVersion;
     * }
     */
    public static short MinorVersion$get(MemorySegment seg) {
        return (short)constants$423.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD MinorVersion;
     * }
     */
    public static void MinorVersion$set(MemorySegment seg, short x) {
        constants$423.const$3.set(seg, x);
    }
    public static short MinorVersion$get(MemorySegment seg, long index) {
        return (short)constants$423.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void MinorVersion$set(MemorySegment seg, long index, short x) {
        constants$423.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle GlobalFlagsClear$VH() {
        return constants$423.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD GlobalFlagsClear;
     * }
     */
    public static int GlobalFlagsClear$get(MemorySegment seg) {
        return (int)constants$423.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD GlobalFlagsClear;
     * }
     */
    public static void GlobalFlagsClear$set(MemorySegment seg, int x) {
        constants$423.const$4.set(seg, x);
    }
    public static int GlobalFlagsClear$get(MemorySegment seg, long index) {
        return (int)constants$423.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void GlobalFlagsClear$set(MemorySegment seg, long index, int x) {
        constants$423.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle GlobalFlagsSet$VH() {
        return constants$423.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD GlobalFlagsSet;
     * }
     */
    public static int GlobalFlagsSet$get(MemorySegment seg) {
        return (int)constants$423.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD GlobalFlagsSet;
     * }
     */
    public static void GlobalFlagsSet$set(MemorySegment seg, int x) {
        constants$423.const$5.set(seg, x);
    }
    public static int GlobalFlagsSet$get(MemorySegment seg, long index) {
        return (int)constants$423.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GlobalFlagsSet$set(MemorySegment seg, long index, int x) {
        constants$423.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle CriticalSectionDefaultTimeout$VH() {
        return constants$424.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD CriticalSectionDefaultTimeout;
     * }
     */
    public static int CriticalSectionDefaultTimeout$get(MemorySegment seg) {
        return (int)constants$424.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD CriticalSectionDefaultTimeout;
     * }
     */
    public static void CriticalSectionDefaultTimeout$set(MemorySegment seg, int x) {
        constants$424.const$0.set(seg, x);
    }
    public static int CriticalSectionDefaultTimeout$get(MemorySegment seg, long index) {
        return (int)constants$424.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void CriticalSectionDefaultTimeout$set(MemorySegment seg, long index, int x) {
        constants$424.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle DeCommitFreeBlockThreshold$VH() {
        return constants$424.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD DeCommitFreeBlockThreshold;
     * }
     */
    public static int DeCommitFreeBlockThreshold$get(MemorySegment seg) {
        return (int)constants$424.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD DeCommitFreeBlockThreshold;
     * }
     */
    public static void DeCommitFreeBlockThreshold$set(MemorySegment seg, int x) {
        constants$424.const$1.set(seg, x);
    }
    public static int DeCommitFreeBlockThreshold$get(MemorySegment seg, long index) {
        return (int)constants$424.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void DeCommitFreeBlockThreshold$set(MemorySegment seg, long index, int x) {
        constants$424.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle DeCommitTotalFreeThreshold$VH() {
        return constants$424.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD DeCommitTotalFreeThreshold;
     * }
     */
    public static int DeCommitTotalFreeThreshold$get(MemorySegment seg) {
        return (int)constants$424.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD DeCommitTotalFreeThreshold;
     * }
     */
    public static void DeCommitTotalFreeThreshold$set(MemorySegment seg, int x) {
        constants$424.const$2.set(seg, x);
    }
    public static int DeCommitTotalFreeThreshold$get(MemorySegment seg, long index) {
        return (int)constants$424.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void DeCommitTotalFreeThreshold$set(MemorySegment seg, long index, int x) {
        constants$424.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle LockPrefixTable$VH() {
        return constants$424.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD LockPrefixTable;
     * }
     */
    public static int LockPrefixTable$get(MemorySegment seg) {
        return (int)constants$424.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD LockPrefixTable;
     * }
     */
    public static void LockPrefixTable$set(MemorySegment seg, int x) {
        constants$424.const$3.set(seg, x);
    }
    public static int LockPrefixTable$get(MemorySegment seg, long index) {
        return (int)constants$424.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void LockPrefixTable$set(MemorySegment seg, long index, int x) {
        constants$424.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MaximumAllocationSize$VH() {
        return constants$424.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD MaximumAllocationSize;
     * }
     */
    public static int MaximumAllocationSize$get(MemorySegment seg) {
        return (int)constants$424.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD MaximumAllocationSize;
     * }
     */
    public static void MaximumAllocationSize$set(MemorySegment seg, int x) {
        constants$424.const$4.set(seg, x);
    }
    public static int MaximumAllocationSize$get(MemorySegment seg, long index) {
        return (int)constants$424.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void MaximumAllocationSize$set(MemorySegment seg, long index, int x) {
        constants$424.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle VirtualMemoryThreshold$VH() {
        return constants$424.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD VirtualMemoryThreshold;
     * }
     */
    public static int VirtualMemoryThreshold$get(MemorySegment seg) {
        return (int)constants$424.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD VirtualMemoryThreshold;
     * }
     */
    public static void VirtualMemoryThreshold$set(MemorySegment seg, int x) {
        constants$424.const$5.set(seg, x);
    }
    public static int VirtualMemoryThreshold$get(MemorySegment seg, long index) {
        return (int)constants$424.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void VirtualMemoryThreshold$set(MemorySegment seg, long index, int x) {
        constants$424.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ProcessHeapFlags$VH() {
        return constants$425.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD ProcessHeapFlags;
     * }
     */
    public static int ProcessHeapFlags$get(MemorySegment seg) {
        return (int)constants$425.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD ProcessHeapFlags;
     * }
     */
    public static void ProcessHeapFlags$set(MemorySegment seg, int x) {
        constants$425.const$0.set(seg, x);
    }
    public static int ProcessHeapFlags$get(MemorySegment seg, long index) {
        return (int)constants$425.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void ProcessHeapFlags$set(MemorySegment seg, long index, int x) {
        constants$425.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ProcessAffinityMask$VH() {
        return constants$425.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD ProcessAffinityMask;
     * }
     */
    public static int ProcessAffinityMask$get(MemorySegment seg) {
        return (int)constants$425.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD ProcessAffinityMask;
     * }
     */
    public static void ProcessAffinityMask$set(MemorySegment seg, int x) {
        constants$425.const$1.set(seg, x);
    }
    public static int ProcessAffinityMask$get(MemorySegment seg, long index) {
        return (int)constants$425.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void ProcessAffinityMask$set(MemorySegment seg, long index, int x) {
        constants$425.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle CSDVersion$VH() {
        return constants$425.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD CSDVersion;
     * }
     */
    public static short CSDVersion$get(MemorySegment seg) {
        return (short)constants$425.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD CSDVersion;
     * }
     */
    public static void CSDVersion$set(MemorySegment seg, short x) {
        constants$425.const$2.set(seg, x);
    }
    public static short CSDVersion$get(MemorySegment seg, long index) {
        return (short)constants$425.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void CSDVersion$set(MemorySegment seg, long index, short x) {
        constants$425.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle DependentLoadFlags$VH() {
        return constants$425.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD DependentLoadFlags;
     * }
     */
    public static short DependentLoadFlags$get(MemorySegment seg) {
        return (short)constants$425.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD DependentLoadFlags;
     * }
     */
    public static void DependentLoadFlags$set(MemorySegment seg, short x) {
        constants$425.const$3.set(seg, x);
    }
    public static short DependentLoadFlags$get(MemorySegment seg, long index) {
        return (short)constants$425.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void DependentLoadFlags$set(MemorySegment seg, long index, short x) {
        constants$425.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle EditList$VH() {
        return constants$425.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD EditList;
     * }
     */
    public static int EditList$get(MemorySegment seg) {
        return (int)constants$425.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD EditList;
     * }
     */
    public static void EditList$set(MemorySegment seg, int x) {
        constants$425.const$4.set(seg, x);
    }
    public static int EditList$get(MemorySegment seg, long index) {
        return (int)constants$425.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void EditList$set(MemorySegment seg, long index, int x) {
        constants$425.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle SecurityCookie$VH() {
        return constants$425.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD SecurityCookie;
     * }
     */
    public static int SecurityCookie$get(MemorySegment seg) {
        return (int)constants$425.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD SecurityCookie;
     * }
     */
    public static void SecurityCookie$set(MemorySegment seg, int x) {
        constants$425.const$5.set(seg, x);
    }
    public static int SecurityCookie$get(MemorySegment seg, long index) {
        return (int)constants$425.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void SecurityCookie$set(MemorySegment seg, long index, int x) {
        constants$425.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle SEHandlerTable$VH() {
        return constants$426.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD SEHandlerTable;
     * }
     */
    public static int SEHandlerTable$get(MemorySegment seg) {
        return (int)constants$426.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD SEHandlerTable;
     * }
     */
    public static void SEHandlerTable$set(MemorySegment seg, int x) {
        constants$426.const$0.set(seg, x);
    }
    public static int SEHandlerTable$get(MemorySegment seg, long index) {
        return (int)constants$426.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void SEHandlerTable$set(MemorySegment seg, long index, int x) {
        constants$426.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle SEHandlerCount$VH() {
        return constants$426.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD SEHandlerCount;
     * }
     */
    public static int SEHandlerCount$get(MemorySegment seg) {
        return (int)constants$426.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD SEHandlerCount;
     * }
     */
    public static void SEHandlerCount$set(MemorySegment seg, int x) {
        constants$426.const$1.set(seg, x);
    }
    public static int SEHandlerCount$get(MemorySegment seg, long index) {
        return (int)constants$426.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void SEHandlerCount$set(MemorySegment seg, long index, int x) {
        constants$426.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle GuardCFCheckFunctionPointer$VH() {
        return constants$426.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD GuardCFCheckFunctionPointer;
     * }
     */
    public static int GuardCFCheckFunctionPointer$get(MemorySegment seg) {
        return (int)constants$426.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD GuardCFCheckFunctionPointer;
     * }
     */
    public static void GuardCFCheckFunctionPointer$set(MemorySegment seg, int x) {
        constants$426.const$2.set(seg, x);
    }
    public static int GuardCFCheckFunctionPointer$get(MemorySegment seg, long index) {
        return (int)constants$426.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void GuardCFCheckFunctionPointer$set(MemorySegment seg, long index, int x) {
        constants$426.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle GuardCFDispatchFunctionPointer$VH() {
        return constants$426.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD GuardCFDispatchFunctionPointer;
     * }
     */
    public static int GuardCFDispatchFunctionPointer$get(MemorySegment seg) {
        return (int)constants$426.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD GuardCFDispatchFunctionPointer;
     * }
     */
    public static void GuardCFDispatchFunctionPointer$set(MemorySegment seg, int x) {
        constants$426.const$3.set(seg, x);
    }
    public static int GuardCFDispatchFunctionPointer$get(MemorySegment seg, long index) {
        return (int)constants$426.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void GuardCFDispatchFunctionPointer$set(MemorySegment seg, long index, int x) {
        constants$426.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle GuardCFFunctionTable$VH() {
        return constants$426.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD GuardCFFunctionTable;
     * }
     */
    public static int GuardCFFunctionTable$get(MemorySegment seg) {
        return (int)constants$426.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD GuardCFFunctionTable;
     * }
     */
    public static void GuardCFFunctionTable$set(MemorySegment seg, int x) {
        constants$426.const$4.set(seg, x);
    }
    public static int GuardCFFunctionTable$get(MemorySegment seg, long index) {
        return (int)constants$426.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void GuardCFFunctionTable$set(MemorySegment seg, long index, int x) {
        constants$426.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle GuardCFFunctionCount$VH() {
        return constants$426.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD GuardCFFunctionCount;
     * }
     */
    public static int GuardCFFunctionCount$get(MemorySegment seg) {
        return (int)constants$426.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD GuardCFFunctionCount;
     * }
     */
    public static void GuardCFFunctionCount$set(MemorySegment seg, int x) {
        constants$426.const$5.set(seg, x);
    }
    public static int GuardCFFunctionCount$get(MemorySegment seg, long index) {
        return (int)constants$426.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GuardCFFunctionCount$set(MemorySegment seg, long index, int x) {
        constants$426.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle GuardFlags$VH() {
        return constants$427.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD GuardFlags;
     * }
     */
    public static int GuardFlags$get(MemorySegment seg) {
        return (int)constants$427.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD GuardFlags;
     * }
     */
    public static void GuardFlags$set(MemorySegment seg, int x) {
        constants$427.const$0.set(seg, x);
    }
    public static int GuardFlags$get(MemorySegment seg, long index) {
        return (int)constants$427.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void GuardFlags$set(MemorySegment seg, long index, int x) {
        constants$427.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment CodeIntegrity$slice(MemorySegment seg) {
        return seg.asSlice(92, 12);
    }
    public static VarHandle GuardAddressTakenIatEntryTable$VH() {
        return constants$427.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD GuardAddressTakenIatEntryTable;
     * }
     */
    public static int GuardAddressTakenIatEntryTable$get(MemorySegment seg) {
        return (int)constants$427.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD GuardAddressTakenIatEntryTable;
     * }
     */
    public static void GuardAddressTakenIatEntryTable$set(MemorySegment seg, int x) {
        constants$427.const$1.set(seg, x);
    }
    public static int GuardAddressTakenIatEntryTable$get(MemorySegment seg, long index) {
        return (int)constants$427.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void GuardAddressTakenIatEntryTable$set(MemorySegment seg, long index, int x) {
        constants$427.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle GuardAddressTakenIatEntryCount$VH() {
        return constants$427.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD GuardAddressTakenIatEntryCount;
     * }
     */
    public static int GuardAddressTakenIatEntryCount$get(MemorySegment seg) {
        return (int)constants$427.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD GuardAddressTakenIatEntryCount;
     * }
     */
    public static void GuardAddressTakenIatEntryCount$set(MemorySegment seg, int x) {
        constants$427.const$2.set(seg, x);
    }
    public static int GuardAddressTakenIatEntryCount$get(MemorySegment seg, long index) {
        return (int)constants$427.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void GuardAddressTakenIatEntryCount$set(MemorySegment seg, long index, int x) {
        constants$427.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle GuardLongJumpTargetTable$VH() {
        return constants$427.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD GuardLongJumpTargetTable;
     * }
     */
    public static int GuardLongJumpTargetTable$get(MemorySegment seg) {
        return (int)constants$427.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD GuardLongJumpTargetTable;
     * }
     */
    public static void GuardLongJumpTargetTable$set(MemorySegment seg, int x) {
        constants$427.const$3.set(seg, x);
    }
    public static int GuardLongJumpTargetTable$get(MemorySegment seg, long index) {
        return (int)constants$427.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void GuardLongJumpTargetTable$set(MemorySegment seg, long index, int x) {
        constants$427.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle GuardLongJumpTargetCount$VH() {
        return constants$427.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD GuardLongJumpTargetCount;
     * }
     */
    public static int GuardLongJumpTargetCount$get(MemorySegment seg) {
        return (int)constants$427.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD GuardLongJumpTargetCount;
     * }
     */
    public static void GuardLongJumpTargetCount$set(MemorySegment seg, int x) {
        constants$427.const$4.set(seg, x);
    }
    public static int GuardLongJumpTargetCount$get(MemorySegment seg, long index) {
        return (int)constants$427.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void GuardLongJumpTargetCount$set(MemorySegment seg, long index, int x) {
        constants$427.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle DynamicValueRelocTable$VH() {
        return constants$427.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD DynamicValueRelocTable;
     * }
     */
    public static int DynamicValueRelocTable$get(MemorySegment seg) {
        return (int)constants$427.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD DynamicValueRelocTable;
     * }
     */
    public static void DynamicValueRelocTable$set(MemorySegment seg, int x) {
        constants$427.const$5.set(seg, x);
    }
    public static int DynamicValueRelocTable$get(MemorySegment seg, long index) {
        return (int)constants$427.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void DynamicValueRelocTable$set(MemorySegment seg, long index, int x) {
        constants$427.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle CHPEMetadataPointer$VH() {
        return constants$428.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD CHPEMetadataPointer;
     * }
     */
    public static int CHPEMetadataPointer$get(MemorySegment seg) {
        return (int)constants$428.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD CHPEMetadataPointer;
     * }
     */
    public static void CHPEMetadataPointer$set(MemorySegment seg, int x) {
        constants$428.const$0.set(seg, x);
    }
    public static int CHPEMetadataPointer$get(MemorySegment seg, long index) {
        return (int)constants$428.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void CHPEMetadataPointer$set(MemorySegment seg, long index, int x) {
        constants$428.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle GuardRFFailureRoutine$VH() {
        return constants$428.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD GuardRFFailureRoutine;
     * }
     */
    public static int GuardRFFailureRoutine$get(MemorySegment seg) {
        return (int)constants$428.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD GuardRFFailureRoutine;
     * }
     */
    public static void GuardRFFailureRoutine$set(MemorySegment seg, int x) {
        constants$428.const$1.set(seg, x);
    }
    public static int GuardRFFailureRoutine$get(MemorySegment seg, long index) {
        return (int)constants$428.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void GuardRFFailureRoutine$set(MemorySegment seg, long index, int x) {
        constants$428.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle GuardRFFailureRoutineFunctionPointer$VH() {
        return constants$428.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD GuardRFFailureRoutineFunctionPointer;
     * }
     */
    public static int GuardRFFailureRoutineFunctionPointer$get(MemorySegment seg) {
        return (int)constants$428.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD GuardRFFailureRoutineFunctionPointer;
     * }
     */
    public static void GuardRFFailureRoutineFunctionPointer$set(MemorySegment seg, int x) {
        constants$428.const$2.set(seg, x);
    }
    public static int GuardRFFailureRoutineFunctionPointer$get(MemorySegment seg, long index) {
        return (int)constants$428.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void GuardRFFailureRoutineFunctionPointer$set(MemorySegment seg, long index, int x) {
        constants$428.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle DynamicValueRelocTableOffset$VH() {
        return constants$428.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD DynamicValueRelocTableOffset;
     * }
     */
    public static int DynamicValueRelocTableOffset$get(MemorySegment seg) {
        return (int)constants$428.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD DynamicValueRelocTableOffset;
     * }
     */
    public static void DynamicValueRelocTableOffset$set(MemorySegment seg, int x) {
        constants$428.const$3.set(seg, x);
    }
    public static int DynamicValueRelocTableOffset$get(MemorySegment seg, long index) {
        return (int)constants$428.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void DynamicValueRelocTableOffset$set(MemorySegment seg, long index, int x) {
        constants$428.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle DynamicValueRelocTableSection$VH() {
        return constants$428.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD DynamicValueRelocTableSection;
     * }
     */
    public static short DynamicValueRelocTableSection$get(MemorySegment seg) {
        return (short)constants$428.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD DynamicValueRelocTableSection;
     * }
     */
    public static void DynamicValueRelocTableSection$set(MemorySegment seg, short x) {
        constants$428.const$4.set(seg, x);
    }
    public static short DynamicValueRelocTableSection$get(MemorySegment seg, long index) {
        return (short)constants$428.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void DynamicValueRelocTableSection$set(MemorySegment seg, long index, short x) {
        constants$428.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Reserved2$VH() {
        return constants$428.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD Reserved2;
     * }
     */
    public static short Reserved2$get(MemorySegment seg) {
        return (short)constants$428.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD Reserved2;
     * }
     */
    public static void Reserved2$set(MemorySegment seg, short x) {
        constants$428.const$5.set(seg, x);
    }
    public static short Reserved2$get(MemorySegment seg, long index) {
        return (short)constants$428.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void Reserved2$set(MemorySegment seg, long index, short x) {
        constants$428.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle GuardRFVerifyStackPointerFunctionPointer$VH() {
        return constants$429.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD GuardRFVerifyStackPointerFunctionPointer;
     * }
     */
    public static int GuardRFVerifyStackPointerFunctionPointer$get(MemorySegment seg) {
        return (int)constants$429.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD GuardRFVerifyStackPointerFunctionPointer;
     * }
     */
    public static void GuardRFVerifyStackPointerFunctionPointer$set(MemorySegment seg, int x) {
        constants$429.const$0.set(seg, x);
    }
    public static int GuardRFVerifyStackPointerFunctionPointer$get(MemorySegment seg, long index) {
        return (int)constants$429.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void GuardRFVerifyStackPointerFunctionPointer$set(MemorySegment seg, long index, int x) {
        constants$429.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle HotPatchTableOffset$VH() {
        return constants$429.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD HotPatchTableOffset;
     * }
     */
    public static int HotPatchTableOffset$get(MemorySegment seg) {
        return (int)constants$429.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD HotPatchTableOffset;
     * }
     */
    public static void HotPatchTableOffset$set(MemorySegment seg, int x) {
        constants$429.const$1.set(seg, x);
    }
    public static int HotPatchTableOffset$get(MemorySegment seg, long index) {
        return (int)constants$429.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void HotPatchTableOffset$set(MemorySegment seg, long index, int x) {
        constants$429.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Reserved3$VH() {
        return constants$429.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Reserved3;
     * }
     */
    public static int Reserved3$get(MemorySegment seg) {
        return (int)constants$429.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Reserved3;
     * }
     */
    public static void Reserved3$set(MemorySegment seg, int x) {
        constants$429.const$2.set(seg, x);
    }
    public static int Reserved3$get(MemorySegment seg, long index) {
        return (int)constants$429.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void Reserved3$set(MemorySegment seg, long index, int x) {
        constants$429.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle EnclaveConfigurationPointer$VH() {
        return constants$429.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD EnclaveConfigurationPointer;
     * }
     */
    public static int EnclaveConfigurationPointer$get(MemorySegment seg) {
        return (int)constants$429.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD EnclaveConfigurationPointer;
     * }
     */
    public static void EnclaveConfigurationPointer$set(MemorySegment seg, int x) {
        constants$429.const$3.set(seg, x);
    }
    public static int EnclaveConfigurationPointer$get(MemorySegment seg, long index) {
        return (int)constants$429.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void EnclaveConfigurationPointer$set(MemorySegment seg, long index, int x) {
        constants$429.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle VolatileMetadataPointer$VH() {
        return constants$429.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD VolatileMetadataPointer;
     * }
     */
    public static int VolatileMetadataPointer$get(MemorySegment seg) {
        return (int)constants$429.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD VolatileMetadataPointer;
     * }
     */
    public static void VolatileMetadataPointer$set(MemorySegment seg, int x) {
        constants$429.const$4.set(seg, x);
    }
    public static int VolatileMetadataPointer$get(MemorySegment seg, long index) {
        return (int)constants$429.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void VolatileMetadataPointer$set(MemorySegment seg, long index, int x) {
        constants$429.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle GuardEHContinuationTable$VH() {
        return constants$429.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD GuardEHContinuationTable;
     * }
     */
    public static int GuardEHContinuationTable$get(MemorySegment seg) {
        return (int)constants$429.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD GuardEHContinuationTable;
     * }
     */
    public static void GuardEHContinuationTable$set(MemorySegment seg, int x) {
        constants$429.const$5.set(seg, x);
    }
    public static int GuardEHContinuationTable$get(MemorySegment seg, long index) {
        return (int)constants$429.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GuardEHContinuationTable$set(MemorySegment seg, long index, int x) {
        constants$429.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle GuardEHContinuationCount$VH() {
        return constants$430.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD GuardEHContinuationCount;
     * }
     */
    public static int GuardEHContinuationCount$get(MemorySegment seg) {
        return (int)constants$430.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD GuardEHContinuationCount;
     * }
     */
    public static void GuardEHContinuationCount$set(MemorySegment seg, int x) {
        constants$430.const$0.set(seg, x);
    }
    public static int GuardEHContinuationCount$get(MemorySegment seg, long index) {
        return (int)constants$430.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void GuardEHContinuationCount$set(MemorySegment seg, long index, int x) {
        constants$430.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle GuardXFGCheckFunctionPointer$VH() {
        return constants$430.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD GuardXFGCheckFunctionPointer;
     * }
     */
    public static int GuardXFGCheckFunctionPointer$get(MemorySegment seg) {
        return (int)constants$430.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD GuardXFGCheckFunctionPointer;
     * }
     */
    public static void GuardXFGCheckFunctionPointer$set(MemorySegment seg, int x) {
        constants$430.const$1.set(seg, x);
    }
    public static int GuardXFGCheckFunctionPointer$get(MemorySegment seg, long index) {
        return (int)constants$430.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void GuardXFGCheckFunctionPointer$set(MemorySegment seg, long index, int x) {
        constants$430.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle GuardXFGDispatchFunctionPointer$VH() {
        return constants$430.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD GuardXFGDispatchFunctionPointer;
     * }
     */
    public static int GuardXFGDispatchFunctionPointer$get(MemorySegment seg) {
        return (int)constants$430.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD GuardXFGDispatchFunctionPointer;
     * }
     */
    public static void GuardXFGDispatchFunctionPointer$set(MemorySegment seg, int x) {
        constants$430.const$2.set(seg, x);
    }
    public static int GuardXFGDispatchFunctionPointer$get(MemorySegment seg, long index) {
        return (int)constants$430.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void GuardXFGDispatchFunctionPointer$set(MemorySegment seg, long index, int x) {
        constants$430.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle GuardXFGTableDispatchFunctionPointer$VH() {
        return constants$430.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD GuardXFGTableDispatchFunctionPointer;
     * }
     */
    public static int GuardXFGTableDispatchFunctionPointer$get(MemorySegment seg) {
        return (int)constants$430.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD GuardXFGTableDispatchFunctionPointer;
     * }
     */
    public static void GuardXFGTableDispatchFunctionPointer$set(MemorySegment seg, int x) {
        constants$430.const$3.set(seg, x);
    }
    public static int GuardXFGTableDispatchFunctionPointer$get(MemorySegment seg, long index) {
        return (int)constants$430.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void GuardXFGTableDispatchFunctionPointer$set(MemorySegment seg, long index, int x) {
        constants$430.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle CastGuardOsDeterminedFailureMode$VH() {
        return constants$430.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD CastGuardOsDeterminedFailureMode;
     * }
     */
    public static int CastGuardOsDeterminedFailureMode$get(MemorySegment seg) {
        return (int)constants$430.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD CastGuardOsDeterminedFailureMode;
     * }
     */
    public static void CastGuardOsDeterminedFailureMode$set(MemorySegment seg, int x) {
        constants$430.const$4.set(seg, x);
    }
    public static int CastGuardOsDeterminedFailureMode$get(MemorySegment seg, long index) {
        return (int)constants$430.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void CastGuardOsDeterminedFailureMode$set(MemorySegment seg, long index, int x) {
        constants$430.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



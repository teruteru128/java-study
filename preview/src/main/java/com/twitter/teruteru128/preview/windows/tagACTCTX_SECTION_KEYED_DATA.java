// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tagACTCTX_SECTION_KEYED_DATA {
 *     ULONG cbSize;
 *     ULONG ulDataFormatVersion;
 *     PVOID lpData;
 *     ULONG ulLength;
 *     PVOID lpSectionGlobalData;
 *     ULONG ulSectionGlobalDataLength;
 *     PVOID lpSectionBase;
 *     ULONG ulSectionTotalLength;
 *     HANDLE hActCtx;
 *     ULONG ulAssemblyRosterIndex;
 *     ULONG ulFlags;
 *     ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA AssemblyMetadata;
 * };
 * }
 */
public class tagACTCTX_SECTION_KEYED_DATA {

    public static MemoryLayout $LAYOUT() {
        return constants$857.const$0;
    }
    public static VarHandle cbSize$VH() {
        return constants$857.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG cbSize;
     * }
     */
    public static int cbSize$get(MemorySegment seg) {
        return (int)constants$857.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG cbSize;
     * }
     */
    public static void cbSize$set(MemorySegment seg, int x) {
        constants$857.const$1.set(seg, x);
    }
    public static int cbSize$get(MemorySegment seg, long index) {
        return (int)constants$857.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void cbSize$set(MemorySegment seg, long index, int x) {
        constants$857.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ulDataFormatVersion$VH() {
        return constants$857.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG ulDataFormatVersion;
     * }
     */
    public static int ulDataFormatVersion$get(MemorySegment seg) {
        return (int)constants$857.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG ulDataFormatVersion;
     * }
     */
    public static void ulDataFormatVersion$set(MemorySegment seg, int x) {
        constants$857.const$2.set(seg, x);
    }
    public static int ulDataFormatVersion$get(MemorySegment seg, long index) {
        return (int)constants$857.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void ulDataFormatVersion$set(MemorySegment seg, long index, int x) {
        constants$857.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lpData$VH() {
        return constants$857.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PVOID lpData;
     * }
     */
    public static MemorySegment lpData$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$857.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PVOID lpData;
     * }
     */
    public static void lpData$set(MemorySegment seg, MemorySegment x) {
        constants$857.const$3.set(seg, x);
    }
    public static MemorySegment lpData$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$857.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void lpData$set(MemorySegment seg, long index, MemorySegment x) {
        constants$857.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ulLength$VH() {
        return constants$857.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG ulLength;
     * }
     */
    public static int ulLength$get(MemorySegment seg) {
        return (int)constants$857.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG ulLength;
     * }
     */
    public static void ulLength$set(MemorySegment seg, int x) {
        constants$857.const$4.set(seg, x);
    }
    public static int ulLength$get(MemorySegment seg, long index) {
        return (int)constants$857.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void ulLength$set(MemorySegment seg, long index, int x) {
        constants$857.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lpSectionGlobalData$VH() {
        return constants$857.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PVOID lpSectionGlobalData;
     * }
     */
    public static MemorySegment lpSectionGlobalData$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$857.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PVOID lpSectionGlobalData;
     * }
     */
    public static void lpSectionGlobalData$set(MemorySegment seg, MemorySegment x) {
        constants$857.const$5.set(seg, x);
    }
    public static MemorySegment lpSectionGlobalData$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$857.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void lpSectionGlobalData$set(MemorySegment seg, long index, MemorySegment x) {
        constants$857.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ulSectionGlobalDataLength$VH() {
        return constants$858.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG ulSectionGlobalDataLength;
     * }
     */
    public static int ulSectionGlobalDataLength$get(MemorySegment seg) {
        return (int)constants$858.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG ulSectionGlobalDataLength;
     * }
     */
    public static void ulSectionGlobalDataLength$set(MemorySegment seg, int x) {
        constants$858.const$0.set(seg, x);
    }
    public static int ulSectionGlobalDataLength$get(MemorySegment seg, long index) {
        return (int)constants$858.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void ulSectionGlobalDataLength$set(MemorySegment seg, long index, int x) {
        constants$858.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lpSectionBase$VH() {
        return constants$858.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PVOID lpSectionBase;
     * }
     */
    public static MemorySegment lpSectionBase$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$858.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PVOID lpSectionBase;
     * }
     */
    public static void lpSectionBase$set(MemorySegment seg, MemorySegment x) {
        constants$858.const$1.set(seg, x);
    }
    public static MemorySegment lpSectionBase$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$858.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void lpSectionBase$set(MemorySegment seg, long index, MemorySegment x) {
        constants$858.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ulSectionTotalLength$VH() {
        return constants$858.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG ulSectionTotalLength;
     * }
     */
    public static int ulSectionTotalLength$get(MemorySegment seg) {
        return (int)constants$858.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG ulSectionTotalLength;
     * }
     */
    public static void ulSectionTotalLength$set(MemorySegment seg, int x) {
        constants$858.const$2.set(seg, x);
    }
    public static int ulSectionTotalLength$get(MemorySegment seg, long index) {
        return (int)constants$858.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void ulSectionTotalLength$set(MemorySegment seg, long index, int x) {
        constants$858.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hActCtx$VH() {
        return constants$858.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HANDLE hActCtx;
     * }
     */
    public static MemorySegment hActCtx$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$858.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HANDLE hActCtx;
     * }
     */
    public static void hActCtx$set(MemorySegment seg, MemorySegment x) {
        constants$858.const$3.set(seg, x);
    }
    public static MemorySegment hActCtx$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$858.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void hActCtx$set(MemorySegment seg, long index, MemorySegment x) {
        constants$858.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ulAssemblyRosterIndex$VH() {
        return constants$858.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG ulAssemblyRosterIndex;
     * }
     */
    public static int ulAssemblyRosterIndex$get(MemorySegment seg) {
        return (int)constants$858.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG ulAssemblyRosterIndex;
     * }
     */
    public static void ulAssemblyRosterIndex$set(MemorySegment seg, int x) {
        constants$858.const$4.set(seg, x);
    }
    public static int ulAssemblyRosterIndex$get(MemorySegment seg, long index) {
        return (int)constants$858.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void ulAssemblyRosterIndex$set(MemorySegment seg, long index, int x) {
        constants$858.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ulFlags$VH() {
        return constants$858.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG ulFlags;
     * }
     */
    public static int ulFlags$get(MemorySegment seg) {
        return (int)constants$858.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG ulFlags;
     * }
     */
    public static void ulFlags$set(MemorySegment seg, int x) {
        constants$858.const$5.set(seg, x);
    }
    public static int ulFlags$get(MemorySegment seg, long index) {
        return (int)constants$858.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void ulFlags$set(MemorySegment seg, long index, int x) {
        constants$858.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment AssemblyMetadata$slice(MemorySegment seg) {
        return seg.asSlice(72, 40);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



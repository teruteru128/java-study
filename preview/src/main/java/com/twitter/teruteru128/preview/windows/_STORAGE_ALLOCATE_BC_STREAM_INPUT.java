// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _STORAGE_ALLOCATE_BC_STREAM_INPUT {
 *     DWORD Version;
 *     DWORD RequestsPerPeriod;
 *     DWORD Period;
 *     BOOLEAN RetryFailures;
 *     BOOLEAN Discardable;
 *     BOOLEAN Reserved1[2];
 *     DWORD AccessType;
 *     DWORD AccessMode;
 * };
 * }
 */
public class _STORAGE_ALLOCATE_BC_STREAM_INPUT {

    public static MemoryLayout $LAYOUT() {
        return constants$2466.const$1;
    }
    public static VarHandle Version$VH() {
        return constants$2466.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Version;
     * }
     */
    public static int Version$get(MemorySegment seg) {
        return (int)constants$2466.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Version;
     * }
     */
    public static void Version$set(MemorySegment seg, int x) {
        constants$2466.const$2.set(seg, x);
    }
    public static int Version$get(MemorySegment seg, long index) {
        return (int)constants$2466.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, int x) {
        constants$2466.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle RequestsPerPeriod$VH() {
        return constants$2466.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD RequestsPerPeriod;
     * }
     */
    public static int RequestsPerPeriod$get(MemorySegment seg) {
        return (int)constants$2466.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD RequestsPerPeriod;
     * }
     */
    public static void RequestsPerPeriod$set(MemorySegment seg, int x) {
        constants$2466.const$3.set(seg, x);
    }
    public static int RequestsPerPeriod$get(MemorySegment seg, long index) {
        return (int)constants$2466.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void RequestsPerPeriod$set(MemorySegment seg, long index, int x) {
        constants$2466.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Period$VH() {
        return constants$2466.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Period;
     * }
     */
    public static int Period$get(MemorySegment seg) {
        return (int)constants$2466.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Period;
     * }
     */
    public static void Period$set(MemorySegment seg, int x) {
        constants$2466.const$4.set(seg, x);
    }
    public static int Period$get(MemorySegment seg, long index) {
        return (int)constants$2466.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void Period$set(MemorySegment seg, long index, int x) {
        constants$2466.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle RetryFailures$VH() {
        return constants$2466.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BOOLEAN RetryFailures;
     * }
     */
    public static byte RetryFailures$get(MemorySegment seg) {
        return (byte)constants$2466.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BOOLEAN RetryFailures;
     * }
     */
    public static void RetryFailures$set(MemorySegment seg, byte x) {
        constants$2466.const$5.set(seg, x);
    }
    public static byte RetryFailures$get(MemorySegment seg, long index) {
        return (byte)constants$2466.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void RetryFailures$set(MemorySegment seg, long index, byte x) {
        constants$2466.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Discardable$VH() {
        return constants$2467.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BOOLEAN Discardable;
     * }
     */
    public static byte Discardable$get(MemorySegment seg) {
        return (byte)constants$2467.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BOOLEAN Discardable;
     * }
     */
    public static void Discardable$set(MemorySegment seg, byte x) {
        constants$2467.const$0.set(seg, x);
    }
    public static byte Discardable$get(MemorySegment seg, long index) {
        return (byte)constants$2467.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Discardable$set(MemorySegment seg, long index, byte x) {
        constants$2467.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Reserved1$slice(MemorySegment seg) {
        return seg.asSlice(14, 2);
    }
    public static VarHandle AccessType$VH() {
        return constants$2467.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD AccessType;
     * }
     */
    public static int AccessType$get(MemorySegment seg) {
        return (int)constants$2467.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD AccessType;
     * }
     */
    public static void AccessType$set(MemorySegment seg, int x) {
        constants$2467.const$1.set(seg, x);
    }
    public static int AccessType$get(MemorySegment seg, long index) {
        return (int)constants$2467.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void AccessType$set(MemorySegment seg, long index, int x) {
        constants$2467.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle AccessMode$VH() {
        return constants$2467.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD AccessMode;
     * }
     */
    public static int AccessMode$get(MemorySegment seg) {
        return (int)constants$2467.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD AccessMode;
     * }
     */
    public static void AccessMode$set(MemorySegment seg, int x) {
        constants$2467.const$2.set(seg, x);
    }
    public static int AccessMode$get(MemorySegment seg, long index) {
        return (int)constants$2467.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void AccessMode$set(MemorySegment seg, long index, int x) {
        constants$2467.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



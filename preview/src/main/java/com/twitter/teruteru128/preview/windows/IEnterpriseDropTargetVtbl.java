// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IEnterpriseDropTargetVtbl {
 *     HRESULT (*QueryInterface)(IEnterpriseDropTarget*,const IID*,void**);
 *     ULONG (*AddRef)(IEnterpriseDropTarget*);
 *     ULONG (*Release)(IEnterpriseDropTarget*);
 *     HRESULT (*SetDropSourceEnterpriseId)(IEnterpriseDropTarget*,LPCWSTR);
 *     HRESULT (*IsEvaluatingEdpPolicy)(IEnterpriseDropTarget*,BOOL*);
 * };
 * }
 */
public class IEnterpriseDropTargetVtbl {

    public static MemoryLayout $LAYOUT() {
        return constants$3724.const$5;
    }
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IEnterpriseDropTarget*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3725.const$0, fi, constants$37.const$3, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle QueryInterface$VH() {
        return constants$3725.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IEnterpriseDropTarget*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3725.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IEnterpriseDropTarget*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        constants$3725.const$1.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3725.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3725.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, Arena scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*AddRef)(IEnterpriseDropTarget*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3725.const$2, fi, constants$18.const$5, scope);
        }
        static AddRef ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle AddRef$VH() {
        return constants$3725.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IEnterpriseDropTarget*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3725.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IEnterpriseDropTarget*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        constants$3725.const$3.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3725.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3725.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, Arena scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*Release)(IEnterpriseDropTarget*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3725.const$4, fi, constants$18.const$5, scope);
        }
        static Release ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Release$VH() {
        return constants$3725.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IEnterpriseDropTarget*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3725.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IEnterpriseDropTarget*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        constants$3725.const$5.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3725.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3725.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, Arena scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetDropSourceEnterpriseId)(IEnterpriseDropTarget*,LPCWSTR);
     * }
     */
    public interface SetDropSourceEnterpriseId {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetDropSourceEnterpriseId fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3726.const$0, fi, constants$34.const$0, scope);
        }
        static SetDropSourceEnterpriseId ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetDropSourceEnterpriseId$VH() {
        return constants$3726.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetDropSourceEnterpriseId)(IEnterpriseDropTarget*,LPCWSTR);
     * }
     */
    public static MemorySegment SetDropSourceEnterpriseId$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3726.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetDropSourceEnterpriseId)(IEnterpriseDropTarget*,LPCWSTR);
     * }
     */
    public static void SetDropSourceEnterpriseId$set(MemorySegment seg, MemorySegment x) {
        constants$3726.const$1.set(seg, x);
    }
    public static MemorySegment SetDropSourceEnterpriseId$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3726.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void SetDropSourceEnterpriseId$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3726.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetDropSourceEnterpriseId SetDropSourceEnterpriseId(MemorySegment segment, Arena scope) {
        return SetDropSourceEnterpriseId.ofAddress(SetDropSourceEnterpriseId$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*IsEvaluatingEdpPolicy)(IEnterpriseDropTarget*,BOOL*);
     * }
     */
    public interface IsEvaluatingEdpPolicy {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(IsEvaluatingEdpPolicy fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3726.const$2, fi, constants$34.const$0, scope);
        }
        static IsEvaluatingEdpPolicy ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle IsEvaluatingEdpPolicy$VH() {
        return constants$3726.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*IsEvaluatingEdpPolicy)(IEnterpriseDropTarget*,BOOL*);
     * }
     */
    public static MemorySegment IsEvaluatingEdpPolicy$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3726.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*IsEvaluatingEdpPolicy)(IEnterpriseDropTarget*,BOOL*);
     * }
     */
    public static void IsEvaluatingEdpPolicy$set(MemorySegment seg, MemorySegment x) {
        constants$3726.const$3.set(seg, x);
    }
    public static MemorySegment IsEvaluatingEdpPolicy$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3726.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void IsEvaluatingEdpPolicy$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3726.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static IsEvaluatingEdpPolicy IsEvaluatingEdpPolicy(MemorySegment segment, Arena scope) {
        return IsEvaluatingEdpPolicy.ofAddress(IsEvaluatingEdpPolicy$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



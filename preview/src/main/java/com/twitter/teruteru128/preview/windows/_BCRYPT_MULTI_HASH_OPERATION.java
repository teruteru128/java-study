// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _BCRYPT_MULTI_HASH_OPERATION {
 *     ULONG iHash;
 *     BCRYPT_HASH_OPERATION_TYPE hashOperation;
 *     PUCHAR pbBuffer;
 *     ULONG cbBuffer;
 * };
 * }
 */
public class _BCRYPT_MULTI_HASH_OPERATION {

    public static MemoryLayout $LAYOUT() {
        return constants$1955.const$3;
    }
    public static VarHandle iHash$VH() {
        return constants$1955.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG iHash;
     * }
     */
    public static int iHash$get(MemorySegment seg) {
        return (int)constants$1955.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG iHash;
     * }
     */
    public static void iHash$set(MemorySegment seg, int x) {
        constants$1955.const$4.set(seg, x);
    }
    public static int iHash$get(MemorySegment seg, long index) {
        return (int)constants$1955.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void iHash$set(MemorySegment seg, long index, int x) {
        constants$1955.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hashOperation$VH() {
        return constants$1955.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BCRYPT_HASH_OPERATION_TYPE hashOperation;
     * }
     */
    public static int hashOperation$get(MemorySegment seg) {
        return (int)constants$1955.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BCRYPT_HASH_OPERATION_TYPE hashOperation;
     * }
     */
    public static void hashOperation$set(MemorySegment seg, int x) {
        constants$1955.const$5.set(seg, x);
    }
    public static int hashOperation$get(MemorySegment seg, long index) {
        return (int)constants$1955.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void hashOperation$set(MemorySegment seg, long index, int x) {
        constants$1955.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pbBuffer$VH() {
        return constants$1956.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PUCHAR pbBuffer;
     * }
     */
    public static MemorySegment pbBuffer$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1956.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PUCHAR pbBuffer;
     * }
     */
    public static void pbBuffer$set(MemorySegment seg, MemorySegment x) {
        constants$1956.const$0.set(seg, x);
    }
    public static MemorySegment pbBuffer$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1956.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void pbBuffer$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1956.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cbBuffer$VH() {
        return constants$1956.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG cbBuffer;
     * }
     */
    public static int cbBuffer$get(MemorySegment seg) {
        return (int)constants$1956.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG cbBuffer;
     * }
     */
    public static void cbBuffer$set(MemorySegment seg, int x) {
        constants$1956.const$1.set(seg, x);
    }
    public static int cbBuffer$get(MemorySegment seg, long index) {
        return (int)constants$1956.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void cbBuffer$set(MemorySegment seg, long index, int x) {
        constants$1956.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



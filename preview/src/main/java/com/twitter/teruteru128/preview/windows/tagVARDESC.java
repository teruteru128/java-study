// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tagVARDESC {
 *     MEMBERID memid;
 *     LPOLESTR lpstrSchema;
 *     union {
 *         ULONG oInst;
 *         VARIANT* lpvarValue;
 *     };
 *     ELEMDESC elemdescVar;
 *     WORD wVarFlags;
 *     VARKIND varkind;
 * };
 * }
 */
public class tagVARDESC {

    public static MemoryLayout $LAYOUT() {
        return constants$3442.const$3;
    }
    public static VarHandle memid$VH() {
        return constants$3442.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * MEMBERID memid;
     * }
     */
    public static int memid$get(MemorySegment seg) {
        return (int)constants$3442.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * MEMBERID memid;
     * }
     */
    public static void memid$set(MemorySegment seg, int x) {
        constants$3442.const$4.set(seg, x);
    }
    public static int memid$get(MemorySegment seg, long index) {
        return (int)constants$3442.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void memid$set(MemorySegment seg, long index, int x) {
        constants$3442.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lpstrSchema$VH() {
        return constants$3442.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPOLESTR lpstrSchema;
     * }
     */
    public static MemorySegment lpstrSchema$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3442.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPOLESTR lpstrSchema;
     * }
     */
    public static void lpstrSchema$set(MemorySegment seg, MemorySegment x) {
        constants$3442.const$5.set(seg, x);
    }
    public static MemorySegment lpstrSchema$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3442.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void lpstrSchema$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3442.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle oInst$VH() {
        return constants$3443.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG oInst;
     * }
     */
    public static int oInst$get(MemorySegment seg) {
        return (int)constants$3443.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG oInst;
     * }
     */
    public static void oInst$set(MemorySegment seg, int x) {
        constants$3443.const$0.set(seg, x);
    }
    public static int oInst$get(MemorySegment seg, long index) {
        return (int)constants$3443.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void oInst$set(MemorySegment seg, long index, int x) {
        constants$3443.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lpvarValue$VH() {
        return constants$3443.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VARIANT* lpvarValue;
     * }
     */
    public static MemorySegment lpvarValue$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3443.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VARIANT* lpvarValue;
     * }
     */
    public static void lpvarValue$set(MemorySegment seg, MemorySegment x) {
        constants$3443.const$1.set(seg, x);
    }
    public static MemorySegment lpvarValue$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3443.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void lpvarValue$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3443.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment elemdescVar$slice(MemorySegment seg) {
        return seg.asSlice(24, 32);
    }
    public static VarHandle wVarFlags$VH() {
        return constants$3443.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD wVarFlags;
     * }
     */
    public static short wVarFlags$get(MemorySegment seg) {
        return (short)constants$3443.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD wVarFlags;
     * }
     */
    public static void wVarFlags$set(MemorySegment seg, short x) {
        constants$3443.const$2.set(seg, x);
    }
    public static short wVarFlags$get(MemorySegment seg, long index) {
        return (short)constants$3443.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void wVarFlags$set(MemorySegment seg, long index, short x) {
        constants$3443.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle varkind$VH() {
        return constants$3443.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VARKIND varkind;
     * }
     */
    public static int varkind$get(MemorySegment seg) {
        return (int)constants$3443.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VARKIND varkind;
     * }
     */
    public static void varkind$set(MemorySegment seg, int x) {
        constants$3443.const$3.set(seg, x);
    }
    public static int varkind$get(MemorySegment seg, long index) {
        return (int)constants$3443.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void varkind$set(MemorySegment seg, long index, int x) {
        constants$3443.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _DISPLAY_DEVICEW {
 *     DWORD cb;
 *     WCHAR DeviceName[32];
 *     WCHAR DeviceString[128];
 *     DWORD StateFlags;
 *     WCHAR DeviceID[128];
 *     WCHAR DeviceKey[128];
 * };
 * }
 */
public class _DISPLAY_DEVICEW {

    public static MemoryLayout $LAYOUT() {
        return constants$957.const$0;
    }
    public static VarHandle cb$VH() {
        return constants$957.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD cb;
     * }
     */
    public static int cb$get(MemorySegment seg) {
        return (int)constants$957.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD cb;
     * }
     */
    public static void cb$set(MemorySegment seg, int x) {
        constants$957.const$1.set(seg, x);
    }
    public static int cb$get(MemorySegment seg, long index) {
        return (int)constants$957.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void cb$set(MemorySegment seg, long index, int x) {
        constants$957.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment DeviceName$slice(MemorySegment seg) {
        return seg.asSlice(4, 64);
    }
    public static MemorySegment DeviceString$slice(MemorySegment seg) {
        return seg.asSlice(68, 256);
    }
    public static VarHandle StateFlags$VH() {
        return constants$957.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD StateFlags;
     * }
     */
    public static int StateFlags$get(MemorySegment seg) {
        return (int)constants$957.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD StateFlags;
     * }
     */
    public static void StateFlags$set(MemorySegment seg, int x) {
        constants$957.const$2.set(seg, x);
    }
    public static int StateFlags$get(MemorySegment seg, long index) {
        return (int)constants$957.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void StateFlags$set(MemorySegment seg, long index, int x) {
        constants$957.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment DeviceID$slice(MemorySegment seg) {
        return seg.asSlice(328, 256);
    }
    public static MemorySegment DeviceKey$slice(MemorySegment seg) {
        return seg.asSlice(584, 256);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



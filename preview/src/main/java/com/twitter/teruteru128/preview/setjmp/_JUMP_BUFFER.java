// Generated by jextract

package com.twitter.teruteru128.preview.setjmp;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _JUMP_BUFFER {
 *     unsigned long long Frame;
 *     unsigned long long Rbx;
 *     unsigned long long Rsp;
 *     unsigned long long Rbp;
 *     unsigned long long Rsi;
 *     unsigned long long Rdi;
 *     unsigned long long R12;
 *     unsigned long long R13;
 *     unsigned long long R14;
 *     unsigned long long R15;
 *     unsigned long long Rip;
 *     unsigned long MxCsr;
 *     unsigned short FpCsr;
 *     unsigned short Spare;
 *     SETJMP_FLOAT128 Xmm6;
 *     SETJMP_FLOAT128 Xmm7;
 *     SETJMP_FLOAT128 Xmm8;
 *     SETJMP_FLOAT128 Xmm9;
 *     SETJMP_FLOAT128 Xmm10;
 *     SETJMP_FLOAT128 Xmm11;
 *     SETJMP_FLOAT128 Xmm12;
 *     SETJMP_FLOAT128 Xmm13;
 *     SETJMP_FLOAT128 Xmm14;
 *     SETJMP_FLOAT128 Xmm15;
 * }
 * }
 */
public class _JUMP_BUFFER {

    _JUMP_BUFFER() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        setjmp_h.C_LONG_LONG.withName("Frame"),
        setjmp_h.C_LONG_LONG.withName("Rbx"),
        setjmp_h.C_LONG_LONG.withName("Rsp"),
        setjmp_h.C_LONG_LONG.withName("Rbp"),
        setjmp_h.C_LONG_LONG.withName("Rsi"),
        setjmp_h.C_LONG_LONG.withName("Rdi"),
        setjmp_h.C_LONG_LONG.withName("R12"),
        setjmp_h.C_LONG_LONG.withName("R13"),
        setjmp_h.C_LONG_LONG.withName("R14"),
        setjmp_h.C_LONG_LONG.withName("R15"),
        setjmp_h.C_LONG_LONG.withName("Rip"),
        setjmp_h.C_LONG.withName("MxCsr"),
        setjmp_h.C_SHORT.withName("FpCsr"),
        setjmp_h.C_SHORT.withName("Spare"),
        _SETJMP_FLOAT128.layout().withName("Xmm6"),
        _SETJMP_FLOAT128.layout().withName("Xmm7"),
        _SETJMP_FLOAT128.layout().withName("Xmm8"),
        _SETJMP_FLOAT128.layout().withName("Xmm9"),
        _SETJMP_FLOAT128.layout().withName("Xmm10"),
        _SETJMP_FLOAT128.layout().withName("Xmm11"),
        _SETJMP_FLOAT128.layout().withName("Xmm12"),
        _SETJMP_FLOAT128.layout().withName("Xmm13"),
        _SETJMP_FLOAT128.layout().withName("Xmm14"),
        _SETJMP_FLOAT128.layout().withName("Xmm15")
    ).withName("_JUMP_BUFFER");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong Frame$LAYOUT = (OfLong)$LAYOUT.select(groupElement("Frame"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long long Frame
     * }
     */
    public static final OfLong Frame$layout() {
        return Frame$LAYOUT;
    }

    private static final long Frame$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long long Frame
     * }
     */
    public static final long Frame$offset() {
        return Frame$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long long Frame
     * }
     */
    public static long Frame(MemorySegment struct) {
        return struct.get(Frame$LAYOUT, Frame$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long long Frame
     * }
     */
    public static void Frame(MemorySegment struct, long fieldValue) {
        struct.set(Frame$LAYOUT, Frame$OFFSET, fieldValue);
    }

    private static final OfLong Rbx$LAYOUT = (OfLong)$LAYOUT.select(groupElement("Rbx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long long Rbx
     * }
     */
    public static final OfLong Rbx$layout() {
        return Rbx$LAYOUT;
    }

    private static final long Rbx$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long long Rbx
     * }
     */
    public static final long Rbx$offset() {
        return Rbx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long long Rbx
     * }
     */
    public static long Rbx(MemorySegment struct) {
        return struct.get(Rbx$LAYOUT, Rbx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long long Rbx
     * }
     */
    public static void Rbx(MemorySegment struct, long fieldValue) {
        struct.set(Rbx$LAYOUT, Rbx$OFFSET, fieldValue);
    }

    private static final OfLong Rsp$LAYOUT = (OfLong)$LAYOUT.select(groupElement("Rsp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long long Rsp
     * }
     */
    public static final OfLong Rsp$layout() {
        return Rsp$LAYOUT;
    }

    private static final long Rsp$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long long Rsp
     * }
     */
    public static final long Rsp$offset() {
        return Rsp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long long Rsp
     * }
     */
    public static long Rsp(MemorySegment struct) {
        return struct.get(Rsp$LAYOUT, Rsp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long long Rsp
     * }
     */
    public static void Rsp(MemorySegment struct, long fieldValue) {
        struct.set(Rsp$LAYOUT, Rsp$OFFSET, fieldValue);
    }

    private static final OfLong Rbp$LAYOUT = (OfLong)$LAYOUT.select(groupElement("Rbp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long long Rbp
     * }
     */
    public static final OfLong Rbp$layout() {
        return Rbp$LAYOUT;
    }

    private static final long Rbp$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long long Rbp
     * }
     */
    public static final long Rbp$offset() {
        return Rbp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long long Rbp
     * }
     */
    public static long Rbp(MemorySegment struct) {
        return struct.get(Rbp$LAYOUT, Rbp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long long Rbp
     * }
     */
    public static void Rbp(MemorySegment struct, long fieldValue) {
        struct.set(Rbp$LAYOUT, Rbp$OFFSET, fieldValue);
    }

    private static final OfLong Rsi$LAYOUT = (OfLong)$LAYOUT.select(groupElement("Rsi"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long long Rsi
     * }
     */
    public static final OfLong Rsi$layout() {
        return Rsi$LAYOUT;
    }

    private static final long Rsi$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long long Rsi
     * }
     */
    public static final long Rsi$offset() {
        return Rsi$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long long Rsi
     * }
     */
    public static long Rsi(MemorySegment struct) {
        return struct.get(Rsi$LAYOUT, Rsi$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long long Rsi
     * }
     */
    public static void Rsi(MemorySegment struct, long fieldValue) {
        struct.set(Rsi$LAYOUT, Rsi$OFFSET, fieldValue);
    }

    private static final OfLong Rdi$LAYOUT = (OfLong)$LAYOUT.select(groupElement("Rdi"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long long Rdi
     * }
     */
    public static final OfLong Rdi$layout() {
        return Rdi$LAYOUT;
    }

    private static final long Rdi$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long long Rdi
     * }
     */
    public static final long Rdi$offset() {
        return Rdi$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long long Rdi
     * }
     */
    public static long Rdi(MemorySegment struct) {
        return struct.get(Rdi$LAYOUT, Rdi$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long long Rdi
     * }
     */
    public static void Rdi(MemorySegment struct, long fieldValue) {
        struct.set(Rdi$LAYOUT, Rdi$OFFSET, fieldValue);
    }

    private static final OfLong R12$LAYOUT = (OfLong)$LAYOUT.select(groupElement("R12"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long long R12
     * }
     */
    public static final OfLong R12$layout() {
        return R12$LAYOUT;
    }

    private static final long R12$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long long R12
     * }
     */
    public static final long R12$offset() {
        return R12$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long long R12
     * }
     */
    public static long R12(MemorySegment struct) {
        return struct.get(R12$LAYOUT, R12$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long long R12
     * }
     */
    public static void R12(MemorySegment struct, long fieldValue) {
        struct.set(R12$LAYOUT, R12$OFFSET, fieldValue);
    }

    private static final OfLong R13$LAYOUT = (OfLong)$LAYOUT.select(groupElement("R13"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long long R13
     * }
     */
    public static final OfLong R13$layout() {
        return R13$LAYOUT;
    }

    private static final long R13$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long long R13
     * }
     */
    public static final long R13$offset() {
        return R13$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long long R13
     * }
     */
    public static long R13(MemorySegment struct) {
        return struct.get(R13$LAYOUT, R13$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long long R13
     * }
     */
    public static void R13(MemorySegment struct, long fieldValue) {
        struct.set(R13$LAYOUT, R13$OFFSET, fieldValue);
    }

    private static final OfLong R14$LAYOUT = (OfLong)$LAYOUT.select(groupElement("R14"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long long R14
     * }
     */
    public static final OfLong R14$layout() {
        return R14$LAYOUT;
    }

    private static final long R14$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long long R14
     * }
     */
    public static final long R14$offset() {
        return R14$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long long R14
     * }
     */
    public static long R14(MemorySegment struct) {
        return struct.get(R14$LAYOUT, R14$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long long R14
     * }
     */
    public static void R14(MemorySegment struct, long fieldValue) {
        struct.set(R14$LAYOUT, R14$OFFSET, fieldValue);
    }

    private static final OfLong R15$LAYOUT = (OfLong)$LAYOUT.select(groupElement("R15"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long long R15
     * }
     */
    public static final OfLong R15$layout() {
        return R15$LAYOUT;
    }

    private static final long R15$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long long R15
     * }
     */
    public static final long R15$offset() {
        return R15$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long long R15
     * }
     */
    public static long R15(MemorySegment struct) {
        return struct.get(R15$LAYOUT, R15$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long long R15
     * }
     */
    public static void R15(MemorySegment struct, long fieldValue) {
        struct.set(R15$LAYOUT, R15$OFFSET, fieldValue);
    }

    private static final OfLong Rip$LAYOUT = (OfLong)$LAYOUT.select(groupElement("Rip"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long long Rip
     * }
     */
    public static final OfLong Rip$layout() {
        return Rip$LAYOUT;
    }

    private static final long Rip$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long long Rip
     * }
     */
    public static final long Rip$offset() {
        return Rip$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long long Rip
     * }
     */
    public static long Rip(MemorySegment struct) {
        return struct.get(Rip$LAYOUT, Rip$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long long Rip
     * }
     */
    public static void Rip(MemorySegment struct, long fieldValue) {
        struct.set(Rip$LAYOUT, Rip$OFFSET, fieldValue);
    }

    private static final OfInt MxCsr$LAYOUT = (OfInt)$LAYOUT.select(groupElement("MxCsr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long MxCsr
     * }
     */
    public static final OfInt MxCsr$layout() {
        return MxCsr$LAYOUT;
    }

    private static final long MxCsr$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long MxCsr
     * }
     */
    public static final long MxCsr$offset() {
        return MxCsr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long MxCsr
     * }
     */
    public static int MxCsr(MemorySegment struct) {
        return struct.get(MxCsr$LAYOUT, MxCsr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long MxCsr
     * }
     */
    public static void MxCsr(MemorySegment struct, int fieldValue) {
        struct.set(MxCsr$LAYOUT, MxCsr$OFFSET, fieldValue);
    }

    private static final OfShort FpCsr$LAYOUT = (OfShort)$LAYOUT.select(groupElement("FpCsr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned short FpCsr
     * }
     */
    public static final OfShort FpCsr$layout() {
        return FpCsr$LAYOUT;
    }

    private static final long FpCsr$OFFSET = 92;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned short FpCsr
     * }
     */
    public static final long FpCsr$offset() {
        return FpCsr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned short FpCsr
     * }
     */
    public static short FpCsr(MemorySegment struct) {
        return struct.get(FpCsr$LAYOUT, FpCsr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned short FpCsr
     * }
     */
    public static void FpCsr(MemorySegment struct, short fieldValue) {
        struct.set(FpCsr$LAYOUT, FpCsr$OFFSET, fieldValue);
    }

    private static final OfShort Spare$LAYOUT = (OfShort)$LAYOUT.select(groupElement("Spare"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned short Spare
     * }
     */
    public static final OfShort Spare$layout() {
        return Spare$LAYOUT;
    }

    private static final long Spare$OFFSET = 94;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned short Spare
     * }
     */
    public static final long Spare$offset() {
        return Spare$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned short Spare
     * }
     */
    public static short Spare(MemorySegment struct) {
        return struct.get(Spare$LAYOUT, Spare$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned short Spare
     * }
     */
    public static void Spare(MemorySegment struct, short fieldValue) {
        struct.set(Spare$LAYOUT, Spare$OFFSET, fieldValue);
    }

    private static final GroupLayout Xmm6$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("Xmm6"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SETJMP_FLOAT128 Xmm6
     * }
     */
    public static final GroupLayout Xmm6$layout() {
        return Xmm6$LAYOUT;
    }

    private static final long Xmm6$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SETJMP_FLOAT128 Xmm6
     * }
     */
    public static final long Xmm6$offset() {
        return Xmm6$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SETJMP_FLOAT128 Xmm6
     * }
     */
    public static MemorySegment Xmm6(MemorySegment struct) {
        return struct.asSlice(Xmm6$OFFSET, Xmm6$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SETJMP_FLOAT128 Xmm6
     * }
     */
    public static void Xmm6(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Xmm6$OFFSET, Xmm6$LAYOUT.byteSize());
    }

    private static final GroupLayout Xmm7$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("Xmm7"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SETJMP_FLOAT128 Xmm7
     * }
     */
    public static final GroupLayout Xmm7$layout() {
        return Xmm7$LAYOUT;
    }

    private static final long Xmm7$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SETJMP_FLOAT128 Xmm7
     * }
     */
    public static final long Xmm7$offset() {
        return Xmm7$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SETJMP_FLOAT128 Xmm7
     * }
     */
    public static MemorySegment Xmm7(MemorySegment struct) {
        return struct.asSlice(Xmm7$OFFSET, Xmm7$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SETJMP_FLOAT128 Xmm7
     * }
     */
    public static void Xmm7(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Xmm7$OFFSET, Xmm7$LAYOUT.byteSize());
    }

    private static final GroupLayout Xmm8$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("Xmm8"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SETJMP_FLOAT128 Xmm8
     * }
     */
    public static final GroupLayout Xmm8$layout() {
        return Xmm8$LAYOUT;
    }

    private static final long Xmm8$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SETJMP_FLOAT128 Xmm8
     * }
     */
    public static final long Xmm8$offset() {
        return Xmm8$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SETJMP_FLOAT128 Xmm8
     * }
     */
    public static MemorySegment Xmm8(MemorySegment struct) {
        return struct.asSlice(Xmm8$OFFSET, Xmm8$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SETJMP_FLOAT128 Xmm8
     * }
     */
    public static void Xmm8(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Xmm8$OFFSET, Xmm8$LAYOUT.byteSize());
    }

    private static final GroupLayout Xmm9$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("Xmm9"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SETJMP_FLOAT128 Xmm9
     * }
     */
    public static final GroupLayout Xmm9$layout() {
        return Xmm9$LAYOUT;
    }

    private static final long Xmm9$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SETJMP_FLOAT128 Xmm9
     * }
     */
    public static final long Xmm9$offset() {
        return Xmm9$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SETJMP_FLOAT128 Xmm9
     * }
     */
    public static MemorySegment Xmm9(MemorySegment struct) {
        return struct.asSlice(Xmm9$OFFSET, Xmm9$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SETJMP_FLOAT128 Xmm9
     * }
     */
    public static void Xmm9(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Xmm9$OFFSET, Xmm9$LAYOUT.byteSize());
    }

    private static final GroupLayout Xmm10$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("Xmm10"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SETJMP_FLOAT128 Xmm10
     * }
     */
    public static final GroupLayout Xmm10$layout() {
        return Xmm10$LAYOUT;
    }

    private static final long Xmm10$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SETJMP_FLOAT128 Xmm10
     * }
     */
    public static final long Xmm10$offset() {
        return Xmm10$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SETJMP_FLOAT128 Xmm10
     * }
     */
    public static MemorySegment Xmm10(MemorySegment struct) {
        return struct.asSlice(Xmm10$OFFSET, Xmm10$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SETJMP_FLOAT128 Xmm10
     * }
     */
    public static void Xmm10(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Xmm10$OFFSET, Xmm10$LAYOUT.byteSize());
    }

    private static final GroupLayout Xmm11$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("Xmm11"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SETJMP_FLOAT128 Xmm11
     * }
     */
    public static final GroupLayout Xmm11$layout() {
        return Xmm11$LAYOUT;
    }

    private static final long Xmm11$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SETJMP_FLOAT128 Xmm11
     * }
     */
    public static final long Xmm11$offset() {
        return Xmm11$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SETJMP_FLOAT128 Xmm11
     * }
     */
    public static MemorySegment Xmm11(MemorySegment struct) {
        return struct.asSlice(Xmm11$OFFSET, Xmm11$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SETJMP_FLOAT128 Xmm11
     * }
     */
    public static void Xmm11(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Xmm11$OFFSET, Xmm11$LAYOUT.byteSize());
    }

    private static final GroupLayout Xmm12$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("Xmm12"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SETJMP_FLOAT128 Xmm12
     * }
     */
    public static final GroupLayout Xmm12$layout() {
        return Xmm12$LAYOUT;
    }

    private static final long Xmm12$OFFSET = 192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SETJMP_FLOAT128 Xmm12
     * }
     */
    public static final long Xmm12$offset() {
        return Xmm12$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SETJMP_FLOAT128 Xmm12
     * }
     */
    public static MemorySegment Xmm12(MemorySegment struct) {
        return struct.asSlice(Xmm12$OFFSET, Xmm12$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SETJMP_FLOAT128 Xmm12
     * }
     */
    public static void Xmm12(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Xmm12$OFFSET, Xmm12$LAYOUT.byteSize());
    }

    private static final GroupLayout Xmm13$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("Xmm13"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SETJMP_FLOAT128 Xmm13
     * }
     */
    public static final GroupLayout Xmm13$layout() {
        return Xmm13$LAYOUT;
    }

    private static final long Xmm13$OFFSET = 208;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SETJMP_FLOAT128 Xmm13
     * }
     */
    public static final long Xmm13$offset() {
        return Xmm13$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SETJMP_FLOAT128 Xmm13
     * }
     */
    public static MemorySegment Xmm13(MemorySegment struct) {
        return struct.asSlice(Xmm13$OFFSET, Xmm13$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SETJMP_FLOAT128 Xmm13
     * }
     */
    public static void Xmm13(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Xmm13$OFFSET, Xmm13$LAYOUT.byteSize());
    }

    private static final GroupLayout Xmm14$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("Xmm14"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SETJMP_FLOAT128 Xmm14
     * }
     */
    public static final GroupLayout Xmm14$layout() {
        return Xmm14$LAYOUT;
    }

    private static final long Xmm14$OFFSET = 224;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SETJMP_FLOAT128 Xmm14
     * }
     */
    public static final long Xmm14$offset() {
        return Xmm14$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SETJMP_FLOAT128 Xmm14
     * }
     */
    public static MemorySegment Xmm14(MemorySegment struct) {
        return struct.asSlice(Xmm14$OFFSET, Xmm14$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SETJMP_FLOAT128 Xmm14
     * }
     */
    public static void Xmm14(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Xmm14$OFFSET, Xmm14$LAYOUT.byteSize());
    }

    private static final GroupLayout Xmm15$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("Xmm15"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SETJMP_FLOAT128 Xmm15
     * }
     */
    public static final GroupLayout Xmm15$layout() {
        return Xmm15$LAYOUT;
    }

    private static final long Xmm15$OFFSET = 240;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SETJMP_FLOAT128 Xmm15
     * }
     */
    public static final long Xmm15$offset() {
        return Xmm15$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SETJMP_FLOAT128 Xmm15
     * }
     */
    public static MemorySegment Xmm15(MemorySegment struct) {
        return struct.asSlice(Xmm15$OFFSET, Xmm15$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SETJMP_FLOAT128 Xmm15
     * }
     */
    public static void Xmm15(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Xmm15$OFFSET, Xmm15$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


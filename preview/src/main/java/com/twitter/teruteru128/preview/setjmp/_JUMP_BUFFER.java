// Generated by jextract

package com.twitter.teruteru128.preview.setjmp;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _JUMP_BUFFER {
 *     unsigned long long Frame;
 *     unsigned long long Rbx;
 *     unsigned long long Rsp;
 *     unsigned long long Rbp;
 *     unsigned long long Rsi;
 *     unsigned long long Rdi;
 *     unsigned long long R12;
 *     unsigned long long R13;
 *     unsigned long long R14;
 *     unsigned long long R15;
 *     unsigned long long Rip;
 *     unsigned long MxCsr;
 *     unsigned short FpCsr;
 *     unsigned short Spare;
 *     SETJMP_FLOAT128 Xmm6;
 *     SETJMP_FLOAT128 Xmm7;
 *     SETJMP_FLOAT128 Xmm8;
 *     SETJMP_FLOAT128 Xmm9;
 *     SETJMP_FLOAT128 Xmm10;
 *     SETJMP_FLOAT128 Xmm11;
 *     SETJMP_FLOAT128 Xmm12;
 *     SETJMP_FLOAT128 Xmm13;
 *     SETJMP_FLOAT128 Xmm14;
 *     SETJMP_FLOAT128 Xmm15;
 * };
 * }
 */
public class _JUMP_BUFFER {

    public static MemoryLayout $LAYOUT() {
        return constants$1.const$4;
    }
    public static VarHandle Frame$VH() {
        return constants$1.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long long Frame;
     * }
     */
    public static long Frame$get(MemorySegment seg) {
        return (long)constants$1.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long long Frame;
     * }
     */
    public static void Frame$set(MemorySegment seg, long x) {
        constants$1.const$5.set(seg, x);
    }
    public static long Frame$get(MemorySegment seg, long index) {
        return (long)constants$1.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void Frame$set(MemorySegment seg, long index, long x) {
        constants$1.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Rbx$VH() {
        return constants$2.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long long Rbx;
     * }
     */
    public static long Rbx$get(MemorySegment seg) {
        return (long)constants$2.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long long Rbx;
     * }
     */
    public static void Rbx$set(MemorySegment seg, long x) {
        constants$2.const$0.set(seg, x);
    }
    public static long Rbx$get(MemorySegment seg, long index) {
        return (long)constants$2.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Rbx$set(MemorySegment seg, long index, long x) {
        constants$2.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Rsp$VH() {
        return constants$2.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long long Rsp;
     * }
     */
    public static long Rsp$get(MemorySegment seg) {
        return (long)constants$2.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long long Rsp;
     * }
     */
    public static void Rsp$set(MemorySegment seg, long x) {
        constants$2.const$1.set(seg, x);
    }
    public static long Rsp$get(MemorySegment seg, long index) {
        return (long)constants$2.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void Rsp$set(MemorySegment seg, long index, long x) {
        constants$2.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Rbp$VH() {
        return constants$2.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long long Rbp;
     * }
     */
    public static long Rbp$get(MemorySegment seg) {
        return (long)constants$2.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long long Rbp;
     * }
     */
    public static void Rbp$set(MemorySegment seg, long x) {
        constants$2.const$2.set(seg, x);
    }
    public static long Rbp$get(MemorySegment seg, long index) {
        return (long)constants$2.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void Rbp$set(MemorySegment seg, long index, long x) {
        constants$2.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Rsi$VH() {
        return constants$2.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long long Rsi;
     * }
     */
    public static long Rsi$get(MemorySegment seg) {
        return (long)constants$2.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long long Rsi;
     * }
     */
    public static void Rsi$set(MemorySegment seg, long x) {
        constants$2.const$3.set(seg, x);
    }
    public static long Rsi$get(MemorySegment seg, long index) {
        return (long)constants$2.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void Rsi$set(MemorySegment seg, long index, long x) {
        constants$2.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Rdi$VH() {
        return constants$2.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long long Rdi;
     * }
     */
    public static long Rdi$get(MemorySegment seg) {
        return (long)constants$2.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long long Rdi;
     * }
     */
    public static void Rdi$set(MemorySegment seg, long x) {
        constants$2.const$4.set(seg, x);
    }
    public static long Rdi$get(MemorySegment seg, long index) {
        return (long)constants$2.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void Rdi$set(MemorySegment seg, long index, long x) {
        constants$2.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle R12$VH() {
        return constants$2.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long long R12;
     * }
     */
    public static long R12$get(MemorySegment seg) {
        return (long)constants$2.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long long R12;
     * }
     */
    public static void R12$set(MemorySegment seg, long x) {
        constants$2.const$5.set(seg, x);
    }
    public static long R12$get(MemorySegment seg, long index) {
        return (long)constants$2.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void R12$set(MemorySegment seg, long index, long x) {
        constants$2.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle R13$VH() {
        return constants$3.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long long R13;
     * }
     */
    public static long R13$get(MemorySegment seg) {
        return (long)constants$3.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long long R13;
     * }
     */
    public static void R13$set(MemorySegment seg, long x) {
        constants$3.const$0.set(seg, x);
    }
    public static long R13$get(MemorySegment seg, long index) {
        return (long)constants$3.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void R13$set(MemorySegment seg, long index, long x) {
        constants$3.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle R14$VH() {
        return constants$3.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long long R14;
     * }
     */
    public static long R14$get(MemorySegment seg) {
        return (long)constants$3.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long long R14;
     * }
     */
    public static void R14$set(MemorySegment seg, long x) {
        constants$3.const$1.set(seg, x);
    }
    public static long R14$get(MemorySegment seg, long index) {
        return (long)constants$3.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void R14$set(MemorySegment seg, long index, long x) {
        constants$3.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle R15$VH() {
        return constants$3.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long long R15;
     * }
     */
    public static long R15$get(MemorySegment seg) {
        return (long)constants$3.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long long R15;
     * }
     */
    public static void R15$set(MemorySegment seg, long x) {
        constants$3.const$2.set(seg, x);
    }
    public static long R15$get(MemorySegment seg, long index) {
        return (long)constants$3.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void R15$set(MemorySegment seg, long index, long x) {
        constants$3.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Rip$VH() {
        return constants$3.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long long Rip;
     * }
     */
    public static long Rip$get(MemorySegment seg) {
        return (long)constants$3.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long long Rip;
     * }
     */
    public static void Rip$set(MemorySegment seg, long x) {
        constants$3.const$3.set(seg, x);
    }
    public static long Rip$get(MemorySegment seg, long index) {
        return (long)constants$3.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void Rip$set(MemorySegment seg, long index, long x) {
        constants$3.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MxCsr$VH() {
        return constants$3.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long MxCsr;
     * }
     */
    public static int MxCsr$get(MemorySegment seg) {
        return (int)constants$3.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long MxCsr;
     * }
     */
    public static void MxCsr$set(MemorySegment seg, int x) {
        constants$3.const$4.set(seg, x);
    }
    public static int MxCsr$get(MemorySegment seg, long index) {
        return (int)constants$3.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void MxCsr$set(MemorySegment seg, long index, int x) {
        constants$3.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle FpCsr$VH() {
        return constants$3.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short FpCsr;
     * }
     */
    public static short FpCsr$get(MemorySegment seg) {
        return (short)constants$3.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short FpCsr;
     * }
     */
    public static void FpCsr$set(MemorySegment seg, short x) {
        constants$3.const$5.set(seg, x);
    }
    public static short FpCsr$get(MemorySegment seg, long index) {
        return (short)constants$3.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void FpCsr$set(MemorySegment seg, long index, short x) {
        constants$3.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Spare$VH() {
        return constants$4.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short Spare;
     * }
     */
    public static short Spare$get(MemorySegment seg) {
        return (short)constants$4.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short Spare;
     * }
     */
    public static void Spare$set(MemorySegment seg, short x) {
        constants$4.const$0.set(seg, x);
    }
    public static short Spare$get(MemorySegment seg, long index) {
        return (short)constants$4.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Spare$set(MemorySegment seg, long index, short x) {
        constants$4.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Xmm6$slice(MemorySegment seg) {
        return seg.asSlice(96, 16);
    }
    public static MemorySegment Xmm7$slice(MemorySegment seg) {
        return seg.asSlice(112, 16);
    }
    public static MemorySegment Xmm8$slice(MemorySegment seg) {
        return seg.asSlice(128, 16);
    }
    public static MemorySegment Xmm9$slice(MemorySegment seg) {
        return seg.asSlice(144, 16);
    }
    public static MemorySegment Xmm10$slice(MemorySegment seg) {
        return seg.asSlice(160, 16);
    }
    public static MemorySegment Xmm11$slice(MemorySegment seg) {
        return seg.asSlice(176, 16);
    }
    public static MemorySegment Xmm12$slice(MemorySegment seg) {
        return seg.asSlice(192, 16);
    }
    public static MemorySegment Xmm13$slice(MemorySegment seg) {
        return seg.asSlice(208, 16);
    }
    public static MemorySegment Xmm14$slice(MemorySegment seg) {
        return seg.asSlice(224, 16);
    }
    public static MemorySegment Xmm15$slice(MemorySegment seg) {
        return seg.asSlice(240, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



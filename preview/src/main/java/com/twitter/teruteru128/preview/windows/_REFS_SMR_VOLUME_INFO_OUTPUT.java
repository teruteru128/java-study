// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _REFS_SMR_VOLUME_INFO_OUTPUT {
 *     DWORD Version;
 *     DWORD Flags;
 *     LARGE_INTEGER SizeOfRandomlyWritableTier;
 *     LARGE_INTEGER FreeSpaceInRandomlyWritableTier;
 *     LARGE_INTEGER SizeofSMRTier;
 *     LARGE_INTEGER FreeSpaceInSMRTier;
 *     LARGE_INTEGER UsableFreeSpaceInSMRTier;
 *     REFS_SMR_VOLUME_GC_STATE VolumeGcState;
 *     DWORD VolumeGcLastStatus;
 *     DWORD CurrentGcBandFillPercentage;
 *     DWORDLONG Unused[6];
 * };
 * }
 */
public class _REFS_SMR_VOLUME_INFO_OUTPUT {

    public static MemoryLayout $LAYOUT() {
        return constants$2720.const$4;
    }
    public static VarHandle Version$VH() {
        return constants$2720.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Version;
     * }
     */
    public static int Version$get(MemorySegment seg) {
        return (int)constants$2720.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Version;
     * }
     */
    public static void Version$set(MemorySegment seg, int x) {
        constants$2720.const$5.set(seg, x);
    }
    public static int Version$get(MemorySegment seg, long index) {
        return (int)constants$2720.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, int x) {
        constants$2720.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Flags$VH() {
        return constants$2721.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Flags;
     * }
     */
    public static int Flags$get(MemorySegment seg) {
        return (int)constants$2721.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Flags;
     * }
     */
    public static void Flags$set(MemorySegment seg, int x) {
        constants$2721.const$0.set(seg, x);
    }
    public static int Flags$get(MemorySegment seg, long index) {
        return (int)constants$2721.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, int x) {
        constants$2721.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment SizeOfRandomlyWritableTier$slice(MemorySegment seg) {
        return seg.asSlice(8, 8);
    }
    public static MemorySegment FreeSpaceInRandomlyWritableTier$slice(MemorySegment seg) {
        return seg.asSlice(16, 8);
    }
    public static MemorySegment SizeofSMRTier$slice(MemorySegment seg) {
        return seg.asSlice(24, 8);
    }
    public static MemorySegment FreeSpaceInSMRTier$slice(MemorySegment seg) {
        return seg.asSlice(32, 8);
    }
    public static MemorySegment UsableFreeSpaceInSMRTier$slice(MemorySegment seg) {
        return seg.asSlice(40, 8);
    }
    public static VarHandle VolumeGcState$VH() {
        return constants$2721.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * REFS_SMR_VOLUME_GC_STATE VolumeGcState;
     * }
     */
    public static int VolumeGcState$get(MemorySegment seg) {
        return (int)constants$2721.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * REFS_SMR_VOLUME_GC_STATE VolumeGcState;
     * }
     */
    public static void VolumeGcState$set(MemorySegment seg, int x) {
        constants$2721.const$1.set(seg, x);
    }
    public static int VolumeGcState$get(MemorySegment seg, long index) {
        return (int)constants$2721.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void VolumeGcState$set(MemorySegment seg, long index, int x) {
        constants$2721.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle VolumeGcLastStatus$VH() {
        return constants$2721.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD VolumeGcLastStatus;
     * }
     */
    public static int VolumeGcLastStatus$get(MemorySegment seg) {
        return (int)constants$2721.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD VolumeGcLastStatus;
     * }
     */
    public static void VolumeGcLastStatus$set(MemorySegment seg, int x) {
        constants$2721.const$2.set(seg, x);
    }
    public static int VolumeGcLastStatus$get(MemorySegment seg, long index) {
        return (int)constants$2721.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void VolumeGcLastStatus$set(MemorySegment seg, long index, int x) {
        constants$2721.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle CurrentGcBandFillPercentage$VH() {
        return constants$2721.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD CurrentGcBandFillPercentage;
     * }
     */
    public static int CurrentGcBandFillPercentage$get(MemorySegment seg) {
        return (int)constants$2721.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD CurrentGcBandFillPercentage;
     * }
     */
    public static void CurrentGcBandFillPercentage$set(MemorySegment seg, int x) {
        constants$2721.const$3.set(seg, x);
    }
    public static int CurrentGcBandFillPercentage$get(MemorySegment seg, long index) {
        return (int)constants$2721.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void CurrentGcBandFillPercentage$set(MemorySegment seg, long index, int x) {
        constants$2721.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Unused$slice(MemorySegment seg) {
        return seg.asSlice(64, 48);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



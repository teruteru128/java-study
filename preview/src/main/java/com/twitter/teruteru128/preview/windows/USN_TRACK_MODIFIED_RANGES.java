// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct {
 *     DWORD Flags;
 *     DWORD Unused;
 *     DWORDLONG ChunkSize;
 *     LONGLONG FileSizeThreshold;
 * };
 * }
 */
public class USN_TRACK_MODIFIED_RANGES {

    public static MemoryLayout $LAYOUT() {
        return constants$2586.const$5;
    }
    public static VarHandle Flags$VH() {
        return constants$2587.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Flags;
     * }
     */
    public static int Flags$get(MemorySegment seg) {
        return (int)constants$2587.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Flags;
     * }
     */
    public static void Flags$set(MemorySegment seg, int x) {
        constants$2587.const$0.set(seg, x);
    }
    public static int Flags$get(MemorySegment seg, long index) {
        return (int)constants$2587.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, int x) {
        constants$2587.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Unused$VH() {
        return constants$2587.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Unused;
     * }
     */
    public static int Unused$get(MemorySegment seg) {
        return (int)constants$2587.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Unused;
     * }
     */
    public static void Unused$set(MemorySegment seg, int x) {
        constants$2587.const$1.set(seg, x);
    }
    public static int Unused$get(MemorySegment seg, long index) {
        return (int)constants$2587.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void Unused$set(MemorySegment seg, long index, int x) {
        constants$2587.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ChunkSize$VH() {
        return constants$2587.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORDLONG ChunkSize;
     * }
     */
    public static long ChunkSize$get(MemorySegment seg) {
        return (long)constants$2587.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORDLONG ChunkSize;
     * }
     */
    public static void ChunkSize$set(MemorySegment seg, long x) {
        constants$2587.const$2.set(seg, x);
    }
    public static long ChunkSize$get(MemorySegment seg, long index) {
        return (long)constants$2587.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void ChunkSize$set(MemorySegment seg, long index, long x) {
        constants$2587.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle FileSizeThreshold$VH() {
        return constants$2587.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LONGLONG FileSizeThreshold;
     * }
     */
    public static long FileSizeThreshold$get(MemorySegment seg) {
        return (long)constants$2587.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LONGLONG FileSizeThreshold;
     * }
     */
    public static void FileSizeThreshold$set(MemorySegment seg, long x) {
        constants$2587.const$3.set(seg, x);
    }
    public static long FileSizeThreshold$get(MemorySegment seg, long index) {
        return (long)constants$2587.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void FileSizeThreshold$set(MemorySegment seg, long index, long x) {
        constants$2587.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



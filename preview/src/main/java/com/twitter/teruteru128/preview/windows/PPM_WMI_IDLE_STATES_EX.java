// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct {
 *     DWORD Type;
 *     DWORD Count;
 *     DWORD TargetState;
 *     DWORD OldState;
 *     PVOID TargetProcessors;
 *     PPM_WMI_IDLE_STATE State[1];
 * };
 * }
 */
public class PPM_WMI_IDLE_STATES_EX {

    public static MemoryLayout $LAYOUT() {
        return constants$311.const$0;
    }
    public static VarHandle Type$VH() {
        return constants$311.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Type;
     * }
     */
    public static int Type$get(MemorySegment seg) {
        return (int)constants$311.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Type;
     * }
     */
    public static void Type$set(MemorySegment seg, int x) {
        constants$311.const$1.set(seg, x);
    }
    public static int Type$get(MemorySegment seg, long index) {
        return (int)constants$311.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void Type$set(MemorySegment seg, long index, int x) {
        constants$311.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Count$VH() {
        return constants$311.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Count;
     * }
     */
    public static int Count$get(MemorySegment seg) {
        return (int)constants$311.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Count;
     * }
     */
    public static void Count$set(MemorySegment seg, int x) {
        constants$311.const$2.set(seg, x);
    }
    public static int Count$get(MemorySegment seg, long index) {
        return (int)constants$311.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void Count$set(MemorySegment seg, long index, int x) {
        constants$311.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle TargetState$VH() {
        return constants$311.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD TargetState;
     * }
     */
    public static int TargetState$get(MemorySegment seg) {
        return (int)constants$311.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD TargetState;
     * }
     */
    public static void TargetState$set(MemorySegment seg, int x) {
        constants$311.const$3.set(seg, x);
    }
    public static int TargetState$get(MemorySegment seg, long index) {
        return (int)constants$311.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void TargetState$set(MemorySegment seg, long index, int x) {
        constants$311.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle OldState$VH() {
        return constants$311.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD OldState;
     * }
     */
    public static int OldState$get(MemorySegment seg) {
        return (int)constants$311.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD OldState;
     * }
     */
    public static void OldState$set(MemorySegment seg, int x) {
        constants$311.const$4.set(seg, x);
    }
    public static int OldState$get(MemorySegment seg, long index) {
        return (int)constants$311.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void OldState$set(MemorySegment seg, long index, int x) {
        constants$311.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle TargetProcessors$VH() {
        return constants$311.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PVOID TargetProcessors;
     * }
     */
    public static MemorySegment TargetProcessors$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$311.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PVOID TargetProcessors;
     * }
     */
    public static void TargetProcessors$set(MemorySegment seg, MemorySegment x) {
        constants$311.const$5.set(seg, x);
    }
    public static MemorySegment TargetProcessors$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$311.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void TargetProcessors$set(MemorySegment seg, long index, MemorySegment x) {
        constants$311.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment State$slice(MemorySegment seg) {
        return seg.asSlice(24, 32);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



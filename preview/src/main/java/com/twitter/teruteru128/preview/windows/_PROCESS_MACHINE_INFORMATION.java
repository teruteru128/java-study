// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _PROCESS_MACHINE_INFORMATION {
 *     USHORT ProcessMachine;
 *     USHORT Res0;
 *     MACHINE_ATTRIBUTES MachineAttributes;
 * };
 * }
 */
public class _PROCESS_MACHINE_INFORMATION {

    public static MemoryLayout $LAYOUT() {
        return constants$654.const$0;
    }
    public static VarHandle ProcessMachine$VH() {
        return constants$654.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * USHORT ProcessMachine;
     * }
     */
    public static short ProcessMachine$get(MemorySegment seg) {
        return (short)constants$654.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * USHORT ProcessMachine;
     * }
     */
    public static void ProcessMachine$set(MemorySegment seg, short x) {
        constants$654.const$1.set(seg, x);
    }
    public static short ProcessMachine$get(MemorySegment seg, long index) {
        return (short)constants$654.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void ProcessMachine$set(MemorySegment seg, long index, short x) {
        constants$654.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Res0$VH() {
        return constants$654.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * USHORT Res0;
     * }
     */
    public static short Res0$get(MemorySegment seg) {
        return (short)constants$654.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * USHORT Res0;
     * }
     */
    public static void Res0$set(MemorySegment seg, short x) {
        constants$654.const$2.set(seg, x);
    }
    public static short Res0$get(MemorySegment seg, long index) {
        return (short)constants$654.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void Res0$set(MemorySegment seg, long index, short x) {
        constants$654.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MachineAttributes$VH() {
        return constants$654.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * MACHINE_ATTRIBUTES MachineAttributes;
     * }
     */
    public static int MachineAttributes$get(MemorySegment seg) {
        return (int)constants$654.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * MACHINE_ATTRIBUTES MachineAttributes;
     * }
     */
    public static void MachineAttributes$set(MemorySegment seg, int x) {
        constants$654.const$3.set(seg, x);
    }
    public static int MachineAttributes$get(MemorySegment seg, long index) {
        return (int)constants$654.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void MachineAttributes$set(MemorySegment seg, long index, int x) {
        constants$654.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



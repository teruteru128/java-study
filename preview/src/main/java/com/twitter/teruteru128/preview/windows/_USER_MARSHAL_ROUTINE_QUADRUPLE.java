// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _USER_MARSHAL_ROUTINE_QUADRUPLE {
 *     USER_MARSHAL_SIZING_ROUTINE pfnBufferSize;
 *     USER_MARSHAL_MARSHALLING_ROUTINE pfnMarshall;
 *     USER_MARSHAL_UNMARSHALLING_ROUTINE pfnUnmarshall;
 *     USER_MARSHAL_FREEING_ROUTINE pfnFree;
 * };
 * }
 */
public class _USER_MARSHAL_ROUTINE_QUADRUPLE {

    public static MemoryLayout $LAYOUT() {
        return constants$2280.const$1;
    }
    public static VarHandle pfnBufferSize$VH() {
        return constants$2280.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * USER_MARSHAL_SIZING_ROUTINE pfnBufferSize;
     * }
     */
    public static MemorySegment pfnBufferSize$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2280.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * USER_MARSHAL_SIZING_ROUTINE pfnBufferSize;
     * }
     */
    public static void pfnBufferSize$set(MemorySegment seg, MemorySegment x) {
        constants$2280.const$2.set(seg, x);
    }
    public static MemorySegment pfnBufferSize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2280.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void pfnBufferSize$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2280.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static USER_MARSHAL_SIZING_ROUTINE pfnBufferSize(MemorySegment segment, Arena scope) {
        return USER_MARSHAL_SIZING_ROUTINE.ofAddress(pfnBufferSize$get(segment), scope);
    }
    public static VarHandle pfnMarshall$VH() {
        return constants$2280.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * USER_MARSHAL_MARSHALLING_ROUTINE pfnMarshall;
     * }
     */
    public static MemorySegment pfnMarshall$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2280.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * USER_MARSHAL_MARSHALLING_ROUTINE pfnMarshall;
     * }
     */
    public static void pfnMarshall$set(MemorySegment seg, MemorySegment x) {
        constants$2280.const$3.set(seg, x);
    }
    public static MemorySegment pfnMarshall$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2280.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void pfnMarshall$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2280.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static USER_MARSHAL_MARSHALLING_ROUTINE pfnMarshall(MemorySegment segment, Arena scope) {
        return USER_MARSHAL_MARSHALLING_ROUTINE.ofAddress(pfnMarshall$get(segment), scope);
    }
    public static VarHandle pfnUnmarshall$VH() {
        return constants$2280.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * USER_MARSHAL_UNMARSHALLING_ROUTINE pfnUnmarshall;
     * }
     */
    public static MemorySegment pfnUnmarshall$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2280.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * USER_MARSHAL_UNMARSHALLING_ROUTINE pfnUnmarshall;
     * }
     */
    public static void pfnUnmarshall$set(MemorySegment seg, MemorySegment x) {
        constants$2280.const$4.set(seg, x);
    }
    public static MemorySegment pfnUnmarshall$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2280.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void pfnUnmarshall$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2280.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static USER_MARSHAL_UNMARSHALLING_ROUTINE pfnUnmarshall(MemorySegment segment, Arena scope) {
        return USER_MARSHAL_UNMARSHALLING_ROUTINE.ofAddress(pfnUnmarshall$get(segment), scope);
    }
    public static VarHandle pfnFree$VH() {
        return constants$2280.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * USER_MARSHAL_FREEING_ROUTINE pfnFree;
     * }
     */
    public static MemorySegment pfnFree$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2280.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * USER_MARSHAL_FREEING_ROUTINE pfnFree;
     * }
     */
    public static void pfnFree$set(MemorySegment seg, MemorySegment x) {
        constants$2280.const$5.set(seg, x);
    }
    public static MemorySegment pfnFree$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2280.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void pfnFree$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2280.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static USER_MARSHAL_FREEING_ROUTINE pfnFree(MemorySegment segment, Arena scope) {
        return USER_MARSHAL_FREEING_ROUTINE.ofAddress(pfnFree$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



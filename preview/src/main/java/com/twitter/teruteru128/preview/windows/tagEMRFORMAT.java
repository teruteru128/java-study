// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tagEMRFORMAT {
 *     DWORD dSignature;
 *     DWORD nVersion;
 *     DWORD cbData;
 *     DWORD offData;
 * };
 * }
 */
public class tagEMRFORMAT {

    public static MemoryLayout $LAYOUT() {
        return constants$1109.const$4;
    }
    public static VarHandle dSignature$VH() {
        return constants$1109.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dSignature;
     * }
     */
    public static int dSignature$get(MemorySegment seg) {
        return (int)constants$1109.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dSignature;
     * }
     */
    public static void dSignature$set(MemorySegment seg, int x) {
        constants$1109.const$5.set(seg, x);
    }
    public static int dSignature$get(MemorySegment seg, long index) {
        return (int)constants$1109.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void dSignature$set(MemorySegment seg, long index, int x) {
        constants$1109.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nVersion$VH() {
        return constants$1110.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD nVersion;
     * }
     */
    public static int nVersion$get(MemorySegment seg) {
        return (int)constants$1110.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD nVersion;
     * }
     */
    public static void nVersion$set(MemorySegment seg, int x) {
        constants$1110.const$0.set(seg, x);
    }
    public static int nVersion$get(MemorySegment seg, long index) {
        return (int)constants$1110.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void nVersion$set(MemorySegment seg, long index, int x) {
        constants$1110.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cbData$VH() {
        return constants$1110.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD cbData;
     * }
     */
    public static int cbData$get(MemorySegment seg) {
        return (int)constants$1110.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD cbData;
     * }
     */
    public static void cbData$set(MemorySegment seg, int x) {
        constants$1110.const$1.set(seg, x);
    }
    public static int cbData$get(MemorySegment seg, long index) {
        return (int)constants$1110.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void cbData$set(MemorySegment seg, long index, int x) {
        constants$1110.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle offData$VH() {
        return constants$1110.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD offData;
     * }
     */
    public static int offData$get(MemorySegment seg) {
        return (int)constants$1110.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD offData;
     * }
     */
    public static void offData$set(MemorySegment seg, int x) {
        constants$1110.const$2.set(seg, x);
    }
    public static int offData$get(MemorySegment seg, long index) {
        return (int)constants$1110.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void offData$set(MemorySegment seg, long index, int x) {
        constants$1110.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tagCURSORSHAPE {
 *     int xHotSpot;
 *     int yHotSpot;
 *     int cx;
 *     int cy;
 *     int cbWidth;
 *     BYTE Planes;
 *     BYTE BitsPixel;
 * };
 * }
 */
public class tagCURSORSHAPE {

    public static MemoryLayout $LAYOUT() {
        return constants$1318.const$0;
    }
    public static VarHandle xHotSpot$VH() {
        return constants$1318.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int xHotSpot;
     * }
     */
    public static int xHotSpot$get(MemorySegment seg) {
        return (int)constants$1318.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int xHotSpot;
     * }
     */
    public static void xHotSpot$set(MemorySegment seg, int x) {
        constants$1318.const$1.set(seg, x);
    }
    public static int xHotSpot$get(MemorySegment seg, long index) {
        return (int)constants$1318.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void xHotSpot$set(MemorySegment seg, long index, int x) {
        constants$1318.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle yHotSpot$VH() {
        return constants$1318.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int yHotSpot;
     * }
     */
    public static int yHotSpot$get(MemorySegment seg) {
        return (int)constants$1318.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int yHotSpot;
     * }
     */
    public static void yHotSpot$set(MemorySegment seg, int x) {
        constants$1318.const$2.set(seg, x);
    }
    public static int yHotSpot$get(MemorySegment seg, long index) {
        return (int)constants$1318.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void yHotSpot$set(MemorySegment seg, long index, int x) {
        constants$1318.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cx$VH() {
        return constants$1318.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int cx;
     * }
     */
    public static int cx$get(MemorySegment seg) {
        return (int)constants$1318.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int cx;
     * }
     */
    public static void cx$set(MemorySegment seg, int x) {
        constants$1318.const$3.set(seg, x);
    }
    public static int cx$get(MemorySegment seg, long index) {
        return (int)constants$1318.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void cx$set(MemorySegment seg, long index, int x) {
        constants$1318.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cy$VH() {
        return constants$1318.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int cy;
     * }
     */
    public static int cy$get(MemorySegment seg) {
        return (int)constants$1318.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int cy;
     * }
     */
    public static void cy$set(MemorySegment seg, int x) {
        constants$1318.const$4.set(seg, x);
    }
    public static int cy$get(MemorySegment seg, long index) {
        return (int)constants$1318.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void cy$set(MemorySegment seg, long index, int x) {
        constants$1318.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cbWidth$VH() {
        return constants$1318.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int cbWidth;
     * }
     */
    public static int cbWidth$get(MemorySegment seg) {
        return (int)constants$1318.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int cbWidth;
     * }
     */
    public static void cbWidth$set(MemorySegment seg, int x) {
        constants$1318.const$5.set(seg, x);
    }
    public static int cbWidth$get(MemorySegment seg, long index) {
        return (int)constants$1318.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void cbWidth$set(MemorySegment seg, long index, int x) {
        constants$1318.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Planes$VH() {
        return constants$1319.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE Planes;
     * }
     */
    public static byte Planes$get(MemorySegment seg) {
        return (byte)constants$1319.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE Planes;
     * }
     */
    public static void Planes$set(MemorySegment seg, byte x) {
        constants$1319.const$0.set(seg, x);
    }
    public static byte Planes$get(MemorySegment seg, long index) {
        return (byte)constants$1319.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Planes$set(MemorySegment seg, long index, byte x) {
        constants$1319.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle BitsPixel$VH() {
        return constants$1319.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE BitsPixel;
     * }
     */
    public static byte BitsPixel$get(MemorySegment seg) {
        return (byte)constants$1319.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE BitsPixel;
     * }
     */
    public static void BitsPixel$set(MemorySegment seg, byte x) {
        constants$1319.const$1.set(seg, x);
    }
    public static byte BitsPixel$get(MemorySegment seg, long index) {
        return (byte)constants$1319.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void BitsPixel$set(MemorySegment seg, long index, byte x) {
        constants$1319.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



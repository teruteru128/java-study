// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tagCOLORADJUSTMENT {
 *     WORD caSize;
 *     WORD caFlags;
 *     WORD caIlluminantIndex;
 *     WORD caRedGamma;
 *     WORD caGreenGamma;
 *     WORD caBlueGamma;
 *     WORD caReferenceBlack;
 *     WORD caReferenceWhite;
 *     SHORT caContrast;
 *     SHORT caBrightness;
 *     SHORT caColorfulness;
 *     SHORT caRedGreenTint;
 * };
 * }
 */
public class tagCOLORADJUSTMENT {

    public static MemoryLayout $LAYOUT() {
        return constants$1051.const$4;
    }
    public static VarHandle caSize$VH() {
        return constants$1051.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD caSize;
     * }
     */
    public static short caSize$get(MemorySegment seg) {
        return (short)constants$1051.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD caSize;
     * }
     */
    public static void caSize$set(MemorySegment seg, short x) {
        constants$1051.const$5.set(seg, x);
    }
    public static short caSize$get(MemorySegment seg, long index) {
        return (short)constants$1051.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void caSize$set(MemorySegment seg, long index, short x) {
        constants$1051.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle caFlags$VH() {
        return constants$1052.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD caFlags;
     * }
     */
    public static short caFlags$get(MemorySegment seg) {
        return (short)constants$1052.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD caFlags;
     * }
     */
    public static void caFlags$set(MemorySegment seg, short x) {
        constants$1052.const$0.set(seg, x);
    }
    public static short caFlags$get(MemorySegment seg, long index) {
        return (short)constants$1052.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void caFlags$set(MemorySegment seg, long index, short x) {
        constants$1052.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle caIlluminantIndex$VH() {
        return constants$1052.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD caIlluminantIndex;
     * }
     */
    public static short caIlluminantIndex$get(MemorySegment seg) {
        return (short)constants$1052.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD caIlluminantIndex;
     * }
     */
    public static void caIlluminantIndex$set(MemorySegment seg, short x) {
        constants$1052.const$1.set(seg, x);
    }
    public static short caIlluminantIndex$get(MemorySegment seg, long index) {
        return (short)constants$1052.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void caIlluminantIndex$set(MemorySegment seg, long index, short x) {
        constants$1052.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle caRedGamma$VH() {
        return constants$1052.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD caRedGamma;
     * }
     */
    public static short caRedGamma$get(MemorySegment seg) {
        return (short)constants$1052.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD caRedGamma;
     * }
     */
    public static void caRedGamma$set(MemorySegment seg, short x) {
        constants$1052.const$2.set(seg, x);
    }
    public static short caRedGamma$get(MemorySegment seg, long index) {
        return (short)constants$1052.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void caRedGamma$set(MemorySegment seg, long index, short x) {
        constants$1052.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle caGreenGamma$VH() {
        return constants$1052.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD caGreenGamma;
     * }
     */
    public static short caGreenGamma$get(MemorySegment seg) {
        return (short)constants$1052.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD caGreenGamma;
     * }
     */
    public static void caGreenGamma$set(MemorySegment seg, short x) {
        constants$1052.const$3.set(seg, x);
    }
    public static short caGreenGamma$get(MemorySegment seg, long index) {
        return (short)constants$1052.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void caGreenGamma$set(MemorySegment seg, long index, short x) {
        constants$1052.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle caBlueGamma$VH() {
        return constants$1052.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD caBlueGamma;
     * }
     */
    public static short caBlueGamma$get(MemorySegment seg) {
        return (short)constants$1052.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD caBlueGamma;
     * }
     */
    public static void caBlueGamma$set(MemorySegment seg, short x) {
        constants$1052.const$4.set(seg, x);
    }
    public static short caBlueGamma$get(MemorySegment seg, long index) {
        return (short)constants$1052.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void caBlueGamma$set(MemorySegment seg, long index, short x) {
        constants$1052.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle caReferenceBlack$VH() {
        return constants$1052.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD caReferenceBlack;
     * }
     */
    public static short caReferenceBlack$get(MemorySegment seg) {
        return (short)constants$1052.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD caReferenceBlack;
     * }
     */
    public static void caReferenceBlack$set(MemorySegment seg, short x) {
        constants$1052.const$5.set(seg, x);
    }
    public static short caReferenceBlack$get(MemorySegment seg, long index) {
        return (short)constants$1052.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void caReferenceBlack$set(MemorySegment seg, long index, short x) {
        constants$1052.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle caReferenceWhite$VH() {
        return constants$1053.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD caReferenceWhite;
     * }
     */
    public static short caReferenceWhite$get(MemorySegment seg) {
        return (short)constants$1053.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD caReferenceWhite;
     * }
     */
    public static void caReferenceWhite$set(MemorySegment seg, short x) {
        constants$1053.const$0.set(seg, x);
    }
    public static short caReferenceWhite$get(MemorySegment seg, long index) {
        return (short)constants$1053.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void caReferenceWhite$set(MemorySegment seg, long index, short x) {
        constants$1053.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle caContrast$VH() {
        return constants$1053.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * SHORT caContrast;
     * }
     */
    public static short caContrast$get(MemorySegment seg) {
        return (short)constants$1053.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * SHORT caContrast;
     * }
     */
    public static void caContrast$set(MemorySegment seg, short x) {
        constants$1053.const$1.set(seg, x);
    }
    public static short caContrast$get(MemorySegment seg, long index) {
        return (short)constants$1053.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void caContrast$set(MemorySegment seg, long index, short x) {
        constants$1053.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle caBrightness$VH() {
        return constants$1053.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * SHORT caBrightness;
     * }
     */
    public static short caBrightness$get(MemorySegment seg) {
        return (short)constants$1053.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * SHORT caBrightness;
     * }
     */
    public static void caBrightness$set(MemorySegment seg, short x) {
        constants$1053.const$2.set(seg, x);
    }
    public static short caBrightness$get(MemorySegment seg, long index) {
        return (short)constants$1053.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void caBrightness$set(MemorySegment seg, long index, short x) {
        constants$1053.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle caColorfulness$VH() {
        return constants$1053.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * SHORT caColorfulness;
     * }
     */
    public static short caColorfulness$get(MemorySegment seg) {
        return (short)constants$1053.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * SHORT caColorfulness;
     * }
     */
    public static void caColorfulness$set(MemorySegment seg, short x) {
        constants$1053.const$3.set(seg, x);
    }
    public static short caColorfulness$get(MemorySegment seg, long index) {
        return (short)constants$1053.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void caColorfulness$set(MemorySegment seg, long index, short x) {
        constants$1053.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle caRedGreenTint$VH() {
        return constants$1053.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * SHORT caRedGreenTint;
     * }
     */
    public static short caRedGreenTint$get(MemorySegment seg) {
        return (short)constants$1053.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * SHORT caRedGreenTint;
     * }
     */
    public static void caRedGreenTint$set(MemorySegment seg, short x) {
        constants$1053.const$4.set(seg, x);
    }
    public static short caRedGreenTint$get(MemorySegment seg, long index) {
        return (short)constants$1053.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void caRedGreenTint$set(MemorySegment seg, long index, short x) {
        constants$1053.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _CTL_CONTEXT {
 *     DWORD dwMsgAndCertEncodingType;
 *     BYTE* pbCtlEncoded;
 *     DWORD cbCtlEncoded;
 *     PCTL_INFO pCtlInfo;
 *     HCERTSTORE hCertStore;
 *     HCRYPTMSG hCryptMsg;
 *     BYTE* pbCtlContent;
 *     DWORD cbCtlContent;
 * };
 * }
 */
public class _CTL_CONTEXT {

    public static MemoryLayout $LAYOUT() {
        return constants$2119.const$4;
    }
    public static VarHandle dwMsgAndCertEncodingType$VH() {
        return constants$2119.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwMsgAndCertEncodingType;
     * }
     */
    public static int dwMsgAndCertEncodingType$get(MemorySegment seg) {
        return (int)constants$2119.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwMsgAndCertEncodingType;
     * }
     */
    public static void dwMsgAndCertEncodingType$set(MemorySegment seg, int x) {
        constants$2119.const$5.set(seg, x);
    }
    public static int dwMsgAndCertEncodingType$get(MemorySegment seg, long index) {
        return (int)constants$2119.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void dwMsgAndCertEncodingType$set(MemorySegment seg, long index, int x) {
        constants$2119.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pbCtlEncoded$VH() {
        return constants$2120.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE* pbCtlEncoded;
     * }
     */
    public static MemorySegment pbCtlEncoded$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2120.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE* pbCtlEncoded;
     * }
     */
    public static void pbCtlEncoded$set(MemorySegment seg, MemorySegment x) {
        constants$2120.const$0.set(seg, x);
    }
    public static MemorySegment pbCtlEncoded$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2120.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void pbCtlEncoded$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2120.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cbCtlEncoded$VH() {
        return constants$2120.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD cbCtlEncoded;
     * }
     */
    public static int cbCtlEncoded$get(MemorySegment seg) {
        return (int)constants$2120.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD cbCtlEncoded;
     * }
     */
    public static void cbCtlEncoded$set(MemorySegment seg, int x) {
        constants$2120.const$1.set(seg, x);
    }
    public static int cbCtlEncoded$get(MemorySegment seg, long index) {
        return (int)constants$2120.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void cbCtlEncoded$set(MemorySegment seg, long index, int x) {
        constants$2120.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pCtlInfo$VH() {
        return constants$2120.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PCTL_INFO pCtlInfo;
     * }
     */
    public static MemorySegment pCtlInfo$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2120.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PCTL_INFO pCtlInfo;
     * }
     */
    public static void pCtlInfo$set(MemorySegment seg, MemorySegment x) {
        constants$2120.const$2.set(seg, x);
    }
    public static MemorySegment pCtlInfo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2120.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void pCtlInfo$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2120.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hCertStore$VH() {
        return constants$2120.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HCERTSTORE hCertStore;
     * }
     */
    public static MemorySegment hCertStore$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2120.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HCERTSTORE hCertStore;
     * }
     */
    public static void hCertStore$set(MemorySegment seg, MemorySegment x) {
        constants$2120.const$3.set(seg, x);
    }
    public static MemorySegment hCertStore$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2120.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void hCertStore$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2120.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hCryptMsg$VH() {
        return constants$2120.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HCRYPTMSG hCryptMsg;
     * }
     */
    public static MemorySegment hCryptMsg$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2120.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HCRYPTMSG hCryptMsg;
     * }
     */
    public static void hCryptMsg$set(MemorySegment seg, MemorySegment x) {
        constants$2120.const$4.set(seg, x);
    }
    public static MemorySegment hCryptMsg$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2120.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void hCryptMsg$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2120.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pbCtlContent$VH() {
        return constants$2120.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE* pbCtlContent;
     * }
     */
    public static MemorySegment pbCtlContent$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2120.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE* pbCtlContent;
     * }
     */
    public static void pbCtlContent$set(MemorySegment seg, MemorySegment x) {
        constants$2120.const$5.set(seg, x);
    }
    public static MemorySegment pbCtlContent$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2120.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void pbCtlContent$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2120.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cbCtlContent$VH() {
        return constants$2121.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD cbCtlContent;
     * }
     */
    public static int cbCtlContent$get(MemorySegment seg) {
        return (int)constants$2121.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD cbCtlContent;
     * }
     */
    public static void cbCtlContent$set(MemorySegment seg, int x) {
        constants$2121.const$0.set(seg, x);
    }
    public static int cbCtlContent$get(MemorySegment seg, long index) {
        return (int)constants$2121.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void cbCtlContent$set(MemorySegment seg, long index, int x) {
        constants$2121.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



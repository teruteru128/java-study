// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _TOKEN_GROUPS_AND_PRIVILEGES {
 *     DWORD SidCount;
 *     DWORD SidLength;
 *     PSID_AND_ATTRIBUTES Sids;
 *     DWORD RestrictedSidCount;
 *     DWORD RestrictedSidLength;
 *     PSID_AND_ATTRIBUTES RestrictedSids;
 *     DWORD PrivilegeCount;
 *     DWORD PrivilegeLength;
 *     PLUID_AND_ATTRIBUTES Privileges;
 *     LUID AuthenticationId;
 * };
 * }
 */
public class _TOKEN_GROUPS_AND_PRIVILEGES {

    public static MemoryLayout $LAYOUT() {
        return constants$167.const$2;
    }
    public static VarHandle SidCount$VH() {
        return constants$167.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD SidCount;
     * }
     */
    public static int SidCount$get(MemorySegment seg) {
        return (int)constants$167.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD SidCount;
     * }
     */
    public static void SidCount$set(MemorySegment seg, int x) {
        constants$167.const$3.set(seg, x);
    }
    public static int SidCount$get(MemorySegment seg, long index) {
        return (int)constants$167.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void SidCount$set(MemorySegment seg, long index, int x) {
        constants$167.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle SidLength$VH() {
        return constants$167.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD SidLength;
     * }
     */
    public static int SidLength$get(MemorySegment seg) {
        return (int)constants$167.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD SidLength;
     * }
     */
    public static void SidLength$set(MemorySegment seg, int x) {
        constants$167.const$4.set(seg, x);
    }
    public static int SidLength$get(MemorySegment seg, long index) {
        return (int)constants$167.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void SidLength$set(MemorySegment seg, long index, int x) {
        constants$167.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Sids$VH() {
        return constants$167.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PSID_AND_ATTRIBUTES Sids;
     * }
     */
    public static MemorySegment Sids$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$167.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PSID_AND_ATTRIBUTES Sids;
     * }
     */
    public static void Sids$set(MemorySegment seg, MemorySegment x) {
        constants$167.const$5.set(seg, x);
    }
    public static MemorySegment Sids$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$167.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void Sids$set(MemorySegment seg, long index, MemorySegment x) {
        constants$167.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle RestrictedSidCount$VH() {
        return constants$168.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD RestrictedSidCount;
     * }
     */
    public static int RestrictedSidCount$get(MemorySegment seg) {
        return (int)constants$168.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD RestrictedSidCount;
     * }
     */
    public static void RestrictedSidCount$set(MemorySegment seg, int x) {
        constants$168.const$0.set(seg, x);
    }
    public static int RestrictedSidCount$get(MemorySegment seg, long index) {
        return (int)constants$168.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void RestrictedSidCount$set(MemorySegment seg, long index, int x) {
        constants$168.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle RestrictedSidLength$VH() {
        return constants$168.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD RestrictedSidLength;
     * }
     */
    public static int RestrictedSidLength$get(MemorySegment seg) {
        return (int)constants$168.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD RestrictedSidLength;
     * }
     */
    public static void RestrictedSidLength$set(MemorySegment seg, int x) {
        constants$168.const$1.set(seg, x);
    }
    public static int RestrictedSidLength$get(MemorySegment seg, long index) {
        return (int)constants$168.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void RestrictedSidLength$set(MemorySegment seg, long index, int x) {
        constants$168.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle RestrictedSids$VH() {
        return constants$168.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PSID_AND_ATTRIBUTES RestrictedSids;
     * }
     */
    public static MemorySegment RestrictedSids$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$168.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PSID_AND_ATTRIBUTES RestrictedSids;
     * }
     */
    public static void RestrictedSids$set(MemorySegment seg, MemorySegment x) {
        constants$168.const$2.set(seg, x);
    }
    public static MemorySegment RestrictedSids$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$168.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void RestrictedSids$set(MemorySegment seg, long index, MemorySegment x) {
        constants$168.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle PrivilegeCount$VH() {
        return constants$168.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD PrivilegeCount;
     * }
     */
    public static int PrivilegeCount$get(MemorySegment seg) {
        return (int)constants$168.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD PrivilegeCount;
     * }
     */
    public static void PrivilegeCount$set(MemorySegment seg, int x) {
        constants$168.const$3.set(seg, x);
    }
    public static int PrivilegeCount$get(MemorySegment seg, long index) {
        return (int)constants$168.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void PrivilegeCount$set(MemorySegment seg, long index, int x) {
        constants$168.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle PrivilegeLength$VH() {
        return constants$168.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD PrivilegeLength;
     * }
     */
    public static int PrivilegeLength$get(MemorySegment seg) {
        return (int)constants$168.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD PrivilegeLength;
     * }
     */
    public static void PrivilegeLength$set(MemorySegment seg, int x) {
        constants$168.const$4.set(seg, x);
    }
    public static int PrivilegeLength$get(MemorySegment seg, long index) {
        return (int)constants$168.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void PrivilegeLength$set(MemorySegment seg, long index, int x) {
        constants$168.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Privileges$VH() {
        return constants$168.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PLUID_AND_ATTRIBUTES Privileges;
     * }
     */
    public static MemorySegment Privileges$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$168.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PLUID_AND_ATTRIBUTES Privileges;
     * }
     */
    public static void Privileges$set(MemorySegment seg, MemorySegment x) {
        constants$168.const$5.set(seg, x);
    }
    public static MemorySegment Privileges$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$168.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void Privileges$set(MemorySegment seg, long index, MemorySegment x) {
        constants$168.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment AuthenticationId$slice(MemorySegment seg) {
        return seg.asSlice(48, 8);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



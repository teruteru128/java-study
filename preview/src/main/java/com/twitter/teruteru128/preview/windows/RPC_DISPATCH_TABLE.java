// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct {
 *     unsigned int DispatchTableCount;
 *     RPC_DISPATCH_FUNCTION* DispatchTable;
 *     LONG_PTR Reserved;
 * };
 * }
 */
public class RPC_DISPATCH_TABLE {

    public static MemoryLayout $LAYOUT() {
        return constants$1782.const$2;
    }
    public static VarHandle DispatchTableCount$VH() {
        return constants$1782.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int DispatchTableCount;
     * }
     */
    public static int DispatchTableCount$get(MemorySegment seg) {
        return (int)constants$1782.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int DispatchTableCount;
     * }
     */
    public static void DispatchTableCount$set(MemorySegment seg, int x) {
        constants$1782.const$3.set(seg, x);
    }
    public static int DispatchTableCount$get(MemorySegment seg, long index) {
        return (int)constants$1782.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void DispatchTableCount$set(MemorySegment seg, long index, int x) {
        constants$1782.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle DispatchTable$VH() {
        return constants$1782.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * RPC_DISPATCH_FUNCTION* DispatchTable;
     * }
     */
    public static MemorySegment DispatchTable$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1782.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * RPC_DISPATCH_FUNCTION* DispatchTable;
     * }
     */
    public static void DispatchTable$set(MemorySegment seg, MemorySegment x) {
        constants$1782.const$4.set(seg, x);
    }
    public static MemorySegment DispatchTable$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1782.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void DispatchTable$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1782.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Reserved$VH() {
        return constants$1782.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LONG_PTR Reserved;
     * }
     */
    public static long Reserved$get(MemorySegment seg) {
        return (long)constants$1782.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LONG_PTR Reserved;
     * }
     */
    public static void Reserved$set(MemorySegment seg, long x) {
        constants$1782.const$5.set(seg, x);
    }
    public static long Reserved$get(MemorySegment seg, long index) {
        return (long)constants$1782.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void Reserved$set(MemorySegment seg, long index, long x) {
        constants$1782.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _CONTEXT {
 *     DWORD64 P1Home;
 *     DWORD64 P2Home;
 *     DWORD64 P3Home;
 *     DWORD64 P4Home;
 *     DWORD64 P5Home;
 *     DWORD64 P6Home;
 *     DWORD ContextFlags;
 *     DWORD MxCsr;
 *     WORD SegCs;
 *     WORD SegDs;
 *     WORD SegEs;
 *     WORD SegFs;
 *     WORD SegGs;
 *     WORD SegSs;
 *     DWORD EFlags;
 *     DWORD64 Dr0;
 *     DWORD64 Dr1;
 *     DWORD64 Dr2;
 *     DWORD64 Dr3;
 *     DWORD64 Dr6;
 *     DWORD64 Dr7;
 *     DWORD64 Rax;
 *     DWORD64 Rcx;
 *     DWORD64 Rdx;
 *     DWORD64 Rbx;
 *     DWORD64 Rsp;
 *     DWORD64 Rbp;
 *     DWORD64 Rsi;
 *     DWORD64 Rdi;
 *     DWORD64 R8;
 *     DWORD64 R9;
 *     DWORD64 R10;
 *     DWORD64 R11;
 *     DWORD64 R12;
 *     DWORD64 R13;
 *     DWORD64 R14;
 *     DWORD64 R15;
 *     DWORD64 Rip;
 *     union {
 *         XMM_SAVE_AREA32 FltSave;
 *         struct {
 *             M128A Header[2];
 *             M128A Legacy[8];
 *             M128A Xmm0;
 *             M128A Xmm1;
 *             M128A Xmm2;
 *             M128A Xmm3;
 *             M128A Xmm4;
 *             M128A Xmm5;
 *             M128A Xmm6;
 *             M128A Xmm7;
 *             M128A Xmm8;
 *             M128A Xmm9;
 *             M128A Xmm10;
 *             M128A Xmm11;
 *             M128A Xmm12;
 *             M128A Xmm13;
 *             M128A Xmm14;
 *             M128A Xmm15;
 *         };
 *     };
 *     M128A VectorRegister[26];
 *     DWORD64 VectorControl;
 *     DWORD64 DebugControl;
 *     DWORD64 LastBranchToRip;
 *     DWORD64 LastBranchFromRip;
 *     DWORD64 LastExceptionToRip;
 *     DWORD64 LastExceptionFromRip;
 * };
 * }
 */
public class _CONTEXT {

    public static MemoryLayout $LAYOUT() {
        return constants$81.const$4;
    }
    public static VarHandle P1Home$VH() {
        return constants$81.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 P1Home;
     * }
     */
    public static long P1Home$get(MemorySegment seg) {
        return (long)constants$81.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 P1Home;
     * }
     */
    public static void P1Home$set(MemorySegment seg, long x) {
        constants$81.const$5.set(seg, x);
    }
    public static long P1Home$get(MemorySegment seg, long index) {
        return (long)constants$81.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void P1Home$set(MemorySegment seg, long index, long x) {
        constants$81.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle P2Home$VH() {
        return constants$82.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 P2Home;
     * }
     */
    public static long P2Home$get(MemorySegment seg) {
        return (long)constants$82.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 P2Home;
     * }
     */
    public static void P2Home$set(MemorySegment seg, long x) {
        constants$82.const$0.set(seg, x);
    }
    public static long P2Home$get(MemorySegment seg, long index) {
        return (long)constants$82.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void P2Home$set(MemorySegment seg, long index, long x) {
        constants$82.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle P3Home$VH() {
        return constants$82.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 P3Home;
     * }
     */
    public static long P3Home$get(MemorySegment seg) {
        return (long)constants$82.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 P3Home;
     * }
     */
    public static void P3Home$set(MemorySegment seg, long x) {
        constants$82.const$1.set(seg, x);
    }
    public static long P3Home$get(MemorySegment seg, long index) {
        return (long)constants$82.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void P3Home$set(MemorySegment seg, long index, long x) {
        constants$82.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle P4Home$VH() {
        return constants$82.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 P4Home;
     * }
     */
    public static long P4Home$get(MemorySegment seg) {
        return (long)constants$82.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 P4Home;
     * }
     */
    public static void P4Home$set(MemorySegment seg, long x) {
        constants$82.const$2.set(seg, x);
    }
    public static long P4Home$get(MemorySegment seg, long index) {
        return (long)constants$82.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void P4Home$set(MemorySegment seg, long index, long x) {
        constants$82.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle P5Home$VH() {
        return constants$82.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 P5Home;
     * }
     */
    public static long P5Home$get(MemorySegment seg) {
        return (long)constants$82.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 P5Home;
     * }
     */
    public static void P5Home$set(MemorySegment seg, long x) {
        constants$82.const$3.set(seg, x);
    }
    public static long P5Home$get(MemorySegment seg, long index) {
        return (long)constants$82.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void P5Home$set(MemorySegment seg, long index, long x) {
        constants$82.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle P6Home$VH() {
        return constants$82.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 P6Home;
     * }
     */
    public static long P6Home$get(MemorySegment seg) {
        return (long)constants$82.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 P6Home;
     * }
     */
    public static void P6Home$set(MemorySegment seg, long x) {
        constants$82.const$4.set(seg, x);
    }
    public static long P6Home$get(MemorySegment seg, long index) {
        return (long)constants$82.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void P6Home$set(MemorySegment seg, long index, long x) {
        constants$82.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ContextFlags$VH() {
        return constants$82.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD ContextFlags;
     * }
     */
    public static int ContextFlags$get(MemorySegment seg) {
        return (int)constants$82.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD ContextFlags;
     * }
     */
    public static void ContextFlags$set(MemorySegment seg, int x) {
        constants$82.const$5.set(seg, x);
    }
    public static int ContextFlags$get(MemorySegment seg, long index) {
        return (int)constants$82.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void ContextFlags$set(MemorySegment seg, long index, int x) {
        constants$82.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MxCsr$VH() {
        return constants$83.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD MxCsr;
     * }
     */
    public static int MxCsr$get(MemorySegment seg) {
        return (int)constants$83.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD MxCsr;
     * }
     */
    public static void MxCsr$set(MemorySegment seg, int x) {
        constants$83.const$0.set(seg, x);
    }
    public static int MxCsr$get(MemorySegment seg, long index) {
        return (int)constants$83.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void MxCsr$set(MemorySegment seg, long index, int x) {
        constants$83.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle SegCs$VH() {
        return constants$83.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD SegCs;
     * }
     */
    public static short SegCs$get(MemorySegment seg) {
        return (short)constants$83.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD SegCs;
     * }
     */
    public static void SegCs$set(MemorySegment seg, short x) {
        constants$83.const$1.set(seg, x);
    }
    public static short SegCs$get(MemorySegment seg, long index) {
        return (short)constants$83.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void SegCs$set(MemorySegment seg, long index, short x) {
        constants$83.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle SegDs$VH() {
        return constants$83.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD SegDs;
     * }
     */
    public static short SegDs$get(MemorySegment seg) {
        return (short)constants$83.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD SegDs;
     * }
     */
    public static void SegDs$set(MemorySegment seg, short x) {
        constants$83.const$2.set(seg, x);
    }
    public static short SegDs$get(MemorySegment seg, long index) {
        return (short)constants$83.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void SegDs$set(MemorySegment seg, long index, short x) {
        constants$83.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle SegEs$VH() {
        return constants$83.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD SegEs;
     * }
     */
    public static short SegEs$get(MemorySegment seg) {
        return (short)constants$83.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD SegEs;
     * }
     */
    public static void SegEs$set(MemorySegment seg, short x) {
        constants$83.const$3.set(seg, x);
    }
    public static short SegEs$get(MemorySegment seg, long index) {
        return (short)constants$83.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void SegEs$set(MemorySegment seg, long index, short x) {
        constants$83.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle SegFs$VH() {
        return constants$83.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD SegFs;
     * }
     */
    public static short SegFs$get(MemorySegment seg) {
        return (short)constants$83.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD SegFs;
     * }
     */
    public static void SegFs$set(MemorySegment seg, short x) {
        constants$83.const$4.set(seg, x);
    }
    public static short SegFs$get(MemorySegment seg, long index) {
        return (short)constants$83.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void SegFs$set(MemorySegment seg, long index, short x) {
        constants$83.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle SegGs$VH() {
        return constants$83.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD SegGs;
     * }
     */
    public static short SegGs$get(MemorySegment seg) {
        return (short)constants$83.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD SegGs;
     * }
     */
    public static void SegGs$set(MemorySegment seg, short x) {
        constants$83.const$5.set(seg, x);
    }
    public static short SegGs$get(MemorySegment seg, long index) {
        return (short)constants$83.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void SegGs$set(MemorySegment seg, long index, short x) {
        constants$83.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle SegSs$VH() {
        return constants$84.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD SegSs;
     * }
     */
    public static short SegSs$get(MemorySegment seg) {
        return (short)constants$84.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD SegSs;
     * }
     */
    public static void SegSs$set(MemorySegment seg, short x) {
        constants$84.const$0.set(seg, x);
    }
    public static short SegSs$get(MemorySegment seg, long index) {
        return (short)constants$84.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void SegSs$set(MemorySegment seg, long index, short x) {
        constants$84.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle EFlags$VH() {
        return constants$84.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD EFlags;
     * }
     */
    public static int EFlags$get(MemorySegment seg) {
        return (int)constants$84.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD EFlags;
     * }
     */
    public static void EFlags$set(MemorySegment seg, int x) {
        constants$84.const$1.set(seg, x);
    }
    public static int EFlags$get(MemorySegment seg, long index) {
        return (int)constants$84.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void EFlags$set(MemorySegment seg, long index, int x) {
        constants$84.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Dr0$VH() {
        return constants$84.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 Dr0;
     * }
     */
    public static long Dr0$get(MemorySegment seg) {
        return (long)constants$84.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 Dr0;
     * }
     */
    public static void Dr0$set(MemorySegment seg, long x) {
        constants$84.const$2.set(seg, x);
    }
    public static long Dr0$get(MemorySegment seg, long index) {
        return (long)constants$84.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void Dr0$set(MemorySegment seg, long index, long x) {
        constants$84.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Dr1$VH() {
        return constants$84.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 Dr1;
     * }
     */
    public static long Dr1$get(MemorySegment seg) {
        return (long)constants$84.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 Dr1;
     * }
     */
    public static void Dr1$set(MemorySegment seg, long x) {
        constants$84.const$3.set(seg, x);
    }
    public static long Dr1$get(MemorySegment seg, long index) {
        return (long)constants$84.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void Dr1$set(MemorySegment seg, long index, long x) {
        constants$84.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Dr2$VH() {
        return constants$84.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 Dr2;
     * }
     */
    public static long Dr2$get(MemorySegment seg) {
        return (long)constants$84.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 Dr2;
     * }
     */
    public static void Dr2$set(MemorySegment seg, long x) {
        constants$84.const$4.set(seg, x);
    }
    public static long Dr2$get(MemorySegment seg, long index) {
        return (long)constants$84.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void Dr2$set(MemorySegment seg, long index, long x) {
        constants$84.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Dr3$VH() {
        return constants$84.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 Dr3;
     * }
     */
    public static long Dr3$get(MemorySegment seg) {
        return (long)constants$84.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 Dr3;
     * }
     */
    public static void Dr3$set(MemorySegment seg, long x) {
        constants$84.const$5.set(seg, x);
    }
    public static long Dr3$get(MemorySegment seg, long index) {
        return (long)constants$84.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void Dr3$set(MemorySegment seg, long index, long x) {
        constants$84.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Dr6$VH() {
        return constants$85.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 Dr6;
     * }
     */
    public static long Dr6$get(MemorySegment seg) {
        return (long)constants$85.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 Dr6;
     * }
     */
    public static void Dr6$set(MemorySegment seg, long x) {
        constants$85.const$0.set(seg, x);
    }
    public static long Dr6$get(MemorySegment seg, long index) {
        return (long)constants$85.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Dr6$set(MemorySegment seg, long index, long x) {
        constants$85.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Dr7$VH() {
        return constants$85.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 Dr7;
     * }
     */
    public static long Dr7$get(MemorySegment seg) {
        return (long)constants$85.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 Dr7;
     * }
     */
    public static void Dr7$set(MemorySegment seg, long x) {
        constants$85.const$1.set(seg, x);
    }
    public static long Dr7$get(MemorySegment seg, long index) {
        return (long)constants$85.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void Dr7$set(MemorySegment seg, long index, long x) {
        constants$85.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Rax$VH() {
        return constants$85.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 Rax;
     * }
     */
    public static long Rax$get(MemorySegment seg) {
        return (long)constants$85.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 Rax;
     * }
     */
    public static void Rax$set(MemorySegment seg, long x) {
        constants$85.const$2.set(seg, x);
    }
    public static long Rax$get(MemorySegment seg, long index) {
        return (long)constants$85.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void Rax$set(MemorySegment seg, long index, long x) {
        constants$85.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Rcx$VH() {
        return constants$85.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 Rcx;
     * }
     */
    public static long Rcx$get(MemorySegment seg) {
        return (long)constants$85.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 Rcx;
     * }
     */
    public static void Rcx$set(MemorySegment seg, long x) {
        constants$85.const$3.set(seg, x);
    }
    public static long Rcx$get(MemorySegment seg, long index) {
        return (long)constants$85.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void Rcx$set(MemorySegment seg, long index, long x) {
        constants$85.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Rdx$VH() {
        return constants$85.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 Rdx;
     * }
     */
    public static long Rdx$get(MemorySegment seg) {
        return (long)constants$85.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 Rdx;
     * }
     */
    public static void Rdx$set(MemorySegment seg, long x) {
        constants$85.const$4.set(seg, x);
    }
    public static long Rdx$get(MemorySegment seg, long index) {
        return (long)constants$85.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void Rdx$set(MemorySegment seg, long index, long x) {
        constants$85.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Rbx$VH() {
        return constants$85.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 Rbx;
     * }
     */
    public static long Rbx$get(MemorySegment seg) {
        return (long)constants$85.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 Rbx;
     * }
     */
    public static void Rbx$set(MemorySegment seg, long x) {
        constants$85.const$5.set(seg, x);
    }
    public static long Rbx$get(MemorySegment seg, long index) {
        return (long)constants$85.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void Rbx$set(MemorySegment seg, long index, long x) {
        constants$85.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Rsp$VH() {
        return constants$86.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 Rsp;
     * }
     */
    public static long Rsp$get(MemorySegment seg) {
        return (long)constants$86.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 Rsp;
     * }
     */
    public static void Rsp$set(MemorySegment seg, long x) {
        constants$86.const$0.set(seg, x);
    }
    public static long Rsp$get(MemorySegment seg, long index) {
        return (long)constants$86.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Rsp$set(MemorySegment seg, long index, long x) {
        constants$86.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Rbp$VH() {
        return constants$86.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 Rbp;
     * }
     */
    public static long Rbp$get(MemorySegment seg) {
        return (long)constants$86.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 Rbp;
     * }
     */
    public static void Rbp$set(MemorySegment seg, long x) {
        constants$86.const$1.set(seg, x);
    }
    public static long Rbp$get(MemorySegment seg, long index) {
        return (long)constants$86.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void Rbp$set(MemorySegment seg, long index, long x) {
        constants$86.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Rsi$VH() {
        return constants$86.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 Rsi;
     * }
     */
    public static long Rsi$get(MemorySegment seg) {
        return (long)constants$86.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 Rsi;
     * }
     */
    public static void Rsi$set(MemorySegment seg, long x) {
        constants$86.const$2.set(seg, x);
    }
    public static long Rsi$get(MemorySegment seg, long index) {
        return (long)constants$86.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void Rsi$set(MemorySegment seg, long index, long x) {
        constants$86.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Rdi$VH() {
        return constants$86.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 Rdi;
     * }
     */
    public static long Rdi$get(MemorySegment seg) {
        return (long)constants$86.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 Rdi;
     * }
     */
    public static void Rdi$set(MemorySegment seg, long x) {
        constants$86.const$3.set(seg, x);
    }
    public static long Rdi$get(MemorySegment seg, long index) {
        return (long)constants$86.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void Rdi$set(MemorySegment seg, long index, long x) {
        constants$86.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle R8$VH() {
        return constants$86.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 R8;
     * }
     */
    public static long R8$get(MemorySegment seg) {
        return (long)constants$86.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 R8;
     * }
     */
    public static void R8$set(MemorySegment seg, long x) {
        constants$86.const$4.set(seg, x);
    }
    public static long R8$get(MemorySegment seg, long index) {
        return (long)constants$86.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void R8$set(MemorySegment seg, long index, long x) {
        constants$86.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle R9$VH() {
        return constants$86.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 R9;
     * }
     */
    public static long R9$get(MemorySegment seg) {
        return (long)constants$86.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 R9;
     * }
     */
    public static void R9$set(MemorySegment seg, long x) {
        constants$86.const$5.set(seg, x);
    }
    public static long R9$get(MemorySegment seg, long index) {
        return (long)constants$86.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void R9$set(MemorySegment seg, long index, long x) {
        constants$86.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle R10$VH() {
        return constants$87.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 R10;
     * }
     */
    public static long R10$get(MemorySegment seg) {
        return (long)constants$87.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 R10;
     * }
     */
    public static void R10$set(MemorySegment seg, long x) {
        constants$87.const$0.set(seg, x);
    }
    public static long R10$get(MemorySegment seg, long index) {
        return (long)constants$87.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void R10$set(MemorySegment seg, long index, long x) {
        constants$87.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle R11$VH() {
        return constants$87.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 R11;
     * }
     */
    public static long R11$get(MemorySegment seg) {
        return (long)constants$87.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 R11;
     * }
     */
    public static void R11$set(MemorySegment seg, long x) {
        constants$87.const$1.set(seg, x);
    }
    public static long R11$get(MemorySegment seg, long index) {
        return (long)constants$87.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void R11$set(MemorySegment seg, long index, long x) {
        constants$87.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle R12$VH() {
        return constants$87.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 R12;
     * }
     */
    public static long R12$get(MemorySegment seg) {
        return (long)constants$87.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 R12;
     * }
     */
    public static void R12$set(MemorySegment seg, long x) {
        constants$87.const$2.set(seg, x);
    }
    public static long R12$get(MemorySegment seg, long index) {
        return (long)constants$87.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void R12$set(MemorySegment seg, long index, long x) {
        constants$87.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle R13$VH() {
        return constants$87.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 R13;
     * }
     */
    public static long R13$get(MemorySegment seg) {
        return (long)constants$87.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 R13;
     * }
     */
    public static void R13$set(MemorySegment seg, long x) {
        constants$87.const$3.set(seg, x);
    }
    public static long R13$get(MemorySegment seg, long index) {
        return (long)constants$87.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void R13$set(MemorySegment seg, long index, long x) {
        constants$87.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle R14$VH() {
        return constants$87.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 R14;
     * }
     */
    public static long R14$get(MemorySegment seg) {
        return (long)constants$87.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 R14;
     * }
     */
    public static void R14$set(MemorySegment seg, long x) {
        constants$87.const$4.set(seg, x);
    }
    public static long R14$get(MemorySegment seg, long index) {
        return (long)constants$87.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void R14$set(MemorySegment seg, long index, long x) {
        constants$87.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle R15$VH() {
        return constants$87.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 R15;
     * }
     */
    public static long R15$get(MemorySegment seg) {
        return (long)constants$87.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 R15;
     * }
     */
    public static void R15$set(MemorySegment seg, long x) {
        constants$87.const$5.set(seg, x);
    }
    public static long R15$get(MemorySegment seg, long index) {
        return (long)constants$87.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void R15$set(MemorySegment seg, long index, long x) {
        constants$87.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Rip$VH() {
        return constants$88.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 Rip;
     * }
     */
    public static long Rip$get(MemorySegment seg) {
        return (long)constants$88.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 Rip;
     * }
     */
    public static void Rip$set(MemorySegment seg, long x) {
        constants$88.const$0.set(seg, x);
    }
    public static long Rip$get(MemorySegment seg, long index) {
        return (long)constants$88.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Rip$set(MemorySegment seg, long index, long x) {
        constants$88.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment FltSave$slice(MemorySegment seg) {
        return seg.asSlice(256, 512);
    }
    public static MemorySegment Header$slice(MemorySegment seg) {
        return seg.asSlice(256, 32);
    }
    public static MemorySegment Legacy$slice(MemorySegment seg) {
        return seg.asSlice(288, 128);
    }
    public static MemorySegment Xmm0$slice(MemorySegment seg) {
        return seg.asSlice(416, 16);
    }
    public static MemorySegment Xmm1$slice(MemorySegment seg) {
        return seg.asSlice(432, 16);
    }
    public static MemorySegment Xmm2$slice(MemorySegment seg) {
        return seg.asSlice(448, 16);
    }
    public static MemorySegment Xmm3$slice(MemorySegment seg) {
        return seg.asSlice(464, 16);
    }
    public static MemorySegment Xmm4$slice(MemorySegment seg) {
        return seg.asSlice(480, 16);
    }
    public static MemorySegment Xmm5$slice(MemorySegment seg) {
        return seg.asSlice(496, 16);
    }
    public static MemorySegment Xmm6$slice(MemorySegment seg) {
        return seg.asSlice(512, 16);
    }
    public static MemorySegment Xmm7$slice(MemorySegment seg) {
        return seg.asSlice(528, 16);
    }
    public static MemorySegment Xmm8$slice(MemorySegment seg) {
        return seg.asSlice(544, 16);
    }
    public static MemorySegment Xmm9$slice(MemorySegment seg) {
        return seg.asSlice(560, 16);
    }
    public static MemorySegment Xmm10$slice(MemorySegment seg) {
        return seg.asSlice(576, 16);
    }
    public static MemorySegment Xmm11$slice(MemorySegment seg) {
        return seg.asSlice(592, 16);
    }
    public static MemorySegment Xmm12$slice(MemorySegment seg) {
        return seg.asSlice(608, 16);
    }
    public static MemorySegment Xmm13$slice(MemorySegment seg) {
        return seg.asSlice(624, 16);
    }
    public static MemorySegment Xmm14$slice(MemorySegment seg) {
        return seg.asSlice(640, 16);
    }
    public static MemorySegment Xmm15$slice(MemorySegment seg) {
        return seg.asSlice(656, 16);
    }
    public static MemorySegment VectorRegister$slice(MemorySegment seg) {
        return seg.asSlice(768, 416);
    }
    public static VarHandle VectorControl$VH() {
        return constants$88.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 VectorControl;
     * }
     */
    public static long VectorControl$get(MemorySegment seg) {
        return (long)constants$88.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 VectorControl;
     * }
     */
    public static void VectorControl$set(MemorySegment seg, long x) {
        constants$88.const$1.set(seg, x);
    }
    public static long VectorControl$get(MemorySegment seg, long index) {
        return (long)constants$88.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void VectorControl$set(MemorySegment seg, long index, long x) {
        constants$88.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle DebugControl$VH() {
        return constants$88.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 DebugControl;
     * }
     */
    public static long DebugControl$get(MemorySegment seg) {
        return (long)constants$88.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 DebugControl;
     * }
     */
    public static void DebugControl$set(MemorySegment seg, long x) {
        constants$88.const$2.set(seg, x);
    }
    public static long DebugControl$get(MemorySegment seg, long index) {
        return (long)constants$88.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void DebugControl$set(MemorySegment seg, long index, long x) {
        constants$88.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle LastBranchToRip$VH() {
        return constants$88.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 LastBranchToRip;
     * }
     */
    public static long LastBranchToRip$get(MemorySegment seg) {
        return (long)constants$88.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 LastBranchToRip;
     * }
     */
    public static void LastBranchToRip$set(MemorySegment seg, long x) {
        constants$88.const$3.set(seg, x);
    }
    public static long LastBranchToRip$get(MemorySegment seg, long index) {
        return (long)constants$88.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void LastBranchToRip$set(MemorySegment seg, long index, long x) {
        constants$88.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle LastBranchFromRip$VH() {
        return constants$88.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 LastBranchFromRip;
     * }
     */
    public static long LastBranchFromRip$get(MemorySegment seg) {
        return (long)constants$88.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 LastBranchFromRip;
     * }
     */
    public static void LastBranchFromRip$set(MemorySegment seg, long x) {
        constants$88.const$4.set(seg, x);
    }
    public static long LastBranchFromRip$get(MemorySegment seg, long index) {
        return (long)constants$88.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void LastBranchFromRip$set(MemorySegment seg, long index, long x) {
        constants$88.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle LastExceptionToRip$VH() {
        return constants$88.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 LastExceptionToRip;
     * }
     */
    public static long LastExceptionToRip$get(MemorySegment seg) {
        return (long)constants$88.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 LastExceptionToRip;
     * }
     */
    public static void LastExceptionToRip$set(MemorySegment seg, long x) {
        constants$88.const$5.set(seg, x);
    }
    public static long LastExceptionToRip$get(MemorySegment seg, long index) {
        return (long)constants$88.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void LastExceptionToRip$set(MemorySegment seg, long index, long x) {
        constants$88.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle LastExceptionFromRip$VH() {
        return constants$89.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 LastExceptionFromRip;
     * }
     */
    public static long LastExceptionFromRip$get(MemorySegment seg) {
        return (long)constants$89.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 LastExceptionFromRip;
     * }
     */
    public static void LastExceptionFromRip$set(MemorySegment seg, long x) {
        constants$89.const$0.set(seg, x);
    }
    public static long LastExceptionFromRip$get(MemorySegment seg, long index) {
        return (long)constants$89.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void LastExceptionFromRip$set(MemorySegment seg, long index, long x) {
        constants$89.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



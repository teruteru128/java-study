// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct {
 *     DWORDLONG UsnJournalID;
 *     USN FirstUsn;
 *     USN NextUsn;
 *     USN LowestValidUsn;
 *     USN MaxUsn;
 *     DWORDLONG MaximumSize;
 *     DWORDLONG AllocationDelta;
 *     WORD MinSupportedMajorVersion;
 *     WORD MaxSupportedMajorVersion;
 *     DWORD Flags;
 *     DWORDLONG RangeTrackChunkSize;
 *     LONGLONG RangeTrackFileSizeThreshold;
 * };
 * }
 */
public class USN_JOURNAL_DATA_V2 {

    public static MemoryLayout $LAYOUT() {
        return constants$2597.const$3;
    }
    public static VarHandle UsnJournalID$VH() {
        return constants$2597.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORDLONG UsnJournalID;
     * }
     */
    public static long UsnJournalID$get(MemorySegment seg) {
        return (long)constants$2597.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORDLONG UsnJournalID;
     * }
     */
    public static void UsnJournalID$set(MemorySegment seg, long x) {
        constants$2597.const$4.set(seg, x);
    }
    public static long UsnJournalID$get(MemorySegment seg, long index) {
        return (long)constants$2597.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void UsnJournalID$set(MemorySegment seg, long index, long x) {
        constants$2597.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle FirstUsn$VH() {
        return constants$2597.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * USN FirstUsn;
     * }
     */
    public static long FirstUsn$get(MemorySegment seg) {
        return (long)constants$2597.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * USN FirstUsn;
     * }
     */
    public static void FirstUsn$set(MemorySegment seg, long x) {
        constants$2597.const$5.set(seg, x);
    }
    public static long FirstUsn$get(MemorySegment seg, long index) {
        return (long)constants$2597.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void FirstUsn$set(MemorySegment seg, long index, long x) {
        constants$2597.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle NextUsn$VH() {
        return constants$2598.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * USN NextUsn;
     * }
     */
    public static long NextUsn$get(MemorySegment seg) {
        return (long)constants$2598.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * USN NextUsn;
     * }
     */
    public static void NextUsn$set(MemorySegment seg, long x) {
        constants$2598.const$0.set(seg, x);
    }
    public static long NextUsn$get(MemorySegment seg, long index) {
        return (long)constants$2598.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void NextUsn$set(MemorySegment seg, long index, long x) {
        constants$2598.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle LowestValidUsn$VH() {
        return constants$2598.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * USN LowestValidUsn;
     * }
     */
    public static long LowestValidUsn$get(MemorySegment seg) {
        return (long)constants$2598.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * USN LowestValidUsn;
     * }
     */
    public static void LowestValidUsn$set(MemorySegment seg, long x) {
        constants$2598.const$1.set(seg, x);
    }
    public static long LowestValidUsn$get(MemorySegment seg, long index) {
        return (long)constants$2598.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void LowestValidUsn$set(MemorySegment seg, long index, long x) {
        constants$2598.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MaxUsn$VH() {
        return constants$2598.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * USN MaxUsn;
     * }
     */
    public static long MaxUsn$get(MemorySegment seg) {
        return (long)constants$2598.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * USN MaxUsn;
     * }
     */
    public static void MaxUsn$set(MemorySegment seg, long x) {
        constants$2598.const$2.set(seg, x);
    }
    public static long MaxUsn$get(MemorySegment seg, long index) {
        return (long)constants$2598.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void MaxUsn$set(MemorySegment seg, long index, long x) {
        constants$2598.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MaximumSize$VH() {
        return constants$2598.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORDLONG MaximumSize;
     * }
     */
    public static long MaximumSize$get(MemorySegment seg) {
        return (long)constants$2598.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORDLONG MaximumSize;
     * }
     */
    public static void MaximumSize$set(MemorySegment seg, long x) {
        constants$2598.const$3.set(seg, x);
    }
    public static long MaximumSize$get(MemorySegment seg, long index) {
        return (long)constants$2598.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void MaximumSize$set(MemorySegment seg, long index, long x) {
        constants$2598.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle AllocationDelta$VH() {
        return constants$2598.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORDLONG AllocationDelta;
     * }
     */
    public static long AllocationDelta$get(MemorySegment seg) {
        return (long)constants$2598.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORDLONG AllocationDelta;
     * }
     */
    public static void AllocationDelta$set(MemorySegment seg, long x) {
        constants$2598.const$4.set(seg, x);
    }
    public static long AllocationDelta$get(MemorySegment seg, long index) {
        return (long)constants$2598.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void AllocationDelta$set(MemorySegment seg, long index, long x) {
        constants$2598.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MinSupportedMajorVersion$VH() {
        return constants$2598.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD MinSupportedMajorVersion;
     * }
     */
    public static short MinSupportedMajorVersion$get(MemorySegment seg) {
        return (short)constants$2598.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD MinSupportedMajorVersion;
     * }
     */
    public static void MinSupportedMajorVersion$set(MemorySegment seg, short x) {
        constants$2598.const$5.set(seg, x);
    }
    public static short MinSupportedMajorVersion$get(MemorySegment seg, long index) {
        return (short)constants$2598.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void MinSupportedMajorVersion$set(MemorySegment seg, long index, short x) {
        constants$2598.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MaxSupportedMajorVersion$VH() {
        return constants$2599.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD MaxSupportedMajorVersion;
     * }
     */
    public static short MaxSupportedMajorVersion$get(MemorySegment seg) {
        return (short)constants$2599.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD MaxSupportedMajorVersion;
     * }
     */
    public static void MaxSupportedMajorVersion$set(MemorySegment seg, short x) {
        constants$2599.const$0.set(seg, x);
    }
    public static short MaxSupportedMajorVersion$get(MemorySegment seg, long index) {
        return (short)constants$2599.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void MaxSupportedMajorVersion$set(MemorySegment seg, long index, short x) {
        constants$2599.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Flags$VH() {
        return constants$2599.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Flags;
     * }
     */
    public static int Flags$get(MemorySegment seg) {
        return (int)constants$2599.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Flags;
     * }
     */
    public static void Flags$set(MemorySegment seg, int x) {
        constants$2599.const$1.set(seg, x);
    }
    public static int Flags$get(MemorySegment seg, long index) {
        return (int)constants$2599.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, int x) {
        constants$2599.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle RangeTrackChunkSize$VH() {
        return constants$2599.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORDLONG RangeTrackChunkSize;
     * }
     */
    public static long RangeTrackChunkSize$get(MemorySegment seg) {
        return (long)constants$2599.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORDLONG RangeTrackChunkSize;
     * }
     */
    public static void RangeTrackChunkSize$set(MemorySegment seg, long x) {
        constants$2599.const$2.set(seg, x);
    }
    public static long RangeTrackChunkSize$get(MemorySegment seg, long index) {
        return (long)constants$2599.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void RangeTrackChunkSize$set(MemorySegment seg, long index, long x) {
        constants$2599.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle RangeTrackFileSizeThreshold$VH() {
        return constants$2599.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LONGLONG RangeTrackFileSizeThreshold;
     * }
     */
    public static long RangeTrackFileSizeThreshold$get(MemorySegment seg) {
        return (long)constants$2599.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LONGLONG RangeTrackFileSizeThreshold;
     * }
     */
    public static void RangeTrackFileSizeThreshold$set(MemorySegment seg, long x) {
        constants$2599.const$3.set(seg, x);
    }
    public static long RangeTrackFileSizeThreshold$get(MemorySegment seg, long index) {
        return (long)constants$2599.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void RangeTrackFileSizeThreshold$set(MemorySegment seg, long index, long x) {
        constants$2599.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



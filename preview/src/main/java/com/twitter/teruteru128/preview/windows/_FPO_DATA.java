// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _FPO_DATA {
 *     DWORD ulOffStart;
 *     DWORD cbProcSize;
 *     DWORD cdwLocals;
 *     WORD cdwParams;
 *      *     WORD cbProlog;
 *     WORD cbRegs;
 *     WORD fHasSEH;
 *     WORD fUseBP;
 *     WORD reserved;
 *     WORD cbFrame;
 * };
 * }
 */
public class _FPO_DATA {

    public static MemoryLayout $LAYOUT() {
        return constants$454.const$1;
    }
    public static VarHandle ulOffStart$VH() {
        return constants$454.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD ulOffStart;
     * }
     */
    public static int ulOffStart$get(MemorySegment seg) {
        return (int)constants$454.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD ulOffStart;
     * }
     */
    public static void ulOffStart$set(MemorySegment seg, int x) {
        constants$454.const$2.set(seg, x);
    }
    public static int ulOffStart$get(MemorySegment seg, long index) {
        return (int)constants$454.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void ulOffStart$set(MemorySegment seg, long index, int x) {
        constants$454.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cbProcSize$VH() {
        return constants$454.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD cbProcSize;
     * }
     */
    public static int cbProcSize$get(MemorySegment seg) {
        return (int)constants$454.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD cbProcSize;
     * }
     */
    public static void cbProcSize$set(MemorySegment seg, int x) {
        constants$454.const$3.set(seg, x);
    }
    public static int cbProcSize$get(MemorySegment seg, long index) {
        return (int)constants$454.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void cbProcSize$set(MemorySegment seg, long index, int x) {
        constants$454.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cdwLocals$VH() {
        return constants$454.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD cdwLocals;
     * }
     */
    public static int cdwLocals$get(MemorySegment seg) {
        return (int)constants$454.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD cdwLocals;
     * }
     */
    public static void cdwLocals$set(MemorySegment seg, int x) {
        constants$454.const$4.set(seg, x);
    }
    public static int cdwLocals$get(MemorySegment seg, long index) {
        return (int)constants$454.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void cdwLocals$set(MemorySegment seg, long index, int x) {
        constants$454.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cdwParams$VH() {
        return constants$454.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD cdwParams;
     * }
     */
    public static short cdwParams$get(MemorySegment seg) {
        return (short)constants$454.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD cdwParams;
     * }
     */
    public static void cdwParams$set(MemorySegment seg, short x) {
        constants$454.const$5.set(seg, x);
    }
    public static short cdwParams$get(MemorySegment seg, long index) {
        return (short)constants$454.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void cdwParams$set(MemorySegment seg, long index, short x) {
        constants$454.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _QUERY_FILE_LAYOUT_INPUT {
 *     union {
 *         DWORD FilterEntryCount;
 *         DWORD NumberOfPairs;
 *     };
 *     DWORD Flags;
 *     QUERY_FILE_LAYOUT_FILTER_TYPE FilterType;
 *     DWORD Reserved;
 *     union  Filter;
 * };
 * }
 */
public class _QUERY_FILE_LAYOUT_INPUT {

    public static MemoryLayout $LAYOUT() {
        return constants$2690.const$1;
    }
    public static VarHandle FilterEntryCount$VH() {
        return constants$2690.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD FilterEntryCount;
     * }
     */
    public static int FilterEntryCount$get(MemorySegment seg) {
        return (int)constants$2690.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD FilterEntryCount;
     * }
     */
    public static void FilterEntryCount$set(MemorySegment seg, int x) {
        constants$2690.const$2.set(seg, x);
    }
    public static int FilterEntryCount$get(MemorySegment seg, long index) {
        return (int)constants$2690.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void FilterEntryCount$set(MemorySegment seg, long index, int x) {
        constants$2690.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle NumberOfPairs$VH() {
        return constants$2690.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD NumberOfPairs;
     * }
     */
    public static int NumberOfPairs$get(MemorySegment seg) {
        return (int)constants$2690.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD NumberOfPairs;
     * }
     */
    public static void NumberOfPairs$set(MemorySegment seg, int x) {
        constants$2690.const$3.set(seg, x);
    }
    public static int NumberOfPairs$get(MemorySegment seg, long index) {
        return (int)constants$2690.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void NumberOfPairs$set(MemorySegment seg, long index, int x) {
        constants$2690.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Flags$VH() {
        return constants$2690.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Flags;
     * }
     */
    public static int Flags$get(MemorySegment seg) {
        return (int)constants$2690.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Flags;
     * }
     */
    public static void Flags$set(MemorySegment seg, int x) {
        constants$2690.const$4.set(seg, x);
    }
    public static int Flags$get(MemorySegment seg, long index) {
        return (int)constants$2690.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, int x) {
        constants$2690.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle FilterType$VH() {
        return constants$2690.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * QUERY_FILE_LAYOUT_FILTER_TYPE FilterType;
     * }
     */
    public static int FilterType$get(MemorySegment seg) {
        return (int)constants$2690.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * QUERY_FILE_LAYOUT_FILTER_TYPE FilterType;
     * }
     */
    public static void FilterType$set(MemorySegment seg, int x) {
        constants$2690.const$5.set(seg, x);
    }
    public static int FilterType$get(MemorySegment seg, long index) {
        return (int)constants$2690.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void FilterType$set(MemorySegment seg, long index, int x) {
        constants$2690.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Reserved$VH() {
        return constants$2691.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Reserved;
     * }
     */
    public static int Reserved$get(MemorySegment seg) {
        return (int)constants$2691.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Reserved;
     * }
     */
    public static void Reserved$set(MemorySegment seg, int x) {
        constants$2691.const$0.set(seg, x);
    }
    public static int Reserved$get(MemorySegment seg, long index) {
        return (int)constants$2691.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Reserved$set(MemorySegment seg, long index, int x) {
        constants$2691.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
     * union {
     *     CLUSTER_RANGE ClusterRanges[1];
     *     FILE_REFERENCE_RANGE FileReferenceRanges[1];
     *     STORAGE_RESERVE_ID StorageReserveIds[1];
     * };
     * }
     */
    public static final class Filter {

        // Suppresses default constructor, ensuring non-instantiability.
        private Filter() {}
        public static MemoryLayout $LAYOUT() {
            return constants$2691.const$1;
        }
        public static MemorySegment ClusterRanges$slice(MemorySegment seg) {
            return seg.asSlice(0, 16);
        }
        public static MemorySegment FileReferenceRanges$slice(MemorySegment seg) {
            return seg.asSlice(0, 16);
        }
        public static MemorySegment StorageReserveIds$slice(MemorySegment seg) {
            return seg.asSlice(0, 4);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment Filter$slice(MemorySegment seg) {
        return seg.asSlice(16, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



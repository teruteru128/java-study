// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * union _STORAGE_SPEC_VERSION {
 *     struct {
 *         union  MinorVersion;
 *         WORD MajorVersion;
 *     };
 *     DWORD AsUlong;
 * };
 * }
 */
public class _STORAGE_SPEC_VERSION {

    public static MemoryLayout $LAYOUT() {
        return constants$2419.const$5;
    }
    /**
     * {@snippet :
     * union {
     *     struct {
     *         BYTE SubMinor;
     *         BYTE Minor;
     *     };
     *     WORD AsUshort;
     * };
     * }
     */
    public static final class MinorVersion {

        // Suppresses default constructor, ensuring non-instantiability.
        private MinorVersion() {}
        public static MemoryLayout $LAYOUT() {
            return constants$2420.const$0;
        }
        public static VarHandle SubMinor$VH() {
            return constants$2420.const$1;
        }
        /**
         * Getter for field:
         * {@snippet :
         * BYTE SubMinor;
         * }
         */
        public static byte SubMinor$get(MemorySegment seg) {
            return (byte)constants$2420.const$1.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * BYTE SubMinor;
         * }
         */
        public static void SubMinor$set(MemorySegment seg, byte x) {
            constants$2420.const$1.set(seg, x);
        }
        public static byte SubMinor$get(MemorySegment seg, long index) {
            return (byte)constants$2420.const$1.get(seg.asSlice(index*sizeof()));
        }
        public static void SubMinor$set(MemorySegment seg, long index, byte x) {
            constants$2420.const$1.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Minor$VH() {
            return constants$2420.const$2;
        }
        /**
         * Getter for field:
         * {@snippet :
         * BYTE Minor;
         * }
         */
        public static byte Minor$get(MemorySegment seg) {
            return (byte)constants$2420.const$2.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * BYTE Minor;
         * }
         */
        public static void Minor$set(MemorySegment seg, byte x) {
            constants$2420.const$2.set(seg, x);
        }
        public static byte Minor$get(MemorySegment seg, long index) {
            return (byte)constants$2420.const$2.get(seg.asSlice(index*sizeof()));
        }
        public static void Minor$set(MemorySegment seg, long index, byte x) {
            constants$2420.const$2.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AsUshort$VH() {
            return constants$2420.const$3;
        }
        /**
         * Getter for field:
         * {@snippet :
         * WORD AsUshort;
         * }
         */
        public static short AsUshort$get(MemorySegment seg) {
            return (short)constants$2420.const$3.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * WORD AsUshort;
         * }
         */
        public static void AsUshort$set(MemorySegment seg, short x) {
            constants$2420.const$3.set(seg, x);
        }
        public static short AsUshort$get(MemorySegment seg, long index) {
            return (short)constants$2420.const$3.get(seg.asSlice(index*sizeof()));
        }
        public static void AsUshort$set(MemorySegment seg, long index, short x) {
            constants$2420.const$3.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment MinorVersion$slice(MemorySegment seg) {
        return seg.asSlice(0, 2);
    }
    public static VarHandle MajorVersion$VH() {
        return constants$2420.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD MajorVersion;
     * }
     */
    public static short MajorVersion$get(MemorySegment seg) {
        return (short)constants$2420.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD MajorVersion;
     * }
     */
    public static void MajorVersion$set(MemorySegment seg, short x) {
        constants$2420.const$4.set(seg, x);
    }
    public static short MajorVersion$get(MemorySegment seg, long index) {
        return (short)constants$2420.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void MajorVersion$set(MemorySegment seg, long index, short x) {
        constants$2420.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle AsUlong$VH() {
        return constants$2420.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD AsUlong;
     * }
     */
    public static int AsUlong$get(MemorySegment seg) {
        return (int)constants$2420.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD AsUlong;
     * }
     */
    public static void AsUlong$set(MemorySegment seg, int x) {
        constants$2420.const$5.set(seg, x);
    }
    public static int AsUlong$get(MemorySegment seg, long index) {
        return (int)constants$2420.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void AsUlong$set(MemorySegment seg, long index, int x) {
        constants$2420.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



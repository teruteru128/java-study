// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct WIN32_MEMORY_REGION_INFORMATION {
 *     PVOID AllocationBase;
 *     ULONG AllocationProtect;
 *     union {
 *         ULONG Flags;
 *         struct {
 *              *             ULONG Private;
 *             ULONG MappedDataFile;
 *             ULONG MappedImage;
 *             ULONG MappedPageFile;
 *             ULONG MappedPhysical;
 *             ULONG DirectMapped;
 *             ULONG Reserved;
 *         };
 *     };
 *     SIZE_T RegionSize;
 *     SIZE_T CommitSize;
 * };
 * }
 */
public class WIN32_MEMORY_REGION_INFORMATION {

    public static MemoryLayout $LAYOUT() {
        return constants$684.const$0;
    }
    public static VarHandle AllocationBase$VH() {
        return constants$684.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PVOID AllocationBase;
     * }
     */
    public static MemorySegment AllocationBase$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$684.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PVOID AllocationBase;
     * }
     */
    public static void AllocationBase$set(MemorySegment seg, MemorySegment x) {
        constants$684.const$1.set(seg, x);
    }
    public static MemorySegment AllocationBase$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$684.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void AllocationBase$set(MemorySegment seg, long index, MemorySegment x) {
        constants$684.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle AllocationProtect$VH() {
        return constants$684.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG AllocationProtect;
     * }
     */
    public static int AllocationProtect$get(MemorySegment seg) {
        return (int)constants$684.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG AllocationProtect;
     * }
     */
    public static void AllocationProtect$set(MemorySegment seg, int x) {
        constants$684.const$2.set(seg, x);
    }
    public static int AllocationProtect$get(MemorySegment seg, long index) {
        return (int)constants$684.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void AllocationProtect$set(MemorySegment seg, long index, int x) {
        constants$684.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Flags$VH() {
        return constants$684.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG Flags;
     * }
     */
    public static int Flags$get(MemorySegment seg) {
        return (int)constants$684.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG Flags;
     * }
     */
    public static void Flags$set(MemorySegment seg, int x) {
        constants$684.const$3.set(seg, x);
    }
    public static int Flags$get(MemorySegment seg, long index) {
        return (int)constants$684.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, int x) {
        constants$684.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle RegionSize$VH() {
        return constants$684.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * SIZE_T RegionSize;
     * }
     */
    public static long RegionSize$get(MemorySegment seg) {
        return (long)constants$684.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * SIZE_T RegionSize;
     * }
     */
    public static void RegionSize$set(MemorySegment seg, long x) {
        constants$684.const$4.set(seg, x);
    }
    public static long RegionSize$get(MemorySegment seg, long index) {
        return (long)constants$684.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void RegionSize$set(MemorySegment seg, long index, long x) {
        constants$684.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle CommitSize$VH() {
        return constants$684.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * SIZE_T CommitSize;
     * }
     */
    public static long CommitSize$get(MemorySegment seg) {
        return (long)constants$684.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * SIZE_T CommitSize;
     * }
     */
    public static void CommitSize$set(MemorySegment seg, long x) {
        constants$684.const$5.set(seg, x);
    }
    public static long CommitSize$get(MemorySegment seg, long index) {
        return (long)constants$684.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void CommitSize$set(MemorySegment seg, long index, long x) {
        constants$684.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



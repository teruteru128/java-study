// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _DEVICE_COPY_OFFLOAD_DESCRIPTOR {
 *     DWORD Version;
 *     DWORD Size;
 *     DWORD MaximumTokenLifetime;
 *     DWORD DefaultTokenLifetime;
 *     DWORDLONG MaximumTransferSize;
 *     DWORDLONG OptimalTransferCount;
 *     DWORD MaximumDataDescriptors;
 *     DWORD MaximumTransferLengthPerDescriptor;
 *     DWORD OptimalTransferLengthPerDescriptor;
 *     WORD OptimalTransferLengthGranularity;
 *     BYTE Reserved[2];
 * };
 * }
 */
public class _DEVICE_COPY_OFFLOAD_DESCRIPTOR {

    public static MemoryLayout $LAYOUT() {
        return constants$2401.const$5;
    }
    public static VarHandle Version$VH() {
        return constants$2402.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Version;
     * }
     */
    public static int Version$get(MemorySegment seg) {
        return (int)constants$2402.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Version;
     * }
     */
    public static void Version$set(MemorySegment seg, int x) {
        constants$2402.const$0.set(seg, x);
    }
    public static int Version$get(MemorySegment seg, long index) {
        return (int)constants$2402.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, int x) {
        constants$2402.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Size$VH() {
        return constants$2402.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Size;
     * }
     */
    public static int Size$get(MemorySegment seg) {
        return (int)constants$2402.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Size;
     * }
     */
    public static void Size$set(MemorySegment seg, int x) {
        constants$2402.const$1.set(seg, x);
    }
    public static int Size$get(MemorySegment seg, long index) {
        return (int)constants$2402.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void Size$set(MemorySegment seg, long index, int x) {
        constants$2402.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MaximumTokenLifetime$VH() {
        return constants$2402.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD MaximumTokenLifetime;
     * }
     */
    public static int MaximumTokenLifetime$get(MemorySegment seg) {
        return (int)constants$2402.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD MaximumTokenLifetime;
     * }
     */
    public static void MaximumTokenLifetime$set(MemorySegment seg, int x) {
        constants$2402.const$2.set(seg, x);
    }
    public static int MaximumTokenLifetime$get(MemorySegment seg, long index) {
        return (int)constants$2402.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void MaximumTokenLifetime$set(MemorySegment seg, long index, int x) {
        constants$2402.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle DefaultTokenLifetime$VH() {
        return constants$2402.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD DefaultTokenLifetime;
     * }
     */
    public static int DefaultTokenLifetime$get(MemorySegment seg) {
        return (int)constants$2402.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD DefaultTokenLifetime;
     * }
     */
    public static void DefaultTokenLifetime$set(MemorySegment seg, int x) {
        constants$2402.const$3.set(seg, x);
    }
    public static int DefaultTokenLifetime$get(MemorySegment seg, long index) {
        return (int)constants$2402.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void DefaultTokenLifetime$set(MemorySegment seg, long index, int x) {
        constants$2402.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MaximumTransferSize$VH() {
        return constants$2402.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORDLONG MaximumTransferSize;
     * }
     */
    public static long MaximumTransferSize$get(MemorySegment seg) {
        return (long)constants$2402.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORDLONG MaximumTransferSize;
     * }
     */
    public static void MaximumTransferSize$set(MemorySegment seg, long x) {
        constants$2402.const$4.set(seg, x);
    }
    public static long MaximumTransferSize$get(MemorySegment seg, long index) {
        return (long)constants$2402.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void MaximumTransferSize$set(MemorySegment seg, long index, long x) {
        constants$2402.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle OptimalTransferCount$VH() {
        return constants$2402.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORDLONG OptimalTransferCount;
     * }
     */
    public static long OptimalTransferCount$get(MemorySegment seg) {
        return (long)constants$2402.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORDLONG OptimalTransferCount;
     * }
     */
    public static void OptimalTransferCount$set(MemorySegment seg, long x) {
        constants$2402.const$5.set(seg, x);
    }
    public static long OptimalTransferCount$get(MemorySegment seg, long index) {
        return (long)constants$2402.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void OptimalTransferCount$set(MemorySegment seg, long index, long x) {
        constants$2402.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MaximumDataDescriptors$VH() {
        return constants$2403.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD MaximumDataDescriptors;
     * }
     */
    public static int MaximumDataDescriptors$get(MemorySegment seg) {
        return (int)constants$2403.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD MaximumDataDescriptors;
     * }
     */
    public static void MaximumDataDescriptors$set(MemorySegment seg, int x) {
        constants$2403.const$0.set(seg, x);
    }
    public static int MaximumDataDescriptors$get(MemorySegment seg, long index) {
        return (int)constants$2403.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void MaximumDataDescriptors$set(MemorySegment seg, long index, int x) {
        constants$2403.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MaximumTransferLengthPerDescriptor$VH() {
        return constants$2403.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD MaximumTransferLengthPerDescriptor;
     * }
     */
    public static int MaximumTransferLengthPerDescriptor$get(MemorySegment seg) {
        return (int)constants$2403.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD MaximumTransferLengthPerDescriptor;
     * }
     */
    public static void MaximumTransferLengthPerDescriptor$set(MemorySegment seg, int x) {
        constants$2403.const$1.set(seg, x);
    }
    public static int MaximumTransferLengthPerDescriptor$get(MemorySegment seg, long index) {
        return (int)constants$2403.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void MaximumTransferLengthPerDescriptor$set(MemorySegment seg, long index, int x) {
        constants$2403.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle OptimalTransferLengthPerDescriptor$VH() {
        return constants$2403.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD OptimalTransferLengthPerDescriptor;
     * }
     */
    public static int OptimalTransferLengthPerDescriptor$get(MemorySegment seg) {
        return (int)constants$2403.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD OptimalTransferLengthPerDescriptor;
     * }
     */
    public static void OptimalTransferLengthPerDescriptor$set(MemorySegment seg, int x) {
        constants$2403.const$2.set(seg, x);
    }
    public static int OptimalTransferLengthPerDescriptor$get(MemorySegment seg, long index) {
        return (int)constants$2403.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void OptimalTransferLengthPerDescriptor$set(MemorySegment seg, long index, int x) {
        constants$2403.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle OptimalTransferLengthGranularity$VH() {
        return constants$2403.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD OptimalTransferLengthGranularity;
     * }
     */
    public static short OptimalTransferLengthGranularity$get(MemorySegment seg) {
        return (short)constants$2403.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD OptimalTransferLengthGranularity;
     * }
     */
    public static void OptimalTransferLengthGranularity$set(MemorySegment seg, short x) {
        constants$2403.const$3.set(seg, x);
    }
    public static short OptimalTransferLengthGranularity$get(MemorySegment seg, long index) {
        return (short)constants$2403.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void OptimalTransferLengthGranularity$set(MemorySegment seg, long index, short x) {
        constants$2403.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Reserved$slice(MemorySegment seg) {
        return seg.asSlice(46, 2);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION {
 *     DWORD ulFlags;
 *     DWORD ulEncodedAssemblyIdentityLength;
 *     DWORD ulManifestPathType;
 *     DWORD ulManifestPathLength;
 *     LARGE_INTEGER liManifestLastWriteTime;
 *     DWORD ulPolicyPathType;
 *     DWORD ulPolicyPathLength;
 *     LARGE_INTEGER liPolicyLastWriteTime;
 *     DWORD ulMetadataSatelliteRosterIndex;
 *     DWORD ulManifestVersionMajor;
 *     DWORD ulManifestVersionMinor;
 *     DWORD ulPolicyVersionMajor;
 *     DWORD ulPolicyVersionMinor;
 *     DWORD ulAssemblyDirectoryNameLength;
 *     PCWSTR lpAssemblyEncodedAssemblyIdentity;
 *     PCWSTR lpAssemblyManifestPath;
 *     PCWSTR lpAssemblyPolicyPath;
 *     PCWSTR lpAssemblyDirectoryName;
 *     DWORD ulFileCount;
 * };
 * }
 */
public class _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION {

    public static MemoryLayout $LAYOUT() {
        return constants$499.const$1;
    }
    public static VarHandle ulFlags$VH() {
        return constants$499.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD ulFlags;
     * }
     */
    public static int ulFlags$get(MemorySegment seg) {
        return (int)constants$499.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD ulFlags;
     * }
     */
    public static void ulFlags$set(MemorySegment seg, int x) {
        constants$499.const$2.set(seg, x);
    }
    public static int ulFlags$get(MemorySegment seg, long index) {
        return (int)constants$499.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void ulFlags$set(MemorySegment seg, long index, int x) {
        constants$499.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ulEncodedAssemblyIdentityLength$VH() {
        return constants$499.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD ulEncodedAssemblyIdentityLength;
     * }
     */
    public static int ulEncodedAssemblyIdentityLength$get(MemorySegment seg) {
        return (int)constants$499.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD ulEncodedAssemblyIdentityLength;
     * }
     */
    public static void ulEncodedAssemblyIdentityLength$set(MemorySegment seg, int x) {
        constants$499.const$3.set(seg, x);
    }
    public static int ulEncodedAssemblyIdentityLength$get(MemorySegment seg, long index) {
        return (int)constants$499.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void ulEncodedAssemblyIdentityLength$set(MemorySegment seg, long index, int x) {
        constants$499.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ulManifestPathType$VH() {
        return constants$499.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD ulManifestPathType;
     * }
     */
    public static int ulManifestPathType$get(MemorySegment seg) {
        return (int)constants$499.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD ulManifestPathType;
     * }
     */
    public static void ulManifestPathType$set(MemorySegment seg, int x) {
        constants$499.const$4.set(seg, x);
    }
    public static int ulManifestPathType$get(MemorySegment seg, long index) {
        return (int)constants$499.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void ulManifestPathType$set(MemorySegment seg, long index, int x) {
        constants$499.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ulManifestPathLength$VH() {
        return constants$499.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD ulManifestPathLength;
     * }
     */
    public static int ulManifestPathLength$get(MemorySegment seg) {
        return (int)constants$499.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD ulManifestPathLength;
     * }
     */
    public static void ulManifestPathLength$set(MemorySegment seg, int x) {
        constants$499.const$5.set(seg, x);
    }
    public static int ulManifestPathLength$get(MemorySegment seg, long index) {
        return (int)constants$499.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void ulManifestPathLength$set(MemorySegment seg, long index, int x) {
        constants$499.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment liManifestLastWriteTime$slice(MemorySegment seg) {
        return seg.asSlice(16, 8);
    }
    public static VarHandle ulPolicyPathType$VH() {
        return constants$500.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD ulPolicyPathType;
     * }
     */
    public static int ulPolicyPathType$get(MemorySegment seg) {
        return (int)constants$500.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD ulPolicyPathType;
     * }
     */
    public static void ulPolicyPathType$set(MemorySegment seg, int x) {
        constants$500.const$0.set(seg, x);
    }
    public static int ulPolicyPathType$get(MemorySegment seg, long index) {
        return (int)constants$500.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void ulPolicyPathType$set(MemorySegment seg, long index, int x) {
        constants$500.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ulPolicyPathLength$VH() {
        return constants$500.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD ulPolicyPathLength;
     * }
     */
    public static int ulPolicyPathLength$get(MemorySegment seg) {
        return (int)constants$500.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD ulPolicyPathLength;
     * }
     */
    public static void ulPolicyPathLength$set(MemorySegment seg, int x) {
        constants$500.const$1.set(seg, x);
    }
    public static int ulPolicyPathLength$get(MemorySegment seg, long index) {
        return (int)constants$500.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void ulPolicyPathLength$set(MemorySegment seg, long index, int x) {
        constants$500.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment liPolicyLastWriteTime$slice(MemorySegment seg) {
        return seg.asSlice(32, 8);
    }
    public static VarHandle ulMetadataSatelliteRosterIndex$VH() {
        return constants$500.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD ulMetadataSatelliteRosterIndex;
     * }
     */
    public static int ulMetadataSatelliteRosterIndex$get(MemorySegment seg) {
        return (int)constants$500.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD ulMetadataSatelliteRosterIndex;
     * }
     */
    public static void ulMetadataSatelliteRosterIndex$set(MemorySegment seg, int x) {
        constants$500.const$2.set(seg, x);
    }
    public static int ulMetadataSatelliteRosterIndex$get(MemorySegment seg, long index) {
        return (int)constants$500.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void ulMetadataSatelliteRosterIndex$set(MemorySegment seg, long index, int x) {
        constants$500.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ulManifestVersionMajor$VH() {
        return constants$500.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD ulManifestVersionMajor;
     * }
     */
    public static int ulManifestVersionMajor$get(MemorySegment seg) {
        return (int)constants$500.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD ulManifestVersionMajor;
     * }
     */
    public static void ulManifestVersionMajor$set(MemorySegment seg, int x) {
        constants$500.const$3.set(seg, x);
    }
    public static int ulManifestVersionMajor$get(MemorySegment seg, long index) {
        return (int)constants$500.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void ulManifestVersionMajor$set(MemorySegment seg, long index, int x) {
        constants$500.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ulManifestVersionMinor$VH() {
        return constants$500.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD ulManifestVersionMinor;
     * }
     */
    public static int ulManifestVersionMinor$get(MemorySegment seg) {
        return (int)constants$500.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD ulManifestVersionMinor;
     * }
     */
    public static void ulManifestVersionMinor$set(MemorySegment seg, int x) {
        constants$500.const$4.set(seg, x);
    }
    public static int ulManifestVersionMinor$get(MemorySegment seg, long index) {
        return (int)constants$500.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void ulManifestVersionMinor$set(MemorySegment seg, long index, int x) {
        constants$500.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ulPolicyVersionMajor$VH() {
        return constants$500.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD ulPolicyVersionMajor;
     * }
     */
    public static int ulPolicyVersionMajor$get(MemorySegment seg) {
        return (int)constants$500.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD ulPolicyVersionMajor;
     * }
     */
    public static void ulPolicyVersionMajor$set(MemorySegment seg, int x) {
        constants$500.const$5.set(seg, x);
    }
    public static int ulPolicyVersionMajor$get(MemorySegment seg, long index) {
        return (int)constants$500.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void ulPolicyVersionMajor$set(MemorySegment seg, long index, int x) {
        constants$500.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ulPolicyVersionMinor$VH() {
        return constants$501.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD ulPolicyVersionMinor;
     * }
     */
    public static int ulPolicyVersionMinor$get(MemorySegment seg) {
        return (int)constants$501.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD ulPolicyVersionMinor;
     * }
     */
    public static void ulPolicyVersionMinor$set(MemorySegment seg, int x) {
        constants$501.const$0.set(seg, x);
    }
    public static int ulPolicyVersionMinor$get(MemorySegment seg, long index) {
        return (int)constants$501.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void ulPolicyVersionMinor$set(MemorySegment seg, long index, int x) {
        constants$501.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ulAssemblyDirectoryNameLength$VH() {
        return constants$501.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD ulAssemblyDirectoryNameLength;
     * }
     */
    public static int ulAssemblyDirectoryNameLength$get(MemorySegment seg) {
        return (int)constants$501.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD ulAssemblyDirectoryNameLength;
     * }
     */
    public static void ulAssemblyDirectoryNameLength$set(MemorySegment seg, int x) {
        constants$501.const$1.set(seg, x);
    }
    public static int ulAssemblyDirectoryNameLength$get(MemorySegment seg, long index) {
        return (int)constants$501.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void ulAssemblyDirectoryNameLength$set(MemorySegment seg, long index, int x) {
        constants$501.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lpAssemblyEncodedAssemblyIdentity$VH() {
        return constants$501.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PCWSTR lpAssemblyEncodedAssemblyIdentity;
     * }
     */
    public static MemorySegment lpAssemblyEncodedAssemblyIdentity$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$501.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PCWSTR lpAssemblyEncodedAssemblyIdentity;
     * }
     */
    public static void lpAssemblyEncodedAssemblyIdentity$set(MemorySegment seg, MemorySegment x) {
        constants$501.const$2.set(seg, x);
    }
    public static MemorySegment lpAssemblyEncodedAssemblyIdentity$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$501.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void lpAssemblyEncodedAssemblyIdentity$set(MemorySegment seg, long index, MemorySegment x) {
        constants$501.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lpAssemblyManifestPath$VH() {
        return constants$501.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PCWSTR lpAssemblyManifestPath;
     * }
     */
    public static MemorySegment lpAssemblyManifestPath$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$501.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PCWSTR lpAssemblyManifestPath;
     * }
     */
    public static void lpAssemblyManifestPath$set(MemorySegment seg, MemorySegment x) {
        constants$501.const$3.set(seg, x);
    }
    public static MemorySegment lpAssemblyManifestPath$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$501.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void lpAssemblyManifestPath$set(MemorySegment seg, long index, MemorySegment x) {
        constants$501.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lpAssemblyPolicyPath$VH() {
        return constants$501.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PCWSTR lpAssemblyPolicyPath;
     * }
     */
    public static MemorySegment lpAssemblyPolicyPath$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$501.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PCWSTR lpAssemblyPolicyPath;
     * }
     */
    public static void lpAssemblyPolicyPath$set(MemorySegment seg, MemorySegment x) {
        constants$501.const$4.set(seg, x);
    }
    public static MemorySegment lpAssemblyPolicyPath$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$501.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void lpAssemblyPolicyPath$set(MemorySegment seg, long index, MemorySegment x) {
        constants$501.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lpAssemblyDirectoryName$VH() {
        return constants$501.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PCWSTR lpAssemblyDirectoryName;
     * }
     */
    public static MemorySegment lpAssemblyDirectoryName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$501.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PCWSTR lpAssemblyDirectoryName;
     * }
     */
    public static void lpAssemblyDirectoryName$set(MemorySegment seg, MemorySegment x) {
        constants$501.const$5.set(seg, x);
    }
    public static MemorySegment lpAssemblyDirectoryName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$501.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void lpAssemblyDirectoryName$set(MemorySegment seg, long index, MemorySegment x) {
        constants$501.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ulFileCount$VH() {
        return constants$502.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD ulFileCount;
     * }
     */
    public static int ulFileCount$get(MemorySegment seg) {
        return (int)constants$502.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD ulFileCount;
     * }
     */
    public static void ulFileCount$set(MemorySegment seg, int x) {
        constants$502.const$0.set(seg, x);
    }
    public static int ulFileCount$get(MemorySegment seg, long index) {
        return (int)constants$502.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void ulFileCount$set(MemorySegment seg, long index, int x) {
        constants$502.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



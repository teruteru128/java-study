// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _NDR_USER_MARSHAL_INFO_LEVEL1 {
 *     void* Buffer;
 *     unsigned long BufferSize;
 *     void* (*pfnAllocate)(size_t);
 *     void (*pfnFree)(void*);
 *     struct IRpcChannelBuffer* pRpcChannelBuffer;
 *     ULONG_PTR Reserved[5];
 * };
 * }
 */
public class _NDR_USER_MARSHAL_INFO_LEVEL1 {

    public static MemoryLayout $LAYOUT() {
        return constants$2333.const$5;
    }
    public static VarHandle Buffer$VH() {
        return constants$2334.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* Buffer;
     * }
     */
    public static MemorySegment Buffer$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2334.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* Buffer;
     * }
     */
    public static void Buffer$set(MemorySegment seg, MemorySegment x) {
        constants$2334.const$0.set(seg, x);
    }
    public static MemorySegment Buffer$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2334.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Buffer$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2334.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle BufferSize$VH() {
        return constants$2334.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long BufferSize;
     * }
     */
    public static int BufferSize$get(MemorySegment seg) {
        return (int)constants$2334.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long BufferSize;
     * }
     */
    public static void BufferSize$set(MemorySegment seg, int x) {
        constants$2334.const$1.set(seg, x);
    }
    public static int BufferSize$get(MemorySegment seg, long index) {
        return (int)constants$2334.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void BufferSize$set(MemorySegment seg, long index, int x) {
        constants$2334.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * void* (*pfnAllocate)(size_t);
     * }
     */
    public interface pfnAllocate {

        java.lang.foreign.MemorySegment apply(long Size);
        static MemorySegment allocate(pfnAllocate fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2334.const$2, fi, constants$1977.const$2, scope);
        }
        static pfnAllocate ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (long _Size) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$1977.const$4.invokeExact(symbol, _Size);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle pfnAllocate$VH() {
        return constants$2334.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* (*pfnAllocate)(size_t);
     * }
     */
    public static MemorySegment pfnAllocate$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2334.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* (*pfnAllocate)(size_t);
     * }
     */
    public static void pfnAllocate$set(MemorySegment seg, MemorySegment x) {
        constants$2334.const$3.set(seg, x);
    }
    public static MemorySegment pfnAllocate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2334.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void pfnAllocate$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2334.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static pfnAllocate pfnAllocate(MemorySegment segment, Arena scope) {
        return pfnAllocate.ofAddress(pfnAllocate$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*pfnFree)(void*);
     * }
     */
    public interface pfnFree {

        void apply(java.lang.foreign.MemorySegment pParameter);
        static MemorySegment allocate(pfnFree fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2334.const$4, fi, constants$0.const$0, scope);
        }
        static pfnFree ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _pParameter) -> {
                try {
                    constants$496.const$2.invokeExact(symbol, _pParameter);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle pfnFree$VH() {
        return constants$2334.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*pfnFree)(void*);
     * }
     */
    public static MemorySegment pfnFree$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2334.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*pfnFree)(void*);
     * }
     */
    public static void pfnFree$set(MemorySegment seg, MemorySegment x) {
        constants$2334.const$5.set(seg, x);
    }
    public static MemorySegment pfnFree$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2334.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void pfnFree$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2334.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static pfnFree pfnFree(MemorySegment segment, Arena scope) {
        return pfnFree.ofAddress(pfnFree$get(segment), scope);
    }
    public static VarHandle pRpcChannelBuffer$VH() {
        return constants$2335.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct IRpcChannelBuffer* pRpcChannelBuffer;
     * }
     */
    public static MemorySegment pRpcChannelBuffer$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2335.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct IRpcChannelBuffer* pRpcChannelBuffer;
     * }
     */
    public static void pRpcChannelBuffer$set(MemorySegment seg, MemorySegment x) {
        constants$2335.const$0.set(seg, x);
    }
    public static MemorySegment pRpcChannelBuffer$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2335.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void pRpcChannelBuffer$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2335.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Reserved$slice(MemorySegment seg) {
        return seg.asSlice(40, 40);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



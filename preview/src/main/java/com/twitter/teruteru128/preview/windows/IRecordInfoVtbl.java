// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IRecordInfoVtbl {
 *     HRESULT (*QueryInterface)(IRecordInfo*,const IID*,void**);
 *     ULONG (*AddRef)(IRecordInfo*);
 *     ULONG (*Release)(IRecordInfo*);
 *     HRESULT (*RecordInit)(IRecordInfo*,PVOID);
 *     HRESULT (*RecordClear)(IRecordInfo*,PVOID);
 *     HRESULT (*RecordCopy)(IRecordInfo*,PVOID,PVOID);
 *     HRESULT (*GetGuid)(IRecordInfo*,GUID*);
 *     HRESULT (*GetName)(IRecordInfo*,BSTR*);
 *     HRESULT (*GetSize)(IRecordInfo*,ULONG*);
 *     HRESULT (*GetTypeInfo)(IRecordInfo*,ITypeInfo**);
 *     HRESULT (*GetField)(IRecordInfo*,PVOID,LPCOLESTR,VARIANT*);
 *     HRESULT (*GetFieldNoCopy)(IRecordInfo*,PVOID,LPCOLESTR,VARIANT*,PVOID*);
 *     HRESULT (*PutField)(IRecordInfo*,ULONG,PVOID,LPCOLESTR,VARIANT*);
 *     HRESULT (*PutFieldNoCopy)(IRecordInfo*,ULONG,PVOID,LPCOLESTR,VARIANT*);
 *     HRESULT (*GetFieldNames)(IRecordInfo*,ULONG*,BSTR*);
 *     BOOL (*IsMatchingType)(IRecordInfo*,IRecordInfo*);
 *     PVOID (*RecordCreate)(IRecordInfo*);
 *     HRESULT (*RecordCreateCopy)(IRecordInfo*,PVOID,PVOID*);
 *     HRESULT (*RecordDestroy)(IRecordInfo*,PVOID);
 * };
 * }
 */
public class IRecordInfoVtbl {

    public static MemoryLayout $LAYOUT() {
        return constants$3552.const$0;
    }
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IRecordInfo*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3552.const$1, fi, constants$37.const$3, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle QueryInterface$VH() {
        return constants$3552.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IRecordInfo*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3552.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IRecordInfo*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        constants$3552.const$2.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3552.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3552.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, Arena scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*AddRef)(IRecordInfo*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3552.const$3, fi, constants$18.const$5, scope);
        }
        static AddRef ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle AddRef$VH() {
        return constants$3552.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IRecordInfo*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3552.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IRecordInfo*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        constants$3552.const$4.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3552.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3552.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, Arena scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*Release)(IRecordInfo*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3552.const$5, fi, constants$18.const$5, scope);
        }
        static Release ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Release$VH() {
        return constants$3553.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IRecordInfo*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3553.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IRecordInfo*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        constants$3553.const$0.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3553.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3553.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, Arena scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*RecordInit)(IRecordInfo*,PVOID);
     * }
     */
    public interface RecordInit {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(RecordInit fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3553.const$1, fi, constants$34.const$0, scope);
        }
        static RecordInit ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle RecordInit$VH() {
        return constants$3553.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*RecordInit)(IRecordInfo*,PVOID);
     * }
     */
    public static MemorySegment RecordInit$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3553.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*RecordInit)(IRecordInfo*,PVOID);
     * }
     */
    public static void RecordInit$set(MemorySegment seg, MemorySegment x) {
        constants$3553.const$2.set(seg, x);
    }
    public static MemorySegment RecordInit$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3553.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void RecordInit$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3553.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static RecordInit RecordInit(MemorySegment segment, Arena scope) {
        return RecordInit.ofAddress(RecordInit$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*RecordClear)(IRecordInfo*,PVOID);
     * }
     */
    public interface RecordClear {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(RecordClear fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3553.const$3, fi, constants$34.const$0, scope);
        }
        static RecordClear ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle RecordClear$VH() {
        return constants$3553.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*RecordClear)(IRecordInfo*,PVOID);
     * }
     */
    public static MemorySegment RecordClear$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3553.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*RecordClear)(IRecordInfo*,PVOID);
     * }
     */
    public static void RecordClear$set(MemorySegment seg, MemorySegment x) {
        constants$3553.const$4.set(seg, x);
    }
    public static MemorySegment RecordClear$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3553.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void RecordClear$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3553.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static RecordClear RecordClear(MemorySegment segment, Arena scope) {
        return RecordClear.ofAddress(RecordClear$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*RecordCopy)(IRecordInfo*,PVOID,PVOID);
     * }
     */
    public interface RecordCopy {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(RecordCopy fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3553.const$5, fi, constants$37.const$3, scope);
        }
        static RecordCopy ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle RecordCopy$VH() {
        return constants$3554.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*RecordCopy)(IRecordInfo*,PVOID,PVOID);
     * }
     */
    public static MemorySegment RecordCopy$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3554.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*RecordCopy)(IRecordInfo*,PVOID,PVOID);
     * }
     */
    public static void RecordCopy$set(MemorySegment seg, MemorySegment x) {
        constants$3554.const$0.set(seg, x);
    }
    public static MemorySegment RecordCopy$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3554.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void RecordCopy$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3554.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static RecordCopy RecordCopy(MemorySegment segment, Arena scope) {
        return RecordCopy.ofAddress(RecordCopy$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetGuid)(IRecordInfo*,GUID*);
     * }
     */
    public interface GetGuid {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetGuid fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3554.const$1, fi, constants$34.const$0, scope);
        }
        static GetGuid ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetGuid$VH() {
        return constants$3554.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetGuid)(IRecordInfo*,GUID*);
     * }
     */
    public static MemorySegment GetGuid$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3554.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetGuid)(IRecordInfo*,GUID*);
     * }
     */
    public static void GetGuid$set(MemorySegment seg, MemorySegment x) {
        constants$3554.const$2.set(seg, x);
    }
    public static MemorySegment GetGuid$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3554.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void GetGuid$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3554.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetGuid GetGuid(MemorySegment segment, Arena scope) {
        return GetGuid.ofAddress(GetGuid$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetName)(IRecordInfo*,BSTR*);
     * }
     */
    public interface GetName {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetName fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3554.const$3, fi, constants$34.const$0, scope);
        }
        static GetName ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetName$VH() {
        return constants$3554.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetName)(IRecordInfo*,BSTR*);
     * }
     */
    public static MemorySegment GetName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3554.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetName)(IRecordInfo*,BSTR*);
     * }
     */
    public static void GetName$set(MemorySegment seg, MemorySegment x) {
        constants$3554.const$4.set(seg, x);
    }
    public static MemorySegment GetName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3554.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void GetName$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3554.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetName GetName(MemorySegment segment, Arena scope) {
        return GetName.ofAddress(GetName$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetSize)(IRecordInfo*,ULONG*);
     * }
     */
    public interface GetSize {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetSize fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3554.const$5, fi, constants$34.const$0, scope);
        }
        static GetSize ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetSize$VH() {
        return constants$3555.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetSize)(IRecordInfo*,ULONG*);
     * }
     */
    public static MemorySegment GetSize$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3555.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetSize)(IRecordInfo*,ULONG*);
     * }
     */
    public static void GetSize$set(MemorySegment seg, MemorySegment x) {
        constants$3555.const$0.set(seg, x);
    }
    public static MemorySegment GetSize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3555.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void GetSize$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3555.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetSize GetSize(MemorySegment segment, Arena scope) {
        return GetSize.ofAddress(GetSize$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetTypeInfo)(IRecordInfo*,ITypeInfo**);
     * }
     */
    public interface GetTypeInfo {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetTypeInfo fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3555.const$1, fi, constants$34.const$0, scope);
        }
        static GetTypeInfo ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetTypeInfo$VH() {
        return constants$3555.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetTypeInfo)(IRecordInfo*,ITypeInfo**);
     * }
     */
    public static MemorySegment GetTypeInfo$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3555.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetTypeInfo)(IRecordInfo*,ITypeInfo**);
     * }
     */
    public static void GetTypeInfo$set(MemorySegment seg, MemorySegment x) {
        constants$3555.const$2.set(seg, x);
    }
    public static MemorySegment GetTypeInfo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3555.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeInfo$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3555.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeInfo GetTypeInfo(MemorySegment segment, Arena scope) {
        return GetTypeInfo.ofAddress(GetTypeInfo$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetField)(IRecordInfo*,PVOID,LPCOLESTR,VARIANT*);
     * }
     */
    public interface GetField {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(GetField fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3555.const$3, fi, constants$1.const$3, scope);
        }
        static GetField ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)constants$55.const$1.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetField$VH() {
        return constants$3555.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetField)(IRecordInfo*,PVOID,LPCOLESTR,VARIANT*);
     * }
     */
    public static MemorySegment GetField$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3555.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetField)(IRecordInfo*,PVOID,LPCOLESTR,VARIANT*);
     * }
     */
    public static void GetField$set(MemorySegment seg, MemorySegment x) {
        constants$3555.const$4.set(seg, x);
    }
    public static MemorySegment GetField$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3555.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void GetField$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3555.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetField GetField(MemorySegment segment, Arena scope) {
        return GetField.ofAddress(GetField$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetFieldNoCopy)(IRecordInfo*,PVOID,LPCOLESTR,VARIANT*,PVOID*);
     * }
     */
    public interface GetFieldNoCopy {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(GetFieldNoCopy fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3555.const$5, fi, constants$577.const$5, scope);
        }
        static GetFieldNoCopy ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)constants$1781.const$5.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetFieldNoCopy$VH() {
        return constants$3556.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetFieldNoCopy)(IRecordInfo*,PVOID,LPCOLESTR,VARIANT*,PVOID*);
     * }
     */
    public static MemorySegment GetFieldNoCopy$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3556.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetFieldNoCopy)(IRecordInfo*,PVOID,LPCOLESTR,VARIANT*,PVOID*);
     * }
     */
    public static void GetFieldNoCopy$set(MemorySegment seg, MemorySegment x) {
        constants$3556.const$0.set(seg, x);
    }
    public static MemorySegment GetFieldNoCopy$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3556.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void GetFieldNoCopy$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3556.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetFieldNoCopy GetFieldNoCopy(MemorySegment segment, Arena scope) {
        return GetFieldNoCopy.ofAddress(GetFieldNoCopy$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*PutField)(IRecordInfo*,ULONG,PVOID,LPCOLESTR,VARIANT*);
     * }
     */
    public interface PutField {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(PutField fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3556.const$1, fi, constants$775.const$0, scope);
        }
        static PutField ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)constants$2151.const$3.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle PutField$VH() {
        return constants$3556.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*PutField)(IRecordInfo*,ULONG,PVOID,LPCOLESTR,VARIANT*);
     * }
     */
    public static MemorySegment PutField$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3556.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*PutField)(IRecordInfo*,ULONG,PVOID,LPCOLESTR,VARIANT*);
     * }
     */
    public static void PutField$set(MemorySegment seg, MemorySegment x) {
        constants$3556.const$2.set(seg, x);
    }
    public static MemorySegment PutField$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3556.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void PutField$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3556.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static PutField PutField(MemorySegment segment, Arena scope) {
        return PutField.ofAddress(PutField$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*PutFieldNoCopy)(IRecordInfo*,ULONG,PVOID,LPCOLESTR,VARIANT*);
     * }
     */
    public interface PutFieldNoCopy {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(PutFieldNoCopy fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3556.const$3, fi, constants$775.const$0, scope);
        }
        static PutFieldNoCopy ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)constants$2151.const$3.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle PutFieldNoCopy$VH() {
        return constants$3556.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*PutFieldNoCopy)(IRecordInfo*,ULONG,PVOID,LPCOLESTR,VARIANT*);
     * }
     */
    public static MemorySegment PutFieldNoCopy$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3556.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*PutFieldNoCopy)(IRecordInfo*,ULONG,PVOID,LPCOLESTR,VARIANT*);
     * }
     */
    public static void PutFieldNoCopy$set(MemorySegment seg, MemorySegment x) {
        constants$3556.const$4.set(seg, x);
    }
    public static MemorySegment PutFieldNoCopy$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3556.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void PutFieldNoCopy$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3556.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static PutFieldNoCopy PutFieldNoCopy(MemorySegment segment, Arena scope) {
        return PutFieldNoCopy.ofAddress(PutFieldNoCopy$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetFieldNames)(IRecordInfo*,ULONG*,BSTR*);
     * }
     */
    public interface GetFieldNames {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetFieldNames fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3556.const$5, fi, constants$37.const$3, scope);
        }
        static GetFieldNames ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetFieldNames$VH() {
        return constants$3557.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetFieldNames)(IRecordInfo*,ULONG*,BSTR*);
     * }
     */
    public static MemorySegment GetFieldNames$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3557.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetFieldNames)(IRecordInfo*,ULONG*,BSTR*);
     * }
     */
    public static void GetFieldNames$set(MemorySegment seg, MemorySegment x) {
        constants$3557.const$0.set(seg, x);
    }
    public static MemorySegment GetFieldNames$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3557.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void GetFieldNames$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3557.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetFieldNames GetFieldNames(MemorySegment segment, Arena scope) {
        return GetFieldNames.ofAddress(GetFieldNames$get(segment), scope);
    }
    /**
     * {@snippet :
 * BOOL (*IsMatchingType)(IRecordInfo*,IRecordInfo*);
     * }
     */
    public interface IsMatchingType {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(IsMatchingType fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3557.const$1, fi, constants$34.const$0, scope);
        }
        static IsMatchingType ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle IsMatchingType$VH() {
        return constants$3557.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BOOL (*IsMatchingType)(IRecordInfo*,IRecordInfo*);
     * }
     */
    public static MemorySegment IsMatchingType$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3557.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BOOL (*IsMatchingType)(IRecordInfo*,IRecordInfo*);
     * }
     */
    public static void IsMatchingType$set(MemorySegment seg, MemorySegment x) {
        constants$3557.const$2.set(seg, x);
    }
    public static MemorySegment IsMatchingType$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3557.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void IsMatchingType$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3557.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static IsMatchingType IsMatchingType(MemorySegment segment, Arena scope) {
        return IsMatchingType.ofAddress(IsMatchingType$get(segment), scope);
    }
    /**
     * {@snippet :
 * PVOID (*RecordCreate)(IRecordInfo*);
     * }
     */
    public interface RecordCreate {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(RecordCreate fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3557.const$3, fi, constants$33.const$3, scope);
        }
        static RecordCreate ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$250.const$3.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle RecordCreate$VH() {
        return constants$3557.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PVOID (*RecordCreate)(IRecordInfo*);
     * }
     */
    public static MemorySegment RecordCreate$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3557.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PVOID (*RecordCreate)(IRecordInfo*);
     * }
     */
    public static void RecordCreate$set(MemorySegment seg, MemorySegment x) {
        constants$3557.const$4.set(seg, x);
    }
    public static MemorySegment RecordCreate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3557.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void RecordCreate$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3557.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static RecordCreate RecordCreate(MemorySegment segment, Arena scope) {
        return RecordCreate.ofAddress(RecordCreate$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*RecordCreateCopy)(IRecordInfo*,PVOID,PVOID*);
     * }
     */
    public interface RecordCreateCopy {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(RecordCreateCopy fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3557.const$5, fi, constants$37.const$3, scope);
        }
        static RecordCreateCopy ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle RecordCreateCopy$VH() {
        return constants$3558.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*RecordCreateCopy)(IRecordInfo*,PVOID,PVOID*);
     * }
     */
    public static MemorySegment RecordCreateCopy$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3558.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*RecordCreateCopy)(IRecordInfo*,PVOID,PVOID*);
     * }
     */
    public static void RecordCreateCopy$set(MemorySegment seg, MemorySegment x) {
        constants$3558.const$0.set(seg, x);
    }
    public static MemorySegment RecordCreateCopy$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3558.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void RecordCreateCopy$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3558.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static RecordCreateCopy RecordCreateCopy(MemorySegment segment, Arena scope) {
        return RecordCreateCopy.ofAddress(RecordCreateCopy$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*RecordDestroy)(IRecordInfo*,PVOID);
     * }
     */
    public interface RecordDestroy {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(RecordDestroy fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3558.const$1, fi, constants$34.const$0, scope);
        }
        static RecordDestroy ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle RecordDestroy$VH() {
        return constants$3558.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*RecordDestroy)(IRecordInfo*,PVOID);
     * }
     */
    public static MemorySegment RecordDestroy$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3558.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*RecordDestroy)(IRecordInfo*,PVOID);
     * }
     */
    public static void RecordDestroy$set(MemorySegment seg, MemorySegment x) {
        constants$3558.const$2.set(seg, x);
    }
    public static MemorySegment RecordDestroy$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3558.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void RecordDestroy$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3558.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static RecordDestroy RecordDestroy(MemorySegment segment, Arena scope) {
        return RecordDestroy.ofAddress(RecordDestroy$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



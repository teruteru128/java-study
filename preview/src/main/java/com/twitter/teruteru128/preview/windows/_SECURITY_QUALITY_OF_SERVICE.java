// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _SECURITY_QUALITY_OF_SERVICE {
 *     DWORD Length;
 *     SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
 *     SECURITY_CONTEXT_TRACKING_MODE ContextTrackingMode;
 *     BOOLEAN EffectiveOnly;
 * };
 * }
 */
public class _SECURITY_QUALITY_OF_SERVICE {

    public static MemoryLayout $LAYOUT() {
        return constants$180.const$2;
    }
    public static VarHandle Length$VH() {
        return constants$180.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Length;
     * }
     */
    public static int Length$get(MemorySegment seg) {
        return (int)constants$180.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Length;
     * }
     */
    public static void Length$set(MemorySegment seg, int x) {
        constants$180.const$3.set(seg, x);
    }
    public static int Length$get(MemorySegment seg, long index) {
        return (int)constants$180.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void Length$set(MemorySegment seg, long index, int x) {
        constants$180.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ImpersonationLevel$VH() {
        return constants$180.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
     * }
     */
    public static int ImpersonationLevel$get(MemorySegment seg) {
        return (int)constants$180.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
     * }
     */
    public static void ImpersonationLevel$set(MemorySegment seg, int x) {
        constants$180.const$4.set(seg, x);
    }
    public static int ImpersonationLevel$get(MemorySegment seg, long index) {
        return (int)constants$180.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void ImpersonationLevel$set(MemorySegment seg, long index, int x) {
        constants$180.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ContextTrackingMode$VH() {
        return constants$180.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * SECURITY_CONTEXT_TRACKING_MODE ContextTrackingMode;
     * }
     */
    public static byte ContextTrackingMode$get(MemorySegment seg) {
        return (byte)constants$180.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * SECURITY_CONTEXT_TRACKING_MODE ContextTrackingMode;
     * }
     */
    public static void ContextTrackingMode$set(MemorySegment seg, byte x) {
        constants$180.const$5.set(seg, x);
    }
    public static byte ContextTrackingMode$get(MemorySegment seg, long index) {
        return (byte)constants$180.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void ContextTrackingMode$set(MemorySegment seg, long index, byte x) {
        constants$180.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle EffectiveOnly$VH() {
        return constants$181.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BOOLEAN EffectiveOnly;
     * }
     */
    public static byte EffectiveOnly$get(MemorySegment seg) {
        return (byte)constants$181.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BOOLEAN EffectiveOnly;
     * }
     */
    public static void EffectiveOnly$set(MemorySegment seg, byte x) {
        constants$181.const$0.set(seg, x);
    }
    public static byte EffectiveOnly$get(MemorySegment seg, long index) {
        return (byte)constants$181.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void EffectiveOnly$set(MemorySegment seg, long index, byte x) {
        constants$181.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _MIDL_STUBLESS_PROXY_INFO {
 *     PMIDL_STUB_DESC pStubDesc;
 *     PFORMAT_STRING ProcFormatString;
 *     unsigned short* FormatStringOffset;
 *     PRPC_SYNTAX_IDENTIFIER pTransferSyntax;
 *     ULONG_PTR nCount;
 *     PMIDL_SYNTAX_INFO pSyntaxInfo;
 * };
 * }
 */
public class _MIDL_STUBLESS_PROXY_INFO {

    public static MemoryLayout $LAYOUT() {
        return constants$2295.const$5;
    }
    public static VarHandle pStubDesc$VH() {
        return constants$2296.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PMIDL_STUB_DESC pStubDesc;
     * }
     */
    public static MemorySegment pStubDesc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2296.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PMIDL_STUB_DESC pStubDesc;
     * }
     */
    public static void pStubDesc$set(MemorySegment seg, MemorySegment x) {
        constants$2296.const$0.set(seg, x);
    }
    public static MemorySegment pStubDesc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2296.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void pStubDesc$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2296.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ProcFormatString$VH() {
        return constants$2296.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PFORMAT_STRING ProcFormatString;
     * }
     */
    public static MemorySegment ProcFormatString$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2296.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PFORMAT_STRING ProcFormatString;
     * }
     */
    public static void ProcFormatString$set(MemorySegment seg, MemorySegment x) {
        constants$2296.const$1.set(seg, x);
    }
    public static MemorySegment ProcFormatString$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2296.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void ProcFormatString$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2296.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle FormatStringOffset$VH() {
        return constants$2296.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short* FormatStringOffset;
     * }
     */
    public static MemorySegment FormatStringOffset$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2296.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short* FormatStringOffset;
     * }
     */
    public static void FormatStringOffset$set(MemorySegment seg, MemorySegment x) {
        constants$2296.const$2.set(seg, x);
    }
    public static MemorySegment FormatStringOffset$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2296.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void FormatStringOffset$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2296.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pTransferSyntax$VH() {
        return constants$2296.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PRPC_SYNTAX_IDENTIFIER pTransferSyntax;
     * }
     */
    public static MemorySegment pTransferSyntax$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2296.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PRPC_SYNTAX_IDENTIFIER pTransferSyntax;
     * }
     */
    public static void pTransferSyntax$set(MemorySegment seg, MemorySegment x) {
        constants$2296.const$3.set(seg, x);
    }
    public static MemorySegment pTransferSyntax$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2296.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void pTransferSyntax$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2296.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nCount$VH() {
        return constants$2296.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG_PTR nCount;
     * }
     */
    public static long nCount$get(MemorySegment seg) {
        return (long)constants$2296.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG_PTR nCount;
     * }
     */
    public static void nCount$set(MemorySegment seg, long x) {
        constants$2296.const$4.set(seg, x);
    }
    public static long nCount$get(MemorySegment seg, long index) {
        return (long)constants$2296.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void nCount$set(MemorySegment seg, long index, long x) {
        constants$2296.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pSyntaxInfo$VH() {
        return constants$2296.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PMIDL_SYNTAX_INFO pSyntaxInfo;
     * }
     */
    public static MemorySegment pSyntaxInfo$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2296.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PMIDL_SYNTAX_INFO pSyntaxInfo;
     * }
     */
    public static void pSyntaxInfo$set(MemorySegment seg, MemorySegment x) {
        constants$2296.const$5.set(seg, x);
    }
    public static MemorySegment pSyntaxInfo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2296.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void pSyntaxInfo$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2296.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



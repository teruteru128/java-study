// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * union _IMAGE_AUX_SYMBOL_EX {
 *     struct  Sym;
 *     struct  File;
 *     struct  Section;
 *     struct {
 *         IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;
 *         BYTE rgbReserved[2];
 *     };
 *     struct  CRC;
 * };
 * }
 */
public class _IMAGE_AUX_SYMBOL_EX {

    public static MemoryLayout $LAYOUT() {
        return constants$397.const$1;
    }
    /**
     * {@snippet :
     * struct {
     *     DWORD WeakDefaultSymIndex;
     *     DWORD WeakSearchType;
     *     BYTE rgbReserved[12];
     * };
     * }
     */
    public static final class Sym {

        // Suppresses default constructor, ensuring non-instantiability.
        private Sym() {}
        public static MemoryLayout $LAYOUT() {
            return constants$397.const$2;
        }
        public static VarHandle WeakDefaultSymIndex$VH() {
            return constants$397.const$3;
        }
        /**
         * Getter for field:
         * {@snippet :
         * DWORD WeakDefaultSymIndex;
         * }
         */
        public static int WeakDefaultSymIndex$get(MemorySegment seg) {
            return (int)constants$397.const$3.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * DWORD WeakDefaultSymIndex;
         * }
         */
        public static void WeakDefaultSymIndex$set(MemorySegment seg, int x) {
            constants$397.const$3.set(seg, x);
        }
        public static int WeakDefaultSymIndex$get(MemorySegment seg, long index) {
            return (int)constants$397.const$3.get(seg.asSlice(index*sizeof()));
        }
        public static void WeakDefaultSymIndex$set(MemorySegment seg, long index, int x) {
            constants$397.const$3.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle WeakSearchType$VH() {
            return constants$397.const$4;
        }
        /**
         * Getter for field:
         * {@snippet :
         * DWORD WeakSearchType;
         * }
         */
        public static int WeakSearchType$get(MemorySegment seg) {
            return (int)constants$397.const$4.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * DWORD WeakSearchType;
         * }
         */
        public static void WeakSearchType$set(MemorySegment seg, int x) {
            constants$397.const$4.set(seg, x);
        }
        public static int WeakSearchType$get(MemorySegment seg, long index) {
            return (int)constants$397.const$4.get(seg.asSlice(index*sizeof()));
        }
        public static void WeakSearchType$set(MemorySegment seg, long index, int x) {
            constants$397.const$4.set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment rgbReserved$slice(MemorySegment seg) {
            return seg.asSlice(8, 12);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment Sym$slice(MemorySegment seg) {
        return seg.asSlice(0, 20);
    }
    /**
     * {@snippet :
     * struct {
     *     BYTE Name[20];
     * };
     * }
     */
    public static final class File {

        // Suppresses default constructor, ensuring non-instantiability.
        private File() {}
        public static MemoryLayout $LAYOUT() {
            return constants$397.const$5;
        }
        public static MemorySegment Name$slice(MemorySegment seg) {
            return seg.asSlice(0, 20);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment File$slice(MemorySegment seg) {
        return seg.asSlice(0, 20);
    }
    /**
     * {@snippet :
     * struct {
     *     DWORD Length;
     *     WORD NumberOfRelocations;
     *     WORD NumberOfLinenumbers;
     *     DWORD CheckSum;
     *     SHORT Number;
     *     BYTE Selection;
     *     BYTE bReserved;
     *     SHORT HighNumber;
     *     BYTE rgbReserved[2];
     * };
     * }
     */
    public static final class Section {

        // Suppresses default constructor, ensuring non-instantiability.
        private Section() {}
        public static MemoryLayout $LAYOUT() {
            return constants$398.const$0;
        }
        public static VarHandle Length$VH() {
            return constants$398.const$1;
        }
        /**
         * Getter for field:
         * {@snippet :
         * DWORD Length;
         * }
         */
        public static int Length$get(MemorySegment seg) {
            return (int)constants$398.const$1.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * DWORD Length;
         * }
         */
        public static void Length$set(MemorySegment seg, int x) {
            constants$398.const$1.set(seg, x);
        }
        public static int Length$get(MemorySegment seg, long index) {
            return (int)constants$398.const$1.get(seg.asSlice(index*sizeof()));
        }
        public static void Length$set(MemorySegment seg, long index, int x) {
            constants$398.const$1.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle NumberOfRelocations$VH() {
            return constants$398.const$2;
        }
        /**
         * Getter for field:
         * {@snippet :
         * WORD NumberOfRelocations;
         * }
         */
        public static short NumberOfRelocations$get(MemorySegment seg) {
            return (short)constants$398.const$2.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * WORD NumberOfRelocations;
         * }
         */
        public static void NumberOfRelocations$set(MemorySegment seg, short x) {
            constants$398.const$2.set(seg, x);
        }
        public static short NumberOfRelocations$get(MemorySegment seg, long index) {
            return (short)constants$398.const$2.get(seg.asSlice(index*sizeof()));
        }
        public static void NumberOfRelocations$set(MemorySegment seg, long index, short x) {
            constants$398.const$2.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle NumberOfLinenumbers$VH() {
            return constants$398.const$3;
        }
        /**
         * Getter for field:
         * {@snippet :
         * WORD NumberOfLinenumbers;
         * }
         */
        public static short NumberOfLinenumbers$get(MemorySegment seg) {
            return (short)constants$398.const$3.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * WORD NumberOfLinenumbers;
         * }
         */
        public static void NumberOfLinenumbers$set(MemorySegment seg, short x) {
            constants$398.const$3.set(seg, x);
        }
        public static short NumberOfLinenumbers$get(MemorySegment seg, long index) {
            return (short)constants$398.const$3.get(seg.asSlice(index*sizeof()));
        }
        public static void NumberOfLinenumbers$set(MemorySegment seg, long index, short x) {
            constants$398.const$3.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CheckSum$VH() {
            return constants$398.const$4;
        }
        /**
         * Getter for field:
         * {@snippet :
         * DWORD CheckSum;
         * }
         */
        public static int CheckSum$get(MemorySegment seg) {
            return (int)constants$398.const$4.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * DWORD CheckSum;
         * }
         */
        public static void CheckSum$set(MemorySegment seg, int x) {
            constants$398.const$4.set(seg, x);
        }
        public static int CheckSum$get(MemorySegment seg, long index) {
            return (int)constants$398.const$4.get(seg.asSlice(index*sizeof()));
        }
        public static void CheckSum$set(MemorySegment seg, long index, int x) {
            constants$398.const$4.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Number$VH() {
            return constants$398.const$5;
        }
        /**
         * Getter for field:
         * {@snippet :
         * SHORT Number;
         * }
         */
        public static short Number$get(MemorySegment seg) {
            return (short)constants$398.const$5.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * SHORT Number;
         * }
         */
        public static void Number$set(MemorySegment seg, short x) {
            constants$398.const$5.set(seg, x);
        }
        public static short Number$get(MemorySegment seg, long index) {
            return (short)constants$398.const$5.get(seg.asSlice(index*sizeof()));
        }
        public static void Number$set(MemorySegment seg, long index, short x) {
            constants$398.const$5.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Selection$VH() {
            return constants$399.const$0;
        }
        /**
         * Getter for field:
         * {@snippet :
         * BYTE Selection;
         * }
         */
        public static byte Selection$get(MemorySegment seg) {
            return (byte)constants$399.const$0.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * BYTE Selection;
         * }
         */
        public static void Selection$set(MemorySegment seg, byte x) {
            constants$399.const$0.set(seg, x);
        }
        public static byte Selection$get(MemorySegment seg, long index) {
            return (byte)constants$399.const$0.get(seg.asSlice(index*sizeof()));
        }
        public static void Selection$set(MemorySegment seg, long index, byte x) {
            constants$399.const$0.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle bReserved$VH() {
            return constants$399.const$1;
        }
        /**
         * Getter for field:
         * {@snippet :
         * BYTE bReserved;
         * }
         */
        public static byte bReserved$get(MemorySegment seg) {
            return (byte)constants$399.const$1.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * BYTE bReserved;
         * }
         */
        public static void bReserved$set(MemorySegment seg, byte x) {
            constants$399.const$1.set(seg, x);
        }
        public static byte bReserved$get(MemorySegment seg, long index) {
            return (byte)constants$399.const$1.get(seg.asSlice(index*sizeof()));
        }
        public static void bReserved$set(MemorySegment seg, long index, byte x) {
            constants$399.const$1.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle HighNumber$VH() {
            return constants$399.const$2;
        }
        /**
         * Getter for field:
         * {@snippet :
         * SHORT HighNumber;
         * }
         */
        public static short HighNumber$get(MemorySegment seg) {
            return (short)constants$399.const$2.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * SHORT HighNumber;
         * }
         */
        public static void HighNumber$set(MemorySegment seg, short x) {
            constants$399.const$2.set(seg, x);
        }
        public static short HighNumber$get(MemorySegment seg, long index) {
            return (short)constants$399.const$2.get(seg.asSlice(index*sizeof()));
        }
        public static void HighNumber$set(MemorySegment seg, long index, short x) {
            constants$399.const$2.set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment rgbReserved$slice(MemorySegment seg) {
            return seg.asSlice(18, 2);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment Section$slice(MemorySegment seg) {
        return seg.asSlice(0, 20);
    }
    public static MemorySegment TokenDef$slice(MemorySegment seg) {
        return seg.asSlice(0, 18);
    }
    public static MemorySegment rgbReserved$slice(MemorySegment seg) {
        return seg.asSlice(18, 2);
    }
    /**
     * {@snippet :
     * struct {
     *     DWORD crc;
     *     BYTE rgbReserved[16];
     * };
     * }
     */
    public static final class CRC {

        // Suppresses default constructor, ensuring non-instantiability.
        private CRC() {}
        public static MemoryLayout $LAYOUT() {
            return constants$399.const$3;
        }
        public static VarHandle crc$VH() {
            return constants$399.const$4;
        }
        /**
         * Getter for field:
         * {@snippet :
         * DWORD crc;
         * }
         */
        public static int crc$get(MemorySegment seg) {
            return (int)constants$399.const$4.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * DWORD crc;
         * }
         */
        public static void crc$set(MemorySegment seg, int x) {
            constants$399.const$4.set(seg, x);
        }
        public static int crc$get(MemorySegment seg, long index) {
            return (int)constants$399.const$4.get(seg.asSlice(index*sizeof()));
        }
        public static void crc$set(MemorySegment seg, long index, int x) {
            constants$399.const$4.set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment rgbReserved$slice(MemorySegment seg) {
            return seg.asSlice(4, 16);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment CRC$slice(MemorySegment seg) {
        return seg.asSlice(0, 20);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



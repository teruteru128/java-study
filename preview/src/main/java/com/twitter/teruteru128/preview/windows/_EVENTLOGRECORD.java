// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _EVENTLOGRECORD {
 *     DWORD Length;
 *     DWORD Reserved;
 *     DWORD RecordNumber;
 *     DWORD TimeGenerated;
 *     DWORD TimeWritten;
 *     DWORD EventID;
 *     WORD EventType;
 *     WORD NumStrings;
 *     WORD EventCategory;
 *     WORD ReservedFlags;
 *     DWORD ClosingRecordNumber;
 *     DWORD StringOffset;
 *     DWORD UserSidLength;
 *     DWORD UserSidOffset;
 *     DWORD DataLength;
 *     DWORD DataOffset;
 * };
 * }
 */
public class _EVENTLOGRECORD {

    public static MemoryLayout $LAYOUT() {
        return constants$509.const$3;
    }
    public static VarHandle Length$VH() {
        return constants$509.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Length;
     * }
     */
    public static int Length$get(MemorySegment seg) {
        return (int)constants$509.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Length;
     * }
     */
    public static void Length$set(MemorySegment seg, int x) {
        constants$509.const$4.set(seg, x);
    }
    public static int Length$get(MemorySegment seg, long index) {
        return (int)constants$509.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void Length$set(MemorySegment seg, long index, int x) {
        constants$509.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Reserved$VH() {
        return constants$509.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Reserved;
     * }
     */
    public static int Reserved$get(MemorySegment seg) {
        return (int)constants$509.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Reserved;
     * }
     */
    public static void Reserved$set(MemorySegment seg, int x) {
        constants$509.const$5.set(seg, x);
    }
    public static int Reserved$get(MemorySegment seg, long index) {
        return (int)constants$509.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void Reserved$set(MemorySegment seg, long index, int x) {
        constants$509.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle RecordNumber$VH() {
        return constants$510.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD RecordNumber;
     * }
     */
    public static int RecordNumber$get(MemorySegment seg) {
        return (int)constants$510.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD RecordNumber;
     * }
     */
    public static void RecordNumber$set(MemorySegment seg, int x) {
        constants$510.const$0.set(seg, x);
    }
    public static int RecordNumber$get(MemorySegment seg, long index) {
        return (int)constants$510.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void RecordNumber$set(MemorySegment seg, long index, int x) {
        constants$510.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle TimeGenerated$VH() {
        return constants$510.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD TimeGenerated;
     * }
     */
    public static int TimeGenerated$get(MemorySegment seg) {
        return (int)constants$510.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD TimeGenerated;
     * }
     */
    public static void TimeGenerated$set(MemorySegment seg, int x) {
        constants$510.const$1.set(seg, x);
    }
    public static int TimeGenerated$get(MemorySegment seg, long index) {
        return (int)constants$510.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void TimeGenerated$set(MemorySegment seg, long index, int x) {
        constants$510.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle TimeWritten$VH() {
        return constants$510.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD TimeWritten;
     * }
     */
    public static int TimeWritten$get(MemorySegment seg) {
        return (int)constants$510.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD TimeWritten;
     * }
     */
    public static void TimeWritten$set(MemorySegment seg, int x) {
        constants$510.const$2.set(seg, x);
    }
    public static int TimeWritten$get(MemorySegment seg, long index) {
        return (int)constants$510.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void TimeWritten$set(MemorySegment seg, long index, int x) {
        constants$510.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle EventID$VH() {
        return constants$510.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD EventID;
     * }
     */
    public static int EventID$get(MemorySegment seg) {
        return (int)constants$510.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD EventID;
     * }
     */
    public static void EventID$set(MemorySegment seg, int x) {
        constants$510.const$3.set(seg, x);
    }
    public static int EventID$get(MemorySegment seg, long index) {
        return (int)constants$510.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void EventID$set(MemorySegment seg, long index, int x) {
        constants$510.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle EventType$VH() {
        return constants$510.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD EventType;
     * }
     */
    public static short EventType$get(MemorySegment seg) {
        return (short)constants$510.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD EventType;
     * }
     */
    public static void EventType$set(MemorySegment seg, short x) {
        constants$510.const$4.set(seg, x);
    }
    public static short EventType$get(MemorySegment seg, long index) {
        return (short)constants$510.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void EventType$set(MemorySegment seg, long index, short x) {
        constants$510.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle NumStrings$VH() {
        return constants$510.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD NumStrings;
     * }
     */
    public static short NumStrings$get(MemorySegment seg) {
        return (short)constants$510.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD NumStrings;
     * }
     */
    public static void NumStrings$set(MemorySegment seg, short x) {
        constants$510.const$5.set(seg, x);
    }
    public static short NumStrings$get(MemorySegment seg, long index) {
        return (short)constants$510.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void NumStrings$set(MemorySegment seg, long index, short x) {
        constants$510.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle EventCategory$VH() {
        return constants$511.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD EventCategory;
     * }
     */
    public static short EventCategory$get(MemorySegment seg) {
        return (short)constants$511.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD EventCategory;
     * }
     */
    public static void EventCategory$set(MemorySegment seg, short x) {
        constants$511.const$0.set(seg, x);
    }
    public static short EventCategory$get(MemorySegment seg, long index) {
        return (short)constants$511.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void EventCategory$set(MemorySegment seg, long index, short x) {
        constants$511.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ReservedFlags$VH() {
        return constants$511.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD ReservedFlags;
     * }
     */
    public static short ReservedFlags$get(MemorySegment seg) {
        return (short)constants$511.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD ReservedFlags;
     * }
     */
    public static void ReservedFlags$set(MemorySegment seg, short x) {
        constants$511.const$1.set(seg, x);
    }
    public static short ReservedFlags$get(MemorySegment seg, long index) {
        return (short)constants$511.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void ReservedFlags$set(MemorySegment seg, long index, short x) {
        constants$511.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ClosingRecordNumber$VH() {
        return constants$511.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD ClosingRecordNumber;
     * }
     */
    public static int ClosingRecordNumber$get(MemorySegment seg) {
        return (int)constants$511.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD ClosingRecordNumber;
     * }
     */
    public static void ClosingRecordNumber$set(MemorySegment seg, int x) {
        constants$511.const$2.set(seg, x);
    }
    public static int ClosingRecordNumber$get(MemorySegment seg, long index) {
        return (int)constants$511.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void ClosingRecordNumber$set(MemorySegment seg, long index, int x) {
        constants$511.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle StringOffset$VH() {
        return constants$511.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD StringOffset;
     * }
     */
    public static int StringOffset$get(MemorySegment seg) {
        return (int)constants$511.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD StringOffset;
     * }
     */
    public static void StringOffset$set(MemorySegment seg, int x) {
        constants$511.const$3.set(seg, x);
    }
    public static int StringOffset$get(MemorySegment seg, long index) {
        return (int)constants$511.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void StringOffset$set(MemorySegment seg, long index, int x) {
        constants$511.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle UserSidLength$VH() {
        return constants$511.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD UserSidLength;
     * }
     */
    public static int UserSidLength$get(MemorySegment seg) {
        return (int)constants$511.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD UserSidLength;
     * }
     */
    public static void UserSidLength$set(MemorySegment seg, int x) {
        constants$511.const$4.set(seg, x);
    }
    public static int UserSidLength$get(MemorySegment seg, long index) {
        return (int)constants$511.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void UserSidLength$set(MemorySegment seg, long index, int x) {
        constants$511.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle UserSidOffset$VH() {
        return constants$511.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD UserSidOffset;
     * }
     */
    public static int UserSidOffset$get(MemorySegment seg) {
        return (int)constants$511.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD UserSidOffset;
     * }
     */
    public static void UserSidOffset$set(MemorySegment seg, int x) {
        constants$511.const$5.set(seg, x);
    }
    public static int UserSidOffset$get(MemorySegment seg, long index) {
        return (int)constants$511.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void UserSidOffset$set(MemorySegment seg, long index, int x) {
        constants$511.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle DataLength$VH() {
        return constants$512.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD DataLength;
     * }
     */
    public static int DataLength$get(MemorySegment seg) {
        return (int)constants$512.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD DataLength;
     * }
     */
    public static void DataLength$set(MemorySegment seg, int x) {
        constants$512.const$0.set(seg, x);
    }
    public static int DataLength$get(MemorySegment seg, long index) {
        return (int)constants$512.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void DataLength$set(MemorySegment seg, long index, int x) {
        constants$512.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle DataOffset$VH() {
        return constants$512.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD DataOffset;
     * }
     */
    public static int DataOffset$get(MemorySegment seg) {
        return (int)constants$512.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD DataOffset;
     * }
     */
    public static void DataOffset$set(MemorySegment seg, int x) {
        constants$512.const$1.set(seg, x);
    }
    public static int DataOffset$get(MemorySegment seg, long index) {
        return (int)constants$512.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void DataOffset$set(MemorySegment seg, long index, int x) {
        constants$512.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



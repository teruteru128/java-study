// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _DISK_DETECTION_INFO {
 *     DWORD SizeOfDetectInfo;
 *     DETECTION_TYPE DetectionType;
 *     union {
 *         struct {
 *             DISK_INT13_INFO Int13;
 *             DISK_EX_INT13_INFO ExInt13;
 *         };
 *     };
 * };
 * }
 */
public class _DISK_DETECTION_INFO {

    public static MemoryLayout $LAYOUT() {
        return constants$2545.const$4;
    }
    public static VarHandle SizeOfDetectInfo$VH() {
        return constants$2545.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD SizeOfDetectInfo;
     * }
     */
    public static int SizeOfDetectInfo$get(MemorySegment seg) {
        return (int)constants$2545.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD SizeOfDetectInfo;
     * }
     */
    public static void SizeOfDetectInfo$set(MemorySegment seg, int x) {
        constants$2545.const$5.set(seg, x);
    }
    public static int SizeOfDetectInfo$get(MemorySegment seg, long index) {
        return (int)constants$2545.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void SizeOfDetectInfo$set(MemorySegment seg, long index, int x) {
        constants$2545.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle DetectionType$VH() {
        return constants$2546.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DETECTION_TYPE DetectionType;
     * }
     */
    public static int DetectionType$get(MemorySegment seg) {
        return (int)constants$2546.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DETECTION_TYPE DetectionType;
     * }
     */
    public static void DetectionType$set(MemorySegment seg, int x) {
        constants$2546.const$0.set(seg, x);
    }
    public static int DetectionType$get(MemorySegment seg, long index) {
        return (int)constants$2546.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void DetectionType$set(MemorySegment seg, long index, int x) {
        constants$2546.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Int13$slice(MemorySegment seg) {
        return seg.asSlice(8, 16);
    }
    public static MemorySegment ExInt13$slice(MemorySegment seg) {
        return seg.asSlice(24, 32);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _FULL_PTR_XLAT_TABLES {
 *     void* RefIdToPointer;
 *     void* PointerToRefId;
 *     unsigned long NextRefId;
 *     XLAT_SIDE XlatSide;
 * };
 * }
 */
public class _FULL_PTR_XLAT_TABLES {

    public static MemoryLayout $LAYOUT() {
        return constants$2298.const$5;
    }
    public static VarHandle RefIdToPointer$VH() {
        return constants$2299.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* RefIdToPointer;
     * }
     */
    public static MemorySegment RefIdToPointer$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2299.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* RefIdToPointer;
     * }
     */
    public static void RefIdToPointer$set(MemorySegment seg, MemorySegment x) {
        constants$2299.const$0.set(seg, x);
    }
    public static MemorySegment RefIdToPointer$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2299.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void RefIdToPointer$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2299.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle PointerToRefId$VH() {
        return constants$2299.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* PointerToRefId;
     * }
     */
    public static MemorySegment PointerToRefId$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2299.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* PointerToRefId;
     * }
     */
    public static void PointerToRefId$set(MemorySegment seg, MemorySegment x) {
        constants$2299.const$1.set(seg, x);
    }
    public static MemorySegment PointerToRefId$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2299.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void PointerToRefId$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2299.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle NextRefId$VH() {
        return constants$2299.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long NextRefId;
     * }
     */
    public static int NextRefId$get(MemorySegment seg) {
        return (int)constants$2299.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long NextRefId;
     * }
     */
    public static void NextRefId$set(MemorySegment seg, int x) {
        constants$2299.const$2.set(seg, x);
    }
    public static int NextRefId$get(MemorySegment seg, long index) {
        return (int)constants$2299.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void NextRefId$set(MemorySegment seg, long index, int x) {
        constants$2299.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle XlatSide$VH() {
        return constants$2299.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * XLAT_SIDE XlatSide;
     * }
     */
    public static int XlatSide$get(MemorySegment seg) {
        return (int)constants$2299.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * XLAT_SIDE XlatSide;
     * }
     */
    public static void XlatSide$set(MemorySegment seg, int x) {
        constants$2299.const$3.set(seg, x);
    }
    public static int XlatSide$get(MemorySegment seg, long index) {
        return (int)constants$2299.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void XlatSide$set(MemorySegment seg, long index, int x) {
        constants$2299.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



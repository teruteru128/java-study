// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _FILE_COMPRESSION_INFO {
 *     LARGE_INTEGER CompressedFileSize;
 *     WORD CompressionFormat;
 *     UCHAR CompressionUnitShift;
 *     UCHAR ChunkShift;
 *     UCHAR ClusterShift;
 *     UCHAR Reserved[3];
 * };
 * }
 */
public class _FILE_COMPRESSION_INFO {

    public static MemoryLayout $LAYOUT() {
        return constants$868.const$3;
    }
    public static MemorySegment CompressedFileSize$slice(MemorySegment seg) {
        return seg.asSlice(0, 8);
    }
    public static VarHandle CompressionFormat$VH() {
        return constants$868.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD CompressionFormat;
     * }
     */
    public static short CompressionFormat$get(MemorySegment seg) {
        return (short)constants$868.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD CompressionFormat;
     * }
     */
    public static void CompressionFormat$set(MemorySegment seg, short x) {
        constants$868.const$4.set(seg, x);
    }
    public static short CompressionFormat$get(MemorySegment seg, long index) {
        return (short)constants$868.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void CompressionFormat$set(MemorySegment seg, long index, short x) {
        constants$868.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle CompressionUnitShift$VH() {
        return constants$868.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * UCHAR CompressionUnitShift;
     * }
     */
    public static byte CompressionUnitShift$get(MemorySegment seg) {
        return (byte)constants$868.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * UCHAR CompressionUnitShift;
     * }
     */
    public static void CompressionUnitShift$set(MemorySegment seg, byte x) {
        constants$868.const$5.set(seg, x);
    }
    public static byte CompressionUnitShift$get(MemorySegment seg, long index) {
        return (byte)constants$868.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void CompressionUnitShift$set(MemorySegment seg, long index, byte x) {
        constants$868.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ChunkShift$VH() {
        return constants$869.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * UCHAR ChunkShift;
     * }
     */
    public static byte ChunkShift$get(MemorySegment seg) {
        return (byte)constants$869.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * UCHAR ChunkShift;
     * }
     */
    public static void ChunkShift$set(MemorySegment seg, byte x) {
        constants$869.const$0.set(seg, x);
    }
    public static byte ChunkShift$get(MemorySegment seg, long index) {
        return (byte)constants$869.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void ChunkShift$set(MemorySegment seg, long index, byte x) {
        constants$869.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ClusterShift$VH() {
        return constants$869.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * UCHAR ClusterShift;
     * }
     */
    public static byte ClusterShift$get(MemorySegment seg) {
        return (byte)constants$869.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * UCHAR ClusterShift;
     * }
     */
    public static void ClusterShift$set(MemorySegment seg, byte x) {
        constants$869.const$1.set(seg, x);
    }
    public static byte ClusterShift$get(MemorySegment seg, long index) {
        return (byte)constants$869.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void ClusterShift$set(MemorySegment seg, long index, byte x) {
        constants$869.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Reserved$slice(MemorySegment seg) {
        return seg.asSlice(13, 3);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



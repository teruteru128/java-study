// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _IMAGE_ENCLAVE_CONFIG32 {
 *     DWORD Size;
 *     DWORD MinimumRequiredConfigSize;
 *     DWORD PolicyFlags;
 *     DWORD NumberOfImports;
 *     DWORD ImportList;
 *     DWORD ImportEntrySize;
 *     BYTE FamilyID[16];
 *     BYTE ImageID[16];
 *     DWORD ImageVersion;
 *     DWORD SecurityVersion;
 *     DWORD EnclaveSize;
 *     DWORD NumberOfThreads;
 *     DWORD EnclaveFlags;
 * };
 * }
 */
public class _IMAGE_ENCLAVE_CONFIG32 {

    public static MemoryLayout $LAYOUT() {
        return constants$446.const$2;
    }
    public static VarHandle Size$VH() {
        return constants$446.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Size;
     * }
     */
    public static int Size$get(MemorySegment seg) {
        return (int)constants$446.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Size;
     * }
     */
    public static void Size$set(MemorySegment seg, int x) {
        constants$446.const$3.set(seg, x);
    }
    public static int Size$get(MemorySegment seg, long index) {
        return (int)constants$446.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void Size$set(MemorySegment seg, long index, int x) {
        constants$446.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MinimumRequiredConfigSize$VH() {
        return constants$446.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD MinimumRequiredConfigSize;
     * }
     */
    public static int MinimumRequiredConfigSize$get(MemorySegment seg) {
        return (int)constants$446.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD MinimumRequiredConfigSize;
     * }
     */
    public static void MinimumRequiredConfigSize$set(MemorySegment seg, int x) {
        constants$446.const$4.set(seg, x);
    }
    public static int MinimumRequiredConfigSize$get(MemorySegment seg, long index) {
        return (int)constants$446.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void MinimumRequiredConfigSize$set(MemorySegment seg, long index, int x) {
        constants$446.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle PolicyFlags$VH() {
        return constants$446.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD PolicyFlags;
     * }
     */
    public static int PolicyFlags$get(MemorySegment seg) {
        return (int)constants$446.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD PolicyFlags;
     * }
     */
    public static void PolicyFlags$set(MemorySegment seg, int x) {
        constants$446.const$5.set(seg, x);
    }
    public static int PolicyFlags$get(MemorySegment seg, long index) {
        return (int)constants$446.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void PolicyFlags$set(MemorySegment seg, long index, int x) {
        constants$446.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle NumberOfImports$VH() {
        return constants$447.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD NumberOfImports;
     * }
     */
    public static int NumberOfImports$get(MemorySegment seg) {
        return (int)constants$447.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD NumberOfImports;
     * }
     */
    public static void NumberOfImports$set(MemorySegment seg, int x) {
        constants$447.const$0.set(seg, x);
    }
    public static int NumberOfImports$get(MemorySegment seg, long index) {
        return (int)constants$447.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void NumberOfImports$set(MemorySegment seg, long index, int x) {
        constants$447.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ImportList$VH() {
        return constants$447.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD ImportList;
     * }
     */
    public static int ImportList$get(MemorySegment seg) {
        return (int)constants$447.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD ImportList;
     * }
     */
    public static void ImportList$set(MemorySegment seg, int x) {
        constants$447.const$1.set(seg, x);
    }
    public static int ImportList$get(MemorySegment seg, long index) {
        return (int)constants$447.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void ImportList$set(MemorySegment seg, long index, int x) {
        constants$447.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ImportEntrySize$VH() {
        return constants$447.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD ImportEntrySize;
     * }
     */
    public static int ImportEntrySize$get(MemorySegment seg) {
        return (int)constants$447.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD ImportEntrySize;
     * }
     */
    public static void ImportEntrySize$set(MemorySegment seg, int x) {
        constants$447.const$2.set(seg, x);
    }
    public static int ImportEntrySize$get(MemorySegment seg, long index) {
        return (int)constants$447.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void ImportEntrySize$set(MemorySegment seg, long index, int x) {
        constants$447.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment FamilyID$slice(MemorySegment seg) {
        return seg.asSlice(24, 16);
    }
    public static MemorySegment ImageID$slice(MemorySegment seg) {
        return seg.asSlice(40, 16);
    }
    public static VarHandle ImageVersion$VH() {
        return constants$447.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD ImageVersion;
     * }
     */
    public static int ImageVersion$get(MemorySegment seg) {
        return (int)constants$447.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD ImageVersion;
     * }
     */
    public static void ImageVersion$set(MemorySegment seg, int x) {
        constants$447.const$3.set(seg, x);
    }
    public static int ImageVersion$get(MemorySegment seg, long index) {
        return (int)constants$447.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void ImageVersion$set(MemorySegment seg, long index, int x) {
        constants$447.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle SecurityVersion$VH() {
        return constants$447.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD SecurityVersion;
     * }
     */
    public static int SecurityVersion$get(MemorySegment seg) {
        return (int)constants$447.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD SecurityVersion;
     * }
     */
    public static void SecurityVersion$set(MemorySegment seg, int x) {
        constants$447.const$4.set(seg, x);
    }
    public static int SecurityVersion$get(MemorySegment seg, long index) {
        return (int)constants$447.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void SecurityVersion$set(MemorySegment seg, long index, int x) {
        constants$447.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle EnclaveSize$VH() {
        return constants$447.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD EnclaveSize;
     * }
     */
    public static int EnclaveSize$get(MemorySegment seg) {
        return (int)constants$447.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD EnclaveSize;
     * }
     */
    public static void EnclaveSize$set(MemorySegment seg, int x) {
        constants$447.const$5.set(seg, x);
    }
    public static int EnclaveSize$get(MemorySegment seg, long index) {
        return (int)constants$447.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void EnclaveSize$set(MemorySegment seg, long index, int x) {
        constants$447.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle NumberOfThreads$VH() {
        return constants$448.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD NumberOfThreads;
     * }
     */
    public static int NumberOfThreads$get(MemorySegment seg) {
        return (int)constants$448.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD NumberOfThreads;
     * }
     */
    public static void NumberOfThreads$set(MemorySegment seg, int x) {
        constants$448.const$0.set(seg, x);
    }
    public static int NumberOfThreads$get(MemorySegment seg, long index) {
        return (int)constants$448.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void NumberOfThreads$set(MemorySegment seg, long index, int x) {
        constants$448.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle EnclaveFlags$VH() {
        return constants$448.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD EnclaveFlags;
     * }
     */
    public static int EnclaveFlags$get(MemorySegment seg) {
        return (int)constants$448.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD EnclaveFlags;
     * }
     */
    public static void EnclaveFlags$set(MemorySegment seg, int x) {
        constants$448.const$1.set(seg, x);
    }
    public static int EnclaveFlags$get(MemorySegment seg, long index) {
        return (int)constants$448.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void EnclaveFlags$set(MemorySegment seg, long index, int x) {
        constants$448.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



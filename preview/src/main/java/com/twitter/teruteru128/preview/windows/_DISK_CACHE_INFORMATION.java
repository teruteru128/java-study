// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _DISK_CACHE_INFORMATION {
 *     BOOLEAN ParametersSavable;
 *     BOOLEAN ReadCacheEnabled;
 *     BOOLEAN WriteCacheEnabled;
 *     DISK_CACHE_RETENTION_PRIORITY ReadRetentionPriority;
 *     DISK_CACHE_RETENTION_PRIORITY WriteRetentionPriority;
 *     WORD DisablePrefetchTransferLength;
 *     BOOLEAN PrefetchScalar;
 *     union {
 *         struct  ScalarPrefetch;
 *         struct  BlockPrefetch;
 *     };
 * };
 * }
 */
public class _DISK_CACHE_INFORMATION {

    public static MemoryLayout $LAYOUT() {
        return constants$2548.const$0;
    }
    public static VarHandle ParametersSavable$VH() {
        return constants$2548.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BOOLEAN ParametersSavable;
     * }
     */
    public static byte ParametersSavable$get(MemorySegment seg) {
        return (byte)constants$2548.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BOOLEAN ParametersSavable;
     * }
     */
    public static void ParametersSavable$set(MemorySegment seg, byte x) {
        constants$2548.const$1.set(seg, x);
    }
    public static byte ParametersSavable$get(MemorySegment seg, long index) {
        return (byte)constants$2548.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void ParametersSavable$set(MemorySegment seg, long index, byte x) {
        constants$2548.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ReadCacheEnabled$VH() {
        return constants$2548.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BOOLEAN ReadCacheEnabled;
     * }
     */
    public static byte ReadCacheEnabled$get(MemorySegment seg) {
        return (byte)constants$2548.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BOOLEAN ReadCacheEnabled;
     * }
     */
    public static void ReadCacheEnabled$set(MemorySegment seg, byte x) {
        constants$2548.const$2.set(seg, x);
    }
    public static byte ReadCacheEnabled$get(MemorySegment seg, long index) {
        return (byte)constants$2548.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void ReadCacheEnabled$set(MemorySegment seg, long index, byte x) {
        constants$2548.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle WriteCacheEnabled$VH() {
        return constants$2548.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BOOLEAN WriteCacheEnabled;
     * }
     */
    public static byte WriteCacheEnabled$get(MemorySegment seg) {
        return (byte)constants$2548.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BOOLEAN WriteCacheEnabled;
     * }
     */
    public static void WriteCacheEnabled$set(MemorySegment seg, byte x) {
        constants$2548.const$3.set(seg, x);
    }
    public static byte WriteCacheEnabled$get(MemorySegment seg, long index) {
        return (byte)constants$2548.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void WriteCacheEnabled$set(MemorySegment seg, long index, byte x) {
        constants$2548.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ReadRetentionPriority$VH() {
        return constants$2548.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DISK_CACHE_RETENTION_PRIORITY ReadRetentionPriority;
     * }
     */
    public static int ReadRetentionPriority$get(MemorySegment seg) {
        return (int)constants$2548.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DISK_CACHE_RETENTION_PRIORITY ReadRetentionPriority;
     * }
     */
    public static void ReadRetentionPriority$set(MemorySegment seg, int x) {
        constants$2548.const$4.set(seg, x);
    }
    public static int ReadRetentionPriority$get(MemorySegment seg, long index) {
        return (int)constants$2548.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void ReadRetentionPriority$set(MemorySegment seg, long index, int x) {
        constants$2548.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle WriteRetentionPriority$VH() {
        return constants$2548.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DISK_CACHE_RETENTION_PRIORITY WriteRetentionPriority;
     * }
     */
    public static int WriteRetentionPriority$get(MemorySegment seg) {
        return (int)constants$2548.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DISK_CACHE_RETENTION_PRIORITY WriteRetentionPriority;
     * }
     */
    public static void WriteRetentionPriority$set(MemorySegment seg, int x) {
        constants$2548.const$5.set(seg, x);
    }
    public static int WriteRetentionPriority$get(MemorySegment seg, long index) {
        return (int)constants$2548.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void WriteRetentionPriority$set(MemorySegment seg, long index, int x) {
        constants$2548.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle DisablePrefetchTransferLength$VH() {
        return constants$2549.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD DisablePrefetchTransferLength;
     * }
     */
    public static short DisablePrefetchTransferLength$get(MemorySegment seg) {
        return (short)constants$2549.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD DisablePrefetchTransferLength;
     * }
     */
    public static void DisablePrefetchTransferLength$set(MemorySegment seg, short x) {
        constants$2549.const$0.set(seg, x);
    }
    public static short DisablePrefetchTransferLength$get(MemorySegment seg, long index) {
        return (short)constants$2549.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void DisablePrefetchTransferLength$set(MemorySegment seg, long index, short x) {
        constants$2549.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle PrefetchScalar$VH() {
        return constants$2549.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BOOLEAN PrefetchScalar;
     * }
     */
    public static byte PrefetchScalar$get(MemorySegment seg) {
        return (byte)constants$2549.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BOOLEAN PrefetchScalar;
     * }
     */
    public static void PrefetchScalar$set(MemorySegment seg, byte x) {
        constants$2549.const$1.set(seg, x);
    }
    public static byte PrefetchScalar$get(MemorySegment seg, long index) {
        return (byte)constants$2549.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void PrefetchScalar$set(MemorySegment seg, long index, byte x) {
        constants$2549.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
     * struct {
     *     WORD Minimum;
     *     WORD Maximum;
     *     WORD MaximumBlocks;
     * };
     * }
     */
    public static final class ScalarPrefetch {

        // Suppresses default constructor, ensuring non-instantiability.
        private ScalarPrefetch() {}
        public static MemoryLayout $LAYOUT() {
            return constants$2549.const$2;
        }
        public static VarHandle Minimum$VH() {
            return constants$2549.const$3;
        }
        /**
         * Getter for field:
         * {@snippet :
         * WORD Minimum;
         * }
         */
        public static short Minimum$get(MemorySegment seg) {
            return (short)constants$2549.const$3.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * WORD Minimum;
         * }
         */
        public static void Minimum$set(MemorySegment seg, short x) {
            constants$2549.const$3.set(seg, x);
        }
        public static short Minimum$get(MemorySegment seg, long index) {
            return (short)constants$2549.const$3.get(seg.asSlice(index*sizeof()));
        }
        public static void Minimum$set(MemorySegment seg, long index, short x) {
            constants$2549.const$3.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Maximum$VH() {
            return constants$2549.const$4;
        }
        /**
         * Getter for field:
         * {@snippet :
         * WORD Maximum;
         * }
         */
        public static short Maximum$get(MemorySegment seg) {
            return (short)constants$2549.const$4.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * WORD Maximum;
         * }
         */
        public static void Maximum$set(MemorySegment seg, short x) {
            constants$2549.const$4.set(seg, x);
        }
        public static short Maximum$get(MemorySegment seg, long index) {
            return (short)constants$2549.const$4.get(seg.asSlice(index*sizeof()));
        }
        public static void Maximum$set(MemorySegment seg, long index, short x) {
            constants$2549.const$4.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MaximumBlocks$VH() {
            return constants$2549.const$5;
        }
        /**
         * Getter for field:
         * {@snippet :
         * WORD MaximumBlocks;
         * }
         */
        public static short MaximumBlocks$get(MemorySegment seg) {
            return (short)constants$2549.const$5.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * WORD MaximumBlocks;
         * }
         */
        public static void MaximumBlocks$set(MemorySegment seg, short x) {
            constants$2549.const$5.set(seg, x);
        }
        public static short MaximumBlocks$get(MemorySegment seg, long index) {
            return (short)constants$2549.const$5.get(seg.asSlice(index*sizeof()));
        }
        public static void MaximumBlocks$set(MemorySegment seg, long index, short x) {
            constants$2549.const$5.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment ScalarPrefetch$slice(MemorySegment seg) {
        return seg.asSlice(16, 6);
    }
    /**
     * {@snippet :
     * struct {
     *     WORD Minimum;
     *     WORD Maximum;
     * };
     * }
     */
    public static final class BlockPrefetch {

        // Suppresses default constructor, ensuring non-instantiability.
        private BlockPrefetch() {}
        public static MemoryLayout $LAYOUT() {
            return constants$2550.const$0;
        }
        public static VarHandle Minimum$VH() {
            return constants$2550.const$1;
        }
        /**
         * Getter for field:
         * {@snippet :
         * WORD Minimum;
         * }
         */
        public static short Minimum$get(MemorySegment seg) {
            return (short)constants$2550.const$1.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * WORD Minimum;
         * }
         */
        public static void Minimum$set(MemorySegment seg, short x) {
            constants$2550.const$1.set(seg, x);
        }
        public static short Minimum$get(MemorySegment seg, long index) {
            return (short)constants$2550.const$1.get(seg.asSlice(index*sizeof()));
        }
        public static void Minimum$set(MemorySegment seg, long index, short x) {
            constants$2550.const$1.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Maximum$VH() {
            return constants$2550.const$2;
        }
        /**
         * Getter for field:
         * {@snippet :
         * WORD Maximum;
         * }
         */
        public static short Maximum$get(MemorySegment seg) {
            return (short)constants$2550.const$2.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * WORD Maximum;
         * }
         */
        public static void Maximum$set(MemorySegment seg, short x) {
            constants$2550.const$2.set(seg, x);
        }
        public static short Maximum$get(MemorySegment seg, long index) {
            return (short)constants$2550.const$2.get(seg.asSlice(index*sizeof()));
        }
        public static void Maximum$set(MemorySegment seg, long index, short x) {
            constants$2550.const$2.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment BlockPrefetch$slice(MemorySegment seg) {
        return seg.asSlice(16, 4);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



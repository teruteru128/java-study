// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _SESSION_HEADER {
 *     UCHAR sess_name;
 *     UCHAR num_sess;
 *     UCHAR rcv_dg_outstanding;
 *     UCHAR rcv_any_outstanding;
 * };
 * }
 */
public class _SESSION_HEADER {

    public static MemoryLayout $LAYOUT() {
        return constants$1707.const$5;
    }
    public static VarHandle sess_name$VH() {
        return constants$1708.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * UCHAR sess_name;
     * }
     */
    public static byte sess_name$get(MemorySegment seg) {
        return (byte)constants$1708.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * UCHAR sess_name;
     * }
     */
    public static void sess_name$set(MemorySegment seg, byte x) {
        constants$1708.const$0.set(seg, x);
    }
    public static byte sess_name$get(MemorySegment seg, long index) {
        return (byte)constants$1708.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void sess_name$set(MemorySegment seg, long index, byte x) {
        constants$1708.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle num_sess$VH() {
        return constants$1708.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * UCHAR num_sess;
     * }
     */
    public static byte num_sess$get(MemorySegment seg) {
        return (byte)constants$1708.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * UCHAR num_sess;
     * }
     */
    public static void num_sess$set(MemorySegment seg, byte x) {
        constants$1708.const$1.set(seg, x);
    }
    public static byte num_sess$get(MemorySegment seg, long index) {
        return (byte)constants$1708.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void num_sess$set(MemorySegment seg, long index, byte x) {
        constants$1708.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle rcv_dg_outstanding$VH() {
        return constants$1708.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * UCHAR rcv_dg_outstanding;
     * }
     */
    public static byte rcv_dg_outstanding$get(MemorySegment seg) {
        return (byte)constants$1708.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * UCHAR rcv_dg_outstanding;
     * }
     */
    public static void rcv_dg_outstanding$set(MemorySegment seg, byte x) {
        constants$1708.const$2.set(seg, x);
    }
    public static byte rcv_dg_outstanding$get(MemorySegment seg, long index) {
        return (byte)constants$1708.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void rcv_dg_outstanding$set(MemorySegment seg, long index, byte x) {
        constants$1708.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle rcv_any_outstanding$VH() {
        return constants$1708.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * UCHAR rcv_any_outstanding;
     * }
     */
    public static byte rcv_any_outstanding$get(MemorySegment seg) {
        return (byte)constants$1708.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * UCHAR rcv_any_outstanding;
     * }
     */
    public static void rcv_any_outstanding$set(MemorySegment seg, byte x) {
        constants$1708.const$3.set(seg, x);
    }
    public static byte rcv_any_outstanding$get(MemorySegment seg, long index) {
        return (byte)constants$1708.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void rcv_any_outstanding$set(MemorySegment seg, long index, byte x) {
        constants$1708.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



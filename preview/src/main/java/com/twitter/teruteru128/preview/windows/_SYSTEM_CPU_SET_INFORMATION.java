// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _SYSTEM_CPU_SET_INFORMATION {
 *     DWORD Size;
 *     CPU_SET_INFORMATION_TYPE Type;
 *     union {
 *         struct  CpuSet;
 *     };
 * };
 * }
 */
public class _SYSTEM_CPU_SET_INFORMATION {

    public static MemoryLayout $LAYOUT() {
        return constants$235.const$0;
    }
    public static VarHandle Size$VH() {
        return constants$235.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Size;
     * }
     */
    public static int Size$get(MemorySegment seg) {
        return (int)constants$235.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Size;
     * }
     */
    public static void Size$set(MemorySegment seg, int x) {
        constants$235.const$1.set(seg, x);
    }
    public static int Size$get(MemorySegment seg, long index) {
        return (int)constants$235.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void Size$set(MemorySegment seg, long index, int x) {
        constants$235.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Type$VH() {
        return constants$235.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * CPU_SET_INFORMATION_TYPE Type;
     * }
     */
    public static int Type$get(MemorySegment seg) {
        return (int)constants$235.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * CPU_SET_INFORMATION_TYPE Type;
     * }
     */
    public static void Type$set(MemorySegment seg, int x) {
        constants$235.const$2.set(seg, x);
    }
    public static int Type$get(MemorySegment seg, long index) {
        return (int)constants$235.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void Type$set(MemorySegment seg, long index, int x) {
        constants$235.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
     * struct {
     *     DWORD Id;
     *     WORD Group;
     *     BYTE LogicalProcessorIndex;
     *     BYTE CoreIndex;
     *     BYTE LastLevelCacheIndex;
     *     BYTE NumaNodeIndex;
     *     BYTE EfficiencyClass;
     *     union {
     *         BYTE AllFlags;
     *         struct {
     *                  *             BYTE Parked;
     *             BYTE Allocated;
     *             BYTE AllocatedToTargetProcess;
     *             BYTE RealTime;
     *             BYTE ReservedFlags;
     *         };
     *     };
     *     union {
     *         DWORD Reserved;
     *         BYTE SchedulingClass;
     *     };
     *     DWORD64 AllocationTag;
     * };
     * }
     */
    public static final class CpuSet {

        // Suppresses default constructor, ensuring non-instantiability.
        private CpuSet() {}
        public static MemoryLayout $LAYOUT() {
            return constants$235.const$3;
        }
        public static VarHandle Id$VH() {
            return constants$235.const$4;
        }
        /**
         * Getter for field:
         * {@snippet :
         * DWORD Id;
         * }
         */
        public static int Id$get(MemorySegment seg) {
            return (int)constants$235.const$4.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * DWORD Id;
         * }
         */
        public static void Id$set(MemorySegment seg, int x) {
            constants$235.const$4.set(seg, x);
        }
        public static int Id$get(MemorySegment seg, long index) {
            return (int)constants$235.const$4.get(seg.asSlice(index*sizeof()));
        }
        public static void Id$set(MemorySegment seg, long index, int x) {
            constants$235.const$4.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Group$VH() {
            return constants$235.const$5;
        }
        /**
         * Getter for field:
         * {@snippet :
         * WORD Group;
         * }
         */
        public static short Group$get(MemorySegment seg) {
            return (short)constants$235.const$5.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * WORD Group;
         * }
         */
        public static void Group$set(MemorySegment seg, short x) {
            constants$235.const$5.set(seg, x);
        }
        public static short Group$get(MemorySegment seg, long index) {
            return (short)constants$235.const$5.get(seg.asSlice(index*sizeof()));
        }
        public static void Group$set(MemorySegment seg, long index, short x) {
            constants$235.const$5.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle LogicalProcessorIndex$VH() {
            return constants$236.const$0;
        }
        /**
         * Getter for field:
         * {@snippet :
         * BYTE LogicalProcessorIndex;
         * }
         */
        public static byte LogicalProcessorIndex$get(MemorySegment seg) {
            return (byte)constants$236.const$0.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * BYTE LogicalProcessorIndex;
         * }
         */
        public static void LogicalProcessorIndex$set(MemorySegment seg, byte x) {
            constants$236.const$0.set(seg, x);
        }
        public static byte LogicalProcessorIndex$get(MemorySegment seg, long index) {
            return (byte)constants$236.const$0.get(seg.asSlice(index*sizeof()));
        }
        public static void LogicalProcessorIndex$set(MemorySegment seg, long index, byte x) {
            constants$236.const$0.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CoreIndex$VH() {
            return constants$236.const$1;
        }
        /**
         * Getter for field:
         * {@snippet :
         * BYTE CoreIndex;
         * }
         */
        public static byte CoreIndex$get(MemorySegment seg) {
            return (byte)constants$236.const$1.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * BYTE CoreIndex;
         * }
         */
        public static void CoreIndex$set(MemorySegment seg, byte x) {
            constants$236.const$1.set(seg, x);
        }
        public static byte CoreIndex$get(MemorySegment seg, long index) {
            return (byte)constants$236.const$1.get(seg.asSlice(index*sizeof()));
        }
        public static void CoreIndex$set(MemorySegment seg, long index, byte x) {
            constants$236.const$1.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle LastLevelCacheIndex$VH() {
            return constants$236.const$2;
        }
        /**
         * Getter for field:
         * {@snippet :
         * BYTE LastLevelCacheIndex;
         * }
         */
        public static byte LastLevelCacheIndex$get(MemorySegment seg) {
            return (byte)constants$236.const$2.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * BYTE LastLevelCacheIndex;
         * }
         */
        public static void LastLevelCacheIndex$set(MemorySegment seg, byte x) {
            constants$236.const$2.set(seg, x);
        }
        public static byte LastLevelCacheIndex$get(MemorySegment seg, long index) {
            return (byte)constants$236.const$2.get(seg.asSlice(index*sizeof()));
        }
        public static void LastLevelCacheIndex$set(MemorySegment seg, long index, byte x) {
            constants$236.const$2.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle NumaNodeIndex$VH() {
            return constants$236.const$3;
        }
        /**
         * Getter for field:
         * {@snippet :
         * BYTE NumaNodeIndex;
         * }
         */
        public static byte NumaNodeIndex$get(MemorySegment seg) {
            return (byte)constants$236.const$3.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * BYTE NumaNodeIndex;
         * }
         */
        public static void NumaNodeIndex$set(MemorySegment seg, byte x) {
            constants$236.const$3.set(seg, x);
        }
        public static byte NumaNodeIndex$get(MemorySegment seg, long index) {
            return (byte)constants$236.const$3.get(seg.asSlice(index*sizeof()));
        }
        public static void NumaNodeIndex$set(MemorySegment seg, long index, byte x) {
            constants$236.const$3.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle EfficiencyClass$VH() {
            return constants$236.const$4;
        }
        /**
         * Getter for field:
         * {@snippet :
         * BYTE EfficiencyClass;
         * }
         */
        public static byte EfficiencyClass$get(MemorySegment seg) {
            return (byte)constants$236.const$4.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * BYTE EfficiencyClass;
         * }
         */
        public static void EfficiencyClass$set(MemorySegment seg, byte x) {
            constants$236.const$4.set(seg, x);
        }
        public static byte EfficiencyClass$get(MemorySegment seg, long index) {
            return (byte)constants$236.const$4.get(seg.asSlice(index*sizeof()));
        }
        public static void EfficiencyClass$set(MemorySegment seg, long index, byte x) {
            constants$236.const$4.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AllFlags$VH() {
            return constants$236.const$5;
        }
        /**
         * Getter for field:
         * {@snippet :
         * BYTE AllFlags;
         * }
         */
        public static byte AllFlags$get(MemorySegment seg) {
            return (byte)constants$236.const$5.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * BYTE AllFlags;
         * }
         */
        public static void AllFlags$set(MemorySegment seg, byte x) {
            constants$236.const$5.set(seg, x);
        }
        public static byte AllFlags$get(MemorySegment seg, long index) {
            return (byte)constants$236.const$5.get(seg.asSlice(index*sizeof()));
        }
        public static void AllFlags$set(MemorySegment seg, long index, byte x) {
            constants$236.const$5.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Reserved$VH() {
            return constants$237.const$0;
        }
        /**
         * Getter for field:
         * {@snippet :
         * DWORD Reserved;
         * }
         */
        public static int Reserved$get(MemorySegment seg) {
            return (int)constants$237.const$0.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * DWORD Reserved;
         * }
         */
        public static void Reserved$set(MemorySegment seg, int x) {
            constants$237.const$0.set(seg, x);
        }
        public static int Reserved$get(MemorySegment seg, long index) {
            return (int)constants$237.const$0.get(seg.asSlice(index*sizeof()));
        }
        public static void Reserved$set(MemorySegment seg, long index, int x) {
            constants$237.const$0.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SchedulingClass$VH() {
            return constants$237.const$1;
        }
        /**
         * Getter for field:
         * {@snippet :
         * BYTE SchedulingClass;
         * }
         */
        public static byte SchedulingClass$get(MemorySegment seg) {
            return (byte)constants$237.const$1.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * BYTE SchedulingClass;
         * }
         */
        public static void SchedulingClass$set(MemorySegment seg, byte x) {
            constants$237.const$1.set(seg, x);
        }
        public static byte SchedulingClass$get(MemorySegment seg, long index) {
            return (byte)constants$237.const$1.get(seg.asSlice(index*sizeof()));
        }
        public static void SchedulingClass$set(MemorySegment seg, long index, byte x) {
            constants$237.const$1.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AllocationTag$VH() {
            return constants$237.const$2;
        }
        /**
         * Getter for field:
         * {@snippet :
         * DWORD64 AllocationTag;
         * }
         */
        public static long AllocationTag$get(MemorySegment seg) {
            return (long)constants$237.const$2.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * DWORD64 AllocationTag;
         * }
         */
        public static void AllocationTag$set(MemorySegment seg, long x) {
            constants$237.const$2.set(seg, x);
        }
        public static long AllocationTag$get(MemorySegment seg, long index) {
            return (long)constants$237.const$2.get(seg.asSlice(index*sizeof()));
        }
        public static void AllocationTag$set(MemorySegment seg, long index, long x) {
            constants$237.const$2.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment CpuSet$slice(MemorySegment seg) {
        return seg.asSlice(8, 24);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



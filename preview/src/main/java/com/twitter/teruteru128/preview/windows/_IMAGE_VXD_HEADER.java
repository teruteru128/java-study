// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _IMAGE_VXD_HEADER {
 *     WORD e32_magic;
 *     BYTE e32_border;
 *     BYTE e32_worder;
 *     DWORD e32_level;
 *     WORD e32_cpu;
 *     WORD e32_os;
 *     DWORD e32_ver;
 *     DWORD e32_mflags;
 *     DWORD e32_mpages;
 *     DWORD e32_startobj;
 *     DWORD e32_eip;
 *     DWORD e32_stackobj;
 *     DWORD e32_esp;
 *     DWORD e32_pagesize;
 *     DWORD e32_lastpagesize;
 *     DWORD e32_fixupsize;
 *     DWORD e32_fixupsum;
 *     DWORD e32_ldrsize;
 *     DWORD e32_ldrsum;
 *     DWORD e32_objtab;
 *     DWORD e32_objcnt;
 *     DWORD e32_objmap;
 *     DWORD e32_itermap;
 *     DWORD e32_rsrctab;
 *     DWORD e32_rsrccnt;
 *     DWORD e32_restab;
 *     DWORD e32_enttab;
 *     DWORD e32_dirtab;
 *     DWORD e32_dircnt;
 *     DWORD e32_fpagetab;
 *     DWORD e32_frectab;
 *     DWORD e32_impmod;
 *     DWORD e32_impmodcnt;
 *     DWORD e32_impproc;
 *     DWORD e32_pagesum;
 *     DWORD e32_datapage;
 *     DWORD e32_preload;
 *     DWORD e32_nrestab;
 *     DWORD e32_cbnrestab;
 *     DWORD e32_nressum;
 *     DWORD e32_autodata;
 *     DWORD e32_debuginfo;
 *     DWORD e32_debuglen;
 *     DWORD e32_instpreload;
 *     DWORD e32_instdemand;
 *     DWORD e32_heapsize;
 *     BYTE e32_res3[12];
 *     DWORD e32_winresoff;
 *     DWORD e32_winreslen;
 *     WORD e32_devid;
 *     WORD e32_ddkver;
 * };
 * }
 */
public class _IMAGE_VXD_HEADER {

    public static MemoryLayout $LAYOUT() {
        return constants$358.const$4;
    }
    public static VarHandle e32_magic$VH() {
        return constants$358.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD e32_magic;
     * }
     */
    public static short e32_magic$get(MemorySegment seg) {
        return (short)constants$358.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD e32_magic;
     * }
     */
    public static void e32_magic$set(MemorySegment seg, short x) {
        constants$358.const$5.set(seg, x);
    }
    public static short e32_magic$get(MemorySegment seg, long index) {
        return (short)constants$358.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_magic$set(MemorySegment seg, long index, short x) {
        constants$358.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle e32_border$VH() {
        return constants$359.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE e32_border;
     * }
     */
    public static byte e32_border$get(MemorySegment seg) {
        return (byte)constants$359.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE e32_border;
     * }
     */
    public static void e32_border$set(MemorySegment seg, byte x) {
        constants$359.const$0.set(seg, x);
    }
    public static byte e32_border$get(MemorySegment seg, long index) {
        return (byte)constants$359.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_border$set(MemorySegment seg, long index, byte x) {
        constants$359.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle e32_worder$VH() {
        return constants$359.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE e32_worder;
     * }
     */
    public static byte e32_worder$get(MemorySegment seg) {
        return (byte)constants$359.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE e32_worder;
     * }
     */
    public static void e32_worder$set(MemorySegment seg, byte x) {
        constants$359.const$1.set(seg, x);
    }
    public static byte e32_worder$get(MemorySegment seg, long index) {
        return (byte)constants$359.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_worder$set(MemorySegment seg, long index, byte x) {
        constants$359.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle e32_level$VH() {
        return constants$359.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD e32_level;
     * }
     */
    public static int e32_level$get(MemorySegment seg) {
        return (int)constants$359.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD e32_level;
     * }
     */
    public static void e32_level$set(MemorySegment seg, int x) {
        constants$359.const$2.set(seg, x);
    }
    public static int e32_level$get(MemorySegment seg, long index) {
        return (int)constants$359.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_level$set(MemorySegment seg, long index, int x) {
        constants$359.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle e32_cpu$VH() {
        return constants$359.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD e32_cpu;
     * }
     */
    public static short e32_cpu$get(MemorySegment seg) {
        return (short)constants$359.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD e32_cpu;
     * }
     */
    public static void e32_cpu$set(MemorySegment seg, short x) {
        constants$359.const$3.set(seg, x);
    }
    public static short e32_cpu$get(MemorySegment seg, long index) {
        return (short)constants$359.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_cpu$set(MemorySegment seg, long index, short x) {
        constants$359.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle e32_os$VH() {
        return constants$359.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD e32_os;
     * }
     */
    public static short e32_os$get(MemorySegment seg) {
        return (short)constants$359.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD e32_os;
     * }
     */
    public static void e32_os$set(MemorySegment seg, short x) {
        constants$359.const$4.set(seg, x);
    }
    public static short e32_os$get(MemorySegment seg, long index) {
        return (short)constants$359.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_os$set(MemorySegment seg, long index, short x) {
        constants$359.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle e32_ver$VH() {
        return constants$359.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD e32_ver;
     * }
     */
    public static int e32_ver$get(MemorySegment seg) {
        return (int)constants$359.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD e32_ver;
     * }
     */
    public static void e32_ver$set(MemorySegment seg, int x) {
        constants$359.const$5.set(seg, x);
    }
    public static int e32_ver$get(MemorySegment seg, long index) {
        return (int)constants$359.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_ver$set(MemorySegment seg, long index, int x) {
        constants$359.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle e32_mflags$VH() {
        return constants$360.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD e32_mflags;
     * }
     */
    public static int e32_mflags$get(MemorySegment seg) {
        return (int)constants$360.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD e32_mflags;
     * }
     */
    public static void e32_mflags$set(MemorySegment seg, int x) {
        constants$360.const$0.set(seg, x);
    }
    public static int e32_mflags$get(MemorySegment seg, long index) {
        return (int)constants$360.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_mflags$set(MemorySegment seg, long index, int x) {
        constants$360.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle e32_mpages$VH() {
        return constants$360.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD e32_mpages;
     * }
     */
    public static int e32_mpages$get(MemorySegment seg) {
        return (int)constants$360.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD e32_mpages;
     * }
     */
    public static void e32_mpages$set(MemorySegment seg, int x) {
        constants$360.const$1.set(seg, x);
    }
    public static int e32_mpages$get(MemorySegment seg, long index) {
        return (int)constants$360.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_mpages$set(MemorySegment seg, long index, int x) {
        constants$360.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle e32_startobj$VH() {
        return constants$360.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD e32_startobj;
     * }
     */
    public static int e32_startobj$get(MemorySegment seg) {
        return (int)constants$360.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD e32_startobj;
     * }
     */
    public static void e32_startobj$set(MemorySegment seg, int x) {
        constants$360.const$2.set(seg, x);
    }
    public static int e32_startobj$get(MemorySegment seg, long index) {
        return (int)constants$360.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_startobj$set(MemorySegment seg, long index, int x) {
        constants$360.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle e32_eip$VH() {
        return constants$360.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD e32_eip;
     * }
     */
    public static int e32_eip$get(MemorySegment seg) {
        return (int)constants$360.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD e32_eip;
     * }
     */
    public static void e32_eip$set(MemorySegment seg, int x) {
        constants$360.const$3.set(seg, x);
    }
    public static int e32_eip$get(MemorySegment seg, long index) {
        return (int)constants$360.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_eip$set(MemorySegment seg, long index, int x) {
        constants$360.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle e32_stackobj$VH() {
        return constants$360.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD e32_stackobj;
     * }
     */
    public static int e32_stackobj$get(MemorySegment seg) {
        return (int)constants$360.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD e32_stackobj;
     * }
     */
    public static void e32_stackobj$set(MemorySegment seg, int x) {
        constants$360.const$4.set(seg, x);
    }
    public static int e32_stackobj$get(MemorySegment seg, long index) {
        return (int)constants$360.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_stackobj$set(MemorySegment seg, long index, int x) {
        constants$360.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle e32_esp$VH() {
        return constants$360.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD e32_esp;
     * }
     */
    public static int e32_esp$get(MemorySegment seg) {
        return (int)constants$360.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD e32_esp;
     * }
     */
    public static void e32_esp$set(MemorySegment seg, int x) {
        constants$360.const$5.set(seg, x);
    }
    public static int e32_esp$get(MemorySegment seg, long index) {
        return (int)constants$360.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_esp$set(MemorySegment seg, long index, int x) {
        constants$360.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle e32_pagesize$VH() {
        return constants$361.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD e32_pagesize;
     * }
     */
    public static int e32_pagesize$get(MemorySegment seg) {
        return (int)constants$361.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD e32_pagesize;
     * }
     */
    public static void e32_pagesize$set(MemorySegment seg, int x) {
        constants$361.const$0.set(seg, x);
    }
    public static int e32_pagesize$get(MemorySegment seg, long index) {
        return (int)constants$361.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_pagesize$set(MemorySegment seg, long index, int x) {
        constants$361.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle e32_lastpagesize$VH() {
        return constants$361.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD e32_lastpagesize;
     * }
     */
    public static int e32_lastpagesize$get(MemorySegment seg) {
        return (int)constants$361.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD e32_lastpagesize;
     * }
     */
    public static void e32_lastpagesize$set(MemorySegment seg, int x) {
        constants$361.const$1.set(seg, x);
    }
    public static int e32_lastpagesize$get(MemorySegment seg, long index) {
        return (int)constants$361.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_lastpagesize$set(MemorySegment seg, long index, int x) {
        constants$361.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle e32_fixupsize$VH() {
        return constants$361.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD e32_fixupsize;
     * }
     */
    public static int e32_fixupsize$get(MemorySegment seg) {
        return (int)constants$361.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD e32_fixupsize;
     * }
     */
    public static void e32_fixupsize$set(MemorySegment seg, int x) {
        constants$361.const$2.set(seg, x);
    }
    public static int e32_fixupsize$get(MemorySegment seg, long index) {
        return (int)constants$361.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_fixupsize$set(MemorySegment seg, long index, int x) {
        constants$361.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle e32_fixupsum$VH() {
        return constants$361.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD e32_fixupsum;
     * }
     */
    public static int e32_fixupsum$get(MemorySegment seg) {
        return (int)constants$361.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD e32_fixupsum;
     * }
     */
    public static void e32_fixupsum$set(MemorySegment seg, int x) {
        constants$361.const$3.set(seg, x);
    }
    public static int e32_fixupsum$get(MemorySegment seg, long index) {
        return (int)constants$361.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_fixupsum$set(MemorySegment seg, long index, int x) {
        constants$361.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle e32_ldrsize$VH() {
        return constants$361.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD e32_ldrsize;
     * }
     */
    public static int e32_ldrsize$get(MemorySegment seg) {
        return (int)constants$361.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD e32_ldrsize;
     * }
     */
    public static void e32_ldrsize$set(MemorySegment seg, int x) {
        constants$361.const$4.set(seg, x);
    }
    public static int e32_ldrsize$get(MemorySegment seg, long index) {
        return (int)constants$361.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_ldrsize$set(MemorySegment seg, long index, int x) {
        constants$361.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle e32_ldrsum$VH() {
        return constants$361.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD e32_ldrsum;
     * }
     */
    public static int e32_ldrsum$get(MemorySegment seg) {
        return (int)constants$361.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD e32_ldrsum;
     * }
     */
    public static void e32_ldrsum$set(MemorySegment seg, int x) {
        constants$361.const$5.set(seg, x);
    }
    public static int e32_ldrsum$get(MemorySegment seg, long index) {
        return (int)constants$361.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_ldrsum$set(MemorySegment seg, long index, int x) {
        constants$361.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle e32_objtab$VH() {
        return constants$362.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD e32_objtab;
     * }
     */
    public static int e32_objtab$get(MemorySegment seg) {
        return (int)constants$362.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD e32_objtab;
     * }
     */
    public static void e32_objtab$set(MemorySegment seg, int x) {
        constants$362.const$0.set(seg, x);
    }
    public static int e32_objtab$get(MemorySegment seg, long index) {
        return (int)constants$362.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_objtab$set(MemorySegment seg, long index, int x) {
        constants$362.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle e32_objcnt$VH() {
        return constants$362.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD e32_objcnt;
     * }
     */
    public static int e32_objcnt$get(MemorySegment seg) {
        return (int)constants$362.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD e32_objcnt;
     * }
     */
    public static void e32_objcnt$set(MemorySegment seg, int x) {
        constants$362.const$1.set(seg, x);
    }
    public static int e32_objcnt$get(MemorySegment seg, long index) {
        return (int)constants$362.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_objcnt$set(MemorySegment seg, long index, int x) {
        constants$362.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle e32_objmap$VH() {
        return constants$362.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD e32_objmap;
     * }
     */
    public static int e32_objmap$get(MemorySegment seg) {
        return (int)constants$362.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD e32_objmap;
     * }
     */
    public static void e32_objmap$set(MemorySegment seg, int x) {
        constants$362.const$2.set(seg, x);
    }
    public static int e32_objmap$get(MemorySegment seg, long index) {
        return (int)constants$362.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_objmap$set(MemorySegment seg, long index, int x) {
        constants$362.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle e32_itermap$VH() {
        return constants$362.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD e32_itermap;
     * }
     */
    public static int e32_itermap$get(MemorySegment seg) {
        return (int)constants$362.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD e32_itermap;
     * }
     */
    public static void e32_itermap$set(MemorySegment seg, int x) {
        constants$362.const$3.set(seg, x);
    }
    public static int e32_itermap$get(MemorySegment seg, long index) {
        return (int)constants$362.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_itermap$set(MemorySegment seg, long index, int x) {
        constants$362.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle e32_rsrctab$VH() {
        return constants$362.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD e32_rsrctab;
     * }
     */
    public static int e32_rsrctab$get(MemorySegment seg) {
        return (int)constants$362.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD e32_rsrctab;
     * }
     */
    public static void e32_rsrctab$set(MemorySegment seg, int x) {
        constants$362.const$4.set(seg, x);
    }
    public static int e32_rsrctab$get(MemorySegment seg, long index) {
        return (int)constants$362.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_rsrctab$set(MemorySegment seg, long index, int x) {
        constants$362.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle e32_rsrccnt$VH() {
        return constants$362.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD e32_rsrccnt;
     * }
     */
    public static int e32_rsrccnt$get(MemorySegment seg) {
        return (int)constants$362.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD e32_rsrccnt;
     * }
     */
    public static void e32_rsrccnt$set(MemorySegment seg, int x) {
        constants$362.const$5.set(seg, x);
    }
    public static int e32_rsrccnt$get(MemorySegment seg, long index) {
        return (int)constants$362.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_rsrccnt$set(MemorySegment seg, long index, int x) {
        constants$362.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle e32_restab$VH() {
        return constants$363.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD e32_restab;
     * }
     */
    public static int e32_restab$get(MemorySegment seg) {
        return (int)constants$363.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD e32_restab;
     * }
     */
    public static void e32_restab$set(MemorySegment seg, int x) {
        constants$363.const$0.set(seg, x);
    }
    public static int e32_restab$get(MemorySegment seg, long index) {
        return (int)constants$363.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_restab$set(MemorySegment seg, long index, int x) {
        constants$363.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle e32_enttab$VH() {
        return constants$363.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD e32_enttab;
     * }
     */
    public static int e32_enttab$get(MemorySegment seg) {
        return (int)constants$363.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD e32_enttab;
     * }
     */
    public static void e32_enttab$set(MemorySegment seg, int x) {
        constants$363.const$1.set(seg, x);
    }
    public static int e32_enttab$get(MemorySegment seg, long index) {
        return (int)constants$363.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_enttab$set(MemorySegment seg, long index, int x) {
        constants$363.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle e32_dirtab$VH() {
        return constants$363.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD e32_dirtab;
     * }
     */
    public static int e32_dirtab$get(MemorySegment seg) {
        return (int)constants$363.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD e32_dirtab;
     * }
     */
    public static void e32_dirtab$set(MemorySegment seg, int x) {
        constants$363.const$2.set(seg, x);
    }
    public static int e32_dirtab$get(MemorySegment seg, long index) {
        return (int)constants$363.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_dirtab$set(MemorySegment seg, long index, int x) {
        constants$363.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle e32_dircnt$VH() {
        return constants$363.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD e32_dircnt;
     * }
     */
    public static int e32_dircnt$get(MemorySegment seg) {
        return (int)constants$363.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD e32_dircnt;
     * }
     */
    public static void e32_dircnt$set(MemorySegment seg, int x) {
        constants$363.const$3.set(seg, x);
    }
    public static int e32_dircnt$get(MemorySegment seg, long index) {
        return (int)constants$363.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_dircnt$set(MemorySegment seg, long index, int x) {
        constants$363.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle e32_fpagetab$VH() {
        return constants$363.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD e32_fpagetab;
     * }
     */
    public static int e32_fpagetab$get(MemorySegment seg) {
        return (int)constants$363.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD e32_fpagetab;
     * }
     */
    public static void e32_fpagetab$set(MemorySegment seg, int x) {
        constants$363.const$4.set(seg, x);
    }
    public static int e32_fpagetab$get(MemorySegment seg, long index) {
        return (int)constants$363.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_fpagetab$set(MemorySegment seg, long index, int x) {
        constants$363.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle e32_frectab$VH() {
        return constants$363.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD e32_frectab;
     * }
     */
    public static int e32_frectab$get(MemorySegment seg) {
        return (int)constants$363.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD e32_frectab;
     * }
     */
    public static void e32_frectab$set(MemorySegment seg, int x) {
        constants$363.const$5.set(seg, x);
    }
    public static int e32_frectab$get(MemorySegment seg, long index) {
        return (int)constants$363.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_frectab$set(MemorySegment seg, long index, int x) {
        constants$363.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle e32_impmod$VH() {
        return constants$364.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD e32_impmod;
     * }
     */
    public static int e32_impmod$get(MemorySegment seg) {
        return (int)constants$364.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD e32_impmod;
     * }
     */
    public static void e32_impmod$set(MemorySegment seg, int x) {
        constants$364.const$0.set(seg, x);
    }
    public static int e32_impmod$get(MemorySegment seg, long index) {
        return (int)constants$364.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_impmod$set(MemorySegment seg, long index, int x) {
        constants$364.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle e32_impmodcnt$VH() {
        return constants$364.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD e32_impmodcnt;
     * }
     */
    public static int e32_impmodcnt$get(MemorySegment seg) {
        return (int)constants$364.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD e32_impmodcnt;
     * }
     */
    public static void e32_impmodcnt$set(MemorySegment seg, int x) {
        constants$364.const$1.set(seg, x);
    }
    public static int e32_impmodcnt$get(MemorySegment seg, long index) {
        return (int)constants$364.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_impmodcnt$set(MemorySegment seg, long index, int x) {
        constants$364.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle e32_impproc$VH() {
        return constants$364.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD e32_impproc;
     * }
     */
    public static int e32_impproc$get(MemorySegment seg) {
        return (int)constants$364.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD e32_impproc;
     * }
     */
    public static void e32_impproc$set(MemorySegment seg, int x) {
        constants$364.const$2.set(seg, x);
    }
    public static int e32_impproc$get(MemorySegment seg, long index) {
        return (int)constants$364.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_impproc$set(MemorySegment seg, long index, int x) {
        constants$364.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle e32_pagesum$VH() {
        return constants$364.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD e32_pagesum;
     * }
     */
    public static int e32_pagesum$get(MemorySegment seg) {
        return (int)constants$364.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD e32_pagesum;
     * }
     */
    public static void e32_pagesum$set(MemorySegment seg, int x) {
        constants$364.const$3.set(seg, x);
    }
    public static int e32_pagesum$get(MemorySegment seg, long index) {
        return (int)constants$364.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_pagesum$set(MemorySegment seg, long index, int x) {
        constants$364.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle e32_datapage$VH() {
        return constants$364.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD e32_datapage;
     * }
     */
    public static int e32_datapage$get(MemorySegment seg) {
        return (int)constants$364.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD e32_datapage;
     * }
     */
    public static void e32_datapage$set(MemorySegment seg, int x) {
        constants$364.const$4.set(seg, x);
    }
    public static int e32_datapage$get(MemorySegment seg, long index) {
        return (int)constants$364.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_datapage$set(MemorySegment seg, long index, int x) {
        constants$364.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle e32_preload$VH() {
        return constants$364.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD e32_preload;
     * }
     */
    public static int e32_preload$get(MemorySegment seg) {
        return (int)constants$364.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD e32_preload;
     * }
     */
    public static void e32_preload$set(MemorySegment seg, int x) {
        constants$364.const$5.set(seg, x);
    }
    public static int e32_preload$get(MemorySegment seg, long index) {
        return (int)constants$364.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_preload$set(MemorySegment seg, long index, int x) {
        constants$364.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle e32_nrestab$VH() {
        return constants$365.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD e32_nrestab;
     * }
     */
    public static int e32_nrestab$get(MemorySegment seg) {
        return (int)constants$365.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD e32_nrestab;
     * }
     */
    public static void e32_nrestab$set(MemorySegment seg, int x) {
        constants$365.const$0.set(seg, x);
    }
    public static int e32_nrestab$get(MemorySegment seg, long index) {
        return (int)constants$365.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_nrestab$set(MemorySegment seg, long index, int x) {
        constants$365.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle e32_cbnrestab$VH() {
        return constants$365.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD e32_cbnrestab;
     * }
     */
    public static int e32_cbnrestab$get(MemorySegment seg) {
        return (int)constants$365.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD e32_cbnrestab;
     * }
     */
    public static void e32_cbnrestab$set(MemorySegment seg, int x) {
        constants$365.const$1.set(seg, x);
    }
    public static int e32_cbnrestab$get(MemorySegment seg, long index) {
        return (int)constants$365.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_cbnrestab$set(MemorySegment seg, long index, int x) {
        constants$365.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle e32_nressum$VH() {
        return constants$365.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD e32_nressum;
     * }
     */
    public static int e32_nressum$get(MemorySegment seg) {
        return (int)constants$365.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD e32_nressum;
     * }
     */
    public static void e32_nressum$set(MemorySegment seg, int x) {
        constants$365.const$2.set(seg, x);
    }
    public static int e32_nressum$get(MemorySegment seg, long index) {
        return (int)constants$365.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_nressum$set(MemorySegment seg, long index, int x) {
        constants$365.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle e32_autodata$VH() {
        return constants$365.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD e32_autodata;
     * }
     */
    public static int e32_autodata$get(MemorySegment seg) {
        return (int)constants$365.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD e32_autodata;
     * }
     */
    public static void e32_autodata$set(MemorySegment seg, int x) {
        constants$365.const$3.set(seg, x);
    }
    public static int e32_autodata$get(MemorySegment seg, long index) {
        return (int)constants$365.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_autodata$set(MemorySegment seg, long index, int x) {
        constants$365.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle e32_debuginfo$VH() {
        return constants$365.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD e32_debuginfo;
     * }
     */
    public static int e32_debuginfo$get(MemorySegment seg) {
        return (int)constants$365.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD e32_debuginfo;
     * }
     */
    public static void e32_debuginfo$set(MemorySegment seg, int x) {
        constants$365.const$4.set(seg, x);
    }
    public static int e32_debuginfo$get(MemorySegment seg, long index) {
        return (int)constants$365.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_debuginfo$set(MemorySegment seg, long index, int x) {
        constants$365.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle e32_debuglen$VH() {
        return constants$365.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD e32_debuglen;
     * }
     */
    public static int e32_debuglen$get(MemorySegment seg) {
        return (int)constants$365.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD e32_debuglen;
     * }
     */
    public static void e32_debuglen$set(MemorySegment seg, int x) {
        constants$365.const$5.set(seg, x);
    }
    public static int e32_debuglen$get(MemorySegment seg, long index) {
        return (int)constants$365.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_debuglen$set(MemorySegment seg, long index, int x) {
        constants$365.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle e32_instpreload$VH() {
        return constants$366.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD e32_instpreload;
     * }
     */
    public static int e32_instpreload$get(MemorySegment seg) {
        return (int)constants$366.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD e32_instpreload;
     * }
     */
    public static void e32_instpreload$set(MemorySegment seg, int x) {
        constants$366.const$0.set(seg, x);
    }
    public static int e32_instpreload$get(MemorySegment seg, long index) {
        return (int)constants$366.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_instpreload$set(MemorySegment seg, long index, int x) {
        constants$366.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle e32_instdemand$VH() {
        return constants$366.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD e32_instdemand;
     * }
     */
    public static int e32_instdemand$get(MemorySegment seg) {
        return (int)constants$366.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD e32_instdemand;
     * }
     */
    public static void e32_instdemand$set(MemorySegment seg, int x) {
        constants$366.const$1.set(seg, x);
    }
    public static int e32_instdemand$get(MemorySegment seg, long index) {
        return (int)constants$366.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_instdemand$set(MemorySegment seg, long index, int x) {
        constants$366.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle e32_heapsize$VH() {
        return constants$366.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD e32_heapsize;
     * }
     */
    public static int e32_heapsize$get(MemorySegment seg) {
        return (int)constants$366.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD e32_heapsize;
     * }
     */
    public static void e32_heapsize$set(MemorySegment seg, int x) {
        constants$366.const$2.set(seg, x);
    }
    public static int e32_heapsize$get(MemorySegment seg, long index) {
        return (int)constants$366.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_heapsize$set(MemorySegment seg, long index, int x) {
        constants$366.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment e32_res3$slice(MemorySegment seg) {
        return seg.asSlice(172, 12);
    }
    public static VarHandle e32_winresoff$VH() {
        return constants$366.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD e32_winresoff;
     * }
     */
    public static int e32_winresoff$get(MemorySegment seg) {
        return (int)constants$366.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD e32_winresoff;
     * }
     */
    public static void e32_winresoff$set(MemorySegment seg, int x) {
        constants$366.const$3.set(seg, x);
    }
    public static int e32_winresoff$get(MemorySegment seg, long index) {
        return (int)constants$366.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_winresoff$set(MemorySegment seg, long index, int x) {
        constants$366.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle e32_winreslen$VH() {
        return constants$366.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD e32_winreslen;
     * }
     */
    public static int e32_winreslen$get(MemorySegment seg) {
        return (int)constants$366.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD e32_winreslen;
     * }
     */
    public static void e32_winreslen$set(MemorySegment seg, int x) {
        constants$366.const$4.set(seg, x);
    }
    public static int e32_winreslen$get(MemorySegment seg, long index) {
        return (int)constants$366.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_winreslen$set(MemorySegment seg, long index, int x) {
        constants$366.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle e32_devid$VH() {
        return constants$366.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD e32_devid;
     * }
     */
    public static short e32_devid$get(MemorySegment seg) {
        return (short)constants$366.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD e32_devid;
     * }
     */
    public static void e32_devid$set(MemorySegment seg, short x) {
        constants$366.const$5.set(seg, x);
    }
    public static short e32_devid$get(MemorySegment seg, long index) {
        return (short)constants$366.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_devid$set(MemorySegment seg, long index, short x) {
        constants$366.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle e32_ddkver$VH() {
        return constants$367.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD e32_ddkver;
     * }
     */
    public static short e32_ddkver$get(MemorySegment seg) {
        return (short)constants$367.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD e32_ddkver;
     * }
     */
    public static void e32_ddkver$set(MemorySegment seg, short x) {
        constants$367.const$0.set(seg, x);
    }
    public static short e32_ddkver$get(MemorySegment seg, long index) {
        return (short)constants$367.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_ddkver$set(MemorySegment seg, long index, short x) {
        constants$367.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



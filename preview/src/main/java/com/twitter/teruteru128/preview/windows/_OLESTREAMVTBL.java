// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _OLESTREAMVTBL {
 *     DWORD (*Get)(LPOLESTREAM,void*,DWORD);
 *     DWORD (*Put)(LPOLESTREAM,void*,DWORD);
 * };
 * }
 */
public class _OLESTREAMVTBL {

    public static MemoryLayout $LAYOUT() {
        return constants$4411.const$4;
    }
    /**
     * {@snippet :
 * DWORD (*Get)(LPOLESTREAM,void*,DWORD);
     * }
     */
    public interface Get {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2);
        static MemorySegment allocate(Get fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4411.const$5, fi, constants$570.const$5, scope);
        }
        static Get ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2) -> {
                try {
                    return (int)constants$779.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Get$VH() {
        return constants$4412.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD (*Get)(LPOLESTREAM,void*,DWORD);
     * }
     */
    public static MemorySegment Get$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4412.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD (*Get)(LPOLESTREAM,void*,DWORD);
     * }
     */
    public static void Get$set(MemorySegment seg, MemorySegment x) {
        constants$4412.const$0.set(seg, x);
    }
    public static MemorySegment Get$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4412.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Get$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4412.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static Get Get(MemorySegment segment, Arena scope) {
        return Get.ofAddress(Get$get(segment), scope);
    }
    /**
     * {@snippet :
 * DWORD (*Put)(LPOLESTREAM,void*,DWORD);
     * }
     */
    public interface Put {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2);
        static MemorySegment allocate(Put fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4412.const$1, fi, constants$570.const$5, scope);
        }
        static Put ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2) -> {
                try {
                    return (int)constants$779.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Put$VH() {
        return constants$4412.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD (*Put)(LPOLESTREAM,void*,DWORD);
     * }
     */
    public static MemorySegment Put$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4412.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD (*Put)(LPOLESTREAM,void*,DWORD);
     * }
     */
    public static void Put$set(MemorySegment seg, MemorySegment x) {
        constants$4412.const$2.set(seg, x);
    }
    public static MemorySegment Put$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4412.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void Put$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4412.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static Put Put(MemorySegment segment, Arena scope) {
        return Put.ofAddress(Put$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _CSV_QUERY_MDS_PATH_V2 {
 *     LONGLONG Version;
 *     DWORD RequiredSize;
 *     DWORD MdsNodeId;
 *     DWORD DsNodeId;
 *     DWORD Flags;
 *     CSVFS_DISK_CONNECTIVITY DiskConnectivity;
 *     GUID VolumeId;
 *     DWORD IpAddressOffset;
 *     DWORD IpAddressLength;
 *     DWORD PathOffset;
 *     DWORD PathLength;
 * };
 * }
 */
public class _CSV_QUERY_MDS_PATH_V2 {

    public static MemoryLayout $LAYOUT() {
        return constants$2684.const$3;
    }
    public static VarHandle Version$VH() {
        return constants$2684.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LONGLONG Version;
     * }
     */
    public static long Version$get(MemorySegment seg) {
        return (long)constants$2684.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LONGLONG Version;
     * }
     */
    public static void Version$set(MemorySegment seg, long x) {
        constants$2684.const$4.set(seg, x);
    }
    public static long Version$get(MemorySegment seg, long index) {
        return (long)constants$2684.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, long x) {
        constants$2684.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle RequiredSize$VH() {
        return constants$2684.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD RequiredSize;
     * }
     */
    public static int RequiredSize$get(MemorySegment seg) {
        return (int)constants$2684.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD RequiredSize;
     * }
     */
    public static void RequiredSize$set(MemorySegment seg, int x) {
        constants$2684.const$5.set(seg, x);
    }
    public static int RequiredSize$get(MemorySegment seg, long index) {
        return (int)constants$2684.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void RequiredSize$set(MemorySegment seg, long index, int x) {
        constants$2684.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MdsNodeId$VH() {
        return constants$2685.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD MdsNodeId;
     * }
     */
    public static int MdsNodeId$get(MemorySegment seg) {
        return (int)constants$2685.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD MdsNodeId;
     * }
     */
    public static void MdsNodeId$set(MemorySegment seg, int x) {
        constants$2685.const$0.set(seg, x);
    }
    public static int MdsNodeId$get(MemorySegment seg, long index) {
        return (int)constants$2685.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void MdsNodeId$set(MemorySegment seg, long index, int x) {
        constants$2685.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle DsNodeId$VH() {
        return constants$2685.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD DsNodeId;
     * }
     */
    public static int DsNodeId$get(MemorySegment seg) {
        return (int)constants$2685.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD DsNodeId;
     * }
     */
    public static void DsNodeId$set(MemorySegment seg, int x) {
        constants$2685.const$1.set(seg, x);
    }
    public static int DsNodeId$get(MemorySegment seg, long index) {
        return (int)constants$2685.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void DsNodeId$set(MemorySegment seg, long index, int x) {
        constants$2685.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Flags$VH() {
        return constants$2685.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Flags;
     * }
     */
    public static int Flags$get(MemorySegment seg) {
        return (int)constants$2685.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Flags;
     * }
     */
    public static void Flags$set(MemorySegment seg, int x) {
        constants$2685.const$2.set(seg, x);
    }
    public static int Flags$get(MemorySegment seg, long index) {
        return (int)constants$2685.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, int x) {
        constants$2685.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle DiskConnectivity$VH() {
        return constants$2685.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * CSVFS_DISK_CONNECTIVITY DiskConnectivity;
     * }
     */
    public static int DiskConnectivity$get(MemorySegment seg) {
        return (int)constants$2685.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * CSVFS_DISK_CONNECTIVITY DiskConnectivity;
     * }
     */
    public static void DiskConnectivity$set(MemorySegment seg, int x) {
        constants$2685.const$3.set(seg, x);
    }
    public static int DiskConnectivity$get(MemorySegment seg, long index) {
        return (int)constants$2685.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void DiskConnectivity$set(MemorySegment seg, long index, int x) {
        constants$2685.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment VolumeId$slice(MemorySegment seg) {
        return seg.asSlice(28, 16);
    }
    public static VarHandle IpAddressOffset$VH() {
        return constants$2685.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD IpAddressOffset;
     * }
     */
    public static int IpAddressOffset$get(MemorySegment seg) {
        return (int)constants$2685.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD IpAddressOffset;
     * }
     */
    public static void IpAddressOffset$set(MemorySegment seg, int x) {
        constants$2685.const$4.set(seg, x);
    }
    public static int IpAddressOffset$get(MemorySegment seg, long index) {
        return (int)constants$2685.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void IpAddressOffset$set(MemorySegment seg, long index, int x) {
        constants$2685.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle IpAddressLength$VH() {
        return constants$2685.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD IpAddressLength;
     * }
     */
    public static int IpAddressLength$get(MemorySegment seg) {
        return (int)constants$2685.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD IpAddressLength;
     * }
     */
    public static void IpAddressLength$set(MemorySegment seg, int x) {
        constants$2685.const$5.set(seg, x);
    }
    public static int IpAddressLength$get(MemorySegment seg, long index) {
        return (int)constants$2685.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void IpAddressLength$set(MemorySegment seg, long index, int x) {
        constants$2685.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle PathOffset$VH() {
        return constants$2686.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD PathOffset;
     * }
     */
    public static int PathOffset$get(MemorySegment seg) {
        return (int)constants$2686.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD PathOffset;
     * }
     */
    public static void PathOffset$set(MemorySegment seg, int x) {
        constants$2686.const$0.set(seg, x);
    }
    public static int PathOffset$get(MemorySegment seg, long index) {
        return (int)constants$2686.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void PathOffset$set(MemorySegment seg, long index, int x) {
        constants$2686.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle PathLength$VH() {
        return constants$2686.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD PathLength;
     * }
     */
    public static int PathLength$get(MemorySegment seg) {
        return (int)constants$2686.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD PathLength;
     * }
     */
    public static void PathLength$set(MemorySegment seg, int x) {
        constants$2686.const$1.set(seg, x);
    }
    public static int PathLength$get(MemorySegment seg, long index) {
        return (int)constants$2686.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void PathLength$set(MemorySegment seg, long index, int x) {
        constants$2686.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



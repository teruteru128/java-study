// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _NT_TIB64 {
 *     DWORD64 ExceptionList;
 *     DWORD64 StackBase;
 *     DWORD64 StackLimit;
 *     DWORD64 SubSystemTib;
 *     union {
 *         DWORD64 FiberData;
 *         DWORD Version;
 *     };
 *     DWORD64 ArbitraryUserPointer;
 *     DWORD64 Self;
 * };
 * }
 */
public class _NT_TIB64 {

    public static MemoryLayout $LAYOUT() {
        return constants$187.const$0;
    }
    public static VarHandle ExceptionList$VH() {
        return constants$187.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 ExceptionList;
     * }
     */
    public static long ExceptionList$get(MemorySegment seg) {
        return (long)constants$187.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 ExceptionList;
     * }
     */
    public static void ExceptionList$set(MemorySegment seg, long x) {
        constants$187.const$1.set(seg, x);
    }
    public static long ExceptionList$get(MemorySegment seg, long index) {
        return (long)constants$187.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void ExceptionList$set(MemorySegment seg, long index, long x) {
        constants$187.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle StackBase$VH() {
        return constants$187.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 StackBase;
     * }
     */
    public static long StackBase$get(MemorySegment seg) {
        return (long)constants$187.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 StackBase;
     * }
     */
    public static void StackBase$set(MemorySegment seg, long x) {
        constants$187.const$2.set(seg, x);
    }
    public static long StackBase$get(MemorySegment seg, long index) {
        return (long)constants$187.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void StackBase$set(MemorySegment seg, long index, long x) {
        constants$187.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle StackLimit$VH() {
        return constants$187.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 StackLimit;
     * }
     */
    public static long StackLimit$get(MemorySegment seg) {
        return (long)constants$187.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 StackLimit;
     * }
     */
    public static void StackLimit$set(MemorySegment seg, long x) {
        constants$187.const$3.set(seg, x);
    }
    public static long StackLimit$get(MemorySegment seg, long index) {
        return (long)constants$187.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void StackLimit$set(MemorySegment seg, long index, long x) {
        constants$187.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle SubSystemTib$VH() {
        return constants$187.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 SubSystemTib;
     * }
     */
    public static long SubSystemTib$get(MemorySegment seg) {
        return (long)constants$187.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 SubSystemTib;
     * }
     */
    public static void SubSystemTib$set(MemorySegment seg, long x) {
        constants$187.const$4.set(seg, x);
    }
    public static long SubSystemTib$get(MemorySegment seg, long index) {
        return (long)constants$187.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void SubSystemTib$set(MemorySegment seg, long index, long x) {
        constants$187.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle FiberData$VH() {
        return constants$187.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 FiberData;
     * }
     */
    public static long FiberData$get(MemorySegment seg) {
        return (long)constants$187.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 FiberData;
     * }
     */
    public static void FiberData$set(MemorySegment seg, long x) {
        constants$187.const$5.set(seg, x);
    }
    public static long FiberData$get(MemorySegment seg, long index) {
        return (long)constants$187.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void FiberData$set(MemorySegment seg, long index, long x) {
        constants$187.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Version$VH() {
        return constants$188.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Version;
     * }
     */
    public static int Version$get(MemorySegment seg) {
        return (int)constants$188.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Version;
     * }
     */
    public static void Version$set(MemorySegment seg, int x) {
        constants$188.const$0.set(seg, x);
    }
    public static int Version$get(MemorySegment seg, long index) {
        return (int)constants$188.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, int x) {
        constants$188.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ArbitraryUserPointer$VH() {
        return constants$188.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 ArbitraryUserPointer;
     * }
     */
    public static long ArbitraryUserPointer$get(MemorySegment seg) {
        return (long)constants$188.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 ArbitraryUserPointer;
     * }
     */
    public static void ArbitraryUserPointer$set(MemorySegment seg, long x) {
        constants$188.const$1.set(seg, x);
    }
    public static long ArbitraryUserPointer$get(MemorySegment seg, long index) {
        return (long)constants$188.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void ArbitraryUserPointer$set(MemorySegment seg, long index, long x) {
        constants$188.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Self$VH() {
        return constants$188.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 Self;
     * }
     */
    public static long Self$get(MemorySegment seg) {
        return (long)constants$188.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 Self;
     * }
     */
    public static void Self$set(MemorySegment seg, long x) {
        constants$188.const$2.set(seg, x);
    }
    public static long Self$get(MemorySegment seg, long index) {
        return (long)constants$188.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void Self$set(MemorySegment seg, long index, long x) {
        constants$188.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



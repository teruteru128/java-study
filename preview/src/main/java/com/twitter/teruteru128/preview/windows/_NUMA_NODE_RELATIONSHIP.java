// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _NUMA_NODE_RELATIONSHIP {
 *     DWORD NodeNumber;
 *     BYTE Reserved[18];
 *     WORD GroupCount;
 *     union {
 *         GROUP_AFFINITY GroupMask;
 *         GROUP_AFFINITY GroupMasks[1];
 *     };
 * };
 * }
 */
public class _NUMA_NODE_RELATIONSHIP {

    public static MemoryLayout $LAYOUT() {
        return constants$231.const$4;
    }
    public static VarHandle NodeNumber$VH() {
        return constants$231.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD NodeNumber;
     * }
     */
    public static int NodeNumber$get(MemorySegment seg) {
        return (int)constants$231.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD NodeNumber;
     * }
     */
    public static void NodeNumber$set(MemorySegment seg, int x) {
        constants$231.const$5.set(seg, x);
    }
    public static int NodeNumber$get(MemorySegment seg, long index) {
        return (int)constants$231.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void NodeNumber$set(MemorySegment seg, long index, int x) {
        constants$231.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Reserved$slice(MemorySegment seg) {
        return seg.asSlice(4, 18);
    }
    public static VarHandle GroupCount$VH() {
        return constants$232.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD GroupCount;
     * }
     */
    public static short GroupCount$get(MemorySegment seg) {
        return (short)constants$232.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD GroupCount;
     * }
     */
    public static void GroupCount$set(MemorySegment seg, short x) {
        constants$232.const$0.set(seg, x);
    }
    public static short GroupCount$get(MemorySegment seg, long index) {
        return (short)constants$232.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void GroupCount$set(MemorySegment seg, long index, short x) {
        constants$232.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment GroupMask$slice(MemorySegment seg) {
        return seg.asSlice(24, 16);
    }
    public static MemorySegment GroupMasks$slice(MemorySegment seg) {
        return seg.asSlice(24, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



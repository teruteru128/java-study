// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _SCRUB_PARITY_EXTENT_DATA {
 *     WORD Size;
 *     WORD Flags;
 *     WORD NumberOfParityExtents;
 *     WORD MaximumNumberOfParityExtents;
 *     SCRUB_PARITY_EXTENT ParityExtents[1];
 * };
 * }
 */
public class _SCRUB_PARITY_EXTENT_DATA {

    public static MemoryLayout $LAYOUT() {
        return constants$257.const$2;
    }
    public static VarHandle Size$VH() {
        return constants$257.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD Size;
     * }
     */
    public static short Size$get(MemorySegment seg) {
        return (short)constants$257.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD Size;
     * }
     */
    public static void Size$set(MemorySegment seg, short x) {
        constants$257.const$3.set(seg, x);
    }
    public static short Size$get(MemorySegment seg, long index) {
        return (short)constants$257.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void Size$set(MemorySegment seg, long index, short x) {
        constants$257.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Flags$VH() {
        return constants$257.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD Flags;
     * }
     */
    public static short Flags$get(MemorySegment seg) {
        return (short)constants$257.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD Flags;
     * }
     */
    public static void Flags$set(MemorySegment seg, short x) {
        constants$257.const$4.set(seg, x);
    }
    public static short Flags$get(MemorySegment seg, long index) {
        return (short)constants$257.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, short x) {
        constants$257.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle NumberOfParityExtents$VH() {
        return constants$257.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD NumberOfParityExtents;
     * }
     */
    public static short NumberOfParityExtents$get(MemorySegment seg) {
        return (short)constants$257.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD NumberOfParityExtents;
     * }
     */
    public static void NumberOfParityExtents$set(MemorySegment seg, short x) {
        constants$257.const$5.set(seg, x);
    }
    public static short NumberOfParityExtents$get(MemorySegment seg, long index) {
        return (short)constants$257.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void NumberOfParityExtents$set(MemorySegment seg, long index, short x) {
        constants$257.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MaximumNumberOfParityExtents$VH() {
        return constants$258.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD MaximumNumberOfParityExtents;
     * }
     */
    public static short MaximumNumberOfParityExtents$get(MemorySegment seg) {
        return (short)constants$258.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD MaximumNumberOfParityExtents;
     * }
     */
    public static void MaximumNumberOfParityExtents$set(MemorySegment seg, short x) {
        constants$258.const$0.set(seg, x);
    }
    public static short MaximumNumberOfParityExtents$get(MemorySegment seg, long index) {
        return (short)constants$258.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void MaximumNumberOfParityExtents$set(MemorySegment seg, long index, short x) {
        constants$258.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment ParityExtents$slice(MemorySegment seg) {
        return seg.asSlice(8, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



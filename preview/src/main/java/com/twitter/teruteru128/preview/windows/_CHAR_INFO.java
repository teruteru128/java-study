// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _CHAR_INFO {
 *     union  Char;
 *     WORD Attributes;
 * };
 * }
 */
public class _CHAR_INFO {

    public static MemoryLayout $LAYOUT() {
        return constants$1452.const$3;
    }
    /**
     * {@snippet :
     * union {
     *     WCHAR UnicodeChar;
     *     CHAR AsciiChar;
     * };
     * }
     */
    public static final class Char {

        // Suppresses default constructor, ensuring non-instantiability.
        private Char() {}
        public static MemoryLayout $LAYOUT() {
            return constants$1449.const$5;
        }
        public static VarHandle UnicodeChar$VH() {
            return constants$1452.const$4;
        }
        /**
         * Getter for field:
         * {@snippet :
         * WCHAR UnicodeChar;
         * }
         */
        public static short UnicodeChar$get(MemorySegment seg) {
            return (short)constants$1452.const$4.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * WCHAR UnicodeChar;
         * }
         */
        public static void UnicodeChar$set(MemorySegment seg, short x) {
            constants$1452.const$4.set(seg, x);
        }
        public static short UnicodeChar$get(MemorySegment seg, long index) {
            return (short)constants$1452.const$4.get(seg.asSlice(index*sizeof()));
        }
        public static void UnicodeChar$set(MemorySegment seg, long index, short x) {
            constants$1452.const$4.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AsciiChar$VH() {
            return constants$1452.const$5;
        }
        /**
         * Getter for field:
         * {@snippet :
         * CHAR AsciiChar;
         * }
         */
        public static byte AsciiChar$get(MemorySegment seg) {
            return (byte)constants$1452.const$5.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * CHAR AsciiChar;
         * }
         */
        public static void AsciiChar$set(MemorySegment seg, byte x) {
            constants$1452.const$5.set(seg, x);
        }
        public static byte AsciiChar$get(MemorySegment seg, long index) {
            return (byte)constants$1452.const$5.get(seg.asSlice(index*sizeof()));
        }
        public static void AsciiChar$set(MemorySegment seg, long index, byte x) {
            constants$1452.const$5.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment Char$slice(MemorySegment seg) {
        return seg.asSlice(0, 2);
    }
    public static VarHandle Attributes$VH() {
        return constants$1453.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD Attributes;
     * }
     */
    public static short Attributes$get(MemorySegment seg) {
        return (short)constants$1453.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD Attributes;
     * }
     */
    public static void Attributes$set(MemorySegment seg, short x) {
        constants$1453.const$0.set(seg, x);
    }
    public static short Attributes$get(MemorySegment seg, long index) {
        return (short)constants$1453.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Attributes$set(MemorySegment seg, long index, short x) {
        constants$1453.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



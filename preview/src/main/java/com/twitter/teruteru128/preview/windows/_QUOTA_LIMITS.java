// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _QUOTA_LIMITS {
 *     SIZE_T PagedPoolLimit;
 *     SIZE_T NonPagedPoolLimit;
 *     SIZE_T MinimumWorkingSetSize;
 *     SIZE_T MaximumWorkingSetSize;
 *     SIZE_T PagefileLimit;
 *     LARGE_INTEGER TimeLimit;
 * };
 * }
 */
public class _QUOTA_LIMITS {

    public static MemoryLayout $LAYOUT() {
        return constants$192.const$2;
    }
    public static VarHandle PagedPoolLimit$VH() {
        return constants$192.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * SIZE_T PagedPoolLimit;
     * }
     */
    public static long PagedPoolLimit$get(MemorySegment seg) {
        return (long)constants$192.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * SIZE_T PagedPoolLimit;
     * }
     */
    public static void PagedPoolLimit$set(MemorySegment seg, long x) {
        constants$192.const$3.set(seg, x);
    }
    public static long PagedPoolLimit$get(MemorySegment seg, long index) {
        return (long)constants$192.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void PagedPoolLimit$set(MemorySegment seg, long index, long x) {
        constants$192.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle NonPagedPoolLimit$VH() {
        return constants$192.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * SIZE_T NonPagedPoolLimit;
     * }
     */
    public static long NonPagedPoolLimit$get(MemorySegment seg) {
        return (long)constants$192.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * SIZE_T NonPagedPoolLimit;
     * }
     */
    public static void NonPagedPoolLimit$set(MemorySegment seg, long x) {
        constants$192.const$4.set(seg, x);
    }
    public static long NonPagedPoolLimit$get(MemorySegment seg, long index) {
        return (long)constants$192.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void NonPagedPoolLimit$set(MemorySegment seg, long index, long x) {
        constants$192.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MinimumWorkingSetSize$VH() {
        return constants$192.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * SIZE_T MinimumWorkingSetSize;
     * }
     */
    public static long MinimumWorkingSetSize$get(MemorySegment seg) {
        return (long)constants$192.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * SIZE_T MinimumWorkingSetSize;
     * }
     */
    public static void MinimumWorkingSetSize$set(MemorySegment seg, long x) {
        constants$192.const$5.set(seg, x);
    }
    public static long MinimumWorkingSetSize$get(MemorySegment seg, long index) {
        return (long)constants$192.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void MinimumWorkingSetSize$set(MemorySegment seg, long index, long x) {
        constants$192.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MaximumWorkingSetSize$VH() {
        return constants$193.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * SIZE_T MaximumWorkingSetSize;
     * }
     */
    public static long MaximumWorkingSetSize$get(MemorySegment seg) {
        return (long)constants$193.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * SIZE_T MaximumWorkingSetSize;
     * }
     */
    public static void MaximumWorkingSetSize$set(MemorySegment seg, long x) {
        constants$193.const$0.set(seg, x);
    }
    public static long MaximumWorkingSetSize$get(MemorySegment seg, long index) {
        return (long)constants$193.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void MaximumWorkingSetSize$set(MemorySegment seg, long index, long x) {
        constants$193.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle PagefileLimit$VH() {
        return constants$193.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * SIZE_T PagefileLimit;
     * }
     */
    public static long PagefileLimit$get(MemorySegment seg) {
        return (long)constants$193.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * SIZE_T PagefileLimit;
     * }
     */
    public static void PagefileLimit$set(MemorySegment seg, long x) {
        constants$193.const$1.set(seg, x);
    }
    public static long PagefileLimit$get(MemorySegment seg, long index) {
        return (long)constants$193.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void PagefileLimit$set(MemorySegment seg, long index, long x) {
        constants$193.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment TimeLimit$slice(MemorySegment seg) {
        return seg.asSlice(40, 8);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



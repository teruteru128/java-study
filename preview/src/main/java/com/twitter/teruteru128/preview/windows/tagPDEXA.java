// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tagPDEXA {
 *     DWORD lStructSize;
 *     HWND hwndOwner;
 *     HGLOBAL hDevMode;
 *     HGLOBAL hDevNames;
 *     HDC hDC;
 *     DWORD Flags;
 *     DWORD Flags2;
 *     DWORD ExclusionFlags;
 *     DWORD nPageRanges;
 *     DWORD nMaxPageRanges;
 *     LPPRINTPAGERANGE lpPageRanges;
 *     DWORD nMinPage;
 *     DWORD nMaxPage;
 *     DWORD nCopies;
 *     HINSTANCE hInstance;
 *     LPCSTR lpPrintTemplateName;
 *     LPUNKNOWN lpCallback;
 *     DWORD nPropertyPages;
 *     HPROPSHEETPAGE* lphPropertyPages;
 *     DWORD nStartPage;
 *     DWORD dwResultAction;
 * };
 * }
 */
public class tagPDEXA {

    public static MemoryLayout $LAYOUT() {
        return constants$4461.const$1;
    }
    public static VarHandle lStructSize$VH() {
        return constants$4461.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD lStructSize;
     * }
     */
    public static int lStructSize$get(MemorySegment seg) {
        return (int)constants$4461.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD lStructSize;
     * }
     */
    public static void lStructSize$set(MemorySegment seg, int x) {
        constants$4461.const$2.set(seg, x);
    }
    public static int lStructSize$get(MemorySegment seg, long index) {
        return (int)constants$4461.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void lStructSize$set(MemorySegment seg, long index, int x) {
        constants$4461.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hwndOwner$VH() {
        return constants$4461.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HWND hwndOwner;
     * }
     */
    public static MemorySegment hwndOwner$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4461.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HWND hwndOwner;
     * }
     */
    public static void hwndOwner$set(MemorySegment seg, MemorySegment x) {
        constants$4461.const$3.set(seg, x);
    }
    public static MemorySegment hwndOwner$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4461.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void hwndOwner$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4461.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hDevMode$VH() {
        return constants$4461.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HGLOBAL hDevMode;
     * }
     */
    public static MemorySegment hDevMode$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4461.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HGLOBAL hDevMode;
     * }
     */
    public static void hDevMode$set(MemorySegment seg, MemorySegment x) {
        constants$4461.const$4.set(seg, x);
    }
    public static MemorySegment hDevMode$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4461.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void hDevMode$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4461.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hDevNames$VH() {
        return constants$4461.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HGLOBAL hDevNames;
     * }
     */
    public static MemorySegment hDevNames$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4461.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HGLOBAL hDevNames;
     * }
     */
    public static void hDevNames$set(MemorySegment seg, MemorySegment x) {
        constants$4461.const$5.set(seg, x);
    }
    public static MemorySegment hDevNames$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4461.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void hDevNames$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4461.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hDC$VH() {
        return constants$4462.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HDC hDC;
     * }
     */
    public static MemorySegment hDC$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4462.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HDC hDC;
     * }
     */
    public static void hDC$set(MemorySegment seg, MemorySegment x) {
        constants$4462.const$0.set(seg, x);
    }
    public static MemorySegment hDC$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4462.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void hDC$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4462.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Flags$VH() {
        return constants$4462.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Flags;
     * }
     */
    public static int Flags$get(MemorySegment seg) {
        return (int)constants$4462.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Flags;
     * }
     */
    public static void Flags$set(MemorySegment seg, int x) {
        constants$4462.const$1.set(seg, x);
    }
    public static int Flags$get(MemorySegment seg, long index) {
        return (int)constants$4462.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, int x) {
        constants$4462.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Flags2$VH() {
        return constants$4462.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Flags2;
     * }
     */
    public static int Flags2$get(MemorySegment seg) {
        return (int)constants$4462.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Flags2;
     * }
     */
    public static void Flags2$set(MemorySegment seg, int x) {
        constants$4462.const$2.set(seg, x);
    }
    public static int Flags2$get(MemorySegment seg, long index) {
        return (int)constants$4462.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags2$set(MemorySegment seg, long index, int x) {
        constants$4462.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ExclusionFlags$VH() {
        return constants$4462.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD ExclusionFlags;
     * }
     */
    public static int ExclusionFlags$get(MemorySegment seg) {
        return (int)constants$4462.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD ExclusionFlags;
     * }
     */
    public static void ExclusionFlags$set(MemorySegment seg, int x) {
        constants$4462.const$3.set(seg, x);
    }
    public static int ExclusionFlags$get(MemorySegment seg, long index) {
        return (int)constants$4462.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void ExclusionFlags$set(MemorySegment seg, long index, int x) {
        constants$4462.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nPageRanges$VH() {
        return constants$4462.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD nPageRanges;
     * }
     */
    public static int nPageRanges$get(MemorySegment seg) {
        return (int)constants$4462.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD nPageRanges;
     * }
     */
    public static void nPageRanges$set(MemorySegment seg, int x) {
        constants$4462.const$4.set(seg, x);
    }
    public static int nPageRanges$get(MemorySegment seg, long index) {
        return (int)constants$4462.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void nPageRanges$set(MemorySegment seg, long index, int x) {
        constants$4462.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nMaxPageRanges$VH() {
        return constants$4462.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD nMaxPageRanges;
     * }
     */
    public static int nMaxPageRanges$get(MemorySegment seg) {
        return (int)constants$4462.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD nMaxPageRanges;
     * }
     */
    public static void nMaxPageRanges$set(MemorySegment seg, int x) {
        constants$4462.const$5.set(seg, x);
    }
    public static int nMaxPageRanges$get(MemorySegment seg, long index) {
        return (int)constants$4462.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void nMaxPageRanges$set(MemorySegment seg, long index, int x) {
        constants$4462.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lpPageRanges$VH() {
        return constants$4463.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPPRINTPAGERANGE lpPageRanges;
     * }
     */
    public static MemorySegment lpPageRanges$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4463.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPPRINTPAGERANGE lpPageRanges;
     * }
     */
    public static void lpPageRanges$set(MemorySegment seg, MemorySegment x) {
        constants$4463.const$0.set(seg, x);
    }
    public static MemorySegment lpPageRanges$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4463.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void lpPageRanges$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4463.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nMinPage$VH() {
        return constants$4463.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD nMinPage;
     * }
     */
    public static int nMinPage$get(MemorySegment seg) {
        return (int)constants$4463.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD nMinPage;
     * }
     */
    public static void nMinPage$set(MemorySegment seg, int x) {
        constants$4463.const$1.set(seg, x);
    }
    public static int nMinPage$get(MemorySegment seg, long index) {
        return (int)constants$4463.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void nMinPage$set(MemorySegment seg, long index, int x) {
        constants$4463.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nMaxPage$VH() {
        return constants$4463.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD nMaxPage;
     * }
     */
    public static int nMaxPage$get(MemorySegment seg) {
        return (int)constants$4463.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD nMaxPage;
     * }
     */
    public static void nMaxPage$set(MemorySegment seg, int x) {
        constants$4463.const$2.set(seg, x);
    }
    public static int nMaxPage$get(MemorySegment seg, long index) {
        return (int)constants$4463.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void nMaxPage$set(MemorySegment seg, long index, int x) {
        constants$4463.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nCopies$VH() {
        return constants$4463.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD nCopies;
     * }
     */
    public static int nCopies$get(MemorySegment seg) {
        return (int)constants$4463.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD nCopies;
     * }
     */
    public static void nCopies$set(MemorySegment seg, int x) {
        constants$4463.const$3.set(seg, x);
    }
    public static int nCopies$get(MemorySegment seg, long index) {
        return (int)constants$4463.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void nCopies$set(MemorySegment seg, long index, int x) {
        constants$4463.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hInstance$VH() {
        return constants$4463.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HINSTANCE hInstance;
     * }
     */
    public static MemorySegment hInstance$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4463.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HINSTANCE hInstance;
     * }
     */
    public static void hInstance$set(MemorySegment seg, MemorySegment x) {
        constants$4463.const$4.set(seg, x);
    }
    public static MemorySegment hInstance$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4463.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void hInstance$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4463.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lpPrintTemplateName$VH() {
        return constants$4463.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPCSTR lpPrintTemplateName;
     * }
     */
    public static MemorySegment lpPrintTemplateName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4463.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPCSTR lpPrintTemplateName;
     * }
     */
    public static void lpPrintTemplateName$set(MemorySegment seg, MemorySegment x) {
        constants$4463.const$5.set(seg, x);
    }
    public static MemorySegment lpPrintTemplateName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4463.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void lpPrintTemplateName$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4463.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lpCallback$VH() {
        return constants$4464.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPUNKNOWN lpCallback;
     * }
     */
    public static MemorySegment lpCallback$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4464.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPUNKNOWN lpCallback;
     * }
     */
    public static void lpCallback$set(MemorySegment seg, MemorySegment x) {
        constants$4464.const$0.set(seg, x);
    }
    public static MemorySegment lpCallback$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4464.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void lpCallback$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4464.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nPropertyPages$VH() {
        return constants$4464.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD nPropertyPages;
     * }
     */
    public static int nPropertyPages$get(MemorySegment seg) {
        return (int)constants$4464.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD nPropertyPages;
     * }
     */
    public static void nPropertyPages$set(MemorySegment seg, int x) {
        constants$4464.const$1.set(seg, x);
    }
    public static int nPropertyPages$get(MemorySegment seg, long index) {
        return (int)constants$4464.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void nPropertyPages$set(MemorySegment seg, long index, int x) {
        constants$4464.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lphPropertyPages$VH() {
        return constants$4464.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HPROPSHEETPAGE* lphPropertyPages;
     * }
     */
    public static MemorySegment lphPropertyPages$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4464.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HPROPSHEETPAGE* lphPropertyPages;
     * }
     */
    public static void lphPropertyPages$set(MemorySegment seg, MemorySegment x) {
        constants$4464.const$2.set(seg, x);
    }
    public static MemorySegment lphPropertyPages$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4464.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void lphPropertyPages$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4464.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nStartPage$VH() {
        return constants$4464.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD nStartPage;
     * }
     */
    public static int nStartPage$get(MemorySegment seg) {
        return (int)constants$4464.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD nStartPage;
     * }
     */
    public static void nStartPage$set(MemorySegment seg, int x) {
        constants$4464.const$3.set(seg, x);
    }
    public static int nStartPage$get(MemorySegment seg, long index) {
        return (int)constants$4464.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void nStartPage$set(MemorySegment seg, long index, int x) {
        constants$4464.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwResultAction$VH() {
        return constants$4464.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwResultAction;
     * }
     */
    public static int dwResultAction$get(MemorySegment seg) {
        return (int)constants$4464.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwResultAction;
     * }
     */
    public static void dwResultAction$set(MemorySegment seg, int x) {
        constants$4464.const$4.set(seg, x);
    }
    public static int dwResultAction$get(MemorySegment seg, long index) {
        return (int)constants$4464.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void dwResultAction$set(MemorySegment seg, long index, int x) {
        constants$4464.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



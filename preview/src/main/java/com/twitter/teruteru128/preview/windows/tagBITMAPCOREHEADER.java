// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tagBITMAPCOREHEADER {
 *     DWORD bcSize;
 *     WORD bcWidth;
 *     WORD bcHeight;
 *     WORD bcPlanes;
 *     WORD bcBitCount;
 * };
 * }
 */
public class tagBITMAPCOREHEADER {

    public static MemoryLayout $LAYOUT() {
        return constants$894.const$5;
    }
    public static VarHandle bcSize$VH() {
        return constants$895.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD bcSize;
     * }
     */
    public static int bcSize$get(MemorySegment seg) {
        return (int)constants$895.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD bcSize;
     * }
     */
    public static void bcSize$set(MemorySegment seg, int x) {
        constants$895.const$0.set(seg, x);
    }
    public static int bcSize$get(MemorySegment seg, long index) {
        return (int)constants$895.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void bcSize$set(MemorySegment seg, long index, int x) {
        constants$895.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bcWidth$VH() {
        return constants$895.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD bcWidth;
     * }
     */
    public static short bcWidth$get(MemorySegment seg) {
        return (short)constants$895.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD bcWidth;
     * }
     */
    public static void bcWidth$set(MemorySegment seg, short x) {
        constants$895.const$1.set(seg, x);
    }
    public static short bcWidth$get(MemorySegment seg, long index) {
        return (short)constants$895.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void bcWidth$set(MemorySegment seg, long index, short x) {
        constants$895.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bcHeight$VH() {
        return constants$895.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD bcHeight;
     * }
     */
    public static short bcHeight$get(MemorySegment seg) {
        return (short)constants$895.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD bcHeight;
     * }
     */
    public static void bcHeight$set(MemorySegment seg, short x) {
        constants$895.const$2.set(seg, x);
    }
    public static short bcHeight$get(MemorySegment seg, long index) {
        return (short)constants$895.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void bcHeight$set(MemorySegment seg, long index, short x) {
        constants$895.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bcPlanes$VH() {
        return constants$895.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD bcPlanes;
     * }
     */
    public static short bcPlanes$get(MemorySegment seg) {
        return (short)constants$895.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD bcPlanes;
     * }
     */
    public static void bcPlanes$set(MemorySegment seg, short x) {
        constants$895.const$3.set(seg, x);
    }
    public static short bcPlanes$get(MemorySegment seg, long index) {
        return (short)constants$895.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void bcPlanes$set(MemorySegment seg, long index, short x) {
        constants$895.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bcBitCount$VH() {
        return constants$895.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD bcBitCount;
     * }
     */
    public static short bcBitCount$get(MemorySegment seg) {
        return (short)constants$895.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD bcBitCount;
     * }
     */
    public static void bcBitCount$set(MemorySegment seg, short x) {
        constants$895.const$4.set(seg, x);
    }
    public static short bcBitCount$get(MemorySegment seg, long index) {
        return (short)constants$895.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void bcBitCount$set(MemorySegment seg, long index, short x) {
        constants$895.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



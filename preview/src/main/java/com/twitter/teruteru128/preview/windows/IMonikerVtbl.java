// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IMonikerVtbl {
 *     HRESULT (*QueryInterface)(IMoniker*,const IID*,void**);
 *     ULONG (*AddRef)(IMoniker*);
 *     ULONG (*Release)(IMoniker*);
 *     HRESULT (*GetClassID)(IMoniker*,CLSID*);
 *     HRESULT (*IsDirty)(IMoniker*);
 *     HRESULT (*Load)(IMoniker*,IStream*);
 *     HRESULT (*Save)(IMoniker*,IStream*,BOOL);
 *     HRESULT (*GetSizeMax)(IMoniker*,ULARGE_INTEGER*);
 *     HRESULT (*BindToObject)(IMoniker*,IBindCtx*,IMoniker*,const IID*,void**);
 *     HRESULT (*BindToStorage)(IMoniker*,IBindCtx*,IMoniker*,const IID*,void**);
 *     HRESULT (*Reduce)(IMoniker*,IBindCtx*,DWORD,IMoniker**,IMoniker**);
 *     HRESULT (*ComposeWith)(IMoniker*,IMoniker*,BOOL,IMoniker**);
 *     HRESULT (*Enum)(IMoniker*,BOOL,IEnumMoniker**);
 *     HRESULT (*IsEqual)(IMoniker*,IMoniker*);
 *     HRESULT (*Hash)(IMoniker*,DWORD*);
 *     HRESULT (*IsRunning)(IMoniker*,IBindCtx*,IMoniker*,IMoniker*);
 *     HRESULT (*GetTimeOfLastChange)(IMoniker*,IBindCtx*,IMoniker*,FILETIME*);
 *     HRESULT (*Inverse)(IMoniker*,IMoniker**);
 *     HRESULT (*CommonPrefixWith)(IMoniker*,IMoniker*,IMoniker**);
 *     HRESULT (*RelativePathTo)(IMoniker*,IMoniker*,IMoniker**);
 *     HRESULT (*GetDisplayName)(IMoniker*,IBindCtx*,IMoniker*,LPOLESTR*);
 *     HRESULT (*ParseDisplayName)(IMoniker*,IBindCtx*,IMoniker*,LPOLESTR,ULONG*,IMoniker**);
 *     HRESULT (*IsSystemMoniker)(IMoniker*,DWORD*);
 * };
 * }
 */
public class IMonikerVtbl {

    public static MemoryLayout $LAYOUT() {
        return constants$3249.const$3;
    }
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IMoniker*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3249.const$4, fi, constants$37.const$3, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle QueryInterface$VH() {
        return constants$3249.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IMoniker*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3249.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IMoniker*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        constants$3249.const$5.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3249.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3249.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, Arena scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*AddRef)(IMoniker*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3250.const$0, fi, constants$18.const$5, scope);
        }
        static AddRef ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle AddRef$VH() {
        return constants$3250.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IMoniker*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3250.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IMoniker*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        constants$3250.const$1.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3250.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3250.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, Arena scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*Release)(IMoniker*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3250.const$2, fi, constants$18.const$5, scope);
        }
        static Release ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Release$VH() {
        return constants$3250.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IMoniker*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3250.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IMoniker*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        constants$3250.const$3.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3250.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3250.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, Arena scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetClassID)(IMoniker*,CLSID*);
     * }
     */
    public interface GetClassID {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetClassID fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3250.const$4, fi, constants$34.const$0, scope);
        }
        static GetClassID ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetClassID$VH() {
        return constants$3250.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetClassID)(IMoniker*,CLSID*);
     * }
     */
    public static MemorySegment GetClassID$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3250.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetClassID)(IMoniker*,CLSID*);
     * }
     */
    public static void GetClassID$set(MemorySegment seg, MemorySegment x) {
        constants$3250.const$5.set(seg, x);
    }
    public static MemorySegment GetClassID$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3250.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GetClassID$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3250.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetClassID GetClassID(MemorySegment segment, Arena scope) {
        return GetClassID.ofAddress(GetClassID$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*IsDirty)(IMoniker*);
     * }
     */
    public interface IsDirty {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(IsDirty fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3251.const$0, fi, constants$18.const$5, scope);
        }
        static IsDirty ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle IsDirty$VH() {
        return constants$3251.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*IsDirty)(IMoniker*);
     * }
     */
    public static MemorySegment IsDirty$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3251.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*IsDirty)(IMoniker*);
     * }
     */
    public static void IsDirty$set(MemorySegment seg, MemorySegment x) {
        constants$3251.const$1.set(seg, x);
    }
    public static MemorySegment IsDirty$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3251.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void IsDirty$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3251.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static IsDirty IsDirty(MemorySegment segment, Arena scope) {
        return IsDirty.ofAddress(IsDirty$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*Load)(IMoniker*,IStream*);
     * }
     */
    public interface Load {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(Load fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3251.const$2, fi, constants$34.const$0, scope);
        }
        static Load ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Load$VH() {
        return constants$3251.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Load)(IMoniker*,IStream*);
     * }
     */
    public static MemorySegment Load$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3251.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Load)(IMoniker*,IStream*);
     * }
     */
    public static void Load$set(MemorySegment seg, MemorySegment x) {
        constants$3251.const$3.set(seg, x);
    }
    public static MemorySegment Load$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3251.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void Load$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3251.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static Load Load(MemorySegment segment, Arena scope) {
        return Load.ofAddress(Load$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*Save)(IMoniker*,IStream*,BOOL);
     * }
     */
    public interface Save {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2);
        static MemorySegment allocate(Save fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3251.const$4, fi, constants$570.const$5, scope);
        }
        static Save ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2) -> {
                try {
                    return (int)constants$779.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Save$VH() {
        return constants$3251.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Save)(IMoniker*,IStream*,BOOL);
     * }
     */
    public static MemorySegment Save$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3251.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Save)(IMoniker*,IStream*,BOOL);
     * }
     */
    public static void Save$set(MemorySegment seg, MemorySegment x) {
        constants$3251.const$5.set(seg, x);
    }
    public static MemorySegment Save$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3251.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void Save$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3251.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static Save Save(MemorySegment segment, Arena scope) {
        return Save.ofAddress(Save$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetSizeMax)(IMoniker*,ULARGE_INTEGER*);
     * }
     */
    public interface GetSizeMax {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetSizeMax fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3252.const$0, fi, constants$34.const$0, scope);
        }
        static GetSizeMax ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetSizeMax$VH() {
        return constants$3252.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetSizeMax)(IMoniker*,ULARGE_INTEGER*);
     * }
     */
    public static MemorySegment GetSizeMax$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3252.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetSizeMax)(IMoniker*,ULARGE_INTEGER*);
     * }
     */
    public static void GetSizeMax$set(MemorySegment seg, MemorySegment x) {
        constants$3252.const$1.set(seg, x);
    }
    public static MemorySegment GetSizeMax$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3252.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void GetSizeMax$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3252.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetSizeMax GetSizeMax(MemorySegment segment, Arena scope) {
        return GetSizeMax.ofAddress(GetSizeMax$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*BindToObject)(IMoniker*,IBindCtx*,IMoniker*,const IID*,void**);
     * }
     */
    public interface BindToObject {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(BindToObject fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3252.const$2, fi, constants$577.const$5, scope);
        }
        static BindToObject ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)constants$1781.const$5.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle BindToObject$VH() {
        return constants$3252.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*BindToObject)(IMoniker*,IBindCtx*,IMoniker*,const IID*,void**);
     * }
     */
    public static MemorySegment BindToObject$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3252.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*BindToObject)(IMoniker*,IBindCtx*,IMoniker*,const IID*,void**);
     * }
     */
    public static void BindToObject$set(MemorySegment seg, MemorySegment x) {
        constants$3252.const$3.set(seg, x);
    }
    public static MemorySegment BindToObject$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3252.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void BindToObject$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3252.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static BindToObject BindToObject(MemorySegment segment, Arena scope) {
        return BindToObject.ofAddress(BindToObject$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*BindToStorage)(IMoniker*,IBindCtx*,IMoniker*,const IID*,void**);
     * }
     */
    public interface BindToStorage {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(BindToStorage fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3252.const$4, fi, constants$577.const$5, scope);
        }
        static BindToStorage ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)constants$1781.const$5.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle BindToStorage$VH() {
        return constants$3252.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*BindToStorage)(IMoniker*,IBindCtx*,IMoniker*,const IID*,void**);
     * }
     */
    public static MemorySegment BindToStorage$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3252.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*BindToStorage)(IMoniker*,IBindCtx*,IMoniker*,const IID*,void**);
     * }
     */
    public static void BindToStorage$set(MemorySegment seg, MemorySegment x) {
        constants$3252.const$5.set(seg, x);
    }
    public static MemorySegment BindToStorage$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3252.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void BindToStorage$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3252.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static BindToStorage BindToStorage(MemorySegment segment, Arena scope) {
        return BindToStorage.ofAddress(BindToStorage$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*Reduce)(IMoniker*,IBindCtx*,DWORD,IMoniker**,IMoniker**);
     * }
     */
    public interface Reduce {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(Reduce fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3253.const$0, fi, constants$588.const$3, scope);
        }
        static Reduce ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)constants$1005.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Reduce$VH() {
        return constants$3253.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Reduce)(IMoniker*,IBindCtx*,DWORD,IMoniker**,IMoniker**);
     * }
     */
    public static MemorySegment Reduce$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3253.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Reduce)(IMoniker*,IBindCtx*,DWORD,IMoniker**,IMoniker**);
     * }
     */
    public static void Reduce$set(MemorySegment seg, MemorySegment x) {
        constants$3253.const$1.set(seg, x);
    }
    public static MemorySegment Reduce$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3253.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void Reduce$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3253.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static Reduce Reduce(MemorySegment segment, Arena scope) {
        return Reduce.ofAddress(Reduce$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*ComposeWith)(IMoniker*,IMoniker*,BOOL,IMoniker**);
     * }
     */
    public interface ComposeWith {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(ComposeWith fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3253.const$2, fi, constants$586.const$5, scope);
        }
        static ComposeWith ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)constants$2117.const$1.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle ComposeWith$VH() {
        return constants$3253.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*ComposeWith)(IMoniker*,IMoniker*,BOOL,IMoniker**);
     * }
     */
    public static MemorySegment ComposeWith$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3253.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*ComposeWith)(IMoniker*,IMoniker*,BOOL,IMoniker**);
     * }
     */
    public static void ComposeWith$set(MemorySegment seg, MemorySegment x) {
        constants$3253.const$3.set(seg, x);
    }
    public static MemorySegment ComposeWith$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3253.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void ComposeWith$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3253.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static ComposeWith ComposeWith(MemorySegment segment, Arena scope) {
        return ComposeWith.ofAddress(ComposeWith$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*Enum)(IMoniker*,BOOL,IEnumMoniker**);
     * }
     */
    public interface Enum {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(Enum fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3253.const$4, fi, constants$485.const$5, scope);
        }
        static Enum ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$1770.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Enum$VH() {
        return constants$3253.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Enum)(IMoniker*,BOOL,IEnumMoniker**);
     * }
     */
    public static MemorySegment Enum$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3253.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Enum)(IMoniker*,BOOL,IEnumMoniker**);
     * }
     */
    public static void Enum$set(MemorySegment seg, MemorySegment x) {
        constants$3253.const$5.set(seg, x);
    }
    public static MemorySegment Enum$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3253.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void Enum$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3253.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static Enum Enum(MemorySegment segment, Arena scope) {
        return Enum.ofAddress(Enum$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*IsEqual)(IMoniker*,IMoniker*);
     * }
     */
    public interface IsEqual {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(IsEqual fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3254.const$0, fi, constants$34.const$0, scope);
        }
        static IsEqual ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle IsEqual$VH() {
        return constants$3254.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*IsEqual)(IMoniker*,IMoniker*);
     * }
     */
    public static MemorySegment IsEqual$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3254.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*IsEqual)(IMoniker*,IMoniker*);
     * }
     */
    public static void IsEqual$set(MemorySegment seg, MemorySegment x) {
        constants$3254.const$1.set(seg, x);
    }
    public static MemorySegment IsEqual$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3254.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void IsEqual$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3254.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static IsEqual IsEqual(MemorySegment segment, Arena scope) {
        return IsEqual.ofAddress(IsEqual$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*Hash)(IMoniker*,DWORD*);
     * }
     */
    public interface Hash {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(Hash fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3254.const$2, fi, constants$34.const$0, scope);
        }
        static Hash ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Hash$VH() {
        return constants$3254.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Hash)(IMoniker*,DWORD*);
     * }
     */
    public static MemorySegment Hash$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3254.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Hash)(IMoniker*,DWORD*);
     * }
     */
    public static void Hash$set(MemorySegment seg, MemorySegment x) {
        constants$3254.const$3.set(seg, x);
    }
    public static MemorySegment Hash$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3254.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void Hash$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3254.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static Hash Hash(MemorySegment segment, Arena scope) {
        return Hash.ofAddress(Hash$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*IsRunning)(IMoniker*,IBindCtx*,IMoniker*,IMoniker*);
     * }
     */
    public interface IsRunning {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(IsRunning fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3254.const$4, fi, constants$1.const$3, scope);
        }
        static IsRunning ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)constants$55.const$1.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle IsRunning$VH() {
        return constants$3254.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*IsRunning)(IMoniker*,IBindCtx*,IMoniker*,IMoniker*);
     * }
     */
    public static MemorySegment IsRunning$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3254.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*IsRunning)(IMoniker*,IBindCtx*,IMoniker*,IMoniker*);
     * }
     */
    public static void IsRunning$set(MemorySegment seg, MemorySegment x) {
        constants$3254.const$5.set(seg, x);
    }
    public static MemorySegment IsRunning$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3254.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void IsRunning$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3254.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static IsRunning IsRunning(MemorySegment segment, Arena scope) {
        return IsRunning.ofAddress(IsRunning$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetTimeOfLastChange)(IMoniker*,IBindCtx*,IMoniker*,FILETIME*);
     * }
     */
    public interface GetTimeOfLastChange {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(GetTimeOfLastChange fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3255.const$0, fi, constants$1.const$3, scope);
        }
        static GetTimeOfLastChange ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)constants$55.const$1.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetTimeOfLastChange$VH() {
        return constants$3255.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetTimeOfLastChange)(IMoniker*,IBindCtx*,IMoniker*,FILETIME*);
     * }
     */
    public static MemorySegment GetTimeOfLastChange$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3255.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetTimeOfLastChange)(IMoniker*,IBindCtx*,IMoniker*,FILETIME*);
     * }
     */
    public static void GetTimeOfLastChange$set(MemorySegment seg, MemorySegment x) {
        constants$3255.const$1.set(seg, x);
    }
    public static MemorySegment GetTimeOfLastChange$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3255.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTimeOfLastChange$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3255.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTimeOfLastChange GetTimeOfLastChange(MemorySegment segment, Arena scope) {
        return GetTimeOfLastChange.ofAddress(GetTimeOfLastChange$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*Inverse)(IMoniker*,IMoniker**);
     * }
     */
    public interface Inverse {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(Inverse fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3255.const$2, fi, constants$34.const$0, scope);
        }
        static Inverse ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Inverse$VH() {
        return constants$3255.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Inverse)(IMoniker*,IMoniker**);
     * }
     */
    public static MemorySegment Inverse$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3255.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Inverse)(IMoniker*,IMoniker**);
     * }
     */
    public static void Inverse$set(MemorySegment seg, MemorySegment x) {
        constants$3255.const$3.set(seg, x);
    }
    public static MemorySegment Inverse$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3255.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void Inverse$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3255.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static Inverse Inverse(MemorySegment segment, Arena scope) {
        return Inverse.ofAddress(Inverse$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*CommonPrefixWith)(IMoniker*,IMoniker*,IMoniker**);
     * }
     */
    public interface CommonPrefixWith {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(CommonPrefixWith fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3255.const$4, fi, constants$37.const$3, scope);
        }
        static CommonPrefixWith ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CommonPrefixWith$VH() {
        return constants$3255.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*CommonPrefixWith)(IMoniker*,IMoniker*,IMoniker**);
     * }
     */
    public static MemorySegment CommonPrefixWith$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3255.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*CommonPrefixWith)(IMoniker*,IMoniker*,IMoniker**);
     * }
     */
    public static void CommonPrefixWith$set(MemorySegment seg, MemorySegment x) {
        constants$3255.const$5.set(seg, x);
    }
    public static MemorySegment CommonPrefixWith$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3255.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void CommonPrefixWith$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3255.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static CommonPrefixWith CommonPrefixWith(MemorySegment segment, Arena scope) {
        return CommonPrefixWith.ofAddress(CommonPrefixWith$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*RelativePathTo)(IMoniker*,IMoniker*,IMoniker**);
     * }
     */
    public interface RelativePathTo {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(RelativePathTo fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3256.const$0, fi, constants$37.const$3, scope);
        }
        static RelativePathTo ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle RelativePathTo$VH() {
        return constants$3256.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*RelativePathTo)(IMoniker*,IMoniker*,IMoniker**);
     * }
     */
    public static MemorySegment RelativePathTo$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3256.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*RelativePathTo)(IMoniker*,IMoniker*,IMoniker**);
     * }
     */
    public static void RelativePathTo$set(MemorySegment seg, MemorySegment x) {
        constants$3256.const$1.set(seg, x);
    }
    public static MemorySegment RelativePathTo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3256.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void RelativePathTo$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3256.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static RelativePathTo RelativePathTo(MemorySegment segment, Arena scope) {
        return RelativePathTo.ofAddress(RelativePathTo$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetDisplayName)(IMoniker*,IBindCtx*,IMoniker*,LPOLESTR*);
     * }
     */
    public interface GetDisplayName {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(GetDisplayName fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3256.const$2, fi, constants$1.const$3, scope);
        }
        static GetDisplayName ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)constants$55.const$1.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetDisplayName$VH() {
        return constants$3256.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetDisplayName)(IMoniker*,IBindCtx*,IMoniker*,LPOLESTR*);
     * }
     */
    public static MemorySegment GetDisplayName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3256.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetDisplayName)(IMoniker*,IBindCtx*,IMoniker*,LPOLESTR*);
     * }
     */
    public static void GetDisplayName$set(MemorySegment seg, MemorySegment x) {
        constants$3256.const$3.set(seg, x);
    }
    public static MemorySegment GetDisplayName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3256.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDisplayName$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3256.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDisplayName GetDisplayName(MemorySegment segment, Arena scope) {
        return GetDisplayName.ofAddress(GetDisplayName$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*ParseDisplayName)(IMoniker*,IBindCtx*,IMoniker*,LPOLESTR,ULONG*,IMoniker**);
     * }
     */
    public interface ParseDisplayName {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(ParseDisplayName fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3256.const$4, fi, constants$737.const$4, scope);
        }
        static ParseDisplayName ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    return (int)constants$3256.const$5.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle ParseDisplayName$VH() {
        return constants$3257.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*ParseDisplayName)(IMoniker*,IBindCtx*,IMoniker*,LPOLESTR,ULONG*,IMoniker**);
     * }
     */
    public static MemorySegment ParseDisplayName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3257.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*ParseDisplayName)(IMoniker*,IBindCtx*,IMoniker*,LPOLESTR,ULONG*,IMoniker**);
     * }
     */
    public static void ParseDisplayName$set(MemorySegment seg, MemorySegment x) {
        constants$3257.const$0.set(seg, x);
    }
    public static MemorySegment ParseDisplayName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3257.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void ParseDisplayName$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3257.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static ParseDisplayName ParseDisplayName(MemorySegment segment, Arena scope) {
        return ParseDisplayName.ofAddress(ParseDisplayName$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*IsSystemMoniker)(IMoniker*,DWORD*);
     * }
     */
    public interface IsSystemMoniker {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(IsSystemMoniker fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3257.const$1, fi, constants$34.const$0, scope);
        }
        static IsSystemMoniker ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle IsSystemMoniker$VH() {
        return constants$3257.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*IsSystemMoniker)(IMoniker*,DWORD*);
     * }
     */
    public static MemorySegment IsSystemMoniker$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3257.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*IsSystemMoniker)(IMoniker*,DWORD*);
     * }
     */
    public static void IsSystemMoniker$set(MemorySegment seg, MemorySegment x) {
        constants$3257.const$2.set(seg, x);
    }
    public static MemorySegment IsSystemMoniker$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3257.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void IsSystemMoniker$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3257.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static IsSystemMoniker IsSystemMoniker(MemorySegment segment, Arena scope) {
        return IsSystemMoniker.ofAddress(IsSystemMoniker$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



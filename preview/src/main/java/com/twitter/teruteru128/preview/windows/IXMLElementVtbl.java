// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IXMLElementVtbl {
 *     HRESULT (*QueryInterface)(IXMLElement*,const IID*,void**);
 *     ULONG (*AddRef)(IXMLElement*);
 *     ULONG (*Release)(IXMLElement*);
 *     HRESULT (*GetTypeInfoCount)(IXMLElement*,UINT*);
 *     HRESULT (*GetTypeInfo)(IXMLElement*,UINT,LCID,ITypeInfo**);
 *     HRESULT (*GetIDsOfNames)(IXMLElement*,const IID*,LPOLESTR*,UINT,LCID,DISPID*);
 *     HRESULT (*Invoke)(IXMLElement*,DISPID,const IID*,LCID,WORD,DISPPARAMS*,VARIANT*,EXCEPINFO*,UINT*);
 *     HRESULT (*get_tagName)(IXMLElement*,BSTR*);
 *     HRESULT (*put_tagName)(IXMLElement*,BSTR);
 *     HRESULT (*get_parent)(IXMLElement*,IXMLElement**);
 *     HRESULT (*setAttribute)(IXMLElement*,BSTR,VARIANT);
 *     HRESULT (*getAttribute)(IXMLElement*,BSTR,VARIANT*);
 *     HRESULT (*removeAttribute)(IXMLElement*,BSTR);
 *     HRESULT (*get_children)(IXMLElement*,IXMLElementCollection**);
 *     HRESULT (*get_type)(IXMLElement*,long*);
 *     HRESULT (*get_text)(IXMLElement*,BSTR*);
 *     HRESULT (*put_text)(IXMLElement*,BSTR);
 *     HRESULT (*addChild)(IXMLElement*,IXMLElement*,long,long);
 *     HRESULT (*removeChild)(IXMLElement*,IXMLElement*);
 * };
 * }
 */
public class IXMLElementVtbl {

    public static MemoryLayout $LAYOUT() {
        return constants$4062.const$5;
    }
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IXMLElement*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4063.const$0, fi, constants$37.const$3, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle QueryInterface$VH() {
        return constants$4063.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IXMLElement*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4063.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IXMLElement*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        constants$4063.const$1.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4063.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4063.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, Arena scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*AddRef)(IXMLElement*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4063.const$2, fi, constants$18.const$5, scope);
        }
        static AddRef ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle AddRef$VH() {
        return constants$4063.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IXMLElement*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4063.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IXMLElement*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        constants$4063.const$3.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4063.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4063.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, Arena scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*Release)(IXMLElement*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4063.const$4, fi, constants$18.const$5, scope);
        }
        static Release ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Release$VH() {
        return constants$4063.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IXMLElement*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4063.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IXMLElement*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        constants$4063.const$5.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4063.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4063.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, Arena scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetTypeInfoCount)(IXMLElement*,UINT*);
     * }
     */
    public interface GetTypeInfoCount {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetTypeInfoCount fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4064.const$0, fi, constants$34.const$0, scope);
        }
        static GetTypeInfoCount ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetTypeInfoCount$VH() {
        return constants$4064.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetTypeInfoCount)(IXMLElement*,UINT*);
     * }
     */
    public static MemorySegment GetTypeInfoCount$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4064.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetTypeInfoCount)(IXMLElement*,UINT*);
     * }
     */
    public static void GetTypeInfoCount$set(MemorySegment seg, MemorySegment x) {
        constants$4064.const$1.set(seg, x);
    }
    public static MemorySegment GetTypeInfoCount$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4064.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeInfoCount$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4064.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeInfoCount GetTypeInfoCount(MemorySegment segment, Arena scope) {
        return GetTypeInfoCount.ofAddress(GetTypeInfoCount$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetTypeInfo)(IXMLElement*,UINT,LCID,ITypeInfo**);
     * }
     */
    public interface GetTypeInfo {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(GetTypeInfo fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4064.const$2, fi, constants$644.const$5, scope);
        }
        static GetTypeInfo ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)constants$2131.const$5.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetTypeInfo$VH() {
        return constants$4064.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetTypeInfo)(IXMLElement*,UINT,LCID,ITypeInfo**);
     * }
     */
    public static MemorySegment GetTypeInfo$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4064.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetTypeInfo)(IXMLElement*,UINT,LCID,ITypeInfo**);
     * }
     */
    public static void GetTypeInfo$set(MemorySegment seg, MemorySegment x) {
        constants$4064.const$3.set(seg, x);
    }
    public static MemorySegment GetTypeInfo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4064.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeInfo$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4064.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeInfo GetTypeInfo(MemorySegment segment, Arena scope) {
        return GetTypeInfo.ofAddress(GetTypeInfo$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetIDsOfNames)(IXMLElement*,const IID*,LPOLESTR*,UINT,LCID,DISPID*);
     * }
     */
    public interface GetIDsOfNames {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3, int _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(GetIDsOfNames fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4064.const$4, fi, constants$836.const$2, scope);
        }
        static GetIDsOfNames ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3, int __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    return (int)constants$3267.const$1.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetIDsOfNames$VH() {
        return constants$4064.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetIDsOfNames)(IXMLElement*,const IID*,LPOLESTR*,UINT,LCID,DISPID*);
     * }
     */
    public static MemorySegment GetIDsOfNames$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4064.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetIDsOfNames)(IXMLElement*,const IID*,LPOLESTR*,UINT,LCID,DISPID*);
     * }
     */
    public static void GetIDsOfNames$set(MemorySegment seg, MemorySegment x) {
        constants$4064.const$5.set(seg, x);
    }
    public static MemorySegment GetIDsOfNames$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4064.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GetIDsOfNames$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4064.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetIDsOfNames GetIDsOfNames(MemorySegment segment, Arena scope) {
        return GetIDsOfNames.ofAddress(GetIDsOfNames$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*Invoke)(IXMLElement*,DISPID,const IID*,LCID,WORD,DISPPARAMS*,VARIANT*,EXCEPINFO*,UINT*);
     * }
     */
    public interface Invoke {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, int _x3, short _x4, java.lang.foreign.MemorySegment _x5, java.lang.foreign.MemorySegment _x6, java.lang.foreign.MemorySegment _x7, java.lang.foreign.MemorySegment _x8);
        static MemorySegment allocate(Invoke fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4065.const$0, fi, constants$3484.const$0, scope);
        }
        static Invoke ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, int __x3, short __x4, java.lang.foreign.MemorySegment __x5, java.lang.foreign.MemorySegment __x6, java.lang.foreign.MemorySegment __x7, java.lang.foreign.MemorySegment __x8) -> {
                try {
                    return (int)constants$3484.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7, __x8);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Invoke$VH() {
        return constants$4065.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Invoke)(IXMLElement*,DISPID,const IID*,LCID,WORD,DISPPARAMS*,VARIANT*,EXCEPINFO*,UINT*);
     * }
     */
    public static MemorySegment Invoke$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4065.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Invoke)(IXMLElement*,DISPID,const IID*,LCID,WORD,DISPPARAMS*,VARIANT*,EXCEPINFO*,UINT*);
     * }
     */
    public static void Invoke$set(MemorySegment seg, MemorySegment x) {
        constants$4065.const$1.set(seg, x);
    }
    public static MemorySegment Invoke$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4065.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void Invoke$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4065.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static Invoke Invoke(MemorySegment segment, Arena scope) {
        return Invoke.ofAddress(Invoke$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_tagName)(IXMLElement*,BSTR*);
     * }
     */
    public interface get_tagName {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_tagName fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4065.const$2, fi, constants$34.const$0, scope);
        }
        static get_tagName ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_tagName$VH() {
        return constants$4065.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_tagName)(IXMLElement*,BSTR*);
     * }
     */
    public static MemorySegment get_tagName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4065.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_tagName)(IXMLElement*,BSTR*);
     * }
     */
    public static void get_tagName$set(MemorySegment seg, MemorySegment x) {
        constants$4065.const$3.set(seg, x);
    }
    public static MemorySegment get_tagName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4065.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void get_tagName$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4065.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_tagName get_tagName(MemorySegment segment, Arena scope) {
        return get_tagName.ofAddress(get_tagName$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*put_tagName)(IXMLElement*,BSTR);
     * }
     */
    public interface put_tagName {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(put_tagName fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4065.const$4, fi, constants$34.const$0, scope);
        }
        static put_tagName ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle put_tagName$VH() {
        return constants$4065.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*put_tagName)(IXMLElement*,BSTR);
     * }
     */
    public static MemorySegment put_tagName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4065.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*put_tagName)(IXMLElement*,BSTR);
     * }
     */
    public static void put_tagName$set(MemorySegment seg, MemorySegment x) {
        constants$4065.const$5.set(seg, x);
    }
    public static MemorySegment put_tagName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4065.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void put_tagName$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4065.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static put_tagName put_tagName(MemorySegment segment, Arena scope) {
        return put_tagName.ofAddress(put_tagName$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_parent)(IXMLElement*,IXMLElement**);
     * }
     */
    public interface get_parent {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_parent fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4066.const$0, fi, constants$34.const$0, scope);
        }
        static get_parent ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_parent$VH() {
        return constants$4066.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_parent)(IXMLElement*,IXMLElement**);
     * }
     */
    public static MemorySegment get_parent$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4066.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_parent)(IXMLElement*,IXMLElement**);
     * }
     */
    public static void get_parent$set(MemorySegment seg, MemorySegment x) {
        constants$4066.const$1.set(seg, x);
    }
    public static MemorySegment get_parent$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4066.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_parent$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4066.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_parent get_parent(MemorySegment segment, Arena scope) {
        return get_parent.ofAddress(get_parent$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*setAttribute)(IXMLElement*,BSTR,VARIANT);
     * }
     */
    public interface setAttribute {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(setAttribute fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4066.const$2, fi, constants$3764.const$0, scope);
        }
        static setAttribute ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$3764.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle setAttribute$VH() {
        return constants$4066.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*setAttribute)(IXMLElement*,BSTR,VARIANT);
     * }
     */
    public static MemorySegment setAttribute$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4066.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*setAttribute)(IXMLElement*,BSTR,VARIANT);
     * }
     */
    public static void setAttribute$set(MemorySegment seg, MemorySegment x) {
        constants$4066.const$3.set(seg, x);
    }
    public static MemorySegment setAttribute$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4066.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void setAttribute$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4066.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static setAttribute setAttribute(MemorySegment segment, Arena scope) {
        return setAttribute.ofAddress(setAttribute$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*getAttribute)(IXMLElement*,BSTR,VARIANT*);
     * }
     */
    public interface getAttribute {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(getAttribute fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4066.const$4, fi, constants$37.const$3, scope);
        }
        static getAttribute ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle getAttribute$VH() {
        return constants$4066.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*getAttribute)(IXMLElement*,BSTR,VARIANT*);
     * }
     */
    public static MemorySegment getAttribute$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4066.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*getAttribute)(IXMLElement*,BSTR,VARIANT*);
     * }
     */
    public static void getAttribute$set(MemorySegment seg, MemorySegment x) {
        constants$4066.const$5.set(seg, x);
    }
    public static MemorySegment getAttribute$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4066.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void getAttribute$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4066.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static getAttribute getAttribute(MemorySegment segment, Arena scope) {
        return getAttribute.ofAddress(getAttribute$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*removeAttribute)(IXMLElement*,BSTR);
     * }
     */
    public interface removeAttribute {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(removeAttribute fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4067.const$0, fi, constants$34.const$0, scope);
        }
        static removeAttribute ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle removeAttribute$VH() {
        return constants$4067.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*removeAttribute)(IXMLElement*,BSTR);
     * }
     */
    public static MemorySegment removeAttribute$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4067.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*removeAttribute)(IXMLElement*,BSTR);
     * }
     */
    public static void removeAttribute$set(MemorySegment seg, MemorySegment x) {
        constants$4067.const$1.set(seg, x);
    }
    public static MemorySegment removeAttribute$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4067.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void removeAttribute$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4067.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static removeAttribute removeAttribute(MemorySegment segment, Arena scope) {
        return removeAttribute.ofAddress(removeAttribute$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_children)(IXMLElement*,IXMLElementCollection**);
     * }
     */
    public interface get_children {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_children fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4067.const$2, fi, constants$34.const$0, scope);
        }
        static get_children ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_children$VH() {
        return constants$4067.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_children)(IXMLElement*,IXMLElementCollection**);
     * }
     */
    public static MemorySegment get_children$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4067.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_children)(IXMLElement*,IXMLElementCollection**);
     * }
     */
    public static void get_children$set(MemorySegment seg, MemorySegment x) {
        constants$4067.const$3.set(seg, x);
    }
    public static MemorySegment get_children$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4067.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void get_children$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4067.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_children get_children(MemorySegment segment, Arena scope) {
        return get_children.ofAddress(get_children$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_type)(IXMLElement*,long*);
     * }
     */
    public interface get_type {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_type fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4067.const$4, fi, constants$34.const$0, scope);
        }
        static get_type ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_type$VH() {
        return constants$4067.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_type)(IXMLElement*,long*);
     * }
     */
    public static MemorySegment get_type$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4067.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_type)(IXMLElement*,long*);
     * }
     */
    public static void get_type$set(MemorySegment seg, MemorySegment x) {
        constants$4067.const$5.set(seg, x);
    }
    public static MemorySegment get_type$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4067.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_type$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4067.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_type get_type(MemorySegment segment, Arena scope) {
        return get_type.ofAddress(get_type$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_text)(IXMLElement*,BSTR*);
     * }
     */
    public interface get_text {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_text fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4068.const$0, fi, constants$34.const$0, scope);
        }
        static get_text ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_text$VH() {
        return constants$4068.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_text)(IXMLElement*,BSTR*);
     * }
     */
    public static MemorySegment get_text$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4068.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_text)(IXMLElement*,BSTR*);
     * }
     */
    public static void get_text$set(MemorySegment seg, MemorySegment x) {
        constants$4068.const$1.set(seg, x);
    }
    public static MemorySegment get_text$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4068.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_text$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4068.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_text get_text(MemorySegment segment, Arena scope) {
        return get_text.ofAddress(get_text$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*put_text)(IXMLElement*,BSTR);
     * }
     */
    public interface put_text {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(put_text fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4068.const$2, fi, constants$34.const$0, scope);
        }
        static put_text ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle put_text$VH() {
        return constants$4068.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*put_text)(IXMLElement*,BSTR);
     * }
     */
    public static MemorySegment put_text$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4068.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*put_text)(IXMLElement*,BSTR);
     * }
     */
    public static void put_text$set(MemorySegment seg, MemorySegment x) {
        constants$4068.const$3.set(seg, x);
    }
    public static MemorySegment put_text$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4068.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void put_text$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4068.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static put_text put_text(MemorySegment segment, Arena scope) {
        return put_text.ofAddress(put_text$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*addChild)(IXMLElement*,IXMLElement*,long,long);
     * }
     */
    public interface addChild {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3);
        static MemorySegment allocate(addChild fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4068.const$4, fi, constants$584.const$5, scope);
        }
        static addChild ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3) -> {
                try {
                    return (int)constants$2092.const$3.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle addChild$VH() {
        return constants$4068.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*addChild)(IXMLElement*,IXMLElement*,long,long);
     * }
     */
    public static MemorySegment addChild$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4068.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*addChild)(IXMLElement*,IXMLElement*,long,long);
     * }
     */
    public static void addChild$set(MemorySegment seg, MemorySegment x) {
        constants$4068.const$5.set(seg, x);
    }
    public static MemorySegment addChild$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4068.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void addChild$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4068.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static addChild addChild(MemorySegment segment, Arena scope) {
        return addChild.ofAddress(addChild$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*removeChild)(IXMLElement*,IXMLElement*);
     * }
     */
    public interface removeChild {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(removeChild fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4069.const$0, fi, constants$34.const$0, scope);
        }
        static removeChild ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle removeChild$VH() {
        return constants$4069.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*removeChild)(IXMLElement*,IXMLElement*);
     * }
     */
    public static MemorySegment removeChild$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4069.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*removeChild)(IXMLElement*,IXMLElement*);
     * }
     */
    public static void removeChild$set(MemorySegment seg, MemorySegment x) {
        constants$4069.const$1.set(seg, x);
    }
    public static MemorySegment removeChild$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4069.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void removeChild$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4069.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static removeChild removeChild(MemorySegment segment, Arena scope) {
        return removeChild.ofAddress(removeChild$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



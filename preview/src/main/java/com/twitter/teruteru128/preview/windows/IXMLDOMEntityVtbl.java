// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IXMLDOMEntityVtbl {
 *     HRESULT (*QueryInterface)(IXMLDOMEntity*,const IID*,void**);
 *     ULONG (*AddRef)(IXMLDOMEntity*);
 *     ULONG (*Release)(IXMLDOMEntity*);
 *     HRESULT (*GetTypeInfoCount)(IXMLDOMEntity*,UINT*);
 *     HRESULT (*GetTypeInfo)(IXMLDOMEntity*,UINT,LCID,ITypeInfo**);
 *     HRESULT (*GetIDsOfNames)(IXMLDOMEntity*,const IID*,LPOLESTR*,UINT,LCID,DISPID*);
 *     HRESULT (*Invoke)(IXMLDOMEntity*,DISPID,const IID*,LCID,WORD,DISPPARAMS*,VARIANT*,EXCEPINFO*,UINT*);
 *     HRESULT (*get_nodeName)(IXMLDOMEntity*,BSTR*);
 *     HRESULT (*get_nodeValue)(IXMLDOMEntity*,VARIANT*);
 *     HRESULT (*put_nodeValue)(IXMLDOMEntity*,VARIANT);
 *     HRESULT (*get_nodeType)(IXMLDOMEntity*,DOMNodeType*);
 *     HRESULT (*get_parentNode)(IXMLDOMEntity*,IXMLDOMNode**);
 *     HRESULT (*get_childNodes)(IXMLDOMEntity*,IXMLDOMNodeList**);
 *     HRESULT (*get_firstChild)(IXMLDOMEntity*,IXMLDOMNode**);
 *     HRESULT (*get_lastChild)(IXMLDOMEntity*,IXMLDOMNode**);
 *     HRESULT (*get_previousSibling)(IXMLDOMEntity*,IXMLDOMNode**);
 *     HRESULT (*get_nextSibling)(IXMLDOMEntity*,IXMLDOMNode**);
 *     HRESULT (*get_attributes)(IXMLDOMEntity*,IXMLDOMNamedNodeMap**);
 *     HRESULT (*insertBefore)(IXMLDOMEntity*,IXMLDOMNode*,VARIANT,IXMLDOMNode**);
 *     HRESULT (*replaceChild)(IXMLDOMEntity*,IXMLDOMNode*,IXMLDOMNode*,IXMLDOMNode**);
 *     HRESULT (*removeChild)(IXMLDOMEntity*,IXMLDOMNode*,IXMLDOMNode**);
 *     HRESULT (*appendChild)(IXMLDOMEntity*,IXMLDOMNode*,IXMLDOMNode**);
 *     HRESULT (*hasChildNodes)(IXMLDOMEntity*,VARIANT_BOOL*);
 *     HRESULT (*get_ownerDocument)(IXMLDOMEntity*,IXMLDOMDocument**);
 *     HRESULT (*cloneNode)(IXMLDOMEntity*,VARIANT_BOOL,IXMLDOMNode**);
 *     HRESULT (*get_nodeTypeString)(IXMLDOMEntity*,BSTR*);
 *     HRESULT (*get_text)(IXMLDOMEntity*,BSTR*);
 *     HRESULT (*put_text)(IXMLDOMEntity*,BSTR);
 *     HRESULT (*get_specified)(IXMLDOMEntity*,VARIANT_BOOL*);
 *     HRESULT (*get_definition)(IXMLDOMEntity*,IXMLDOMNode**);
 *     HRESULT (*get_nodeTypedValue)(IXMLDOMEntity*,VARIANT*);
 *     HRESULT (*put_nodeTypedValue)(IXMLDOMEntity*,VARIANT);
 *     HRESULT (*get_dataType)(IXMLDOMEntity*,VARIANT*);
 *     HRESULT (*put_dataType)(IXMLDOMEntity*,BSTR);
 *     HRESULT (*get_xml)(IXMLDOMEntity*,BSTR*);
 *     HRESULT (*transformNode)(IXMLDOMEntity*,IXMLDOMNode*,BSTR*);
 *     HRESULT (*selectNodes)(IXMLDOMEntity*,BSTR,IXMLDOMNodeList**);
 *     HRESULT (*selectSingleNode)(IXMLDOMEntity*,BSTR,IXMLDOMNode**);
 *     HRESULT (*get_parsed)(IXMLDOMEntity*,VARIANT_BOOL*);
 *     HRESULT (*get_namespaceURI)(IXMLDOMEntity*,BSTR*);
 *     HRESULT (*get_prefix)(IXMLDOMEntity*,BSTR*);
 *     HRESULT (*get_baseName)(IXMLDOMEntity*,BSTR*);
 *     HRESULT (*transformNodeToObject)(IXMLDOMEntity*,IXMLDOMNode*,VARIANT);
 *     HRESULT (*get_publicId)(IXMLDOMEntity*,VARIANT*);
 *     HRESULT (*get_systemId)(IXMLDOMEntity*,VARIANT*);
 *     HRESULT (*get_notationName)(IXMLDOMEntity*,BSTR*);
 * };
 * }
 */
public class IXMLDOMEntityVtbl {

    public static MemoryLayout $LAYOUT() {
        return constants$3970.const$5;
    }
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IXMLDOMEntity*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3971.const$0, fi, constants$37.const$3, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle QueryInterface$VH() {
        return constants$3971.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IXMLDOMEntity*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3971.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IXMLDOMEntity*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        constants$3971.const$1.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3971.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3971.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, Arena scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*AddRef)(IXMLDOMEntity*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3971.const$2, fi, constants$18.const$5, scope);
        }
        static AddRef ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle AddRef$VH() {
        return constants$3971.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IXMLDOMEntity*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3971.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IXMLDOMEntity*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        constants$3971.const$3.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3971.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3971.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, Arena scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*Release)(IXMLDOMEntity*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3971.const$4, fi, constants$18.const$5, scope);
        }
        static Release ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Release$VH() {
        return constants$3971.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IXMLDOMEntity*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3971.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IXMLDOMEntity*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        constants$3971.const$5.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3971.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3971.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, Arena scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetTypeInfoCount)(IXMLDOMEntity*,UINT*);
     * }
     */
    public interface GetTypeInfoCount {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetTypeInfoCount fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3972.const$0, fi, constants$34.const$0, scope);
        }
        static GetTypeInfoCount ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetTypeInfoCount$VH() {
        return constants$3972.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetTypeInfoCount)(IXMLDOMEntity*,UINT*);
     * }
     */
    public static MemorySegment GetTypeInfoCount$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3972.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetTypeInfoCount)(IXMLDOMEntity*,UINT*);
     * }
     */
    public static void GetTypeInfoCount$set(MemorySegment seg, MemorySegment x) {
        constants$3972.const$1.set(seg, x);
    }
    public static MemorySegment GetTypeInfoCount$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3972.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeInfoCount$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3972.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeInfoCount GetTypeInfoCount(MemorySegment segment, Arena scope) {
        return GetTypeInfoCount.ofAddress(GetTypeInfoCount$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetTypeInfo)(IXMLDOMEntity*,UINT,LCID,ITypeInfo**);
     * }
     */
    public interface GetTypeInfo {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(GetTypeInfo fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3972.const$2, fi, constants$644.const$5, scope);
        }
        static GetTypeInfo ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)constants$2131.const$5.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetTypeInfo$VH() {
        return constants$3972.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetTypeInfo)(IXMLDOMEntity*,UINT,LCID,ITypeInfo**);
     * }
     */
    public static MemorySegment GetTypeInfo$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3972.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetTypeInfo)(IXMLDOMEntity*,UINT,LCID,ITypeInfo**);
     * }
     */
    public static void GetTypeInfo$set(MemorySegment seg, MemorySegment x) {
        constants$3972.const$3.set(seg, x);
    }
    public static MemorySegment GetTypeInfo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3972.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeInfo$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3972.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeInfo GetTypeInfo(MemorySegment segment, Arena scope) {
        return GetTypeInfo.ofAddress(GetTypeInfo$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetIDsOfNames)(IXMLDOMEntity*,const IID*,LPOLESTR*,UINT,LCID,DISPID*);
     * }
     */
    public interface GetIDsOfNames {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3, int _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(GetIDsOfNames fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3972.const$4, fi, constants$836.const$2, scope);
        }
        static GetIDsOfNames ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3, int __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    return (int)constants$3267.const$1.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetIDsOfNames$VH() {
        return constants$3972.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetIDsOfNames)(IXMLDOMEntity*,const IID*,LPOLESTR*,UINT,LCID,DISPID*);
     * }
     */
    public static MemorySegment GetIDsOfNames$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3972.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetIDsOfNames)(IXMLDOMEntity*,const IID*,LPOLESTR*,UINT,LCID,DISPID*);
     * }
     */
    public static void GetIDsOfNames$set(MemorySegment seg, MemorySegment x) {
        constants$3972.const$5.set(seg, x);
    }
    public static MemorySegment GetIDsOfNames$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3972.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GetIDsOfNames$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3972.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetIDsOfNames GetIDsOfNames(MemorySegment segment, Arena scope) {
        return GetIDsOfNames.ofAddress(GetIDsOfNames$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*Invoke)(IXMLDOMEntity*,DISPID,const IID*,LCID,WORD,DISPPARAMS*,VARIANT*,EXCEPINFO*,UINT*);
     * }
     */
    public interface Invoke {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, int _x3, short _x4, java.lang.foreign.MemorySegment _x5, java.lang.foreign.MemorySegment _x6, java.lang.foreign.MemorySegment _x7, java.lang.foreign.MemorySegment _x8);
        static MemorySegment allocate(Invoke fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3973.const$0, fi, constants$3484.const$0, scope);
        }
        static Invoke ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, int __x3, short __x4, java.lang.foreign.MemorySegment __x5, java.lang.foreign.MemorySegment __x6, java.lang.foreign.MemorySegment __x7, java.lang.foreign.MemorySegment __x8) -> {
                try {
                    return (int)constants$3484.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7, __x8);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Invoke$VH() {
        return constants$3973.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Invoke)(IXMLDOMEntity*,DISPID,const IID*,LCID,WORD,DISPPARAMS*,VARIANT*,EXCEPINFO*,UINT*);
     * }
     */
    public static MemorySegment Invoke$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3973.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Invoke)(IXMLDOMEntity*,DISPID,const IID*,LCID,WORD,DISPPARAMS*,VARIANT*,EXCEPINFO*,UINT*);
     * }
     */
    public static void Invoke$set(MemorySegment seg, MemorySegment x) {
        constants$3973.const$1.set(seg, x);
    }
    public static MemorySegment Invoke$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3973.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void Invoke$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3973.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static Invoke Invoke(MemorySegment segment, Arena scope) {
        return Invoke.ofAddress(Invoke$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_nodeName)(IXMLDOMEntity*,BSTR*);
     * }
     */
    public interface get_nodeName {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_nodeName fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3973.const$2, fi, constants$34.const$0, scope);
        }
        static get_nodeName ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_nodeName$VH() {
        return constants$3973.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_nodeName)(IXMLDOMEntity*,BSTR*);
     * }
     */
    public static MemorySegment get_nodeName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3973.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_nodeName)(IXMLDOMEntity*,BSTR*);
     * }
     */
    public static void get_nodeName$set(MemorySegment seg, MemorySegment x) {
        constants$3973.const$3.set(seg, x);
    }
    public static MemorySegment get_nodeName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3973.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void get_nodeName$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3973.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_nodeName get_nodeName(MemorySegment segment, Arena scope) {
        return get_nodeName.ofAddress(get_nodeName$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_nodeValue)(IXMLDOMEntity*,VARIANT*);
     * }
     */
    public interface get_nodeValue {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_nodeValue fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3973.const$4, fi, constants$34.const$0, scope);
        }
        static get_nodeValue ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_nodeValue$VH() {
        return constants$3973.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_nodeValue)(IXMLDOMEntity*,VARIANT*);
     * }
     */
    public static MemorySegment get_nodeValue$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3973.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_nodeValue)(IXMLDOMEntity*,VARIANT*);
     * }
     */
    public static void get_nodeValue$set(MemorySegment seg, MemorySegment x) {
        constants$3973.const$5.set(seg, x);
    }
    public static MemorySegment get_nodeValue$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3973.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_nodeValue$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3973.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_nodeValue get_nodeValue(MemorySegment segment, Arena scope) {
        return get_nodeValue.ofAddress(get_nodeValue$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*put_nodeValue)(IXMLDOMEntity*,VARIANT);
     * }
     */
    public interface put_nodeValue {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(put_nodeValue fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3974.const$0, fi, constants$3752.const$1, scope);
        }
        static put_nodeValue ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$3752.const$3.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle put_nodeValue$VH() {
        return constants$3974.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*put_nodeValue)(IXMLDOMEntity*,VARIANT);
     * }
     */
    public static MemorySegment put_nodeValue$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3974.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*put_nodeValue)(IXMLDOMEntity*,VARIANT);
     * }
     */
    public static void put_nodeValue$set(MemorySegment seg, MemorySegment x) {
        constants$3974.const$1.set(seg, x);
    }
    public static MemorySegment put_nodeValue$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3974.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void put_nodeValue$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3974.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static put_nodeValue put_nodeValue(MemorySegment segment, Arena scope) {
        return put_nodeValue.ofAddress(put_nodeValue$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_nodeType)(IXMLDOMEntity*,DOMNodeType*);
     * }
     */
    public interface get_nodeType {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_nodeType fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3974.const$2, fi, constants$34.const$0, scope);
        }
        static get_nodeType ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_nodeType$VH() {
        return constants$3974.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_nodeType)(IXMLDOMEntity*,DOMNodeType*);
     * }
     */
    public static MemorySegment get_nodeType$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3974.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_nodeType)(IXMLDOMEntity*,DOMNodeType*);
     * }
     */
    public static void get_nodeType$set(MemorySegment seg, MemorySegment x) {
        constants$3974.const$3.set(seg, x);
    }
    public static MemorySegment get_nodeType$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3974.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void get_nodeType$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3974.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_nodeType get_nodeType(MemorySegment segment, Arena scope) {
        return get_nodeType.ofAddress(get_nodeType$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_parentNode)(IXMLDOMEntity*,IXMLDOMNode**);
     * }
     */
    public interface get_parentNode {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_parentNode fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3974.const$4, fi, constants$34.const$0, scope);
        }
        static get_parentNode ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_parentNode$VH() {
        return constants$3974.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_parentNode)(IXMLDOMEntity*,IXMLDOMNode**);
     * }
     */
    public static MemorySegment get_parentNode$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3974.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_parentNode)(IXMLDOMEntity*,IXMLDOMNode**);
     * }
     */
    public static void get_parentNode$set(MemorySegment seg, MemorySegment x) {
        constants$3974.const$5.set(seg, x);
    }
    public static MemorySegment get_parentNode$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3974.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_parentNode$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3974.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_parentNode get_parentNode(MemorySegment segment, Arena scope) {
        return get_parentNode.ofAddress(get_parentNode$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_childNodes)(IXMLDOMEntity*,IXMLDOMNodeList**);
     * }
     */
    public interface get_childNodes {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_childNodes fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3975.const$0, fi, constants$34.const$0, scope);
        }
        static get_childNodes ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_childNodes$VH() {
        return constants$3975.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_childNodes)(IXMLDOMEntity*,IXMLDOMNodeList**);
     * }
     */
    public static MemorySegment get_childNodes$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3975.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_childNodes)(IXMLDOMEntity*,IXMLDOMNodeList**);
     * }
     */
    public static void get_childNodes$set(MemorySegment seg, MemorySegment x) {
        constants$3975.const$1.set(seg, x);
    }
    public static MemorySegment get_childNodes$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3975.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_childNodes$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3975.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_childNodes get_childNodes(MemorySegment segment, Arena scope) {
        return get_childNodes.ofAddress(get_childNodes$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_firstChild)(IXMLDOMEntity*,IXMLDOMNode**);
     * }
     */
    public interface get_firstChild {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_firstChild fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3975.const$2, fi, constants$34.const$0, scope);
        }
        static get_firstChild ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_firstChild$VH() {
        return constants$3975.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_firstChild)(IXMLDOMEntity*,IXMLDOMNode**);
     * }
     */
    public static MemorySegment get_firstChild$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3975.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_firstChild)(IXMLDOMEntity*,IXMLDOMNode**);
     * }
     */
    public static void get_firstChild$set(MemorySegment seg, MemorySegment x) {
        constants$3975.const$3.set(seg, x);
    }
    public static MemorySegment get_firstChild$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3975.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void get_firstChild$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3975.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_firstChild get_firstChild(MemorySegment segment, Arena scope) {
        return get_firstChild.ofAddress(get_firstChild$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_lastChild)(IXMLDOMEntity*,IXMLDOMNode**);
     * }
     */
    public interface get_lastChild {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_lastChild fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3975.const$4, fi, constants$34.const$0, scope);
        }
        static get_lastChild ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_lastChild$VH() {
        return constants$3975.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_lastChild)(IXMLDOMEntity*,IXMLDOMNode**);
     * }
     */
    public static MemorySegment get_lastChild$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3975.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_lastChild)(IXMLDOMEntity*,IXMLDOMNode**);
     * }
     */
    public static void get_lastChild$set(MemorySegment seg, MemorySegment x) {
        constants$3975.const$5.set(seg, x);
    }
    public static MemorySegment get_lastChild$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3975.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_lastChild$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3975.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_lastChild get_lastChild(MemorySegment segment, Arena scope) {
        return get_lastChild.ofAddress(get_lastChild$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_previousSibling)(IXMLDOMEntity*,IXMLDOMNode**);
     * }
     */
    public interface get_previousSibling {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_previousSibling fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3976.const$0, fi, constants$34.const$0, scope);
        }
        static get_previousSibling ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_previousSibling$VH() {
        return constants$3976.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_previousSibling)(IXMLDOMEntity*,IXMLDOMNode**);
     * }
     */
    public static MemorySegment get_previousSibling$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3976.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_previousSibling)(IXMLDOMEntity*,IXMLDOMNode**);
     * }
     */
    public static void get_previousSibling$set(MemorySegment seg, MemorySegment x) {
        constants$3976.const$1.set(seg, x);
    }
    public static MemorySegment get_previousSibling$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3976.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_previousSibling$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3976.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_previousSibling get_previousSibling(MemorySegment segment, Arena scope) {
        return get_previousSibling.ofAddress(get_previousSibling$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_nextSibling)(IXMLDOMEntity*,IXMLDOMNode**);
     * }
     */
    public interface get_nextSibling {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_nextSibling fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3976.const$2, fi, constants$34.const$0, scope);
        }
        static get_nextSibling ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_nextSibling$VH() {
        return constants$3976.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_nextSibling)(IXMLDOMEntity*,IXMLDOMNode**);
     * }
     */
    public static MemorySegment get_nextSibling$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3976.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_nextSibling)(IXMLDOMEntity*,IXMLDOMNode**);
     * }
     */
    public static void get_nextSibling$set(MemorySegment seg, MemorySegment x) {
        constants$3976.const$3.set(seg, x);
    }
    public static MemorySegment get_nextSibling$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3976.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void get_nextSibling$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3976.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_nextSibling get_nextSibling(MemorySegment segment, Arena scope) {
        return get_nextSibling.ofAddress(get_nextSibling$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_attributes)(IXMLDOMEntity*,IXMLDOMNamedNodeMap**);
     * }
     */
    public interface get_attributes {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_attributes fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3976.const$4, fi, constants$34.const$0, scope);
        }
        static get_attributes ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_attributes$VH() {
        return constants$3976.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_attributes)(IXMLDOMEntity*,IXMLDOMNamedNodeMap**);
     * }
     */
    public static MemorySegment get_attributes$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3976.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_attributes)(IXMLDOMEntity*,IXMLDOMNamedNodeMap**);
     * }
     */
    public static void get_attributes$set(MemorySegment seg, MemorySegment x) {
        constants$3976.const$5.set(seg, x);
    }
    public static MemorySegment get_attributes$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3976.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_attributes$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3976.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_attributes get_attributes(MemorySegment segment, Arena scope) {
        return get_attributes.ofAddress(get_attributes$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*insertBefore)(IXMLDOMEntity*,IXMLDOMNode*,VARIANT,IXMLDOMNode**);
     * }
     */
    public interface insertBefore {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(insertBefore fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3977.const$0, fi, constants$3755.const$3, scope);
        }
        static insertBefore ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)constants$3755.const$5.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle insertBefore$VH() {
        return constants$3977.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*insertBefore)(IXMLDOMEntity*,IXMLDOMNode*,VARIANT,IXMLDOMNode**);
     * }
     */
    public static MemorySegment insertBefore$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3977.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*insertBefore)(IXMLDOMEntity*,IXMLDOMNode*,VARIANT,IXMLDOMNode**);
     * }
     */
    public static void insertBefore$set(MemorySegment seg, MemorySegment x) {
        constants$3977.const$1.set(seg, x);
    }
    public static MemorySegment insertBefore$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3977.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void insertBefore$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3977.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static insertBefore insertBefore(MemorySegment segment, Arena scope) {
        return insertBefore.ofAddress(insertBefore$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*replaceChild)(IXMLDOMEntity*,IXMLDOMNode*,IXMLDOMNode*,IXMLDOMNode**);
     * }
     */
    public interface replaceChild {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(replaceChild fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3977.const$2, fi, constants$1.const$3, scope);
        }
        static replaceChild ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)constants$55.const$1.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle replaceChild$VH() {
        return constants$3977.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*replaceChild)(IXMLDOMEntity*,IXMLDOMNode*,IXMLDOMNode*,IXMLDOMNode**);
     * }
     */
    public static MemorySegment replaceChild$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3977.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*replaceChild)(IXMLDOMEntity*,IXMLDOMNode*,IXMLDOMNode*,IXMLDOMNode**);
     * }
     */
    public static void replaceChild$set(MemorySegment seg, MemorySegment x) {
        constants$3977.const$3.set(seg, x);
    }
    public static MemorySegment replaceChild$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3977.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void replaceChild$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3977.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static replaceChild replaceChild(MemorySegment segment, Arena scope) {
        return replaceChild.ofAddress(replaceChild$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*removeChild)(IXMLDOMEntity*,IXMLDOMNode*,IXMLDOMNode**);
     * }
     */
    public interface removeChild {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(removeChild fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3977.const$4, fi, constants$37.const$3, scope);
        }
        static removeChild ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle removeChild$VH() {
        return constants$3977.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*removeChild)(IXMLDOMEntity*,IXMLDOMNode*,IXMLDOMNode**);
     * }
     */
    public static MemorySegment removeChild$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3977.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*removeChild)(IXMLDOMEntity*,IXMLDOMNode*,IXMLDOMNode**);
     * }
     */
    public static void removeChild$set(MemorySegment seg, MemorySegment x) {
        constants$3977.const$5.set(seg, x);
    }
    public static MemorySegment removeChild$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3977.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void removeChild$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3977.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static removeChild removeChild(MemorySegment segment, Arena scope) {
        return removeChild.ofAddress(removeChild$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*appendChild)(IXMLDOMEntity*,IXMLDOMNode*,IXMLDOMNode**);
     * }
     */
    public interface appendChild {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(appendChild fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3978.const$0, fi, constants$37.const$3, scope);
        }
        static appendChild ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle appendChild$VH() {
        return constants$3978.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*appendChild)(IXMLDOMEntity*,IXMLDOMNode*,IXMLDOMNode**);
     * }
     */
    public static MemorySegment appendChild$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3978.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*appendChild)(IXMLDOMEntity*,IXMLDOMNode*,IXMLDOMNode**);
     * }
     */
    public static void appendChild$set(MemorySegment seg, MemorySegment x) {
        constants$3978.const$1.set(seg, x);
    }
    public static MemorySegment appendChild$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3978.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void appendChild$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3978.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static appendChild appendChild(MemorySegment segment, Arena scope) {
        return appendChild.ofAddress(appendChild$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*hasChildNodes)(IXMLDOMEntity*,VARIANT_BOOL*);
     * }
     */
    public interface hasChildNodes {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(hasChildNodes fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3978.const$2, fi, constants$34.const$0, scope);
        }
        static hasChildNodes ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle hasChildNodes$VH() {
        return constants$3978.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*hasChildNodes)(IXMLDOMEntity*,VARIANT_BOOL*);
     * }
     */
    public static MemorySegment hasChildNodes$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3978.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*hasChildNodes)(IXMLDOMEntity*,VARIANT_BOOL*);
     * }
     */
    public static void hasChildNodes$set(MemorySegment seg, MemorySegment x) {
        constants$3978.const$3.set(seg, x);
    }
    public static MemorySegment hasChildNodes$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3978.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void hasChildNodes$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3978.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static hasChildNodes hasChildNodes(MemorySegment segment, Arena scope) {
        return hasChildNodes.ofAddress(hasChildNodes$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_ownerDocument)(IXMLDOMEntity*,IXMLDOMDocument**);
     * }
     */
    public interface get_ownerDocument {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_ownerDocument fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3978.const$4, fi, constants$34.const$0, scope);
        }
        static get_ownerDocument ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_ownerDocument$VH() {
        return constants$3978.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_ownerDocument)(IXMLDOMEntity*,IXMLDOMDocument**);
     * }
     */
    public static MemorySegment get_ownerDocument$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3978.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_ownerDocument)(IXMLDOMEntity*,IXMLDOMDocument**);
     * }
     */
    public static void get_ownerDocument$set(MemorySegment seg, MemorySegment x) {
        constants$3978.const$5.set(seg, x);
    }
    public static MemorySegment get_ownerDocument$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3978.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_ownerDocument$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3978.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_ownerDocument get_ownerDocument(MemorySegment segment, Arena scope) {
        return get_ownerDocument.ofAddress(get_ownerDocument$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*cloneNode)(IXMLDOMEntity*,VARIANT_BOOL,IXMLDOMNode**);
     * }
     */
    public interface cloneNode {

        int apply(java.lang.foreign.MemorySegment _x0, short _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(cloneNode fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3979.const$0, fi, constants$647.const$0, scope);
        }
        static cloneNode ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, short __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$3758.const$0.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle cloneNode$VH() {
        return constants$3979.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*cloneNode)(IXMLDOMEntity*,VARIANT_BOOL,IXMLDOMNode**);
     * }
     */
    public static MemorySegment cloneNode$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3979.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*cloneNode)(IXMLDOMEntity*,VARIANT_BOOL,IXMLDOMNode**);
     * }
     */
    public static void cloneNode$set(MemorySegment seg, MemorySegment x) {
        constants$3979.const$1.set(seg, x);
    }
    public static MemorySegment cloneNode$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3979.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void cloneNode$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3979.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static cloneNode cloneNode(MemorySegment segment, Arena scope) {
        return cloneNode.ofAddress(cloneNode$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_nodeTypeString)(IXMLDOMEntity*,BSTR*);
     * }
     */
    public interface get_nodeTypeString {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_nodeTypeString fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3979.const$2, fi, constants$34.const$0, scope);
        }
        static get_nodeTypeString ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_nodeTypeString$VH() {
        return constants$3979.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_nodeTypeString)(IXMLDOMEntity*,BSTR*);
     * }
     */
    public static MemorySegment get_nodeTypeString$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3979.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_nodeTypeString)(IXMLDOMEntity*,BSTR*);
     * }
     */
    public static void get_nodeTypeString$set(MemorySegment seg, MemorySegment x) {
        constants$3979.const$3.set(seg, x);
    }
    public static MemorySegment get_nodeTypeString$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3979.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void get_nodeTypeString$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3979.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_nodeTypeString get_nodeTypeString(MemorySegment segment, Arena scope) {
        return get_nodeTypeString.ofAddress(get_nodeTypeString$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_text)(IXMLDOMEntity*,BSTR*);
     * }
     */
    public interface get_text {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_text fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3979.const$4, fi, constants$34.const$0, scope);
        }
        static get_text ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_text$VH() {
        return constants$3979.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_text)(IXMLDOMEntity*,BSTR*);
     * }
     */
    public static MemorySegment get_text$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3979.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_text)(IXMLDOMEntity*,BSTR*);
     * }
     */
    public static void get_text$set(MemorySegment seg, MemorySegment x) {
        constants$3979.const$5.set(seg, x);
    }
    public static MemorySegment get_text$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3979.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_text$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3979.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_text get_text(MemorySegment segment, Arena scope) {
        return get_text.ofAddress(get_text$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*put_text)(IXMLDOMEntity*,BSTR);
     * }
     */
    public interface put_text {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(put_text fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3980.const$0, fi, constants$34.const$0, scope);
        }
        static put_text ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle put_text$VH() {
        return constants$3980.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*put_text)(IXMLDOMEntity*,BSTR);
     * }
     */
    public static MemorySegment put_text$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3980.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*put_text)(IXMLDOMEntity*,BSTR);
     * }
     */
    public static void put_text$set(MemorySegment seg, MemorySegment x) {
        constants$3980.const$1.set(seg, x);
    }
    public static MemorySegment put_text$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3980.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void put_text$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3980.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static put_text put_text(MemorySegment segment, Arena scope) {
        return put_text.ofAddress(put_text$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_specified)(IXMLDOMEntity*,VARIANT_BOOL*);
     * }
     */
    public interface get_specified {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_specified fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3980.const$2, fi, constants$34.const$0, scope);
        }
        static get_specified ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_specified$VH() {
        return constants$3980.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_specified)(IXMLDOMEntity*,VARIANT_BOOL*);
     * }
     */
    public static MemorySegment get_specified$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3980.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_specified)(IXMLDOMEntity*,VARIANT_BOOL*);
     * }
     */
    public static void get_specified$set(MemorySegment seg, MemorySegment x) {
        constants$3980.const$3.set(seg, x);
    }
    public static MemorySegment get_specified$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3980.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void get_specified$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3980.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_specified get_specified(MemorySegment segment, Arena scope) {
        return get_specified.ofAddress(get_specified$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_definition)(IXMLDOMEntity*,IXMLDOMNode**);
     * }
     */
    public interface get_definition {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_definition fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3980.const$4, fi, constants$34.const$0, scope);
        }
        static get_definition ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_definition$VH() {
        return constants$3980.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_definition)(IXMLDOMEntity*,IXMLDOMNode**);
     * }
     */
    public static MemorySegment get_definition$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3980.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_definition)(IXMLDOMEntity*,IXMLDOMNode**);
     * }
     */
    public static void get_definition$set(MemorySegment seg, MemorySegment x) {
        constants$3980.const$5.set(seg, x);
    }
    public static MemorySegment get_definition$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3980.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_definition$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3980.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_definition get_definition(MemorySegment segment, Arena scope) {
        return get_definition.ofAddress(get_definition$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_nodeTypedValue)(IXMLDOMEntity*,VARIANT*);
     * }
     */
    public interface get_nodeTypedValue {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_nodeTypedValue fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3981.const$0, fi, constants$34.const$0, scope);
        }
        static get_nodeTypedValue ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_nodeTypedValue$VH() {
        return constants$3981.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_nodeTypedValue)(IXMLDOMEntity*,VARIANT*);
     * }
     */
    public static MemorySegment get_nodeTypedValue$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3981.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_nodeTypedValue)(IXMLDOMEntity*,VARIANT*);
     * }
     */
    public static void get_nodeTypedValue$set(MemorySegment seg, MemorySegment x) {
        constants$3981.const$1.set(seg, x);
    }
    public static MemorySegment get_nodeTypedValue$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3981.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_nodeTypedValue$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3981.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_nodeTypedValue get_nodeTypedValue(MemorySegment segment, Arena scope) {
        return get_nodeTypedValue.ofAddress(get_nodeTypedValue$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*put_nodeTypedValue)(IXMLDOMEntity*,VARIANT);
     * }
     */
    public interface put_nodeTypedValue {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(put_nodeTypedValue fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3981.const$2, fi, constants$3752.const$1, scope);
        }
        static put_nodeTypedValue ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$3752.const$3.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle put_nodeTypedValue$VH() {
        return constants$3981.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*put_nodeTypedValue)(IXMLDOMEntity*,VARIANT);
     * }
     */
    public static MemorySegment put_nodeTypedValue$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3981.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*put_nodeTypedValue)(IXMLDOMEntity*,VARIANT);
     * }
     */
    public static void put_nodeTypedValue$set(MemorySegment seg, MemorySegment x) {
        constants$3981.const$3.set(seg, x);
    }
    public static MemorySegment put_nodeTypedValue$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3981.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void put_nodeTypedValue$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3981.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static put_nodeTypedValue put_nodeTypedValue(MemorySegment segment, Arena scope) {
        return put_nodeTypedValue.ofAddress(put_nodeTypedValue$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_dataType)(IXMLDOMEntity*,VARIANT*);
     * }
     */
    public interface get_dataType {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_dataType fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3981.const$4, fi, constants$34.const$0, scope);
        }
        static get_dataType ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_dataType$VH() {
        return constants$3981.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_dataType)(IXMLDOMEntity*,VARIANT*);
     * }
     */
    public static MemorySegment get_dataType$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3981.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_dataType)(IXMLDOMEntity*,VARIANT*);
     * }
     */
    public static void get_dataType$set(MemorySegment seg, MemorySegment x) {
        constants$3981.const$5.set(seg, x);
    }
    public static MemorySegment get_dataType$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3981.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_dataType$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3981.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_dataType get_dataType(MemorySegment segment, Arena scope) {
        return get_dataType.ofAddress(get_dataType$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*put_dataType)(IXMLDOMEntity*,BSTR);
     * }
     */
    public interface put_dataType {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(put_dataType fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3982.const$0, fi, constants$34.const$0, scope);
        }
        static put_dataType ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle put_dataType$VH() {
        return constants$3982.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*put_dataType)(IXMLDOMEntity*,BSTR);
     * }
     */
    public static MemorySegment put_dataType$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3982.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*put_dataType)(IXMLDOMEntity*,BSTR);
     * }
     */
    public static void put_dataType$set(MemorySegment seg, MemorySegment x) {
        constants$3982.const$1.set(seg, x);
    }
    public static MemorySegment put_dataType$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3982.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void put_dataType$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3982.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static put_dataType put_dataType(MemorySegment segment, Arena scope) {
        return put_dataType.ofAddress(put_dataType$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_xml)(IXMLDOMEntity*,BSTR*);
     * }
     */
    public interface get_xml {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_xml fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3982.const$2, fi, constants$34.const$0, scope);
        }
        static get_xml ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_xml$VH() {
        return constants$3982.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_xml)(IXMLDOMEntity*,BSTR*);
     * }
     */
    public static MemorySegment get_xml$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3982.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_xml)(IXMLDOMEntity*,BSTR*);
     * }
     */
    public static void get_xml$set(MemorySegment seg, MemorySegment x) {
        constants$3982.const$3.set(seg, x);
    }
    public static MemorySegment get_xml$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3982.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void get_xml$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3982.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_xml get_xml(MemorySegment segment, Arena scope) {
        return get_xml.ofAddress(get_xml$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*transformNode)(IXMLDOMEntity*,IXMLDOMNode*,BSTR*);
     * }
     */
    public interface transformNode {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(transformNode fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3982.const$4, fi, constants$37.const$3, scope);
        }
        static transformNode ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle transformNode$VH() {
        return constants$3982.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*transformNode)(IXMLDOMEntity*,IXMLDOMNode*,BSTR*);
     * }
     */
    public static MemorySegment transformNode$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3982.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*transformNode)(IXMLDOMEntity*,IXMLDOMNode*,BSTR*);
     * }
     */
    public static void transformNode$set(MemorySegment seg, MemorySegment x) {
        constants$3982.const$5.set(seg, x);
    }
    public static MemorySegment transformNode$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3982.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void transformNode$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3982.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static transformNode transformNode(MemorySegment segment, Arena scope) {
        return transformNode.ofAddress(transformNode$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*selectNodes)(IXMLDOMEntity*,BSTR,IXMLDOMNodeList**);
     * }
     */
    public interface selectNodes {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(selectNodes fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3983.const$0, fi, constants$37.const$3, scope);
        }
        static selectNodes ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle selectNodes$VH() {
        return constants$3983.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*selectNodes)(IXMLDOMEntity*,BSTR,IXMLDOMNodeList**);
     * }
     */
    public static MemorySegment selectNodes$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3983.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*selectNodes)(IXMLDOMEntity*,BSTR,IXMLDOMNodeList**);
     * }
     */
    public static void selectNodes$set(MemorySegment seg, MemorySegment x) {
        constants$3983.const$1.set(seg, x);
    }
    public static MemorySegment selectNodes$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3983.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void selectNodes$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3983.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static selectNodes selectNodes(MemorySegment segment, Arena scope) {
        return selectNodes.ofAddress(selectNodes$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*selectSingleNode)(IXMLDOMEntity*,BSTR,IXMLDOMNode**);
     * }
     */
    public interface selectSingleNode {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(selectSingleNode fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3983.const$2, fi, constants$37.const$3, scope);
        }
        static selectSingleNode ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle selectSingleNode$VH() {
        return constants$3983.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*selectSingleNode)(IXMLDOMEntity*,BSTR,IXMLDOMNode**);
     * }
     */
    public static MemorySegment selectSingleNode$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3983.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*selectSingleNode)(IXMLDOMEntity*,BSTR,IXMLDOMNode**);
     * }
     */
    public static void selectSingleNode$set(MemorySegment seg, MemorySegment x) {
        constants$3983.const$3.set(seg, x);
    }
    public static MemorySegment selectSingleNode$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3983.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void selectSingleNode$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3983.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static selectSingleNode selectSingleNode(MemorySegment segment, Arena scope) {
        return selectSingleNode.ofAddress(selectSingleNode$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_parsed)(IXMLDOMEntity*,VARIANT_BOOL*);
     * }
     */
    public interface get_parsed {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_parsed fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3983.const$4, fi, constants$34.const$0, scope);
        }
        static get_parsed ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_parsed$VH() {
        return constants$3983.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_parsed)(IXMLDOMEntity*,VARIANT_BOOL*);
     * }
     */
    public static MemorySegment get_parsed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3983.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_parsed)(IXMLDOMEntity*,VARIANT_BOOL*);
     * }
     */
    public static void get_parsed$set(MemorySegment seg, MemorySegment x) {
        constants$3983.const$5.set(seg, x);
    }
    public static MemorySegment get_parsed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3983.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_parsed$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3983.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_parsed get_parsed(MemorySegment segment, Arena scope) {
        return get_parsed.ofAddress(get_parsed$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_namespaceURI)(IXMLDOMEntity*,BSTR*);
     * }
     */
    public interface get_namespaceURI {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_namespaceURI fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3984.const$0, fi, constants$34.const$0, scope);
        }
        static get_namespaceURI ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_namespaceURI$VH() {
        return constants$3984.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_namespaceURI)(IXMLDOMEntity*,BSTR*);
     * }
     */
    public static MemorySegment get_namespaceURI$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3984.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_namespaceURI)(IXMLDOMEntity*,BSTR*);
     * }
     */
    public static void get_namespaceURI$set(MemorySegment seg, MemorySegment x) {
        constants$3984.const$1.set(seg, x);
    }
    public static MemorySegment get_namespaceURI$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3984.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_namespaceURI$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3984.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_namespaceURI get_namespaceURI(MemorySegment segment, Arena scope) {
        return get_namespaceURI.ofAddress(get_namespaceURI$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_prefix)(IXMLDOMEntity*,BSTR*);
     * }
     */
    public interface get_prefix {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_prefix fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3984.const$2, fi, constants$34.const$0, scope);
        }
        static get_prefix ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_prefix$VH() {
        return constants$3984.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_prefix)(IXMLDOMEntity*,BSTR*);
     * }
     */
    public static MemorySegment get_prefix$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3984.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_prefix)(IXMLDOMEntity*,BSTR*);
     * }
     */
    public static void get_prefix$set(MemorySegment seg, MemorySegment x) {
        constants$3984.const$3.set(seg, x);
    }
    public static MemorySegment get_prefix$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3984.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void get_prefix$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3984.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_prefix get_prefix(MemorySegment segment, Arena scope) {
        return get_prefix.ofAddress(get_prefix$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_baseName)(IXMLDOMEntity*,BSTR*);
     * }
     */
    public interface get_baseName {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_baseName fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3984.const$4, fi, constants$34.const$0, scope);
        }
        static get_baseName ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_baseName$VH() {
        return constants$3984.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_baseName)(IXMLDOMEntity*,BSTR*);
     * }
     */
    public static MemorySegment get_baseName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3984.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_baseName)(IXMLDOMEntity*,BSTR*);
     * }
     */
    public static void get_baseName$set(MemorySegment seg, MemorySegment x) {
        constants$3984.const$5.set(seg, x);
    }
    public static MemorySegment get_baseName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3984.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_baseName$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3984.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_baseName get_baseName(MemorySegment segment, Arena scope) {
        return get_baseName.ofAddress(get_baseName$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*transformNodeToObject)(IXMLDOMEntity*,IXMLDOMNode*,VARIANT);
     * }
     */
    public interface transformNodeToObject {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(transformNodeToObject fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3985.const$0, fi, constants$3764.const$0, scope);
        }
        static transformNodeToObject ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$3764.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle transformNodeToObject$VH() {
        return constants$3985.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*transformNodeToObject)(IXMLDOMEntity*,IXMLDOMNode*,VARIANT);
     * }
     */
    public static MemorySegment transformNodeToObject$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3985.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*transformNodeToObject)(IXMLDOMEntity*,IXMLDOMNode*,VARIANT);
     * }
     */
    public static void transformNodeToObject$set(MemorySegment seg, MemorySegment x) {
        constants$3985.const$1.set(seg, x);
    }
    public static MemorySegment transformNodeToObject$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3985.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void transformNodeToObject$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3985.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static transformNodeToObject transformNodeToObject(MemorySegment segment, Arena scope) {
        return transformNodeToObject.ofAddress(transformNodeToObject$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_publicId)(IXMLDOMEntity*,VARIANT*);
     * }
     */
    public interface get_publicId {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_publicId fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3985.const$2, fi, constants$34.const$0, scope);
        }
        static get_publicId ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_publicId$VH() {
        return constants$3985.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_publicId)(IXMLDOMEntity*,VARIANT*);
     * }
     */
    public static MemorySegment get_publicId$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3985.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_publicId)(IXMLDOMEntity*,VARIANT*);
     * }
     */
    public static void get_publicId$set(MemorySegment seg, MemorySegment x) {
        constants$3985.const$3.set(seg, x);
    }
    public static MemorySegment get_publicId$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3985.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void get_publicId$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3985.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_publicId get_publicId(MemorySegment segment, Arena scope) {
        return get_publicId.ofAddress(get_publicId$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_systemId)(IXMLDOMEntity*,VARIANT*);
     * }
     */
    public interface get_systemId {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_systemId fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3985.const$4, fi, constants$34.const$0, scope);
        }
        static get_systemId ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_systemId$VH() {
        return constants$3985.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_systemId)(IXMLDOMEntity*,VARIANT*);
     * }
     */
    public static MemorySegment get_systemId$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3985.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_systemId)(IXMLDOMEntity*,VARIANT*);
     * }
     */
    public static void get_systemId$set(MemorySegment seg, MemorySegment x) {
        constants$3985.const$5.set(seg, x);
    }
    public static MemorySegment get_systemId$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3985.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_systemId$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3985.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_systemId get_systemId(MemorySegment segment, Arena scope) {
        return get_systemId.ofAddress(get_systemId$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_notationName)(IXMLDOMEntity*,BSTR*);
     * }
     */
    public interface get_notationName {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_notationName fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3986.const$0, fi, constants$34.const$0, scope);
        }
        static get_notationName ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_notationName$VH() {
        return constants$3986.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_notationName)(IXMLDOMEntity*,BSTR*);
     * }
     */
    public static MemorySegment get_notationName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3986.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_notationName)(IXMLDOMEntity*,BSTR*);
     * }
     */
    public static void get_notationName$set(MemorySegment seg, MemorySegment x) {
        constants$3986.const$1.set(seg, x);
    }
    public static MemorySegment get_notationName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3986.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_notationName$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3986.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_notationName get_notationName(MemorySegment segment, Arena scope) {
        return get_notationName.ofAddress(get_notationName$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * union _RPC_ASYNC_NOTIFICATION_INFO {
 *     struct  APC;
 *     struct  IOC;
 *     struct  HWND;
 *     HANDLE hEvent;
 *     PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
 * };
 * }
 */
public class _RPC_ASYNC_NOTIFICATION_INFO {

    public static MemoryLayout $LAYOUT() {
        return constants$1820.const$0;
    }
    /**
     * {@snippet :
     * struct {
     *     PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
     *     HANDLE hThread;
     * };
     * }
     */
    public static final class APC {

        // Suppresses default constructor, ensuring non-instantiability.
        private APC() {}
        public static MemoryLayout $LAYOUT() {
            return constants$1820.const$1;
        }
        public static VarHandle NotificationRoutine$VH() {
            return constants$1820.const$2;
        }
        /**
         * Getter for field:
         * {@snippet :
         * PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
         * }
         */
        public static MemorySegment NotificationRoutine$get(MemorySegment seg) {
            return (java.lang.foreign.MemorySegment)constants$1820.const$2.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
         * }
         */
        public static void NotificationRoutine$set(MemorySegment seg, MemorySegment x) {
            constants$1820.const$2.set(seg, x);
        }
        public static MemorySegment NotificationRoutine$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemorySegment)constants$1820.const$2.get(seg.asSlice(index*sizeof()));
        }
        public static void NotificationRoutine$set(MemorySegment seg, long index, MemorySegment x) {
            constants$1820.const$2.set(seg.asSlice(index*sizeof()), x);
        }
        public static PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine(MemorySegment segment, Arena scope) {
            return PFN_RPCNOTIFICATION_ROUTINE.ofAddress(NotificationRoutine$get(segment), scope);
        }
        public static VarHandle hThread$VH() {
            return constants$1820.const$3;
        }
        /**
         * Getter for field:
         * {@snippet :
         * HANDLE hThread;
         * }
         */
        public static MemorySegment hThread$get(MemorySegment seg) {
            return (java.lang.foreign.MemorySegment)constants$1820.const$3.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * HANDLE hThread;
         * }
         */
        public static void hThread$set(MemorySegment seg, MemorySegment x) {
            constants$1820.const$3.set(seg, x);
        }
        public static MemorySegment hThread$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemorySegment)constants$1820.const$3.get(seg.asSlice(index*sizeof()));
        }
        public static void hThread$set(MemorySegment seg, long index, MemorySegment x) {
            constants$1820.const$3.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment APC$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    /**
     * {@snippet :
     * struct {
     *     HANDLE hIOPort;
     *     DWORD dwNumberOfBytesTransferred;
     *     DWORD_PTR dwCompletionKey;
     *     LPOVERLAPPED lpOverlapped;
     * };
     * }
     */
    public static final class IOC {

        // Suppresses default constructor, ensuring non-instantiability.
        private IOC() {}
        public static MemoryLayout $LAYOUT() {
            return constants$1820.const$4;
        }
        public static VarHandle hIOPort$VH() {
            return constants$1820.const$5;
        }
        /**
         * Getter for field:
         * {@snippet :
         * HANDLE hIOPort;
         * }
         */
        public static MemorySegment hIOPort$get(MemorySegment seg) {
            return (java.lang.foreign.MemorySegment)constants$1820.const$5.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * HANDLE hIOPort;
         * }
         */
        public static void hIOPort$set(MemorySegment seg, MemorySegment x) {
            constants$1820.const$5.set(seg, x);
        }
        public static MemorySegment hIOPort$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemorySegment)constants$1820.const$5.get(seg.asSlice(index*sizeof()));
        }
        public static void hIOPort$set(MemorySegment seg, long index, MemorySegment x) {
            constants$1820.const$5.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dwNumberOfBytesTransferred$VH() {
            return constants$1821.const$0;
        }
        /**
         * Getter for field:
         * {@snippet :
         * DWORD dwNumberOfBytesTransferred;
         * }
         */
        public static int dwNumberOfBytesTransferred$get(MemorySegment seg) {
            return (int)constants$1821.const$0.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * DWORD dwNumberOfBytesTransferred;
         * }
         */
        public static void dwNumberOfBytesTransferred$set(MemorySegment seg, int x) {
            constants$1821.const$0.set(seg, x);
        }
        public static int dwNumberOfBytesTransferred$get(MemorySegment seg, long index) {
            return (int)constants$1821.const$0.get(seg.asSlice(index*sizeof()));
        }
        public static void dwNumberOfBytesTransferred$set(MemorySegment seg, long index, int x) {
            constants$1821.const$0.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dwCompletionKey$VH() {
            return constants$1821.const$1;
        }
        /**
         * Getter for field:
         * {@snippet :
         * DWORD_PTR dwCompletionKey;
         * }
         */
        public static long dwCompletionKey$get(MemorySegment seg) {
            return (long)constants$1821.const$1.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * DWORD_PTR dwCompletionKey;
         * }
         */
        public static void dwCompletionKey$set(MemorySegment seg, long x) {
            constants$1821.const$1.set(seg, x);
        }
        public static long dwCompletionKey$get(MemorySegment seg, long index) {
            return (long)constants$1821.const$1.get(seg.asSlice(index*sizeof()));
        }
        public static void dwCompletionKey$set(MemorySegment seg, long index, long x) {
            constants$1821.const$1.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle lpOverlapped$VH() {
            return constants$1821.const$2;
        }
        /**
         * Getter for field:
         * {@snippet :
         * LPOVERLAPPED lpOverlapped;
         * }
         */
        public static MemorySegment lpOverlapped$get(MemorySegment seg) {
            return (java.lang.foreign.MemorySegment)constants$1821.const$2.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * LPOVERLAPPED lpOverlapped;
         * }
         */
        public static void lpOverlapped$set(MemorySegment seg, MemorySegment x) {
            constants$1821.const$2.set(seg, x);
        }
        public static MemorySegment lpOverlapped$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemorySegment)constants$1821.const$2.get(seg.asSlice(index*sizeof()));
        }
        public static void lpOverlapped$set(MemorySegment seg, long index, MemorySegment x) {
            constants$1821.const$2.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment IOC$slice(MemorySegment seg) {
        return seg.asSlice(0, 32);
    }
    /**
     * {@snippet :
     * struct {
     *     HWND hWnd;
     *     UINT Msg;
     * };
     * }
     */
    public static final class HWND {

        // Suppresses default constructor, ensuring non-instantiability.
        private HWND() {}
        public static MemoryLayout $LAYOUT() {
            return constants$1821.const$3;
        }
        public static VarHandle hWnd$VH() {
            return constants$1821.const$4;
        }
        /**
         * Getter for field:
         * {@snippet :
         * HWND hWnd;
         * }
         */
        public static MemorySegment hWnd$get(MemorySegment seg) {
            return (java.lang.foreign.MemorySegment)constants$1821.const$4.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * HWND hWnd;
         * }
         */
        public static void hWnd$set(MemorySegment seg, MemorySegment x) {
            constants$1821.const$4.set(seg, x);
        }
        public static MemorySegment hWnd$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemorySegment)constants$1821.const$4.get(seg.asSlice(index*sizeof()));
        }
        public static void hWnd$set(MemorySegment seg, long index, MemorySegment x) {
            constants$1821.const$4.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Msg$VH() {
            return constants$1821.const$5;
        }
        /**
         * Getter for field:
         * {@snippet :
         * UINT Msg;
         * }
         */
        public static int Msg$get(MemorySegment seg) {
            return (int)constants$1821.const$5.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * UINT Msg;
         * }
         */
        public static void Msg$set(MemorySegment seg, int x) {
            constants$1821.const$5.set(seg, x);
        }
        public static int Msg$get(MemorySegment seg, long index) {
            return (int)constants$1821.const$5.get(seg.asSlice(index*sizeof()));
        }
        public static void Msg$set(MemorySegment seg, long index, int x) {
            constants$1821.const$5.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment HWND$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    public static VarHandle hEvent$VH() {
        return constants$1822.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HANDLE hEvent;
     * }
     */
    public static MemorySegment hEvent$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1822.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HANDLE hEvent;
     * }
     */
    public static void hEvent$set(MemorySegment seg, MemorySegment x) {
        constants$1822.const$0.set(seg, x);
    }
    public static MemorySegment hEvent$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1822.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void hEvent$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1822.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle NotificationRoutine$VH() {
        return constants$1822.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
     * }
     */
    public static MemorySegment NotificationRoutine$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1822.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
     * }
     */
    public static void NotificationRoutine$set(MemorySegment seg, MemorySegment x) {
        constants$1822.const$1.set(seg, x);
    }
    public static MemorySegment NotificationRoutine$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1822.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void NotificationRoutine$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1822.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine(MemorySegment segment, Arena scope) {
        return PFN_RPCNOTIFICATION_ROUTINE.ofAddress(NotificationRoutine$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



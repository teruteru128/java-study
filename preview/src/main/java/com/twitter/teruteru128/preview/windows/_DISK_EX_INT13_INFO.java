// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _DISK_EX_INT13_INFO {
 *     WORD ExBufferSize;
 *     WORD ExFlags;
 *     DWORD ExCylinders;
 *     DWORD ExHeads;
 *     DWORD ExSectorsPerTrack;
 *     DWORD64 ExSectorsPerDrive;
 *     WORD ExSectorSize;
 *     WORD ExReserved;
 * };
 * }
 */
public class _DISK_EX_INT13_INFO {

    public static MemoryLayout $LAYOUT() {
        return constants$2544.const$1;
    }
    public static VarHandle ExBufferSize$VH() {
        return constants$2544.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD ExBufferSize;
     * }
     */
    public static short ExBufferSize$get(MemorySegment seg) {
        return (short)constants$2544.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD ExBufferSize;
     * }
     */
    public static void ExBufferSize$set(MemorySegment seg, short x) {
        constants$2544.const$2.set(seg, x);
    }
    public static short ExBufferSize$get(MemorySegment seg, long index) {
        return (short)constants$2544.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void ExBufferSize$set(MemorySegment seg, long index, short x) {
        constants$2544.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ExFlags$VH() {
        return constants$2544.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD ExFlags;
     * }
     */
    public static short ExFlags$get(MemorySegment seg) {
        return (short)constants$2544.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD ExFlags;
     * }
     */
    public static void ExFlags$set(MemorySegment seg, short x) {
        constants$2544.const$3.set(seg, x);
    }
    public static short ExFlags$get(MemorySegment seg, long index) {
        return (short)constants$2544.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void ExFlags$set(MemorySegment seg, long index, short x) {
        constants$2544.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ExCylinders$VH() {
        return constants$2544.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD ExCylinders;
     * }
     */
    public static int ExCylinders$get(MemorySegment seg) {
        return (int)constants$2544.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD ExCylinders;
     * }
     */
    public static void ExCylinders$set(MemorySegment seg, int x) {
        constants$2544.const$4.set(seg, x);
    }
    public static int ExCylinders$get(MemorySegment seg, long index) {
        return (int)constants$2544.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void ExCylinders$set(MemorySegment seg, long index, int x) {
        constants$2544.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ExHeads$VH() {
        return constants$2544.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD ExHeads;
     * }
     */
    public static int ExHeads$get(MemorySegment seg) {
        return (int)constants$2544.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD ExHeads;
     * }
     */
    public static void ExHeads$set(MemorySegment seg, int x) {
        constants$2544.const$5.set(seg, x);
    }
    public static int ExHeads$get(MemorySegment seg, long index) {
        return (int)constants$2544.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void ExHeads$set(MemorySegment seg, long index, int x) {
        constants$2544.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ExSectorsPerTrack$VH() {
        return constants$2545.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD ExSectorsPerTrack;
     * }
     */
    public static int ExSectorsPerTrack$get(MemorySegment seg) {
        return (int)constants$2545.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD ExSectorsPerTrack;
     * }
     */
    public static void ExSectorsPerTrack$set(MemorySegment seg, int x) {
        constants$2545.const$0.set(seg, x);
    }
    public static int ExSectorsPerTrack$get(MemorySegment seg, long index) {
        return (int)constants$2545.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void ExSectorsPerTrack$set(MemorySegment seg, long index, int x) {
        constants$2545.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ExSectorsPerDrive$VH() {
        return constants$2545.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 ExSectorsPerDrive;
     * }
     */
    public static long ExSectorsPerDrive$get(MemorySegment seg) {
        return (long)constants$2545.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 ExSectorsPerDrive;
     * }
     */
    public static void ExSectorsPerDrive$set(MemorySegment seg, long x) {
        constants$2545.const$1.set(seg, x);
    }
    public static long ExSectorsPerDrive$get(MemorySegment seg, long index) {
        return (long)constants$2545.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void ExSectorsPerDrive$set(MemorySegment seg, long index, long x) {
        constants$2545.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ExSectorSize$VH() {
        return constants$2545.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD ExSectorSize;
     * }
     */
    public static short ExSectorSize$get(MemorySegment seg) {
        return (short)constants$2545.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD ExSectorSize;
     * }
     */
    public static void ExSectorSize$set(MemorySegment seg, short x) {
        constants$2545.const$2.set(seg, x);
    }
    public static short ExSectorSize$get(MemorySegment seg, long index) {
        return (short)constants$2545.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void ExSectorSize$set(MemorySegment seg, long index, short x) {
        constants$2545.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ExReserved$VH() {
        return constants$2545.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD ExReserved;
     * }
     */
    public static short ExReserved$get(MemorySegment seg) {
        return (short)constants$2545.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD ExReserved;
     * }
     */
    public static void ExReserved$set(MemorySegment seg, short x) {
        constants$2545.const$3.set(seg, x);
    }
    public static short ExReserved$get(MemorySegment seg, long index) {
        return (short)constants$2545.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void ExReserved$set(MemorySegment seg, long index, short x) {
        constants$2545.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



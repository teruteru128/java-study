// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _CSV_QUERY_VOLUME_REDIRECT_STATE {
 *     DWORD MdsNodeId;
 *     DWORD DsNodeId;
 *     BOOLEAN IsDiskConnected;
 *     BOOLEAN ClusterEnableDirectIo;
 *     CSVFS_DISK_CONNECTIVITY DiskConnectivity;
 * };
 * }
 */
public class _CSV_QUERY_VOLUME_REDIRECT_STATE {

    public static MemoryLayout $LAYOUT() {
        return constants$2683.const$3;
    }
    public static VarHandle MdsNodeId$VH() {
        return constants$2683.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD MdsNodeId;
     * }
     */
    public static int MdsNodeId$get(MemorySegment seg) {
        return (int)constants$2683.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD MdsNodeId;
     * }
     */
    public static void MdsNodeId$set(MemorySegment seg, int x) {
        constants$2683.const$4.set(seg, x);
    }
    public static int MdsNodeId$get(MemorySegment seg, long index) {
        return (int)constants$2683.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void MdsNodeId$set(MemorySegment seg, long index, int x) {
        constants$2683.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle DsNodeId$VH() {
        return constants$2683.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD DsNodeId;
     * }
     */
    public static int DsNodeId$get(MemorySegment seg) {
        return (int)constants$2683.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD DsNodeId;
     * }
     */
    public static void DsNodeId$set(MemorySegment seg, int x) {
        constants$2683.const$5.set(seg, x);
    }
    public static int DsNodeId$get(MemorySegment seg, long index) {
        return (int)constants$2683.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void DsNodeId$set(MemorySegment seg, long index, int x) {
        constants$2683.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle IsDiskConnected$VH() {
        return constants$2684.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BOOLEAN IsDiskConnected;
     * }
     */
    public static byte IsDiskConnected$get(MemorySegment seg) {
        return (byte)constants$2684.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BOOLEAN IsDiskConnected;
     * }
     */
    public static void IsDiskConnected$set(MemorySegment seg, byte x) {
        constants$2684.const$0.set(seg, x);
    }
    public static byte IsDiskConnected$get(MemorySegment seg, long index) {
        return (byte)constants$2684.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void IsDiskConnected$set(MemorySegment seg, long index, byte x) {
        constants$2684.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ClusterEnableDirectIo$VH() {
        return constants$2684.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BOOLEAN ClusterEnableDirectIo;
     * }
     */
    public static byte ClusterEnableDirectIo$get(MemorySegment seg) {
        return (byte)constants$2684.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BOOLEAN ClusterEnableDirectIo;
     * }
     */
    public static void ClusterEnableDirectIo$set(MemorySegment seg, byte x) {
        constants$2684.const$1.set(seg, x);
    }
    public static byte ClusterEnableDirectIo$get(MemorySegment seg, long index) {
        return (byte)constants$2684.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void ClusterEnableDirectIo$set(MemorySegment seg, long index, byte x) {
        constants$2684.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle DiskConnectivity$VH() {
        return constants$2684.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * CSVFS_DISK_CONNECTIVITY DiskConnectivity;
     * }
     */
    public static int DiskConnectivity$get(MemorySegment seg) {
        return (int)constants$2684.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * CSVFS_DISK_CONNECTIVITY DiskConnectivity;
     * }
     */
    public static void DiskConnectivity$set(MemorySegment seg, int x) {
        constants$2684.const$2.set(seg, x);
    }
    public static int DiskConnectivity$get(MemorySegment seg, long index) {
        return (int)constants$2684.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void DiskConnectivity$set(MemorySegment seg, long index, int x) {
        constants$2684.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



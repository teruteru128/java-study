// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _MIDL_STUB_DESC {
 *     void* RpcInterfaceInformation;
 *     void* (*pfnAllocate)(size_t);
 *     void (*pfnFree)(void*);
 *     union  IMPLICIT_HANDLE_INFO;
 *     const NDR_RUNDOWN* apfnNdrRundownRoutines;
 *     const GENERIC_BINDING_ROUTINE_PAIR* aGenericBindingRoutinePairs;
 *     const EXPR_EVAL* apfnExprEval;
 *     const XMIT_ROUTINE_QUINTUPLE* aXmitQuintuple;
 *     unsigned char* pFormatTypes;
 *     int fCheckBounds;
 *     unsigned long Version;
 *     MALLOC_FREE_STRUCT* pMallocFreeStruct;
 *     long MIDLVersion;
 *     const COMM_FAULT_OFFSETS* CommFaultOffsets;
 *     const USER_MARSHAL_ROUTINE_QUADRUPLE* aUserMarshalQuadruple;
 *     const NDR_NOTIFY_ROUTINE* NotifyRoutineTable;
 *     ULONG_PTR mFlags;
 *     const NDR_CS_ROUTINES* CsRoutineTables;
 *     void* ProxyServerInfo;
 *     const NDR_EXPR_DESC* pExprInfo;
 * };
 * }
 */
public class _MIDL_STUB_DESC {

    public static MemoryLayout $LAYOUT() {
        return constants$2287.const$5;
    }
    public static VarHandle RpcInterfaceInformation$VH() {
        return constants$2288.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* RpcInterfaceInformation;
     * }
     */
    public static MemorySegment RpcInterfaceInformation$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2288.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* RpcInterfaceInformation;
     * }
     */
    public static void RpcInterfaceInformation$set(MemorySegment seg, MemorySegment x) {
        constants$2288.const$0.set(seg, x);
    }
    public static MemorySegment RpcInterfaceInformation$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2288.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void RpcInterfaceInformation$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2288.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * void* (*pfnAllocate)(size_t);
     * }
     */
    public interface pfnAllocate {

        java.lang.foreign.MemorySegment apply(long Size);
        static MemorySegment allocate(pfnAllocate fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2288.const$1, fi, constants$1977.const$2, scope);
        }
        static pfnAllocate ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (long _Size) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$1977.const$4.invokeExact(symbol, _Size);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle pfnAllocate$VH() {
        return constants$2288.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* (*pfnAllocate)(size_t);
     * }
     */
    public static MemorySegment pfnAllocate$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2288.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* (*pfnAllocate)(size_t);
     * }
     */
    public static void pfnAllocate$set(MemorySegment seg, MemorySegment x) {
        constants$2288.const$2.set(seg, x);
    }
    public static MemorySegment pfnAllocate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2288.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void pfnAllocate$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2288.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static pfnAllocate pfnAllocate(MemorySegment segment, Arena scope) {
        return pfnAllocate.ofAddress(pfnAllocate$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*pfnFree)(void*);
     * }
     */
    public interface pfnFree {

        void apply(java.lang.foreign.MemorySegment pParameter);
        static MemorySegment allocate(pfnFree fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2288.const$3, fi, constants$0.const$0, scope);
        }
        static pfnFree ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _pParameter) -> {
                try {
                    constants$496.const$2.invokeExact(symbol, _pParameter);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle pfnFree$VH() {
        return constants$2288.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*pfnFree)(void*);
     * }
     */
    public static MemorySegment pfnFree$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2288.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*pfnFree)(void*);
     * }
     */
    public static void pfnFree$set(MemorySegment seg, MemorySegment x) {
        constants$2288.const$4.set(seg, x);
    }
    public static MemorySegment pfnFree$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2288.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void pfnFree$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2288.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static pfnFree pfnFree(MemorySegment segment, Arena scope) {
        return pfnFree.ofAddress(pfnFree$get(segment), scope);
    }
    /**
     * {@snippet :
     * union {
     *     handle_t* pAutoHandle;
     *     handle_t* pPrimitiveHandle;
     *     PGENERIC_BINDING_INFO pGenericBindingInfo;
     * };
     * }
     */
    public static final class IMPLICIT_HANDLE_INFO {

        // Suppresses default constructor, ensuring non-instantiability.
        private IMPLICIT_HANDLE_INFO() {}
        public static MemoryLayout $LAYOUT() {
            return constants$2288.const$5;
        }
        public static VarHandle pAutoHandle$VH() {
            return constants$2289.const$0;
        }
        /**
         * Getter for field:
         * {@snippet :
         * handle_t* pAutoHandle;
         * }
         */
        public static MemorySegment pAutoHandle$get(MemorySegment seg) {
            return (java.lang.foreign.MemorySegment)constants$2289.const$0.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * handle_t* pAutoHandle;
         * }
         */
        public static void pAutoHandle$set(MemorySegment seg, MemorySegment x) {
            constants$2289.const$0.set(seg, x);
        }
        public static MemorySegment pAutoHandle$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemorySegment)constants$2289.const$0.get(seg.asSlice(index*sizeof()));
        }
        public static void pAutoHandle$set(MemorySegment seg, long index, MemorySegment x) {
            constants$2289.const$0.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle pPrimitiveHandle$VH() {
            return constants$2289.const$1;
        }
        /**
         * Getter for field:
         * {@snippet :
         * handle_t* pPrimitiveHandle;
         * }
         */
        public static MemorySegment pPrimitiveHandle$get(MemorySegment seg) {
            return (java.lang.foreign.MemorySegment)constants$2289.const$1.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * handle_t* pPrimitiveHandle;
         * }
         */
        public static void pPrimitiveHandle$set(MemorySegment seg, MemorySegment x) {
            constants$2289.const$1.set(seg, x);
        }
        public static MemorySegment pPrimitiveHandle$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemorySegment)constants$2289.const$1.get(seg.asSlice(index*sizeof()));
        }
        public static void pPrimitiveHandle$set(MemorySegment seg, long index, MemorySegment x) {
            constants$2289.const$1.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle pGenericBindingInfo$VH() {
            return constants$2289.const$2;
        }
        /**
         * Getter for field:
         * {@snippet :
         * PGENERIC_BINDING_INFO pGenericBindingInfo;
         * }
         */
        public static MemorySegment pGenericBindingInfo$get(MemorySegment seg) {
            return (java.lang.foreign.MemorySegment)constants$2289.const$2.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * PGENERIC_BINDING_INFO pGenericBindingInfo;
         * }
         */
        public static void pGenericBindingInfo$set(MemorySegment seg, MemorySegment x) {
            constants$2289.const$2.set(seg, x);
        }
        public static MemorySegment pGenericBindingInfo$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemorySegment)constants$2289.const$2.get(seg.asSlice(index*sizeof()));
        }
        public static void pGenericBindingInfo$set(MemorySegment seg, long index, MemorySegment x) {
            constants$2289.const$2.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment IMPLICIT_HANDLE_INFO$slice(MemorySegment seg) {
        return seg.asSlice(24, 8);
    }
    public static VarHandle apfnNdrRundownRoutines$VH() {
        return constants$2289.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const NDR_RUNDOWN* apfnNdrRundownRoutines;
     * }
     */
    public static MemorySegment apfnNdrRundownRoutines$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2289.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const NDR_RUNDOWN* apfnNdrRundownRoutines;
     * }
     */
    public static void apfnNdrRundownRoutines$set(MemorySegment seg, MemorySegment x) {
        constants$2289.const$3.set(seg, x);
    }
    public static MemorySegment apfnNdrRundownRoutines$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2289.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void apfnNdrRundownRoutines$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2289.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle aGenericBindingRoutinePairs$VH() {
        return constants$2289.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const GENERIC_BINDING_ROUTINE_PAIR* aGenericBindingRoutinePairs;
     * }
     */
    public static MemorySegment aGenericBindingRoutinePairs$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2289.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const GENERIC_BINDING_ROUTINE_PAIR* aGenericBindingRoutinePairs;
     * }
     */
    public static void aGenericBindingRoutinePairs$set(MemorySegment seg, MemorySegment x) {
        constants$2289.const$4.set(seg, x);
    }
    public static MemorySegment aGenericBindingRoutinePairs$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2289.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void aGenericBindingRoutinePairs$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2289.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle apfnExprEval$VH() {
        return constants$2289.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const EXPR_EVAL* apfnExprEval;
     * }
     */
    public static MemorySegment apfnExprEval$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2289.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const EXPR_EVAL* apfnExprEval;
     * }
     */
    public static void apfnExprEval$set(MemorySegment seg, MemorySegment x) {
        constants$2289.const$5.set(seg, x);
    }
    public static MemorySegment apfnExprEval$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2289.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void apfnExprEval$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2289.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle aXmitQuintuple$VH() {
        return constants$2290.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const XMIT_ROUTINE_QUINTUPLE* aXmitQuintuple;
     * }
     */
    public static MemorySegment aXmitQuintuple$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2290.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const XMIT_ROUTINE_QUINTUPLE* aXmitQuintuple;
     * }
     */
    public static void aXmitQuintuple$set(MemorySegment seg, MemorySegment x) {
        constants$2290.const$0.set(seg, x);
    }
    public static MemorySegment aXmitQuintuple$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2290.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void aXmitQuintuple$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2290.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pFormatTypes$VH() {
        return constants$2290.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char* pFormatTypes;
     * }
     */
    public static MemorySegment pFormatTypes$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2290.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char* pFormatTypes;
     * }
     */
    public static void pFormatTypes$set(MemorySegment seg, MemorySegment x) {
        constants$2290.const$1.set(seg, x);
    }
    public static MemorySegment pFormatTypes$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2290.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void pFormatTypes$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2290.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle fCheckBounds$VH() {
        return constants$2290.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int fCheckBounds;
     * }
     */
    public static int fCheckBounds$get(MemorySegment seg) {
        return (int)constants$2290.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int fCheckBounds;
     * }
     */
    public static void fCheckBounds$set(MemorySegment seg, int x) {
        constants$2290.const$2.set(seg, x);
    }
    public static int fCheckBounds$get(MemorySegment seg, long index) {
        return (int)constants$2290.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void fCheckBounds$set(MemorySegment seg, long index, int x) {
        constants$2290.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Version$VH() {
        return constants$2290.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long Version;
     * }
     */
    public static int Version$get(MemorySegment seg) {
        return (int)constants$2290.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long Version;
     * }
     */
    public static void Version$set(MemorySegment seg, int x) {
        constants$2290.const$3.set(seg, x);
    }
    public static int Version$get(MemorySegment seg, long index) {
        return (int)constants$2290.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, int x) {
        constants$2290.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pMallocFreeStruct$VH() {
        return constants$2290.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * MALLOC_FREE_STRUCT* pMallocFreeStruct;
     * }
     */
    public static MemorySegment pMallocFreeStruct$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2290.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * MALLOC_FREE_STRUCT* pMallocFreeStruct;
     * }
     */
    public static void pMallocFreeStruct$set(MemorySegment seg, MemorySegment x) {
        constants$2290.const$4.set(seg, x);
    }
    public static MemorySegment pMallocFreeStruct$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2290.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void pMallocFreeStruct$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2290.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MIDLVersion$VH() {
        return constants$2290.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long MIDLVersion;
     * }
     */
    public static int MIDLVersion$get(MemorySegment seg) {
        return (int)constants$2290.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long MIDLVersion;
     * }
     */
    public static void MIDLVersion$set(MemorySegment seg, int x) {
        constants$2290.const$5.set(seg, x);
    }
    public static int MIDLVersion$get(MemorySegment seg, long index) {
        return (int)constants$2290.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void MIDLVersion$set(MemorySegment seg, long index, int x) {
        constants$2290.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle CommFaultOffsets$VH() {
        return constants$2291.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const COMM_FAULT_OFFSETS* CommFaultOffsets;
     * }
     */
    public static MemorySegment CommFaultOffsets$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2291.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const COMM_FAULT_OFFSETS* CommFaultOffsets;
     * }
     */
    public static void CommFaultOffsets$set(MemorySegment seg, MemorySegment x) {
        constants$2291.const$0.set(seg, x);
    }
    public static MemorySegment CommFaultOffsets$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2291.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void CommFaultOffsets$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2291.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle aUserMarshalQuadruple$VH() {
        return constants$2291.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const USER_MARSHAL_ROUTINE_QUADRUPLE* aUserMarshalQuadruple;
     * }
     */
    public static MemorySegment aUserMarshalQuadruple$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2291.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const USER_MARSHAL_ROUTINE_QUADRUPLE* aUserMarshalQuadruple;
     * }
     */
    public static void aUserMarshalQuadruple$set(MemorySegment seg, MemorySegment x) {
        constants$2291.const$1.set(seg, x);
    }
    public static MemorySegment aUserMarshalQuadruple$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2291.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void aUserMarshalQuadruple$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2291.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle NotifyRoutineTable$VH() {
        return constants$2291.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const NDR_NOTIFY_ROUTINE* NotifyRoutineTable;
     * }
     */
    public static MemorySegment NotifyRoutineTable$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2291.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const NDR_NOTIFY_ROUTINE* NotifyRoutineTable;
     * }
     */
    public static void NotifyRoutineTable$set(MemorySegment seg, MemorySegment x) {
        constants$2291.const$2.set(seg, x);
    }
    public static MemorySegment NotifyRoutineTable$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2291.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void NotifyRoutineTable$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2291.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle mFlags$VH() {
        return constants$2291.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG_PTR mFlags;
     * }
     */
    public static long mFlags$get(MemorySegment seg) {
        return (long)constants$2291.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG_PTR mFlags;
     * }
     */
    public static void mFlags$set(MemorySegment seg, long x) {
        constants$2291.const$3.set(seg, x);
    }
    public static long mFlags$get(MemorySegment seg, long index) {
        return (long)constants$2291.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void mFlags$set(MemorySegment seg, long index, long x) {
        constants$2291.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle CsRoutineTables$VH() {
        return constants$2291.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const NDR_CS_ROUTINES* CsRoutineTables;
     * }
     */
    public static MemorySegment CsRoutineTables$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2291.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const NDR_CS_ROUTINES* CsRoutineTables;
     * }
     */
    public static void CsRoutineTables$set(MemorySegment seg, MemorySegment x) {
        constants$2291.const$4.set(seg, x);
    }
    public static MemorySegment CsRoutineTables$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2291.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void CsRoutineTables$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2291.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ProxyServerInfo$VH() {
        return constants$2291.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* ProxyServerInfo;
     * }
     */
    public static MemorySegment ProxyServerInfo$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2291.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* ProxyServerInfo;
     * }
     */
    public static void ProxyServerInfo$set(MemorySegment seg, MemorySegment x) {
        constants$2291.const$5.set(seg, x);
    }
    public static MemorySegment ProxyServerInfo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2291.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void ProxyServerInfo$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2291.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pExprInfo$VH() {
        return constants$2292.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const NDR_EXPR_DESC* pExprInfo;
     * }
     */
    public static MemorySegment pExprInfo$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2292.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const NDR_EXPR_DESC* pExprInfo;
     * }
     */
    public static void pExprInfo$set(MemorySegment seg, MemorySegment x) {
        constants$2292.const$0.set(seg, x);
    }
    public static MemorySegment pExprInfo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2292.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void pExprInfo$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2292.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _DISK_PARTITION_INFO {
 *     DWORD SizeOfPartitionInfo;
 *     PARTITION_STYLE PartitionStyle;
 *     union {
 *         struct  Mbr;
 *         struct  Gpt;
 *     };
 * };
 * }
 */
public class _DISK_PARTITION_INFO {

    public static MemoryLayout $LAYOUT() {
        return constants$2546.const$1;
    }
    public static VarHandle SizeOfPartitionInfo$VH() {
        return constants$2546.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD SizeOfPartitionInfo;
     * }
     */
    public static int SizeOfPartitionInfo$get(MemorySegment seg) {
        return (int)constants$2546.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD SizeOfPartitionInfo;
     * }
     */
    public static void SizeOfPartitionInfo$set(MemorySegment seg, int x) {
        constants$2546.const$2.set(seg, x);
    }
    public static int SizeOfPartitionInfo$get(MemorySegment seg, long index) {
        return (int)constants$2546.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void SizeOfPartitionInfo$set(MemorySegment seg, long index, int x) {
        constants$2546.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle PartitionStyle$VH() {
        return constants$2546.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PARTITION_STYLE PartitionStyle;
     * }
     */
    public static int PartitionStyle$get(MemorySegment seg) {
        return (int)constants$2546.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PARTITION_STYLE PartitionStyle;
     * }
     */
    public static void PartitionStyle$set(MemorySegment seg, int x) {
        constants$2546.const$3.set(seg, x);
    }
    public static int PartitionStyle$get(MemorySegment seg, long index) {
        return (int)constants$2546.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void PartitionStyle$set(MemorySegment seg, long index, int x) {
        constants$2546.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
     * struct {
     *     DWORD Signature;
     *     DWORD CheckSum;
     * };
     * }
     */
    public static final class Mbr {

        // Suppresses default constructor, ensuring non-instantiability.
        private Mbr() {}
        public static MemoryLayout $LAYOUT() {
            return constants$2546.const$4;
        }
        public static VarHandle Signature$VH() {
            return constants$2546.const$5;
        }
        /**
         * Getter for field:
         * {@snippet :
         * DWORD Signature;
         * }
         */
        public static int Signature$get(MemorySegment seg) {
            return (int)constants$2546.const$5.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * DWORD Signature;
         * }
         */
        public static void Signature$set(MemorySegment seg, int x) {
            constants$2546.const$5.set(seg, x);
        }
        public static int Signature$get(MemorySegment seg, long index) {
            return (int)constants$2546.const$5.get(seg.asSlice(index*sizeof()));
        }
        public static void Signature$set(MemorySegment seg, long index, int x) {
            constants$2546.const$5.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CheckSum$VH() {
            return constants$2547.const$0;
        }
        /**
         * Getter for field:
         * {@snippet :
         * DWORD CheckSum;
         * }
         */
        public static int CheckSum$get(MemorySegment seg) {
            return (int)constants$2547.const$0.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * DWORD CheckSum;
         * }
         */
        public static void CheckSum$set(MemorySegment seg, int x) {
            constants$2547.const$0.set(seg, x);
        }
        public static int CheckSum$get(MemorySegment seg, long index) {
            return (int)constants$2547.const$0.get(seg.asSlice(index*sizeof()));
        }
        public static void CheckSum$set(MemorySegment seg, long index, int x) {
            constants$2547.const$0.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment Mbr$slice(MemorySegment seg) {
        return seg.asSlice(8, 8);
    }
    /**
     * {@snippet :
     * struct {
     *     GUID DiskId;
     * };
     * }
     */
    public static final class Gpt {

        // Suppresses default constructor, ensuring non-instantiability.
        private Gpt() {}
        public static MemoryLayout $LAYOUT() {
            return constants$2547.const$1;
        }
        public static MemorySegment DiskId$slice(MemorySegment seg) {
            return seg.asSlice(0, 16);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment Gpt$slice(MemorySegment seg) {
        return seg.asSlice(8, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



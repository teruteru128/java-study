// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct ITypeLibVtbl {
 *     HRESULT (*QueryInterface)(ITypeLib*,const IID*,void**);
 *     ULONG (*AddRef)(ITypeLib*);
 *     ULONG (*Release)(ITypeLib*);
 *     UINT (*GetTypeInfoCount)(ITypeLib*);
 *     HRESULT (*GetTypeInfo)(ITypeLib*,UINT,ITypeInfo**);
 *     HRESULT (*GetTypeInfoType)(ITypeLib*,UINT,TYPEKIND*);
 *     HRESULT (*GetTypeInfoOfGuid)(ITypeLib*,const GUID*,ITypeInfo**);
 *     HRESULT (*GetLibAttr)(ITypeLib*,TLIBATTR**);
 *     HRESULT (*GetTypeComp)(ITypeLib*,ITypeComp**);
 *     HRESULT (*GetDocumentation)(ITypeLib*,INT,BSTR*,BSTR*,DWORD*,BSTR*);
 *     HRESULT (*IsName)(ITypeLib*,LPOLESTR,ULONG,BOOL*);
 *     HRESULT (*FindName)(ITypeLib*,LPOLESTR,ULONG,ITypeInfo**,MEMBERID*,USHORT*);
 *     void (*ReleaseTLibAttr)(ITypeLib*,TLIBATTR*);
 * };
 * }
 */
public class ITypeLibVtbl {

    public static MemoryLayout $LAYOUT() {
        return constants$3521.const$2;
    }
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(ITypeLib*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3521.const$3, fi, constants$37.const$3, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle QueryInterface$VH() {
        return constants$3521.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(ITypeLib*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3521.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(ITypeLib*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        constants$3521.const$4.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3521.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3521.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, Arena scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*AddRef)(ITypeLib*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3521.const$5, fi, constants$18.const$5, scope);
        }
        static AddRef ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle AddRef$VH() {
        return constants$3522.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(ITypeLib*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3522.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(ITypeLib*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        constants$3522.const$0.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3522.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3522.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, Arena scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*Release)(ITypeLib*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3522.const$1, fi, constants$18.const$5, scope);
        }
        static Release ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Release$VH() {
        return constants$3522.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(ITypeLib*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3522.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(ITypeLib*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        constants$3522.const$2.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3522.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3522.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, Arena scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    /**
     * {@snippet :
 * UINT (*GetTypeInfoCount)(ITypeLib*);
     * }
     */
    public interface GetTypeInfoCount {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(GetTypeInfoCount fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3522.const$3, fi, constants$18.const$5, scope);
        }
        static GetTypeInfoCount ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetTypeInfoCount$VH() {
        return constants$3522.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * UINT (*GetTypeInfoCount)(ITypeLib*);
     * }
     */
    public static MemorySegment GetTypeInfoCount$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3522.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * UINT (*GetTypeInfoCount)(ITypeLib*);
     * }
     */
    public static void GetTypeInfoCount$set(MemorySegment seg, MemorySegment x) {
        constants$3522.const$4.set(seg, x);
    }
    public static MemorySegment GetTypeInfoCount$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3522.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeInfoCount$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3522.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeInfoCount GetTypeInfoCount(MemorySegment segment, Arena scope) {
        return GetTypeInfoCount.ofAddress(GetTypeInfoCount$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetTypeInfo)(ITypeLib*,UINT,ITypeInfo**);
     * }
     */
    public interface GetTypeInfo {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetTypeInfo fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3522.const$5, fi, constants$485.const$5, scope);
        }
        static GetTypeInfo ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$1770.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetTypeInfo$VH() {
        return constants$3523.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetTypeInfo)(ITypeLib*,UINT,ITypeInfo**);
     * }
     */
    public static MemorySegment GetTypeInfo$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3523.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetTypeInfo)(ITypeLib*,UINT,ITypeInfo**);
     * }
     */
    public static void GetTypeInfo$set(MemorySegment seg, MemorySegment x) {
        constants$3523.const$0.set(seg, x);
    }
    public static MemorySegment GetTypeInfo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3523.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeInfo$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3523.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeInfo GetTypeInfo(MemorySegment segment, Arena scope) {
        return GetTypeInfo.ofAddress(GetTypeInfo$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetTypeInfoType)(ITypeLib*,UINT,TYPEKIND*);
     * }
     */
    public interface GetTypeInfoType {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetTypeInfoType fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3523.const$1, fi, constants$485.const$5, scope);
        }
        static GetTypeInfoType ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$1770.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetTypeInfoType$VH() {
        return constants$3523.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetTypeInfoType)(ITypeLib*,UINT,TYPEKIND*);
     * }
     */
    public static MemorySegment GetTypeInfoType$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3523.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetTypeInfoType)(ITypeLib*,UINT,TYPEKIND*);
     * }
     */
    public static void GetTypeInfoType$set(MemorySegment seg, MemorySegment x) {
        constants$3523.const$2.set(seg, x);
    }
    public static MemorySegment GetTypeInfoType$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3523.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeInfoType$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3523.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeInfoType GetTypeInfoType(MemorySegment segment, Arena scope) {
        return GetTypeInfoType.ofAddress(GetTypeInfoType$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetTypeInfoOfGuid)(ITypeLib*,const GUID*,ITypeInfo**);
     * }
     */
    public interface GetTypeInfoOfGuid {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetTypeInfoOfGuid fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3523.const$3, fi, constants$37.const$3, scope);
        }
        static GetTypeInfoOfGuid ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetTypeInfoOfGuid$VH() {
        return constants$3523.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetTypeInfoOfGuid)(ITypeLib*,const GUID*,ITypeInfo**);
     * }
     */
    public static MemorySegment GetTypeInfoOfGuid$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3523.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetTypeInfoOfGuid)(ITypeLib*,const GUID*,ITypeInfo**);
     * }
     */
    public static void GetTypeInfoOfGuid$set(MemorySegment seg, MemorySegment x) {
        constants$3523.const$4.set(seg, x);
    }
    public static MemorySegment GetTypeInfoOfGuid$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3523.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeInfoOfGuid$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3523.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeInfoOfGuid GetTypeInfoOfGuid(MemorySegment segment, Arena scope) {
        return GetTypeInfoOfGuid.ofAddress(GetTypeInfoOfGuid$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetLibAttr)(ITypeLib*,TLIBATTR**);
     * }
     */
    public interface GetLibAttr {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetLibAttr fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3523.const$5, fi, constants$34.const$0, scope);
        }
        static GetLibAttr ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetLibAttr$VH() {
        return constants$3524.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetLibAttr)(ITypeLib*,TLIBATTR**);
     * }
     */
    public static MemorySegment GetLibAttr$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3524.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetLibAttr)(ITypeLib*,TLIBATTR**);
     * }
     */
    public static void GetLibAttr$set(MemorySegment seg, MemorySegment x) {
        constants$3524.const$0.set(seg, x);
    }
    public static MemorySegment GetLibAttr$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3524.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void GetLibAttr$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3524.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetLibAttr GetLibAttr(MemorySegment segment, Arena scope) {
        return GetLibAttr.ofAddress(GetLibAttr$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetTypeComp)(ITypeLib*,ITypeComp**);
     * }
     */
    public interface GetTypeComp {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetTypeComp fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3524.const$1, fi, constants$34.const$0, scope);
        }
        static GetTypeComp ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetTypeComp$VH() {
        return constants$3524.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetTypeComp)(ITypeLib*,ITypeComp**);
     * }
     */
    public static MemorySegment GetTypeComp$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3524.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetTypeComp)(ITypeLib*,ITypeComp**);
     * }
     */
    public static void GetTypeComp$set(MemorySegment seg, MemorySegment x) {
        constants$3524.const$2.set(seg, x);
    }
    public static MemorySegment GetTypeComp$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3524.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeComp$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3524.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeComp GetTypeComp(MemorySegment segment, Arena scope) {
        return GetTypeComp.ofAddress(GetTypeComp$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetDocumentation)(ITypeLib*,INT,BSTR*,BSTR*,DWORD*,BSTR*);
     * }
     */
    public interface GetDocumentation {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(GetDocumentation fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3524.const$3, fi, constants$2151.const$4, scope);
        }
        static GetDocumentation ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    return (int)constants$2152.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetDocumentation$VH() {
        return constants$3524.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetDocumentation)(ITypeLib*,INT,BSTR*,BSTR*,DWORD*,BSTR*);
     * }
     */
    public static MemorySegment GetDocumentation$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3524.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetDocumentation)(ITypeLib*,INT,BSTR*,BSTR*,DWORD*,BSTR*);
     * }
     */
    public static void GetDocumentation$set(MemorySegment seg, MemorySegment x) {
        constants$3524.const$4.set(seg, x);
    }
    public static MemorySegment GetDocumentation$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3524.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDocumentation$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3524.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDocumentation GetDocumentation(MemorySegment segment, Arena scope) {
        return GetDocumentation.ofAddress(GetDocumentation$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*IsName)(ITypeLib*,LPOLESTR,ULONG,BOOL*);
     * }
     */
    public interface IsName {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(IsName fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3524.const$5, fi, constants$586.const$5, scope);
        }
        static IsName ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)constants$2117.const$1.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle IsName$VH() {
        return constants$3525.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*IsName)(ITypeLib*,LPOLESTR,ULONG,BOOL*);
     * }
     */
    public static MemorySegment IsName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3525.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*IsName)(ITypeLib*,LPOLESTR,ULONG,BOOL*);
     * }
     */
    public static void IsName$set(MemorySegment seg, MemorySegment x) {
        constants$3525.const$0.set(seg, x);
    }
    public static MemorySegment IsName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3525.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void IsName$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3525.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static IsName IsName(MemorySegment segment, Arena scope) {
        return IsName.ofAddress(IsName$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*FindName)(ITypeLib*,LPOLESTR,ULONG,ITypeInfo**,MEMBERID*,USHORT*);
     * }
     */
    public interface FindName {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(FindName fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3525.const$1, fi, constants$608.const$2, scope);
        }
        static FindName ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    return (int)constants$3525.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle FindName$VH() {
        return constants$3525.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*FindName)(ITypeLib*,LPOLESTR,ULONG,ITypeInfo**,MEMBERID*,USHORT*);
     * }
     */
    public static MemorySegment FindName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3525.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*FindName)(ITypeLib*,LPOLESTR,ULONG,ITypeInfo**,MEMBERID*,USHORT*);
     * }
     */
    public static void FindName$set(MemorySegment seg, MemorySegment x) {
        constants$3525.const$3.set(seg, x);
    }
    public static MemorySegment FindName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3525.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void FindName$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3525.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static FindName FindName(MemorySegment segment, Arena scope) {
        return FindName.ofAddress(FindName$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*ReleaseTLibAttr)(ITypeLib*,TLIBATTR*);
     * }
     */
    public interface ReleaseTLibAttr {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(ReleaseTLibAttr fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3525.const$4, fi, constants$469.const$2, scope);
        }
        static ReleaseTLibAttr ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    constants$531.const$5.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle ReleaseTLibAttr$VH() {
        return constants$3525.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*ReleaseTLibAttr)(ITypeLib*,TLIBATTR*);
     * }
     */
    public static MemorySegment ReleaseTLibAttr$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3525.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*ReleaseTLibAttr)(ITypeLib*,TLIBATTR*);
     * }
     */
    public static void ReleaseTLibAttr$set(MemorySegment seg, MemorySegment x) {
        constants$3525.const$5.set(seg, x);
    }
    public static MemorySegment ReleaseTLibAttr$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3525.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void ReleaseTLibAttr$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3525.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static ReleaseTLibAttr ReleaseTLibAttr(MemorySegment segment, Arena scope) {
        return ReleaseTLibAttr.ofAddress(ReleaseTLibAttr$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



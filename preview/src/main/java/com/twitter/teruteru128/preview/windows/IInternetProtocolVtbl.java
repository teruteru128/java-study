// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IInternetProtocolVtbl {
 *     HRESULT (*QueryInterface)(IInternetProtocol*,const IID*,void**);
 *     ULONG (*AddRef)(IInternetProtocol*);
 *     ULONG (*Release)(IInternetProtocol*);
 *     HRESULT (*Start)(IInternetProtocol*,LPCWSTR,IInternetProtocolSink*,IInternetBindInfo*,DWORD,HANDLE_PTR);
 *     HRESULT (*Continue)(IInternetProtocol*,PROTOCOLDATA*);
 *     HRESULT (*Abort)(IInternetProtocol*,HRESULT,DWORD);
 *     HRESULT (*Terminate)(IInternetProtocol*,DWORD);
 *     HRESULT (*Suspend)(IInternetProtocol*);
 *     HRESULT (*Resume)(IInternetProtocol*);
 *     HRESULT (*Read)(IInternetProtocol*,void*,ULONG,ULONG*);
 *     HRESULT (*Seek)(IInternetProtocol*,LARGE_INTEGER,DWORD,ULARGE_INTEGER*);
 *     HRESULT (*LockRequest)(IInternetProtocol*,DWORD);
 *     HRESULT (*UnlockRequest)(IInternetProtocol*);
 * };
 * }
 */
public class IInternetProtocolVtbl {

    public static MemoryLayout $LAYOUT() {
        return constants$4207.const$2;
    }
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IInternetProtocol*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4207.const$3, fi, constants$37.const$3, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle QueryInterface$VH() {
        return constants$4207.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IInternetProtocol*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4207.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IInternetProtocol*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        constants$4207.const$4.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4207.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4207.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, Arena scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*AddRef)(IInternetProtocol*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4207.const$5, fi, constants$18.const$5, scope);
        }
        static AddRef ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle AddRef$VH() {
        return constants$4208.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IInternetProtocol*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4208.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IInternetProtocol*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        constants$4208.const$0.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4208.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4208.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, Arena scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*Release)(IInternetProtocol*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4208.const$1, fi, constants$18.const$5, scope);
        }
        static Release ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Release$VH() {
        return constants$4208.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IInternetProtocol*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4208.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IInternetProtocol*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        constants$4208.const$2.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4208.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4208.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, Arena scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*Start)(IInternetProtocol*,LPCWSTR,IInternetProtocolSink*,IInternetBindInfo*,DWORD,HANDLE_PTR);
     * }
     */
    public interface Start {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, int _x4, long _x5);
        static MemorySegment allocate(Start fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4208.const$3, fi, constants$4204.const$1, scope);
        }
        static Start ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, int __x4, long __x5) -> {
                try {
                    return (int)constants$4204.const$3.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Start$VH() {
        return constants$4208.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Start)(IInternetProtocol*,LPCWSTR,IInternetProtocolSink*,IInternetBindInfo*,DWORD,HANDLE_PTR);
     * }
     */
    public static MemorySegment Start$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4208.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Start)(IInternetProtocol*,LPCWSTR,IInternetProtocolSink*,IInternetBindInfo*,DWORD,HANDLE_PTR);
     * }
     */
    public static void Start$set(MemorySegment seg, MemorySegment x) {
        constants$4208.const$4.set(seg, x);
    }
    public static MemorySegment Start$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4208.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void Start$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4208.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static Start Start(MemorySegment segment, Arena scope) {
        return Start.ofAddress(Start$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*Continue)(IInternetProtocol*,PROTOCOLDATA*);
     * }
     */
    public interface Continue {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(Continue fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4208.const$5, fi, constants$34.const$0, scope);
        }
        static Continue ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Continue$VH() {
        return constants$4209.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Continue)(IInternetProtocol*,PROTOCOLDATA*);
     * }
     */
    public static MemorySegment Continue$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4209.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Continue)(IInternetProtocol*,PROTOCOLDATA*);
     * }
     */
    public static void Continue$set(MemorySegment seg, MemorySegment x) {
        constants$4209.const$0.set(seg, x);
    }
    public static MemorySegment Continue$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4209.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Continue$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4209.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static Continue Continue(MemorySegment segment, Arena scope) {
        return Continue.ofAddress(Continue$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*Abort)(IInternetProtocol*,HRESULT,DWORD);
     * }
     */
    public interface Abort {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2);
        static MemorySegment allocate(Abort fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4209.const$1, fi, constants$67.const$1, scope);
        }
        static Abort ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2) -> {
                try {
                    return (int)constants$3030.const$1.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Abort$VH() {
        return constants$4209.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Abort)(IInternetProtocol*,HRESULT,DWORD);
     * }
     */
    public static MemorySegment Abort$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4209.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Abort)(IInternetProtocol*,HRESULT,DWORD);
     * }
     */
    public static void Abort$set(MemorySegment seg, MemorySegment x) {
        constants$4209.const$2.set(seg, x);
    }
    public static MemorySegment Abort$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4209.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void Abort$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4209.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static Abort Abort(MemorySegment segment, Arena scope) {
        return Abort.ofAddress(Abort$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*Terminate)(IInternetProtocol*,DWORD);
     * }
     */
    public interface Terminate {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(Terminate fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4209.const$3, fi, constants$65.const$2, scope);
        }
        static Terminate ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)constants$800.const$4.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Terminate$VH() {
        return constants$4209.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Terminate)(IInternetProtocol*,DWORD);
     * }
     */
    public static MemorySegment Terminate$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4209.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Terminate)(IInternetProtocol*,DWORD);
     * }
     */
    public static void Terminate$set(MemorySegment seg, MemorySegment x) {
        constants$4209.const$4.set(seg, x);
    }
    public static MemorySegment Terminate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4209.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void Terminate$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4209.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static Terminate Terminate(MemorySegment segment, Arena scope) {
        return Terminate.ofAddress(Terminate$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*Suspend)(IInternetProtocol*);
     * }
     */
    public interface Suspend {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Suspend fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4209.const$5, fi, constants$18.const$5, scope);
        }
        static Suspend ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Suspend$VH() {
        return constants$4210.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Suspend)(IInternetProtocol*);
     * }
     */
    public static MemorySegment Suspend$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4210.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Suspend)(IInternetProtocol*);
     * }
     */
    public static void Suspend$set(MemorySegment seg, MemorySegment x) {
        constants$4210.const$0.set(seg, x);
    }
    public static MemorySegment Suspend$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4210.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Suspend$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4210.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static Suspend Suspend(MemorySegment segment, Arena scope) {
        return Suspend.ofAddress(Suspend$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*Resume)(IInternetProtocol*);
     * }
     */
    public interface Resume {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Resume fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4210.const$1, fi, constants$18.const$5, scope);
        }
        static Resume ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Resume$VH() {
        return constants$4210.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Resume)(IInternetProtocol*);
     * }
     */
    public static MemorySegment Resume$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4210.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Resume)(IInternetProtocol*);
     * }
     */
    public static void Resume$set(MemorySegment seg, MemorySegment x) {
        constants$4210.const$2.set(seg, x);
    }
    public static MemorySegment Resume$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4210.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void Resume$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4210.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static Resume Resume(MemorySegment segment, Arena scope) {
        return Resume.ofAddress(Resume$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*Read)(IInternetProtocol*,void*,ULONG,ULONG*);
     * }
     */
    public interface Read {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(Read fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4210.const$3, fi, constants$586.const$5, scope);
        }
        static Read ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)constants$2117.const$1.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Read$VH() {
        return constants$4210.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Read)(IInternetProtocol*,void*,ULONG,ULONG*);
     * }
     */
    public static MemorySegment Read$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4210.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Read)(IInternetProtocol*,void*,ULONG,ULONG*);
     * }
     */
    public static void Read$set(MemorySegment seg, MemorySegment x) {
        constants$4210.const$4.set(seg, x);
    }
    public static MemorySegment Read$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4210.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void Read$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4210.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static Read Read(MemorySegment segment, Arena scope) {
        return Read.ofAddress(Read$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*Seek)(IInternetProtocol*,LARGE_INTEGER,DWORD,ULARGE_INTEGER*);
     * }
     */
    public interface Seek {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(Seek fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4210.const$5, fi, constants$3052.const$0, scope);
        }
        static Seek ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)constants$3052.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Seek$VH() {
        return constants$4211.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Seek)(IInternetProtocol*,LARGE_INTEGER,DWORD,ULARGE_INTEGER*);
     * }
     */
    public static MemorySegment Seek$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4211.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Seek)(IInternetProtocol*,LARGE_INTEGER,DWORD,ULARGE_INTEGER*);
     * }
     */
    public static void Seek$set(MemorySegment seg, MemorySegment x) {
        constants$4211.const$0.set(seg, x);
    }
    public static MemorySegment Seek$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4211.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Seek$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4211.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static Seek Seek(MemorySegment segment, Arena scope) {
        return Seek.ofAddress(Seek$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*LockRequest)(IInternetProtocol*,DWORD);
     * }
     */
    public interface LockRequest {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(LockRequest fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4211.const$1, fi, constants$65.const$2, scope);
        }
        static LockRequest ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)constants$800.const$4.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle LockRequest$VH() {
        return constants$4211.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*LockRequest)(IInternetProtocol*,DWORD);
     * }
     */
    public static MemorySegment LockRequest$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4211.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*LockRequest)(IInternetProtocol*,DWORD);
     * }
     */
    public static void LockRequest$set(MemorySegment seg, MemorySegment x) {
        constants$4211.const$2.set(seg, x);
    }
    public static MemorySegment LockRequest$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4211.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void LockRequest$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4211.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static LockRequest LockRequest(MemorySegment segment, Arena scope) {
        return LockRequest.ofAddress(LockRequest$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*UnlockRequest)(IInternetProtocol*);
     * }
     */
    public interface UnlockRequest {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(UnlockRequest fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4211.const$3, fi, constants$18.const$5, scope);
        }
        static UnlockRequest ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle UnlockRequest$VH() {
        return constants$4211.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*UnlockRequest)(IInternetProtocol*);
     * }
     */
    public static MemorySegment UnlockRequest$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4211.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*UnlockRequest)(IInternetProtocol*);
     * }
     */
    public static void UnlockRequest$set(MemorySegment seg, MemorySegment x) {
        constants$4211.const$4.set(seg, x);
    }
    public static MemorySegment UnlockRequest$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4211.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void UnlockRequest$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4211.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static UnlockRequest UnlockRequest(MemorySegment segment, Arena scope) {
        return UnlockRequest.ofAddress(UnlockRequest$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



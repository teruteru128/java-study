// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tagFUNCDESC {
 *     MEMBERID memid;
 *     SCODE* lprgscode;
 *     ELEMDESC* lprgelemdescParam;
 *     FUNCKIND funckind;
 *     INVOKEKIND invkind;
 *     CALLCONV callconv;
 *     SHORT cParams;
 *     SHORT cParamsOpt;
 *     SHORT oVft;
 *     SHORT cScodes;
 *     ELEMDESC elemdescFunc;
 *     WORD wFuncFlags;
 * };
 * }
 */
public class tagFUNCDESC {

    public static MemoryLayout $LAYOUT() {
        return constants$3440.const$3;
    }
    public static VarHandle memid$VH() {
        return constants$3440.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * MEMBERID memid;
     * }
     */
    public static int memid$get(MemorySegment seg) {
        return (int)constants$3440.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * MEMBERID memid;
     * }
     */
    public static void memid$set(MemorySegment seg, int x) {
        constants$3440.const$4.set(seg, x);
    }
    public static int memid$get(MemorySegment seg, long index) {
        return (int)constants$3440.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void memid$set(MemorySegment seg, long index, int x) {
        constants$3440.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lprgscode$VH() {
        return constants$3440.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * SCODE* lprgscode;
     * }
     */
    public static MemorySegment lprgscode$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3440.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * SCODE* lprgscode;
     * }
     */
    public static void lprgscode$set(MemorySegment seg, MemorySegment x) {
        constants$3440.const$5.set(seg, x);
    }
    public static MemorySegment lprgscode$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3440.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void lprgscode$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3440.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lprgelemdescParam$VH() {
        return constants$3441.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ELEMDESC* lprgelemdescParam;
     * }
     */
    public static MemorySegment lprgelemdescParam$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3441.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ELEMDESC* lprgelemdescParam;
     * }
     */
    public static void lprgelemdescParam$set(MemorySegment seg, MemorySegment x) {
        constants$3441.const$0.set(seg, x);
    }
    public static MemorySegment lprgelemdescParam$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3441.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void lprgelemdescParam$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3441.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle funckind$VH() {
        return constants$3441.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * FUNCKIND funckind;
     * }
     */
    public static int funckind$get(MemorySegment seg) {
        return (int)constants$3441.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * FUNCKIND funckind;
     * }
     */
    public static void funckind$set(MemorySegment seg, int x) {
        constants$3441.const$1.set(seg, x);
    }
    public static int funckind$get(MemorySegment seg, long index) {
        return (int)constants$3441.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void funckind$set(MemorySegment seg, long index, int x) {
        constants$3441.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle invkind$VH() {
        return constants$3441.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * INVOKEKIND invkind;
     * }
     */
    public static int invkind$get(MemorySegment seg) {
        return (int)constants$3441.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * INVOKEKIND invkind;
     * }
     */
    public static void invkind$set(MemorySegment seg, int x) {
        constants$3441.const$2.set(seg, x);
    }
    public static int invkind$get(MemorySegment seg, long index) {
        return (int)constants$3441.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void invkind$set(MemorySegment seg, long index, int x) {
        constants$3441.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle callconv$VH() {
        return constants$3441.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * CALLCONV callconv;
     * }
     */
    public static int callconv$get(MemorySegment seg) {
        return (int)constants$3441.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * CALLCONV callconv;
     * }
     */
    public static void callconv$set(MemorySegment seg, int x) {
        constants$3441.const$3.set(seg, x);
    }
    public static int callconv$get(MemorySegment seg, long index) {
        return (int)constants$3441.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void callconv$set(MemorySegment seg, long index, int x) {
        constants$3441.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cParams$VH() {
        return constants$3441.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * SHORT cParams;
     * }
     */
    public static short cParams$get(MemorySegment seg) {
        return (short)constants$3441.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * SHORT cParams;
     * }
     */
    public static void cParams$set(MemorySegment seg, short x) {
        constants$3441.const$4.set(seg, x);
    }
    public static short cParams$get(MemorySegment seg, long index) {
        return (short)constants$3441.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void cParams$set(MemorySegment seg, long index, short x) {
        constants$3441.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cParamsOpt$VH() {
        return constants$3441.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * SHORT cParamsOpt;
     * }
     */
    public static short cParamsOpt$get(MemorySegment seg) {
        return (short)constants$3441.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * SHORT cParamsOpt;
     * }
     */
    public static void cParamsOpt$set(MemorySegment seg, short x) {
        constants$3441.const$5.set(seg, x);
    }
    public static short cParamsOpt$get(MemorySegment seg, long index) {
        return (short)constants$3441.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void cParamsOpt$set(MemorySegment seg, long index, short x) {
        constants$3441.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle oVft$VH() {
        return constants$3442.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * SHORT oVft;
     * }
     */
    public static short oVft$get(MemorySegment seg) {
        return (short)constants$3442.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * SHORT oVft;
     * }
     */
    public static void oVft$set(MemorySegment seg, short x) {
        constants$3442.const$0.set(seg, x);
    }
    public static short oVft$get(MemorySegment seg, long index) {
        return (short)constants$3442.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void oVft$set(MemorySegment seg, long index, short x) {
        constants$3442.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cScodes$VH() {
        return constants$3442.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * SHORT cScodes;
     * }
     */
    public static short cScodes$get(MemorySegment seg) {
        return (short)constants$3442.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * SHORT cScodes;
     * }
     */
    public static void cScodes$set(MemorySegment seg, short x) {
        constants$3442.const$1.set(seg, x);
    }
    public static short cScodes$get(MemorySegment seg, long index) {
        return (short)constants$3442.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void cScodes$set(MemorySegment seg, long index, short x) {
        constants$3442.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment elemdescFunc$slice(MemorySegment seg) {
        return seg.asSlice(48, 32);
    }
    public static VarHandle wFuncFlags$VH() {
        return constants$3442.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD wFuncFlags;
     * }
     */
    public static short wFuncFlags$get(MemorySegment seg) {
        return (short)constants$3442.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD wFuncFlags;
     * }
     */
    public static void wFuncFlags$set(MemorySegment seg, short x) {
        constants$3442.const$2.set(seg, x);
    }
    public static short wFuncFlags$get(MemorySegment seg, long index) {
        return (short)constants$3442.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void wFuncFlags$set(MemorySegment seg, long index, short x) {
        constants$3442.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



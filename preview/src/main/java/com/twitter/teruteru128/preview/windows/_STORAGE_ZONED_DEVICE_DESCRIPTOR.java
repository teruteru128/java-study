// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _STORAGE_ZONED_DEVICE_DESCRIPTOR {
 *     DWORD Version;
 *     DWORD Size;
 *     STORAGE_ZONED_DEVICE_TYPES DeviceType;
 *     DWORD ZoneCount;
 *     union  ZoneAttributes;
 *     DWORD ZoneGroupCount;
 *     STORAGE_ZONE_GROUP ZoneGroup[1];
 * };
 * }
 */
public class _STORAGE_ZONED_DEVICE_DESCRIPTOR {

    public static MemoryLayout $LAYOUT() {
        return constants$2431.const$1;
    }
    public static VarHandle Version$VH() {
        return constants$2431.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Version;
     * }
     */
    public static int Version$get(MemorySegment seg) {
        return (int)constants$2431.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Version;
     * }
     */
    public static void Version$set(MemorySegment seg, int x) {
        constants$2431.const$2.set(seg, x);
    }
    public static int Version$get(MemorySegment seg, long index) {
        return (int)constants$2431.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, int x) {
        constants$2431.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Size$VH() {
        return constants$2431.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Size;
     * }
     */
    public static int Size$get(MemorySegment seg) {
        return (int)constants$2431.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Size;
     * }
     */
    public static void Size$set(MemorySegment seg, int x) {
        constants$2431.const$3.set(seg, x);
    }
    public static int Size$get(MemorySegment seg, long index) {
        return (int)constants$2431.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void Size$set(MemorySegment seg, long index, int x) {
        constants$2431.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle DeviceType$VH() {
        return constants$2431.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * STORAGE_ZONED_DEVICE_TYPES DeviceType;
     * }
     */
    public static int DeviceType$get(MemorySegment seg) {
        return (int)constants$2431.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * STORAGE_ZONED_DEVICE_TYPES DeviceType;
     * }
     */
    public static void DeviceType$set(MemorySegment seg, int x) {
        constants$2431.const$4.set(seg, x);
    }
    public static int DeviceType$get(MemorySegment seg, long index) {
        return (int)constants$2431.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void DeviceType$set(MemorySegment seg, long index, int x) {
        constants$2431.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ZoneCount$VH() {
        return constants$2431.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD ZoneCount;
     * }
     */
    public static int ZoneCount$get(MemorySegment seg) {
        return (int)constants$2431.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD ZoneCount;
     * }
     */
    public static void ZoneCount$set(MemorySegment seg, int x) {
        constants$2431.const$5.set(seg, x);
    }
    public static int ZoneCount$get(MemorySegment seg, long index) {
        return (int)constants$2431.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void ZoneCount$set(MemorySegment seg, long index, int x) {
        constants$2431.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
     * union {
     *     struct  SequentialRequiredZone;
     *     struct  SequentialPreferredZone;
     * };
     * }
     */
    public static final class ZoneAttributes {

        // Suppresses default constructor, ensuring non-instantiability.
        private ZoneAttributes() {}
        public static MemoryLayout $LAYOUT() {
            return constants$2432.const$0;
        }
        /**
         * {@snippet :
         * struct {
         *     DWORD MaxOpenZoneCount;
         *     BOOLEAN UnrestrictedRead;
         *     BYTE Reserved[3];
         * };
         * }
         */
        public static final class SequentialRequiredZone {

            // Suppresses default constructor, ensuring non-instantiability.
            private SequentialRequiredZone() {}
            public static MemoryLayout $LAYOUT() {
                return constants$2432.const$1;
            }
            public static VarHandle MaxOpenZoneCount$VH() {
                return constants$2432.const$2;
            }
            /**
             * Getter for field:
             * {@snippet :
             * DWORD MaxOpenZoneCount;
             * }
             */
            public static int MaxOpenZoneCount$get(MemorySegment seg) {
                return (int)constants$2432.const$2.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * DWORD MaxOpenZoneCount;
             * }
             */
            public static void MaxOpenZoneCount$set(MemorySegment seg, int x) {
                constants$2432.const$2.set(seg, x);
            }
            public static int MaxOpenZoneCount$get(MemorySegment seg, long index) {
                return (int)constants$2432.const$2.get(seg.asSlice(index*sizeof()));
            }
            public static void MaxOpenZoneCount$set(MemorySegment seg, long index, int x) {
                constants$2432.const$2.set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle UnrestrictedRead$VH() {
                return constants$2432.const$3;
            }
            /**
             * Getter for field:
             * {@snippet :
             * BOOLEAN UnrestrictedRead;
             * }
             */
            public static byte UnrestrictedRead$get(MemorySegment seg) {
                return (byte)constants$2432.const$3.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * BOOLEAN UnrestrictedRead;
             * }
             */
            public static void UnrestrictedRead$set(MemorySegment seg, byte x) {
                constants$2432.const$3.set(seg, x);
            }
            public static byte UnrestrictedRead$get(MemorySegment seg, long index) {
                return (byte)constants$2432.const$3.get(seg.asSlice(index*sizeof()));
            }
            public static void UnrestrictedRead$set(MemorySegment seg, long index, byte x) {
                constants$2432.const$3.set(seg.asSlice(index*sizeof()), x);
            }
            public static MemorySegment Reserved$slice(MemorySegment seg) {
                return seg.asSlice(5, 3);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
        }

        public static MemorySegment SequentialRequiredZone$slice(MemorySegment seg) {
            return seg.asSlice(0, 8);
        }
        /**
         * {@snippet :
         * struct {
         *     DWORD OptimalOpenZoneCount;
         *     DWORD Reserved;
         * };
         * }
         */
        public static final class SequentialPreferredZone {

            // Suppresses default constructor, ensuring non-instantiability.
            private SequentialPreferredZone() {}
            public static MemoryLayout $LAYOUT() {
                return constants$2432.const$4;
            }
            public static VarHandle OptimalOpenZoneCount$VH() {
                return constants$2432.const$5;
            }
            /**
             * Getter for field:
             * {@snippet :
             * DWORD OptimalOpenZoneCount;
             * }
             */
            public static int OptimalOpenZoneCount$get(MemorySegment seg) {
                return (int)constants$2432.const$5.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * DWORD OptimalOpenZoneCount;
             * }
             */
            public static void OptimalOpenZoneCount$set(MemorySegment seg, int x) {
                constants$2432.const$5.set(seg, x);
            }
            public static int OptimalOpenZoneCount$get(MemorySegment seg, long index) {
                return (int)constants$2432.const$5.get(seg.asSlice(index*sizeof()));
            }
            public static void OptimalOpenZoneCount$set(MemorySegment seg, long index, int x) {
                constants$2432.const$5.set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle Reserved$VH() {
                return constants$2433.const$0;
            }
            /**
             * Getter for field:
             * {@snippet :
             * DWORD Reserved;
             * }
             */
            public static int Reserved$get(MemorySegment seg) {
                return (int)constants$2433.const$0.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * DWORD Reserved;
             * }
             */
            public static void Reserved$set(MemorySegment seg, int x) {
                constants$2433.const$0.set(seg, x);
            }
            public static int Reserved$get(MemorySegment seg, long index) {
                return (int)constants$2433.const$0.get(seg.asSlice(index*sizeof()));
            }
            public static void Reserved$set(MemorySegment seg, long index, int x) {
                constants$2433.const$0.set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
        }

        public static MemorySegment SequentialPreferredZone$slice(MemorySegment seg) {
            return seg.asSlice(0, 8);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment ZoneAttributes$slice(MemorySegment seg) {
        return seg.asSlice(16, 8);
    }
    public static VarHandle ZoneGroupCount$VH() {
        return constants$2433.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD ZoneGroupCount;
     * }
     */
    public static int ZoneGroupCount$get(MemorySegment seg) {
        return (int)constants$2433.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD ZoneGroupCount;
     * }
     */
    public static void ZoneGroupCount$set(MemorySegment seg, int x) {
        constants$2433.const$1.set(seg, x);
    }
    public static int ZoneGroupCount$get(MemorySegment seg, long index) {
        return (int)constants$2433.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void ZoneGroupCount$set(MemorySegment seg, long index, int x) {
        constants$2433.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment ZoneGroup$slice(MemorySegment seg) {
        return seg.asSlice(32, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _wireSAFEARRAY_UNION {
 *     ULONG sfType;
 *     union __MIDL_IOleAutomationTypes_0001 u;
 * };
 * }
 */
public class _wireSAFEARRAY_UNION {

    public static MemoryLayout $LAYOUT() {
        return constants$3412.const$4;
    }
    public static VarHandle sfType$VH() {
        return constants$3412.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG sfType;
     * }
     */
    public static int sfType$get(MemorySegment seg) {
        return (int)constants$3412.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG sfType;
     * }
     */
    public static void sfType$set(MemorySegment seg, int x) {
        constants$3412.const$5.set(seg, x);
    }
    public static int sfType$get(MemorySegment seg, long index) {
        return (int)constants$3412.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void sfType$set(MemorySegment seg, long index, int x) {
        constants$3412.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
     * union __MIDL_IOleAutomationTypes_0001 {
     *     SAFEARR_BSTR BstrStr;
     *     SAFEARR_UNKNOWN UnknownStr;
     *     SAFEARR_DISPATCH DispatchStr;
     *     SAFEARR_VARIANT VariantStr;
     *     SAFEARR_BRECORD RecordStr;
     *     SAFEARR_HAVEIID HaveIidStr;
     *     BYTE_SIZEDARR ByteStr;
     *     WORD_SIZEDARR WordStr;
     *     DWORD_SIZEDARR LongStr;
     *     HYPER_SIZEDARR HyperStr;
     * };
     * }
     */
    public static final class __MIDL_IOleAutomationTypes_0001 {

        // Suppresses default constructor, ensuring non-instantiability.
        private __MIDL_IOleAutomationTypes_0001() {}
        public static MemoryLayout $LAYOUT() {
            return constants$3413.const$0;
        }
        public static MemorySegment BstrStr$slice(MemorySegment seg) {
            return seg.asSlice(0, 16);
        }
        public static MemorySegment UnknownStr$slice(MemorySegment seg) {
            return seg.asSlice(0, 16);
        }
        public static MemorySegment DispatchStr$slice(MemorySegment seg) {
            return seg.asSlice(0, 16);
        }
        public static MemorySegment VariantStr$slice(MemorySegment seg) {
            return seg.asSlice(0, 16);
        }
        public static MemorySegment RecordStr$slice(MemorySegment seg) {
            return seg.asSlice(0, 16);
        }
        public static MemorySegment HaveIidStr$slice(MemorySegment seg) {
            return seg.asSlice(0, 32);
        }
        public static MemorySegment ByteStr$slice(MemorySegment seg) {
            return seg.asSlice(0, 16);
        }
        public static MemorySegment WordStr$slice(MemorySegment seg) {
            return seg.asSlice(0, 16);
        }
        public static MemorySegment LongStr$slice(MemorySegment seg) {
            return seg.asSlice(0, 16);
        }
        public static MemorySegment HyperStr$slice(MemorySegment seg) {
            return seg.asSlice(0, 16);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment u$slice(MemorySegment seg) {
        return seg.asSlice(8, 32);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



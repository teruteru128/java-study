// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tagMETAHEADER {
 *     WORD mtType;
 *     WORD mtHeaderSize;
 *     WORD mtVersion;
 *     DWORD mtSize;
 *     WORD mtNoObjects;
 *     DWORD mtMaxRecord;
 *     WORD mtNoParameters;
 * };
 * }
 */
public class tagMETAHEADER {

    public static MemoryLayout $LAYOUT() {
        return constants$908.const$5;
    }
    public static VarHandle mtType$VH() {
        return constants$909.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD mtType;
     * }
     */
    public static short mtType$get(MemorySegment seg) {
        return (short)constants$909.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD mtType;
     * }
     */
    public static void mtType$set(MemorySegment seg, short x) {
        constants$909.const$0.set(seg, x);
    }
    public static short mtType$get(MemorySegment seg, long index) {
        return (short)constants$909.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void mtType$set(MemorySegment seg, long index, short x) {
        constants$909.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle mtHeaderSize$VH() {
        return constants$909.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD mtHeaderSize;
     * }
     */
    public static short mtHeaderSize$get(MemorySegment seg) {
        return (short)constants$909.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD mtHeaderSize;
     * }
     */
    public static void mtHeaderSize$set(MemorySegment seg, short x) {
        constants$909.const$1.set(seg, x);
    }
    public static short mtHeaderSize$get(MemorySegment seg, long index) {
        return (short)constants$909.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void mtHeaderSize$set(MemorySegment seg, long index, short x) {
        constants$909.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle mtVersion$VH() {
        return constants$909.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD mtVersion;
     * }
     */
    public static short mtVersion$get(MemorySegment seg) {
        return (short)constants$909.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD mtVersion;
     * }
     */
    public static void mtVersion$set(MemorySegment seg, short x) {
        constants$909.const$2.set(seg, x);
    }
    public static short mtVersion$get(MemorySegment seg, long index) {
        return (short)constants$909.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void mtVersion$set(MemorySegment seg, long index, short x) {
        constants$909.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle mtSize$VH() {
        return constants$909.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD mtSize;
     * }
     */
    public static int mtSize$get(MemorySegment seg) {
        return (int)constants$909.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD mtSize;
     * }
     */
    public static void mtSize$set(MemorySegment seg, int x) {
        constants$909.const$3.set(seg, x);
    }
    public static int mtSize$get(MemorySegment seg, long index) {
        return (int)constants$909.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void mtSize$set(MemorySegment seg, long index, int x) {
        constants$909.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle mtNoObjects$VH() {
        return constants$909.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD mtNoObjects;
     * }
     */
    public static short mtNoObjects$get(MemorySegment seg) {
        return (short)constants$909.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD mtNoObjects;
     * }
     */
    public static void mtNoObjects$set(MemorySegment seg, short x) {
        constants$909.const$4.set(seg, x);
    }
    public static short mtNoObjects$get(MemorySegment seg, long index) {
        return (short)constants$909.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void mtNoObjects$set(MemorySegment seg, long index, short x) {
        constants$909.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle mtMaxRecord$VH() {
        return constants$909.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD mtMaxRecord;
     * }
     */
    public static int mtMaxRecord$get(MemorySegment seg) {
        return (int)constants$909.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD mtMaxRecord;
     * }
     */
    public static void mtMaxRecord$set(MemorySegment seg, int x) {
        constants$909.const$5.set(seg, x);
    }
    public static int mtMaxRecord$get(MemorySegment seg, long index) {
        return (int)constants$909.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void mtMaxRecord$set(MemorySegment seg, long index, int x) {
        constants$909.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle mtNoParameters$VH() {
        return constants$910.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD mtNoParameters;
     * }
     */
    public static short mtNoParameters$get(MemorySegment seg) {
        return (short)constants$910.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD mtNoParameters;
     * }
     */
    public static void mtNoParameters$set(MemorySegment seg, short x) {
        constants$910.const$0.set(seg, x);
    }
    public static short mtNoParameters$get(MemorySegment seg, long index) {
        return (short)constants$910.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void mtNoParameters$set(MemorySegment seg, long index, short x) {
        constants$910.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



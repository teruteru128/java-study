// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IErrorInfoVtbl {
 *     HRESULT (*QueryInterface)(IErrorInfo*,const IID*,void**);
 *     ULONG (*AddRef)(IErrorInfo*);
 *     ULONG (*Release)(IErrorInfo*);
 *     HRESULT (*GetGUID)(IErrorInfo*,GUID*);
 *     HRESULT (*GetSource)(IErrorInfo*,BSTR*);
 *     HRESULT (*GetDescription)(IErrorInfo*,BSTR*);
 *     HRESULT (*GetHelpFile)(IErrorInfo*,BSTR*);
 *     HRESULT (*GetHelpContext)(IErrorInfo*,DWORD*);
 * };
 * }
 */
public class IErrorInfoVtbl {

    public static MemoryLayout $LAYOUT() {
        return constants$3538.const$1;
    }
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IErrorInfo*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3538.const$2, fi, constants$37.const$3, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle QueryInterface$VH() {
        return constants$3538.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IErrorInfo*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3538.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IErrorInfo*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        constants$3538.const$3.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3538.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3538.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, Arena scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*AddRef)(IErrorInfo*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3538.const$4, fi, constants$18.const$5, scope);
        }
        static AddRef ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle AddRef$VH() {
        return constants$3538.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IErrorInfo*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3538.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IErrorInfo*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        constants$3538.const$5.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3538.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3538.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, Arena scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*Release)(IErrorInfo*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3539.const$0, fi, constants$18.const$5, scope);
        }
        static Release ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Release$VH() {
        return constants$3539.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IErrorInfo*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3539.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IErrorInfo*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        constants$3539.const$1.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3539.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3539.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, Arena scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetGUID)(IErrorInfo*,GUID*);
     * }
     */
    public interface GetGUID {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetGUID fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3539.const$2, fi, constants$34.const$0, scope);
        }
        static GetGUID ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetGUID$VH() {
        return constants$3539.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetGUID)(IErrorInfo*,GUID*);
     * }
     */
    public static MemorySegment GetGUID$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3539.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetGUID)(IErrorInfo*,GUID*);
     * }
     */
    public static void GetGUID$set(MemorySegment seg, MemorySegment x) {
        constants$3539.const$3.set(seg, x);
    }
    public static MemorySegment GetGUID$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3539.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void GetGUID$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3539.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetGUID GetGUID(MemorySegment segment, Arena scope) {
        return GetGUID.ofAddress(GetGUID$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetSource)(IErrorInfo*,BSTR*);
     * }
     */
    public interface GetSource {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetSource fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3539.const$4, fi, constants$34.const$0, scope);
        }
        static GetSource ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetSource$VH() {
        return constants$3539.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetSource)(IErrorInfo*,BSTR*);
     * }
     */
    public static MemorySegment GetSource$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3539.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetSource)(IErrorInfo*,BSTR*);
     * }
     */
    public static void GetSource$set(MemorySegment seg, MemorySegment x) {
        constants$3539.const$5.set(seg, x);
    }
    public static MemorySegment GetSource$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3539.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GetSource$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3539.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetSource GetSource(MemorySegment segment, Arena scope) {
        return GetSource.ofAddress(GetSource$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetDescription)(IErrorInfo*,BSTR*);
     * }
     */
    public interface GetDescription {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetDescription fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3540.const$0, fi, constants$34.const$0, scope);
        }
        static GetDescription ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetDescription$VH() {
        return constants$3540.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetDescription)(IErrorInfo*,BSTR*);
     * }
     */
    public static MemorySegment GetDescription$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3540.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetDescription)(IErrorInfo*,BSTR*);
     * }
     */
    public static void GetDescription$set(MemorySegment seg, MemorySegment x) {
        constants$3540.const$1.set(seg, x);
    }
    public static MemorySegment GetDescription$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3540.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDescription$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3540.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDescription GetDescription(MemorySegment segment, Arena scope) {
        return GetDescription.ofAddress(GetDescription$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetHelpFile)(IErrorInfo*,BSTR*);
     * }
     */
    public interface GetHelpFile {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetHelpFile fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3540.const$2, fi, constants$34.const$0, scope);
        }
        static GetHelpFile ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetHelpFile$VH() {
        return constants$3540.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetHelpFile)(IErrorInfo*,BSTR*);
     * }
     */
    public static MemorySegment GetHelpFile$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3540.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetHelpFile)(IErrorInfo*,BSTR*);
     * }
     */
    public static void GetHelpFile$set(MemorySegment seg, MemorySegment x) {
        constants$3540.const$3.set(seg, x);
    }
    public static MemorySegment GetHelpFile$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3540.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void GetHelpFile$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3540.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetHelpFile GetHelpFile(MemorySegment segment, Arena scope) {
        return GetHelpFile.ofAddress(GetHelpFile$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetHelpContext)(IErrorInfo*,DWORD*);
     * }
     */
    public interface GetHelpContext {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetHelpContext fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3540.const$4, fi, constants$34.const$0, scope);
        }
        static GetHelpContext ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetHelpContext$VH() {
        return constants$3540.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetHelpContext)(IErrorInfo*,DWORD*);
     * }
     */
    public static MemorySegment GetHelpContext$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3540.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetHelpContext)(IErrorInfo*,DWORD*);
     * }
     */
    public static void GetHelpContext$set(MemorySegment seg, MemorySegment x) {
        constants$3540.const$5.set(seg, x);
    }
    public static MemorySegment GetHelpContext$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3540.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GetHelpContext$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3540.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetHelpContext GetHelpContext(MemorySegment segment, Arena scope) {
        return GetHelpContext.ofAddress(GetHelpContext$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



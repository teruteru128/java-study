// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _CERT_KEY_USAGE_RESTRICTION_INFO {
 *     DWORD cCertPolicyId;
 *     PCERT_POLICY_ID rgCertPolicyId;
 *     CRYPT_BIT_BLOB RestrictedKeyUsage;
 * };
 * }
 */
public class _CERT_KEY_USAGE_RESTRICTION_INFO {

    public static MemoryLayout $LAYOUT() {
        return constants$2025.const$4;
    }
    public static VarHandle cCertPolicyId$VH() {
        return constants$2025.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD cCertPolicyId;
     * }
     */
    public static int cCertPolicyId$get(MemorySegment seg) {
        return (int)constants$2025.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD cCertPolicyId;
     * }
     */
    public static void cCertPolicyId$set(MemorySegment seg, int x) {
        constants$2025.const$5.set(seg, x);
    }
    public static int cCertPolicyId$get(MemorySegment seg, long index) {
        return (int)constants$2025.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void cCertPolicyId$set(MemorySegment seg, long index, int x) {
        constants$2025.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle rgCertPolicyId$VH() {
        return constants$2026.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PCERT_POLICY_ID rgCertPolicyId;
     * }
     */
    public static MemorySegment rgCertPolicyId$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2026.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PCERT_POLICY_ID rgCertPolicyId;
     * }
     */
    public static void rgCertPolicyId$set(MemorySegment seg, MemorySegment x) {
        constants$2026.const$0.set(seg, x);
    }
    public static MemorySegment rgCertPolicyId$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2026.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void rgCertPolicyId$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2026.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment RestrictedKeyUsage$slice(MemorySegment seg) {
        return seg.asSlice(16, 24);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _SECURITY_DESCRIPTOR_RELATIVE {
 *     BYTE Revision;
 *     BYTE Sbz1;
 *     SECURITY_DESCRIPTOR_CONTROL Control;
 *     DWORD Owner;
 *     DWORD Group;
 *     DWORD Sacl;
 *     DWORD Dacl;
 * };
 * }
 */
public class _SECURITY_DESCRIPTOR_RELATIVE {

    public static MemoryLayout $LAYOUT() {
        return constants$156.const$5;
    }
    public static VarHandle Revision$VH() {
        return constants$157.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE Revision;
     * }
     */
    public static byte Revision$get(MemorySegment seg) {
        return (byte)constants$157.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE Revision;
     * }
     */
    public static void Revision$set(MemorySegment seg, byte x) {
        constants$157.const$0.set(seg, x);
    }
    public static byte Revision$get(MemorySegment seg, long index) {
        return (byte)constants$157.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Revision$set(MemorySegment seg, long index, byte x) {
        constants$157.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Sbz1$VH() {
        return constants$157.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE Sbz1;
     * }
     */
    public static byte Sbz1$get(MemorySegment seg) {
        return (byte)constants$157.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE Sbz1;
     * }
     */
    public static void Sbz1$set(MemorySegment seg, byte x) {
        constants$157.const$1.set(seg, x);
    }
    public static byte Sbz1$get(MemorySegment seg, long index) {
        return (byte)constants$157.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void Sbz1$set(MemorySegment seg, long index, byte x) {
        constants$157.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Control$VH() {
        return constants$157.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * SECURITY_DESCRIPTOR_CONTROL Control;
     * }
     */
    public static short Control$get(MemorySegment seg) {
        return (short)constants$157.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * SECURITY_DESCRIPTOR_CONTROL Control;
     * }
     */
    public static void Control$set(MemorySegment seg, short x) {
        constants$157.const$2.set(seg, x);
    }
    public static short Control$get(MemorySegment seg, long index) {
        return (short)constants$157.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void Control$set(MemorySegment seg, long index, short x) {
        constants$157.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Owner$VH() {
        return constants$157.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Owner;
     * }
     */
    public static int Owner$get(MemorySegment seg) {
        return (int)constants$157.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Owner;
     * }
     */
    public static void Owner$set(MemorySegment seg, int x) {
        constants$157.const$3.set(seg, x);
    }
    public static int Owner$get(MemorySegment seg, long index) {
        return (int)constants$157.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void Owner$set(MemorySegment seg, long index, int x) {
        constants$157.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Group$VH() {
        return constants$157.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Group;
     * }
     */
    public static int Group$get(MemorySegment seg) {
        return (int)constants$157.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Group;
     * }
     */
    public static void Group$set(MemorySegment seg, int x) {
        constants$157.const$4.set(seg, x);
    }
    public static int Group$get(MemorySegment seg, long index) {
        return (int)constants$157.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void Group$set(MemorySegment seg, long index, int x) {
        constants$157.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Sacl$VH() {
        return constants$157.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Sacl;
     * }
     */
    public static int Sacl$get(MemorySegment seg) {
        return (int)constants$157.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Sacl;
     * }
     */
    public static void Sacl$set(MemorySegment seg, int x) {
        constants$157.const$5.set(seg, x);
    }
    public static int Sacl$get(MemorySegment seg, long index) {
        return (int)constants$157.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void Sacl$set(MemorySegment seg, long index, int x) {
        constants$157.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Dacl$VH() {
        return constants$158.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Dacl;
     * }
     */
    public static int Dacl$get(MemorySegment seg) {
        return (int)constants$158.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Dacl;
     * }
     */
    public static void Dacl$set(MemorySegment seg, int x) {
        constants$158.const$0.set(seg, x);
    }
    public static int Dacl$get(MemorySegment seg, long index) {
        return (int)constants$158.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Dacl$set(MemorySegment seg, long index, int x) {
        constants$158.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _IMAGE_ENCLAVE_IMPORT {
 *     DWORD MatchType;
 *     DWORD MinimumSecurityVersion;
 *     BYTE UniqueOrAuthorID[32];
 *     BYTE FamilyID[16];
 *     BYTE ImageID[16];
 *     DWORD ImportName;
 *     DWORD Reserved;
 * };
 * }
 */
public class _IMAGE_ENCLAVE_IMPORT {

    public static MemoryLayout $LAYOUT() {
        return constants$450.const$2;
    }
    public static VarHandle MatchType$VH() {
        return constants$450.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD MatchType;
     * }
     */
    public static int MatchType$get(MemorySegment seg) {
        return (int)constants$450.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD MatchType;
     * }
     */
    public static void MatchType$set(MemorySegment seg, int x) {
        constants$450.const$3.set(seg, x);
    }
    public static int MatchType$get(MemorySegment seg, long index) {
        return (int)constants$450.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void MatchType$set(MemorySegment seg, long index, int x) {
        constants$450.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MinimumSecurityVersion$VH() {
        return constants$450.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD MinimumSecurityVersion;
     * }
     */
    public static int MinimumSecurityVersion$get(MemorySegment seg) {
        return (int)constants$450.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD MinimumSecurityVersion;
     * }
     */
    public static void MinimumSecurityVersion$set(MemorySegment seg, int x) {
        constants$450.const$4.set(seg, x);
    }
    public static int MinimumSecurityVersion$get(MemorySegment seg, long index) {
        return (int)constants$450.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void MinimumSecurityVersion$set(MemorySegment seg, long index, int x) {
        constants$450.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment UniqueOrAuthorID$slice(MemorySegment seg) {
        return seg.asSlice(8, 32);
    }
    public static MemorySegment FamilyID$slice(MemorySegment seg) {
        return seg.asSlice(40, 16);
    }
    public static MemorySegment ImageID$slice(MemorySegment seg) {
        return seg.asSlice(56, 16);
    }
    public static VarHandle ImportName$VH() {
        return constants$450.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD ImportName;
     * }
     */
    public static int ImportName$get(MemorySegment seg) {
        return (int)constants$450.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD ImportName;
     * }
     */
    public static void ImportName$set(MemorySegment seg, int x) {
        constants$450.const$5.set(seg, x);
    }
    public static int ImportName$get(MemorySegment seg, long index) {
        return (int)constants$450.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void ImportName$set(MemorySegment seg, long index, int x) {
        constants$450.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Reserved$VH() {
        return constants$451.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Reserved;
     * }
     */
    public static int Reserved$get(MemorySegment seg) {
        return (int)constants$451.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Reserved;
     * }
     */
    public static void Reserved$set(MemorySegment seg, int x) {
        constants$451.const$0.set(seg, x);
    }
    public static int Reserved$get(MemorySegment seg, long index) {
        return (int)constants$451.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Reserved$set(MemorySegment seg, long index, int x) {
        constants$451.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



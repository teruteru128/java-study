// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IPropertyStorageVtbl {
 *     HRESULT (*QueryInterface)(IPropertyStorage*,const IID*,void**);
 *     ULONG (*AddRef)(IPropertyStorage*);
 *     ULONG (*Release)(IPropertyStorage*);
 *     HRESULT (*ReadMultiple)(IPropertyStorage*,ULONG,const PROPSPEC*,PROPVARIANT*);
 *     HRESULT (*WriteMultiple)(IPropertyStorage*,ULONG,const PROPSPEC*,const PROPVARIANT*,PROPID);
 *     HRESULT (*DeleteMultiple)(IPropertyStorage*,ULONG,const PROPSPEC*);
 *     HRESULT (*ReadPropertyNames)(IPropertyStorage*,ULONG,const PROPID*,LPOLESTR*);
 *     HRESULT (*WritePropertyNames)(IPropertyStorage*,ULONG,const PROPID*,const LPOLESTR*);
 *     HRESULT (*DeletePropertyNames)(IPropertyStorage*,ULONG,const PROPID*);
 *     HRESULT (*Commit)(IPropertyStorage*,DWORD);
 *     HRESULT (*Revert)(IPropertyStorage*);
 *     HRESULT (*Enum)(IPropertyStorage*,IEnumSTATPROPSTG**);
 *     HRESULT (*SetTimes)(IPropertyStorage*,const FILETIME*,const FILETIME*,const FILETIME*);
 *     HRESULT (*SetClass)(IPropertyStorage*,const IID*);
 *     HRESULT (*Stat)(IPropertyStorage*,STATPROPSETSTG*);
 * };
 * }
 */
public class IPropertyStorageVtbl {

    public static MemoryLayout $LAYOUT() {
        return constants$3605.const$4;
    }
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IPropertyStorage*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3605.const$5, fi, constants$37.const$3, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle QueryInterface$VH() {
        return constants$3606.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IPropertyStorage*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3606.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IPropertyStorage*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        constants$3606.const$0.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3606.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3606.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, Arena scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*AddRef)(IPropertyStorage*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3606.const$1, fi, constants$18.const$5, scope);
        }
        static AddRef ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle AddRef$VH() {
        return constants$3606.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IPropertyStorage*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3606.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IPropertyStorage*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        constants$3606.const$2.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3606.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3606.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, Arena scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*Release)(IPropertyStorage*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3606.const$3, fi, constants$18.const$5, scope);
        }
        static Release ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Release$VH() {
        return constants$3606.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IPropertyStorage*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3606.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IPropertyStorage*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        constants$3606.const$4.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3606.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3606.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, Arena scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*ReadMultiple)(IPropertyStorage*,ULONG,const PROPSPEC*,PROPVARIANT*);
     * }
     */
    public interface ReadMultiple {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(ReadMultiple fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3606.const$5, fi, constants$585.const$2, scope);
        }
        static ReadMultiple ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)constants$2151.const$1.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle ReadMultiple$VH() {
        return constants$3607.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*ReadMultiple)(IPropertyStorage*,ULONG,const PROPSPEC*,PROPVARIANT*);
     * }
     */
    public static MemorySegment ReadMultiple$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3607.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*ReadMultiple)(IPropertyStorage*,ULONG,const PROPSPEC*,PROPVARIANT*);
     * }
     */
    public static void ReadMultiple$set(MemorySegment seg, MemorySegment x) {
        constants$3607.const$0.set(seg, x);
    }
    public static MemorySegment ReadMultiple$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3607.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void ReadMultiple$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3607.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static ReadMultiple ReadMultiple(MemorySegment segment, Arena scope) {
        return ReadMultiple.ofAddress(ReadMultiple$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*WriteMultiple)(IPropertyStorage*,ULONG,const PROPSPEC*,const PROPVARIANT*,PROPID);
     * }
     */
    public interface WriteMultiple {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, int _x4);
        static MemorySegment allocate(WriteMultiple fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3607.const$1, fi, constants$657.const$2, scope);
        }
        static WriteMultiple ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, int __x4) -> {
                try {
                    return (int)constants$3607.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle WriteMultiple$VH() {
        return constants$3607.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*WriteMultiple)(IPropertyStorage*,ULONG,const PROPSPEC*,const PROPVARIANT*,PROPID);
     * }
     */
    public static MemorySegment WriteMultiple$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3607.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*WriteMultiple)(IPropertyStorage*,ULONG,const PROPSPEC*,const PROPVARIANT*,PROPID);
     * }
     */
    public static void WriteMultiple$set(MemorySegment seg, MemorySegment x) {
        constants$3607.const$3.set(seg, x);
    }
    public static MemorySegment WriteMultiple$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3607.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void WriteMultiple$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3607.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static WriteMultiple WriteMultiple(MemorySegment segment, Arena scope) {
        return WriteMultiple.ofAddress(WriteMultiple$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*DeleteMultiple)(IPropertyStorage*,ULONG,const PROPSPEC*);
     * }
     */
    public interface DeleteMultiple {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(DeleteMultiple fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3607.const$4, fi, constants$485.const$5, scope);
        }
        static DeleteMultiple ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$1770.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle DeleteMultiple$VH() {
        return constants$3607.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*DeleteMultiple)(IPropertyStorage*,ULONG,const PROPSPEC*);
     * }
     */
    public static MemorySegment DeleteMultiple$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3607.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*DeleteMultiple)(IPropertyStorage*,ULONG,const PROPSPEC*);
     * }
     */
    public static void DeleteMultiple$set(MemorySegment seg, MemorySegment x) {
        constants$3607.const$5.set(seg, x);
    }
    public static MemorySegment DeleteMultiple$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3607.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void DeleteMultiple$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3607.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static DeleteMultiple DeleteMultiple(MemorySegment segment, Arena scope) {
        return DeleteMultiple.ofAddress(DeleteMultiple$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*ReadPropertyNames)(IPropertyStorage*,ULONG,const PROPID*,LPOLESTR*);
     * }
     */
    public interface ReadPropertyNames {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(ReadPropertyNames fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3608.const$0, fi, constants$585.const$2, scope);
        }
        static ReadPropertyNames ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)constants$2151.const$1.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle ReadPropertyNames$VH() {
        return constants$3608.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*ReadPropertyNames)(IPropertyStorage*,ULONG,const PROPID*,LPOLESTR*);
     * }
     */
    public static MemorySegment ReadPropertyNames$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3608.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*ReadPropertyNames)(IPropertyStorage*,ULONG,const PROPID*,LPOLESTR*);
     * }
     */
    public static void ReadPropertyNames$set(MemorySegment seg, MemorySegment x) {
        constants$3608.const$1.set(seg, x);
    }
    public static MemorySegment ReadPropertyNames$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3608.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void ReadPropertyNames$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3608.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static ReadPropertyNames ReadPropertyNames(MemorySegment segment, Arena scope) {
        return ReadPropertyNames.ofAddress(ReadPropertyNames$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*WritePropertyNames)(IPropertyStorage*,ULONG,const PROPID*,const LPOLESTR*);
     * }
     */
    public interface WritePropertyNames {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(WritePropertyNames fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3608.const$2, fi, constants$585.const$2, scope);
        }
        static WritePropertyNames ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)constants$2151.const$1.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle WritePropertyNames$VH() {
        return constants$3608.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*WritePropertyNames)(IPropertyStorage*,ULONG,const PROPID*,const LPOLESTR*);
     * }
     */
    public static MemorySegment WritePropertyNames$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3608.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*WritePropertyNames)(IPropertyStorage*,ULONG,const PROPID*,const LPOLESTR*);
     * }
     */
    public static void WritePropertyNames$set(MemorySegment seg, MemorySegment x) {
        constants$3608.const$3.set(seg, x);
    }
    public static MemorySegment WritePropertyNames$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3608.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void WritePropertyNames$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3608.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static WritePropertyNames WritePropertyNames(MemorySegment segment, Arena scope) {
        return WritePropertyNames.ofAddress(WritePropertyNames$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*DeletePropertyNames)(IPropertyStorage*,ULONG,const PROPID*);
     * }
     */
    public interface DeletePropertyNames {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(DeletePropertyNames fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3608.const$4, fi, constants$485.const$5, scope);
        }
        static DeletePropertyNames ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$1770.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle DeletePropertyNames$VH() {
        return constants$3608.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*DeletePropertyNames)(IPropertyStorage*,ULONG,const PROPID*);
     * }
     */
    public static MemorySegment DeletePropertyNames$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3608.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*DeletePropertyNames)(IPropertyStorage*,ULONG,const PROPID*);
     * }
     */
    public static void DeletePropertyNames$set(MemorySegment seg, MemorySegment x) {
        constants$3608.const$5.set(seg, x);
    }
    public static MemorySegment DeletePropertyNames$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3608.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void DeletePropertyNames$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3608.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static DeletePropertyNames DeletePropertyNames(MemorySegment segment, Arena scope) {
        return DeletePropertyNames.ofAddress(DeletePropertyNames$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*Commit)(IPropertyStorage*,DWORD);
     * }
     */
    public interface Commit {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(Commit fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3609.const$0, fi, constants$65.const$2, scope);
        }
        static Commit ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)constants$800.const$4.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Commit$VH() {
        return constants$3609.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Commit)(IPropertyStorage*,DWORD);
     * }
     */
    public static MemorySegment Commit$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3609.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Commit)(IPropertyStorage*,DWORD);
     * }
     */
    public static void Commit$set(MemorySegment seg, MemorySegment x) {
        constants$3609.const$1.set(seg, x);
    }
    public static MemorySegment Commit$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3609.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void Commit$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3609.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static Commit Commit(MemorySegment segment, Arena scope) {
        return Commit.ofAddress(Commit$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*Revert)(IPropertyStorage*);
     * }
     */
    public interface Revert {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Revert fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3609.const$2, fi, constants$18.const$5, scope);
        }
        static Revert ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Revert$VH() {
        return constants$3609.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Revert)(IPropertyStorage*);
     * }
     */
    public static MemorySegment Revert$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3609.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Revert)(IPropertyStorage*);
     * }
     */
    public static void Revert$set(MemorySegment seg, MemorySegment x) {
        constants$3609.const$3.set(seg, x);
    }
    public static MemorySegment Revert$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3609.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void Revert$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3609.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static Revert Revert(MemorySegment segment, Arena scope) {
        return Revert.ofAddress(Revert$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*Enum)(IPropertyStorage*,IEnumSTATPROPSTG**);
     * }
     */
    public interface Enum {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(Enum fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3609.const$4, fi, constants$34.const$0, scope);
        }
        static Enum ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Enum$VH() {
        return constants$3609.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Enum)(IPropertyStorage*,IEnumSTATPROPSTG**);
     * }
     */
    public static MemorySegment Enum$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3609.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Enum)(IPropertyStorage*,IEnumSTATPROPSTG**);
     * }
     */
    public static void Enum$set(MemorySegment seg, MemorySegment x) {
        constants$3609.const$5.set(seg, x);
    }
    public static MemorySegment Enum$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3609.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void Enum$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3609.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static Enum Enum(MemorySegment segment, Arena scope) {
        return Enum.ofAddress(Enum$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetTimes)(IPropertyStorage*,const FILETIME*,const FILETIME*,const FILETIME*);
     * }
     */
    public interface SetTimes {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(SetTimes fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3610.const$0, fi, constants$1.const$3, scope);
        }
        static SetTimes ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)constants$55.const$1.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetTimes$VH() {
        return constants$3610.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetTimes)(IPropertyStorage*,const FILETIME*,const FILETIME*,const FILETIME*);
     * }
     */
    public static MemorySegment SetTimes$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3610.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetTimes)(IPropertyStorage*,const FILETIME*,const FILETIME*,const FILETIME*);
     * }
     */
    public static void SetTimes$set(MemorySegment seg, MemorySegment x) {
        constants$3610.const$1.set(seg, x);
    }
    public static MemorySegment SetTimes$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3610.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void SetTimes$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3610.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetTimes SetTimes(MemorySegment segment, Arena scope) {
        return SetTimes.ofAddress(SetTimes$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetClass)(IPropertyStorage*,const IID*);
     * }
     */
    public interface SetClass {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetClass fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3610.const$2, fi, constants$34.const$0, scope);
        }
        static SetClass ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetClass$VH() {
        return constants$3610.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetClass)(IPropertyStorage*,const IID*);
     * }
     */
    public static MemorySegment SetClass$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3610.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetClass)(IPropertyStorage*,const IID*);
     * }
     */
    public static void SetClass$set(MemorySegment seg, MemorySegment x) {
        constants$3610.const$3.set(seg, x);
    }
    public static MemorySegment SetClass$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3610.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void SetClass$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3610.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetClass SetClass(MemorySegment segment, Arena scope) {
        return SetClass.ofAddress(SetClass$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*Stat)(IPropertyStorage*,STATPROPSETSTG*);
     * }
     */
    public interface Stat {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(Stat fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3610.const$4, fi, constants$34.const$0, scope);
        }
        static Stat ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Stat$VH() {
        return constants$3610.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Stat)(IPropertyStorage*,STATPROPSETSTG*);
     * }
     */
    public static MemorySegment Stat$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3610.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Stat)(IPropertyStorage*,STATPROPSETSTG*);
     * }
     */
    public static void Stat$set(MemorySegment seg, MemorySegment x) {
        constants$3610.const$5.set(seg, x);
    }
    public static MemorySegment Stat$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3610.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void Stat$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3610.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static Stat Stat(MemorySegment segment, Arena scope) {
        return Stat.ofAddress(Stat$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



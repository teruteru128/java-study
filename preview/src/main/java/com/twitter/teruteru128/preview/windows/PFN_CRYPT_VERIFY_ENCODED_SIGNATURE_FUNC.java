// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * int (*PFN_CRYPT_VERIFY_ENCODED_SIGNATURE_FUNC)(unsigned long dwCertEncodingType,struct _CERT_PUBLIC_KEY_INFO* pPubKeyInfo,struct _CRYPT_ALGORITHM_IDENTIFIER* pSignatureAlgorithm,void* pvDecodedSignPara,unsigned short* pwszCNGPubKeyAlgid,unsigned short* pwszCNGHashAlgid,unsigned char* pbComputedHash,unsigned long cbComputedHash,unsigned char* pbSignature,unsigned long cbSignature);
 * }
 */
public interface PFN_CRYPT_VERIFY_ENCODED_SIGNATURE_FUNC {

    int apply(int dwCertEncodingType, java.lang.foreign.MemorySegment pPubKeyInfo, java.lang.foreign.MemorySegment pSignatureAlgorithm, java.lang.foreign.MemorySegment pvDecodedSignPara, java.lang.foreign.MemorySegment pwszCNGPubKeyAlgid, java.lang.foreign.MemorySegment pwszCNGHashAlgid, java.lang.foreign.MemorySegment pbComputedHash, int cbComputedHash, java.lang.foreign.MemorySegment pbSignature, int cbSignature);
    static MemorySegment allocate(PFN_CRYPT_VERIFY_ENCODED_SIGNATURE_FUNC fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$2165.const$4, fi, constants$2165.const$3, scope);
    }
    static PFN_CRYPT_VERIFY_ENCODED_SIGNATURE_FUNC ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (int _dwCertEncodingType, java.lang.foreign.MemorySegment _pPubKeyInfo, java.lang.foreign.MemorySegment _pSignatureAlgorithm, java.lang.foreign.MemorySegment _pvDecodedSignPara, java.lang.foreign.MemorySegment _pwszCNGPubKeyAlgid, java.lang.foreign.MemorySegment _pwszCNGHashAlgid, java.lang.foreign.MemorySegment _pbComputedHash, int _cbComputedHash, java.lang.foreign.MemorySegment _pbSignature, int _cbSignature) -> {
            try {
                return (int)constants$2165.const$5.invokeExact(symbol, _dwCertEncodingType, _pPubKeyInfo, _pSignatureAlgorithm, _pvDecodedSignPara, _pwszCNGPubKeyAlgid, _pwszCNGHashAlgid, _pbComputedHash, _cbComputedHash, _pbSignature, _cbSignature);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}



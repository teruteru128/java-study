// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IOleLinkVtbl {
 *     HRESULT (*QueryInterface)(IOleLink*,const IID*,void**);
 *     ULONG (*AddRef)(IOleLink*);
 *     ULONG (*Release)(IOleLink*);
 *     HRESULT (*SetUpdateOptions)(IOleLink*,DWORD);
 *     HRESULT (*GetUpdateOptions)(IOleLink*,DWORD*);
 *     HRESULT (*SetSourceMoniker)(IOleLink*,IMoniker*,const IID*);
 *     HRESULT (*GetSourceMoniker)(IOleLink*,IMoniker**);
 *     HRESULT (*SetSourceDisplayName)(IOleLink*,LPCOLESTR);
 *     HRESULT (*GetSourceDisplayName)(IOleLink*,LPOLESTR*);
 *     HRESULT (*BindToSource)(IOleLink*,DWORD,IBindCtx*);
 *     HRESULT (*BindIfRunning)(IOleLink*);
 *     HRESULT (*GetBoundSource)(IOleLink*,IUnknown**);
 *     HRESULT (*UnbindSource)(IOleLink*);
 *     HRESULT (*Update)(IOleLink*,IBindCtx*);
 * };
 * }
 */
public class IOleLinkVtbl {

    public static MemoryLayout $LAYOUT() {
        return constants$3670.const$5;
    }
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IOleLink*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3671.const$0, fi, constants$37.const$3, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle QueryInterface$VH() {
        return constants$3671.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IOleLink*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3671.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IOleLink*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        constants$3671.const$1.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3671.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3671.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, Arena scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*AddRef)(IOleLink*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3671.const$2, fi, constants$18.const$5, scope);
        }
        static AddRef ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle AddRef$VH() {
        return constants$3671.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IOleLink*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3671.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IOleLink*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        constants$3671.const$3.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3671.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3671.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, Arena scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*Release)(IOleLink*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3671.const$4, fi, constants$18.const$5, scope);
        }
        static Release ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Release$VH() {
        return constants$3671.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IOleLink*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3671.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IOleLink*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        constants$3671.const$5.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3671.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3671.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, Arena scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetUpdateOptions)(IOleLink*,DWORD);
     * }
     */
    public interface SetUpdateOptions {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(SetUpdateOptions fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3672.const$0, fi, constants$65.const$2, scope);
        }
        static SetUpdateOptions ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)constants$800.const$4.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetUpdateOptions$VH() {
        return constants$3672.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetUpdateOptions)(IOleLink*,DWORD);
     * }
     */
    public static MemorySegment SetUpdateOptions$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3672.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetUpdateOptions)(IOleLink*,DWORD);
     * }
     */
    public static void SetUpdateOptions$set(MemorySegment seg, MemorySegment x) {
        constants$3672.const$1.set(seg, x);
    }
    public static MemorySegment SetUpdateOptions$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3672.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void SetUpdateOptions$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3672.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetUpdateOptions SetUpdateOptions(MemorySegment segment, Arena scope) {
        return SetUpdateOptions.ofAddress(SetUpdateOptions$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetUpdateOptions)(IOleLink*,DWORD*);
     * }
     */
    public interface GetUpdateOptions {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetUpdateOptions fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3672.const$2, fi, constants$34.const$0, scope);
        }
        static GetUpdateOptions ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetUpdateOptions$VH() {
        return constants$3672.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetUpdateOptions)(IOleLink*,DWORD*);
     * }
     */
    public static MemorySegment GetUpdateOptions$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3672.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetUpdateOptions)(IOleLink*,DWORD*);
     * }
     */
    public static void GetUpdateOptions$set(MemorySegment seg, MemorySegment x) {
        constants$3672.const$3.set(seg, x);
    }
    public static MemorySegment GetUpdateOptions$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3672.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void GetUpdateOptions$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3672.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetUpdateOptions GetUpdateOptions(MemorySegment segment, Arena scope) {
        return GetUpdateOptions.ofAddress(GetUpdateOptions$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetSourceMoniker)(IOleLink*,IMoniker*,const IID*);
     * }
     */
    public interface SetSourceMoniker {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(SetSourceMoniker fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3672.const$4, fi, constants$37.const$3, scope);
        }
        static SetSourceMoniker ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetSourceMoniker$VH() {
        return constants$3672.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetSourceMoniker)(IOleLink*,IMoniker*,const IID*);
     * }
     */
    public static MemorySegment SetSourceMoniker$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3672.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetSourceMoniker)(IOleLink*,IMoniker*,const IID*);
     * }
     */
    public static void SetSourceMoniker$set(MemorySegment seg, MemorySegment x) {
        constants$3672.const$5.set(seg, x);
    }
    public static MemorySegment SetSourceMoniker$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3672.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void SetSourceMoniker$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3672.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetSourceMoniker SetSourceMoniker(MemorySegment segment, Arena scope) {
        return SetSourceMoniker.ofAddress(SetSourceMoniker$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetSourceMoniker)(IOleLink*,IMoniker**);
     * }
     */
    public interface GetSourceMoniker {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetSourceMoniker fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3673.const$0, fi, constants$34.const$0, scope);
        }
        static GetSourceMoniker ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetSourceMoniker$VH() {
        return constants$3673.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetSourceMoniker)(IOleLink*,IMoniker**);
     * }
     */
    public static MemorySegment GetSourceMoniker$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3673.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetSourceMoniker)(IOleLink*,IMoniker**);
     * }
     */
    public static void GetSourceMoniker$set(MemorySegment seg, MemorySegment x) {
        constants$3673.const$1.set(seg, x);
    }
    public static MemorySegment GetSourceMoniker$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3673.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void GetSourceMoniker$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3673.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetSourceMoniker GetSourceMoniker(MemorySegment segment, Arena scope) {
        return GetSourceMoniker.ofAddress(GetSourceMoniker$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetSourceDisplayName)(IOleLink*,LPCOLESTR);
     * }
     */
    public interface SetSourceDisplayName {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetSourceDisplayName fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3673.const$2, fi, constants$34.const$0, scope);
        }
        static SetSourceDisplayName ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetSourceDisplayName$VH() {
        return constants$3673.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetSourceDisplayName)(IOleLink*,LPCOLESTR);
     * }
     */
    public static MemorySegment SetSourceDisplayName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3673.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetSourceDisplayName)(IOleLink*,LPCOLESTR);
     * }
     */
    public static void SetSourceDisplayName$set(MemorySegment seg, MemorySegment x) {
        constants$3673.const$3.set(seg, x);
    }
    public static MemorySegment SetSourceDisplayName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3673.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void SetSourceDisplayName$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3673.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetSourceDisplayName SetSourceDisplayName(MemorySegment segment, Arena scope) {
        return SetSourceDisplayName.ofAddress(SetSourceDisplayName$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetSourceDisplayName)(IOleLink*,LPOLESTR*);
     * }
     */
    public interface GetSourceDisplayName {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetSourceDisplayName fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3673.const$4, fi, constants$34.const$0, scope);
        }
        static GetSourceDisplayName ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetSourceDisplayName$VH() {
        return constants$3673.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetSourceDisplayName)(IOleLink*,LPOLESTR*);
     * }
     */
    public static MemorySegment GetSourceDisplayName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3673.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetSourceDisplayName)(IOleLink*,LPOLESTR*);
     * }
     */
    public static void GetSourceDisplayName$set(MemorySegment seg, MemorySegment x) {
        constants$3673.const$5.set(seg, x);
    }
    public static MemorySegment GetSourceDisplayName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3673.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GetSourceDisplayName$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3673.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetSourceDisplayName GetSourceDisplayName(MemorySegment segment, Arena scope) {
        return GetSourceDisplayName.ofAddress(GetSourceDisplayName$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*BindToSource)(IOleLink*,DWORD,IBindCtx*);
     * }
     */
    public interface BindToSource {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(BindToSource fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3674.const$0, fi, constants$485.const$5, scope);
        }
        static BindToSource ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$1770.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle BindToSource$VH() {
        return constants$3674.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*BindToSource)(IOleLink*,DWORD,IBindCtx*);
     * }
     */
    public static MemorySegment BindToSource$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3674.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*BindToSource)(IOleLink*,DWORD,IBindCtx*);
     * }
     */
    public static void BindToSource$set(MemorySegment seg, MemorySegment x) {
        constants$3674.const$1.set(seg, x);
    }
    public static MemorySegment BindToSource$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3674.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void BindToSource$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3674.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static BindToSource BindToSource(MemorySegment segment, Arena scope) {
        return BindToSource.ofAddress(BindToSource$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*BindIfRunning)(IOleLink*);
     * }
     */
    public interface BindIfRunning {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(BindIfRunning fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3674.const$2, fi, constants$18.const$5, scope);
        }
        static BindIfRunning ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle BindIfRunning$VH() {
        return constants$3674.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*BindIfRunning)(IOleLink*);
     * }
     */
    public static MemorySegment BindIfRunning$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3674.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*BindIfRunning)(IOleLink*);
     * }
     */
    public static void BindIfRunning$set(MemorySegment seg, MemorySegment x) {
        constants$3674.const$3.set(seg, x);
    }
    public static MemorySegment BindIfRunning$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3674.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void BindIfRunning$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3674.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static BindIfRunning BindIfRunning(MemorySegment segment, Arena scope) {
        return BindIfRunning.ofAddress(BindIfRunning$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetBoundSource)(IOleLink*,IUnknown**);
     * }
     */
    public interface GetBoundSource {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetBoundSource fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3674.const$4, fi, constants$34.const$0, scope);
        }
        static GetBoundSource ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetBoundSource$VH() {
        return constants$3674.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetBoundSource)(IOleLink*,IUnknown**);
     * }
     */
    public static MemorySegment GetBoundSource$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3674.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetBoundSource)(IOleLink*,IUnknown**);
     * }
     */
    public static void GetBoundSource$set(MemorySegment seg, MemorySegment x) {
        constants$3674.const$5.set(seg, x);
    }
    public static MemorySegment GetBoundSource$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3674.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GetBoundSource$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3674.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetBoundSource GetBoundSource(MemorySegment segment, Arena scope) {
        return GetBoundSource.ofAddress(GetBoundSource$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*UnbindSource)(IOleLink*);
     * }
     */
    public interface UnbindSource {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(UnbindSource fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3675.const$0, fi, constants$18.const$5, scope);
        }
        static UnbindSource ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle UnbindSource$VH() {
        return constants$3675.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*UnbindSource)(IOleLink*);
     * }
     */
    public static MemorySegment UnbindSource$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3675.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*UnbindSource)(IOleLink*);
     * }
     */
    public static void UnbindSource$set(MemorySegment seg, MemorySegment x) {
        constants$3675.const$1.set(seg, x);
    }
    public static MemorySegment UnbindSource$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3675.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void UnbindSource$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3675.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static UnbindSource UnbindSource(MemorySegment segment, Arena scope) {
        return UnbindSource.ofAddress(UnbindSource$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*Update)(IOleLink*,IBindCtx*);
     * }
     */
    public interface Update {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(Update fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3675.const$2, fi, constants$34.const$0, scope);
        }
        static Update ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Update$VH() {
        return constants$3675.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Update)(IOleLink*,IBindCtx*);
     * }
     */
    public static MemorySegment Update$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3675.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Update)(IOleLink*,IBindCtx*);
     * }
     */
    public static void Update$set(MemorySegment seg, MemorySegment x) {
        constants$3675.const$3.set(seg, x);
    }
    public static MemorySegment Update$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3675.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void Update$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3675.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static Update Update(MemorySegment segment, Arena scope) {
        return Update.ofAddress(Update$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _BCRYPT_ECCFULLKEY_BLOB {
 *     ULONG dwMagic;
 *     ULONG dwVersion;
 *     ECC_CURVE_TYPE_ENUM dwCurveType;
 *     ECC_CURVE_ALG_ID_ENUM dwCurveGenerationAlgId;
 *     ULONG cbFieldLength;
 *     ULONG cbSubgroupOrder;
 *     ULONG cbCofactor;
 *     ULONG cbSeed;
 * };
 * }
 */
public class _BCRYPT_ECCFULLKEY_BLOB {

    public static MemoryLayout $LAYOUT() {
        return constants$1948.const$0;
    }
    public static VarHandle dwMagic$VH() {
        return constants$1948.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG dwMagic;
     * }
     */
    public static int dwMagic$get(MemorySegment seg) {
        return (int)constants$1948.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG dwMagic;
     * }
     */
    public static void dwMagic$set(MemorySegment seg, int x) {
        constants$1948.const$1.set(seg, x);
    }
    public static int dwMagic$get(MemorySegment seg, long index) {
        return (int)constants$1948.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void dwMagic$set(MemorySegment seg, long index, int x) {
        constants$1948.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwVersion$VH() {
        return constants$1948.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG dwVersion;
     * }
     */
    public static int dwVersion$get(MemorySegment seg) {
        return (int)constants$1948.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG dwVersion;
     * }
     */
    public static void dwVersion$set(MemorySegment seg, int x) {
        constants$1948.const$2.set(seg, x);
    }
    public static int dwVersion$get(MemorySegment seg, long index) {
        return (int)constants$1948.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void dwVersion$set(MemorySegment seg, long index, int x) {
        constants$1948.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwCurveType$VH() {
        return constants$1948.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ECC_CURVE_TYPE_ENUM dwCurveType;
     * }
     */
    public static int dwCurveType$get(MemorySegment seg) {
        return (int)constants$1948.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ECC_CURVE_TYPE_ENUM dwCurveType;
     * }
     */
    public static void dwCurveType$set(MemorySegment seg, int x) {
        constants$1948.const$3.set(seg, x);
    }
    public static int dwCurveType$get(MemorySegment seg, long index) {
        return (int)constants$1948.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void dwCurveType$set(MemorySegment seg, long index, int x) {
        constants$1948.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwCurveGenerationAlgId$VH() {
        return constants$1948.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ECC_CURVE_ALG_ID_ENUM dwCurveGenerationAlgId;
     * }
     */
    public static int dwCurveGenerationAlgId$get(MemorySegment seg) {
        return (int)constants$1948.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ECC_CURVE_ALG_ID_ENUM dwCurveGenerationAlgId;
     * }
     */
    public static void dwCurveGenerationAlgId$set(MemorySegment seg, int x) {
        constants$1948.const$4.set(seg, x);
    }
    public static int dwCurveGenerationAlgId$get(MemorySegment seg, long index) {
        return (int)constants$1948.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void dwCurveGenerationAlgId$set(MemorySegment seg, long index, int x) {
        constants$1948.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cbFieldLength$VH() {
        return constants$1948.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG cbFieldLength;
     * }
     */
    public static int cbFieldLength$get(MemorySegment seg) {
        return (int)constants$1948.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG cbFieldLength;
     * }
     */
    public static void cbFieldLength$set(MemorySegment seg, int x) {
        constants$1948.const$5.set(seg, x);
    }
    public static int cbFieldLength$get(MemorySegment seg, long index) {
        return (int)constants$1948.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void cbFieldLength$set(MemorySegment seg, long index, int x) {
        constants$1948.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cbSubgroupOrder$VH() {
        return constants$1949.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG cbSubgroupOrder;
     * }
     */
    public static int cbSubgroupOrder$get(MemorySegment seg) {
        return (int)constants$1949.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG cbSubgroupOrder;
     * }
     */
    public static void cbSubgroupOrder$set(MemorySegment seg, int x) {
        constants$1949.const$0.set(seg, x);
    }
    public static int cbSubgroupOrder$get(MemorySegment seg, long index) {
        return (int)constants$1949.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void cbSubgroupOrder$set(MemorySegment seg, long index, int x) {
        constants$1949.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cbCofactor$VH() {
        return constants$1949.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG cbCofactor;
     * }
     */
    public static int cbCofactor$get(MemorySegment seg) {
        return (int)constants$1949.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG cbCofactor;
     * }
     */
    public static void cbCofactor$set(MemorySegment seg, int x) {
        constants$1949.const$1.set(seg, x);
    }
    public static int cbCofactor$get(MemorySegment seg, long index) {
        return (int)constants$1949.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void cbCofactor$set(MemorySegment seg, long index, int x) {
        constants$1949.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cbSeed$VH() {
        return constants$1949.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG cbSeed;
     * }
     */
    public static int cbSeed$get(MemorySegment seg) {
        return (int)constants$1949.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG cbSeed;
     * }
     */
    public static void cbSeed$set(MemorySegment seg, int x) {
        constants$1949.const$2.set(seg, x);
    }
    public static int cbSeed$get(MemorySegment seg, long index) {
        return (int)constants$1949.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void cbSeed$set(MemorySegment seg, long index, int x) {
        constants$1949.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _OFSTRUCT {
 *     BYTE cBytes;
 *     BYTE fFixedDisk;
 *     WORD nErrCode;
 *     WORD Reserved1;
 *     WORD Reserved2;
 *     CHAR szPathName[128];
 * };
 * }
 */
public class _OFSTRUCT {

    public static MemoryLayout $LAYOUT() {
        return constants$754.const$2;
    }
    public static VarHandle cBytes$VH() {
        return constants$754.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE cBytes;
     * }
     */
    public static byte cBytes$get(MemorySegment seg) {
        return (byte)constants$754.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE cBytes;
     * }
     */
    public static void cBytes$set(MemorySegment seg, byte x) {
        constants$754.const$3.set(seg, x);
    }
    public static byte cBytes$get(MemorySegment seg, long index) {
        return (byte)constants$754.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void cBytes$set(MemorySegment seg, long index, byte x) {
        constants$754.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle fFixedDisk$VH() {
        return constants$754.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE fFixedDisk;
     * }
     */
    public static byte fFixedDisk$get(MemorySegment seg) {
        return (byte)constants$754.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE fFixedDisk;
     * }
     */
    public static void fFixedDisk$set(MemorySegment seg, byte x) {
        constants$754.const$4.set(seg, x);
    }
    public static byte fFixedDisk$get(MemorySegment seg, long index) {
        return (byte)constants$754.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void fFixedDisk$set(MemorySegment seg, long index, byte x) {
        constants$754.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nErrCode$VH() {
        return constants$754.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD nErrCode;
     * }
     */
    public static short nErrCode$get(MemorySegment seg) {
        return (short)constants$754.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD nErrCode;
     * }
     */
    public static void nErrCode$set(MemorySegment seg, short x) {
        constants$754.const$5.set(seg, x);
    }
    public static short nErrCode$get(MemorySegment seg, long index) {
        return (short)constants$754.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void nErrCode$set(MemorySegment seg, long index, short x) {
        constants$754.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Reserved1$VH() {
        return constants$755.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD Reserved1;
     * }
     */
    public static short Reserved1$get(MemorySegment seg) {
        return (short)constants$755.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD Reserved1;
     * }
     */
    public static void Reserved1$set(MemorySegment seg, short x) {
        constants$755.const$0.set(seg, x);
    }
    public static short Reserved1$get(MemorySegment seg, long index) {
        return (short)constants$755.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Reserved1$set(MemorySegment seg, long index, short x) {
        constants$755.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Reserved2$VH() {
        return constants$755.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD Reserved2;
     * }
     */
    public static short Reserved2$get(MemorySegment seg) {
        return (short)constants$755.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD Reserved2;
     * }
     */
    public static void Reserved2$set(MemorySegment seg, short x) {
        constants$755.const$1.set(seg, x);
    }
    public static short Reserved2$get(MemorySegment seg, long index) {
        return (short)constants$755.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void Reserved2$set(MemorySegment seg, long index, short x) {
        constants$755.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment szPathName$slice(MemorySegment seg) {
        return seg.asSlice(8, 128);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct {
 *     BOOLEAN AcOnLine;
 *     BOOLEAN BatteryPresent;
 *     BOOLEAN Charging;
 *     BOOLEAN Discharging;
 *     BOOLEAN Spare1[3];
 *     BYTE Tag;
 *     DWORD MaxCapacity;
 *     DWORD RemainingCapacity;
 *     DWORD Rate;
 *     DWORD EstimatedTime;
 *     DWORD DefaultAlert1;
 *     DWORD DefaultAlert2;
 * };
 * }
 */
public class SYSTEM_BATTERY_STATE {

    public static MemoryLayout $LAYOUT() {
        return constants$348.const$3;
    }
    public static VarHandle AcOnLine$VH() {
        return constants$348.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BOOLEAN AcOnLine;
     * }
     */
    public static byte AcOnLine$get(MemorySegment seg) {
        return (byte)constants$348.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BOOLEAN AcOnLine;
     * }
     */
    public static void AcOnLine$set(MemorySegment seg, byte x) {
        constants$348.const$4.set(seg, x);
    }
    public static byte AcOnLine$get(MemorySegment seg, long index) {
        return (byte)constants$348.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void AcOnLine$set(MemorySegment seg, long index, byte x) {
        constants$348.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle BatteryPresent$VH() {
        return constants$348.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BOOLEAN BatteryPresent;
     * }
     */
    public static byte BatteryPresent$get(MemorySegment seg) {
        return (byte)constants$348.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BOOLEAN BatteryPresent;
     * }
     */
    public static void BatteryPresent$set(MemorySegment seg, byte x) {
        constants$348.const$5.set(seg, x);
    }
    public static byte BatteryPresent$get(MemorySegment seg, long index) {
        return (byte)constants$348.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void BatteryPresent$set(MemorySegment seg, long index, byte x) {
        constants$348.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Charging$VH() {
        return constants$349.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BOOLEAN Charging;
     * }
     */
    public static byte Charging$get(MemorySegment seg) {
        return (byte)constants$349.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BOOLEAN Charging;
     * }
     */
    public static void Charging$set(MemorySegment seg, byte x) {
        constants$349.const$0.set(seg, x);
    }
    public static byte Charging$get(MemorySegment seg, long index) {
        return (byte)constants$349.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Charging$set(MemorySegment seg, long index, byte x) {
        constants$349.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Discharging$VH() {
        return constants$349.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BOOLEAN Discharging;
     * }
     */
    public static byte Discharging$get(MemorySegment seg) {
        return (byte)constants$349.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BOOLEAN Discharging;
     * }
     */
    public static void Discharging$set(MemorySegment seg, byte x) {
        constants$349.const$1.set(seg, x);
    }
    public static byte Discharging$get(MemorySegment seg, long index) {
        return (byte)constants$349.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void Discharging$set(MemorySegment seg, long index, byte x) {
        constants$349.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Spare1$slice(MemorySegment seg) {
        return seg.asSlice(4, 3);
    }
    public static VarHandle Tag$VH() {
        return constants$349.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE Tag;
     * }
     */
    public static byte Tag$get(MemorySegment seg) {
        return (byte)constants$349.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE Tag;
     * }
     */
    public static void Tag$set(MemorySegment seg, byte x) {
        constants$349.const$2.set(seg, x);
    }
    public static byte Tag$get(MemorySegment seg, long index) {
        return (byte)constants$349.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void Tag$set(MemorySegment seg, long index, byte x) {
        constants$349.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MaxCapacity$VH() {
        return constants$349.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD MaxCapacity;
     * }
     */
    public static int MaxCapacity$get(MemorySegment seg) {
        return (int)constants$349.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD MaxCapacity;
     * }
     */
    public static void MaxCapacity$set(MemorySegment seg, int x) {
        constants$349.const$3.set(seg, x);
    }
    public static int MaxCapacity$get(MemorySegment seg, long index) {
        return (int)constants$349.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void MaxCapacity$set(MemorySegment seg, long index, int x) {
        constants$349.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle RemainingCapacity$VH() {
        return constants$349.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD RemainingCapacity;
     * }
     */
    public static int RemainingCapacity$get(MemorySegment seg) {
        return (int)constants$349.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD RemainingCapacity;
     * }
     */
    public static void RemainingCapacity$set(MemorySegment seg, int x) {
        constants$349.const$4.set(seg, x);
    }
    public static int RemainingCapacity$get(MemorySegment seg, long index) {
        return (int)constants$349.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void RemainingCapacity$set(MemorySegment seg, long index, int x) {
        constants$349.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Rate$VH() {
        return constants$349.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Rate;
     * }
     */
    public static int Rate$get(MemorySegment seg) {
        return (int)constants$349.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Rate;
     * }
     */
    public static void Rate$set(MemorySegment seg, int x) {
        constants$349.const$5.set(seg, x);
    }
    public static int Rate$get(MemorySegment seg, long index) {
        return (int)constants$349.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void Rate$set(MemorySegment seg, long index, int x) {
        constants$349.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle EstimatedTime$VH() {
        return constants$350.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD EstimatedTime;
     * }
     */
    public static int EstimatedTime$get(MemorySegment seg) {
        return (int)constants$350.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD EstimatedTime;
     * }
     */
    public static void EstimatedTime$set(MemorySegment seg, int x) {
        constants$350.const$0.set(seg, x);
    }
    public static int EstimatedTime$get(MemorySegment seg, long index) {
        return (int)constants$350.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void EstimatedTime$set(MemorySegment seg, long index, int x) {
        constants$350.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle DefaultAlert1$VH() {
        return constants$350.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD DefaultAlert1;
     * }
     */
    public static int DefaultAlert1$get(MemorySegment seg) {
        return (int)constants$350.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD DefaultAlert1;
     * }
     */
    public static void DefaultAlert1$set(MemorySegment seg, int x) {
        constants$350.const$1.set(seg, x);
    }
    public static int DefaultAlert1$get(MemorySegment seg, long index) {
        return (int)constants$350.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void DefaultAlert1$set(MemorySegment seg, long index, int x) {
        constants$350.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle DefaultAlert2$VH() {
        return constants$350.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD DefaultAlert2;
     * }
     */
    public static int DefaultAlert2$get(MemorySegment seg) {
        return (int)constants$350.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD DefaultAlert2;
     * }
     */
    public static void DefaultAlert2$set(MemorySegment seg, int x) {
        constants$350.const$2.set(seg, x);
    }
    public static int DefaultAlert2$get(MemorySegment seg, long index) {
        return (int)constants$350.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void DefaultAlert2$set(MemorySegment seg, long index, int x) {
        constants$350.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



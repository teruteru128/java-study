// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _CRYPT_RETRIEVE_AUX_INFO {
 *     DWORD cbSize;
 *     FILETIME* pLastSyncTime;
 *     DWORD dwMaxUrlRetrievalByteCount;
 *     PCRYPTNET_URL_CACHE_PRE_FETCH_INFO pPreFetchInfo;
 *     PCRYPTNET_URL_CACHE_FLUSH_INFO pFlushInfo;
 *     PCRYPTNET_URL_CACHE_RESPONSE_INFO* ppResponseInfo;
 *     LPWSTR pwszCacheFileNamePrefix;
 *     LPFILETIME pftCacheResync;
 *     BOOL fProxyCacheRetrieval;
 *     DWORD dwHttpStatusCode;
 *     LPWSTR* ppwszErrorResponseHeaders;
 *     PCRYPT_DATA_BLOB* ppErrorContentBlob;
 * };
 * }
 */
public class _CRYPT_RETRIEVE_AUX_INFO {

    public static MemoryLayout $LAYOUT() {
        return constants$2194.const$3;
    }
    public static VarHandle cbSize$VH() {
        return constants$2194.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD cbSize;
     * }
     */
    public static int cbSize$get(MemorySegment seg) {
        return (int)constants$2194.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD cbSize;
     * }
     */
    public static void cbSize$set(MemorySegment seg, int x) {
        constants$2194.const$4.set(seg, x);
    }
    public static int cbSize$get(MemorySegment seg, long index) {
        return (int)constants$2194.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void cbSize$set(MemorySegment seg, long index, int x) {
        constants$2194.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pLastSyncTime$VH() {
        return constants$2194.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * FILETIME* pLastSyncTime;
     * }
     */
    public static MemorySegment pLastSyncTime$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2194.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * FILETIME* pLastSyncTime;
     * }
     */
    public static void pLastSyncTime$set(MemorySegment seg, MemorySegment x) {
        constants$2194.const$5.set(seg, x);
    }
    public static MemorySegment pLastSyncTime$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2194.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void pLastSyncTime$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2194.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwMaxUrlRetrievalByteCount$VH() {
        return constants$2195.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwMaxUrlRetrievalByteCount;
     * }
     */
    public static int dwMaxUrlRetrievalByteCount$get(MemorySegment seg) {
        return (int)constants$2195.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwMaxUrlRetrievalByteCount;
     * }
     */
    public static void dwMaxUrlRetrievalByteCount$set(MemorySegment seg, int x) {
        constants$2195.const$0.set(seg, x);
    }
    public static int dwMaxUrlRetrievalByteCount$get(MemorySegment seg, long index) {
        return (int)constants$2195.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void dwMaxUrlRetrievalByteCount$set(MemorySegment seg, long index, int x) {
        constants$2195.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pPreFetchInfo$VH() {
        return constants$2195.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PCRYPTNET_URL_CACHE_PRE_FETCH_INFO pPreFetchInfo;
     * }
     */
    public static MemorySegment pPreFetchInfo$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2195.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PCRYPTNET_URL_CACHE_PRE_FETCH_INFO pPreFetchInfo;
     * }
     */
    public static void pPreFetchInfo$set(MemorySegment seg, MemorySegment x) {
        constants$2195.const$1.set(seg, x);
    }
    public static MemorySegment pPreFetchInfo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2195.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void pPreFetchInfo$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2195.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pFlushInfo$VH() {
        return constants$2195.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PCRYPTNET_URL_CACHE_FLUSH_INFO pFlushInfo;
     * }
     */
    public static MemorySegment pFlushInfo$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2195.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PCRYPTNET_URL_CACHE_FLUSH_INFO pFlushInfo;
     * }
     */
    public static void pFlushInfo$set(MemorySegment seg, MemorySegment x) {
        constants$2195.const$2.set(seg, x);
    }
    public static MemorySegment pFlushInfo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2195.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void pFlushInfo$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2195.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ppResponseInfo$VH() {
        return constants$2195.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PCRYPTNET_URL_CACHE_RESPONSE_INFO* ppResponseInfo;
     * }
     */
    public static MemorySegment ppResponseInfo$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2195.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PCRYPTNET_URL_CACHE_RESPONSE_INFO* ppResponseInfo;
     * }
     */
    public static void ppResponseInfo$set(MemorySegment seg, MemorySegment x) {
        constants$2195.const$3.set(seg, x);
    }
    public static MemorySegment ppResponseInfo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2195.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void ppResponseInfo$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2195.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pwszCacheFileNamePrefix$VH() {
        return constants$2195.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPWSTR pwszCacheFileNamePrefix;
     * }
     */
    public static MemorySegment pwszCacheFileNamePrefix$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2195.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPWSTR pwszCacheFileNamePrefix;
     * }
     */
    public static void pwszCacheFileNamePrefix$set(MemorySegment seg, MemorySegment x) {
        constants$2195.const$4.set(seg, x);
    }
    public static MemorySegment pwszCacheFileNamePrefix$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2195.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void pwszCacheFileNamePrefix$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2195.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pftCacheResync$VH() {
        return constants$2195.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPFILETIME pftCacheResync;
     * }
     */
    public static MemorySegment pftCacheResync$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2195.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPFILETIME pftCacheResync;
     * }
     */
    public static void pftCacheResync$set(MemorySegment seg, MemorySegment x) {
        constants$2195.const$5.set(seg, x);
    }
    public static MemorySegment pftCacheResync$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2195.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void pftCacheResync$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2195.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle fProxyCacheRetrieval$VH() {
        return constants$2196.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BOOL fProxyCacheRetrieval;
     * }
     */
    public static int fProxyCacheRetrieval$get(MemorySegment seg) {
        return (int)constants$2196.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BOOL fProxyCacheRetrieval;
     * }
     */
    public static void fProxyCacheRetrieval$set(MemorySegment seg, int x) {
        constants$2196.const$0.set(seg, x);
    }
    public static int fProxyCacheRetrieval$get(MemorySegment seg, long index) {
        return (int)constants$2196.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void fProxyCacheRetrieval$set(MemorySegment seg, long index, int x) {
        constants$2196.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwHttpStatusCode$VH() {
        return constants$2196.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwHttpStatusCode;
     * }
     */
    public static int dwHttpStatusCode$get(MemorySegment seg) {
        return (int)constants$2196.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwHttpStatusCode;
     * }
     */
    public static void dwHttpStatusCode$set(MemorySegment seg, int x) {
        constants$2196.const$1.set(seg, x);
    }
    public static int dwHttpStatusCode$get(MemorySegment seg, long index) {
        return (int)constants$2196.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void dwHttpStatusCode$set(MemorySegment seg, long index, int x) {
        constants$2196.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ppwszErrorResponseHeaders$VH() {
        return constants$2196.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPWSTR* ppwszErrorResponseHeaders;
     * }
     */
    public static MemorySegment ppwszErrorResponseHeaders$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2196.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPWSTR* ppwszErrorResponseHeaders;
     * }
     */
    public static void ppwszErrorResponseHeaders$set(MemorySegment seg, MemorySegment x) {
        constants$2196.const$2.set(seg, x);
    }
    public static MemorySegment ppwszErrorResponseHeaders$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2196.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void ppwszErrorResponseHeaders$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2196.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ppErrorContentBlob$VH() {
        return constants$2196.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PCRYPT_DATA_BLOB* ppErrorContentBlob;
     * }
     */
    public static MemorySegment ppErrorContentBlob$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2196.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PCRYPT_DATA_BLOB* ppErrorContentBlob;
     * }
     */
    public static void ppErrorContentBlob$set(MemorySegment seg, MemorySegment x) {
        constants$2196.const$3.set(seg, x);
    }
    public static MemorySegment ppErrorContentBlob$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2196.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void ppErrorContentBlob$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2196.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



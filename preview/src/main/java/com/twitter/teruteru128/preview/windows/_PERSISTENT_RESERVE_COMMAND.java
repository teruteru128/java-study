// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _PERSISTENT_RESERVE_COMMAND {
 *     DWORD Version;
 *     DWORD Size;
 *     union {
 *         struct  PR_IN;
 *         struct  PR_OUT;
 *     };
 * };
 * }
 */
public class _PERSISTENT_RESERVE_COMMAND {

    public static MemoryLayout $LAYOUT() {
        return constants$2480.const$3;
    }
    public static VarHandle Version$VH() {
        return constants$2480.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Version;
     * }
     */
    public static int Version$get(MemorySegment seg) {
        return (int)constants$2480.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Version;
     * }
     */
    public static void Version$set(MemorySegment seg, int x) {
        constants$2480.const$4.set(seg, x);
    }
    public static int Version$get(MemorySegment seg, long index) {
        return (int)constants$2480.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, int x) {
        constants$2480.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Size$VH() {
        return constants$2480.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Size;
     * }
     */
    public static int Size$get(MemorySegment seg) {
        return (int)constants$2480.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Size;
     * }
     */
    public static void Size$set(MemorySegment seg, int x) {
        constants$2480.const$5.set(seg, x);
    }
    public static int Size$get(MemorySegment seg, long index) {
        return (int)constants$2480.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void Size$set(MemorySegment seg, long index, int x) {
        constants$2480.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
     * struct {
     *          *     BYTE ServiceAction;
     *     BYTE Reserved1;
     *     WORD AllocationLength;
     * };
     * }
     */
    public static final class PR_IN {

        // Suppresses default constructor, ensuring non-instantiability.
        private PR_IN() {}
        public static MemoryLayout $LAYOUT() {
            return constants$2481.const$0;
        }
        public static VarHandle AllocationLength$VH() {
            return constants$2481.const$1;
        }
        /**
         * Getter for field:
         * {@snippet :
         * WORD AllocationLength;
         * }
         */
        public static short AllocationLength$get(MemorySegment seg) {
            return (short)constants$2481.const$1.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * WORD AllocationLength;
         * }
         */
        public static void AllocationLength$set(MemorySegment seg, short x) {
            constants$2481.const$1.set(seg, x);
        }
        public static short AllocationLength$get(MemorySegment seg, long index) {
            return (short)constants$2481.const$1.get(seg.asSlice(index*sizeof()));
        }
        public static void AllocationLength$set(MemorySegment seg, long index, short x) {
            constants$2481.const$1.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment PR_IN$slice(MemorySegment seg) {
        return seg.asSlice(8, 4);
    }
    /**
     * {@snippet :
     * struct {
     *          *     BYTE ServiceAction;
     *     BYTE Reserved1;
     *     BYTE Type;
     *     BYTE Scope;
     *     BYTE ParameterList[0];
     * };
     * }
     */
    public static final class PR_OUT {

        // Suppresses default constructor, ensuring non-instantiability.
        private PR_OUT() {}
        public static MemoryLayout $LAYOUT() {
            return constants$2481.const$2;
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment PR_OUT$slice(MemorySegment seg) {
        return seg.asSlice(8, 2);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _GET_CHANGER_PARAMETERS {
 *     DWORD Size;
 *     WORD NumberTransportElements;
 *     WORD NumberStorageElements;
 *     WORD NumberCleanerSlots;
 *     WORD NumberIEElements;
 *     WORD NumberDataTransferElements;
 *     WORD NumberOfDoors;
 *     WORD FirstSlotNumber;
 *     WORD FirstDriveNumber;
 *     WORD FirstTransportNumber;
 *     WORD FirstIEPortNumber;
 *     WORD FirstCleanerSlotAddress;
 *     WORD MagazineSize;
 *     DWORD DriveCleanTimeout;
 *     DWORD Features0;
 *     DWORD Features1;
 *     BYTE MoveFromTransport;
 *     BYTE MoveFromSlot;
 *     BYTE MoveFromIePort;
 *     BYTE MoveFromDrive;
 *     BYTE ExchangeFromTransport;
 *     BYTE ExchangeFromSlot;
 *     BYTE ExchangeFromIePort;
 *     BYTE ExchangeFromDrive;
 *     BYTE LockUnlockCapabilities;
 *     BYTE PositionCapabilities;
 *     BYTE Reserved1[2];
 *     DWORD Reserved2[2];
 * };
 * }
 */
public class _GET_CHANGER_PARAMETERS {

    public static MemoryLayout $LAYOUT() {
        return constants$2562.const$2;
    }
    public static VarHandle Size$VH() {
        return constants$2562.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Size;
     * }
     */
    public static int Size$get(MemorySegment seg) {
        return (int)constants$2562.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Size;
     * }
     */
    public static void Size$set(MemorySegment seg, int x) {
        constants$2562.const$3.set(seg, x);
    }
    public static int Size$get(MemorySegment seg, long index) {
        return (int)constants$2562.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void Size$set(MemorySegment seg, long index, int x) {
        constants$2562.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle NumberTransportElements$VH() {
        return constants$2562.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD NumberTransportElements;
     * }
     */
    public static short NumberTransportElements$get(MemorySegment seg) {
        return (short)constants$2562.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD NumberTransportElements;
     * }
     */
    public static void NumberTransportElements$set(MemorySegment seg, short x) {
        constants$2562.const$4.set(seg, x);
    }
    public static short NumberTransportElements$get(MemorySegment seg, long index) {
        return (short)constants$2562.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void NumberTransportElements$set(MemorySegment seg, long index, short x) {
        constants$2562.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle NumberStorageElements$VH() {
        return constants$2562.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD NumberStorageElements;
     * }
     */
    public static short NumberStorageElements$get(MemorySegment seg) {
        return (short)constants$2562.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD NumberStorageElements;
     * }
     */
    public static void NumberStorageElements$set(MemorySegment seg, short x) {
        constants$2562.const$5.set(seg, x);
    }
    public static short NumberStorageElements$get(MemorySegment seg, long index) {
        return (short)constants$2562.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void NumberStorageElements$set(MemorySegment seg, long index, short x) {
        constants$2562.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle NumberCleanerSlots$VH() {
        return constants$2563.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD NumberCleanerSlots;
     * }
     */
    public static short NumberCleanerSlots$get(MemorySegment seg) {
        return (short)constants$2563.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD NumberCleanerSlots;
     * }
     */
    public static void NumberCleanerSlots$set(MemorySegment seg, short x) {
        constants$2563.const$0.set(seg, x);
    }
    public static short NumberCleanerSlots$get(MemorySegment seg, long index) {
        return (short)constants$2563.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void NumberCleanerSlots$set(MemorySegment seg, long index, short x) {
        constants$2563.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle NumberIEElements$VH() {
        return constants$2563.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD NumberIEElements;
     * }
     */
    public static short NumberIEElements$get(MemorySegment seg) {
        return (short)constants$2563.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD NumberIEElements;
     * }
     */
    public static void NumberIEElements$set(MemorySegment seg, short x) {
        constants$2563.const$1.set(seg, x);
    }
    public static short NumberIEElements$get(MemorySegment seg, long index) {
        return (short)constants$2563.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void NumberIEElements$set(MemorySegment seg, long index, short x) {
        constants$2563.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle NumberDataTransferElements$VH() {
        return constants$2563.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD NumberDataTransferElements;
     * }
     */
    public static short NumberDataTransferElements$get(MemorySegment seg) {
        return (short)constants$2563.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD NumberDataTransferElements;
     * }
     */
    public static void NumberDataTransferElements$set(MemorySegment seg, short x) {
        constants$2563.const$2.set(seg, x);
    }
    public static short NumberDataTransferElements$get(MemorySegment seg, long index) {
        return (short)constants$2563.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void NumberDataTransferElements$set(MemorySegment seg, long index, short x) {
        constants$2563.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle NumberOfDoors$VH() {
        return constants$2563.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD NumberOfDoors;
     * }
     */
    public static short NumberOfDoors$get(MemorySegment seg) {
        return (short)constants$2563.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD NumberOfDoors;
     * }
     */
    public static void NumberOfDoors$set(MemorySegment seg, short x) {
        constants$2563.const$3.set(seg, x);
    }
    public static short NumberOfDoors$get(MemorySegment seg, long index) {
        return (short)constants$2563.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void NumberOfDoors$set(MemorySegment seg, long index, short x) {
        constants$2563.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle FirstSlotNumber$VH() {
        return constants$2563.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD FirstSlotNumber;
     * }
     */
    public static short FirstSlotNumber$get(MemorySegment seg) {
        return (short)constants$2563.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD FirstSlotNumber;
     * }
     */
    public static void FirstSlotNumber$set(MemorySegment seg, short x) {
        constants$2563.const$4.set(seg, x);
    }
    public static short FirstSlotNumber$get(MemorySegment seg, long index) {
        return (short)constants$2563.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void FirstSlotNumber$set(MemorySegment seg, long index, short x) {
        constants$2563.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle FirstDriveNumber$VH() {
        return constants$2563.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD FirstDriveNumber;
     * }
     */
    public static short FirstDriveNumber$get(MemorySegment seg) {
        return (short)constants$2563.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD FirstDriveNumber;
     * }
     */
    public static void FirstDriveNumber$set(MemorySegment seg, short x) {
        constants$2563.const$5.set(seg, x);
    }
    public static short FirstDriveNumber$get(MemorySegment seg, long index) {
        return (short)constants$2563.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void FirstDriveNumber$set(MemorySegment seg, long index, short x) {
        constants$2563.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle FirstTransportNumber$VH() {
        return constants$2564.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD FirstTransportNumber;
     * }
     */
    public static short FirstTransportNumber$get(MemorySegment seg) {
        return (short)constants$2564.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD FirstTransportNumber;
     * }
     */
    public static void FirstTransportNumber$set(MemorySegment seg, short x) {
        constants$2564.const$0.set(seg, x);
    }
    public static short FirstTransportNumber$get(MemorySegment seg, long index) {
        return (short)constants$2564.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void FirstTransportNumber$set(MemorySegment seg, long index, short x) {
        constants$2564.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle FirstIEPortNumber$VH() {
        return constants$2564.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD FirstIEPortNumber;
     * }
     */
    public static short FirstIEPortNumber$get(MemorySegment seg) {
        return (short)constants$2564.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD FirstIEPortNumber;
     * }
     */
    public static void FirstIEPortNumber$set(MemorySegment seg, short x) {
        constants$2564.const$1.set(seg, x);
    }
    public static short FirstIEPortNumber$get(MemorySegment seg, long index) {
        return (short)constants$2564.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void FirstIEPortNumber$set(MemorySegment seg, long index, short x) {
        constants$2564.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle FirstCleanerSlotAddress$VH() {
        return constants$2564.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD FirstCleanerSlotAddress;
     * }
     */
    public static short FirstCleanerSlotAddress$get(MemorySegment seg) {
        return (short)constants$2564.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD FirstCleanerSlotAddress;
     * }
     */
    public static void FirstCleanerSlotAddress$set(MemorySegment seg, short x) {
        constants$2564.const$2.set(seg, x);
    }
    public static short FirstCleanerSlotAddress$get(MemorySegment seg, long index) {
        return (short)constants$2564.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void FirstCleanerSlotAddress$set(MemorySegment seg, long index, short x) {
        constants$2564.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MagazineSize$VH() {
        return constants$2564.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD MagazineSize;
     * }
     */
    public static short MagazineSize$get(MemorySegment seg) {
        return (short)constants$2564.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD MagazineSize;
     * }
     */
    public static void MagazineSize$set(MemorySegment seg, short x) {
        constants$2564.const$3.set(seg, x);
    }
    public static short MagazineSize$get(MemorySegment seg, long index) {
        return (short)constants$2564.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void MagazineSize$set(MemorySegment seg, long index, short x) {
        constants$2564.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle DriveCleanTimeout$VH() {
        return constants$2564.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD DriveCleanTimeout;
     * }
     */
    public static int DriveCleanTimeout$get(MemorySegment seg) {
        return (int)constants$2564.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD DriveCleanTimeout;
     * }
     */
    public static void DriveCleanTimeout$set(MemorySegment seg, int x) {
        constants$2564.const$4.set(seg, x);
    }
    public static int DriveCleanTimeout$get(MemorySegment seg, long index) {
        return (int)constants$2564.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void DriveCleanTimeout$set(MemorySegment seg, long index, int x) {
        constants$2564.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Features0$VH() {
        return constants$2564.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Features0;
     * }
     */
    public static int Features0$get(MemorySegment seg) {
        return (int)constants$2564.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Features0;
     * }
     */
    public static void Features0$set(MemorySegment seg, int x) {
        constants$2564.const$5.set(seg, x);
    }
    public static int Features0$get(MemorySegment seg, long index) {
        return (int)constants$2564.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void Features0$set(MemorySegment seg, long index, int x) {
        constants$2564.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Features1$VH() {
        return constants$2565.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Features1;
     * }
     */
    public static int Features1$get(MemorySegment seg) {
        return (int)constants$2565.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Features1;
     * }
     */
    public static void Features1$set(MemorySegment seg, int x) {
        constants$2565.const$0.set(seg, x);
    }
    public static int Features1$get(MemorySegment seg, long index) {
        return (int)constants$2565.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Features1$set(MemorySegment seg, long index, int x) {
        constants$2565.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MoveFromTransport$VH() {
        return constants$2565.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE MoveFromTransport;
     * }
     */
    public static byte MoveFromTransport$get(MemorySegment seg) {
        return (byte)constants$2565.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE MoveFromTransport;
     * }
     */
    public static void MoveFromTransport$set(MemorySegment seg, byte x) {
        constants$2565.const$1.set(seg, x);
    }
    public static byte MoveFromTransport$get(MemorySegment seg, long index) {
        return (byte)constants$2565.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void MoveFromTransport$set(MemorySegment seg, long index, byte x) {
        constants$2565.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MoveFromSlot$VH() {
        return constants$2565.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE MoveFromSlot;
     * }
     */
    public static byte MoveFromSlot$get(MemorySegment seg) {
        return (byte)constants$2565.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE MoveFromSlot;
     * }
     */
    public static void MoveFromSlot$set(MemorySegment seg, byte x) {
        constants$2565.const$2.set(seg, x);
    }
    public static byte MoveFromSlot$get(MemorySegment seg, long index) {
        return (byte)constants$2565.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void MoveFromSlot$set(MemorySegment seg, long index, byte x) {
        constants$2565.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MoveFromIePort$VH() {
        return constants$2565.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE MoveFromIePort;
     * }
     */
    public static byte MoveFromIePort$get(MemorySegment seg) {
        return (byte)constants$2565.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE MoveFromIePort;
     * }
     */
    public static void MoveFromIePort$set(MemorySegment seg, byte x) {
        constants$2565.const$3.set(seg, x);
    }
    public static byte MoveFromIePort$get(MemorySegment seg, long index) {
        return (byte)constants$2565.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void MoveFromIePort$set(MemorySegment seg, long index, byte x) {
        constants$2565.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MoveFromDrive$VH() {
        return constants$2565.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE MoveFromDrive;
     * }
     */
    public static byte MoveFromDrive$get(MemorySegment seg) {
        return (byte)constants$2565.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE MoveFromDrive;
     * }
     */
    public static void MoveFromDrive$set(MemorySegment seg, byte x) {
        constants$2565.const$4.set(seg, x);
    }
    public static byte MoveFromDrive$get(MemorySegment seg, long index) {
        return (byte)constants$2565.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void MoveFromDrive$set(MemorySegment seg, long index, byte x) {
        constants$2565.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ExchangeFromTransport$VH() {
        return constants$2565.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE ExchangeFromTransport;
     * }
     */
    public static byte ExchangeFromTransport$get(MemorySegment seg) {
        return (byte)constants$2565.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE ExchangeFromTransport;
     * }
     */
    public static void ExchangeFromTransport$set(MemorySegment seg, byte x) {
        constants$2565.const$5.set(seg, x);
    }
    public static byte ExchangeFromTransport$get(MemorySegment seg, long index) {
        return (byte)constants$2565.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void ExchangeFromTransport$set(MemorySegment seg, long index, byte x) {
        constants$2565.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ExchangeFromSlot$VH() {
        return constants$2566.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE ExchangeFromSlot;
     * }
     */
    public static byte ExchangeFromSlot$get(MemorySegment seg) {
        return (byte)constants$2566.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE ExchangeFromSlot;
     * }
     */
    public static void ExchangeFromSlot$set(MemorySegment seg, byte x) {
        constants$2566.const$0.set(seg, x);
    }
    public static byte ExchangeFromSlot$get(MemorySegment seg, long index) {
        return (byte)constants$2566.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void ExchangeFromSlot$set(MemorySegment seg, long index, byte x) {
        constants$2566.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ExchangeFromIePort$VH() {
        return constants$2566.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE ExchangeFromIePort;
     * }
     */
    public static byte ExchangeFromIePort$get(MemorySegment seg) {
        return (byte)constants$2566.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE ExchangeFromIePort;
     * }
     */
    public static void ExchangeFromIePort$set(MemorySegment seg, byte x) {
        constants$2566.const$1.set(seg, x);
    }
    public static byte ExchangeFromIePort$get(MemorySegment seg, long index) {
        return (byte)constants$2566.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void ExchangeFromIePort$set(MemorySegment seg, long index, byte x) {
        constants$2566.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ExchangeFromDrive$VH() {
        return constants$2566.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE ExchangeFromDrive;
     * }
     */
    public static byte ExchangeFromDrive$get(MemorySegment seg) {
        return (byte)constants$2566.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE ExchangeFromDrive;
     * }
     */
    public static void ExchangeFromDrive$set(MemorySegment seg, byte x) {
        constants$2566.const$2.set(seg, x);
    }
    public static byte ExchangeFromDrive$get(MemorySegment seg, long index) {
        return (byte)constants$2566.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void ExchangeFromDrive$set(MemorySegment seg, long index, byte x) {
        constants$2566.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle LockUnlockCapabilities$VH() {
        return constants$2566.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE LockUnlockCapabilities;
     * }
     */
    public static byte LockUnlockCapabilities$get(MemorySegment seg) {
        return (byte)constants$2566.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE LockUnlockCapabilities;
     * }
     */
    public static void LockUnlockCapabilities$set(MemorySegment seg, byte x) {
        constants$2566.const$3.set(seg, x);
    }
    public static byte LockUnlockCapabilities$get(MemorySegment seg, long index) {
        return (byte)constants$2566.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void LockUnlockCapabilities$set(MemorySegment seg, long index, byte x) {
        constants$2566.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle PositionCapabilities$VH() {
        return constants$2566.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE PositionCapabilities;
     * }
     */
    public static byte PositionCapabilities$get(MemorySegment seg) {
        return (byte)constants$2566.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE PositionCapabilities;
     * }
     */
    public static void PositionCapabilities$set(MemorySegment seg, byte x) {
        constants$2566.const$4.set(seg, x);
    }
    public static byte PositionCapabilities$get(MemorySegment seg, long index) {
        return (byte)constants$2566.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void PositionCapabilities$set(MemorySegment seg, long index, byte x) {
        constants$2566.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Reserved1$slice(MemorySegment seg) {
        return seg.asSlice(50, 2);
    }
    public static MemorySegment Reserved2$slice(MemorySegment seg) {
        return seg.asSlice(52, 8);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



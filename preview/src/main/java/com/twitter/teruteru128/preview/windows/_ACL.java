// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _ACL {
 *     BYTE AclRevision;
 *     BYTE Sbz1;
 *     WORD AclSize;
 *     WORD AceCount;
 *     WORD Sbz2;
 * };
 * }
 */
public class _ACL {

    public static MemoryLayout $LAYOUT() {
        return constants$142.const$2;
    }
    public static VarHandle AclRevision$VH() {
        return constants$142.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE AclRevision;
     * }
     */
    public static byte AclRevision$get(MemorySegment seg) {
        return (byte)constants$142.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE AclRevision;
     * }
     */
    public static void AclRevision$set(MemorySegment seg, byte x) {
        constants$142.const$3.set(seg, x);
    }
    public static byte AclRevision$get(MemorySegment seg, long index) {
        return (byte)constants$142.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void AclRevision$set(MemorySegment seg, long index, byte x) {
        constants$142.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Sbz1$VH() {
        return constants$142.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE Sbz1;
     * }
     */
    public static byte Sbz1$get(MemorySegment seg) {
        return (byte)constants$142.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE Sbz1;
     * }
     */
    public static void Sbz1$set(MemorySegment seg, byte x) {
        constants$142.const$4.set(seg, x);
    }
    public static byte Sbz1$get(MemorySegment seg, long index) {
        return (byte)constants$142.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void Sbz1$set(MemorySegment seg, long index, byte x) {
        constants$142.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle AclSize$VH() {
        return constants$142.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD AclSize;
     * }
     */
    public static short AclSize$get(MemorySegment seg) {
        return (short)constants$142.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD AclSize;
     * }
     */
    public static void AclSize$set(MemorySegment seg, short x) {
        constants$142.const$5.set(seg, x);
    }
    public static short AclSize$get(MemorySegment seg, long index) {
        return (short)constants$142.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void AclSize$set(MemorySegment seg, long index, short x) {
        constants$142.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle AceCount$VH() {
        return constants$143.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD AceCount;
     * }
     */
    public static short AceCount$get(MemorySegment seg) {
        return (short)constants$143.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD AceCount;
     * }
     */
    public static void AceCount$set(MemorySegment seg, short x) {
        constants$143.const$0.set(seg, x);
    }
    public static short AceCount$get(MemorySegment seg, long index) {
        return (short)constants$143.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void AceCount$set(MemorySegment seg, long index, short x) {
        constants$143.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Sbz2$VH() {
        return constants$143.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD Sbz2;
     * }
     */
    public static short Sbz2$get(MemorySegment seg) {
        return (short)constants$143.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD Sbz2;
     * }
     */
    public static void Sbz2$set(MemorySegment seg, short x) {
        constants$143.const$1.set(seg, x);
    }
    public static short Sbz2$get(MemorySegment seg, long index) {
        return (short)constants$143.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void Sbz2$set(MemorySegment seg, long index, short x) {
        constants$143.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



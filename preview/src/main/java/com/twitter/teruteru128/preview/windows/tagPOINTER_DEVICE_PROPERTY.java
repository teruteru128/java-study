// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tagPOINTER_DEVICE_PROPERTY {
 *     INT32 logicalMin;
 *     INT32 logicalMax;
 *     INT32 physicalMin;
 *     INT32 physicalMax;
 *     UINT32 unit;
 *     UINT32 unitExponent;
 *     USHORT usagePageId;
 *     USHORT usageId;
 * };
 * }
 */
public class tagPOINTER_DEVICE_PROPERTY {

    public static MemoryLayout $LAYOUT() {
        return constants$1397.const$0;
    }
    public static VarHandle logicalMin$VH() {
        return constants$1397.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * INT32 logicalMin;
     * }
     */
    public static int logicalMin$get(MemorySegment seg) {
        return (int)constants$1397.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * INT32 logicalMin;
     * }
     */
    public static void logicalMin$set(MemorySegment seg, int x) {
        constants$1397.const$1.set(seg, x);
    }
    public static int logicalMin$get(MemorySegment seg, long index) {
        return (int)constants$1397.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void logicalMin$set(MemorySegment seg, long index, int x) {
        constants$1397.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle logicalMax$VH() {
        return constants$1397.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * INT32 logicalMax;
     * }
     */
    public static int logicalMax$get(MemorySegment seg) {
        return (int)constants$1397.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * INT32 logicalMax;
     * }
     */
    public static void logicalMax$set(MemorySegment seg, int x) {
        constants$1397.const$2.set(seg, x);
    }
    public static int logicalMax$get(MemorySegment seg, long index) {
        return (int)constants$1397.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void logicalMax$set(MemorySegment seg, long index, int x) {
        constants$1397.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle physicalMin$VH() {
        return constants$1397.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * INT32 physicalMin;
     * }
     */
    public static int physicalMin$get(MemorySegment seg) {
        return (int)constants$1397.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * INT32 physicalMin;
     * }
     */
    public static void physicalMin$set(MemorySegment seg, int x) {
        constants$1397.const$3.set(seg, x);
    }
    public static int physicalMin$get(MemorySegment seg, long index) {
        return (int)constants$1397.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void physicalMin$set(MemorySegment seg, long index, int x) {
        constants$1397.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle physicalMax$VH() {
        return constants$1397.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * INT32 physicalMax;
     * }
     */
    public static int physicalMax$get(MemorySegment seg) {
        return (int)constants$1397.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * INT32 physicalMax;
     * }
     */
    public static void physicalMax$set(MemorySegment seg, int x) {
        constants$1397.const$4.set(seg, x);
    }
    public static int physicalMax$get(MemorySegment seg, long index) {
        return (int)constants$1397.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void physicalMax$set(MemorySegment seg, long index, int x) {
        constants$1397.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle unit$VH() {
        return constants$1397.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * UINT32 unit;
     * }
     */
    public static int unit$get(MemorySegment seg) {
        return (int)constants$1397.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * UINT32 unit;
     * }
     */
    public static void unit$set(MemorySegment seg, int x) {
        constants$1397.const$5.set(seg, x);
    }
    public static int unit$get(MemorySegment seg, long index) {
        return (int)constants$1397.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void unit$set(MemorySegment seg, long index, int x) {
        constants$1397.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle unitExponent$VH() {
        return constants$1398.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * UINT32 unitExponent;
     * }
     */
    public static int unitExponent$get(MemorySegment seg) {
        return (int)constants$1398.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * UINT32 unitExponent;
     * }
     */
    public static void unitExponent$set(MemorySegment seg, int x) {
        constants$1398.const$0.set(seg, x);
    }
    public static int unitExponent$get(MemorySegment seg, long index) {
        return (int)constants$1398.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void unitExponent$set(MemorySegment seg, long index, int x) {
        constants$1398.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle usagePageId$VH() {
        return constants$1398.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * USHORT usagePageId;
     * }
     */
    public static short usagePageId$get(MemorySegment seg) {
        return (short)constants$1398.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * USHORT usagePageId;
     * }
     */
    public static void usagePageId$set(MemorySegment seg, short x) {
        constants$1398.const$1.set(seg, x);
    }
    public static short usagePageId$get(MemorySegment seg, long index) {
        return (short)constants$1398.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void usagePageId$set(MemorySegment seg, long index, short x) {
        constants$1398.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle usageId$VH() {
        return constants$1398.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * USHORT usageId;
     * }
     */
    public static short usageId$get(MemorySegment seg) {
        return (short)constants$1398.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * USHORT usageId;
     * }
     */
    public static void usageId$set(MemorySegment seg, short x) {
        constants$1398.const$2.set(seg, x);
    }
    public static short usageId$get(MemorySegment seg, long index) {
        return (short)constants$1398.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void usageId$set(MemorySegment seg, long index, short x) {
        constants$1398.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



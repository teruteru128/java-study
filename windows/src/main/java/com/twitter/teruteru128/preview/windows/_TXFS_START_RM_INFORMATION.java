// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _TXFS_START_RM_INFORMATION {
 *     DWORD Flags;
 *     DWORDLONG LogContainerSize;
 *     DWORD LogContainerCountMin;
 *     DWORD LogContainerCountMax;
 *     DWORD LogGrowthIncrement;
 *     DWORD LogAutoShrinkPercentage;
 *     DWORD TmLogPathOffset;
 *     WORD TmLogPathLength;
 *     WORD LoggingMode;
 *     WORD LogPathLength;
 *     WORD Reserved;
 *     WCHAR LogPath[1];
 * };
 * }
 */
public class _TXFS_START_RM_INFORMATION {

    public static MemoryLayout $LAYOUT() {
        return constants$2653.const$1;
    }
    public static VarHandle Flags$VH() {
        return constants$2653.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Flags;
     * }
     */
    public static int Flags$get(MemorySegment seg) {
        return (int)constants$2653.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Flags;
     * }
     */
    public static void Flags$set(MemorySegment seg, int x) {
        constants$2653.const$2.set(seg, x);
    }
    public static int Flags$get(MemorySegment seg, long index) {
        return (int)constants$2653.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, int x) {
        constants$2653.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle LogContainerSize$VH() {
        return constants$2653.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORDLONG LogContainerSize;
     * }
     */
    public static long LogContainerSize$get(MemorySegment seg) {
        return (long)constants$2653.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORDLONG LogContainerSize;
     * }
     */
    public static void LogContainerSize$set(MemorySegment seg, long x) {
        constants$2653.const$3.set(seg, x);
    }
    public static long LogContainerSize$get(MemorySegment seg, long index) {
        return (long)constants$2653.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void LogContainerSize$set(MemorySegment seg, long index, long x) {
        constants$2653.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle LogContainerCountMin$VH() {
        return constants$2653.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD LogContainerCountMin;
     * }
     */
    public static int LogContainerCountMin$get(MemorySegment seg) {
        return (int)constants$2653.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD LogContainerCountMin;
     * }
     */
    public static void LogContainerCountMin$set(MemorySegment seg, int x) {
        constants$2653.const$4.set(seg, x);
    }
    public static int LogContainerCountMin$get(MemorySegment seg, long index) {
        return (int)constants$2653.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void LogContainerCountMin$set(MemorySegment seg, long index, int x) {
        constants$2653.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle LogContainerCountMax$VH() {
        return constants$2653.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD LogContainerCountMax;
     * }
     */
    public static int LogContainerCountMax$get(MemorySegment seg) {
        return (int)constants$2653.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD LogContainerCountMax;
     * }
     */
    public static void LogContainerCountMax$set(MemorySegment seg, int x) {
        constants$2653.const$5.set(seg, x);
    }
    public static int LogContainerCountMax$get(MemorySegment seg, long index) {
        return (int)constants$2653.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void LogContainerCountMax$set(MemorySegment seg, long index, int x) {
        constants$2653.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle LogGrowthIncrement$VH() {
        return constants$2654.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD LogGrowthIncrement;
     * }
     */
    public static int LogGrowthIncrement$get(MemorySegment seg) {
        return (int)constants$2654.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD LogGrowthIncrement;
     * }
     */
    public static void LogGrowthIncrement$set(MemorySegment seg, int x) {
        constants$2654.const$0.set(seg, x);
    }
    public static int LogGrowthIncrement$get(MemorySegment seg, long index) {
        return (int)constants$2654.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void LogGrowthIncrement$set(MemorySegment seg, long index, int x) {
        constants$2654.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle LogAutoShrinkPercentage$VH() {
        return constants$2654.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD LogAutoShrinkPercentage;
     * }
     */
    public static int LogAutoShrinkPercentage$get(MemorySegment seg) {
        return (int)constants$2654.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD LogAutoShrinkPercentage;
     * }
     */
    public static void LogAutoShrinkPercentage$set(MemorySegment seg, int x) {
        constants$2654.const$1.set(seg, x);
    }
    public static int LogAutoShrinkPercentage$get(MemorySegment seg, long index) {
        return (int)constants$2654.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void LogAutoShrinkPercentage$set(MemorySegment seg, long index, int x) {
        constants$2654.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle TmLogPathOffset$VH() {
        return constants$2654.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD TmLogPathOffset;
     * }
     */
    public static int TmLogPathOffset$get(MemorySegment seg) {
        return (int)constants$2654.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD TmLogPathOffset;
     * }
     */
    public static void TmLogPathOffset$set(MemorySegment seg, int x) {
        constants$2654.const$2.set(seg, x);
    }
    public static int TmLogPathOffset$get(MemorySegment seg, long index) {
        return (int)constants$2654.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void TmLogPathOffset$set(MemorySegment seg, long index, int x) {
        constants$2654.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle TmLogPathLength$VH() {
        return constants$2654.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD TmLogPathLength;
     * }
     */
    public static short TmLogPathLength$get(MemorySegment seg) {
        return (short)constants$2654.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD TmLogPathLength;
     * }
     */
    public static void TmLogPathLength$set(MemorySegment seg, short x) {
        constants$2654.const$3.set(seg, x);
    }
    public static short TmLogPathLength$get(MemorySegment seg, long index) {
        return (short)constants$2654.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void TmLogPathLength$set(MemorySegment seg, long index, short x) {
        constants$2654.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle LoggingMode$VH() {
        return constants$2654.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD LoggingMode;
     * }
     */
    public static short LoggingMode$get(MemorySegment seg) {
        return (short)constants$2654.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD LoggingMode;
     * }
     */
    public static void LoggingMode$set(MemorySegment seg, short x) {
        constants$2654.const$4.set(seg, x);
    }
    public static short LoggingMode$get(MemorySegment seg, long index) {
        return (short)constants$2654.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void LoggingMode$set(MemorySegment seg, long index, short x) {
        constants$2654.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle LogPathLength$VH() {
        return constants$2654.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD LogPathLength;
     * }
     */
    public static short LogPathLength$get(MemorySegment seg) {
        return (short)constants$2654.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD LogPathLength;
     * }
     */
    public static void LogPathLength$set(MemorySegment seg, short x) {
        constants$2654.const$5.set(seg, x);
    }
    public static short LogPathLength$get(MemorySegment seg, long index) {
        return (short)constants$2654.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void LogPathLength$set(MemorySegment seg, long index, short x) {
        constants$2654.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Reserved$VH() {
        return constants$2655.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD Reserved;
     * }
     */
    public static short Reserved$get(MemorySegment seg) {
        return (short)constants$2655.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD Reserved;
     * }
     */
    public static void Reserved$set(MemorySegment seg, short x) {
        constants$2655.const$0.set(seg, x);
    }
    public static short Reserved$get(MemorySegment seg, long index) {
        return (short)constants$2655.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Reserved$set(MemorySegment seg, long index, short x) {
        constants$2655.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment LogPath$slice(MemorySegment seg) {
        return seg.asSlice(44, 2);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



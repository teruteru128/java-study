// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _STORAGE_HW_FIRMWARE_INFO {
 *     DWORD Version;
 *     DWORD Size;
 *      *     BYTE SupportUpgrade;
 *     BYTE Reserved0;
 *     BYTE SlotCount;
 *     BYTE ActiveSlot;
 *     BYTE PendingActivateSlot;
 *     BOOLEAN FirmwareShared;
 *     BYTE Reserved[3];
 *     DWORD ImagePayloadAlignment;
 *     DWORD ImagePayloadMaxSize;
 *     STORAGE_HW_FIRMWARE_SLOT_INFO Slot[1];
 * };
 * }
 */
public class _STORAGE_HW_FIRMWARE_INFO {

    public static MemoryLayout $LAYOUT() {
        return constants$2494.const$2;
    }
    public static VarHandle Version$VH() {
        return constants$2494.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Version;
     * }
     */
    public static int Version$get(MemorySegment seg) {
        return (int)constants$2494.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Version;
     * }
     */
    public static void Version$set(MemorySegment seg, int x) {
        constants$2494.const$3.set(seg, x);
    }
    public static int Version$get(MemorySegment seg, long index) {
        return (int)constants$2494.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, int x) {
        constants$2494.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Size$VH() {
        return constants$2494.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Size;
     * }
     */
    public static int Size$get(MemorySegment seg) {
        return (int)constants$2494.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Size;
     * }
     */
    public static void Size$set(MemorySegment seg, int x) {
        constants$2494.const$4.set(seg, x);
    }
    public static int Size$get(MemorySegment seg, long index) {
        return (int)constants$2494.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void Size$set(MemorySegment seg, long index, int x) {
        constants$2494.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle SlotCount$VH() {
        return constants$2494.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE SlotCount;
     * }
     */
    public static byte SlotCount$get(MemorySegment seg) {
        return (byte)constants$2494.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE SlotCount;
     * }
     */
    public static void SlotCount$set(MemorySegment seg, byte x) {
        constants$2494.const$5.set(seg, x);
    }
    public static byte SlotCount$get(MemorySegment seg, long index) {
        return (byte)constants$2494.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void SlotCount$set(MemorySegment seg, long index, byte x) {
        constants$2494.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ActiveSlot$VH() {
        return constants$2495.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE ActiveSlot;
     * }
     */
    public static byte ActiveSlot$get(MemorySegment seg) {
        return (byte)constants$2495.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE ActiveSlot;
     * }
     */
    public static void ActiveSlot$set(MemorySegment seg, byte x) {
        constants$2495.const$0.set(seg, x);
    }
    public static byte ActiveSlot$get(MemorySegment seg, long index) {
        return (byte)constants$2495.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void ActiveSlot$set(MemorySegment seg, long index, byte x) {
        constants$2495.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle PendingActivateSlot$VH() {
        return constants$2495.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE PendingActivateSlot;
     * }
     */
    public static byte PendingActivateSlot$get(MemorySegment seg) {
        return (byte)constants$2495.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE PendingActivateSlot;
     * }
     */
    public static void PendingActivateSlot$set(MemorySegment seg, byte x) {
        constants$2495.const$1.set(seg, x);
    }
    public static byte PendingActivateSlot$get(MemorySegment seg, long index) {
        return (byte)constants$2495.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void PendingActivateSlot$set(MemorySegment seg, long index, byte x) {
        constants$2495.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle FirmwareShared$VH() {
        return constants$2495.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BOOLEAN FirmwareShared;
     * }
     */
    public static byte FirmwareShared$get(MemorySegment seg) {
        return (byte)constants$2495.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BOOLEAN FirmwareShared;
     * }
     */
    public static void FirmwareShared$set(MemorySegment seg, byte x) {
        constants$2495.const$2.set(seg, x);
    }
    public static byte FirmwareShared$get(MemorySegment seg, long index) {
        return (byte)constants$2495.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void FirmwareShared$set(MemorySegment seg, long index, byte x) {
        constants$2495.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Reserved$slice(MemorySegment seg) {
        return seg.asSlice(13, 3);
    }
    public static VarHandle ImagePayloadAlignment$VH() {
        return constants$2495.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD ImagePayloadAlignment;
     * }
     */
    public static int ImagePayloadAlignment$get(MemorySegment seg) {
        return (int)constants$2495.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD ImagePayloadAlignment;
     * }
     */
    public static void ImagePayloadAlignment$set(MemorySegment seg, int x) {
        constants$2495.const$3.set(seg, x);
    }
    public static int ImagePayloadAlignment$get(MemorySegment seg, long index) {
        return (int)constants$2495.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void ImagePayloadAlignment$set(MemorySegment seg, long index, int x) {
        constants$2495.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ImagePayloadMaxSize$VH() {
        return constants$2495.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD ImagePayloadMaxSize;
     * }
     */
    public static int ImagePayloadMaxSize$get(MemorySegment seg) {
        return (int)constants$2495.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD ImagePayloadMaxSize;
     * }
     */
    public static void ImagePayloadMaxSize$set(MemorySegment seg, int x) {
        constants$2495.const$4.set(seg, x);
    }
    public static int ImagePayloadMaxSize$get(MemorySegment seg, long index) {
        return (int)constants$2495.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void ImagePayloadMaxSize$set(MemorySegment seg, long index, int x) {
        constants$2495.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Slot$slice(MemorySegment seg) {
        return seg.asSlice(24, 32);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



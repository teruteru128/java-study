// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tagGCP_RESULTSW {
 *     DWORD lStructSize;
 *     LPWSTR lpOutString;
 *     UINT* lpOrder;
 *     int* lpDx;
 *     int* lpCaretPos;
 *     LPSTR lpClass;
 *     LPWSTR lpGlyphs;
 *     UINT nGlyphs;
 *     int nMaxFit;
 * };
 * }
 */
public class tagGCP_RESULTSW {

    public static MemoryLayout $LAYOUT() {
        return constants$986.const$3;
    }
    public static VarHandle lStructSize$VH() {
        return constants$986.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD lStructSize;
     * }
     */
    public static int lStructSize$get(MemorySegment seg) {
        return (int)constants$986.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD lStructSize;
     * }
     */
    public static void lStructSize$set(MemorySegment seg, int x) {
        constants$986.const$4.set(seg, x);
    }
    public static int lStructSize$get(MemorySegment seg, long index) {
        return (int)constants$986.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void lStructSize$set(MemorySegment seg, long index, int x) {
        constants$986.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lpOutString$VH() {
        return constants$986.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPWSTR lpOutString;
     * }
     */
    public static MemorySegment lpOutString$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$986.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPWSTR lpOutString;
     * }
     */
    public static void lpOutString$set(MemorySegment seg, MemorySegment x) {
        constants$986.const$5.set(seg, x);
    }
    public static MemorySegment lpOutString$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$986.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void lpOutString$set(MemorySegment seg, long index, MemorySegment x) {
        constants$986.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lpOrder$VH() {
        return constants$987.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * UINT* lpOrder;
     * }
     */
    public static MemorySegment lpOrder$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$987.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * UINT* lpOrder;
     * }
     */
    public static void lpOrder$set(MemorySegment seg, MemorySegment x) {
        constants$987.const$0.set(seg, x);
    }
    public static MemorySegment lpOrder$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$987.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void lpOrder$set(MemorySegment seg, long index, MemorySegment x) {
        constants$987.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lpDx$VH() {
        return constants$987.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int* lpDx;
     * }
     */
    public static MemorySegment lpDx$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$987.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int* lpDx;
     * }
     */
    public static void lpDx$set(MemorySegment seg, MemorySegment x) {
        constants$987.const$1.set(seg, x);
    }
    public static MemorySegment lpDx$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$987.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void lpDx$set(MemorySegment seg, long index, MemorySegment x) {
        constants$987.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lpCaretPos$VH() {
        return constants$987.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int* lpCaretPos;
     * }
     */
    public static MemorySegment lpCaretPos$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$987.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int* lpCaretPos;
     * }
     */
    public static void lpCaretPos$set(MemorySegment seg, MemorySegment x) {
        constants$987.const$2.set(seg, x);
    }
    public static MemorySegment lpCaretPos$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$987.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void lpCaretPos$set(MemorySegment seg, long index, MemorySegment x) {
        constants$987.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lpClass$VH() {
        return constants$987.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPSTR lpClass;
     * }
     */
    public static MemorySegment lpClass$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$987.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPSTR lpClass;
     * }
     */
    public static void lpClass$set(MemorySegment seg, MemorySegment x) {
        constants$987.const$3.set(seg, x);
    }
    public static MemorySegment lpClass$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$987.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void lpClass$set(MemorySegment seg, long index, MemorySegment x) {
        constants$987.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lpGlyphs$VH() {
        return constants$987.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPWSTR lpGlyphs;
     * }
     */
    public static MemorySegment lpGlyphs$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$987.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPWSTR lpGlyphs;
     * }
     */
    public static void lpGlyphs$set(MemorySegment seg, MemorySegment x) {
        constants$987.const$4.set(seg, x);
    }
    public static MemorySegment lpGlyphs$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$987.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void lpGlyphs$set(MemorySegment seg, long index, MemorySegment x) {
        constants$987.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nGlyphs$VH() {
        return constants$987.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * UINT nGlyphs;
     * }
     */
    public static int nGlyphs$get(MemorySegment seg) {
        return (int)constants$987.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * UINT nGlyphs;
     * }
     */
    public static void nGlyphs$set(MemorySegment seg, int x) {
        constants$987.const$5.set(seg, x);
    }
    public static int nGlyphs$get(MemorySegment seg, long index) {
        return (int)constants$987.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void nGlyphs$set(MemorySegment seg, long index, int x) {
        constants$987.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nMaxFit$VH() {
        return constants$988.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int nMaxFit;
     * }
     */
    public static int nMaxFit$get(MemorySegment seg) {
        return (int)constants$988.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int nMaxFit;
     * }
     */
    public static void nMaxFit$set(MemorySegment seg, int x) {
        constants$988.const$0.set(seg, x);
    }
    public static int nMaxFit$get(MemorySegment seg, long index) {
        return (int)constants$988.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void nMaxFit$set(MemorySegment seg, long index, int x) {
        constants$988.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct DISPLAYCONFIG_PATH_SOURCE_INFO {
 *     LUID adapterId;
 *     UINT32 id;
 *     union {
 *         UINT32 modeInfoIdx;
 *         struct {
 *              *             UINT32 cloneGroupId;
 *             UINT32 sourceModeInfoIdx;
 *         };
 *     };
 *     UINT32 statusFlags;
 * };
 * }
 */
public class DISPLAYCONFIG_PATH_SOURCE_INFO {

    public static MemoryLayout $LAYOUT() {
        return constants$960.const$4;
    }
    public static MemorySegment adapterId$slice(MemorySegment seg) {
        return seg.asSlice(0, 8);
    }
    public static VarHandle id$VH() {
        return constants$960.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * UINT32 id;
     * }
     */
    public static int id$get(MemorySegment seg) {
        return (int)constants$960.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * UINT32 id;
     * }
     */
    public static void id$set(MemorySegment seg, int x) {
        constants$960.const$5.set(seg, x);
    }
    public static int id$get(MemorySegment seg, long index) {
        return (int)constants$960.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void id$set(MemorySegment seg, long index, int x) {
        constants$960.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle modeInfoIdx$VH() {
        return constants$961.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * UINT32 modeInfoIdx;
     * }
     */
    public static int modeInfoIdx$get(MemorySegment seg) {
        return (int)constants$961.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * UINT32 modeInfoIdx;
     * }
     */
    public static void modeInfoIdx$set(MemorySegment seg, int x) {
        constants$961.const$0.set(seg, x);
    }
    public static int modeInfoIdx$get(MemorySegment seg, long index) {
        return (int)constants$961.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void modeInfoIdx$set(MemorySegment seg, long index, int x) {
        constants$961.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle statusFlags$VH() {
        return constants$961.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * UINT32 statusFlags;
     * }
     */
    public static int statusFlags$get(MemorySegment seg) {
        return (int)constants$961.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * UINT32 statusFlags;
     * }
     */
    public static void statusFlags$set(MemorySegment seg, int x) {
        constants$961.const$1.set(seg, x);
    }
    public static int statusFlags$get(MemorySegment seg, long index) {
        return (int)constants$961.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void statusFlags$set(MemorySegment seg, long index, int x) {
        constants$961.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



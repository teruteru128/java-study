// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _CERT_CONTEXT* (*PFN_CRYPT_GET_SIGNER_CERTIFICATE)(void* pvGetArg,unsigned long dwCertEncodingType,struct _CERT_INFO* pSignerId,void* hMsgCertStore);
 * }
 */
public interface PFN_CRYPT_GET_SIGNER_CERTIFICATE {

    java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment pvGetArg, int dwCertEncodingType, java.lang.foreign.MemorySegment pSignerId, java.lang.foreign.MemorySegment hMsgCertStore);
    static MemorySegment allocate(PFN_CRYPT_GET_SIGNER_CERTIFICATE fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$2174.const$1, fi, constants$595.const$3, scope);
    }
    static PFN_CRYPT_GET_SIGNER_CERTIFICATE ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (java.lang.foreign.MemorySegment _pvGetArg, int _dwCertEncodingType, java.lang.foreign.MemorySegment _pSignerId, java.lang.foreign.MemorySegment _hMsgCertStore) -> {
            try {
                return (java.lang.foreign.MemorySegment)constants$2174.const$2.invokeExact(symbol, _pvGetArg, _dwCertEncodingType, _pSignerId, _hMsgCertStore);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}



// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _FILE_REMOTE_PROTOCOL_INFO {
 *     USHORT StructureVersion;
 *     USHORT StructureSize;
 *     ULONG Protocol;
 *     USHORT ProtocolMajorVersion;
 *     USHORT ProtocolMinorVersion;
 *     USHORT ProtocolRevision;
 *     USHORT Reserved;
 *     ULONG Flags;
 *     struct  GenericReserved;
 *     union  ProtocolSpecific;
 * };
 * }
 */
public class _FILE_REMOTE_PROTOCOL_INFO {

    public static MemoryLayout $LAYOUT() {
        return constants$876.const$1;
    }
    public static VarHandle StructureVersion$VH() {
        return constants$876.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * USHORT StructureVersion;
     * }
     */
    public static short StructureVersion$get(MemorySegment seg) {
        return (short)constants$876.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * USHORT StructureVersion;
     * }
     */
    public static void StructureVersion$set(MemorySegment seg, short x) {
        constants$876.const$2.set(seg, x);
    }
    public static short StructureVersion$get(MemorySegment seg, long index) {
        return (short)constants$876.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void StructureVersion$set(MemorySegment seg, long index, short x) {
        constants$876.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle StructureSize$VH() {
        return constants$876.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * USHORT StructureSize;
     * }
     */
    public static short StructureSize$get(MemorySegment seg) {
        return (short)constants$876.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * USHORT StructureSize;
     * }
     */
    public static void StructureSize$set(MemorySegment seg, short x) {
        constants$876.const$3.set(seg, x);
    }
    public static short StructureSize$get(MemorySegment seg, long index) {
        return (short)constants$876.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void StructureSize$set(MemorySegment seg, long index, short x) {
        constants$876.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Protocol$VH() {
        return constants$876.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG Protocol;
     * }
     */
    public static int Protocol$get(MemorySegment seg) {
        return (int)constants$876.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG Protocol;
     * }
     */
    public static void Protocol$set(MemorySegment seg, int x) {
        constants$876.const$4.set(seg, x);
    }
    public static int Protocol$get(MemorySegment seg, long index) {
        return (int)constants$876.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void Protocol$set(MemorySegment seg, long index, int x) {
        constants$876.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ProtocolMajorVersion$VH() {
        return constants$876.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * USHORT ProtocolMajorVersion;
     * }
     */
    public static short ProtocolMajorVersion$get(MemorySegment seg) {
        return (short)constants$876.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * USHORT ProtocolMajorVersion;
     * }
     */
    public static void ProtocolMajorVersion$set(MemorySegment seg, short x) {
        constants$876.const$5.set(seg, x);
    }
    public static short ProtocolMajorVersion$get(MemorySegment seg, long index) {
        return (short)constants$876.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void ProtocolMajorVersion$set(MemorySegment seg, long index, short x) {
        constants$876.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ProtocolMinorVersion$VH() {
        return constants$877.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * USHORT ProtocolMinorVersion;
     * }
     */
    public static short ProtocolMinorVersion$get(MemorySegment seg) {
        return (short)constants$877.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * USHORT ProtocolMinorVersion;
     * }
     */
    public static void ProtocolMinorVersion$set(MemorySegment seg, short x) {
        constants$877.const$0.set(seg, x);
    }
    public static short ProtocolMinorVersion$get(MemorySegment seg, long index) {
        return (short)constants$877.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void ProtocolMinorVersion$set(MemorySegment seg, long index, short x) {
        constants$877.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ProtocolRevision$VH() {
        return constants$877.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * USHORT ProtocolRevision;
     * }
     */
    public static short ProtocolRevision$get(MemorySegment seg) {
        return (short)constants$877.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * USHORT ProtocolRevision;
     * }
     */
    public static void ProtocolRevision$set(MemorySegment seg, short x) {
        constants$877.const$1.set(seg, x);
    }
    public static short ProtocolRevision$get(MemorySegment seg, long index) {
        return (short)constants$877.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void ProtocolRevision$set(MemorySegment seg, long index, short x) {
        constants$877.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Reserved$VH() {
        return constants$877.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * USHORT Reserved;
     * }
     */
    public static short Reserved$get(MemorySegment seg) {
        return (short)constants$877.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * USHORT Reserved;
     * }
     */
    public static void Reserved$set(MemorySegment seg, short x) {
        constants$877.const$2.set(seg, x);
    }
    public static short Reserved$get(MemorySegment seg, long index) {
        return (short)constants$877.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void Reserved$set(MemorySegment seg, long index, short x) {
        constants$877.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Flags$VH() {
        return constants$877.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG Flags;
     * }
     */
    public static int Flags$get(MemorySegment seg) {
        return (int)constants$877.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG Flags;
     * }
     */
    public static void Flags$set(MemorySegment seg, int x) {
        constants$877.const$3.set(seg, x);
    }
    public static int Flags$get(MemorySegment seg, long index) {
        return (int)constants$877.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, int x) {
        constants$877.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
     * struct {
     *     ULONG Reserved[8];
     * };
     * }
     */
    public static final class GenericReserved {

        // Suppresses default constructor, ensuring non-instantiability.
        private GenericReserved() {}
        public static MemoryLayout $LAYOUT() {
            return constants$877.const$4;
        }
        public static MemorySegment Reserved$slice(MemorySegment seg) {
            return seg.asSlice(0, 32);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment GenericReserved$slice(MemorySegment seg) {
        return seg.asSlice(20, 32);
    }
    /**
     * {@snippet :
     * union {
     *     struct  Smb2;
     *     ULONG Reserved[16];
     * };
     * }
     */
    public static final class ProtocolSpecific {

        // Suppresses default constructor, ensuring non-instantiability.
        private ProtocolSpecific() {}
        public static MemoryLayout $LAYOUT() {
            return constants$877.const$5;
        }
        /**
         * {@snippet :
         * struct {
         *     struct  Server;
         *     struct  Share;
         * };
         * }
         */
        public static final class Smb2 {

            // Suppresses default constructor, ensuring non-instantiability.
            private Smb2() {}
            public static MemoryLayout $LAYOUT() {
                return constants$878.const$0;
            }
            /**
             * {@snippet :
             * struct {
             *     ULONG Capabilities;
             * };
             * }
             */
            public static final class Server {

                // Suppresses default constructor, ensuring non-instantiability.
                private Server() {}
                public static MemoryLayout $LAYOUT() {
                    return constants$878.const$1;
                }
                public static VarHandle Capabilities$VH() {
                    return constants$878.const$2;
                }
                /**
                 * Getter for field:
                 * {@snippet :
                 * ULONG Capabilities;
                 * }
                 */
                public static int Capabilities$get(MemorySegment seg) {
                    return (int)constants$878.const$2.get(seg);
                }
                /**
                 * Setter for field:
                 * {@snippet :
                 * ULONG Capabilities;
                 * }
                 */
                public static void Capabilities$set(MemorySegment seg, int x) {
                    constants$878.const$2.set(seg, x);
                }
                public static int Capabilities$get(MemorySegment seg, long index) {
                    return (int)constants$878.const$2.get(seg.asSlice(index*sizeof()));
                }
                public static void Capabilities$set(MemorySegment seg, long index, int x) {
                    constants$878.const$2.set(seg.asSlice(index*sizeof()), x);
                }
                public static long sizeof() { return $LAYOUT().byteSize(); }
                public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
                public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                    return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
                }
                public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
            }

            public static MemorySegment Server$slice(MemorySegment seg) {
                return seg.asSlice(0, 4);
            }
            /**
             * {@snippet :
             * struct {
             *     ULONG Capabilities;
             *     ULONG CachingFlags;
             * };
             * }
             */
            public static final class Share {

                // Suppresses default constructor, ensuring non-instantiability.
                private Share() {}
                public static MemoryLayout $LAYOUT() {
                    return constants$878.const$3;
                }
                public static VarHandle Capabilities$VH() {
                    return constants$878.const$4;
                }
                /**
                 * Getter for field:
                 * {@snippet :
                 * ULONG Capabilities;
                 * }
                 */
                public static int Capabilities$get(MemorySegment seg) {
                    return (int)constants$878.const$4.get(seg);
                }
                /**
                 * Setter for field:
                 * {@snippet :
                 * ULONG Capabilities;
                 * }
                 */
                public static void Capabilities$set(MemorySegment seg, int x) {
                    constants$878.const$4.set(seg, x);
                }
                public static int Capabilities$get(MemorySegment seg, long index) {
                    return (int)constants$878.const$4.get(seg.asSlice(index*sizeof()));
                }
                public static void Capabilities$set(MemorySegment seg, long index, int x) {
                    constants$878.const$4.set(seg.asSlice(index*sizeof()), x);
                }
                public static VarHandle CachingFlags$VH() {
                    return constants$878.const$5;
                }
                /**
                 * Getter for field:
                 * {@snippet :
                 * ULONG CachingFlags;
                 * }
                 */
                public static int CachingFlags$get(MemorySegment seg) {
                    return (int)constants$878.const$5.get(seg);
                }
                /**
                 * Setter for field:
                 * {@snippet :
                 * ULONG CachingFlags;
                 * }
                 */
                public static void CachingFlags$set(MemorySegment seg, int x) {
                    constants$878.const$5.set(seg, x);
                }
                public static int CachingFlags$get(MemorySegment seg, long index) {
                    return (int)constants$878.const$5.get(seg.asSlice(index*sizeof()));
                }
                public static void CachingFlags$set(MemorySegment seg, long index, int x) {
                    constants$878.const$5.set(seg.asSlice(index*sizeof()), x);
                }
                public static long sizeof() { return $LAYOUT().byteSize(); }
                public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
                public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                    return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
                }
                public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
            }

            public static MemorySegment Share$slice(MemorySegment seg) {
                return seg.asSlice(4, 8);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
        }

        public static MemorySegment Smb2$slice(MemorySegment seg) {
            return seg.asSlice(0, 12);
        }
        public static MemorySegment Reserved$slice(MemorySegment seg) {
            return seg.asSlice(0, 64);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment ProtocolSpecific$slice(MemorySegment seg) {
        return seg.asSlice(52, 64);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



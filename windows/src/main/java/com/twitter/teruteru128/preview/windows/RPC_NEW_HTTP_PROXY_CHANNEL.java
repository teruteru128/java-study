// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * long (*RPC_NEW_HTTP_PROXY_CHANNEL)(enum _RPC_HTTP_REDIRECTOR_STAGE RedirectorStage,unsigned short* ServerName,unsigned short* ServerPort,unsigned short* RemoteUser,unsigned short* AuthType,void* ResourceUuid,void* SessionId,void* Interface,void* Reserved,unsigned long Flags,unsigned short** NewServerName,unsigned short** NewServerPort);
 * }
 */
public interface RPC_NEW_HTTP_PROXY_CHANNEL {

    int apply(int RedirectorStage, java.lang.foreign.MemorySegment ServerName, java.lang.foreign.MemorySegment ServerPort, java.lang.foreign.MemorySegment RemoteUser, java.lang.foreign.MemorySegment AuthType, java.lang.foreign.MemorySegment ResourceUuid, java.lang.foreign.MemorySegment SessionId, java.lang.foreign.MemorySegment Interface, java.lang.foreign.MemorySegment Reserved, int Flags, java.lang.foreign.MemorySegment NewServerName, java.lang.foreign.MemorySegment NewServerPort);
    static MemorySegment allocate(RPC_NEW_HTTP_PROXY_CHANNEL fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$1760.const$0, fi, constants$1759.const$5, scope);
    }
    static RPC_NEW_HTTP_PROXY_CHANNEL ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (int _RedirectorStage, java.lang.foreign.MemorySegment _ServerName, java.lang.foreign.MemorySegment _ServerPort, java.lang.foreign.MemorySegment _RemoteUser, java.lang.foreign.MemorySegment _AuthType, java.lang.foreign.MemorySegment _ResourceUuid, java.lang.foreign.MemorySegment _SessionId, java.lang.foreign.MemorySegment _Interface, java.lang.foreign.MemorySegment _Reserved, int _Flags, java.lang.foreign.MemorySegment _NewServerName, java.lang.foreign.MemorySegment _NewServerPort) -> {
            try {
                return (int)constants$1760.const$1.invokeExact(symbol, _RedirectorStage, _ServerName, _ServerPort, _RemoteUser, _AuthType, _ResourceUuid, _SessionId, _Interface, _Reserved, _Flags, _NewServerName, _NewServerPort);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}



// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IRpcChannelBuffer3Vtbl {
 *     HRESULT (*QueryInterface)(IRpcChannelBuffer3*,const IID*,void**);
 *     ULONG (*AddRef)(IRpcChannelBuffer3*);
 *     ULONG (*Release)(IRpcChannelBuffer3*);
 *     HRESULT (*GetBuffer)(IRpcChannelBuffer3*,RPCOLEMESSAGE*,const IID*);
 *     HRESULT (*SendReceive)(IRpcChannelBuffer3*,RPCOLEMESSAGE*,ULONG*);
 *     HRESULT (*FreeBuffer)(IRpcChannelBuffer3*,RPCOLEMESSAGE*);
 *     HRESULT (*GetDestCtx)(IRpcChannelBuffer3*,DWORD*,void**);
 *     HRESULT (*IsConnected)(IRpcChannelBuffer3*);
 *     HRESULT (*GetProtocolVersion)(IRpcChannelBuffer3*,DWORD*);
 *     HRESULT (*Send)(IRpcChannelBuffer3*,RPCOLEMESSAGE*,ULONG*);
 *     HRESULT (*Receive)(IRpcChannelBuffer3*,RPCOLEMESSAGE*,ULONG,ULONG*);
 *     HRESULT (*Cancel)(IRpcChannelBuffer3*,RPCOLEMESSAGE*);
 *     HRESULT (*GetCallContext)(IRpcChannelBuffer3*,RPCOLEMESSAGE*,const IID*,void**);
 *     HRESULT (*GetDestCtxEx)(IRpcChannelBuffer3*,RPCOLEMESSAGE*,DWORD*,void**);
 *     HRESULT (*GetState)(IRpcChannelBuffer3*,RPCOLEMESSAGE*,DWORD*);
 *     HRESULT (*RegisterAsync)(IRpcChannelBuffer3*,RPCOLEMESSAGE*,IAsyncManager*);
 * };
 * }
 */
public class IRpcChannelBuffer3Vtbl {

    public static MemoryLayout $LAYOUT() {
        return constants$3070.const$4;
    }
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IRpcChannelBuffer3*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3070.const$5, fi, constants$37.const$3, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle QueryInterface$VH() {
        return constants$3071.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IRpcChannelBuffer3*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3071.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IRpcChannelBuffer3*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        constants$3071.const$0.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3071.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3071.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, Arena scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*AddRef)(IRpcChannelBuffer3*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3071.const$1, fi, constants$18.const$5, scope);
        }
        static AddRef ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle AddRef$VH() {
        return constants$3071.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IRpcChannelBuffer3*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3071.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IRpcChannelBuffer3*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        constants$3071.const$2.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3071.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3071.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, Arena scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*Release)(IRpcChannelBuffer3*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3071.const$3, fi, constants$18.const$5, scope);
        }
        static Release ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Release$VH() {
        return constants$3071.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IRpcChannelBuffer3*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3071.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IRpcChannelBuffer3*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        constants$3071.const$4.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3071.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3071.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, Arena scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetBuffer)(IRpcChannelBuffer3*,RPCOLEMESSAGE*,const IID*);
     * }
     */
    public interface GetBuffer {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetBuffer fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3071.const$5, fi, constants$37.const$3, scope);
        }
        static GetBuffer ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetBuffer$VH() {
        return constants$3072.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetBuffer)(IRpcChannelBuffer3*,RPCOLEMESSAGE*,const IID*);
     * }
     */
    public static MemorySegment GetBuffer$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3072.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetBuffer)(IRpcChannelBuffer3*,RPCOLEMESSAGE*,const IID*);
     * }
     */
    public static void GetBuffer$set(MemorySegment seg, MemorySegment x) {
        constants$3072.const$0.set(seg, x);
    }
    public static MemorySegment GetBuffer$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3072.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void GetBuffer$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3072.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetBuffer GetBuffer(MemorySegment segment, Arena scope) {
        return GetBuffer.ofAddress(GetBuffer$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SendReceive)(IRpcChannelBuffer3*,RPCOLEMESSAGE*,ULONG*);
     * }
     */
    public interface SendReceive {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(SendReceive fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3072.const$1, fi, constants$37.const$3, scope);
        }
        static SendReceive ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SendReceive$VH() {
        return constants$3072.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SendReceive)(IRpcChannelBuffer3*,RPCOLEMESSAGE*,ULONG*);
     * }
     */
    public static MemorySegment SendReceive$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3072.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SendReceive)(IRpcChannelBuffer3*,RPCOLEMESSAGE*,ULONG*);
     * }
     */
    public static void SendReceive$set(MemorySegment seg, MemorySegment x) {
        constants$3072.const$2.set(seg, x);
    }
    public static MemorySegment SendReceive$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3072.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void SendReceive$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3072.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static SendReceive SendReceive(MemorySegment segment, Arena scope) {
        return SendReceive.ofAddress(SendReceive$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*FreeBuffer)(IRpcChannelBuffer3*,RPCOLEMESSAGE*);
     * }
     */
    public interface FreeBuffer {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(FreeBuffer fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3072.const$3, fi, constants$34.const$0, scope);
        }
        static FreeBuffer ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle FreeBuffer$VH() {
        return constants$3072.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*FreeBuffer)(IRpcChannelBuffer3*,RPCOLEMESSAGE*);
     * }
     */
    public static MemorySegment FreeBuffer$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3072.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*FreeBuffer)(IRpcChannelBuffer3*,RPCOLEMESSAGE*);
     * }
     */
    public static void FreeBuffer$set(MemorySegment seg, MemorySegment x) {
        constants$3072.const$4.set(seg, x);
    }
    public static MemorySegment FreeBuffer$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3072.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void FreeBuffer$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3072.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static FreeBuffer FreeBuffer(MemorySegment segment, Arena scope) {
        return FreeBuffer.ofAddress(FreeBuffer$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetDestCtx)(IRpcChannelBuffer3*,DWORD*,void**);
     * }
     */
    public interface GetDestCtx {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetDestCtx fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3072.const$5, fi, constants$37.const$3, scope);
        }
        static GetDestCtx ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetDestCtx$VH() {
        return constants$3073.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetDestCtx)(IRpcChannelBuffer3*,DWORD*,void**);
     * }
     */
    public static MemorySegment GetDestCtx$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3073.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetDestCtx)(IRpcChannelBuffer3*,DWORD*,void**);
     * }
     */
    public static void GetDestCtx$set(MemorySegment seg, MemorySegment x) {
        constants$3073.const$0.set(seg, x);
    }
    public static MemorySegment GetDestCtx$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3073.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDestCtx$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3073.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDestCtx GetDestCtx(MemorySegment segment, Arena scope) {
        return GetDestCtx.ofAddress(GetDestCtx$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*IsConnected)(IRpcChannelBuffer3*);
     * }
     */
    public interface IsConnected {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(IsConnected fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3073.const$1, fi, constants$18.const$5, scope);
        }
        static IsConnected ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle IsConnected$VH() {
        return constants$3073.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*IsConnected)(IRpcChannelBuffer3*);
     * }
     */
    public static MemorySegment IsConnected$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3073.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*IsConnected)(IRpcChannelBuffer3*);
     * }
     */
    public static void IsConnected$set(MemorySegment seg, MemorySegment x) {
        constants$3073.const$2.set(seg, x);
    }
    public static MemorySegment IsConnected$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3073.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void IsConnected$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3073.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static IsConnected IsConnected(MemorySegment segment, Arena scope) {
        return IsConnected.ofAddress(IsConnected$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetProtocolVersion)(IRpcChannelBuffer3*,DWORD*);
     * }
     */
    public interface GetProtocolVersion {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetProtocolVersion fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3073.const$3, fi, constants$34.const$0, scope);
        }
        static GetProtocolVersion ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetProtocolVersion$VH() {
        return constants$3073.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetProtocolVersion)(IRpcChannelBuffer3*,DWORD*);
     * }
     */
    public static MemorySegment GetProtocolVersion$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3073.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetProtocolVersion)(IRpcChannelBuffer3*,DWORD*);
     * }
     */
    public static void GetProtocolVersion$set(MemorySegment seg, MemorySegment x) {
        constants$3073.const$4.set(seg, x);
    }
    public static MemorySegment GetProtocolVersion$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3073.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void GetProtocolVersion$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3073.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetProtocolVersion GetProtocolVersion(MemorySegment segment, Arena scope) {
        return GetProtocolVersion.ofAddress(GetProtocolVersion$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*Send)(IRpcChannelBuffer3*,RPCOLEMESSAGE*,ULONG*);
     * }
     */
    public interface Send {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(Send fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3073.const$5, fi, constants$37.const$3, scope);
        }
        static Send ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Send$VH() {
        return constants$3074.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Send)(IRpcChannelBuffer3*,RPCOLEMESSAGE*,ULONG*);
     * }
     */
    public static MemorySegment Send$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3074.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Send)(IRpcChannelBuffer3*,RPCOLEMESSAGE*,ULONG*);
     * }
     */
    public static void Send$set(MemorySegment seg, MemorySegment x) {
        constants$3074.const$0.set(seg, x);
    }
    public static MemorySegment Send$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3074.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Send$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3074.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static Send Send(MemorySegment segment, Arena scope) {
        return Send.ofAddress(Send$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*Receive)(IRpcChannelBuffer3*,RPCOLEMESSAGE*,ULONG,ULONG*);
     * }
     */
    public interface Receive {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(Receive fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3074.const$1, fi, constants$586.const$5, scope);
        }
        static Receive ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)constants$2117.const$1.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Receive$VH() {
        return constants$3074.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Receive)(IRpcChannelBuffer3*,RPCOLEMESSAGE*,ULONG,ULONG*);
     * }
     */
    public static MemorySegment Receive$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3074.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Receive)(IRpcChannelBuffer3*,RPCOLEMESSAGE*,ULONG,ULONG*);
     * }
     */
    public static void Receive$set(MemorySegment seg, MemorySegment x) {
        constants$3074.const$2.set(seg, x);
    }
    public static MemorySegment Receive$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3074.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void Receive$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3074.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static Receive Receive(MemorySegment segment, Arena scope) {
        return Receive.ofAddress(Receive$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*Cancel)(IRpcChannelBuffer3*,RPCOLEMESSAGE*);
     * }
     */
    public interface Cancel {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(Cancel fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3074.const$3, fi, constants$34.const$0, scope);
        }
        static Cancel ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Cancel$VH() {
        return constants$3074.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Cancel)(IRpcChannelBuffer3*,RPCOLEMESSAGE*);
     * }
     */
    public static MemorySegment Cancel$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3074.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Cancel)(IRpcChannelBuffer3*,RPCOLEMESSAGE*);
     * }
     */
    public static void Cancel$set(MemorySegment seg, MemorySegment x) {
        constants$3074.const$4.set(seg, x);
    }
    public static MemorySegment Cancel$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3074.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void Cancel$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3074.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static Cancel Cancel(MemorySegment segment, Arena scope) {
        return Cancel.ofAddress(Cancel$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetCallContext)(IRpcChannelBuffer3*,RPCOLEMESSAGE*,const IID*,void**);
     * }
     */
    public interface GetCallContext {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(GetCallContext fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3074.const$5, fi, constants$1.const$3, scope);
        }
        static GetCallContext ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)constants$55.const$1.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetCallContext$VH() {
        return constants$3075.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetCallContext)(IRpcChannelBuffer3*,RPCOLEMESSAGE*,const IID*,void**);
     * }
     */
    public static MemorySegment GetCallContext$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3075.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetCallContext)(IRpcChannelBuffer3*,RPCOLEMESSAGE*,const IID*,void**);
     * }
     */
    public static void GetCallContext$set(MemorySegment seg, MemorySegment x) {
        constants$3075.const$0.set(seg, x);
    }
    public static MemorySegment GetCallContext$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3075.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void GetCallContext$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3075.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetCallContext GetCallContext(MemorySegment segment, Arena scope) {
        return GetCallContext.ofAddress(GetCallContext$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetDestCtxEx)(IRpcChannelBuffer3*,RPCOLEMESSAGE*,DWORD*,void**);
     * }
     */
    public interface GetDestCtxEx {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(GetDestCtxEx fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3075.const$1, fi, constants$1.const$3, scope);
        }
        static GetDestCtxEx ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)constants$55.const$1.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetDestCtxEx$VH() {
        return constants$3075.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetDestCtxEx)(IRpcChannelBuffer3*,RPCOLEMESSAGE*,DWORD*,void**);
     * }
     */
    public static MemorySegment GetDestCtxEx$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3075.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetDestCtxEx)(IRpcChannelBuffer3*,RPCOLEMESSAGE*,DWORD*,void**);
     * }
     */
    public static void GetDestCtxEx$set(MemorySegment seg, MemorySegment x) {
        constants$3075.const$2.set(seg, x);
    }
    public static MemorySegment GetDestCtxEx$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3075.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDestCtxEx$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3075.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDestCtxEx GetDestCtxEx(MemorySegment segment, Arena scope) {
        return GetDestCtxEx.ofAddress(GetDestCtxEx$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetState)(IRpcChannelBuffer3*,RPCOLEMESSAGE*,DWORD*);
     * }
     */
    public interface GetState {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetState fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3075.const$3, fi, constants$37.const$3, scope);
        }
        static GetState ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetState$VH() {
        return constants$3075.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetState)(IRpcChannelBuffer3*,RPCOLEMESSAGE*,DWORD*);
     * }
     */
    public static MemorySegment GetState$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3075.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetState)(IRpcChannelBuffer3*,RPCOLEMESSAGE*,DWORD*);
     * }
     */
    public static void GetState$set(MemorySegment seg, MemorySegment x) {
        constants$3075.const$4.set(seg, x);
    }
    public static MemorySegment GetState$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3075.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void GetState$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3075.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetState GetState(MemorySegment segment, Arena scope) {
        return GetState.ofAddress(GetState$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*RegisterAsync)(IRpcChannelBuffer3*,RPCOLEMESSAGE*,IAsyncManager*);
     * }
     */
    public interface RegisterAsync {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(RegisterAsync fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3075.const$5, fi, constants$37.const$3, scope);
        }
        static RegisterAsync ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle RegisterAsync$VH() {
        return constants$3076.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*RegisterAsync)(IRpcChannelBuffer3*,RPCOLEMESSAGE*,IAsyncManager*);
     * }
     */
    public static MemorySegment RegisterAsync$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3076.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*RegisterAsync)(IRpcChannelBuffer3*,RPCOLEMESSAGE*,IAsyncManager*);
     * }
     */
    public static void RegisterAsync$set(MemorySegment seg, MemorySegment x) {
        constants$3076.const$0.set(seg, x);
    }
    public static MemorySegment RegisterAsync$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3076.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void RegisterAsync$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3076.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static RegisterAsync RegisterAsync(MemorySegment segment, Arena scope) {
        return RegisterAsync.ofAddress(RegisterAsync$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tagBIND_OPTS3 {
 *     DWORD cbStruct;
 *     DWORD grfFlags;
 *     DWORD grfMode;
 *     DWORD dwTickCountDeadline;
 *     DWORD dwTrackFlags;
 *     DWORD dwClassContext;
 *     LCID locale;
 *     COSERVERINFO* pServerInfo;
 *     HWND hwnd;
 * };
 * }
 */
public class tagBIND_OPTS3 {

    public static MemoryLayout $LAYOUT() {
        return constants$3225.const$0;
    }
    public static VarHandle cbStruct$VH() {
        return constants$3225.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD cbStruct;
     * }
     */
    public static int cbStruct$get(MemorySegment seg) {
        return (int)constants$3225.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD cbStruct;
     * }
     */
    public static void cbStruct$set(MemorySegment seg, int x) {
        constants$3225.const$1.set(seg, x);
    }
    public static int cbStruct$get(MemorySegment seg, long index) {
        return (int)constants$3225.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void cbStruct$set(MemorySegment seg, long index, int x) {
        constants$3225.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle grfFlags$VH() {
        return constants$3225.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD grfFlags;
     * }
     */
    public static int grfFlags$get(MemorySegment seg) {
        return (int)constants$3225.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD grfFlags;
     * }
     */
    public static void grfFlags$set(MemorySegment seg, int x) {
        constants$3225.const$2.set(seg, x);
    }
    public static int grfFlags$get(MemorySegment seg, long index) {
        return (int)constants$3225.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void grfFlags$set(MemorySegment seg, long index, int x) {
        constants$3225.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle grfMode$VH() {
        return constants$3225.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD grfMode;
     * }
     */
    public static int grfMode$get(MemorySegment seg) {
        return (int)constants$3225.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD grfMode;
     * }
     */
    public static void grfMode$set(MemorySegment seg, int x) {
        constants$3225.const$3.set(seg, x);
    }
    public static int grfMode$get(MemorySegment seg, long index) {
        return (int)constants$3225.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void grfMode$set(MemorySegment seg, long index, int x) {
        constants$3225.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwTickCountDeadline$VH() {
        return constants$3225.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwTickCountDeadline;
     * }
     */
    public static int dwTickCountDeadline$get(MemorySegment seg) {
        return (int)constants$3225.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwTickCountDeadline;
     * }
     */
    public static void dwTickCountDeadline$set(MemorySegment seg, int x) {
        constants$3225.const$4.set(seg, x);
    }
    public static int dwTickCountDeadline$get(MemorySegment seg, long index) {
        return (int)constants$3225.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void dwTickCountDeadline$set(MemorySegment seg, long index, int x) {
        constants$3225.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwTrackFlags$VH() {
        return constants$3225.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwTrackFlags;
     * }
     */
    public static int dwTrackFlags$get(MemorySegment seg) {
        return (int)constants$3225.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwTrackFlags;
     * }
     */
    public static void dwTrackFlags$set(MemorySegment seg, int x) {
        constants$3225.const$5.set(seg, x);
    }
    public static int dwTrackFlags$get(MemorySegment seg, long index) {
        return (int)constants$3225.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void dwTrackFlags$set(MemorySegment seg, long index, int x) {
        constants$3225.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwClassContext$VH() {
        return constants$3226.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwClassContext;
     * }
     */
    public static int dwClassContext$get(MemorySegment seg) {
        return (int)constants$3226.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwClassContext;
     * }
     */
    public static void dwClassContext$set(MemorySegment seg, int x) {
        constants$3226.const$0.set(seg, x);
    }
    public static int dwClassContext$get(MemorySegment seg, long index) {
        return (int)constants$3226.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void dwClassContext$set(MemorySegment seg, long index, int x) {
        constants$3226.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle locale$VH() {
        return constants$3226.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LCID locale;
     * }
     */
    public static int locale$get(MemorySegment seg) {
        return (int)constants$3226.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LCID locale;
     * }
     */
    public static void locale$set(MemorySegment seg, int x) {
        constants$3226.const$1.set(seg, x);
    }
    public static int locale$get(MemorySegment seg, long index) {
        return (int)constants$3226.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void locale$set(MemorySegment seg, long index, int x) {
        constants$3226.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pServerInfo$VH() {
        return constants$3226.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * COSERVERINFO* pServerInfo;
     * }
     */
    public static MemorySegment pServerInfo$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3226.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * COSERVERINFO* pServerInfo;
     * }
     */
    public static void pServerInfo$set(MemorySegment seg, MemorySegment x) {
        constants$3226.const$2.set(seg, x);
    }
    public static MemorySegment pServerInfo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3226.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void pServerInfo$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3226.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hwnd$VH() {
        return constants$3226.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HWND hwnd;
     * }
     */
    public static MemorySegment hwnd$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3226.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HWND hwnd;
     * }
     */
    public static void hwnd$set(MemorySegment seg, MemorySegment x) {
        constants$3226.const$3.set(seg, x);
    }
    public static MemorySegment hwnd$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3226.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void hwnd$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3226.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tagBITMAPFILEHEADER {
 *     WORD bfType;
 *     DWORD bfSize;
 *     WORD bfReserved1;
 *     WORD bfReserved2;
 *     DWORD bfOffBits;
 * };
 * }
 */
public class tagBITMAPFILEHEADER {

    public static MemoryLayout $LAYOUT() {
        return constants$905.const$3;
    }
    public static VarHandle bfType$VH() {
        return constants$905.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD bfType;
     * }
     */
    public static short bfType$get(MemorySegment seg) {
        return (short)constants$905.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD bfType;
     * }
     */
    public static void bfType$set(MemorySegment seg, short x) {
        constants$905.const$4.set(seg, x);
    }
    public static short bfType$get(MemorySegment seg, long index) {
        return (short)constants$905.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void bfType$set(MemorySegment seg, long index, short x) {
        constants$905.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bfSize$VH() {
        return constants$905.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD bfSize;
     * }
     */
    public static int bfSize$get(MemorySegment seg) {
        return (int)constants$905.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD bfSize;
     * }
     */
    public static void bfSize$set(MemorySegment seg, int x) {
        constants$905.const$5.set(seg, x);
    }
    public static int bfSize$get(MemorySegment seg, long index) {
        return (int)constants$905.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void bfSize$set(MemorySegment seg, long index, int x) {
        constants$905.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bfReserved1$VH() {
        return constants$906.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD bfReserved1;
     * }
     */
    public static short bfReserved1$get(MemorySegment seg) {
        return (short)constants$906.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD bfReserved1;
     * }
     */
    public static void bfReserved1$set(MemorySegment seg, short x) {
        constants$906.const$0.set(seg, x);
    }
    public static short bfReserved1$get(MemorySegment seg, long index) {
        return (short)constants$906.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void bfReserved1$set(MemorySegment seg, long index, short x) {
        constants$906.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bfReserved2$VH() {
        return constants$906.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD bfReserved2;
     * }
     */
    public static short bfReserved2$get(MemorySegment seg) {
        return (short)constants$906.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD bfReserved2;
     * }
     */
    public static void bfReserved2$set(MemorySegment seg, short x) {
        constants$906.const$1.set(seg, x);
    }
    public static short bfReserved2$get(MemorySegment seg, long index) {
        return (short)constants$906.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void bfReserved2$set(MemorySegment seg, long index, short x) {
        constants$906.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bfOffBits$VH() {
        return constants$906.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD bfOffBits;
     * }
     */
    public static int bfOffBits$get(MemorySegment seg) {
        return (int)constants$906.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD bfOffBits;
     * }
     */
    public static void bfOffBits$set(MemorySegment seg, int x) {
        constants$906.const$2.set(seg, x);
    }
    public static int bfOffBits$get(MemorySegment seg, long index) {
        return (int)constants$906.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void bfOffBits$set(MemorySegment seg, long index, int x) {
        constants$906.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



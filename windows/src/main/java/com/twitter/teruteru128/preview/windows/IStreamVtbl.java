// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IStreamVtbl {
 *     HRESULT (*QueryInterface)(IStream*,const IID*,void**);
 *     ULONG (*AddRef)(IStream*);
 *     ULONG (*Release)(IStream*);
 *     HRESULT (*Read)(IStream*,void*,ULONG,ULONG*);
 *     HRESULT (*Write)(IStream*,void*,ULONG,ULONG*);
 *     HRESULT (*Seek)(IStream*,LARGE_INTEGER,DWORD,ULARGE_INTEGER*);
 *     HRESULT (*SetSize)(IStream*,ULARGE_INTEGER);
 *     HRESULT (*CopyTo)(IStream*,IStream*,ULARGE_INTEGER,ULARGE_INTEGER*,ULARGE_INTEGER*);
 *     HRESULT (*Commit)(IStream*,DWORD);
 *     HRESULT (*Revert)(IStream*);
 *     HRESULT (*LockRegion)(IStream*,ULARGE_INTEGER,ULARGE_INTEGER,DWORD);
 *     HRESULT (*UnlockRegion)(IStream*,ULARGE_INTEGER,ULARGE_INTEGER,DWORD);
 *     HRESULT (*Stat)(IStream*,STATSTG*,DWORD);
 *     HRESULT (*Clone)(IStream*,IStream**);
 * };
 * }
 */
public class IStreamVtbl {

    public static MemoryLayout $LAYOUT() {
        return constants$3050.const$1;
    }
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IStream*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3050.const$2, fi, constants$37.const$3, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle QueryInterface$VH() {
        return constants$3050.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IStream*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3050.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IStream*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        constants$3050.const$3.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3050.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3050.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, Arena scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*AddRef)(IStream*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3050.const$4, fi, constants$18.const$5, scope);
        }
        static AddRef ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle AddRef$VH() {
        return constants$3050.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IStream*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3050.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IStream*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        constants$3050.const$5.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3050.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3050.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, Arena scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*Release)(IStream*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3051.const$0, fi, constants$18.const$5, scope);
        }
        static Release ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Release$VH() {
        return constants$3051.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IStream*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3051.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IStream*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        constants$3051.const$1.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3051.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3051.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, Arena scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*Read)(IStream*,void*,ULONG,ULONG*);
     * }
     */
    public interface Read {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(Read fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3051.const$2, fi, constants$586.const$5, scope);
        }
        static Read ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)constants$2117.const$1.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Read$VH() {
        return constants$3051.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Read)(IStream*,void*,ULONG,ULONG*);
     * }
     */
    public static MemorySegment Read$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3051.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Read)(IStream*,void*,ULONG,ULONG*);
     * }
     */
    public static void Read$set(MemorySegment seg, MemorySegment x) {
        constants$3051.const$3.set(seg, x);
    }
    public static MemorySegment Read$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3051.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void Read$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3051.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static Read Read(MemorySegment segment, Arena scope) {
        return Read.ofAddress(Read$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*Write)(IStream*,void*,ULONG,ULONG*);
     * }
     */
    public interface Write {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(Write fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3051.const$4, fi, constants$586.const$5, scope);
        }
        static Write ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)constants$2117.const$1.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Write$VH() {
        return constants$3051.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Write)(IStream*,void*,ULONG,ULONG*);
     * }
     */
    public static MemorySegment Write$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3051.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Write)(IStream*,void*,ULONG,ULONG*);
     * }
     */
    public static void Write$set(MemorySegment seg, MemorySegment x) {
        constants$3051.const$5.set(seg, x);
    }
    public static MemorySegment Write$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3051.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void Write$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3051.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static Write Write(MemorySegment segment, Arena scope) {
        return Write.ofAddress(Write$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*Seek)(IStream*,LARGE_INTEGER,DWORD,ULARGE_INTEGER*);
     * }
     */
    public interface Seek {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(Seek fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3052.const$1, fi, constants$3052.const$0, scope);
        }
        static Seek ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)constants$3052.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Seek$VH() {
        return constants$3052.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Seek)(IStream*,LARGE_INTEGER,DWORD,ULARGE_INTEGER*);
     * }
     */
    public static MemorySegment Seek$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3052.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Seek)(IStream*,LARGE_INTEGER,DWORD,ULARGE_INTEGER*);
     * }
     */
    public static void Seek$set(MemorySegment seg, MemorySegment x) {
        constants$3052.const$3.set(seg, x);
    }
    public static MemorySegment Seek$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3052.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void Seek$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3052.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static Seek Seek(MemorySegment segment, Arena scope) {
        return Seek.ofAddress(Seek$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetSize)(IStream*,ULARGE_INTEGER);
     * }
     */
    public interface SetSize {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetSize fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3052.const$5, fi, constants$3052.const$4, scope);
        }
        static SetSize ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$3053.const$0.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetSize$VH() {
        return constants$3053.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetSize)(IStream*,ULARGE_INTEGER);
     * }
     */
    public static MemorySegment SetSize$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3053.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetSize)(IStream*,ULARGE_INTEGER);
     * }
     */
    public static void SetSize$set(MemorySegment seg, MemorySegment x) {
        constants$3053.const$1.set(seg, x);
    }
    public static MemorySegment SetSize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3053.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void SetSize$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3053.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetSize SetSize(MemorySegment segment, Arena scope) {
        return SetSize.ofAddress(SetSize$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*CopyTo)(IStream*,IStream*,ULARGE_INTEGER,ULARGE_INTEGER*,ULARGE_INTEGER*);
     * }
     */
    public interface CopyTo {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(CopyTo fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3053.const$3, fi, constants$3053.const$2, scope);
        }
        static CopyTo ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)constants$3053.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CopyTo$VH() {
        return constants$3053.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*CopyTo)(IStream*,IStream*,ULARGE_INTEGER,ULARGE_INTEGER*,ULARGE_INTEGER*);
     * }
     */
    public static MemorySegment CopyTo$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3053.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*CopyTo)(IStream*,IStream*,ULARGE_INTEGER,ULARGE_INTEGER*,ULARGE_INTEGER*);
     * }
     */
    public static void CopyTo$set(MemorySegment seg, MemorySegment x) {
        constants$3053.const$5.set(seg, x);
    }
    public static MemorySegment CopyTo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3053.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void CopyTo$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3053.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static CopyTo CopyTo(MemorySegment segment, Arena scope) {
        return CopyTo.ofAddress(CopyTo$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*Commit)(IStream*,DWORD);
     * }
     */
    public interface Commit {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(Commit fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3054.const$0, fi, constants$65.const$2, scope);
        }
        static Commit ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)constants$800.const$4.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Commit$VH() {
        return constants$3054.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Commit)(IStream*,DWORD);
     * }
     */
    public static MemorySegment Commit$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3054.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Commit)(IStream*,DWORD);
     * }
     */
    public static void Commit$set(MemorySegment seg, MemorySegment x) {
        constants$3054.const$1.set(seg, x);
    }
    public static MemorySegment Commit$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3054.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void Commit$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3054.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static Commit Commit(MemorySegment segment, Arena scope) {
        return Commit.ofAddress(Commit$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*Revert)(IStream*);
     * }
     */
    public interface Revert {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Revert fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3054.const$2, fi, constants$18.const$5, scope);
        }
        static Revert ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Revert$VH() {
        return constants$3054.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Revert)(IStream*);
     * }
     */
    public static MemorySegment Revert$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3054.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Revert)(IStream*);
     * }
     */
    public static void Revert$set(MemorySegment seg, MemorySegment x) {
        constants$3054.const$3.set(seg, x);
    }
    public static MemorySegment Revert$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3054.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void Revert$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3054.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static Revert Revert(MemorySegment segment, Arena scope) {
        return Revert.ofAddress(Revert$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*LockRegion)(IStream*,ULARGE_INTEGER,ULARGE_INTEGER,DWORD);
     * }
     */
    public interface LockRegion {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3);
        static MemorySegment allocate(LockRegion fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3054.const$5, fi, constants$3054.const$4, scope);
        }
        static LockRegion ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3) -> {
                try {
                    return (int)constants$3055.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle LockRegion$VH() {
        return constants$3055.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*LockRegion)(IStream*,ULARGE_INTEGER,ULARGE_INTEGER,DWORD);
     * }
     */
    public static MemorySegment LockRegion$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3055.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*LockRegion)(IStream*,ULARGE_INTEGER,ULARGE_INTEGER,DWORD);
     * }
     */
    public static void LockRegion$set(MemorySegment seg, MemorySegment x) {
        constants$3055.const$1.set(seg, x);
    }
    public static MemorySegment LockRegion$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3055.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void LockRegion$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3055.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static LockRegion LockRegion(MemorySegment segment, Arena scope) {
        return LockRegion.ofAddress(LockRegion$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*UnlockRegion)(IStream*,ULARGE_INTEGER,ULARGE_INTEGER,DWORD);
     * }
     */
    public interface UnlockRegion {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3);
        static MemorySegment allocate(UnlockRegion fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3055.const$2, fi, constants$3054.const$4, scope);
        }
        static UnlockRegion ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3) -> {
                try {
                    return (int)constants$3055.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle UnlockRegion$VH() {
        return constants$3055.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*UnlockRegion)(IStream*,ULARGE_INTEGER,ULARGE_INTEGER,DWORD);
     * }
     */
    public static MemorySegment UnlockRegion$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3055.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*UnlockRegion)(IStream*,ULARGE_INTEGER,ULARGE_INTEGER,DWORD);
     * }
     */
    public static void UnlockRegion$set(MemorySegment seg, MemorySegment x) {
        constants$3055.const$3.set(seg, x);
    }
    public static MemorySegment UnlockRegion$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3055.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void UnlockRegion$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3055.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static UnlockRegion UnlockRegion(MemorySegment segment, Arena scope) {
        return UnlockRegion.ofAddress(UnlockRegion$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*Stat)(IStream*,STATSTG*,DWORD);
     * }
     */
    public interface Stat {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2);
        static MemorySegment allocate(Stat fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3055.const$4, fi, constants$570.const$5, scope);
        }
        static Stat ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2) -> {
                try {
                    return (int)constants$779.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Stat$VH() {
        return constants$3055.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Stat)(IStream*,STATSTG*,DWORD);
     * }
     */
    public static MemorySegment Stat$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3055.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Stat)(IStream*,STATSTG*,DWORD);
     * }
     */
    public static void Stat$set(MemorySegment seg, MemorySegment x) {
        constants$3055.const$5.set(seg, x);
    }
    public static MemorySegment Stat$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3055.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void Stat$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3055.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static Stat Stat(MemorySegment segment, Arena scope) {
        return Stat.ofAddress(Stat$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*Clone)(IStream*,IStream**);
     * }
     */
    public interface Clone {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(Clone fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3056.const$0, fi, constants$34.const$0, scope);
        }
        static Clone ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Clone$VH() {
        return constants$3056.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Clone)(IStream*,IStream**);
     * }
     */
    public static MemorySegment Clone$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3056.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Clone)(IStream*,IStream**);
     * }
     */
    public static void Clone$set(MemorySegment seg, MemorySegment x) {
        constants$3056.const$1.set(seg, x);
    }
    public static MemorySegment Clone$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3056.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void Clone$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3056.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static Clone Clone(MemorySegment segment, Arena scope) {
        return Clone.ofAddress(Clone$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _CERT_CHAIN_FIND_BY_ISSUER_PARA {
 *     DWORD cbSize;
 *     LPCSTR pszUsageIdentifier;
 *     DWORD dwKeySpec;
 *     DWORD dwAcquirePrivateKeyFlags;
 *     DWORD cIssuer;
 *     CERT_NAME_BLOB* rgIssuer;
 *     PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK pfnFindCallback;
 *     void* pvFindArg;
 * };
 * }
 */
public class _CERT_CHAIN_FIND_BY_ISSUER_PARA {

    public static MemoryLayout $LAYOUT() {
        return constants$2217.const$5;
    }
    public static VarHandle cbSize$VH() {
        return constants$2218.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD cbSize;
     * }
     */
    public static int cbSize$get(MemorySegment seg) {
        return (int)constants$2218.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD cbSize;
     * }
     */
    public static void cbSize$set(MemorySegment seg, int x) {
        constants$2218.const$0.set(seg, x);
    }
    public static int cbSize$get(MemorySegment seg, long index) {
        return (int)constants$2218.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void cbSize$set(MemorySegment seg, long index, int x) {
        constants$2218.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pszUsageIdentifier$VH() {
        return constants$2218.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPCSTR pszUsageIdentifier;
     * }
     */
    public static MemorySegment pszUsageIdentifier$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2218.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPCSTR pszUsageIdentifier;
     * }
     */
    public static void pszUsageIdentifier$set(MemorySegment seg, MemorySegment x) {
        constants$2218.const$1.set(seg, x);
    }
    public static MemorySegment pszUsageIdentifier$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2218.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void pszUsageIdentifier$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2218.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwKeySpec$VH() {
        return constants$2218.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwKeySpec;
     * }
     */
    public static int dwKeySpec$get(MemorySegment seg) {
        return (int)constants$2218.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwKeySpec;
     * }
     */
    public static void dwKeySpec$set(MemorySegment seg, int x) {
        constants$2218.const$2.set(seg, x);
    }
    public static int dwKeySpec$get(MemorySegment seg, long index) {
        return (int)constants$2218.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void dwKeySpec$set(MemorySegment seg, long index, int x) {
        constants$2218.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwAcquirePrivateKeyFlags$VH() {
        return constants$2218.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwAcquirePrivateKeyFlags;
     * }
     */
    public static int dwAcquirePrivateKeyFlags$get(MemorySegment seg) {
        return (int)constants$2218.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwAcquirePrivateKeyFlags;
     * }
     */
    public static void dwAcquirePrivateKeyFlags$set(MemorySegment seg, int x) {
        constants$2218.const$3.set(seg, x);
    }
    public static int dwAcquirePrivateKeyFlags$get(MemorySegment seg, long index) {
        return (int)constants$2218.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void dwAcquirePrivateKeyFlags$set(MemorySegment seg, long index, int x) {
        constants$2218.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cIssuer$VH() {
        return constants$2218.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD cIssuer;
     * }
     */
    public static int cIssuer$get(MemorySegment seg) {
        return (int)constants$2218.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD cIssuer;
     * }
     */
    public static void cIssuer$set(MemorySegment seg, int x) {
        constants$2218.const$4.set(seg, x);
    }
    public static int cIssuer$get(MemorySegment seg, long index) {
        return (int)constants$2218.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void cIssuer$set(MemorySegment seg, long index, int x) {
        constants$2218.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle rgIssuer$VH() {
        return constants$2218.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * CERT_NAME_BLOB* rgIssuer;
     * }
     */
    public static MemorySegment rgIssuer$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2218.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * CERT_NAME_BLOB* rgIssuer;
     * }
     */
    public static void rgIssuer$set(MemorySegment seg, MemorySegment x) {
        constants$2218.const$5.set(seg, x);
    }
    public static MemorySegment rgIssuer$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2218.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void rgIssuer$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2218.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pfnFindCallback$VH() {
        return constants$2219.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK pfnFindCallback;
     * }
     */
    public static MemorySegment pfnFindCallback$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2219.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK pfnFindCallback;
     * }
     */
    public static void pfnFindCallback$set(MemorySegment seg, MemorySegment x) {
        constants$2219.const$0.set(seg, x);
    }
    public static MemorySegment pfnFindCallback$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2219.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void pfnFindCallback$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2219.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK pfnFindCallback(MemorySegment segment, Arena scope) {
        return PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK.ofAddress(pfnFindCallback$get(segment), scope);
    }
    public static VarHandle pvFindArg$VH() {
        return constants$2219.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* pvFindArg;
     * }
     */
    public static MemorySegment pvFindArg$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2219.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* pvFindArg;
     * }
     */
    public static void pvFindArg$set(MemorySegment seg, MemorySegment x) {
        constants$2219.const$1.set(seg, x);
    }
    public static MemorySegment pvFindArg$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2219.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void pvFindArg$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2219.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



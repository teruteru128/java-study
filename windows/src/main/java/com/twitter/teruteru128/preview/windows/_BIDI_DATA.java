// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _BIDI_DATA {
 *     DWORD dwBidiType;
 *     union  u;
 * };
 * }
 */
public class _BIDI_DATA {

    public static MemoryLayout $LAYOUT() {
        return constants$2926.const$3;
    }
    public static VarHandle dwBidiType$VH() {
        return constants$2926.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwBidiType;
     * }
     */
    public static int dwBidiType$get(MemorySegment seg) {
        return (int)constants$2926.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwBidiType;
     * }
     */
    public static void dwBidiType$set(MemorySegment seg, int x) {
        constants$2926.const$4.set(seg, x);
    }
    public static int dwBidiType$get(MemorySegment seg, long index) {
        return (int)constants$2926.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void dwBidiType$set(MemorySegment seg, long index, int x) {
        constants$2926.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
     * union {
     *     BOOL bData;
     *     LONG iData;
     *     LPWSTR sData;
     *     FLOAT fData;
     *     BINARY_CONTAINER biData;
     * };
     * }
     */
    public static final class u {

        // Suppresses default constructor, ensuring non-instantiability.
        private u() {}
        public static MemoryLayout $LAYOUT() {
            return constants$2926.const$5;
        }
        public static VarHandle bData$VH() {
            return constants$2927.const$0;
        }
        /**
         * Getter for field:
         * {@snippet :
         * BOOL bData;
         * }
         */
        public static int bData$get(MemorySegment seg) {
            return (int)constants$2927.const$0.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * BOOL bData;
         * }
         */
        public static void bData$set(MemorySegment seg, int x) {
            constants$2927.const$0.set(seg, x);
        }
        public static int bData$get(MemorySegment seg, long index) {
            return (int)constants$2927.const$0.get(seg.asSlice(index*sizeof()));
        }
        public static void bData$set(MemorySegment seg, long index, int x) {
            constants$2927.const$0.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle iData$VH() {
            return constants$2927.const$1;
        }
        /**
         * Getter for field:
         * {@snippet :
         * LONG iData;
         * }
         */
        public static int iData$get(MemorySegment seg) {
            return (int)constants$2927.const$1.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * LONG iData;
         * }
         */
        public static void iData$set(MemorySegment seg, int x) {
            constants$2927.const$1.set(seg, x);
        }
        public static int iData$get(MemorySegment seg, long index) {
            return (int)constants$2927.const$1.get(seg.asSlice(index*sizeof()));
        }
        public static void iData$set(MemorySegment seg, long index, int x) {
            constants$2927.const$1.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle sData$VH() {
            return constants$2927.const$2;
        }
        /**
         * Getter for field:
         * {@snippet :
         * LPWSTR sData;
         * }
         */
        public static MemorySegment sData$get(MemorySegment seg) {
            return (java.lang.foreign.MemorySegment)constants$2927.const$2.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * LPWSTR sData;
         * }
         */
        public static void sData$set(MemorySegment seg, MemorySegment x) {
            constants$2927.const$2.set(seg, x);
        }
        public static MemorySegment sData$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemorySegment)constants$2927.const$2.get(seg.asSlice(index*sizeof()));
        }
        public static void sData$set(MemorySegment seg, long index, MemorySegment x) {
            constants$2927.const$2.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle fData$VH() {
            return constants$2927.const$3;
        }
        /**
         * Getter for field:
         * {@snippet :
         * FLOAT fData;
         * }
         */
        public static float fData$get(MemorySegment seg) {
            return (float)constants$2927.const$3.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * FLOAT fData;
         * }
         */
        public static void fData$set(MemorySegment seg, float x) {
            constants$2927.const$3.set(seg, x);
        }
        public static float fData$get(MemorySegment seg, long index) {
            return (float)constants$2927.const$3.get(seg.asSlice(index*sizeof()));
        }
        public static void fData$set(MemorySegment seg, long index, float x) {
            constants$2927.const$3.set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment biData$slice(MemorySegment seg) {
            return seg.asSlice(0, 16);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment u$slice(MemorySegment seg) {
        return seg.asSlice(8, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



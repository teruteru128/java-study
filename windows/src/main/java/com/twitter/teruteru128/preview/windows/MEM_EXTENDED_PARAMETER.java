// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct MEM_EXTENDED_PARAMETER {
 *     struct {
 *          *         DWORD64 Type;
 *         DWORD64 Reserved;
 *     };
 *     union {
 *         DWORD64 ULong64;
 *         PVOID Pointer;
 *         SIZE_T Size;
 *         HANDLE Handle;
 *         DWORD ULong;
 *     };
 * };
 * }
 */
public class MEM_EXTENDED_PARAMETER {

    public static MemoryLayout $LAYOUT() {
        return constants$246.const$3;
    }
    public static VarHandle ULong64$VH() {
        return constants$246.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 ULong64;
     * }
     */
    public static long ULong64$get(MemorySegment seg) {
        return (long)constants$246.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 ULong64;
     * }
     */
    public static void ULong64$set(MemorySegment seg, long x) {
        constants$246.const$4.set(seg, x);
    }
    public static long ULong64$get(MemorySegment seg, long index) {
        return (long)constants$246.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void ULong64$set(MemorySegment seg, long index, long x) {
        constants$246.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Pointer$VH() {
        return constants$246.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PVOID Pointer;
     * }
     */
    public static MemorySegment Pointer$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$246.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PVOID Pointer;
     * }
     */
    public static void Pointer$set(MemorySegment seg, MemorySegment x) {
        constants$246.const$5.set(seg, x);
    }
    public static MemorySegment Pointer$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$246.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void Pointer$set(MemorySegment seg, long index, MemorySegment x) {
        constants$246.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Size$VH() {
        return constants$247.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * SIZE_T Size;
     * }
     */
    public static long Size$get(MemorySegment seg) {
        return (long)constants$247.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * SIZE_T Size;
     * }
     */
    public static void Size$set(MemorySegment seg, long x) {
        constants$247.const$0.set(seg, x);
    }
    public static long Size$get(MemorySegment seg, long index) {
        return (long)constants$247.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Size$set(MemorySegment seg, long index, long x) {
        constants$247.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Handle$VH() {
        return constants$247.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HANDLE Handle;
     * }
     */
    public static MemorySegment Handle$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$247.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HANDLE Handle;
     * }
     */
    public static void Handle$set(MemorySegment seg, MemorySegment x) {
        constants$247.const$1.set(seg, x);
    }
    public static MemorySegment Handle$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$247.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void Handle$set(MemorySegment seg, long index, MemorySegment x) {
        constants$247.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ULong$VH() {
        return constants$247.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD ULong;
     * }
     */
    public static int ULong$get(MemorySegment seg) {
        return (int)constants$247.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD ULong;
     * }
     */
    public static void ULong$set(MemorySegment seg, int x) {
        constants$247.const$2.set(seg, x);
    }
    public static int ULong$get(MemorySegment seg, long index) {
        return (int)constants$247.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void ULong$set(MemorySegment seg, long index, int x) {
        constants$247.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



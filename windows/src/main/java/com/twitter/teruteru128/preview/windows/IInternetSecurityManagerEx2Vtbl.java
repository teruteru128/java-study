// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IInternetSecurityManagerEx2Vtbl {
 *     HRESULT (*QueryInterface)(IInternetSecurityManagerEx2*,const IID*,void**);
 *     ULONG (*AddRef)(IInternetSecurityManagerEx2*);
 *     ULONG (*Release)(IInternetSecurityManagerEx2*);
 *     HRESULT (*SetSecuritySite)(IInternetSecurityManagerEx2*,IInternetSecurityMgrSite*);
 *     HRESULT (*GetSecuritySite)(IInternetSecurityManagerEx2*,IInternetSecurityMgrSite**);
 *     HRESULT (*MapUrlToZone)(IInternetSecurityManagerEx2*,LPCWSTR,DWORD*,DWORD);
 *     HRESULT (*GetSecurityId)(IInternetSecurityManagerEx2*,LPCWSTR,BYTE*,DWORD*,DWORD_PTR);
 *     HRESULT (*ProcessUrlAction)(IInternetSecurityManagerEx2*,LPCWSTR,DWORD,BYTE*,DWORD,BYTE*,DWORD,DWORD,DWORD);
 *     HRESULT (*QueryCustomPolicy)(IInternetSecurityManagerEx2*,LPCWSTR,const GUID*,BYTE**,DWORD*,BYTE*,DWORD,DWORD);
 *     HRESULT (*SetZoneMapping)(IInternetSecurityManagerEx2*,DWORD,LPCWSTR,DWORD);
 *     HRESULT (*GetZoneMappings)(IInternetSecurityManagerEx2*,DWORD,IEnumString**,DWORD);
 *     HRESULT (*ProcessUrlActionEx)(IInternetSecurityManagerEx2*,LPCWSTR,DWORD,BYTE*,DWORD,BYTE*,DWORD,DWORD,DWORD,DWORD*);
 *     HRESULT (*MapUrlToZoneEx2)(IInternetSecurityManagerEx2*,IUri*,DWORD*,DWORD,LPWSTR*,DWORD*);
 *     HRESULT (*ProcessUrlActionEx2)(IInternetSecurityManagerEx2*,IUri*,DWORD,BYTE*,DWORD,BYTE*,DWORD,DWORD,DWORD_PTR,DWORD*);
 *     HRESULT (*GetSecurityIdEx2)(IInternetSecurityManagerEx2*,IUri*,BYTE*,DWORD*,DWORD_PTR);
 *     HRESULT (*QueryCustomPolicyEx2)(IInternetSecurityManagerEx2*,IUri*,const GUID*,BYTE**,DWORD*,BYTE*,DWORD,DWORD_PTR);
 * };
 * }
 */
public class IInternetSecurityManagerEx2Vtbl {

    public static MemoryLayout $LAYOUT() {
        return constants$4256.const$4;
    }
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IInternetSecurityManagerEx2*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4256.const$5, fi, constants$37.const$3, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle QueryInterface$VH() {
        return constants$4257.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IInternetSecurityManagerEx2*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4257.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IInternetSecurityManagerEx2*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        constants$4257.const$0.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4257.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4257.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, Arena scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*AddRef)(IInternetSecurityManagerEx2*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4257.const$1, fi, constants$18.const$5, scope);
        }
        static AddRef ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle AddRef$VH() {
        return constants$4257.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IInternetSecurityManagerEx2*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4257.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IInternetSecurityManagerEx2*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        constants$4257.const$2.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4257.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4257.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, Arena scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*Release)(IInternetSecurityManagerEx2*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4257.const$3, fi, constants$18.const$5, scope);
        }
        static Release ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Release$VH() {
        return constants$4257.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IInternetSecurityManagerEx2*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4257.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IInternetSecurityManagerEx2*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        constants$4257.const$4.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4257.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4257.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, Arena scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetSecuritySite)(IInternetSecurityManagerEx2*,IInternetSecurityMgrSite*);
     * }
     */
    public interface SetSecuritySite {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetSecuritySite fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4257.const$5, fi, constants$34.const$0, scope);
        }
        static SetSecuritySite ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetSecuritySite$VH() {
        return constants$4258.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetSecuritySite)(IInternetSecurityManagerEx2*,IInternetSecurityMgrSite*);
     * }
     */
    public static MemorySegment SetSecuritySite$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4258.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetSecuritySite)(IInternetSecurityManagerEx2*,IInternetSecurityMgrSite*);
     * }
     */
    public static void SetSecuritySite$set(MemorySegment seg, MemorySegment x) {
        constants$4258.const$0.set(seg, x);
    }
    public static MemorySegment SetSecuritySite$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4258.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void SetSecuritySite$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4258.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetSecuritySite SetSecuritySite(MemorySegment segment, Arena scope) {
        return SetSecuritySite.ofAddress(SetSecuritySite$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetSecuritySite)(IInternetSecurityManagerEx2*,IInternetSecurityMgrSite**);
     * }
     */
    public interface GetSecuritySite {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetSecuritySite fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4258.const$1, fi, constants$34.const$0, scope);
        }
        static GetSecuritySite ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetSecuritySite$VH() {
        return constants$4258.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetSecuritySite)(IInternetSecurityManagerEx2*,IInternetSecurityMgrSite**);
     * }
     */
    public static MemorySegment GetSecuritySite$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4258.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetSecuritySite)(IInternetSecurityManagerEx2*,IInternetSecurityMgrSite**);
     * }
     */
    public static void GetSecuritySite$set(MemorySegment seg, MemorySegment x) {
        constants$4258.const$2.set(seg, x);
    }
    public static MemorySegment GetSecuritySite$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4258.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void GetSecuritySite$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4258.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetSecuritySite GetSecuritySite(MemorySegment segment, Arena scope) {
        return GetSecuritySite.ofAddress(GetSecuritySite$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*MapUrlToZone)(IInternetSecurityManagerEx2*,LPCWSTR,DWORD*,DWORD);
     * }
     */
    public interface MapUrlToZone {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3);
        static MemorySegment allocate(MapUrlToZone fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4258.const$3, fi, constants$607.const$3, scope);
        }
        static MapUrlToZone ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3) -> {
                try {
                    return (int)constants$2133.const$3.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle MapUrlToZone$VH() {
        return constants$4258.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*MapUrlToZone)(IInternetSecurityManagerEx2*,LPCWSTR,DWORD*,DWORD);
     * }
     */
    public static MemorySegment MapUrlToZone$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4258.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*MapUrlToZone)(IInternetSecurityManagerEx2*,LPCWSTR,DWORD*,DWORD);
     * }
     */
    public static void MapUrlToZone$set(MemorySegment seg, MemorySegment x) {
        constants$4258.const$4.set(seg, x);
    }
    public static MemorySegment MapUrlToZone$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4258.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void MapUrlToZone$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4258.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static MapUrlToZone MapUrlToZone(MemorySegment segment, Arena scope) {
        return MapUrlToZone.ofAddress(MapUrlToZone$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetSecurityId)(IInternetSecurityManagerEx2*,LPCWSTR,BYTE*,DWORD*,DWORD_PTR);
     * }
     */
    public interface GetSecurityId {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, long _x4);
        static MemorySegment allocate(GetSecurityId fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4258.const$5, fi, constants$791.const$4, scope);
        }
        static GetSecurityId ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, long __x4) -> {
                try {
                    return (int)constants$4248.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetSecurityId$VH() {
        return constants$4259.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetSecurityId)(IInternetSecurityManagerEx2*,LPCWSTR,BYTE*,DWORD*,DWORD_PTR);
     * }
     */
    public static MemorySegment GetSecurityId$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4259.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetSecurityId)(IInternetSecurityManagerEx2*,LPCWSTR,BYTE*,DWORD*,DWORD_PTR);
     * }
     */
    public static void GetSecurityId$set(MemorySegment seg, MemorySegment x) {
        constants$4259.const$0.set(seg, x);
    }
    public static MemorySegment GetSecurityId$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4259.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void GetSecurityId$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4259.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetSecurityId GetSecurityId(MemorySegment segment, Arena scope) {
        return GetSecurityId.ofAddress(GetSecurityId$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*ProcessUrlAction)(IInternetSecurityManagerEx2*,LPCWSTR,DWORD,BYTE*,DWORD,BYTE*,DWORD,DWORD,DWORD);
     * }
     */
    public interface ProcessUrlAction {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3, int _x4, java.lang.foreign.MemorySegment _x5, int _x6, int _x7, int _x8);
        static MemorySegment allocate(ProcessUrlAction fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4259.const$1, fi, constants$4248.const$4, scope);
        }
        static ProcessUrlAction ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3, int __x4, java.lang.foreign.MemorySegment __x5, int __x6, int __x7, int __x8) -> {
                try {
                    return (int)constants$4249.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7, __x8);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle ProcessUrlAction$VH() {
        return constants$4259.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*ProcessUrlAction)(IInternetSecurityManagerEx2*,LPCWSTR,DWORD,BYTE*,DWORD,BYTE*,DWORD,DWORD,DWORD);
     * }
     */
    public static MemorySegment ProcessUrlAction$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4259.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*ProcessUrlAction)(IInternetSecurityManagerEx2*,LPCWSTR,DWORD,BYTE*,DWORD,BYTE*,DWORD,DWORD,DWORD);
     * }
     */
    public static void ProcessUrlAction$set(MemorySegment seg, MemorySegment x) {
        constants$4259.const$2.set(seg, x);
    }
    public static MemorySegment ProcessUrlAction$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4259.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void ProcessUrlAction$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4259.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static ProcessUrlAction ProcessUrlAction(MemorySegment segment, Arena scope) {
        return ProcessUrlAction.ofAddress(ProcessUrlAction$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*QueryCustomPolicy)(IInternetSecurityManagerEx2*,LPCWSTR,const GUID*,BYTE**,DWORD*,BYTE*,DWORD,DWORD);
     * }
     */
    public interface QueryCustomPolicy {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5, int _x6, int _x7);
        static MemorySegment allocate(QueryCustomPolicy fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4259.const$3, fi, constants$4190.const$5, scope);
        }
        static QueryCustomPolicy ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5, int __x6, int __x7) -> {
                try {
                    return (int)constants$4249.const$3.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle QueryCustomPolicy$VH() {
        return constants$4259.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryCustomPolicy)(IInternetSecurityManagerEx2*,LPCWSTR,const GUID*,BYTE**,DWORD*,BYTE*,DWORD,DWORD);
     * }
     */
    public static MemorySegment QueryCustomPolicy$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4259.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryCustomPolicy)(IInternetSecurityManagerEx2*,LPCWSTR,const GUID*,BYTE**,DWORD*,BYTE*,DWORD,DWORD);
     * }
     */
    public static void QueryCustomPolicy$set(MemorySegment seg, MemorySegment x) {
        constants$4259.const$4.set(seg, x);
    }
    public static MemorySegment QueryCustomPolicy$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4259.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryCustomPolicy$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4259.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryCustomPolicy QueryCustomPolicy(MemorySegment segment, Arena scope) {
        return QueryCustomPolicy.ofAddress(QueryCustomPolicy$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetZoneMapping)(IInternetSecurityManagerEx2*,DWORD,LPCWSTR,DWORD);
     * }
     */
    public interface SetZoneMapping {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, int _x3);
        static MemorySegment allocate(SetZoneMapping fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4259.const$5, fi, constants$590.const$0, scope);
        }
        static SetZoneMapping ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, int __x3) -> {
                try {
                    return (int)constants$3451.const$3.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetZoneMapping$VH() {
        return constants$4260.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetZoneMapping)(IInternetSecurityManagerEx2*,DWORD,LPCWSTR,DWORD);
     * }
     */
    public static MemorySegment SetZoneMapping$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4260.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetZoneMapping)(IInternetSecurityManagerEx2*,DWORD,LPCWSTR,DWORD);
     * }
     */
    public static void SetZoneMapping$set(MemorySegment seg, MemorySegment x) {
        constants$4260.const$0.set(seg, x);
    }
    public static MemorySegment SetZoneMapping$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4260.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void SetZoneMapping$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4260.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetZoneMapping SetZoneMapping(MemorySegment segment, Arena scope) {
        return SetZoneMapping.ofAddress(SetZoneMapping$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetZoneMappings)(IInternetSecurityManagerEx2*,DWORD,IEnumString**,DWORD);
     * }
     */
    public interface GetZoneMappings {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, int _x3);
        static MemorySegment allocate(GetZoneMappings fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4260.const$1, fi, constants$590.const$0, scope);
        }
        static GetZoneMappings ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, int __x3) -> {
                try {
                    return (int)constants$3451.const$3.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetZoneMappings$VH() {
        return constants$4260.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetZoneMappings)(IInternetSecurityManagerEx2*,DWORD,IEnumString**,DWORD);
     * }
     */
    public static MemorySegment GetZoneMappings$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4260.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetZoneMappings)(IInternetSecurityManagerEx2*,DWORD,IEnumString**,DWORD);
     * }
     */
    public static void GetZoneMappings$set(MemorySegment seg, MemorySegment x) {
        constants$4260.const$2.set(seg, x);
    }
    public static MemorySegment GetZoneMappings$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4260.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void GetZoneMappings$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4260.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetZoneMappings GetZoneMappings(MemorySegment segment, Arena scope) {
        return GetZoneMappings.ofAddress(GetZoneMappings$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*ProcessUrlActionEx)(IInternetSecurityManagerEx2*,LPCWSTR,DWORD,BYTE*,DWORD,BYTE*,DWORD,DWORD,DWORD,DWORD*);
     * }
     */
    public interface ProcessUrlActionEx {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3, int _x4, java.lang.foreign.MemorySegment _x5, int _x6, int _x7, int _x8, java.lang.foreign.MemorySegment _x9);
        static MemorySegment allocate(ProcessUrlActionEx fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4260.const$3, fi, constants$4255.const$1, scope);
        }
        static ProcessUrlActionEx ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3, int __x4, java.lang.foreign.MemorySegment __x5, int __x6, int __x7, int __x8, java.lang.foreign.MemorySegment __x9) -> {
                try {
                    return (int)constants$4255.const$3.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7, __x8, __x9);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle ProcessUrlActionEx$VH() {
        return constants$4260.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*ProcessUrlActionEx)(IInternetSecurityManagerEx2*,LPCWSTR,DWORD,BYTE*,DWORD,BYTE*,DWORD,DWORD,DWORD,DWORD*);
     * }
     */
    public static MemorySegment ProcessUrlActionEx$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4260.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*ProcessUrlActionEx)(IInternetSecurityManagerEx2*,LPCWSTR,DWORD,BYTE*,DWORD,BYTE*,DWORD,DWORD,DWORD,DWORD*);
     * }
     */
    public static void ProcessUrlActionEx$set(MemorySegment seg, MemorySegment x) {
        constants$4260.const$4.set(seg, x);
    }
    public static MemorySegment ProcessUrlActionEx$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4260.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void ProcessUrlActionEx$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4260.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static ProcessUrlActionEx ProcessUrlActionEx(MemorySegment segment, Arena scope) {
        return ProcessUrlActionEx.ofAddress(ProcessUrlActionEx$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*MapUrlToZoneEx2)(IInternetSecurityManagerEx2*,IUri*,DWORD*,DWORD,LPWSTR*,DWORD*);
     * }
     */
    public interface MapUrlToZoneEx2 {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(MapUrlToZoneEx2 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4260.const$5, fi, constants$572.const$3, scope);
        }
        static MapUrlToZoneEx2 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    return (int)constants$2133.const$1.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle MapUrlToZoneEx2$VH() {
        return constants$4261.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*MapUrlToZoneEx2)(IInternetSecurityManagerEx2*,IUri*,DWORD*,DWORD,LPWSTR*,DWORD*);
     * }
     */
    public static MemorySegment MapUrlToZoneEx2$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4261.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*MapUrlToZoneEx2)(IInternetSecurityManagerEx2*,IUri*,DWORD*,DWORD,LPWSTR*,DWORD*);
     * }
     */
    public static void MapUrlToZoneEx2$set(MemorySegment seg, MemorySegment x) {
        constants$4261.const$0.set(seg, x);
    }
    public static MemorySegment MapUrlToZoneEx2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4261.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void MapUrlToZoneEx2$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4261.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static MapUrlToZoneEx2 MapUrlToZoneEx2(MemorySegment segment, Arena scope) {
        return MapUrlToZoneEx2.ofAddress(MapUrlToZoneEx2$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*ProcessUrlActionEx2)(IInternetSecurityManagerEx2*,IUri*,DWORD,BYTE*,DWORD,BYTE*,DWORD,DWORD,DWORD_PTR,DWORD*);
     * }
     */
    public interface ProcessUrlActionEx2 {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3, int _x4, java.lang.foreign.MemorySegment _x5, int _x6, int _x7, long _x8, java.lang.foreign.MemorySegment _x9);
        static MemorySegment allocate(ProcessUrlActionEx2 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4261.const$2, fi, constants$4261.const$1, scope);
        }
        static ProcessUrlActionEx2 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3, int __x4, java.lang.foreign.MemorySegment __x5, int __x6, int __x7, long __x8, java.lang.foreign.MemorySegment __x9) -> {
                try {
                    return (int)constants$4261.const$3.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7, __x8, __x9);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle ProcessUrlActionEx2$VH() {
        return constants$4261.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*ProcessUrlActionEx2)(IInternetSecurityManagerEx2*,IUri*,DWORD,BYTE*,DWORD,BYTE*,DWORD,DWORD,DWORD_PTR,DWORD*);
     * }
     */
    public static MemorySegment ProcessUrlActionEx2$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4261.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*ProcessUrlActionEx2)(IInternetSecurityManagerEx2*,IUri*,DWORD,BYTE*,DWORD,BYTE*,DWORD,DWORD,DWORD_PTR,DWORD*);
     * }
     */
    public static void ProcessUrlActionEx2$set(MemorySegment seg, MemorySegment x) {
        constants$4261.const$4.set(seg, x);
    }
    public static MemorySegment ProcessUrlActionEx2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4261.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void ProcessUrlActionEx2$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4261.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static ProcessUrlActionEx2 ProcessUrlActionEx2(MemorySegment segment, Arena scope) {
        return ProcessUrlActionEx2.ofAddress(ProcessUrlActionEx2$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetSecurityIdEx2)(IInternetSecurityManagerEx2*,IUri*,BYTE*,DWORD*,DWORD_PTR);
     * }
     */
    public interface GetSecurityIdEx2 {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, long _x4);
        static MemorySegment allocate(GetSecurityIdEx2 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4261.const$5, fi, constants$791.const$4, scope);
        }
        static GetSecurityIdEx2 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, long __x4) -> {
                try {
                    return (int)constants$4248.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetSecurityIdEx2$VH() {
        return constants$4262.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetSecurityIdEx2)(IInternetSecurityManagerEx2*,IUri*,BYTE*,DWORD*,DWORD_PTR);
     * }
     */
    public static MemorySegment GetSecurityIdEx2$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4262.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetSecurityIdEx2)(IInternetSecurityManagerEx2*,IUri*,BYTE*,DWORD*,DWORD_PTR);
     * }
     */
    public static void GetSecurityIdEx2$set(MemorySegment seg, MemorySegment x) {
        constants$4262.const$0.set(seg, x);
    }
    public static MemorySegment GetSecurityIdEx2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4262.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void GetSecurityIdEx2$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4262.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetSecurityIdEx2 GetSecurityIdEx2(MemorySegment segment, Arena scope) {
        return GetSecurityIdEx2.ofAddress(GetSecurityIdEx2$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*QueryCustomPolicyEx2)(IInternetSecurityManagerEx2*,IUri*,const GUID*,BYTE**,DWORD*,BYTE*,DWORD,DWORD_PTR);
     * }
     */
    public interface QueryCustomPolicyEx2 {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5, int _x6, long _x7);
        static MemorySegment allocate(QueryCustomPolicyEx2 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4262.const$2, fi, constants$4262.const$1, scope);
        }
        static QueryCustomPolicyEx2 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5, int __x6, long __x7) -> {
                try {
                    return (int)constants$4262.const$3.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle QueryCustomPolicyEx2$VH() {
        return constants$4262.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryCustomPolicyEx2)(IInternetSecurityManagerEx2*,IUri*,const GUID*,BYTE**,DWORD*,BYTE*,DWORD,DWORD_PTR);
     * }
     */
    public static MemorySegment QueryCustomPolicyEx2$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4262.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryCustomPolicyEx2)(IInternetSecurityManagerEx2*,IUri*,const GUID*,BYTE**,DWORD*,BYTE*,DWORD,DWORD_PTR);
     * }
     */
    public static void QueryCustomPolicyEx2$set(MemorySegment seg, MemorySegment x) {
        constants$4262.const$4.set(seg, x);
    }
    public static MemorySegment QueryCustomPolicyEx2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4262.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryCustomPolicyEx2$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4262.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryCustomPolicyEx2 QueryCustomPolicyEx2(MemorySegment segment, Arena scope) {
        return QueryCustomPolicyEx2.ofAddress(QueryCustomPolicyEx2$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



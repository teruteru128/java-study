// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tagIMEMENUITEMINFOW {
 *     UINT cbSize;
 *     UINT fType;
 *     UINT fState;
 *     UINT wID;
 *     HBITMAP hbmpChecked;
 *     HBITMAP hbmpUnchecked;
 *     DWORD dwItemData;
 *     WCHAR szString[80];
 *     HBITMAP hbmpItem;
 * };
 * }
 */
public class tagIMEMENUITEMINFOW {

    public static MemoryLayout $LAYOUT() {
        return constants$4527.const$4;
    }
    public static VarHandle cbSize$VH() {
        return constants$4527.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * UINT cbSize;
     * }
     */
    public static int cbSize$get(MemorySegment seg) {
        return (int)constants$4527.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * UINT cbSize;
     * }
     */
    public static void cbSize$set(MemorySegment seg, int x) {
        constants$4527.const$5.set(seg, x);
    }
    public static int cbSize$get(MemorySegment seg, long index) {
        return (int)constants$4527.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void cbSize$set(MemorySegment seg, long index, int x) {
        constants$4527.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle fType$VH() {
        return constants$4528.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * UINT fType;
     * }
     */
    public static int fType$get(MemorySegment seg) {
        return (int)constants$4528.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * UINT fType;
     * }
     */
    public static void fType$set(MemorySegment seg, int x) {
        constants$4528.const$0.set(seg, x);
    }
    public static int fType$get(MemorySegment seg, long index) {
        return (int)constants$4528.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void fType$set(MemorySegment seg, long index, int x) {
        constants$4528.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle fState$VH() {
        return constants$4528.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * UINT fState;
     * }
     */
    public static int fState$get(MemorySegment seg) {
        return (int)constants$4528.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * UINT fState;
     * }
     */
    public static void fState$set(MemorySegment seg, int x) {
        constants$4528.const$1.set(seg, x);
    }
    public static int fState$get(MemorySegment seg, long index) {
        return (int)constants$4528.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void fState$set(MemorySegment seg, long index, int x) {
        constants$4528.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle wID$VH() {
        return constants$4528.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * UINT wID;
     * }
     */
    public static int wID$get(MemorySegment seg) {
        return (int)constants$4528.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * UINT wID;
     * }
     */
    public static void wID$set(MemorySegment seg, int x) {
        constants$4528.const$2.set(seg, x);
    }
    public static int wID$get(MemorySegment seg, long index) {
        return (int)constants$4528.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void wID$set(MemorySegment seg, long index, int x) {
        constants$4528.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hbmpChecked$VH() {
        return constants$4528.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HBITMAP hbmpChecked;
     * }
     */
    public static MemorySegment hbmpChecked$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4528.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HBITMAP hbmpChecked;
     * }
     */
    public static void hbmpChecked$set(MemorySegment seg, MemorySegment x) {
        constants$4528.const$3.set(seg, x);
    }
    public static MemorySegment hbmpChecked$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4528.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void hbmpChecked$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4528.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hbmpUnchecked$VH() {
        return constants$4528.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HBITMAP hbmpUnchecked;
     * }
     */
    public static MemorySegment hbmpUnchecked$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4528.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HBITMAP hbmpUnchecked;
     * }
     */
    public static void hbmpUnchecked$set(MemorySegment seg, MemorySegment x) {
        constants$4528.const$4.set(seg, x);
    }
    public static MemorySegment hbmpUnchecked$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4528.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void hbmpUnchecked$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4528.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwItemData$VH() {
        return constants$4528.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwItemData;
     * }
     */
    public static int dwItemData$get(MemorySegment seg) {
        return (int)constants$4528.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwItemData;
     * }
     */
    public static void dwItemData$set(MemorySegment seg, int x) {
        constants$4528.const$5.set(seg, x);
    }
    public static int dwItemData$get(MemorySegment seg, long index) {
        return (int)constants$4528.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void dwItemData$set(MemorySegment seg, long index, int x) {
        constants$4528.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment szString$slice(MemorySegment seg) {
        return seg.asSlice(36, 160);
    }
    public static VarHandle hbmpItem$VH() {
        return constants$4529.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HBITMAP hbmpItem;
     * }
     */
    public static MemorySegment hbmpItem$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4529.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HBITMAP hbmpItem;
     * }
     */
    public static void hbmpItem$set(MemorySegment seg, MemorySegment x) {
        constants$4529.const$0.set(seg, x);
    }
    public static MemorySegment hbmpItem$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4529.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void hbmpItem$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4529.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



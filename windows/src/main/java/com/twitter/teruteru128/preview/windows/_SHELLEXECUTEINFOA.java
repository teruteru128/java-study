// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _SHELLEXECUTEINFOA {
 *     DWORD cbSize;
 *     ULONG fMask;
 *     HWND hwnd;
 *     LPCSTR lpVerb;
 *     LPCSTR lpFile;
 *     LPCSTR lpParameters;
 *     LPCSTR lpDirectory;
 *     int nShow;
 *     HINSTANCE hInstApp;
 *     void* lpIDList;
 *     LPCSTR lpClass;
 *     HKEY hkeyClass;
 *     DWORD dwHotKey;
 *     union {
 *         HANDLE hIcon;
 *         HANDLE hMonitor;
 *     };
 *     HANDLE hProcess;
 * };
 * }
 */
public class _SHELLEXECUTEINFOA {

    public static MemoryLayout $LAYOUT() {
        return constants$1862.const$3;
    }
    public static VarHandle cbSize$VH() {
        return constants$1862.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD cbSize;
     * }
     */
    public static int cbSize$get(MemorySegment seg) {
        return (int)constants$1862.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD cbSize;
     * }
     */
    public static void cbSize$set(MemorySegment seg, int x) {
        constants$1862.const$4.set(seg, x);
    }
    public static int cbSize$get(MemorySegment seg, long index) {
        return (int)constants$1862.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void cbSize$set(MemorySegment seg, long index, int x) {
        constants$1862.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle fMask$VH() {
        return constants$1862.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG fMask;
     * }
     */
    public static int fMask$get(MemorySegment seg) {
        return (int)constants$1862.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG fMask;
     * }
     */
    public static void fMask$set(MemorySegment seg, int x) {
        constants$1862.const$5.set(seg, x);
    }
    public static int fMask$get(MemorySegment seg, long index) {
        return (int)constants$1862.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void fMask$set(MemorySegment seg, long index, int x) {
        constants$1862.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hwnd$VH() {
        return constants$1863.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HWND hwnd;
     * }
     */
    public static MemorySegment hwnd$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1863.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HWND hwnd;
     * }
     */
    public static void hwnd$set(MemorySegment seg, MemorySegment x) {
        constants$1863.const$0.set(seg, x);
    }
    public static MemorySegment hwnd$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1863.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void hwnd$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1863.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lpVerb$VH() {
        return constants$1863.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPCSTR lpVerb;
     * }
     */
    public static MemorySegment lpVerb$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1863.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPCSTR lpVerb;
     * }
     */
    public static void lpVerb$set(MemorySegment seg, MemorySegment x) {
        constants$1863.const$1.set(seg, x);
    }
    public static MemorySegment lpVerb$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1863.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void lpVerb$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1863.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lpFile$VH() {
        return constants$1863.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPCSTR lpFile;
     * }
     */
    public static MemorySegment lpFile$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1863.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPCSTR lpFile;
     * }
     */
    public static void lpFile$set(MemorySegment seg, MemorySegment x) {
        constants$1863.const$2.set(seg, x);
    }
    public static MemorySegment lpFile$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1863.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void lpFile$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1863.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lpParameters$VH() {
        return constants$1863.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPCSTR lpParameters;
     * }
     */
    public static MemorySegment lpParameters$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1863.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPCSTR lpParameters;
     * }
     */
    public static void lpParameters$set(MemorySegment seg, MemorySegment x) {
        constants$1863.const$3.set(seg, x);
    }
    public static MemorySegment lpParameters$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1863.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void lpParameters$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1863.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lpDirectory$VH() {
        return constants$1863.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPCSTR lpDirectory;
     * }
     */
    public static MemorySegment lpDirectory$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1863.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPCSTR lpDirectory;
     * }
     */
    public static void lpDirectory$set(MemorySegment seg, MemorySegment x) {
        constants$1863.const$4.set(seg, x);
    }
    public static MemorySegment lpDirectory$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1863.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void lpDirectory$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1863.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nShow$VH() {
        return constants$1863.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int nShow;
     * }
     */
    public static int nShow$get(MemorySegment seg) {
        return (int)constants$1863.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int nShow;
     * }
     */
    public static void nShow$set(MemorySegment seg, int x) {
        constants$1863.const$5.set(seg, x);
    }
    public static int nShow$get(MemorySegment seg, long index) {
        return (int)constants$1863.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void nShow$set(MemorySegment seg, long index, int x) {
        constants$1863.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hInstApp$VH() {
        return constants$1864.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HINSTANCE hInstApp;
     * }
     */
    public static MemorySegment hInstApp$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1864.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HINSTANCE hInstApp;
     * }
     */
    public static void hInstApp$set(MemorySegment seg, MemorySegment x) {
        constants$1864.const$0.set(seg, x);
    }
    public static MemorySegment hInstApp$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1864.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void hInstApp$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1864.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lpIDList$VH() {
        return constants$1864.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* lpIDList;
     * }
     */
    public static MemorySegment lpIDList$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1864.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* lpIDList;
     * }
     */
    public static void lpIDList$set(MemorySegment seg, MemorySegment x) {
        constants$1864.const$1.set(seg, x);
    }
    public static MemorySegment lpIDList$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1864.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void lpIDList$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1864.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lpClass$VH() {
        return constants$1864.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPCSTR lpClass;
     * }
     */
    public static MemorySegment lpClass$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1864.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPCSTR lpClass;
     * }
     */
    public static void lpClass$set(MemorySegment seg, MemorySegment x) {
        constants$1864.const$2.set(seg, x);
    }
    public static MemorySegment lpClass$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1864.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void lpClass$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1864.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hkeyClass$VH() {
        return constants$1864.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HKEY hkeyClass;
     * }
     */
    public static MemorySegment hkeyClass$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1864.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HKEY hkeyClass;
     * }
     */
    public static void hkeyClass$set(MemorySegment seg, MemorySegment x) {
        constants$1864.const$3.set(seg, x);
    }
    public static MemorySegment hkeyClass$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1864.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void hkeyClass$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1864.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwHotKey$VH() {
        return constants$1864.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwHotKey;
     * }
     */
    public static int dwHotKey$get(MemorySegment seg) {
        return (int)constants$1864.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwHotKey;
     * }
     */
    public static void dwHotKey$set(MemorySegment seg, int x) {
        constants$1864.const$4.set(seg, x);
    }
    public static int dwHotKey$get(MemorySegment seg, long index) {
        return (int)constants$1864.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void dwHotKey$set(MemorySegment seg, long index, int x) {
        constants$1864.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hIcon$VH() {
        return constants$1864.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HANDLE hIcon;
     * }
     */
    public static MemorySegment hIcon$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1864.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HANDLE hIcon;
     * }
     */
    public static void hIcon$set(MemorySegment seg, MemorySegment x) {
        constants$1864.const$5.set(seg, x);
    }
    public static MemorySegment hIcon$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1864.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void hIcon$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1864.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hMonitor$VH() {
        return constants$1865.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HANDLE hMonitor;
     * }
     */
    public static MemorySegment hMonitor$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1865.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HANDLE hMonitor;
     * }
     */
    public static void hMonitor$set(MemorySegment seg, MemorySegment x) {
        constants$1865.const$0.set(seg, x);
    }
    public static MemorySegment hMonitor$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1865.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void hMonitor$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1865.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hProcess$VH() {
        return constants$1865.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HANDLE hProcess;
     * }
     */
    public static MemorySegment hProcess$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1865.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HANDLE hProcess;
     * }
     */
    public static void hProcess$set(MemorySegment seg, MemorySegment x) {
        constants$1865.const$1.set(seg, x);
    }
    public static MemorySegment hProcess$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1865.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void hProcess$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1865.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



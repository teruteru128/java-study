// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _ENCRYPTION_KEY_CTRL_INPUT {
 *     DWORD HeaderSize;
 *     DWORD StructureSize;
 *     WORD KeyOffset;
 *     WORD KeySize;
 *     DWORD DplLock;
 *     DWORDLONG DplUserId;
 *     DWORDLONG DplCredentialId;
 * };
 * }
 */
public class _ENCRYPTION_KEY_CTRL_INPUT {

    public static MemoryLayout $LAYOUT() {
        return constants$2728.const$2;
    }
    public static VarHandle HeaderSize$VH() {
        return constants$2728.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD HeaderSize;
     * }
     */
    public static int HeaderSize$get(MemorySegment seg) {
        return (int)constants$2728.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD HeaderSize;
     * }
     */
    public static void HeaderSize$set(MemorySegment seg, int x) {
        constants$2728.const$3.set(seg, x);
    }
    public static int HeaderSize$get(MemorySegment seg, long index) {
        return (int)constants$2728.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void HeaderSize$set(MemorySegment seg, long index, int x) {
        constants$2728.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle StructureSize$VH() {
        return constants$2728.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD StructureSize;
     * }
     */
    public static int StructureSize$get(MemorySegment seg) {
        return (int)constants$2728.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD StructureSize;
     * }
     */
    public static void StructureSize$set(MemorySegment seg, int x) {
        constants$2728.const$4.set(seg, x);
    }
    public static int StructureSize$get(MemorySegment seg, long index) {
        return (int)constants$2728.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void StructureSize$set(MemorySegment seg, long index, int x) {
        constants$2728.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle KeyOffset$VH() {
        return constants$2728.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD KeyOffset;
     * }
     */
    public static short KeyOffset$get(MemorySegment seg) {
        return (short)constants$2728.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD KeyOffset;
     * }
     */
    public static void KeyOffset$set(MemorySegment seg, short x) {
        constants$2728.const$5.set(seg, x);
    }
    public static short KeyOffset$get(MemorySegment seg, long index) {
        return (short)constants$2728.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void KeyOffset$set(MemorySegment seg, long index, short x) {
        constants$2728.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle KeySize$VH() {
        return constants$2729.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD KeySize;
     * }
     */
    public static short KeySize$get(MemorySegment seg) {
        return (short)constants$2729.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD KeySize;
     * }
     */
    public static void KeySize$set(MemorySegment seg, short x) {
        constants$2729.const$0.set(seg, x);
    }
    public static short KeySize$get(MemorySegment seg, long index) {
        return (short)constants$2729.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void KeySize$set(MemorySegment seg, long index, short x) {
        constants$2729.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle DplLock$VH() {
        return constants$2729.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD DplLock;
     * }
     */
    public static int DplLock$get(MemorySegment seg) {
        return (int)constants$2729.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD DplLock;
     * }
     */
    public static void DplLock$set(MemorySegment seg, int x) {
        constants$2729.const$1.set(seg, x);
    }
    public static int DplLock$get(MemorySegment seg, long index) {
        return (int)constants$2729.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void DplLock$set(MemorySegment seg, long index, int x) {
        constants$2729.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle DplUserId$VH() {
        return constants$2729.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORDLONG DplUserId;
     * }
     */
    public static long DplUserId$get(MemorySegment seg) {
        return (long)constants$2729.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORDLONG DplUserId;
     * }
     */
    public static void DplUserId$set(MemorySegment seg, long x) {
        constants$2729.const$2.set(seg, x);
    }
    public static long DplUserId$get(MemorySegment seg, long index) {
        return (long)constants$2729.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void DplUserId$set(MemorySegment seg, long index, long x) {
        constants$2729.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle DplCredentialId$VH() {
        return constants$2729.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORDLONG DplCredentialId;
     * }
     */
    public static long DplCredentialId$get(MemorySegment seg) {
        return (long)constants$2729.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORDLONG DplCredentialId;
     * }
     */
    public static void DplCredentialId$set(MemorySegment seg, long x) {
        constants$2729.const$3.set(seg, x);
    }
    public static long DplCredentialId$get(MemorySegment seg, long index) {
        return (long)constants$2729.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void DplCredentialId$set(MemorySegment seg, long index, long x) {
        constants$2729.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



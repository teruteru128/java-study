// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _IMAGE_SYMBOL_EX {
 *     union  N;
 *     DWORD Value;
 *     LONG SectionNumber;
 *     WORD Type;
 *     BYTE StorageClass;
 *     BYTE NumberOfAuxSymbols;
 * };
 * }
 */
public class _IMAGE_SYMBOL_EX {

    public static MemoryLayout $LAYOUT() {
        return constants$390.const$5;
    }
    /**
     * {@snippet :
     * union {
     *     BYTE ShortName[8];
     *     struct  Name;
     *     DWORD LongName[2];
     * };
     * }
     */
    public static final class N {

        // Suppresses default constructor, ensuring non-instantiability.
        private N() {}
        public static MemoryLayout $LAYOUT() {
            return constants$389.const$2;
        }
        public static MemorySegment ShortName$slice(MemorySegment seg) {
            return seg.asSlice(0, 8);
        }
        /**
         * {@snippet :
         * struct {
         *     DWORD Short;
         *     DWORD Long;
         * };
         * }
         */
        public static final class Name {

            // Suppresses default constructor, ensuring non-instantiability.
            private Name() {}
            public static MemoryLayout $LAYOUT() {
                return constants$389.const$3;
            }
            public static VarHandle Short$VH() {
                return constants$391.const$0;
            }
            /**
             * Getter for field:
             * {@snippet :
             * DWORD Short;
             * }
             */
            public static int Short$get(MemorySegment seg) {
                return (int)constants$391.const$0.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * DWORD Short;
             * }
             */
            public static void Short$set(MemorySegment seg, int x) {
                constants$391.const$0.set(seg, x);
            }
            public static int Short$get(MemorySegment seg, long index) {
                return (int)constants$391.const$0.get(seg.asSlice(index*sizeof()));
            }
            public static void Short$set(MemorySegment seg, long index, int x) {
                constants$391.const$0.set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle Long$VH() {
                return constants$391.const$1;
            }
            /**
             * Getter for field:
             * {@snippet :
             * DWORD Long;
             * }
             */
            public static int Long$get(MemorySegment seg) {
                return (int)constants$391.const$1.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * DWORD Long;
             * }
             */
            public static void Long$set(MemorySegment seg, int x) {
                constants$391.const$1.set(seg, x);
            }
            public static int Long$get(MemorySegment seg, long index) {
                return (int)constants$391.const$1.get(seg.asSlice(index*sizeof()));
            }
            public static void Long$set(MemorySegment seg, long index, int x) {
                constants$391.const$1.set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
        }

        public static MemorySegment Name$slice(MemorySegment seg) {
            return seg.asSlice(0, 8);
        }
        public static MemorySegment LongName$slice(MemorySegment seg) {
            return seg.asSlice(0, 8);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment N$slice(MemorySegment seg) {
        return seg.asSlice(0, 8);
    }
    public static VarHandle Value$VH() {
        return constants$391.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Value;
     * }
     */
    public static int Value$get(MemorySegment seg) {
        return (int)constants$391.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Value;
     * }
     */
    public static void Value$set(MemorySegment seg, int x) {
        constants$391.const$2.set(seg, x);
    }
    public static int Value$get(MemorySegment seg, long index) {
        return (int)constants$391.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void Value$set(MemorySegment seg, long index, int x) {
        constants$391.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle SectionNumber$VH() {
        return constants$391.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LONG SectionNumber;
     * }
     */
    public static int SectionNumber$get(MemorySegment seg) {
        return (int)constants$391.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LONG SectionNumber;
     * }
     */
    public static void SectionNumber$set(MemorySegment seg, int x) {
        constants$391.const$3.set(seg, x);
    }
    public static int SectionNumber$get(MemorySegment seg, long index) {
        return (int)constants$391.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void SectionNumber$set(MemorySegment seg, long index, int x) {
        constants$391.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Type$VH() {
        return constants$391.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD Type;
     * }
     */
    public static short Type$get(MemorySegment seg) {
        return (short)constants$391.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD Type;
     * }
     */
    public static void Type$set(MemorySegment seg, short x) {
        constants$391.const$4.set(seg, x);
    }
    public static short Type$get(MemorySegment seg, long index) {
        return (short)constants$391.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void Type$set(MemorySegment seg, long index, short x) {
        constants$391.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle StorageClass$VH() {
        return constants$391.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE StorageClass;
     * }
     */
    public static byte StorageClass$get(MemorySegment seg) {
        return (byte)constants$391.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE StorageClass;
     * }
     */
    public static void StorageClass$set(MemorySegment seg, byte x) {
        constants$391.const$5.set(seg, x);
    }
    public static byte StorageClass$get(MemorySegment seg, long index) {
        return (byte)constants$391.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void StorageClass$set(MemorySegment seg, long index, byte x) {
        constants$391.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle NumberOfAuxSymbols$VH() {
        return constants$392.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE NumberOfAuxSymbols;
     * }
     */
    public static byte NumberOfAuxSymbols$get(MemorySegment seg) {
        return (byte)constants$392.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE NumberOfAuxSymbols;
     * }
     */
    public static void NumberOfAuxSymbols$set(MemorySegment seg, byte x) {
        constants$392.const$0.set(seg, x);
    }
    public static byte NumberOfAuxSymbols$get(MemorySegment seg, long index) {
        return (byte)constants$392.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void NumberOfAuxSymbols$set(MemorySegment seg, long index, byte x) {
        constants$392.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



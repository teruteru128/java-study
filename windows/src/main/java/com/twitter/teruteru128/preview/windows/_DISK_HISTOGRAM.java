// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _DISK_HISTOGRAM {
 *     LARGE_INTEGER DiskSize;
 *     LARGE_INTEGER Start;
 *     LARGE_INTEGER End;
 *     LARGE_INTEGER Average;
 *     LARGE_INTEGER AverageRead;
 *     LARGE_INTEGER AverageWrite;
 *     DWORD Granularity;
 *     DWORD Size;
 *     DWORD ReadCount;
 *     DWORD WriteCount;
 *     PHISTOGRAM_BUCKET Histogram;
 * };
 * }
 */
public class _DISK_HISTOGRAM {

    public static MemoryLayout $LAYOUT() {
        return constants$2551.const$2;
    }
    public static MemorySegment DiskSize$slice(MemorySegment seg) {
        return seg.asSlice(0, 8);
    }
    public static MemorySegment Start$slice(MemorySegment seg) {
        return seg.asSlice(8, 8);
    }
    public static MemorySegment End$slice(MemorySegment seg) {
        return seg.asSlice(16, 8);
    }
    public static MemorySegment Average$slice(MemorySegment seg) {
        return seg.asSlice(24, 8);
    }
    public static MemorySegment AverageRead$slice(MemorySegment seg) {
        return seg.asSlice(32, 8);
    }
    public static MemorySegment AverageWrite$slice(MemorySegment seg) {
        return seg.asSlice(40, 8);
    }
    public static VarHandle Granularity$VH() {
        return constants$2551.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Granularity;
     * }
     */
    public static int Granularity$get(MemorySegment seg) {
        return (int)constants$2551.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Granularity;
     * }
     */
    public static void Granularity$set(MemorySegment seg, int x) {
        constants$2551.const$3.set(seg, x);
    }
    public static int Granularity$get(MemorySegment seg, long index) {
        return (int)constants$2551.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void Granularity$set(MemorySegment seg, long index, int x) {
        constants$2551.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Size$VH() {
        return constants$2551.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Size;
     * }
     */
    public static int Size$get(MemorySegment seg) {
        return (int)constants$2551.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Size;
     * }
     */
    public static void Size$set(MemorySegment seg, int x) {
        constants$2551.const$4.set(seg, x);
    }
    public static int Size$get(MemorySegment seg, long index) {
        return (int)constants$2551.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void Size$set(MemorySegment seg, long index, int x) {
        constants$2551.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ReadCount$VH() {
        return constants$2551.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD ReadCount;
     * }
     */
    public static int ReadCount$get(MemorySegment seg) {
        return (int)constants$2551.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD ReadCount;
     * }
     */
    public static void ReadCount$set(MemorySegment seg, int x) {
        constants$2551.const$5.set(seg, x);
    }
    public static int ReadCount$get(MemorySegment seg, long index) {
        return (int)constants$2551.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void ReadCount$set(MemorySegment seg, long index, int x) {
        constants$2551.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle WriteCount$VH() {
        return constants$2552.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD WriteCount;
     * }
     */
    public static int WriteCount$get(MemorySegment seg) {
        return (int)constants$2552.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD WriteCount;
     * }
     */
    public static void WriteCount$set(MemorySegment seg, int x) {
        constants$2552.const$0.set(seg, x);
    }
    public static int WriteCount$get(MemorySegment seg, long index) {
        return (int)constants$2552.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void WriteCount$set(MemorySegment seg, long index, int x) {
        constants$2552.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Histogram$VH() {
        return constants$2552.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PHISTOGRAM_BUCKET Histogram;
     * }
     */
    public static MemorySegment Histogram$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2552.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PHISTOGRAM_BUCKET Histogram;
     * }
     */
    public static void Histogram$set(MemorySegment seg, MemorySegment x) {
        constants$2552.const$1.set(seg, x);
    }
    public static MemorySegment Histogram$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2552.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void Histogram$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2552.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



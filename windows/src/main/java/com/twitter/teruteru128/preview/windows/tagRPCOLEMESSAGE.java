// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tagRPCOLEMESSAGE {
 *     void* reserved1;
 *     RPCOLEDATAREP dataRepresentation;
 *     void* Buffer;
 *     ULONG cbBuffer;
 *     ULONG iMethod;
 *     void* reserved2[5];
 *     ULONG rpcFlags;
 * };
 * }
 */
public class tagRPCOLEMESSAGE {

    public static MemoryLayout $LAYOUT() {
        return constants$3057.const$2;
    }
    public static VarHandle reserved1$VH() {
        return constants$3057.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* reserved1;
     * }
     */
    public static MemorySegment reserved1$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3057.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* reserved1;
     * }
     */
    public static void reserved1$set(MemorySegment seg, MemorySegment x) {
        constants$3057.const$3.set(seg, x);
    }
    public static MemorySegment reserved1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3057.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void reserved1$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3057.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dataRepresentation$VH() {
        return constants$3057.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * RPCOLEDATAREP dataRepresentation;
     * }
     */
    public static int dataRepresentation$get(MemorySegment seg) {
        return (int)constants$3057.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * RPCOLEDATAREP dataRepresentation;
     * }
     */
    public static void dataRepresentation$set(MemorySegment seg, int x) {
        constants$3057.const$4.set(seg, x);
    }
    public static int dataRepresentation$get(MemorySegment seg, long index) {
        return (int)constants$3057.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void dataRepresentation$set(MemorySegment seg, long index, int x) {
        constants$3057.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Buffer$VH() {
        return constants$3057.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* Buffer;
     * }
     */
    public static MemorySegment Buffer$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3057.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* Buffer;
     * }
     */
    public static void Buffer$set(MemorySegment seg, MemorySegment x) {
        constants$3057.const$5.set(seg, x);
    }
    public static MemorySegment Buffer$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3057.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void Buffer$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3057.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cbBuffer$VH() {
        return constants$3058.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG cbBuffer;
     * }
     */
    public static int cbBuffer$get(MemorySegment seg) {
        return (int)constants$3058.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG cbBuffer;
     * }
     */
    public static void cbBuffer$set(MemorySegment seg, int x) {
        constants$3058.const$0.set(seg, x);
    }
    public static int cbBuffer$get(MemorySegment seg, long index) {
        return (int)constants$3058.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void cbBuffer$set(MemorySegment seg, long index, int x) {
        constants$3058.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle iMethod$VH() {
        return constants$3058.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG iMethod;
     * }
     */
    public static int iMethod$get(MemorySegment seg) {
        return (int)constants$3058.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG iMethod;
     * }
     */
    public static void iMethod$set(MemorySegment seg, int x) {
        constants$3058.const$1.set(seg, x);
    }
    public static int iMethod$get(MemorySegment seg, long index) {
        return (int)constants$3058.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void iMethod$set(MemorySegment seg, long index, int x) {
        constants$3058.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment reserved2$slice(MemorySegment seg) {
        return seg.asSlice(32, 40);
    }
    public static VarHandle rpcFlags$VH() {
        return constants$3058.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG rpcFlags;
     * }
     */
    public static int rpcFlags$get(MemorySegment seg) {
        return (int)constants$3058.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG rpcFlags;
     * }
     */
    public static void rpcFlags$set(MemorySegment seg, int x) {
        constants$3058.const$2.set(seg, x);
    }
    public static int rpcFlags$get(MemorySegment seg, long index) {
        return (int)constants$3058.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void rpcFlags$set(MemorySegment seg, long index, int x) {
        constants$3058.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



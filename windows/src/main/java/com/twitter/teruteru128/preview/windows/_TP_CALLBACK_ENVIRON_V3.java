// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _TP_CALLBACK_ENVIRON_V3 {
 *     TP_VERSION Version;
 *     PTP_POOL Pool;
 *     PTP_CLEANUP_GROUP CleanupGroup;
 *     PTP_CLEANUP_GROUP_CANCEL_CALLBACK CleanupGroupCancelCallback;
 *     PVOID RaceDll;
 *     struct _ACTIVATION_CONTEXT* ActivationContext;
 *     PTP_SIMPLE_CALLBACK FinalizationCallback;
 *     union  u;
 *     TP_CALLBACK_PRIORITY CallbackPriority;
 *     DWORD Size;
 * };
 * }
 */
public class _TP_CALLBACK_ENVIRON_V3 {

    public static MemoryLayout $LAYOUT() {
        return constants$532.const$4;
    }
    public static VarHandle Version$VH() {
        return constants$532.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * TP_VERSION Version;
     * }
     */
    public static int Version$get(MemorySegment seg) {
        return (int)constants$532.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * TP_VERSION Version;
     * }
     */
    public static void Version$set(MemorySegment seg, int x) {
        constants$532.const$5.set(seg, x);
    }
    public static int Version$get(MemorySegment seg, long index) {
        return (int)constants$532.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, int x) {
        constants$532.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Pool$VH() {
        return constants$533.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PTP_POOL Pool;
     * }
     */
    public static MemorySegment Pool$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$533.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PTP_POOL Pool;
     * }
     */
    public static void Pool$set(MemorySegment seg, MemorySegment x) {
        constants$533.const$0.set(seg, x);
    }
    public static MemorySegment Pool$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$533.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Pool$set(MemorySegment seg, long index, MemorySegment x) {
        constants$533.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle CleanupGroup$VH() {
        return constants$533.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PTP_CLEANUP_GROUP CleanupGroup;
     * }
     */
    public static MemorySegment CleanupGroup$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$533.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PTP_CLEANUP_GROUP CleanupGroup;
     * }
     */
    public static void CleanupGroup$set(MemorySegment seg, MemorySegment x) {
        constants$533.const$1.set(seg, x);
    }
    public static MemorySegment CleanupGroup$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$533.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void CleanupGroup$set(MemorySegment seg, long index, MemorySegment x) {
        constants$533.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle CleanupGroupCancelCallback$VH() {
        return constants$533.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PTP_CLEANUP_GROUP_CANCEL_CALLBACK CleanupGroupCancelCallback;
     * }
     */
    public static MemorySegment CleanupGroupCancelCallback$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$533.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PTP_CLEANUP_GROUP_CANCEL_CALLBACK CleanupGroupCancelCallback;
     * }
     */
    public static void CleanupGroupCancelCallback$set(MemorySegment seg, MemorySegment x) {
        constants$533.const$2.set(seg, x);
    }
    public static MemorySegment CleanupGroupCancelCallback$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$533.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void CleanupGroupCancelCallback$set(MemorySegment seg, long index, MemorySegment x) {
        constants$533.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static PTP_CLEANUP_GROUP_CANCEL_CALLBACK CleanupGroupCancelCallback(MemorySegment segment, Arena scope) {
        return PTP_CLEANUP_GROUP_CANCEL_CALLBACK.ofAddress(CleanupGroupCancelCallback$get(segment), scope);
    }
    public static VarHandle RaceDll$VH() {
        return constants$533.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PVOID RaceDll;
     * }
     */
    public static MemorySegment RaceDll$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$533.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PVOID RaceDll;
     * }
     */
    public static void RaceDll$set(MemorySegment seg, MemorySegment x) {
        constants$533.const$3.set(seg, x);
    }
    public static MemorySegment RaceDll$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$533.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void RaceDll$set(MemorySegment seg, long index, MemorySegment x) {
        constants$533.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ActivationContext$VH() {
        return constants$533.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _ACTIVATION_CONTEXT* ActivationContext;
     * }
     */
    public static MemorySegment ActivationContext$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$533.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _ACTIVATION_CONTEXT* ActivationContext;
     * }
     */
    public static void ActivationContext$set(MemorySegment seg, MemorySegment x) {
        constants$533.const$4.set(seg, x);
    }
    public static MemorySegment ActivationContext$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$533.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void ActivationContext$set(MemorySegment seg, long index, MemorySegment x) {
        constants$533.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle FinalizationCallback$VH() {
        return constants$533.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PTP_SIMPLE_CALLBACK FinalizationCallback;
     * }
     */
    public static MemorySegment FinalizationCallback$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$533.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PTP_SIMPLE_CALLBACK FinalizationCallback;
     * }
     */
    public static void FinalizationCallback$set(MemorySegment seg, MemorySegment x) {
        constants$533.const$5.set(seg, x);
    }
    public static MemorySegment FinalizationCallback$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$533.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void FinalizationCallback$set(MemorySegment seg, long index, MemorySegment x) {
        constants$533.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static PTP_SIMPLE_CALLBACK FinalizationCallback(MemorySegment segment, Arena scope) {
        return PTP_SIMPLE_CALLBACK.ofAddress(FinalizationCallback$get(segment), scope);
    }
    /**
     * {@snippet :
     * union {
     *     DWORD Flags;
     *     struct  s;
     * };
     * }
     */
    public static final class u {

        // Suppresses default constructor, ensuring non-instantiability.
        private u() {}
        public static MemoryLayout $LAYOUT() {
            return constants$534.const$0;
        }
        public static VarHandle Flags$VH() {
            return constants$534.const$1;
        }
        /**
         * Getter for field:
         * {@snippet :
         * DWORD Flags;
         * }
         */
        public static int Flags$get(MemorySegment seg) {
            return (int)constants$534.const$1.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * DWORD Flags;
         * }
         */
        public static void Flags$set(MemorySegment seg, int x) {
            constants$534.const$1.set(seg, x);
        }
        public static int Flags$get(MemorySegment seg, long index) {
            return (int)constants$534.const$1.get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(MemorySegment seg, long index, int x) {
            constants$534.const$1.set(seg.asSlice(index*sizeof()), x);
        }
        /**
         * {@snippet :
         * struct {
         *              *     DWORD LongFunction;
         *     DWORD Persistent;
         *     DWORD Private;
         * };
         * }
         */
        public static final class s {

            // Suppresses default constructor, ensuring non-instantiability.
            private s() {}
            public static MemoryLayout $LAYOUT() {
                return constants$128.const$3;
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
        }

        public static MemorySegment s$slice(MemorySegment seg) {
            return seg.asSlice(0, 4);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment u$slice(MemorySegment seg) {
        return seg.asSlice(56, 4);
    }
    public static VarHandle CallbackPriority$VH() {
        return constants$534.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * TP_CALLBACK_PRIORITY CallbackPriority;
     * }
     */
    public static int CallbackPriority$get(MemorySegment seg) {
        return (int)constants$534.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * TP_CALLBACK_PRIORITY CallbackPriority;
     * }
     */
    public static void CallbackPriority$set(MemorySegment seg, int x) {
        constants$534.const$2.set(seg, x);
    }
    public static int CallbackPriority$get(MemorySegment seg, long index) {
        return (int)constants$534.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void CallbackPriority$set(MemorySegment seg, long index, int x) {
        constants$534.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Size$VH() {
        return constants$534.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Size;
     * }
     */
    public static int Size$get(MemorySegment seg) {
        return (int)constants$534.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Size;
     * }
     */
    public static void Size$set(MemorySegment seg, int x) {
        constants$534.const$3.set(seg, x);
    }
    public static int Size$get(MemorySegment seg, long index) {
        return (int)constants$534.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void Size$set(MemorySegment seg, long index, int x) {
        constants$534.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



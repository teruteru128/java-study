// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _STORAGE_GET_BC_PROPERTIES_OUTPUT {
 *     DWORD MaximumRequestsPerPeriod;
 *     DWORD MinimumPeriod;
 *     DWORDLONG MaximumRequestSize;
 *     DWORD EstimatedTimePerRequest;
 *     DWORD NumOutStandingRequests;
 *     DWORDLONG RequestSize;
 * };
 * }
 */
public class _STORAGE_GET_BC_PROPERTIES_OUTPUT {

    public static MemoryLayout $LAYOUT() {
        return constants$2465.const$0;
    }
    public static VarHandle MaximumRequestsPerPeriod$VH() {
        return constants$2465.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD MaximumRequestsPerPeriod;
     * }
     */
    public static int MaximumRequestsPerPeriod$get(MemorySegment seg) {
        return (int)constants$2465.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD MaximumRequestsPerPeriod;
     * }
     */
    public static void MaximumRequestsPerPeriod$set(MemorySegment seg, int x) {
        constants$2465.const$1.set(seg, x);
    }
    public static int MaximumRequestsPerPeriod$get(MemorySegment seg, long index) {
        return (int)constants$2465.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void MaximumRequestsPerPeriod$set(MemorySegment seg, long index, int x) {
        constants$2465.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MinimumPeriod$VH() {
        return constants$2465.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD MinimumPeriod;
     * }
     */
    public static int MinimumPeriod$get(MemorySegment seg) {
        return (int)constants$2465.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD MinimumPeriod;
     * }
     */
    public static void MinimumPeriod$set(MemorySegment seg, int x) {
        constants$2465.const$2.set(seg, x);
    }
    public static int MinimumPeriod$get(MemorySegment seg, long index) {
        return (int)constants$2465.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void MinimumPeriod$set(MemorySegment seg, long index, int x) {
        constants$2465.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MaximumRequestSize$VH() {
        return constants$2465.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORDLONG MaximumRequestSize;
     * }
     */
    public static long MaximumRequestSize$get(MemorySegment seg) {
        return (long)constants$2465.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORDLONG MaximumRequestSize;
     * }
     */
    public static void MaximumRequestSize$set(MemorySegment seg, long x) {
        constants$2465.const$3.set(seg, x);
    }
    public static long MaximumRequestSize$get(MemorySegment seg, long index) {
        return (long)constants$2465.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void MaximumRequestSize$set(MemorySegment seg, long index, long x) {
        constants$2465.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle EstimatedTimePerRequest$VH() {
        return constants$2465.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD EstimatedTimePerRequest;
     * }
     */
    public static int EstimatedTimePerRequest$get(MemorySegment seg) {
        return (int)constants$2465.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD EstimatedTimePerRequest;
     * }
     */
    public static void EstimatedTimePerRequest$set(MemorySegment seg, int x) {
        constants$2465.const$4.set(seg, x);
    }
    public static int EstimatedTimePerRequest$get(MemorySegment seg, long index) {
        return (int)constants$2465.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void EstimatedTimePerRequest$set(MemorySegment seg, long index, int x) {
        constants$2465.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle NumOutStandingRequests$VH() {
        return constants$2465.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD NumOutStandingRequests;
     * }
     */
    public static int NumOutStandingRequests$get(MemorySegment seg) {
        return (int)constants$2465.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD NumOutStandingRequests;
     * }
     */
    public static void NumOutStandingRequests$set(MemorySegment seg, int x) {
        constants$2465.const$5.set(seg, x);
    }
    public static int NumOutStandingRequests$get(MemorySegment seg, long index) {
        return (int)constants$2465.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void NumOutStandingRequests$set(MemorySegment seg, long index, int x) {
        constants$2465.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle RequestSize$VH() {
        return constants$2466.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORDLONG RequestSize;
     * }
     */
    public static long RequestSize$get(MemorySegment seg) {
        return (long)constants$2466.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORDLONG RequestSize;
     * }
     */
    public static void RequestSize$set(MemorySegment seg, long x) {
        constants$2466.const$0.set(seg, x);
    }
    public static long RequestSize$get(MemorySegment seg, long index) {
        return (long)constants$2466.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void RequestSize$set(MemorySegment seg, long index, long x) {
        constants$2466.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



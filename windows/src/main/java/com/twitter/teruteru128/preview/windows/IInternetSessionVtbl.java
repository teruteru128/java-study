// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IInternetSessionVtbl {
 *     HRESULT (*QueryInterface)(IInternetSession*,const IID*,void**);
 *     ULONG (*AddRef)(IInternetSession*);
 *     ULONG (*Release)(IInternetSession*);
 *     HRESULT (*RegisterNameSpace)(IInternetSession*,IClassFactory*,const IID*,LPCWSTR,ULONG,const LPCWSTR*,DWORD);
 *     HRESULT (*UnregisterNameSpace)(IInternetSession*,IClassFactory*,LPCWSTR);
 *     HRESULT (*RegisterMimeFilter)(IInternetSession*,IClassFactory*,const IID*,LPCWSTR);
 *     HRESULT (*UnregisterMimeFilter)(IInternetSession*,IClassFactory*,LPCWSTR);
 *     HRESULT (*CreateBinding)(IInternetSession*,LPBC,LPCWSTR,IUnknown*,IUnknown**,IInternetProtocol**,DWORD);
 *     HRESULT (*SetSessionOption)(IInternetSession*,DWORD,LPVOID,DWORD,DWORD);
 *     HRESULT (*GetSessionOption)(IInternetSession*,DWORD,LPVOID,DWORD*,DWORD);
 * };
 * }
 */
public class IInternetSessionVtbl {

    public static MemoryLayout $LAYOUT() {
        return constants$4224.const$4;
    }
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IInternetSession*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4224.const$5, fi, constants$37.const$3, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle QueryInterface$VH() {
        return constants$4225.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IInternetSession*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4225.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IInternetSession*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        constants$4225.const$0.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4225.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4225.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, Arena scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*AddRef)(IInternetSession*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4225.const$1, fi, constants$18.const$5, scope);
        }
        static AddRef ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle AddRef$VH() {
        return constants$4225.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IInternetSession*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4225.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IInternetSession*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        constants$4225.const$2.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4225.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4225.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, Arena scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*Release)(IInternetSession*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4225.const$3, fi, constants$18.const$5, scope);
        }
        static Release ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Release$VH() {
        return constants$4225.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IInternetSession*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4225.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IInternetSession*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        constants$4225.const$4.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4225.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4225.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, Arena scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*RegisterNameSpace)(IInternetSession*,IClassFactory*,const IID*,LPCWSTR,ULONG,const LPCWSTR*,DWORD);
     * }
     */
    public interface RegisterNameSpace {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, int _x4, java.lang.foreign.MemorySegment _x5, int _x6);
        static MemorySegment allocate(RegisterNameSpace fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4225.const$5, fi, constants$1960.const$0, scope);
        }
        static RegisterNameSpace ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, int __x4, java.lang.foreign.MemorySegment __x5, int __x6) -> {
                try {
                    return (int)constants$3011.const$3.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle RegisterNameSpace$VH() {
        return constants$4226.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*RegisterNameSpace)(IInternetSession*,IClassFactory*,const IID*,LPCWSTR,ULONG,const LPCWSTR*,DWORD);
     * }
     */
    public static MemorySegment RegisterNameSpace$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4226.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*RegisterNameSpace)(IInternetSession*,IClassFactory*,const IID*,LPCWSTR,ULONG,const LPCWSTR*,DWORD);
     * }
     */
    public static void RegisterNameSpace$set(MemorySegment seg, MemorySegment x) {
        constants$4226.const$0.set(seg, x);
    }
    public static MemorySegment RegisterNameSpace$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4226.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void RegisterNameSpace$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4226.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static RegisterNameSpace RegisterNameSpace(MemorySegment segment, Arena scope) {
        return RegisterNameSpace.ofAddress(RegisterNameSpace$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*UnregisterNameSpace)(IInternetSession*,IClassFactory*,LPCWSTR);
     * }
     */
    public interface UnregisterNameSpace {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(UnregisterNameSpace fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4226.const$1, fi, constants$37.const$3, scope);
        }
        static UnregisterNameSpace ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle UnregisterNameSpace$VH() {
        return constants$4226.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*UnregisterNameSpace)(IInternetSession*,IClassFactory*,LPCWSTR);
     * }
     */
    public static MemorySegment UnregisterNameSpace$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4226.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*UnregisterNameSpace)(IInternetSession*,IClassFactory*,LPCWSTR);
     * }
     */
    public static void UnregisterNameSpace$set(MemorySegment seg, MemorySegment x) {
        constants$4226.const$2.set(seg, x);
    }
    public static MemorySegment UnregisterNameSpace$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4226.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void UnregisterNameSpace$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4226.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static UnregisterNameSpace UnregisterNameSpace(MemorySegment segment, Arena scope) {
        return UnregisterNameSpace.ofAddress(UnregisterNameSpace$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*RegisterMimeFilter)(IInternetSession*,IClassFactory*,const IID*,LPCWSTR);
     * }
     */
    public interface RegisterMimeFilter {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(RegisterMimeFilter fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4226.const$3, fi, constants$1.const$3, scope);
        }
        static RegisterMimeFilter ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)constants$55.const$1.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle RegisterMimeFilter$VH() {
        return constants$4226.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*RegisterMimeFilter)(IInternetSession*,IClassFactory*,const IID*,LPCWSTR);
     * }
     */
    public static MemorySegment RegisterMimeFilter$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4226.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*RegisterMimeFilter)(IInternetSession*,IClassFactory*,const IID*,LPCWSTR);
     * }
     */
    public static void RegisterMimeFilter$set(MemorySegment seg, MemorySegment x) {
        constants$4226.const$4.set(seg, x);
    }
    public static MemorySegment RegisterMimeFilter$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4226.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void RegisterMimeFilter$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4226.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static RegisterMimeFilter RegisterMimeFilter(MemorySegment segment, Arena scope) {
        return RegisterMimeFilter.ofAddress(RegisterMimeFilter$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*UnregisterMimeFilter)(IInternetSession*,IClassFactory*,LPCWSTR);
     * }
     */
    public interface UnregisterMimeFilter {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(UnregisterMimeFilter fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4226.const$5, fi, constants$37.const$3, scope);
        }
        static UnregisterMimeFilter ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle UnregisterMimeFilter$VH() {
        return constants$4227.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*UnregisterMimeFilter)(IInternetSession*,IClassFactory*,LPCWSTR);
     * }
     */
    public static MemorySegment UnregisterMimeFilter$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4227.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*UnregisterMimeFilter)(IInternetSession*,IClassFactory*,LPCWSTR);
     * }
     */
    public static void UnregisterMimeFilter$set(MemorySegment seg, MemorySegment x) {
        constants$4227.const$0.set(seg, x);
    }
    public static MemorySegment UnregisterMimeFilter$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4227.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void UnregisterMimeFilter$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4227.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static UnregisterMimeFilter UnregisterMimeFilter(MemorySegment segment, Arena scope) {
        return UnregisterMimeFilter.ofAddress(UnregisterMimeFilter$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*CreateBinding)(IInternetSession*,LPBC,LPCWSTR,IUnknown*,IUnknown**,IInternetProtocol**,DWORD);
     * }
     */
    public interface CreateBinding {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5, int _x6);
        static MemorySegment allocate(CreateBinding fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4227.const$1, fi, constants$610.const$0, scope);
        }
        static CreateBinding ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5, int __x6) -> {
                try {
                    return (int)constants$4227.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CreateBinding$VH() {
        return constants$4227.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*CreateBinding)(IInternetSession*,LPBC,LPCWSTR,IUnknown*,IUnknown**,IInternetProtocol**,DWORD);
     * }
     */
    public static MemorySegment CreateBinding$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4227.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*CreateBinding)(IInternetSession*,LPBC,LPCWSTR,IUnknown*,IUnknown**,IInternetProtocol**,DWORD);
     * }
     */
    public static void CreateBinding$set(MemorySegment seg, MemorySegment x) {
        constants$4227.const$3.set(seg, x);
    }
    public static MemorySegment CreateBinding$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4227.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void CreateBinding$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4227.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static CreateBinding CreateBinding(MemorySegment segment, Arena scope) {
        return CreateBinding.ofAddress(CreateBinding$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetSessionOption)(IInternetSession*,DWORD,LPVOID,DWORD,DWORD);
     * }
     */
    public interface SetSessionOption {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, int _x3, int _x4);
        static MemorySegment allocate(SetSessionOption fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4227.const$4, fi, constants$1258.const$3, scope);
        }
        static SetSessionOption ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, int __x3, int __x4) -> {
                try {
                    return (int)constants$4227.const$5.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetSessionOption$VH() {
        return constants$4228.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetSessionOption)(IInternetSession*,DWORD,LPVOID,DWORD,DWORD);
     * }
     */
    public static MemorySegment SetSessionOption$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4228.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetSessionOption)(IInternetSession*,DWORD,LPVOID,DWORD,DWORD);
     * }
     */
    public static void SetSessionOption$set(MemorySegment seg, MemorySegment x) {
        constants$4228.const$0.set(seg, x);
    }
    public static MemorySegment SetSessionOption$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4228.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void SetSessionOption$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4228.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetSessionOption SetSessionOption(MemorySegment segment, Arena scope) {
        return SetSessionOption.ofAddress(SetSessionOption$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetSessionOption)(IInternetSession*,DWORD,LPVOID,DWORD*,DWORD);
     * }
     */
    public interface GetSessionOption {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, int _x4);
        static MemorySegment allocate(GetSessionOption fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4228.const$1, fi, constants$657.const$2, scope);
        }
        static GetSessionOption ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, int __x4) -> {
                try {
                    return (int)constants$3607.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetSessionOption$VH() {
        return constants$4228.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetSessionOption)(IInternetSession*,DWORD,LPVOID,DWORD*,DWORD);
     * }
     */
    public static MemorySegment GetSessionOption$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4228.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetSessionOption)(IInternetSession*,DWORD,LPVOID,DWORD*,DWORD);
     * }
     */
    public static void GetSessionOption$set(MemorySegment seg, MemorySegment x) {
        constants$4228.const$2.set(seg, x);
    }
    public static MemorySegment GetSessionOption$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4228.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void GetSessionOption$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4228.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetSessionOption GetSessionOption(MemorySegment segment, Arena scope) {
        return GetSessionOption.ofAddress(GetSessionOption$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



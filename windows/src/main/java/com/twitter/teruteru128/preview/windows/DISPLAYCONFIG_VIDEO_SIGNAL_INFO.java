// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct DISPLAYCONFIG_VIDEO_SIGNAL_INFO {
 *     UINT64 pixelRate;
 *     DISPLAYCONFIG_RATIONAL hSyncFreq;
 *     DISPLAYCONFIG_RATIONAL vSyncFreq;
 *     DISPLAYCONFIG_2DREGION activeSize;
 *     DISPLAYCONFIG_2DREGION totalSize;
 *     union {
 *         struct  AdditionalSignalInfo;
 *         UINT32 videoStandard;
 *     };
 *     DISPLAYCONFIG_SCANLINE_ORDERING scanLineOrdering;
 * };
 * }
 */
public class DISPLAYCONFIG_VIDEO_SIGNAL_INFO {

    public static MemoryLayout $LAYOUT() {
        return constants$958.const$3;
    }
    public static VarHandle pixelRate$VH() {
        return constants$958.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * UINT64 pixelRate;
     * }
     */
    public static long pixelRate$get(MemorySegment seg) {
        return (long)constants$958.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * UINT64 pixelRate;
     * }
     */
    public static void pixelRate$set(MemorySegment seg, long x) {
        constants$958.const$4.set(seg, x);
    }
    public static long pixelRate$get(MemorySegment seg, long index) {
        return (long)constants$958.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void pixelRate$set(MemorySegment seg, long index, long x) {
        constants$958.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment hSyncFreq$slice(MemorySegment seg) {
        return seg.asSlice(8, 8);
    }
    public static MemorySegment vSyncFreq$slice(MemorySegment seg) {
        return seg.asSlice(16, 8);
    }
    public static MemorySegment activeSize$slice(MemorySegment seg) {
        return seg.asSlice(24, 8);
    }
    public static MemorySegment totalSize$slice(MemorySegment seg) {
        return seg.asSlice(32, 8);
    }
    /**
     * {@snippet :
     * struct {
     *          *     UINT32 videoStandard;
     *     UINT32 vSyncFreqDivider;
     *     UINT32 reserved;
     * };
     * }
     */
    public static final class AdditionalSignalInfo {

        // Suppresses default constructor, ensuring non-instantiability.
        private AdditionalSignalInfo() {}
        public static MemoryLayout $LAYOUT() {
            return constants$128.const$3;
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment AdditionalSignalInfo$slice(MemorySegment seg) {
        return seg.asSlice(40, 4);
    }
    public static VarHandle videoStandard$VH() {
        return constants$958.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * UINT32 videoStandard;
     * }
     */
    public static int videoStandard$get(MemorySegment seg) {
        return (int)constants$958.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * UINT32 videoStandard;
     * }
     */
    public static void videoStandard$set(MemorySegment seg, int x) {
        constants$958.const$5.set(seg, x);
    }
    public static int videoStandard$get(MemorySegment seg, long index) {
        return (int)constants$958.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void videoStandard$set(MemorySegment seg, long index, int x) {
        constants$958.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle scanLineOrdering$VH() {
        return constants$959.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DISPLAYCONFIG_SCANLINE_ORDERING scanLineOrdering;
     * }
     */
    public static int scanLineOrdering$get(MemorySegment seg) {
        return (int)constants$959.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DISPLAYCONFIG_SCANLINE_ORDERING scanLineOrdering;
     * }
     */
    public static void scanLineOrdering$set(MemorySegment seg, int x) {
        constants$959.const$0.set(seg, x);
    }
    public static int scanLineOrdering$get(MemorySegment seg, long index) {
        return (int)constants$959.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void scanLineOrdering$set(MemorySegment seg, long index, int x) {
        constants$959.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



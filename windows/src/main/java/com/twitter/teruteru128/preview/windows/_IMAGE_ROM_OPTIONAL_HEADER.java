// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _IMAGE_ROM_OPTIONAL_HEADER {
 *     WORD Magic;
 *     BYTE MajorLinkerVersion;
 *     BYTE MinorLinkerVersion;
 *     DWORD SizeOfCode;
 *     DWORD SizeOfInitializedData;
 *     DWORD SizeOfUninitializedData;
 *     DWORD AddressOfEntryPoint;
 *     DWORD BaseOfCode;
 *     DWORD BaseOfData;
 *     DWORD BaseOfBss;
 *     DWORD GprMask;
 *     DWORD CprMask[4];
 *     DWORD GpValue;
 * };
 * }
 */
public class _IMAGE_ROM_OPTIONAL_HEADER {

    public static MemoryLayout $LAYOUT() {
        return constants$374.const$1;
    }
    public static VarHandle Magic$VH() {
        return constants$374.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD Magic;
     * }
     */
    public static short Magic$get(MemorySegment seg) {
        return (short)constants$374.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD Magic;
     * }
     */
    public static void Magic$set(MemorySegment seg, short x) {
        constants$374.const$2.set(seg, x);
    }
    public static short Magic$get(MemorySegment seg, long index) {
        return (short)constants$374.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void Magic$set(MemorySegment seg, long index, short x) {
        constants$374.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MajorLinkerVersion$VH() {
        return constants$374.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE MajorLinkerVersion;
     * }
     */
    public static byte MajorLinkerVersion$get(MemorySegment seg) {
        return (byte)constants$374.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE MajorLinkerVersion;
     * }
     */
    public static void MajorLinkerVersion$set(MemorySegment seg, byte x) {
        constants$374.const$3.set(seg, x);
    }
    public static byte MajorLinkerVersion$get(MemorySegment seg, long index) {
        return (byte)constants$374.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void MajorLinkerVersion$set(MemorySegment seg, long index, byte x) {
        constants$374.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MinorLinkerVersion$VH() {
        return constants$374.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE MinorLinkerVersion;
     * }
     */
    public static byte MinorLinkerVersion$get(MemorySegment seg) {
        return (byte)constants$374.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE MinorLinkerVersion;
     * }
     */
    public static void MinorLinkerVersion$set(MemorySegment seg, byte x) {
        constants$374.const$4.set(seg, x);
    }
    public static byte MinorLinkerVersion$get(MemorySegment seg, long index) {
        return (byte)constants$374.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void MinorLinkerVersion$set(MemorySegment seg, long index, byte x) {
        constants$374.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle SizeOfCode$VH() {
        return constants$374.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD SizeOfCode;
     * }
     */
    public static int SizeOfCode$get(MemorySegment seg) {
        return (int)constants$374.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD SizeOfCode;
     * }
     */
    public static void SizeOfCode$set(MemorySegment seg, int x) {
        constants$374.const$5.set(seg, x);
    }
    public static int SizeOfCode$get(MemorySegment seg, long index) {
        return (int)constants$374.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void SizeOfCode$set(MemorySegment seg, long index, int x) {
        constants$374.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle SizeOfInitializedData$VH() {
        return constants$375.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD SizeOfInitializedData;
     * }
     */
    public static int SizeOfInitializedData$get(MemorySegment seg) {
        return (int)constants$375.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD SizeOfInitializedData;
     * }
     */
    public static void SizeOfInitializedData$set(MemorySegment seg, int x) {
        constants$375.const$0.set(seg, x);
    }
    public static int SizeOfInitializedData$get(MemorySegment seg, long index) {
        return (int)constants$375.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void SizeOfInitializedData$set(MemorySegment seg, long index, int x) {
        constants$375.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle SizeOfUninitializedData$VH() {
        return constants$375.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD SizeOfUninitializedData;
     * }
     */
    public static int SizeOfUninitializedData$get(MemorySegment seg) {
        return (int)constants$375.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD SizeOfUninitializedData;
     * }
     */
    public static void SizeOfUninitializedData$set(MemorySegment seg, int x) {
        constants$375.const$1.set(seg, x);
    }
    public static int SizeOfUninitializedData$get(MemorySegment seg, long index) {
        return (int)constants$375.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void SizeOfUninitializedData$set(MemorySegment seg, long index, int x) {
        constants$375.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle AddressOfEntryPoint$VH() {
        return constants$375.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD AddressOfEntryPoint;
     * }
     */
    public static int AddressOfEntryPoint$get(MemorySegment seg) {
        return (int)constants$375.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD AddressOfEntryPoint;
     * }
     */
    public static void AddressOfEntryPoint$set(MemorySegment seg, int x) {
        constants$375.const$2.set(seg, x);
    }
    public static int AddressOfEntryPoint$get(MemorySegment seg, long index) {
        return (int)constants$375.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void AddressOfEntryPoint$set(MemorySegment seg, long index, int x) {
        constants$375.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle BaseOfCode$VH() {
        return constants$375.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD BaseOfCode;
     * }
     */
    public static int BaseOfCode$get(MemorySegment seg) {
        return (int)constants$375.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD BaseOfCode;
     * }
     */
    public static void BaseOfCode$set(MemorySegment seg, int x) {
        constants$375.const$3.set(seg, x);
    }
    public static int BaseOfCode$get(MemorySegment seg, long index) {
        return (int)constants$375.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void BaseOfCode$set(MemorySegment seg, long index, int x) {
        constants$375.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle BaseOfData$VH() {
        return constants$375.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD BaseOfData;
     * }
     */
    public static int BaseOfData$get(MemorySegment seg) {
        return (int)constants$375.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD BaseOfData;
     * }
     */
    public static void BaseOfData$set(MemorySegment seg, int x) {
        constants$375.const$4.set(seg, x);
    }
    public static int BaseOfData$get(MemorySegment seg, long index) {
        return (int)constants$375.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void BaseOfData$set(MemorySegment seg, long index, int x) {
        constants$375.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle BaseOfBss$VH() {
        return constants$375.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD BaseOfBss;
     * }
     */
    public static int BaseOfBss$get(MemorySegment seg) {
        return (int)constants$375.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD BaseOfBss;
     * }
     */
    public static void BaseOfBss$set(MemorySegment seg, int x) {
        constants$375.const$5.set(seg, x);
    }
    public static int BaseOfBss$get(MemorySegment seg, long index) {
        return (int)constants$375.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void BaseOfBss$set(MemorySegment seg, long index, int x) {
        constants$375.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle GprMask$VH() {
        return constants$376.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD GprMask;
     * }
     */
    public static int GprMask$get(MemorySegment seg) {
        return (int)constants$376.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD GprMask;
     * }
     */
    public static void GprMask$set(MemorySegment seg, int x) {
        constants$376.const$0.set(seg, x);
    }
    public static int GprMask$get(MemorySegment seg, long index) {
        return (int)constants$376.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void GprMask$set(MemorySegment seg, long index, int x) {
        constants$376.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment CprMask$slice(MemorySegment seg) {
        return seg.asSlice(36, 16);
    }
    public static VarHandle GpValue$VH() {
        return constants$376.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD GpValue;
     * }
     */
    public static int GpValue$get(MemorySegment seg) {
        return (int)constants$376.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD GpValue;
     * }
     */
    public static void GpValue$set(MemorySegment seg, int x) {
        constants$376.const$1.set(seg, x);
    }
    public static int GpValue$get(MemorySegment seg, long index) {
        return (int)constants$376.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void GpValue$set(MemorySegment seg, long index, int x) {
        constants$376.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



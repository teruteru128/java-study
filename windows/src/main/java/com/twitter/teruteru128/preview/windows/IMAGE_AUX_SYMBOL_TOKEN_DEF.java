// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IMAGE_AUX_SYMBOL_TOKEN_DEF {
 *     BYTE bAuxType;
 *     BYTE bReserved;
 *     DWORD SymbolTableIndex;
 *     BYTE rgbReserved[12];
 * };
 * }
 */
public class IMAGE_AUX_SYMBOL_TOKEN_DEF {

    public static MemoryLayout $LAYOUT() {
        return constants$392.const$1;
    }
    public static VarHandle bAuxType$VH() {
        return constants$392.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE bAuxType;
     * }
     */
    public static byte bAuxType$get(MemorySegment seg) {
        return (byte)constants$392.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE bAuxType;
     * }
     */
    public static void bAuxType$set(MemorySegment seg, byte x) {
        constants$392.const$2.set(seg, x);
    }
    public static byte bAuxType$get(MemorySegment seg, long index) {
        return (byte)constants$392.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void bAuxType$set(MemorySegment seg, long index, byte x) {
        constants$392.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bReserved$VH() {
        return constants$392.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE bReserved;
     * }
     */
    public static byte bReserved$get(MemorySegment seg) {
        return (byte)constants$392.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE bReserved;
     * }
     */
    public static void bReserved$set(MemorySegment seg, byte x) {
        constants$392.const$3.set(seg, x);
    }
    public static byte bReserved$get(MemorySegment seg, long index) {
        return (byte)constants$392.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void bReserved$set(MemorySegment seg, long index, byte x) {
        constants$392.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle SymbolTableIndex$VH() {
        return constants$392.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD SymbolTableIndex;
     * }
     */
    public static int SymbolTableIndex$get(MemorySegment seg) {
        return (int)constants$392.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD SymbolTableIndex;
     * }
     */
    public static void SymbolTableIndex$set(MemorySegment seg, int x) {
        constants$392.const$4.set(seg, x);
    }
    public static int SymbolTableIndex$get(MemorySegment seg, long index) {
        return (int)constants$392.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void SymbolTableIndex$set(MemorySegment seg, long index, int x) {
        constants$392.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment rgbReserved$slice(MemorySegment seg) {
        return seg.asSlice(6, 12);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * EXCEPTION_DISPOSITION (*EXCEPTION_ROUTINE)(struct _EXCEPTION_RECORD* ExceptionRecord,PVOID EstablisherFrame,struct _CONTEXT* ContextRecord,PVOID DispatcherContext);
 * }
 */
public interface EXCEPTION_ROUTINE {

    int apply(java.lang.foreign.MemorySegment ExceptionRecord, java.lang.foreign.MemorySegment EstablisherFrame, java.lang.foreign.MemorySegment ContextRecord, java.lang.foreign.MemorySegment DispatcherContext);
    static MemorySegment allocate(EXCEPTION_ROUTINE fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$55.const$0, fi, constants$1.const$3, scope);
    }
    static EXCEPTION_ROUTINE ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (java.lang.foreign.MemorySegment _ExceptionRecord, java.lang.foreign.MemorySegment _EstablisherFrame, java.lang.foreign.MemorySegment _ContextRecord, java.lang.foreign.MemorySegment _DispatcherContext) -> {
            try {
                return (int)constants$55.const$1.invokeExact(symbol, _ExceptionRecord, _EstablisherFrame, _ContextRecord, _DispatcherContext);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}



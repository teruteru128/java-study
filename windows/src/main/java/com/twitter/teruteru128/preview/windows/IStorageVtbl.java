// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IStorageVtbl {
 *     HRESULT (*QueryInterface)(IStorage*,const IID*,void**);
 *     ULONG (*AddRef)(IStorage*);
 *     ULONG (*Release)(IStorage*);
 *     HRESULT (*CreateStream)(IStorage*,const OLECHAR*,DWORD,DWORD,DWORD,IStream**);
 *     HRESULT (*OpenStream)(IStorage*,const OLECHAR*,void*,DWORD,DWORD,IStream**);
 *     HRESULT (*CreateStorage)(IStorage*,const OLECHAR*,DWORD,DWORD,DWORD,IStorage**);
 *     HRESULT (*OpenStorage)(IStorage*,const OLECHAR*,IStorage*,DWORD,SNB,DWORD,IStorage**);
 *     HRESULT (*CopyTo)(IStorage*,DWORD,const IID*,SNB,IStorage*);
 *     HRESULT (*MoveElementTo)(IStorage*,const OLECHAR*,IStorage*,const OLECHAR*,DWORD);
 *     HRESULT (*Commit)(IStorage*,DWORD);
 *     HRESULT (*Revert)(IStorage*);
 *     HRESULT (*EnumElements)(IStorage*,DWORD,void*,DWORD,IEnumSTATSTG**);
 *     HRESULT (*DestroyElement)(IStorage*,const OLECHAR*);
 *     HRESULT (*RenameElement)(IStorage*,const OLECHAR*,const OLECHAR*);
 *     HRESULT (*SetElementTimes)(IStorage*,const OLECHAR*,const FILETIME*,const FILETIME*,const FILETIME*);
 *     HRESULT (*SetClass)(IStorage*,const IID*);
 *     HRESULT (*SetStateBits)(IStorage*,DWORD,DWORD);
 *     HRESULT (*Stat)(IStorage*,STATSTG*,DWORD);
 * };
 * }
 */
public class IStorageVtbl {

    public static MemoryLayout $LAYOUT() {
        return constants$3265.const$1;
    }
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IStorage*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3265.const$2, fi, constants$37.const$3, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle QueryInterface$VH() {
        return constants$3265.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IStorage*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3265.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IStorage*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        constants$3265.const$3.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3265.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3265.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, Arena scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*AddRef)(IStorage*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3265.const$4, fi, constants$18.const$5, scope);
        }
        static AddRef ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle AddRef$VH() {
        return constants$3265.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IStorage*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3265.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IStorage*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        constants$3265.const$5.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3265.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3265.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, Arena scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*Release)(IStorage*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3266.const$0, fi, constants$18.const$5, scope);
        }
        static Release ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Release$VH() {
        return constants$3266.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IStorage*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3266.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IStorage*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        constants$3266.const$1.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3266.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3266.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, Arena scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*CreateStream)(IStorage*,const OLECHAR*,DWORD,DWORD,DWORD,IStream**);
     * }
     */
    public interface CreateStream {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3, int _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(CreateStream fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3266.const$3, fi, constants$3266.const$2, scope);
        }
        static CreateStream ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3, int __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    return (int)constants$3266.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CreateStream$VH() {
        return constants$3266.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*CreateStream)(IStorage*,const OLECHAR*,DWORD,DWORD,DWORD,IStream**);
     * }
     */
    public static MemorySegment CreateStream$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3266.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*CreateStream)(IStorage*,const OLECHAR*,DWORD,DWORD,DWORD,IStream**);
     * }
     */
    public static void CreateStream$set(MemorySegment seg, MemorySegment x) {
        constants$3266.const$5.set(seg, x);
    }
    public static MemorySegment CreateStream$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3266.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void CreateStream$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3266.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static CreateStream CreateStream(MemorySegment segment, Arena scope) {
        return CreateStream.ofAddress(CreateStream$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*OpenStream)(IStorage*,const OLECHAR*,void*,DWORD,DWORD,IStream**);
     * }
     */
    public interface OpenStream {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3, int _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(OpenStream fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3267.const$0, fi, constants$836.const$2, scope);
        }
        static OpenStream ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3, int __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    return (int)constants$3267.const$1.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle OpenStream$VH() {
        return constants$3267.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*OpenStream)(IStorage*,const OLECHAR*,void*,DWORD,DWORD,IStream**);
     * }
     */
    public static MemorySegment OpenStream$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3267.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*OpenStream)(IStorage*,const OLECHAR*,void*,DWORD,DWORD,IStream**);
     * }
     */
    public static void OpenStream$set(MemorySegment seg, MemorySegment x) {
        constants$3267.const$2.set(seg, x);
    }
    public static MemorySegment OpenStream$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3267.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void OpenStream$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3267.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static OpenStream OpenStream(MemorySegment segment, Arena scope) {
        return OpenStream.ofAddress(OpenStream$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*CreateStorage)(IStorage*,const OLECHAR*,DWORD,DWORD,DWORD,IStorage**);
     * }
     */
    public interface CreateStorage {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3, int _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(CreateStorage fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3267.const$3, fi, constants$3266.const$2, scope);
        }
        static CreateStorage ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3, int __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    return (int)constants$3266.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CreateStorage$VH() {
        return constants$3267.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*CreateStorage)(IStorage*,const OLECHAR*,DWORD,DWORD,DWORD,IStorage**);
     * }
     */
    public static MemorySegment CreateStorage$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3267.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*CreateStorage)(IStorage*,const OLECHAR*,DWORD,DWORD,DWORD,IStorage**);
     * }
     */
    public static void CreateStorage$set(MemorySegment seg, MemorySegment x) {
        constants$3267.const$4.set(seg, x);
    }
    public static MemorySegment CreateStorage$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3267.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void CreateStorage$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3267.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static CreateStorage CreateStorage(MemorySegment segment, Arena scope) {
        return CreateStorage.ofAddress(CreateStorage$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*OpenStorage)(IStorage*,const OLECHAR*,IStorage*,DWORD,SNB,DWORD,IStorage**);
     * }
     */
    public interface OpenStorage {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3, java.lang.foreign.MemorySegment _x4, int _x5, java.lang.foreign.MemorySegment _x6);
        static MemorySegment allocate(OpenStorage fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3267.const$5, fi, constants$1499.const$2, scope);
        }
        static OpenStorage ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3, java.lang.foreign.MemorySegment __x4, int __x5, java.lang.foreign.MemorySegment __x6) -> {
                try {
                    return (int)constants$3010.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle OpenStorage$VH() {
        return constants$3268.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*OpenStorage)(IStorage*,const OLECHAR*,IStorage*,DWORD,SNB,DWORD,IStorage**);
     * }
     */
    public static MemorySegment OpenStorage$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3268.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*OpenStorage)(IStorage*,const OLECHAR*,IStorage*,DWORD,SNB,DWORD,IStorage**);
     * }
     */
    public static void OpenStorage$set(MemorySegment seg, MemorySegment x) {
        constants$3268.const$0.set(seg, x);
    }
    public static MemorySegment OpenStorage$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3268.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void OpenStorage$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3268.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static OpenStorage OpenStorage(MemorySegment segment, Arena scope) {
        return OpenStorage.ofAddress(OpenStorage$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*CopyTo)(IStorage*,DWORD,const IID*,SNB,IStorage*);
     * }
     */
    public interface CopyTo {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(CopyTo fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3268.const$1, fi, constants$775.const$0, scope);
        }
        static CopyTo ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)constants$2151.const$3.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CopyTo$VH() {
        return constants$3268.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*CopyTo)(IStorage*,DWORD,const IID*,SNB,IStorage*);
     * }
     */
    public static MemorySegment CopyTo$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3268.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*CopyTo)(IStorage*,DWORD,const IID*,SNB,IStorage*);
     * }
     */
    public static void CopyTo$set(MemorySegment seg, MemorySegment x) {
        constants$3268.const$2.set(seg, x);
    }
    public static MemorySegment CopyTo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3268.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void CopyTo$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3268.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static CopyTo CopyTo(MemorySegment segment, Arena scope) {
        return CopyTo.ofAddress(CopyTo$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*MoveElementTo)(IStorage*,const OLECHAR*,IStorage*,const OLECHAR*,DWORD);
     * }
     */
    public interface MoveElementTo {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, int _x4);
        static MemorySegment allocate(MoveElementTo fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3268.const$3, fi, constants$616.const$0, scope);
        }
        static MoveElementTo ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, int __x4) -> {
                try {
                    return (int)constants$3268.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle MoveElementTo$VH() {
        return constants$3268.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*MoveElementTo)(IStorage*,const OLECHAR*,IStorage*,const OLECHAR*,DWORD);
     * }
     */
    public static MemorySegment MoveElementTo$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3268.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*MoveElementTo)(IStorage*,const OLECHAR*,IStorage*,const OLECHAR*,DWORD);
     * }
     */
    public static void MoveElementTo$set(MemorySegment seg, MemorySegment x) {
        constants$3268.const$5.set(seg, x);
    }
    public static MemorySegment MoveElementTo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3268.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void MoveElementTo$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3268.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static MoveElementTo MoveElementTo(MemorySegment segment, Arena scope) {
        return MoveElementTo.ofAddress(MoveElementTo$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*Commit)(IStorage*,DWORD);
     * }
     */
    public interface Commit {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(Commit fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3269.const$0, fi, constants$65.const$2, scope);
        }
        static Commit ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)constants$800.const$4.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Commit$VH() {
        return constants$3269.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Commit)(IStorage*,DWORD);
     * }
     */
    public static MemorySegment Commit$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3269.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Commit)(IStorage*,DWORD);
     * }
     */
    public static void Commit$set(MemorySegment seg, MemorySegment x) {
        constants$3269.const$1.set(seg, x);
    }
    public static MemorySegment Commit$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3269.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void Commit$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3269.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static Commit Commit(MemorySegment segment, Arena scope) {
        return Commit.ofAddress(Commit$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*Revert)(IStorage*);
     * }
     */
    public interface Revert {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Revert fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3269.const$2, fi, constants$18.const$5, scope);
        }
        static Revert ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Revert$VH() {
        return constants$3269.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Revert)(IStorage*);
     * }
     */
    public static MemorySegment Revert$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3269.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Revert)(IStorage*);
     * }
     */
    public static void Revert$set(MemorySegment seg, MemorySegment x) {
        constants$3269.const$3.set(seg, x);
    }
    public static MemorySegment Revert$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3269.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void Revert$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3269.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static Revert Revert(MemorySegment segment, Arena scope) {
        return Revert.ofAddress(Revert$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*EnumElements)(IStorage*,DWORD,void*,DWORD,IEnumSTATSTG**);
     * }
     */
    public interface EnumElements {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, int _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(EnumElements fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3269.const$4, fi, constants$703.const$2, scope);
        }
        static EnumElements ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, int __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)constants$3269.const$5.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle EnumElements$VH() {
        return constants$3270.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*EnumElements)(IStorage*,DWORD,void*,DWORD,IEnumSTATSTG**);
     * }
     */
    public static MemorySegment EnumElements$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3270.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*EnumElements)(IStorage*,DWORD,void*,DWORD,IEnumSTATSTG**);
     * }
     */
    public static void EnumElements$set(MemorySegment seg, MemorySegment x) {
        constants$3270.const$0.set(seg, x);
    }
    public static MemorySegment EnumElements$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3270.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void EnumElements$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3270.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static EnumElements EnumElements(MemorySegment segment, Arena scope) {
        return EnumElements.ofAddress(EnumElements$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*DestroyElement)(IStorage*,const OLECHAR*);
     * }
     */
    public interface DestroyElement {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(DestroyElement fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3270.const$1, fi, constants$34.const$0, scope);
        }
        static DestroyElement ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle DestroyElement$VH() {
        return constants$3270.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*DestroyElement)(IStorage*,const OLECHAR*);
     * }
     */
    public static MemorySegment DestroyElement$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3270.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*DestroyElement)(IStorage*,const OLECHAR*);
     * }
     */
    public static void DestroyElement$set(MemorySegment seg, MemorySegment x) {
        constants$3270.const$2.set(seg, x);
    }
    public static MemorySegment DestroyElement$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3270.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void DestroyElement$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3270.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static DestroyElement DestroyElement(MemorySegment segment, Arena scope) {
        return DestroyElement.ofAddress(DestroyElement$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*RenameElement)(IStorage*,const OLECHAR*,const OLECHAR*);
     * }
     */
    public interface RenameElement {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(RenameElement fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3270.const$3, fi, constants$37.const$3, scope);
        }
        static RenameElement ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle RenameElement$VH() {
        return constants$3270.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*RenameElement)(IStorage*,const OLECHAR*,const OLECHAR*);
     * }
     */
    public static MemorySegment RenameElement$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3270.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*RenameElement)(IStorage*,const OLECHAR*,const OLECHAR*);
     * }
     */
    public static void RenameElement$set(MemorySegment seg, MemorySegment x) {
        constants$3270.const$4.set(seg, x);
    }
    public static MemorySegment RenameElement$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3270.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void RenameElement$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3270.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static RenameElement RenameElement(MemorySegment segment, Arena scope) {
        return RenameElement.ofAddress(RenameElement$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetElementTimes)(IStorage*,const OLECHAR*,const FILETIME*,const FILETIME*,const FILETIME*);
     * }
     */
    public interface SetElementTimes {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(SetElementTimes fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3270.const$5, fi, constants$577.const$5, scope);
        }
        static SetElementTimes ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)constants$1781.const$5.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetElementTimes$VH() {
        return constants$3271.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetElementTimes)(IStorage*,const OLECHAR*,const FILETIME*,const FILETIME*,const FILETIME*);
     * }
     */
    public static MemorySegment SetElementTimes$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3271.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetElementTimes)(IStorage*,const OLECHAR*,const FILETIME*,const FILETIME*,const FILETIME*);
     * }
     */
    public static void SetElementTimes$set(MemorySegment seg, MemorySegment x) {
        constants$3271.const$0.set(seg, x);
    }
    public static MemorySegment SetElementTimes$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3271.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void SetElementTimes$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3271.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetElementTimes SetElementTimes(MemorySegment segment, Arena scope) {
        return SetElementTimes.ofAddress(SetElementTimes$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetClass)(IStorage*,const IID*);
     * }
     */
    public interface SetClass {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetClass fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3271.const$1, fi, constants$34.const$0, scope);
        }
        static SetClass ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetClass$VH() {
        return constants$3271.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetClass)(IStorage*,const IID*);
     * }
     */
    public static MemorySegment SetClass$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3271.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetClass)(IStorage*,const IID*);
     * }
     */
    public static void SetClass$set(MemorySegment seg, MemorySegment x) {
        constants$3271.const$2.set(seg, x);
    }
    public static MemorySegment SetClass$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3271.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void SetClass$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3271.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetClass SetClass(MemorySegment segment, Arena scope) {
        return SetClass.ofAddress(SetClass$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetStateBits)(IStorage*,DWORD,DWORD);
     * }
     */
    public interface SetStateBits {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2);
        static MemorySegment allocate(SetStateBits fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3271.const$3, fi, constants$67.const$1, scope);
        }
        static SetStateBits ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2) -> {
                try {
                    return (int)constants$3030.const$1.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetStateBits$VH() {
        return constants$3271.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetStateBits)(IStorage*,DWORD,DWORD);
     * }
     */
    public static MemorySegment SetStateBits$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3271.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetStateBits)(IStorage*,DWORD,DWORD);
     * }
     */
    public static void SetStateBits$set(MemorySegment seg, MemorySegment x) {
        constants$3271.const$4.set(seg, x);
    }
    public static MemorySegment SetStateBits$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3271.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void SetStateBits$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3271.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetStateBits SetStateBits(MemorySegment segment, Arena scope) {
        return SetStateBits.ofAddress(SetStateBits$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*Stat)(IStorage*,STATSTG*,DWORD);
     * }
     */
    public interface Stat {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2);
        static MemorySegment allocate(Stat fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3271.const$5, fi, constants$570.const$5, scope);
        }
        static Stat ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2) -> {
                try {
                    return (int)constants$779.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Stat$VH() {
        return constants$3272.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Stat)(IStorage*,STATSTG*,DWORD);
     * }
     */
    public static MemorySegment Stat$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3272.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Stat)(IStorage*,STATSTG*,DWORD);
     * }
     */
    public static void Stat$set(MemorySegment seg, MemorySegment x) {
        constants$3272.const$0.set(seg, x);
    }
    public static MemorySegment Stat$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3272.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Stat$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3272.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static Stat Stat(MemorySegment segment, Arena scope) {
        return Stat.ofAddress(Stat$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



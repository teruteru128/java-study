// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _CRYPT_PKCS8_IMPORT_PARAMS {
 *     CRYPT_DIGEST_BLOB PrivateKey;
 *     PCRYPT_RESOLVE_HCRYPTPROV_FUNC pResolvehCryptProvFunc;
 *     LPVOID pVoidResolveFunc;
 *     PCRYPT_DECRYPT_PRIVATE_KEY_FUNC pDecryptPrivateKeyFunc;
 *     LPVOID pVoidDecryptFunc;
 * };
 * }
 */
public class _CRYPT_PKCS8_IMPORT_PARAMS {

    public static MemoryLayout $LAYOUT() {
        return constants$2010.const$4;
    }
    public static MemorySegment PrivateKey$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    public static VarHandle pResolvehCryptProvFunc$VH() {
        return constants$2010.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PCRYPT_RESOLVE_HCRYPTPROV_FUNC pResolvehCryptProvFunc;
     * }
     */
    public static MemorySegment pResolvehCryptProvFunc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2010.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PCRYPT_RESOLVE_HCRYPTPROV_FUNC pResolvehCryptProvFunc;
     * }
     */
    public static void pResolvehCryptProvFunc$set(MemorySegment seg, MemorySegment x) {
        constants$2010.const$5.set(seg, x);
    }
    public static MemorySegment pResolvehCryptProvFunc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2010.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void pResolvehCryptProvFunc$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2010.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static PCRYPT_RESOLVE_HCRYPTPROV_FUNC pResolvehCryptProvFunc(MemorySegment segment, Arena scope) {
        return PCRYPT_RESOLVE_HCRYPTPROV_FUNC.ofAddress(pResolvehCryptProvFunc$get(segment), scope);
    }
    public static VarHandle pVoidResolveFunc$VH() {
        return constants$2011.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPVOID pVoidResolveFunc;
     * }
     */
    public static MemorySegment pVoidResolveFunc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2011.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPVOID pVoidResolveFunc;
     * }
     */
    public static void pVoidResolveFunc$set(MemorySegment seg, MemorySegment x) {
        constants$2011.const$0.set(seg, x);
    }
    public static MemorySegment pVoidResolveFunc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2011.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void pVoidResolveFunc$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2011.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pDecryptPrivateKeyFunc$VH() {
        return constants$2011.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PCRYPT_DECRYPT_PRIVATE_KEY_FUNC pDecryptPrivateKeyFunc;
     * }
     */
    public static MemorySegment pDecryptPrivateKeyFunc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2011.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PCRYPT_DECRYPT_PRIVATE_KEY_FUNC pDecryptPrivateKeyFunc;
     * }
     */
    public static void pDecryptPrivateKeyFunc$set(MemorySegment seg, MemorySegment x) {
        constants$2011.const$1.set(seg, x);
    }
    public static MemorySegment pDecryptPrivateKeyFunc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2011.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void pDecryptPrivateKeyFunc$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2011.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static PCRYPT_DECRYPT_PRIVATE_KEY_FUNC pDecryptPrivateKeyFunc(MemorySegment segment, Arena scope) {
        return PCRYPT_DECRYPT_PRIVATE_KEY_FUNC.ofAddress(pDecryptPrivateKeyFunc$get(segment), scope);
    }
    public static VarHandle pVoidDecryptFunc$VH() {
        return constants$2011.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPVOID pVoidDecryptFunc;
     * }
     */
    public static MemorySegment pVoidDecryptFunc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2011.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPVOID pVoidDecryptFunc;
     * }
     */
    public static void pVoidDecryptFunc$set(MemorySegment seg, MemorySegment x) {
        constants$2011.const$2.set(seg, x);
    }
    public static MemorySegment pVoidDecryptFunc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2011.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void pVoidDecryptFunc$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2011.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



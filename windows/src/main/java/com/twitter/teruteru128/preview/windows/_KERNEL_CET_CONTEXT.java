// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _KERNEL_CET_CONTEXT {
 *     DWORD64 Ssp;
 *     DWORD64 Rip;
 *     WORD SegCs;
 *     union {
 *         WORD AllFlags;
 *         struct {
 *              *             WORD UseWrss;
 *             WORD PopShadowStackOne;
 *             WORD Unused;
 *         };
 *     };
 *     WORD Fill[2];
 * };
 * }
 */
public class _KERNEL_CET_CONTEXT {

    public static MemoryLayout $LAYOUT() {
        return constants$60.const$3;
    }
    public static VarHandle Ssp$VH() {
        return constants$60.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 Ssp;
     * }
     */
    public static long Ssp$get(MemorySegment seg) {
        return (long)constants$60.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 Ssp;
     * }
     */
    public static void Ssp$set(MemorySegment seg, long x) {
        constants$60.const$4.set(seg, x);
    }
    public static long Ssp$get(MemorySegment seg, long index) {
        return (long)constants$60.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void Ssp$set(MemorySegment seg, long index, long x) {
        constants$60.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Rip$VH() {
        return constants$60.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 Rip;
     * }
     */
    public static long Rip$get(MemorySegment seg) {
        return (long)constants$60.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 Rip;
     * }
     */
    public static void Rip$set(MemorySegment seg, long x) {
        constants$60.const$5.set(seg, x);
    }
    public static long Rip$get(MemorySegment seg, long index) {
        return (long)constants$60.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void Rip$set(MemorySegment seg, long index, long x) {
        constants$60.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle SegCs$VH() {
        return constants$61.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD SegCs;
     * }
     */
    public static short SegCs$get(MemorySegment seg) {
        return (short)constants$61.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD SegCs;
     * }
     */
    public static void SegCs$set(MemorySegment seg, short x) {
        constants$61.const$0.set(seg, x);
    }
    public static short SegCs$get(MemorySegment seg, long index) {
        return (short)constants$61.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void SegCs$set(MemorySegment seg, long index, short x) {
        constants$61.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle AllFlags$VH() {
        return constants$61.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD AllFlags;
     * }
     */
    public static short AllFlags$get(MemorySegment seg) {
        return (short)constants$61.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD AllFlags;
     * }
     */
    public static void AllFlags$set(MemorySegment seg, short x) {
        constants$61.const$1.set(seg, x);
    }
    public static short AllFlags$get(MemorySegment seg, long index) {
        return (short)constants$61.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void AllFlags$set(MemorySegment seg, long index, short x) {
        constants$61.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Fill$slice(MemorySegment seg) {
        return seg.asSlice(20, 4);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



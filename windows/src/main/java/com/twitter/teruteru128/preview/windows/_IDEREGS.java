// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _IDEREGS {
 *     BYTE bFeaturesReg;
 *     BYTE bSectorCountReg;
 *     BYTE bSectorNumberReg;
 *     BYTE bCylLowReg;
 *     BYTE bCylHighReg;
 *     BYTE bDriveHeadReg;
 *     BYTE bCommandReg;
 *     BYTE bReserved;
 * };
 * }
 */
public class _IDEREGS {

    public static MemoryLayout $LAYOUT() {
        return constants$2557.const$1;
    }
    public static VarHandle bFeaturesReg$VH() {
        return constants$2557.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE bFeaturesReg;
     * }
     */
    public static byte bFeaturesReg$get(MemorySegment seg) {
        return (byte)constants$2557.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE bFeaturesReg;
     * }
     */
    public static void bFeaturesReg$set(MemorySegment seg, byte x) {
        constants$2557.const$2.set(seg, x);
    }
    public static byte bFeaturesReg$get(MemorySegment seg, long index) {
        return (byte)constants$2557.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void bFeaturesReg$set(MemorySegment seg, long index, byte x) {
        constants$2557.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bSectorCountReg$VH() {
        return constants$2557.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE bSectorCountReg;
     * }
     */
    public static byte bSectorCountReg$get(MemorySegment seg) {
        return (byte)constants$2557.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE bSectorCountReg;
     * }
     */
    public static void bSectorCountReg$set(MemorySegment seg, byte x) {
        constants$2557.const$3.set(seg, x);
    }
    public static byte bSectorCountReg$get(MemorySegment seg, long index) {
        return (byte)constants$2557.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void bSectorCountReg$set(MemorySegment seg, long index, byte x) {
        constants$2557.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bSectorNumberReg$VH() {
        return constants$2557.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE bSectorNumberReg;
     * }
     */
    public static byte bSectorNumberReg$get(MemorySegment seg) {
        return (byte)constants$2557.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE bSectorNumberReg;
     * }
     */
    public static void bSectorNumberReg$set(MemorySegment seg, byte x) {
        constants$2557.const$4.set(seg, x);
    }
    public static byte bSectorNumberReg$get(MemorySegment seg, long index) {
        return (byte)constants$2557.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void bSectorNumberReg$set(MemorySegment seg, long index, byte x) {
        constants$2557.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bCylLowReg$VH() {
        return constants$2557.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE bCylLowReg;
     * }
     */
    public static byte bCylLowReg$get(MemorySegment seg) {
        return (byte)constants$2557.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE bCylLowReg;
     * }
     */
    public static void bCylLowReg$set(MemorySegment seg, byte x) {
        constants$2557.const$5.set(seg, x);
    }
    public static byte bCylLowReg$get(MemorySegment seg, long index) {
        return (byte)constants$2557.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void bCylLowReg$set(MemorySegment seg, long index, byte x) {
        constants$2557.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bCylHighReg$VH() {
        return constants$2558.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE bCylHighReg;
     * }
     */
    public static byte bCylHighReg$get(MemorySegment seg) {
        return (byte)constants$2558.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE bCylHighReg;
     * }
     */
    public static void bCylHighReg$set(MemorySegment seg, byte x) {
        constants$2558.const$0.set(seg, x);
    }
    public static byte bCylHighReg$get(MemorySegment seg, long index) {
        return (byte)constants$2558.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void bCylHighReg$set(MemorySegment seg, long index, byte x) {
        constants$2558.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bDriveHeadReg$VH() {
        return constants$2558.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE bDriveHeadReg;
     * }
     */
    public static byte bDriveHeadReg$get(MemorySegment seg) {
        return (byte)constants$2558.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE bDriveHeadReg;
     * }
     */
    public static void bDriveHeadReg$set(MemorySegment seg, byte x) {
        constants$2558.const$1.set(seg, x);
    }
    public static byte bDriveHeadReg$get(MemorySegment seg, long index) {
        return (byte)constants$2558.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void bDriveHeadReg$set(MemorySegment seg, long index, byte x) {
        constants$2558.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bCommandReg$VH() {
        return constants$2558.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE bCommandReg;
     * }
     */
    public static byte bCommandReg$get(MemorySegment seg) {
        return (byte)constants$2558.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE bCommandReg;
     * }
     */
    public static void bCommandReg$set(MemorySegment seg, byte x) {
        constants$2558.const$2.set(seg, x);
    }
    public static byte bCommandReg$get(MemorySegment seg, long index) {
        return (byte)constants$2558.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void bCommandReg$set(MemorySegment seg, long index, byte x) {
        constants$2558.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bReserved$VH() {
        return constants$2558.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE bReserved;
     * }
     */
    public static byte bReserved$get(MemorySegment seg) {
        return (byte)constants$2558.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE bReserved;
     * }
     */
    public static void bReserved$set(MemorySegment seg, byte x) {
        constants$2558.const$3.set(seg, x);
    }
    public static byte bReserved$get(MemorySegment seg, long index) {
        return (byte)constants$2558.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void bReserved$set(MemorySegment seg, long index, byte x) {
        constants$2558.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



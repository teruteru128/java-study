// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct {
 *     WORD Revision;
 *     union  Flags;
 *     DWORD PolicyCount;
 *     PROCESSOR_IDLESTATE_INFO Policy[3];
 * };
 * }
 */
public class PROCESSOR_IDLESTATE_POLICY {

    public static MemoryLayout $LAYOUT() {
        return constants$337.const$0;
    }
    public static VarHandle Revision$VH() {
        return constants$337.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD Revision;
     * }
     */
    public static short Revision$get(MemorySegment seg) {
        return (short)constants$337.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD Revision;
     * }
     */
    public static void Revision$set(MemorySegment seg, short x) {
        constants$337.const$1.set(seg, x);
    }
    public static short Revision$get(MemorySegment seg, long index) {
        return (short)constants$337.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void Revision$set(MemorySegment seg, long index, short x) {
        constants$337.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
     * union {
     *     WORD AsWORD;
     *     struct {
     *              *         WORD AllowScaling;
     *         WORD Disabled;
     *         WORD Reserved;
     *     };
     * };
     * }
     */
    public static final class Flags {

        // Suppresses default constructor, ensuring non-instantiability.
        private Flags() {}
        public static MemoryLayout $LAYOUT() {
            return constants$337.const$2;
        }
        public static VarHandle AsWORD$VH() {
            return constants$337.const$3;
        }
        /**
         * Getter for field:
         * {@snippet :
         * WORD AsWORD;
         * }
         */
        public static short AsWORD$get(MemorySegment seg) {
            return (short)constants$337.const$3.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * WORD AsWORD;
         * }
         */
        public static void AsWORD$set(MemorySegment seg, short x) {
            constants$337.const$3.set(seg, x);
        }
        public static short AsWORD$get(MemorySegment seg, long index) {
            return (short)constants$337.const$3.get(seg.asSlice(index*sizeof()));
        }
        public static void AsWORD$set(MemorySegment seg, long index, short x) {
            constants$337.const$3.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment Flags$slice(MemorySegment seg) {
        return seg.asSlice(2, 2);
    }
    public static VarHandle PolicyCount$VH() {
        return constants$337.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD PolicyCount;
     * }
     */
    public static int PolicyCount$get(MemorySegment seg) {
        return (int)constants$337.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD PolicyCount;
     * }
     */
    public static void PolicyCount$set(MemorySegment seg, int x) {
        constants$337.const$4.set(seg, x);
    }
    public static int PolicyCount$get(MemorySegment seg, long index) {
        return (int)constants$337.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void PolicyCount$set(MemorySegment seg, long index, int x) {
        constants$337.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Policy$slice(MemorySegment seg) {
        return seg.asSlice(8, 24);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _NDR_CS_SIZE_CONVERT_ROUTINES {
 *     CS_TYPE_NET_SIZE_ROUTINE pfnNetSize;
 *     CS_TYPE_TO_NETCS_ROUTINE pfnToNetCs;
 *     CS_TYPE_LOCAL_SIZE_ROUTINE pfnLocalSize;
 *     CS_TYPE_FROM_NETCS_ROUTINE pfnFromNetCs;
 * };
 * }
 */
public class _NDR_CS_SIZE_CONVERT_ROUTINES {

    public static MemoryLayout $LAYOUT() {
        return constants$2286.const$0;
    }
    public static VarHandle pfnNetSize$VH() {
        return constants$2286.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * CS_TYPE_NET_SIZE_ROUTINE pfnNetSize;
     * }
     */
    public static MemorySegment pfnNetSize$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2286.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * CS_TYPE_NET_SIZE_ROUTINE pfnNetSize;
     * }
     */
    public static void pfnNetSize$set(MemorySegment seg, MemorySegment x) {
        constants$2286.const$1.set(seg, x);
    }
    public static MemorySegment pfnNetSize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2286.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void pfnNetSize$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2286.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static CS_TYPE_NET_SIZE_ROUTINE pfnNetSize(MemorySegment segment, Arena scope) {
        return CS_TYPE_NET_SIZE_ROUTINE.ofAddress(pfnNetSize$get(segment), scope);
    }
    public static VarHandle pfnToNetCs$VH() {
        return constants$2286.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * CS_TYPE_TO_NETCS_ROUTINE pfnToNetCs;
     * }
     */
    public static MemorySegment pfnToNetCs$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2286.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * CS_TYPE_TO_NETCS_ROUTINE pfnToNetCs;
     * }
     */
    public static void pfnToNetCs$set(MemorySegment seg, MemorySegment x) {
        constants$2286.const$2.set(seg, x);
    }
    public static MemorySegment pfnToNetCs$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2286.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void pfnToNetCs$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2286.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static CS_TYPE_TO_NETCS_ROUTINE pfnToNetCs(MemorySegment segment, Arena scope) {
        return CS_TYPE_TO_NETCS_ROUTINE.ofAddress(pfnToNetCs$get(segment), scope);
    }
    public static VarHandle pfnLocalSize$VH() {
        return constants$2286.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * CS_TYPE_LOCAL_SIZE_ROUTINE pfnLocalSize;
     * }
     */
    public static MemorySegment pfnLocalSize$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2286.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * CS_TYPE_LOCAL_SIZE_ROUTINE pfnLocalSize;
     * }
     */
    public static void pfnLocalSize$set(MemorySegment seg, MemorySegment x) {
        constants$2286.const$3.set(seg, x);
    }
    public static MemorySegment pfnLocalSize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2286.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void pfnLocalSize$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2286.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static CS_TYPE_LOCAL_SIZE_ROUTINE pfnLocalSize(MemorySegment segment, Arena scope) {
        return CS_TYPE_LOCAL_SIZE_ROUTINE.ofAddress(pfnLocalSize$get(segment), scope);
    }
    public static VarHandle pfnFromNetCs$VH() {
        return constants$2286.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * CS_TYPE_FROM_NETCS_ROUTINE pfnFromNetCs;
     * }
     */
    public static MemorySegment pfnFromNetCs$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2286.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * CS_TYPE_FROM_NETCS_ROUTINE pfnFromNetCs;
     * }
     */
    public static void pfnFromNetCs$set(MemorySegment seg, MemorySegment x) {
        constants$2286.const$4.set(seg, x);
    }
    public static MemorySegment pfnFromNetCs$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2286.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void pfnFromNetCs$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2286.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static CS_TYPE_FROM_NETCS_ROUTINE pfnFromNetCs(MemorySegment segment, Arena scope) {
        return CS_TYPE_FROM_NETCS_ROUTINE.ofAddress(pfnFromNetCs$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



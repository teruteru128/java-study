// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct __NCRYPT_SUPPORTED_LENGTHS {
 *     DWORD dwMinLength;
 *     DWORD dwMaxLength;
 *     DWORD dwIncrement;
 *     DWORD dwDefaultLength;
 * };
 * }
 */
public class __NCRYPT_SUPPORTED_LENGTHS {

    public static MemoryLayout $LAYOUT() {
        return constants$1993.const$4;
    }
    public static VarHandle dwMinLength$VH() {
        return constants$1993.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwMinLength;
     * }
     */
    public static int dwMinLength$get(MemorySegment seg) {
        return (int)constants$1993.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwMinLength;
     * }
     */
    public static void dwMinLength$set(MemorySegment seg, int x) {
        constants$1993.const$5.set(seg, x);
    }
    public static int dwMinLength$get(MemorySegment seg, long index) {
        return (int)constants$1993.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void dwMinLength$set(MemorySegment seg, long index, int x) {
        constants$1993.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwMaxLength$VH() {
        return constants$1994.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwMaxLength;
     * }
     */
    public static int dwMaxLength$get(MemorySegment seg) {
        return (int)constants$1994.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwMaxLength;
     * }
     */
    public static void dwMaxLength$set(MemorySegment seg, int x) {
        constants$1994.const$0.set(seg, x);
    }
    public static int dwMaxLength$get(MemorySegment seg, long index) {
        return (int)constants$1994.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void dwMaxLength$set(MemorySegment seg, long index, int x) {
        constants$1994.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwIncrement$VH() {
        return constants$1994.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwIncrement;
     * }
     */
    public static int dwIncrement$get(MemorySegment seg) {
        return (int)constants$1994.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwIncrement;
     * }
     */
    public static void dwIncrement$set(MemorySegment seg, int x) {
        constants$1994.const$1.set(seg, x);
    }
    public static int dwIncrement$get(MemorySegment seg, long index) {
        return (int)constants$1994.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void dwIncrement$set(MemorySegment seg, long index, int x) {
        constants$1994.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwDefaultLength$VH() {
        return constants$1994.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwDefaultLength;
     * }
     */
    public static int dwDefaultLength$get(MemorySegment seg) {
        return (int)constants$1994.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwDefaultLength;
     * }
     */
    public static void dwDefaultLength$set(MemorySegment seg, int x) {
        constants$1994.const$2.set(seg, x);
    }
    public static int dwDefaultLength$get(MemorySegment seg, long index) {
        return (int)constants$1994.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void dwDefaultLength$set(MemorySegment seg, long index, int x) {
        constants$1994.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tagPDA {
 *     DWORD lStructSize;
 *     HWND hwndOwner;
 *     HGLOBAL hDevMode;
 *     HGLOBAL hDevNames;
 *     HDC hDC;
 *     DWORD Flags;
 *     WORD nFromPage;
 *     WORD nToPage;
 *     WORD nMinPage;
 *     WORD nMaxPage;
 *     WORD nCopies;
 *     HINSTANCE hInstance;
 *     LPARAM lCustData;
 *     LPPRINTHOOKPROC lpfnPrintHook;
 *     LPSETUPHOOKPROC lpfnSetupHook;
 *     LPCSTR lpPrintTemplateName;
 *     LPCSTR lpSetupTemplateName;
 *     HGLOBAL hPrintTemplate;
 *     HGLOBAL hSetupTemplate;
 * };
 * }
 */
public class tagPDA {

    public static MemoryLayout $LAYOUT() {
        return constants$4448.const$2;
    }
    public static VarHandle lStructSize$VH() {
        return constants$4448.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD lStructSize;
     * }
     */
    public static int lStructSize$get(MemorySegment seg) {
        return (int)constants$4448.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD lStructSize;
     * }
     */
    public static void lStructSize$set(MemorySegment seg, int x) {
        constants$4448.const$3.set(seg, x);
    }
    public static int lStructSize$get(MemorySegment seg, long index) {
        return (int)constants$4448.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void lStructSize$set(MemorySegment seg, long index, int x) {
        constants$4448.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hwndOwner$VH() {
        return constants$4448.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HWND hwndOwner;
     * }
     */
    public static MemorySegment hwndOwner$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4448.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HWND hwndOwner;
     * }
     */
    public static void hwndOwner$set(MemorySegment seg, MemorySegment x) {
        constants$4448.const$4.set(seg, x);
    }
    public static MemorySegment hwndOwner$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4448.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void hwndOwner$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4448.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hDevMode$VH() {
        return constants$4448.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HGLOBAL hDevMode;
     * }
     */
    public static MemorySegment hDevMode$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4448.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HGLOBAL hDevMode;
     * }
     */
    public static void hDevMode$set(MemorySegment seg, MemorySegment x) {
        constants$4448.const$5.set(seg, x);
    }
    public static MemorySegment hDevMode$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4448.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void hDevMode$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4448.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hDevNames$VH() {
        return constants$4449.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HGLOBAL hDevNames;
     * }
     */
    public static MemorySegment hDevNames$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4449.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HGLOBAL hDevNames;
     * }
     */
    public static void hDevNames$set(MemorySegment seg, MemorySegment x) {
        constants$4449.const$0.set(seg, x);
    }
    public static MemorySegment hDevNames$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4449.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void hDevNames$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4449.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hDC$VH() {
        return constants$4449.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HDC hDC;
     * }
     */
    public static MemorySegment hDC$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4449.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HDC hDC;
     * }
     */
    public static void hDC$set(MemorySegment seg, MemorySegment x) {
        constants$4449.const$1.set(seg, x);
    }
    public static MemorySegment hDC$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4449.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void hDC$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4449.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Flags$VH() {
        return constants$4449.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Flags;
     * }
     */
    public static int Flags$get(MemorySegment seg) {
        return (int)constants$4449.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Flags;
     * }
     */
    public static void Flags$set(MemorySegment seg, int x) {
        constants$4449.const$2.set(seg, x);
    }
    public static int Flags$get(MemorySegment seg, long index) {
        return (int)constants$4449.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, int x) {
        constants$4449.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nFromPage$VH() {
        return constants$4449.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD nFromPage;
     * }
     */
    public static short nFromPage$get(MemorySegment seg) {
        return (short)constants$4449.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD nFromPage;
     * }
     */
    public static void nFromPage$set(MemorySegment seg, short x) {
        constants$4449.const$3.set(seg, x);
    }
    public static short nFromPage$get(MemorySegment seg, long index) {
        return (short)constants$4449.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void nFromPage$set(MemorySegment seg, long index, short x) {
        constants$4449.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nToPage$VH() {
        return constants$4449.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD nToPage;
     * }
     */
    public static short nToPage$get(MemorySegment seg) {
        return (short)constants$4449.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD nToPage;
     * }
     */
    public static void nToPage$set(MemorySegment seg, short x) {
        constants$4449.const$4.set(seg, x);
    }
    public static short nToPage$get(MemorySegment seg, long index) {
        return (short)constants$4449.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void nToPage$set(MemorySegment seg, long index, short x) {
        constants$4449.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nMinPage$VH() {
        return constants$4449.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD nMinPage;
     * }
     */
    public static short nMinPage$get(MemorySegment seg) {
        return (short)constants$4449.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD nMinPage;
     * }
     */
    public static void nMinPage$set(MemorySegment seg, short x) {
        constants$4449.const$5.set(seg, x);
    }
    public static short nMinPage$get(MemorySegment seg, long index) {
        return (short)constants$4449.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void nMinPage$set(MemorySegment seg, long index, short x) {
        constants$4449.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nMaxPage$VH() {
        return constants$4450.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD nMaxPage;
     * }
     */
    public static short nMaxPage$get(MemorySegment seg) {
        return (short)constants$4450.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD nMaxPage;
     * }
     */
    public static void nMaxPage$set(MemorySegment seg, short x) {
        constants$4450.const$0.set(seg, x);
    }
    public static short nMaxPage$get(MemorySegment seg, long index) {
        return (short)constants$4450.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void nMaxPage$set(MemorySegment seg, long index, short x) {
        constants$4450.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nCopies$VH() {
        return constants$4450.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD nCopies;
     * }
     */
    public static short nCopies$get(MemorySegment seg) {
        return (short)constants$4450.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD nCopies;
     * }
     */
    public static void nCopies$set(MemorySegment seg, short x) {
        constants$4450.const$1.set(seg, x);
    }
    public static short nCopies$get(MemorySegment seg, long index) {
        return (short)constants$4450.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void nCopies$set(MemorySegment seg, long index, short x) {
        constants$4450.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hInstance$VH() {
        return constants$4450.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HINSTANCE hInstance;
     * }
     */
    public static MemorySegment hInstance$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4450.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HINSTANCE hInstance;
     * }
     */
    public static void hInstance$set(MemorySegment seg, MemorySegment x) {
        constants$4450.const$2.set(seg, x);
    }
    public static MemorySegment hInstance$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4450.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void hInstance$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4450.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lCustData$VH() {
        return constants$4450.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPARAM lCustData;
     * }
     */
    public static long lCustData$get(MemorySegment seg) {
        return (long)constants$4450.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPARAM lCustData;
     * }
     */
    public static void lCustData$set(MemorySegment seg, long x) {
        constants$4450.const$3.set(seg, x);
    }
    public static long lCustData$get(MemorySegment seg, long index) {
        return (long)constants$4450.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void lCustData$set(MemorySegment seg, long index, long x) {
        constants$4450.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lpfnPrintHook$VH() {
        return constants$4450.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPPRINTHOOKPROC lpfnPrintHook;
     * }
     */
    public static MemorySegment lpfnPrintHook$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4450.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPPRINTHOOKPROC lpfnPrintHook;
     * }
     */
    public static void lpfnPrintHook$set(MemorySegment seg, MemorySegment x) {
        constants$4450.const$4.set(seg, x);
    }
    public static MemorySegment lpfnPrintHook$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4450.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void lpfnPrintHook$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4450.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static LPPRINTHOOKPROC lpfnPrintHook(MemorySegment segment, Arena scope) {
        return LPPRINTHOOKPROC.ofAddress(lpfnPrintHook$get(segment), scope);
    }
    public static VarHandle lpfnSetupHook$VH() {
        return constants$4450.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPSETUPHOOKPROC lpfnSetupHook;
     * }
     */
    public static MemorySegment lpfnSetupHook$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4450.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPSETUPHOOKPROC lpfnSetupHook;
     * }
     */
    public static void lpfnSetupHook$set(MemorySegment seg, MemorySegment x) {
        constants$4450.const$5.set(seg, x);
    }
    public static MemorySegment lpfnSetupHook$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4450.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void lpfnSetupHook$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4450.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static LPSETUPHOOKPROC lpfnSetupHook(MemorySegment segment, Arena scope) {
        return LPSETUPHOOKPROC.ofAddress(lpfnSetupHook$get(segment), scope);
    }
    public static VarHandle lpPrintTemplateName$VH() {
        return constants$4451.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPCSTR lpPrintTemplateName;
     * }
     */
    public static MemorySegment lpPrintTemplateName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4451.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPCSTR lpPrintTemplateName;
     * }
     */
    public static void lpPrintTemplateName$set(MemorySegment seg, MemorySegment x) {
        constants$4451.const$0.set(seg, x);
    }
    public static MemorySegment lpPrintTemplateName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4451.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void lpPrintTemplateName$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4451.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lpSetupTemplateName$VH() {
        return constants$4451.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPCSTR lpSetupTemplateName;
     * }
     */
    public static MemorySegment lpSetupTemplateName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4451.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPCSTR lpSetupTemplateName;
     * }
     */
    public static void lpSetupTemplateName$set(MemorySegment seg, MemorySegment x) {
        constants$4451.const$1.set(seg, x);
    }
    public static MemorySegment lpSetupTemplateName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4451.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void lpSetupTemplateName$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4451.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hPrintTemplate$VH() {
        return constants$4451.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HGLOBAL hPrintTemplate;
     * }
     */
    public static MemorySegment hPrintTemplate$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4451.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HGLOBAL hPrintTemplate;
     * }
     */
    public static void hPrintTemplate$set(MemorySegment seg, MemorySegment x) {
        constants$4451.const$2.set(seg, x);
    }
    public static MemorySegment hPrintTemplate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4451.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void hPrintTemplate$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4451.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hSetupTemplate$VH() {
        return constants$4451.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HGLOBAL hSetupTemplate;
     * }
     */
    public static MemorySegment hSetupTemplate$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4451.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HGLOBAL hSetupTemplate;
     * }
     */
    public static void hSetupTemplate$set(MemorySegment seg, MemorySegment x) {
        constants$4451.const$3.set(seg, x);
    }
    public static MemorySegment hSetupTemplate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4451.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void hSetupTemplate$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4451.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tagUPDATELAYEREDWINDOWINFO {
 *     DWORD cbSize;
 *     HDC hdcDst;
 *     const POINT* pptDst;
 *     const SIZE* psize;
 *     HDC hdcSrc;
 *     const POINT* pptSrc;
 *     COLORREF crKey;
 *     const BLENDFUNCTION* pblend;
 *     DWORD dwFlags;
 *     const RECT* prcDirty;
 * };
 * }
 */
public class tagUPDATELAYEREDWINDOWINFO {

    public static MemoryLayout $LAYOUT() {
        return constants$1199.const$2;
    }
    public static VarHandle cbSize$VH() {
        return constants$1199.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD cbSize;
     * }
     */
    public static int cbSize$get(MemorySegment seg) {
        return (int)constants$1199.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD cbSize;
     * }
     */
    public static void cbSize$set(MemorySegment seg, int x) {
        constants$1199.const$3.set(seg, x);
    }
    public static int cbSize$get(MemorySegment seg, long index) {
        return (int)constants$1199.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void cbSize$set(MemorySegment seg, long index, int x) {
        constants$1199.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hdcDst$VH() {
        return constants$1199.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HDC hdcDst;
     * }
     */
    public static MemorySegment hdcDst$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1199.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HDC hdcDst;
     * }
     */
    public static void hdcDst$set(MemorySegment seg, MemorySegment x) {
        constants$1199.const$4.set(seg, x);
    }
    public static MemorySegment hdcDst$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1199.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void hdcDst$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1199.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pptDst$VH() {
        return constants$1199.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const POINT* pptDst;
     * }
     */
    public static MemorySegment pptDst$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1199.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const POINT* pptDst;
     * }
     */
    public static void pptDst$set(MemorySegment seg, MemorySegment x) {
        constants$1199.const$5.set(seg, x);
    }
    public static MemorySegment pptDst$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1199.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void pptDst$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1199.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle psize$VH() {
        return constants$1200.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const SIZE* psize;
     * }
     */
    public static MemorySegment psize$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1200.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const SIZE* psize;
     * }
     */
    public static void psize$set(MemorySegment seg, MemorySegment x) {
        constants$1200.const$0.set(seg, x);
    }
    public static MemorySegment psize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1200.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void psize$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1200.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hdcSrc$VH() {
        return constants$1200.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HDC hdcSrc;
     * }
     */
    public static MemorySegment hdcSrc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1200.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HDC hdcSrc;
     * }
     */
    public static void hdcSrc$set(MemorySegment seg, MemorySegment x) {
        constants$1200.const$1.set(seg, x);
    }
    public static MemorySegment hdcSrc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1200.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void hdcSrc$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1200.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pptSrc$VH() {
        return constants$1200.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const POINT* pptSrc;
     * }
     */
    public static MemorySegment pptSrc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1200.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const POINT* pptSrc;
     * }
     */
    public static void pptSrc$set(MemorySegment seg, MemorySegment x) {
        constants$1200.const$2.set(seg, x);
    }
    public static MemorySegment pptSrc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1200.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void pptSrc$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1200.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle crKey$VH() {
        return constants$1200.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * COLORREF crKey;
     * }
     */
    public static int crKey$get(MemorySegment seg) {
        return (int)constants$1200.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * COLORREF crKey;
     * }
     */
    public static void crKey$set(MemorySegment seg, int x) {
        constants$1200.const$3.set(seg, x);
    }
    public static int crKey$get(MemorySegment seg, long index) {
        return (int)constants$1200.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void crKey$set(MemorySegment seg, long index, int x) {
        constants$1200.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pblend$VH() {
        return constants$1200.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const BLENDFUNCTION* pblend;
     * }
     */
    public static MemorySegment pblend$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1200.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const BLENDFUNCTION* pblend;
     * }
     */
    public static void pblend$set(MemorySegment seg, MemorySegment x) {
        constants$1200.const$4.set(seg, x);
    }
    public static MemorySegment pblend$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1200.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void pblend$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1200.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwFlags$VH() {
        return constants$1200.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwFlags;
     * }
     */
    public static int dwFlags$get(MemorySegment seg) {
        return (int)constants$1200.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwFlags;
     * }
     */
    public static void dwFlags$set(MemorySegment seg, int x) {
        constants$1200.const$5.set(seg, x);
    }
    public static int dwFlags$get(MemorySegment seg, long index) {
        return (int)constants$1200.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void dwFlags$set(MemorySegment seg, long index, int x) {
        constants$1200.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle prcDirty$VH() {
        return constants$1201.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const RECT* prcDirty;
     * }
     */
    public static MemorySegment prcDirty$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1201.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const RECT* prcDirty;
     * }
     */
    public static void prcDirty$set(MemorySegment seg, MemorySegment x) {
        constants$1201.const$0.set(seg, x);
    }
    public static MemorySegment prcDirty$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1201.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void prcDirty$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1201.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



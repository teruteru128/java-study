// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _FILE_STORAGE_INFO {
 *     ULONG LogicalBytesPerSector;
 *     ULONG PhysicalBytesPerSectorForAtomicity;
 *     ULONG PhysicalBytesPerSectorForPerformance;
 *     ULONG FileSystemEffectivePhysicalBytesPerSectorForAtomicity;
 *     ULONG Flags;
 *     ULONG ByteOffsetForSectorAlignment;
 *     ULONG ByteOffsetForPartitionAlignment;
 * };
 * }
 */
public class _FILE_STORAGE_INFO {

    public static MemoryLayout $LAYOUT() {
        return constants$873.const$2;
    }
    public static VarHandle LogicalBytesPerSector$VH() {
        return constants$873.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG LogicalBytesPerSector;
     * }
     */
    public static int LogicalBytesPerSector$get(MemorySegment seg) {
        return (int)constants$873.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG LogicalBytesPerSector;
     * }
     */
    public static void LogicalBytesPerSector$set(MemorySegment seg, int x) {
        constants$873.const$3.set(seg, x);
    }
    public static int LogicalBytesPerSector$get(MemorySegment seg, long index) {
        return (int)constants$873.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void LogicalBytesPerSector$set(MemorySegment seg, long index, int x) {
        constants$873.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle PhysicalBytesPerSectorForAtomicity$VH() {
        return constants$873.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG PhysicalBytesPerSectorForAtomicity;
     * }
     */
    public static int PhysicalBytesPerSectorForAtomicity$get(MemorySegment seg) {
        return (int)constants$873.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG PhysicalBytesPerSectorForAtomicity;
     * }
     */
    public static void PhysicalBytesPerSectorForAtomicity$set(MemorySegment seg, int x) {
        constants$873.const$4.set(seg, x);
    }
    public static int PhysicalBytesPerSectorForAtomicity$get(MemorySegment seg, long index) {
        return (int)constants$873.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void PhysicalBytesPerSectorForAtomicity$set(MemorySegment seg, long index, int x) {
        constants$873.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle PhysicalBytesPerSectorForPerformance$VH() {
        return constants$873.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG PhysicalBytesPerSectorForPerformance;
     * }
     */
    public static int PhysicalBytesPerSectorForPerformance$get(MemorySegment seg) {
        return (int)constants$873.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG PhysicalBytesPerSectorForPerformance;
     * }
     */
    public static void PhysicalBytesPerSectorForPerformance$set(MemorySegment seg, int x) {
        constants$873.const$5.set(seg, x);
    }
    public static int PhysicalBytesPerSectorForPerformance$get(MemorySegment seg, long index) {
        return (int)constants$873.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void PhysicalBytesPerSectorForPerformance$set(MemorySegment seg, long index, int x) {
        constants$873.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle FileSystemEffectivePhysicalBytesPerSectorForAtomicity$VH() {
        return constants$874.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG FileSystemEffectivePhysicalBytesPerSectorForAtomicity;
     * }
     */
    public static int FileSystemEffectivePhysicalBytesPerSectorForAtomicity$get(MemorySegment seg) {
        return (int)constants$874.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG FileSystemEffectivePhysicalBytesPerSectorForAtomicity;
     * }
     */
    public static void FileSystemEffectivePhysicalBytesPerSectorForAtomicity$set(MemorySegment seg, int x) {
        constants$874.const$0.set(seg, x);
    }
    public static int FileSystemEffectivePhysicalBytesPerSectorForAtomicity$get(MemorySegment seg, long index) {
        return (int)constants$874.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void FileSystemEffectivePhysicalBytesPerSectorForAtomicity$set(MemorySegment seg, long index, int x) {
        constants$874.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Flags$VH() {
        return constants$874.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG Flags;
     * }
     */
    public static int Flags$get(MemorySegment seg) {
        return (int)constants$874.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG Flags;
     * }
     */
    public static void Flags$set(MemorySegment seg, int x) {
        constants$874.const$1.set(seg, x);
    }
    public static int Flags$get(MemorySegment seg, long index) {
        return (int)constants$874.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, int x) {
        constants$874.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ByteOffsetForSectorAlignment$VH() {
        return constants$874.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG ByteOffsetForSectorAlignment;
     * }
     */
    public static int ByteOffsetForSectorAlignment$get(MemorySegment seg) {
        return (int)constants$874.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG ByteOffsetForSectorAlignment;
     * }
     */
    public static void ByteOffsetForSectorAlignment$set(MemorySegment seg, int x) {
        constants$874.const$2.set(seg, x);
    }
    public static int ByteOffsetForSectorAlignment$get(MemorySegment seg, long index) {
        return (int)constants$874.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void ByteOffsetForSectorAlignment$set(MemorySegment seg, long index, int x) {
        constants$874.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ByteOffsetForPartitionAlignment$VH() {
        return constants$874.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG ByteOffsetForPartitionAlignment;
     * }
     */
    public static int ByteOffsetForPartitionAlignment$get(MemorySegment seg) {
        return (int)constants$874.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG ByteOffsetForPartitionAlignment;
     * }
     */
    public static void ByteOffsetForPartitionAlignment$set(MemorySegment seg, int x) {
        constants$874.const$3.set(seg, x);
    }
    public static int ByteOffsetForPartitionAlignment$get(MemorySegment seg, long index) {
        return (int)constants$874.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void ByteOffsetForPartitionAlignment$set(MemorySegment seg, long index, int x) {
        constants$874.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



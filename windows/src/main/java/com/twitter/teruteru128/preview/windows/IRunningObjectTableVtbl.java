// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IRunningObjectTableVtbl {
 *     HRESULT (*QueryInterface)(IRunningObjectTable*,const IID*,void**);
 *     ULONG (*AddRef)(IRunningObjectTable*);
 *     ULONG (*Release)(IRunningObjectTable*);
 *     HRESULT (*Register)(IRunningObjectTable*,DWORD,IUnknown*,IMoniker*,DWORD*);
 *     HRESULT (*Revoke)(IRunningObjectTable*,DWORD);
 *     HRESULT (*IsRunning)(IRunningObjectTable*,IMoniker*);
 *     HRESULT (*GetObjectA)(IRunningObjectTable*,IMoniker*,IUnknown**);
 *     HRESULT (*NoteChangeTime)(IRunningObjectTable*,DWORD,FILETIME*);
 *     HRESULT (*GetTimeOfLastChange)(IRunningObjectTable*,IMoniker*,FILETIME*);
 *     HRESULT (*EnumRunning)(IRunningObjectTable*,IEnumMoniker**);
 * };
 * }
 */
public class IRunningObjectTableVtbl {

    public static MemoryLayout $LAYOUT() {
        return constants$3239.const$5;
    }
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IRunningObjectTable*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3240.const$0, fi, constants$37.const$3, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle QueryInterface$VH() {
        return constants$3240.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IRunningObjectTable*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3240.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IRunningObjectTable*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        constants$3240.const$1.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3240.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3240.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, Arena scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*AddRef)(IRunningObjectTable*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3240.const$2, fi, constants$18.const$5, scope);
        }
        static AddRef ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle AddRef$VH() {
        return constants$3240.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IRunningObjectTable*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3240.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IRunningObjectTable*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        constants$3240.const$3.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3240.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3240.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, Arena scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*Release)(IRunningObjectTable*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3240.const$4, fi, constants$18.const$5, scope);
        }
        static Release ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Release$VH() {
        return constants$3240.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IRunningObjectTable*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3240.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IRunningObjectTable*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        constants$3240.const$5.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3240.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3240.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, Arena scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*Register)(IRunningObjectTable*,DWORD,IUnknown*,IMoniker*,DWORD*);
     * }
     */
    public interface Register {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(Register fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3241.const$0, fi, constants$775.const$0, scope);
        }
        static Register ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)constants$2151.const$3.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Register$VH() {
        return constants$3241.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Register)(IRunningObjectTable*,DWORD,IUnknown*,IMoniker*,DWORD*);
     * }
     */
    public static MemorySegment Register$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3241.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Register)(IRunningObjectTable*,DWORD,IUnknown*,IMoniker*,DWORD*);
     * }
     */
    public static void Register$set(MemorySegment seg, MemorySegment x) {
        constants$3241.const$1.set(seg, x);
    }
    public static MemorySegment Register$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3241.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void Register$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3241.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static Register Register(MemorySegment segment, Arena scope) {
        return Register.ofAddress(Register$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*Revoke)(IRunningObjectTable*,DWORD);
     * }
     */
    public interface Revoke {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(Revoke fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3241.const$2, fi, constants$65.const$2, scope);
        }
        static Revoke ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)constants$800.const$4.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Revoke$VH() {
        return constants$3241.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Revoke)(IRunningObjectTable*,DWORD);
     * }
     */
    public static MemorySegment Revoke$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3241.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Revoke)(IRunningObjectTable*,DWORD);
     * }
     */
    public static void Revoke$set(MemorySegment seg, MemorySegment x) {
        constants$3241.const$3.set(seg, x);
    }
    public static MemorySegment Revoke$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3241.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void Revoke$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3241.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static Revoke Revoke(MemorySegment segment, Arena scope) {
        return Revoke.ofAddress(Revoke$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*IsRunning)(IRunningObjectTable*,IMoniker*);
     * }
     */
    public interface IsRunning {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(IsRunning fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3241.const$4, fi, constants$34.const$0, scope);
        }
        static IsRunning ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle IsRunning$VH() {
        return constants$3241.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*IsRunning)(IRunningObjectTable*,IMoniker*);
     * }
     */
    public static MemorySegment IsRunning$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3241.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*IsRunning)(IRunningObjectTable*,IMoniker*);
     * }
     */
    public static void IsRunning$set(MemorySegment seg, MemorySegment x) {
        constants$3241.const$5.set(seg, x);
    }
    public static MemorySegment IsRunning$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3241.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void IsRunning$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3241.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static IsRunning IsRunning(MemorySegment segment, Arena scope) {
        return IsRunning.ofAddress(IsRunning$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetObjectA)(IRunningObjectTable*,IMoniker*,IUnknown**);
     * }
     */
    public interface GetObjectA {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetObjectA fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3242.const$0, fi, constants$37.const$3, scope);
        }
        static GetObjectA ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetObjectA$VH() {
        return constants$3242.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetObjectA)(IRunningObjectTable*,IMoniker*,IUnknown**);
     * }
     */
    public static MemorySegment GetObjectA$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3242.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetObjectA)(IRunningObjectTable*,IMoniker*,IUnknown**);
     * }
     */
    public static void GetObjectA$set(MemorySegment seg, MemorySegment x) {
        constants$3242.const$1.set(seg, x);
    }
    public static MemorySegment GetObjectA$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3242.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void GetObjectA$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3242.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetObjectA GetObjectA(MemorySegment segment, Arena scope) {
        return GetObjectA.ofAddress(GetObjectA$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*NoteChangeTime)(IRunningObjectTable*,DWORD,FILETIME*);
     * }
     */
    public interface NoteChangeTime {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(NoteChangeTime fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3242.const$2, fi, constants$485.const$5, scope);
        }
        static NoteChangeTime ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$1770.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle NoteChangeTime$VH() {
        return constants$3242.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*NoteChangeTime)(IRunningObjectTable*,DWORD,FILETIME*);
     * }
     */
    public static MemorySegment NoteChangeTime$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3242.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*NoteChangeTime)(IRunningObjectTable*,DWORD,FILETIME*);
     * }
     */
    public static void NoteChangeTime$set(MemorySegment seg, MemorySegment x) {
        constants$3242.const$3.set(seg, x);
    }
    public static MemorySegment NoteChangeTime$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3242.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void NoteChangeTime$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3242.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static NoteChangeTime NoteChangeTime(MemorySegment segment, Arena scope) {
        return NoteChangeTime.ofAddress(NoteChangeTime$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetTimeOfLastChange)(IRunningObjectTable*,IMoniker*,FILETIME*);
     * }
     */
    public interface GetTimeOfLastChange {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetTimeOfLastChange fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3242.const$4, fi, constants$37.const$3, scope);
        }
        static GetTimeOfLastChange ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetTimeOfLastChange$VH() {
        return constants$3242.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetTimeOfLastChange)(IRunningObjectTable*,IMoniker*,FILETIME*);
     * }
     */
    public static MemorySegment GetTimeOfLastChange$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3242.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetTimeOfLastChange)(IRunningObjectTable*,IMoniker*,FILETIME*);
     * }
     */
    public static void GetTimeOfLastChange$set(MemorySegment seg, MemorySegment x) {
        constants$3242.const$5.set(seg, x);
    }
    public static MemorySegment GetTimeOfLastChange$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3242.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTimeOfLastChange$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3242.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTimeOfLastChange GetTimeOfLastChange(MemorySegment segment, Arena scope) {
        return GetTimeOfLastChange.ofAddress(GetTimeOfLastChange$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*EnumRunning)(IRunningObjectTable*,IEnumMoniker**);
     * }
     */
    public interface EnumRunning {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(EnumRunning fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3243.const$0, fi, constants$34.const$0, scope);
        }
        static EnumRunning ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle EnumRunning$VH() {
        return constants$3243.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*EnumRunning)(IRunningObjectTable*,IEnumMoniker**);
     * }
     */
    public static MemorySegment EnumRunning$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3243.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*EnumRunning)(IRunningObjectTable*,IEnumMoniker**);
     * }
     */
    public static void EnumRunning$set(MemorySegment seg, MemorySegment x) {
        constants$3243.const$1.set(seg, x);
    }
    public static MemorySegment EnumRunning$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3243.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void EnumRunning$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3243.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static EnumRunning EnumRunning(MemorySegment segment, Arena scope) {
        return EnumRunning.ofAddress(EnumRunning$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



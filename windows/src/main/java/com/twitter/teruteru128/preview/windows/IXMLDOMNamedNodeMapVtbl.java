// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IXMLDOMNamedNodeMapVtbl {
 *     HRESULT (*QueryInterface)(IXMLDOMNamedNodeMap*,const IID*,void**);
 *     ULONG (*AddRef)(IXMLDOMNamedNodeMap*);
 *     ULONG (*Release)(IXMLDOMNamedNodeMap*);
 *     HRESULT (*GetTypeInfoCount)(IXMLDOMNamedNodeMap*,UINT*);
 *     HRESULT (*GetTypeInfo)(IXMLDOMNamedNodeMap*,UINT,LCID,ITypeInfo**);
 *     HRESULT (*GetIDsOfNames)(IXMLDOMNamedNodeMap*,const IID*,LPOLESTR*,UINT,LCID,DISPID*);
 *     HRESULT (*Invoke)(IXMLDOMNamedNodeMap*,DISPID,const IID*,LCID,WORD,DISPPARAMS*,VARIANT*,EXCEPINFO*,UINT*);
 *     HRESULT (*getNamedItem)(IXMLDOMNamedNodeMap*,BSTR,IXMLDOMNode**);
 *     HRESULT (*setNamedItem)(IXMLDOMNamedNodeMap*,IXMLDOMNode*,IXMLDOMNode**);
 *     HRESULT (*removeNamedItem)(IXMLDOMNamedNodeMap*,BSTR,IXMLDOMNode**);
 *     HRESULT (*get_item)(IXMLDOMNamedNodeMap*,long,IXMLDOMNode**);
 *     HRESULT (*get_length)(IXMLDOMNamedNodeMap*,long*);
 *     HRESULT (*getQualifiedItem)(IXMLDOMNamedNodeMap*,BSTR,BSTR,IXMLDOMNode**);
 *     HRESULT (*removeQualifiedItem)(IXMLDOMNamedNodeMap*,BSTR,BSTR,IXMLDOMNode**);
 *     HRESULT (*nextNode)(IXMLDOMNamedNodeMap*,IXMLDOMNode**);
 *     HRESULT (*reset)(IXMLDOMNamedNodeMap*);
 *     HRESULT (*get__newEnum)(IXMLDOMNamedNodeMap*,IUnknown**);
 * };
 * }
 */
public class IXMLDOMNamedNodeMapVtbl {

    public static MemoryLayout $LAYOUT() {
        return constants$3811.const$3;
    }
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IXMLDOMNamedNodeMap*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3811.const$4, fi, constants$37.const$3, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle QueryInterface$VH() {
        return constants$3811.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IXMLDOMNamedNodeMap*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3811.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IXMLDOMNamedNodeMap*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        constants$3811.const$5.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3811.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3811.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, Arena scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*AddRef)(IXMLDOMNamedNodeMap*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3812.const$0, fi, constants$18.const$5, scope);
        }
        static AddRef ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle AddRef$VH() {
        return constants$3812.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IXMLDOMNamedNodeMap*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3812.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IXMLDOMNamedNodeMap*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        constants$3812.const$1.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3812.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3812.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, Arena scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*Release)(IXMLDOMNamedNodeMap*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3812.const$2, fi, constants$18.const$5, scope);
        }
        static Release ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Release$VH() {
        return constants$3812.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IXMLDOMNamedNodeMap*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3812.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IXMLDOMNamedNodeMap*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        constants$3812.const$3.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3812.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3812.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, Arena scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetTypeInfoCount)(IXMLDOMNamedNodeMap*,UINT*);
     * }
     */
    public interface GetTypeInfoCount {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetTypeInfoCount fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3812.const$4, fi, constants$34.const$0, scope);
        }
        static GetTypeInfoCount ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetTypeInfoCount$VH() {
        return constants$3812.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetTypeInfoCount)(IXMLDOMNamedNodeMap*,UINT*);
     * }
     */
    public static MemorySegment GetTypeInfoCount$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3812.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetTypeInfoCount)(IXMLDOMNamedNodeMap*,UINT*);
     * }
     */
    public static void GetTypeInfoCount$set(MemorySegment seg, MemorySegment x) {
        constants$3812.const$5.set(seg, x);
    }
    public static MemorySegment GetTypeInfoCount$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3812.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeInfoCount$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3812.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeInfoCount GetTypeInfoCount(MemorySegment segment, Arena scope) {
        return GetTypeInfoCount.ofAddress(GetTypeInfoCount$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetTypeInfo)(IXMLDOMNamedNodeMap*,UINT,LCID,ITypeInfo**);
     * }
     */
    public interface GetTypeInfo {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(GetTypeInfo fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3813.const$0, fi, constants$644.const$5, scope);
        }
        static GetTypeInfo ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)constants$2131.const$5.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetTypeInfo$VH() {
        return constants$3813.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetTypeInfo)(IXMLDOMNamedNodeMap*,UINT,LCID,ITypeInfo**);
     * }
     */
    public static MemorySegment GetTypeInfo$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3813.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetTypeInfo)(IXMLDOMNamedNodeMap*,UINT,LCID,ITypeInfo**);
     * }
     */
    public static void GetTypeInfo$set(MemorySegment seg, MemorySegment x) {
        constants$3813.const$1.set(seg, x);
    }
    public static MemorySegment GetTypeInfo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3813.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeInfo$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3813.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeInfo GetTypeInfo(MemorySegment segment, Arena scope) {
        return GetTypeInfo.ofAddress(GetTypeInfo$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetIDsOfNames)(IXMLDOMNamedNodeMap*,const IID*,LPOLESTR*,UINT,LCID,DISPID*);
     * }
     */
    public interface GetIDsOfNames {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3, int _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(GetIDsOfNames fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3813.const$2, fi, constants$836.const$2, scope);
        }
        static GetIDsOfNames ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3, int __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    return (int)constants$3267.const$1.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetIDsOfNames$VH() {
        return constants$3813.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetIDsOfNames)(IXMLDOMNamedNodeMap*,const IID*,LPOLESTR*,UINT,LCID,DISPID*);
     * }
     */
    public static MemorySegment GetIDsOfNames$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3813.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetIDsOfNames)(IXMLDOMNamedNodeMap*,const IID*,LPOLESTR*,UINT,LCID,DISPID*);
     * }
     */
    public static void GetIDsOfNames$set(MemorySegment seg, MemorySegment x) {
        constants$3813.const$3.set(seg, x);
    }
    public static MemorySegment GetIDsOfNames$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3813.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void GetIDsOfNames$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3813.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetIDsOfNames GetIDsOfNames(MemorySegment segment, Arena scope) {
        return GetIDsOfNames.ofAddress(GetIDsOfNames$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*Invoke)(IXMLDOMNamedNodeMap*,DISPID,const IID*,LCID,WORD,DISPPARAMS*,VARIANT*,EXCEPINFO*,UINT*);
     * }
     */
    public interface Invoke {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, int _x3, short _x4, java.lang.foreign.MemorySegment _x5, java.lang.foreign.MemorySegment _x6, java.lang.foreign.MemorySegment _x7, java.lang.foreign.MemorySegment _x8);
        static MemorySegment allocate(Invoke fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3813.const$4, fi, constants$3484.const$0, scope);
        }
        static Invoke ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, int __x3, short __x4, java.lang.foreign.MemorySegment __x5, java.lang.foreign.MemorySegment __x6, java.lang.foreign.MemorySegment __x7, java.lang.foreign.MemorySegment __x8) -> {
                try {
                    return (int)constants$3484.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7, __x8);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Invoke$VH() {
        return constants$3813.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Invoke)(IXMLDOMNamedNodeMap*,DISPID,const IID*,LCID,WORD,DISPPARAMS*,VARIANT*,EXCEPINFO*,UINT*);
     * }
     */
    public static MemorySegment Invoke$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3813.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Invoke)(IXMLDOMNamedNodeMap*,DISPID,const IID*,LCID,WORD,DISPPARAMS*,VARIANT*,EXCEPINFO*,UINT*);
     * }
     */
    public static void Invoke$set(MemorySegment seg, MemorySegment x) {
        constants$3813.const$5.set(seg, x);
    }
    public static MemorySegment Invoke$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3813.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void Invoke$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3813.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static Invoke Invoke(MemorySegment segment, Arena scope) {
        return Invoke.ofAddress(Invoke$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*getNamedItem)(IXMLDOMNamedNodeMap*,BSTR,IXMLDOMNode**);
     * }
     */
    public interface getNamedItem {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(getNamedItem fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3814.const$0, fi, constants$37.const$3, scope);
        }
        static getNamedItem ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle getNamedItem$VH() {
        return constants$3814.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*getNamedItem)(IXMLDOMNamedNodeMap*,BSTR,IXMLDOMNode**);
     * }
     */
    public static MemorySegment getNamedItem$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3814.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*getNamedItem)(IXMLDOMNamedNodeMap*,BSTR,IXMLDOMNode**);
     * }
     */
    public static void getNamedItem$set(MemorySegment seg, MemorySegment x) {
        constants$3814.const$1.set(seg, x);
    }
    public static MemorySegment getNamedItem$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3814.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void getNamedItem$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3814.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static getNamedItem getNamedItem(MemorySegment segment, Arena scope) {
        return getNamedItem.ofAddress(getNamedItem$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*setNamedItem)(IXMLDOMNamedNodeMap*,IXMLDOMNode*,IXMLDOMNode**);
     * }
     */
    public interface setNamedItem {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(setNamedItem fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3814.const$2, fi, constants$37.const$3, scope);
        }
        static setNamedItem ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle setNamedItem$VH() {
        return constants$3814.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*setNamedItem)(IXMLDOMNamedNodeMap*,IXMLDOMNode*,IXMLDOMNode**);
     * }
     */
    public static MemorySegment setNamedItem$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3814.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*setNamedItem)(IXMLDOMNamedNodeMap*,IXMLDOMNode*,IXMLDOMNode**);
     * }
     */
    public static void setNamedItem$set(MemorySegment seg, MemorySegment x) {
        constants$3814.const$3.set(seg, x);
    }
    public static MemorySegment setNamedItem$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3814.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void setNamedItem$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3814.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static setNamedItem setNamedItem(MemorySegment segment, Arena scope) {
        return setNamedItem.ofAddress(setNamedItem$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*removeNamedItem)(IXMLDOMNamedNodeMap*,BSTR,IXMLDOMNode**);
     * }
     */
    public interface removeNamedItem {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(removeNamedItem fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3814.const$4, fi, constants$37.const$3, scope);
        }
        static removeNamedItem ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle removeNamedItem$VH() {
        return constants$3814.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*removeNamedItem)(IXMLDOMNamedNodeMap*,BSTR,IXMLDOMNode**);
     * }
     */
    public static MemorySegment removeNamedItem$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3814.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*removeNamedItem)(IXMLDOMNamedNodeMap*,BSTR,IXMLDOMNode**);
     * }
     */
    public static void removeNamedItem$set(MemorySegment seg, MemorySegment x) {
        constants$3814.const$5.set(seg, x);
    }
    public static MemorySegment removeNamedItem$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3814.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void removeNamedItem$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3814.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static removeNamedItem removeNamedItem(MemorySegment segment, Arena scope) {
        return removeNamedItem.ofAddress(removeNamedItem$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_item)(IXMLDOMNamedNodeMap*,long,IXMLDOMNode**);
     * }
     */
    public interface get_item {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(get_item fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3815.const$0, fi, constants$485.const$5, scope);
        }
        static get_item ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$1770.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_item$VH() {
        return constants$3815.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_item)(IXMLDOMNamedNodeMap*,long,IXMLDOMNode**);
     * }
     */
    public static MemorySegment get_item$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3815.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_item)(IXMLDOMNamedNodeMap*,long,IXMLDOMNode**);
     * }
     */
    public static void get_item$set(MemorySegment seg, MemorySegment x) {
        constants$3815.const$1.set(seg, x);
    }
    public static MemorySegment get_item$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3815.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_item$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3815.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_item get_item(MemorySegment segment, Arena scope) {
        return get_item.ofAddress(get_item$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_length)(IXMLDOMNamedNodeMap*,long*);
     * }
     */
    public interface get_length {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_length fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3815.const$2, fi, constants$34.const$0, scope);
        }
        static get_length ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_length$VH() {
        return constants$3815.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_length)(IXMLDOMNamedNodeMap*,long*);
     * }
     */
    public static MemorySegment get_length$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3815.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_length)(IXMLDOMNamedNodeMap*,long*);
     * }
     */
    public static void get_length$set(MemorySegment seg, MemorySegment x) {
        constants$3815.const$3.set(seg, x);
    }
    public static MemorySegment get_length$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3815.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void get_length$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3815.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_length get_length(MemorySegment segment, Arena scope) {
        return get_length.ofAddress(get_length$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*getQualifiedItem)(IXMLDOMNamedNodeMap*,BSTR,BSTR,IXMLDOMNode**);
     * }
     */
    public interface getQualifiedItem {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(getQualifiedItem fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3815.const$4, fi, constants$1.const$3, scope);
        }
        static getQualifiedItem ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)constants$55.const$1.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle getQualifiedItem$VH() {
        return constants$3815.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*getQualifiedItem)(IXMLDOMNamedNodeMap*,BSTR,BSTR,IXMLDOMNode**);
     * }
     */
    public static MemorySegment getQualifiedItem$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3815.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*getQualifiedItem)(IXMLDOMNamedNodeMap*,BSTR,BSTR,IXMLDOMNode**);
     * }
     */
    public static void getQualifiedItem$set(MemorySegment seg, MemorySegment x) {
        constants$3815.const$5.set(seg, x);
    }
    public static MemorySegment getQualifiedItem$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3815.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void getQualifiedItem$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3815.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static getQualifiedItem getQualifiedItem(MemorySegment segment, Arena scope) {
        return getQualifiedItem.ofAddress(getQualifiedItem$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*removeQualifiedItem)(IXMLDOMNamedNodeMap*,BSTR,BSTR,IXMLDOMNode**);
     * }
     */
    public interface removeQualifiedItem {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(removeQualifiedItem fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3816.const$0, fi, constants$1.const$3, scope);
        }
        static removeQualifiedItem ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)constants$55.const$1.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle removeQualifiedItem$VH() {
        return constants$3816.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*removeQualifiedItem)(IXMLDOMNamedNodeMap*,BSTR,BSTR,IXMLDOMNode**);
     * }
     */
    public static MemorySegment removeQualifiedItem$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3816.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*removeQualifiedItem)(IXMLDOMNamedNodeMap*,BSTR,BSTR,IXMLDOMNode**);
     * }
     */
    public static void removeQualifiedItem$set(MemorySegment seg, MemorySegment x) {
        constants$3816.const$1.set(seg, x);
    }
    public static MemorySegment removeQualifiedItem$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3816.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void removeQualifiedItem$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3816.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static removeQualifiedItem removeQualifiedItem(MemorySegment segment, Arena scope) {
        return removeQualifiedItem.ofAddress(removeQualifiedItem$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*nextNode)(IXMLDOMNamedNodeMap*,IXMLDOMNode**);
     * }
     */
    public interface nextNode {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(nextNode fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3816.const$2, fi, constants$34.const$0, scope);
        }
        static nextNode ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle nextNode$VH() {
        return constants$3816.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*nextNode)(IXMLDOMNamedNodeMap*,IXMLDOMNode**);
     * }
     */
    public static MemorySegment nextNode$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3816.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*nextNode)(IXMLDOMNamedNodeMap*,IXMLDOMNode**);
     * }
     */
    public static void nextNode$set(MemorySegment seg, MemorySegment x) {
        constants$3816.const$3.set(seg, x);
    }
    public static MemorySegment nextNode$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3816.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void nextNode$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3816.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static nextNode nextNode(MemorySegment segment, Arena scope) {
        return nextNode.ofAddress(nextNode$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*reset)(IXMLDOMNamedNodeMap*);
     * }
     */
    public interface reset {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(reset fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3816.const$4, fi, constants$18.const$5, scope);
        }
        static reset ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle reset$VH() {
        return constants$3816.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*reset)(IXMLDOMNamedNodeMap*);
     * }
     */
    public static MemorySegment reset$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3816.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*reset)(IXMLDOMNamedNodeMap*);
     * }
     */
    public static void reset$set(MemorySegment seg, MemorySegment x) {
        constants$3816.const$5.set(seg, x);
    }
    public static MemorySegment reset$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3816.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void reset$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3816.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static reset reset(MemorySegment segment, Arena scope) {
        return reset.ofAddress(reset$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get__newEnum)(IXMLDOMNamedNodeMap*,IUnknown**);
     * }
     */
    public interface get__newEnum {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get__newEnum fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3817.const$0, fi, constants$34.const$0, scope);
        }
        static get__newEnum ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get__newEnum$VH() {
        return constants$3817.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get__newEnum)(IXMLDOMNamedNodeMap*,IUnknown**);
     * }
     */
    public static MemorySegment get__newEnum$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3817.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get__newEnum)(IXMLDOMNamedNodeMap*,IUnknown**);
     * }
     */
    public static void get__newEnum$set(MemorySegment seg, MemorySegment x) {
        constants$3817.const$1.set(seg, x);
    }
    public static MemorySegment get__newEnum$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3817.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get__newEnum$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3817.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get__newEnum get__newEnum(MemorySegment segment, Arena scope) {
        return get__newEnum.ofAddress(get__newEnum$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



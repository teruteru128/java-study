// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _STORAGE_DEVICE_RESILIENCY_DESCRIPTOR {
 *     DWORD Version;
 *     DWORD Size;
 *     DWORD NameOffset;
 *     DWORD NumberOfLogicalCopies;
 *     DWORD NumberOfPhysicalCopies;
 *     DWORD PhysicalDiskRedundancy;
 *     DWORD NumberOfColumns;
 *     DWORD Interleave;
 * };
 * }
 */
public class _STORAGE_DEVICE_RESILIENCY_DESCRIPTOR {

    public static MemoryLayout $LAYOUT() {
        return constants$2403.const$4;
    }
    public static VarHandle Version$VH() {
        return constants$2403.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Version;
     * }
     */
    public static int Version$get(MemorySegment seg) {
        return (int)constants$2403.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Version;
     * }
     */
    public static void Version$set(MemorySegment seg, int x) {
        constants$2403.const$5.set(seg, x);
    }
    public static int Version$get(MemorySegment seg, long index) {
        return (int)constants$2403.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, int x) {
        constants$2403.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Size$VH() {
        return constants$2404.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Size;
     * }
     */
    public static int Size$get(MemorySegment seg) {
        return (int)constants$2404.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Size;
     * }
     */
    public static void Size$set(MemorySegment seg, int x) {
        constants$2404.const$0.set(seg, x);
    }
    public static int Size$get(MemorySegment seg, long index) {
        return (int)constants$2404.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Size$set(MemorySegment seg, long index, int x) {
        constants$2404.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle NameOffset$VH() {
        return constants$2404.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD NameOffset;
     * }
     */
    public static int NameOffset$get(MemorySegment seg) {
        return (int)constants$2404.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD NameOffset;
     * }
     */
    public static void NameOffset$set(MemorySegment seg, int x) {
        constants$2404.const$1.set(seg, x);
    }
    public static int NameOffset$get(MemorySegment seg, long index) {
        return (int)constants$2404.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void NameOffset$set(MemorySegment seg, long index, int x) {
        constants$2404.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle NumberOfLogicalCopies$VH() {
        return constants$2404.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD NumberOfLogicalCopies;
     * }
     */
    public static int NumberOfLogicalCopies$get(MemorySegment seg) {
        return (int)constants$2404.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD NumberOfLogicalCopies;
     * }
     */
    public static void NumberOfLogicalCopies$set(MemorySegment seg, int x) {
        constants$2404.const$2.set(seg, x);
    }
    public static int NumberOfLogicalCopies$get(MemorySegment seg, long index) {
        return (int)constants$2404.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void NumberOfLogicalCopies$set(MemorySegment seg, long index, int x) {
        constants$2404.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle NumberOfPhysicalCopies$VH() {
        return constants$2404.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD NumberOfPhysicalCopies;
     * }
     */
    public static int NumberOfPhysicalCopies$get(MemorySegment seg) {
        return (int)constants$2404.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD NumberOfPhysicalCopies;
     * }
     */
    public static void NumberOfPhysicalCopies$set(MemorySegment seg, int x) {
        constants$2404.const$3.set(seg, x);
    }
    public static int NumberOfPhysicalCopies$get(MemorySegment seg, long index) {
        return (int)constants$2404.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void NumberOfPhysicalCopies$set(MemorySegment seg, long index, int x) {
        constants$2404.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle PhysicalDiskRedundancy$VH() {
        return constants$2404.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD PhysicalDiskRedundancy;
     * }
     */
    public static int PhysicalDiskRedundancy$get(MemorySegment seg) {
        return (int)constants$2404.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD PhysicalDiskRedundancy;
     * }
     */
    public static void PhysicalDiskRedundancy$set(MemorySegment seg, int x) {
        constants$2404.const$4.set(seg, x);
    }
    public static int PhysicalDiskRedundancy$get(MemorySegment seg, long index) {
        return (int)constants$2404.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void PhysicalDiskRedundancy$set(MemorySegment seg, long index, int x) {
        constants$2404.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle NumberOfColumns$VH() {
        return constants$2404.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD NumberOfColumns;
     * }
     */
    public static int NumberOfColumns$get(MemorySegment seg) {
        return (int)constants$2404.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD NumberOfColumns;
     * }
     */
    public static void NumberOfColumns$set(MemorySegment seg, int x) {
        constants$2404.const$5.set(seg, x);
    }
    public static int NumberOfColumns$get(MemorySegment seg, long index) {
        return (int)constants$2404.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void NumberOfColumns$set(MemorySegment seg, long index, int x) {
        constants$2404.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Interleave$VH() {
        return constants$2405.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Interleave;
     * }
     */
    public static int Interleave$get(MemorySegment seg) {
        return (int)constants$2405.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Interleave;
     * }
     */
    public static void Interleave$set(MemorySegment seg, int x) {
        constants$2405.const$0.set(seg, x);
    }
    public static int Interleave$get(MemorySegment seg, long index) {
        return (int)constants$2405.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Interleave$set(MemorySegment seg, long index, int x) {
        constants$2405.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



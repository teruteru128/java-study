// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _IO_COUNTERS {
 *     ULONGLONG ReadOperationCount;
 *     ULONGLONG WriteOperationCount;
 *     ULONGLONG OtherOperationCount;
 *     ULONGLONG ReadTransferCount;
 *     ULONGLONG WriteTransferCount;
 *     ULONGLONG OtherTransferCount;
 * };
 * }
 */
public class _IO_COUNTERS {

    public static MemoryLayout $LAYOUT() {
        return constants$195.const$3;
    }
    public static VarHandle ReadOperationCount$VH() {
        return constants$195.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONGLONG ReadOperationCount;
     * }
     */
    public static long ReadOperationCount$get(MemorySegment seg) {
        return (long)constants$195.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONGLONG ReadOperationCount;
     * }
     */
    public static void ReadOperationCount$set(MemorySegment seg, long x) {
        constants$195.const$4.set(seg, x);
    }
    public static long ReadOperationCount$get(MemorySegment seg, long index) {
        return (long)constants$195.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void ReadOperationCount$set(MemorySegment seg, long index, long x) {
        constants$195.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle WriteOperationCount$VH() {
        return constants$195.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONGLONG WriteOperationCount;
     * }
     */
    public static long WriteOperationCount$get(MemorySegment seg) {
        return (long)constants$195.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONGLONG WriteOperationCount;
     * }
     */
    public static void WriteOperationCount$set(MemorySegment seg, long x) {
        constants$195.const$5.set(seg, x);
    }
    public static long WriteOperationCount$get(MemorySegment seg, long index) {
        return (long)constants$195.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void WriteOperationCount$set(MemorySegment seg, long index, long x) {
        constants$195.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle OtherOperationCount$VH() {
        return constants$196.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONGLONG OtherOperationCount;
     * }
     */
    public static long OtherOperationCount$get(MemorySegment seg) {
        return (long)constants$196.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONGLONG OtherOperationCount;
     * }
     */
    public static void OtherOperationCount$set(MemorySegment seg, long x) {
        constants$196.const$0.set(seg, x);
    }
    public static long OtherOperationCount$get(MemorySegment seg, long index) {
        return (long)constants$196.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void OtherOperationCount$set(MemorySegment seg, long index, long x) {
        constants$196.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ReadTransferCount$VH() {
        return constants$196.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONGLONG ReadTransferCount;
     * }
     */
    public static long ReadTransferCount$get(MemorySegment seg) {
        return (long)constants$196.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONGLONG ReadTransferCount;
     * }
     */
    public static void ReadTransferCount$set(MemorySegment seg, long x) {
        constants$196.const$1.set(seg, x);
    }
    public static long ReadTransferCount$get(MemorySegment seg, long index) {
        return (long)constants$196.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void ReadTransferCount$set(MemorySegment seg, long index, long x) {
        constants$196.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle WriteTransferCount$VH() {
        return constants$196.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONGLONG WriteTransferCount;
     * }
     */
    public static long WriteTransferCount$get(MemorySegment seg) {
        return (long)constants$196.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONGLONG WriteTransferCount;
     * }
     */
    public static void WriteTransferCount$set(MemorySegment seg, long x) {
        constants$196.const$2.set(seg, x);
    }
    public static long WriteTransferCount$get(MemorySegment seg, long index) {
        return (long)constants$196.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void WriteTransferCount$set(MemorySegment seg, long index, long x) {
        constants$196.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle OtherTransferCount$VH() {
        return constants$196.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONGLONG OtherTransferCount;
     * }
     */
    public static long OtherTransferCount$get(MemorySegment seg) {
        return (long)constants$196.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONGLONG OtherTransferCount;
     * }
     */
    public static void OtherTransferCount$set(MemorySegment seg, long x) {
        constants$196.const$3.set(seg, x);
    }
    public static long OtherTransferCount$get(MemorySegment seg, long index) {
        return (long)constants$196.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void OtherTransferCount$set(MemorySegment seg, long index, long x) {
        constants$196.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



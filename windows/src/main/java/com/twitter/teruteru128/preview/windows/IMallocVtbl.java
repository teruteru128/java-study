// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IMallocVtbl {
 *     HRESULT (*QueryInterface)(IMalloc*,const IID*,void**);
 *     ULONG (*AddRef)(IMalloc*);
 *     ULONG (*Release)(IMalloc*);
 *     void* (*Alloc)(IMalloc*,SIZE_T);
 *     void* (*Realloc)(IMalloc*,void*,SIZE_T);
 *     void (*Free)(IMalloc*,void*);
 *     SIZE_T (*GetSize)(IMalloc*,void*);
 *     int (*DidAlloc)(IMalloc*,void*);
 *     void (*HeapMinimize)(IMalloc*);
 * };
 * }
 */
public class IMallocVtbl {

    public static MemoryLayout $LAYOUT() {
        return constants$3022.const$4;
    }
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IMalloc*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3022.const$5, fi, constants$37.const$3, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle QueryInterface$VH() {
        return constants$3023.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IMalloc*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3023.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IMalloc*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        constants$3023.const$0.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3023.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3023.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, Arena scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*AddRef)(IMalloc*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3023.const$1, fi, constants$18.const$5, scope);
        }
        static AddRef ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle AddRef$VH() {
        return constants$3023.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IMalloc*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3023.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IMalloc*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        constants$3023.const$2.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3023.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3023.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, Arena scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*Release)(IMalloc*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3023.const$3, fi, constants$18.const$5, scope);
        }
        static Release ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Release$VH() {
        return constants$3023.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IMalloc*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3023.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IMalloc*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        constants$3023.const$4.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3023.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3023.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, Arena scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    /**
     * {@snippet :
 * void* (*Alloc)(IMalloc*,SIZE_T);
     * }
     */
    public interface Alloc {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, long _x1);
        static MemorySegment allocate(Alloc fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3023.const$5, fi, constants$2333.const$0, scope);
        }
        static Alloc ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, long __x1) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$3024.const$0.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Alloc$VH() {
        return constants$3024.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* (*Alloc)(IMalloc*,SIZE_T);
     * }
     */
    public static MemorySegment Alloc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3024.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* (*Alloc)(IMalloc*,SIZE_T);
     * }
     */
    public static void Alloc$set(MemorySegment seg, MemorySegment x) {
        constants$3024.const$1.set(seg, x);
    }
    public static MemorySegment Alloc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3024.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void Alloc$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3024.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static Alloc Alloc(MemorySegment segment, Arena scope) {
        return Alloc.ofAddress(Alloc$get(segment), scope);
    }
    /**
     * {@snippet :
 * void* (*Realloc)(IMalloc*,void*,SIZE_T);
     * }
     */
    public interface Realloc {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, long _x2);
        static MemorySegment allocate(Realloc fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3024.const$2, fi, constants$29.const$2, scope);
        }
        static Realloc ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, long __x2) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$3024.const$3.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Realloc$VH() {
        return constants$3024.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* (*Realloc)(IMalloc*,void*,SIZE_T);
     * }
     */
    public static MemorySegment Realloc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3024.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* (*Realloc)(IMalloc*,void*,SIZE_T);
     * }
     */
    public static void Realloc$set(MemorySegment seg, MemorySegment x) {
        constants$3024.const$4.set(seg, x);
    }
    public static MemorySegment Realloc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3024.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void Realloc$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3024.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static Realloc Realloc(MemorySegment segment, Arena scope) {
        return Realloc.ofAddress(Realloc$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*Free)(IMalloc*,void*);
     * }
     */
    public interface Free {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(Free fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3024.const$5, fi, constants$469.const$2, scope);
        }
        static Free ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    constants$531.const$5.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Free$VH() {
        return constants$3025.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*Free)(IMalloc*,void*);
     * }
     */
    public static MemorySegment Free$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3025.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*Free)(IMalloc*,void*);
     * }
     */
    public static void Free$set(MemorySegment seg, MemorySegment x) {
        constants$3025.const$0.set(seg, x);
    }
    public static MemorySegment Free$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3025.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Free$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3025.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static Free Free(MemorySegment segment, Arena scope) {
        return Free.ofAddress(Free$get(segment), scope);
    }
    /**
     * {@snippet :
 * SIZE_T (*GetSize)(IMalloc*,void*);
     * }
     */
    public interface GetSize {

        long apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetSize fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3025.const$1, fi, constants$34.const$3, scope);
        }
        static GetSize ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (long)constants$3025.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetSize$VH() {
        return constants$3025.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * SIZE_T (*GetSize)(IMalloc*,void*);
     * }
     */
    public static MemorySegment GetSize$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3025.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * SIZE_T (*GetSize)(IMalloc*,void*);
     * }
     */
    public static void GetSize$set(MemorySegment seg, MemorySegment x) {
        constants$3025.const$3.set(seg, x);
    }
    public static MemorySegment GetSize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3025.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void GetSize$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3025.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetSize GetSize(MemorySegment segment, Arena scope) {
        return GetSize.ofAddress(GetSize$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*DidAlloc)(IMalloc*,void*);
     * }
     */
    public interface DidAlloc {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(DidAlloc fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3025.const$4, fi, constants$34.const$0, scope);
        }
        static DidAlloc ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle DidAlloc$VH() {
        return constants$3025.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*DidAlloc)(IMalloc*,void*);
     * }
     */
    public static MemorySegment DidAlloc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3025.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*DidAlloc)(IMalloc*,void*);
     * }
     */
    public static void DidAlloc$set(MemorySegment seg, MemorySegment x) {
        constants$3025.const$5.set(seg, x);
    }
    public static MemorySegment DidAlloc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3025.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void DidAlloc$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3025.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static DidAlloc DidAlloc(MemorySegment segment, Arena scope) {
        return DidAlloc.ofAddress(DidAlloc$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*HeapMinimize)(IMalloc*);
     * }
     */
    public interface HeapMinimize {

        void apply(java.lang.foreign.MemorySegment pParameter);
        static MemorySegment allocate(HeapMinimize fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3026.const$0, fi, constants$0.const$0, scope);
        }
        static HeapMinimize ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _pParameter) -> {
                try {
                    constants$496.const$2.invokeExact(symbol, _pParameter);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle HeapMinimize$VH() {
        return constants$3026.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*HeapMinimize)(IMalloc*);
     * }
     */
    public static MemorySegment HeapMinimize$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3026.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*HeapMinimize)(IMalloc*);
     * }
     */
    public static void HeapMinimize$set(MemorySegment seg, MemorySegment x) {
        constants$3026.const$1.set(seg, x);
    }
    public static MemorySegment HeapMinimize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3026.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void HeapMinimize$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3026.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static HeapMinimize HeapMinimize(MemorySegment segment, Arena scope) {
        return HeapMinimize.ofAddress(HeapMinimize$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



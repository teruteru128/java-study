// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _WOW64_FLOATING_SAVE_AREA {
 *     DWORD ControlWord;
 *     DWORD StatusWord;
 *     DWORD TagWord;
 *     DWORD ErrorOffset;
 *     DWORD ErrorSelector;
 *     DWORD DataOffset;
 *     DWORD DataSelector;
 *     BYTE RegisterArea[80];
 *     DWORD Cr0NpxState;
 * };
 * }
 */
public class _WOW64_FLOATING_SAVE_AREA {

    public static MemoryLayout $LAYOUT() {
        return constants$128.const$4;
    }
    public static VarHandle ControlWord$VH() {
        return constants$128.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD ControlWord;
     * }
     */
    public static int ControlWord$get(MemorySegment seg) {
        return (int)constants$128.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD ControlWord;
     * }
     */
    public static void ControlWord$set(MemorySegment seg, int x) {
        constants$128.const$5.set(seg, x);
    }
    public static int ControlWord$get(MemorySegment seg, long index) {
        return (int)constants$128.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void ControlWord$set(MemorySegment seg, long index, int x) {
        constants$128.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle StatusWord$VH() {
        return constants$129.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD StatusWord;
     * }
     */
    public static int StatusWord$get(MemorySegment seg) {
        return (int)constants$129.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD StatusWord;
     * }
     */
    public static void StatusWord$set(MemorySegment seg, int x) {
        constants$129.const$0.set(seg, x);
    }
    public static int StatusWord$get(MemorySegment seg, long index) {
        return (int)constants$129.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void StatusWord$set(MemorySegment seg, long index, int x) {
        constants$129.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle TagWord$VH() {
        return constants$129.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD TagWord;
     * }
     */
    public static int TagWord$get(MemorySegment seg) {
        return (int)constants$129.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD TagWord;
     * }
     */
    public static void TagWord$set(MemorySegment seg, int x) {
        constants$129.const$1.set(seg, x);
    }
    public static int TagWord$get(MemorySegment seg, long index) {
        return (int)constants$129.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void TagWord$set(MemorySegment seg, long index, int x) {
        constants$129.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ErrorOffset$VH() {
        return constants$129.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD ErrorOffset;
     * }
     */
    public static int ErrorOffset$get(MemorySegment seg) {
        return (int)constants$129.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD ErrorOffset;
     * }
     */
    public static void ErrorOffset$set(MemorySegment seg, int x) {
        constants$129.const$2.set(seg, x);
    }
    public static int ErrorOffset$get(MemorySegment seg, long index) {
        return (int)constants$129.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void ErrorOffset$set(MemorySegment seg, long index, int x) {
        constants$129.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ErrorSelector$VH() {
        return constants$129.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD ErrorSelector;
     * }
     */
    public static int ErrorSelector$get(MemorySegment seg) {
        return (int)constants$129.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD ErrorSelector;
     * }
     */
    public static void ErrorSelector$set(MemorySegment seg, int x) {
        constants$129.const$3.set(seg, x);
    }
    public static int ErrorSelector$get(MemorySegment seg, long index) {
        return (int)constants$129.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void ErrorSelector$set(MemorySegment seg, long index, int x) {
        constants$129.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle DataOffset$VH() {
        return constants$129.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD DataOffset;
     * }
     */
    public static int DataOffset$get(MemorySegment seg) {
        return (int)constants$129.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD DataOffset;
     * }
     */
    public static void DataOffset$set(MemorySegment seg, int x) {
        constants$129.const$4.set(seg, x);
    }
    public static int DataOffset$get(MemorySegment seg, long index) {
        return (int)constants$129.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void DataOffset$set(MemorySegment seg, long index, int x) {
        constants$129.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle DataSelector$VH() {
        return constants$129.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD DataSelector;
     * }
     */
    public static int DataSelector$get(MemorySegment seg) {
        return (int)constants$129.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD DataSelector;
     * }
     */
    public static void DataSelector$set(MemorySegment seg, int x) {
        constants$129.const$5.set(seg, x);
    }
    public static int DataSelector$get(MemorySegment seg, long index) {
        return (int)constants$129.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void DataSelector$set(MemorySegment seg, long index, int x) {
        constants$129.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment RegisterArea$slice(MemorySegment seg) {
        return seg.asSlice(28, 80);
    }
    public static VarHandle Cr0NpxState$VH() {
        return constants$130.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Cr0NpxState;
     * }
     */
    public static int Cr0NpxState$get(MemorySegment seg) {
        return (int)constants$130.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Cr0NpxState;
     * }
     */
    public static void Cr0NpxState$set(MemorySegment seg, int x) {
        constants$130.const$0.set(seg, x);
    }
    public static int Cr0NpxState$get(MemorySegment seg, long index) {
        return (int)constants$130.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Cr0NpxState$set(MemorySegment seg, long index, int x) {
        constants$130.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



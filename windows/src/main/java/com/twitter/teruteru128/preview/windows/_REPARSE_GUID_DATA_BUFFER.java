// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _REPARSE_GUID_DATA_BUFFER {
 *     DWORD ReparseTag;
 *     WORD ReparseDataLength;
 *     WORD Reserved;
 *     GUID ReparseGuid;
 *     struct  GenericReparseBuffer;
 * };
 * }
 */
public class _REPARSE_GUID_DATA_BUFFER {

    public static MemoryLayout $LAYOUT() {
        return constants$255.const$2;
    }
    public static VarHandle ReparseTag$VH() {
        return constants$255.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD ReparseTag;
     * }
     */
    public static int ReparseTag$get(MemorySegment seg) {
        return (int)constants$255.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD ReparseTag;
     * }
     */
    public static void ReparseTag$set(MemorySegment seg, int x) {
        constants$255.const$3.set(seg, x);
    }
    public static int ReparseTag$get(MemorySegment seg, long index) {
        return (int)constants$255.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void ReparseTag$set(MemorySegment seg, long index, int x) {
        constants$255.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ReparseDataLength$VH() {
        return constants$255.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD ReparseDataLength;
     * }
     */
    public static short ReparseDataLength$get(MemorySegment seg) {
        return (short)constants$255.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD ReparseDataLength;
     * }
     */
    public static void ReparseDataLength$set(MemorySegment seg, short x) {
        constants$255.const$4.set(seg, x);
    }
    public static short ReparseDataLength$get(MemorySegment seg, long index) {
        return (short)constants$255.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void ReparseDataLength$set(MemorySegment seg, long index, short x) {
        constants$255.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Reserved$VH() {
        return constants$255.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD Reserved;
     * }
     */
    public static short Reserved$get(MemorySegment seg) {
        return (short)constants$255.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD Reserved;
     * }
     */
    public static void Reserved$set(MemorySegment seg, short x) {
        constants$255.const$5.set(seg, x);
    }
    public static short Reserved$get(MemorySegment seg, long index) {
        return (short)constants$255.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void Reserved$set(MemorySegment seg, long index, short x) {
        constants$255.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment ReparseGuid$slice(MemorySegment seg) {
        return seg.asSlice(8, 16);
    }
    /**
     * {@snippet :
     * struct {
     *     BYTE DataBuffer[1];
     * };
     * }
     */
    public static final class GenericReparseBuffer {

        // Suppresses default constructor, ensuring non-instantiability.
        private GenericReparseBuffer() {}
        public static MemoryLayout $LAYOUT() {
            return constants$256.const$0;
        }
        public static MemorySegment DataBuffer$slice(MemorySegment seg) {
            return seg.asSlice(0, 1);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment GenericReparseBuffer$slice(MemorySegment seg) {
        return seg.asSlice(24, 1);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



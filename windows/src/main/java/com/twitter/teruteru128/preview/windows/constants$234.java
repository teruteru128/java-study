// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
final class constants$234 {

    // Suppresses default constructor, ensuring non-instantiability.
    private constants$234() {}
    static final StructLayout const$0 = MemoryLayout.structLayout(
        JAVA_SHORT.withName("MaximumGroupCount"),
        JAVA_SHORT.withName("ActiveGroupCount"),
        MemoryLayout.sequenceLayout(20, JAVA_BYTE).withName("Reserved"),
        MemoryLayout.sequenceLayout(1, MemoryLayout.structLayout(
            JAVA_BYTE.withName("MaximumProcessorCount"),
            JAVA_BYTE.withName("ActiveProcessorCount"),
            MemoryLayout.sequenceLayout(38, JAVA_BYTE).withName("Reserved"),
            JAVA_LONG.withName("ActiveProcessorMask")
        ).withName("_PROCESSOR_GROUP_INFO")).withName("GroupInfo")
    ).withName("_GROUP_RELATIONSHIP");
    static final VarHandle const$1 = constants$234.const$0.varHandle(MemoryLayout.PathElement.groupElement("MaximumGroupCount"));
    static final VarHandle const$2 = constants$234.const$0.varHandle(MemoryLayout.PathElement.groupElement("ActiveGroupCount"));
    static final StructLayout const$3 = MemoryLayout.structLayout(
        JAVA_INT.withName("Relationship"),
        JAVA_INT.withName("Size"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                JAVA_BYTE.withName("Flags"),
                JAVA_BYTE.withName("EfficiencyClass"),
                MemoryLayout.sequenceLayout(20, JAVA_BYTE).withName("Reserved"),
                JAVA_SHORT.withName("GroupCount"),
                MemoryLayout.sequenceLayout(1, MemoryLayout.structLayout(
                    JAVA_LONG.withName("Mask"),
                    JAVA_SHORT.withName("Group"),
                    MemoryLayout.sequenceLayout(3, JAVA_SHORT).withName("Reserved")
                ).withName("_GROUP_AFFINITY")).withName("GroupMask")
            ).withName("Processor"),
            MemoryLayout.structLayout(
                JAVA_INT.withName("NodeNumber"),
                MemoryLayout.sequenceLayout(18, JAVA_BYTE).withName("Reserved"),
                JAVA_SHORT.withName("GroupCount"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        JAVA_LONG.withName("Mask"),
                        JAVA_SHORT.withName("Group"),
                        MemoryLayout.sequenceLayout(3, JAVA_SHORT).withName("Reserved")
                    ).withName("GroupMask"),
                    MemoryLayout.sequenceLayout(1, MemoryLayout.structLayout(
                        JAVA_LONG.withName("Mask"),
                        JAVA_SHORT.withName("Group"),
                        MemoryLayout.sequenceLayout(3, JAVA_SHORT).withName("Reserved")
                    ).withName("_GROUP_AFFINITY")).withName("GroupMasks")
                ).withName("$anon$0")
            ).withName("NumaNode"),
            MemoryLayout.structLayout(
                JAVA_BYTE.withName("Level"),
                JAVA_BYTE.withName("Associativity"),
                JAVA_SHORT.withName("LineSize"),
                JAVA_INT.withName("CacheSize"),
                JAVA_INT.withName("Type"),
                MemoryLayout.sequenceLayout(18, JAVA_BYTE).withName("Reserved"),
                JAVA_SHORT.withName("GroupCount"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        JAVA_LONG.withName("Mask"),
                        JAVA_SHORT.withName("Group"),
                        MemoryLayout.sequenceLayout(3, JAVA_SHORT).withName("Reserved")
                    ).withName("GroupMask"),
                    MemoryLayout.sequenceLayout(1, MemoryLayout.structLayout(
                        JAVA_LONG.withName("Mask"),
                        JAVA_SHORT.withName("Group"),
                        MemoryLayout.sequenceLayout(3, JAVA_SHORT).withName("Reserved")
                    ).withName("_GROUP_AFFINITY")).withName("GroupMasks")
                ).withName("$anon$0")
            ).withName("Cache"),
            MemoryLayout.structLayout(
                JAVA_SHORT.withName("MaximumGroupCount"),
                JAVA_SHORT.withName("ActiveGroupCount"),
                MemoryLayout.sequenceLayout(20, JAVA_BYTE).withName("Reserved"),
                MemoryLayout.sequenceLayout(1, MemoryLayout.structLayout(
                    JAVA_BYTE.withName("MaximumProcessorCount"),
                    JAVA_BYTE.withName("ActiveProcessorCount"),
                    MemoryLayout.sequenceLayout(38, JAVA_BYTE).withName("Reserved"),
                    JAVA_LONG.withName("ActiveProcessorMask")
                ).withName("_PROCESSOR_GROUP_INFO")).withName("GroupInfo")
            ).withName("Group")
        ).withName("$anon$0")
    ).withName("_SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX");
    static final VarHandle const$4 = constants$234.const$3.varHandle(MemoryLayout.PathElement.groupElement("Relationship"));
    static final VarHandle const$5 = constants$234.const$3.varHandle(MemoryLayout.PathElement.groupElement("Size"));
}



// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tagBITMAP {
 *     LONG bmType;
 *     LONG bmWidth;
 *     LONG bmHeight;
 *     LONG bmWidthBytes;
 *     WORD bmPlanes;
 *     WORD bmBitsPixel;
 *     LPVOID bmBits;
 * };
 * }
 */
public class tagBITMAP {

    public static MemoryLayout $LAYOUT() {
        return constants$888.const$1;
    }
    public static VarHandle bmType$VH() {
        return constants$888.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LONG bmType;
     * }
     */
    public static int bmType$get(MemorySegment seg) {
        return (int)constants$888.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LONG bmType;
     * }
     */
    public static void bmType$set(MemorySegment seg, int x) {
        constants$888.const$2.set(seg, x);
    }
    public static int bmType$get(MemorySegment seg, long index) {
        return (int)constants$888.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void bmType$set(MemorySegment seg, long index, int x) {
        constants$888.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bmWidth$VH() {
        return constants$888.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LONG bmWidth;
     * }
     */
    public static int bmWidth$get(MemorySegment seg) {
        return (int)constants$888.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LONG bmWidth;
     * }
     */
    public static void bmWidth$set(MemorySegment seg, int x) {
        constants$888.const$3.set(seg, x);
    }
    public static int bmWidth$get(MemorySegment seg, long index) {
        return (int)constants$888.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void bmWidth$set(MemorySegment seg, long index, int x) {
        constants$888.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bmHeight$VH() {
        return constants$888.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LONG bmHeight;
     * }
     */
    public static int bmHeight$get(MemorySegment seg) {
        return (int)constants$888.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LONG bmHeight;
     * }
     */
    public static void bmHeight$set(MemorySegment seg, int x) {
        constants$888.const$4.set(seg, x);
    }
    public static int bmHeight$get(MemorySegment seg, long index) {
        return (int)constants$888.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void bmHeight$set(MemorySegment seg, long index, int x) {
        constants$888.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bmWidthBytes$VH() {
        return constants$888.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LONG bmWidthBytes;
     * }
     */
    public static int bmWidthBytes$get(MemorySegment seg) {
        return (int)constants$888.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LONG bmWidthBytes;
     * }
     */
    public static void bmWidthBytes$set(MemorySegment seg, int x) {
        constants$888.const$5.set(seg, x);
    }
    public static int bmWidthBytes$get(MemorySegment seg, long index) {
        return (int)constants$888.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void bmWidthBytes$set(MemorySegment seg, long index, int x) {
        constants$888.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bmPlanes$VH() {
        return constants$889.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD bmPlanes;
     * }
     */
    public static short bmPlanes$get(MemorySegment seg) {
        return (short)constants$889.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD bmPlanes;
     * }
     */
    public static void bmPlanes$set(MemorySegment seg, short x) {
        constants$889.const$0.set(seg, x);
    }
    public static short bmPlanes$get(MemorySegment seg, long index) {
        return (short)constants$889.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void bmPlanes$set(MemorySegment seg, long index, short x) {
        constants$889.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bmBitsPixel$VH() {
        return constants$889.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD bmBitsPixel;
     * }
     */
    public static short bmBitsPixel$get(MemorySegment seg) {
        return (short)constants$889.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD bmBitsPixel;
     * }
     */
    public static void bmBitsPixel$set(MemorySegment seg, short x) {
        constants$889.const$1.set(seg, x);
    }
    public static short bmBitsPixel$get(MemorySegment seg, long index) {
        return (short)constants$889.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void bmBitsPixel$set(MemorySegment seg, long index, short x) {
        constants$889.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bmBits$VH() {
        return constants$889.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPVOID bmBits;
     * }
     */
    public static MemorySegment bmBits$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$889.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPVOID bmBits;
     * }
     */
    public static void bmBits$set(MemorySegment seg, MemorySegment x) {
        constants$889.const$2.set(seg, x);
    }
    public static MemorySegment bmBits$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$889.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void bmBits$set(MemorySegment seg, long index, MemorySegment x) {
        constants$889.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



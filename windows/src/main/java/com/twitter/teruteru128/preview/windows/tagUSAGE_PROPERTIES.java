// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tagUSAGE_PROPERTIES {
 *     USHORT level;
 *     USHORT page;
 *     USHORT usage;
 *     INT32 logicalMinimum;
 *     INT32 logicalMaximum;
 *     USHORT unit;
 *     USHORT exponent;
 *     BYTE count;
 *     INT32 physicalMinimum;
 *     INT32 physicalMaximum;
 * };
 * }
 */
public class tagUSAGE_PROPERTIES {

    public static MemoryLayout $LAYOUT() {
        return constants$1239.const$4;
    }
    public static VarHandle level$VH() {
        return constants$1239.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * USHORT level;
     * }
     */
    public static short level$get(MemorySegment seg) {
        return (short)constants$1239.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * USHORT level;
     * }
     */
    public static void level$set(MemorySegment seg, short x) {
        constants$1239.const$5.set(seg, x);
    }
    public static short level$get(MemorySegment seg, long index) {
        return (short)constants$1239.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void level$set(MemorySegment seg, long index, short x) {
        constants$1239.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle page$VH() {
        return constants$1240.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * USHORT page;
     * }
     */
    public static short page$get(MemorySegment seg) {
        return (short)constants$1240.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * USHORT page;
     * }
     */
    public static void page$set(MemorySegment seg, short x) {
        constants$1240.const$0.set(seg, x);
    }
    public static short page$get(MemorySegment seg, long index) {
        return (short)constants$1240.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void page$set(MemorySegment seg, long index, short x) {
        constants$1240.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle usage$VH() {
        return constants$1240.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * USHORT usage;
     * }
     */
    public static short usage$get(MemorySegment seg) {
        return (short)constants$1240.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * USHORT usage;
     * }
     */
    public static void usage$set(MemorySegment seg, short x) {
        constants$1240.const$1.set(seg, x);
    }
    public static short usage$get(MemorySegment seg, long index) {
        return (short)constants$1240.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void usage$set(MemorySegment seg, long index, short x) {
        constants$1240.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle logicalMinimum$VH() {
        return constants$1240.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * INT32 logicalMinimum;
     * }
     */
    public static int logicalMinimum$get(MemorySegment seg) {
        return (int)constants$1240.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * INT32 logicalMinimum;
     * }
     */
    public static void logicalMinimum$set(MemorySegment seg, int x) {
        constants$1240.const$2.set(seg, x);
    }
    public static int logicalMinimum$get(MemorySegment seg, long index) {
        return (int)constants$1240.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void logicalMinimum$set(MemorySegment seg, long index, int x) {
        constants$1240.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle logicalMaximum$VH() {
        return constants$1240.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * INT32 logicalMaximum;
     * }
     */
    public static int logicalMaximum$get(MemorySegment seg) {
        return (int)constants$1240.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * INT32 logicalMaximum;
     * }
     */
    public static void logicalMaximum$set(MemorySegment seg, int x) {
        constants$1240.const$3.set(seg, x);
    }
    public static int logicalMaximum$get(MemorySegment seg, long index) {
        return (int)constants$1240.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void logicalMaximum$set(MemorySegment seg, long index, int x) {
        constants$1240.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle unit$VH() {
        return constants$1240.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * USHORT unit;
     * }
     */
    public static short unit$get(MemorySegment seg) {
        return (short)constants$1240.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * USHORT unit;
     * }
     */
    public static void unit$set(MemorySegment seg, short x) {
        constants$1240.const$4.set(seg, x);
    }
    public static short unit$get(MemorySegment seg, long index) {
        return (short)constants$1240.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void unit$set(MemorySegment seg, long index, short x) {
        constants$1240.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle exponent$VH() {
        return constants$1240.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * USHORT exponent;
     * }
     */
    public static short exponent$get(MemorySegment seg) {
        return (short)constants$1240.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * USHORT exponent;
     * }
     */
    public static void exponent$set(MemorySegment seg, short x) {
        constants$1240.const$5.set(seg, x);
    }
    public static short exponent$get(MemorySegment seg, long index) {
        return (short)constants$1240.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void exponent$set(MemorySegment seg, long index, short x) {
        constants$1240.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle count$VH() {
        return constants$1241.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE count;
     * }
     */
    public static byte count$get(MemorySegment seg) {
        return (byte)constants$1241.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE count;
     * }
     */
    public static void count$set(MemorySegment seg, byte x) {
        constants$1241.const$0.set(seg, x);
    }
    public static byte count$get(MemorySegment seg, long index) {
        return (byte)constants$1241.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void count$set(MemorySegment seg, long index, byte x) {
        constants$1241.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle physicalMinimum$VH() {
        return constants$1241.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * INT32 physicalMinimum;
     * }
     */
    public static int physicalMinimum$get(MemorySegment seg) {
        return (int)constants$1241.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * INT32 physicalMinimum;
     * }
     */
    public static void physicalMinimum$set(MemorySegment seg, int x) {
        constants$1241.const$1.set(seg, x);
    }
    public static int physicalMinimum$get(MemorySegment seg, long index) {
        return (int)constants$1241.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void physicalMinimum$set(MemorySegment seg, long index, int x) {
        constants$1241.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle physicalMaximum$VH() {
        return constants$1241.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * INT32 physicalMaximum;
     * }
     */
    public static int physicalMaximum$get(MemorySegment seg) {
        return (int)constants$1241.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * INT32 physicalMaximum;
     * }
     */
    public static void physicalMaximum$set(MemorySegment seg, int x) {
        constants$1241.const$2.set(seg, x);
    }
    public static int physicalMaximum$get(MemorySegment seg, long index) {
        return (int)constants$1241.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void physicalMaximum$set(MemorySegment seg, long index, int x) {
        constants$1241.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



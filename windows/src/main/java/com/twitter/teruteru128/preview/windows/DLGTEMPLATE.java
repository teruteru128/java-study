// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct {
 *     DWORD style;
 *     DWORD dwExtendedStyle;
 *     WORD cdit;
 *     short x;
 *     short y;
 *     short cx;
 *     short cy;
 * };
 * }
 */
public class DLGTEMPLATE {

    public static MemoryLayout $LAYOUT() {
        return constants$1206.const$4;
    }
    public static VarHandle style$VH() {
        return constants$1206.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD style;
     * }
     */
    public static int style$get(MemorySegment seg) {
        return (int)constants$1206.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD style;
     * }
     */
    public static void style$set(MemorySegment seg, int x) {
        constants$1206.const$5.set(seg, x);
    }
    public static int style$get(MemorySegment seg, long index) {
        return (int)constants$1206.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void style$set(MemorySegment seg, long index, int x) {
        constants$1206.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwExtendedStyle$VH() {
        return constants$1207.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwExtendedStyle;
     * }
     */
    public static int dwExtendedStyle$get(MemorySegment seg) {
        return (int)constants$1207.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwExtendedStyle;
     * }
     */
    public static void dwExtendedStyle$set(MemorySegment seg, int x) {
        constants$1207.const$0.set(seg, x);
    }
    public static int dwExtendedStyle$get(MemorySegment seg, long index) {
        return (int)constants$1207.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void dwExtendedStyle$set(MemorySegment seg, long index, int x) {
        constants$1207.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cdit$VH() {
        return constants$1207.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD cdit;
     * }
     */
    public static short cdit$get(MemorySegment seg) {
        return (short)constants$1207.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD cdit;
     * }
     */
    public static void cdit$set(MemorySegment seg, short x) {
        constants$1207.const$1.set(seg, x);
    }
    public static short cdit$get(MemorySegment seg, long index) {
        return (short)constants$1207.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void cdit$set(MemorySegment seg, long index, short x) {
        constants$1207.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle x$VH() {
        return constants$1207.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short x;
     * }
     */
    public static short x$get(MemorySegment seg) {
        return (short)constants$1207.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short x;
     * }
     */
    public static void x$set(MemorySegment seg, short x) {
        constants$1207.const$2.set(seg, x);
    }
    public static short x$get(MemorySegment seg, long index) {
        return (short)constants$1207.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void x$set(MemorySegment seg, long index, short x) {
        constants$1207.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle y$VH() {
        return constants$1207.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short y;
     * }
     */
    public static short y$get(MemorySegment seg) {
        return (short)constants$1207.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short y;
     * }
     */
    public static void y$set(MemorySegment seg, short x) {
        constants$1207.const$3.set(seg, x);
    }
    public static short y$get(MemorySegment seg, long index) {
        return (short)constants$1207.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void y$set(MemorySegment seg, long index, short x) {
        constants$1207.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cx$VH() {
        return constants$1207.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short cx;
     * }
     */
    public static short cx$get(MemorySegment seg) {
        return (short)constants$1207.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short cx;
     * }
     */
    public static void cx$set(MemorySegment seg, short x) {
        constants$1207.const$4.set(seg, x);
    }
    public static short cx$get(MemorySegment seg, long index) {
        return (short)constants$1207.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void cx$set(MemorySegment seg, long index, short x) {
        constants$1207.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cy$VH() {
        return constants$1207.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short cy;
     * }
     */
    public static short cy$get(MemorySegment seg) {
        return (short)constants$1207.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short cy;
     * }
     */
    public static void cy$set(MemorySegment seg, short x) {
        constants$1207.const$5.set(seg, x);
    }
    public static short cy$get(MemorySegment seg, long index) {
        return (short)constants$1207.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void cy$set(MemorySegment seg, long index, short x) {
        constants$1207.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _QUERY_SERVICE_CONFIGA {
 *     DWORD dwServiceType;
 *     DWORD dwStartType;
 *     DWORD dwErrorControl;
 *     LPSTR lpBinaryPathName;
 *     LPSTR lpLoadOrderGroup;
 *     DWORD dwTagId;
 *     LPSTR lpDependencies;
 *     LPSTR lpServiceStartName;
 *     LPSTR lpDisplayName;
 * };
 * }
 */
public class _QUERY_SERVICE_CONFIGA {

    public static MemoryLayout $LAYOUT() {
        return constants$4494.const$1;
    }
    public static VarHandle dwServiceType$VH() {
        return constants$4494.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwServiceType;
     * }
     */
    public static int dwServiceType$get(MemorySegment seg) {
        return (int)constants$4494.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwServiceType;
     * }
     */
    public static void dwServiceType$set(MemorySegment seg, int x) {
        constants$4494.const$2.set(seg, x);
    }
    public static int dwServiceType$get(MemorySegment seg, long index) {
        return (int)constants$4494.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void dwServiceType$set(MemorySegment seg, long index, int x) {
        constants$4494.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwStartType$VH() {
        return constants$4494.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwStartType;
     * }
     */
    public static int dwStartType$get(MemorySegment seg) {
        return (int)constants$4494.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwStartType;
     * }
     */
    public static void dwStartType$set(MemorySegment seg, int x) {
        constants$4494.const$3.set(seg, x);
    }
    public static int dwStartType$get(MemorySegment seg, long index) {
        return (int)constants$4494.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void dwStartType$set(MemorySegment seg, long index, int x) {
        constants$4494.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwErrorControl$VH() {
        return constants$4494.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwErrorControl;
     * }
     */
    public static int dwErrorControl$get(MemorySegment seg) {
        return (int)constants$4494.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwErrorControl;
     * }
     */
    public static void dwErrorControl$set(MemorySegment seg, int x) {
        constants$4494.const$4.set(seg, x);
    }
    public static int dwErrorControl$get(MemorySegment seg, long index) {
        return (int)constants$4494.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void dwErrorControl$set(MemorySegment seg, long index, int x) {
        constants$4494.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lpBinaryPathName$VH() {
        return constants$4494.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPSTR lpBinaryPathName;
     * }
     */
    public static MemorySegment lpBinaryPathName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4494.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPSTR lpBinaryPathName;
     * }
     */
    public static void lpBinaryPathName$set(MemorySegment seg, MemorySegment x) {
        constants$4494.const$5.set(seg, x);
    }
    public static MemorySegment lpBinaryPathName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4494.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void lpBinaryPathName$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4494.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lpLoadOrderGroup$VH() {
        return constants$4495.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPSTR lpLoadOrderGroup;
     * }
     */
    public static MemorySegment lpLoadOrderGroup$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4495.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPSTR lpLoadOrderGroup;
     * }
     */
    public static void lpLoadOrderGroup$set(MemorySegment seg, MemorySegment x) {
        constants$4495.const$0.set(seg, x);
    }
    public static MemorySegment lpLoadOrderGroup$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4495.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void lpLoadOrderGroup$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4495.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwTagId$VH() {
        return constants$4495.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwTagId;
     * }
     */
    public static int dwTagId$get(MemorySegment seg) {
        return (int)constants$4495.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwTagId;
     * }
     */
    public static void dwTagId$set(MemorySegment seg, int x) {
        constants$4495.const$1.set(seg, x);
    }
    public static int dwTagId$get(MemorySegment seg, long index) {
        return (int)constants$4495.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void dwTagId$set(MemorySegment seg, long index, int x) {
        constants$4495.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lpDependencies$VH() {
        return constants$4495.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPSTR lpDependencies;
     * }
     */
    public static MemorySegment lpDependencies$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4495.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPSTR lpDependencies;
     * }
     */
    public static void lpDependencies$set(MemorySegment seg, MemorySegment x) {
        constants$4495.const$2.set(seg, x);
    }
    public static MemorySegment lpDependencies$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4495.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void lpDependencies$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4495.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lpServiceStartName$VH() {
        return constants$4495.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPSTR lpServiceStartName;
     * }
     */
    public static MemorySegment lpServiceStartName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4495.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPSTR lpServiceStartName;
     * }
     */
    public static void lpServiceStartName$set(MemorySegment seg, MemorySegment x) {
        constants$4495.const$3.set(seg, x);
    }
    public static MemorySegment lpServiceStartName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4495.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void lpServiceStartName$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4495.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lpDisplayName$VH() {
        return constants$4495.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPSTR lpDisplayName;
     * }
     */
    public static MemorySegment lpDisplayName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4495.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPSTR lpDisplayName;
     * }
     */
    public static void lpDisplayName$set(MemorySegment seg, MemorySegment x) {
        constants$4495.const$4.set(seg, x);
    }
    public static MemorySegment lpDisplayName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4495.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void lpDisplayName$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4495.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



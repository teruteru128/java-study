// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class Windows_h_16 extends Windows_h_15 {

    /**
     * {@snippet :
     * enum _DISPLAYCONFIG_COLOR_ENCODING.DISPLAYCONFIG_COLOR_ENCODING_INTENSITY = 4;
     * }
     */
    public static int DISPLAYCONFIG_COLOR_ENCODING_INTENSITY() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum _DISPLAYCONFIG_COLOR_ENCODING.DISPLAYCONFIG_COLOR_ENCODING_FORCE_UINT32 = -1;
     * }
     */
    public static int DISPLAYCONFIG_COLOR_ENCODING_FORCE_UINT32() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * typedef struct _RGNDATAHEADER* PRGNDATAHEADER;
     * }
     */
    public static final AddressLayout PRGNDATAHEADER = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _RGNDATA* PRGNDATA;
     * }
     */
    public static final AddressLayout PRGNDATA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _RGNDATA* NPRGNDATA;
     * }
     */
    public static final AddressLayout NPRGNDATA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _RGNDATA* LPRGNDATA;
     * }
     */
    public static final AddressLayout LPRGNDATA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _ABC* PABC;
     * }
     */
    public static final AddressLayout PABC = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _ABC* NPABC;
     * }
     */
    public static final AddressLayout NPABC = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _ABC* LPABC;
     * }
     */
    public static final AddressLayout LPABC = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _ABCFLOAT* PABCFLOAT;
     * }
     */
    public static final AddressLayout PABCFLOAT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _ABCFLOAT* NPABCFLOAT;
     * }
     */
    public static final AddressLayout NPABCFLOAT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _ABCFLOAT* LPABCFLOAT;
     * }
     */
    public static final AddressLayout LPABCFLOAT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _OUTLINETEXTMETRICA* POUTLINETEXTMETRICA;
     * }
     */
    public static final AddressLayout POUTLINETEXTMETRICA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _OUTLINETEXTMETRICA* NPOUTLINETEXTMETRICA;
     * }
     */
    public static final AddressLayout NPOUTLINETEXTMETRICA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _OUTLINETEXTMETRICA* LPOUTLINETEXTMETRICA;
     * }
     */
    public static final AddressLayout LPOUTLINETEXTMETRICA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _OUTLINETEXTMETRICW* POUTLINETEXTMETRICW;
     * }
     */
    public static final AddressLayout POUTLINETEXTMETRICW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _OUTLINETEXTMETRICW* NPOUTLINETEXTMETRICW;
     * }
     */
    public static final AddressLayout NPOUTLINETEXTMETRICW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _OUTLINETEXTMETRICW* LPOUTLINETEXTMETRICW;
     * }
     */
    public static final AddressLayout LPOUTLINETEXTMETRICW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _OUTLINETEXTMETRICA* POUTLINETEXTMETRIC;
     * }
     */
    public static final AddressLayout POUTLINETEXTMETRIC = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _OUTLINETEXTMETRICA* NPOUTLINETEXTMETRIC;
     * }
     */
    public static final AddressLayout NPOUTLINETEXTMETRIC = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _OUTLINETEXTMETRICA* LPOUTLINETEXTMETRIC;
     * }
     */
    public static final AddressLayout LPOUTLINETEXTMETRIC = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagPOLYTEXTA* PPOLYTEXTA;
     * }
     */
    public static final AddressLayout PPOLYTEXTA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagPOLYTEXTA* NPPOLYTEXTA;
     * }
     */
    public static final AddressLayout NPPOLYTEXTA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagPOLYTEXTA* LPPOLYTEXTA;
     * }
     */
    public static final AddressLayout LPPOLYTEXTA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagPOLYTEXTW* PPOLYTEXTW;
     * }
     */
    public static final AddressLayout PPOLYTEXTW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagPOLYTEXTW* NPPOLYTEXTW;
     * }
     */
    public static final AddressLayout NPPOLYTEXTW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagPOLYTEXTW* LPPOLYTEXTW;
     * }
     */
    public static final AddressLayout LPPOLYTEXTW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagPOLYTEXTA* PPOLYTEXT;
     * }
     */
    public static final AddressLayout PPOLYTEXT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagPOLYTEXTA* NPPOLYTEXT;
     * }
     */
    public static final AddressLayout NPPOLYTEXT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagPOLYTEXTA* LPPOLYTEXT;
     * }
     */
    public static final AddressLayout LPPOLYTEXT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _MAT2* LPMAT2;
     * }
     */
    public static final AddressLayout LPMAT2 = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GLYPHMETRICS* LPGLYPHMETRICS;
     * }
     */
    public static final AddressLayout LPGLYPHMETRICS = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagPOINTFX* LPPOINTFX;
     * }
     */
    public static final AddressLayout LPPOINTFX = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagTTPOLYCURVE* LPTTPOLYCURVE;
     * }
     */
    public static final AddressLayout LPTTPOLYCURVE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagTTPOLYGONHEADER* LPTTPOLYGONHEADER;
     * }
     */
    public static final AddressLayout LPTTPOLYGONHEADER = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagGCP_RESULTSA* LPGCP_RESULTSA;
     * }
     */
    public static final AddressLayout LPGCP_RESULTSA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagGCP_RESULTSW* LPGCP_RESULTSW;
     * }
     */
    public static final AddressLayout LPGCP_RESULTSW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagGCP_RESULTSA* LPGCP_RESULTS;
     * }
     */
    public static final AddressLayout LPGCP_RESULTS = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _RASTERIZER_STATUS* LPRASTERIZER_STATUS;
     * }
     */
    public static final AddressLayout LPRASTERIZER_STATUS = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagPIXELFORMATDESCRIPTOR* PPIXELFORMATDESCRIPTOR;
     * }
     */
    public static final AddressLayout PPIXELFORMATDESCRIPTOR = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagPIXELFORMATDESCRIPTOR* LPPIXELFORMATDESCRIPTOR;
     * }
     */
    public static final AddressLayout LPPIXELFORMATDESCRIPTOR = RuntimeHelper.POINTER;
    public static MethodHandle AddFontResourceA$MH() {
        return RuntimeHelper.requireNonNull(constants$995.const$2,"AddFontResourceA");
    }
    /**
     * {@snippet :
     * int AddFontResourceA(LPCSTR);
     * }
     */
    public static int AddFontResourceA(MemorySegment x0) {
        var mh$ = AddFontResourceA$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddFontResourceW$MH() {
        return RuntimeHelper.requireNonNull(constants$995.const$3,"AddFontResourceW");
    }
    /**
     * {@snippet :
     * int AddFontResourceW(LPCWSTR);
     * }
     */
    public static int AddFontResourceW(MemorySegment x0) {
        var mh$ = AddFontResourceW$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AnimatePalette$MH() {
        return RuntimeHelper.requireNonNull(constants$995.const$4,"AnimatePalette");
    }
    /**
     * {@snippet :
     * BOOL AnimatePalette(HPALETTE hPal, UINT iStartIndex, UINT cEntries, const PALETTEENTRY* ppe);
     * }
     */
    public static int AnimatePalette(MemorySegment hPal, int iStartIndex, int cEntries, MemorySegment ppe) {
        var mh$ = AnimatePalette$MH();
        try {
            return (int)mh$.invokeExact(hPal, iStartIndex, cEntries, ppe);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Arc$MH() {
        return RuntimeHelper.requireNonNull(constants$995.const$6,"Arc");
    }
    /**
     * {@snippet :
     * BOOL Arc(HDC hdc, int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4);
     * }
     */
    public static int Arc(MemorySegment hdc, int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4) {
        var mh$ = Arc$MH();
        try {
            return (int)mh$.invokeExact(hdc, x1, y1, x2, y2, x3, y3, x4, y4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BitBlt$MH() {
        return RuntimeHelper.requireNonNull(constants$996.const$1,"BitBlt");
    }
    /**
     * {@snippet :
     * BOOL BitBlt(HDC hdc, int x, int y, int cx, int cy, HDC hdcSrc, int x1, int y1, DWORD rop);
     * }
     */
    public static int BitBlt(MemorySegment hdc, int x, int y, int cx, int cy, MemorySegment hdcSrc, int x1, int y1, int rop) {
        var mh$ = BitBlt$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, cx, cy, hdcSrc, x1, y1, rop);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CancelDC$MH() {
        return RuntimeHelper.requireNonNull(constants$996.const$2,"CancelDC");
    }
    /**
     * {@snippet :
     * BOOL CancelDC(HDC hdc);
     * }
     */
    public static int CancelDC(MemorySegment hdc) {
        var mh$ = CancelDC$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Chord$MH() {
        return RuntimeHelper.requireNonNull(constants$996.const$3,"Chord");
    }
    /**
     * {@snippet :
     * BOOL Chord(HDC hdc, int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4);
     * }
     */
    public static int Chord(MemorySegment hdc, int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4) {
        var mh$ = Chord$MH();
        try {
            return (int)mh$.invokeExact(hdc, x1, y1, x2, y2, x3, y3, x4, y4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ChoosePixelFormat$MH() {
        return RuntimeHelper.requireNonNull(constants$996.const$4,"ChoosePixelFormat");
    }
    /**
     * {@snippet :
     * int ChoosePixelFormat(HDC hdc, const PIXELFORMATDESCRIPTOR* ppfd);
     * }
     */
    public static int ChoosePixelFormat(MemorySegment hdc, MemorySegment ppfd) {
        var mh$ = ChoosePixelFormat$MH();
        try {
            return (int)mh$.invokeExact(hdc, ppfd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CloseMetaFile$MH() {
        return RuntimeHelper.requireNonNull(constants$996.const$5,"CloseMetaFile");
    }
    /**
     * {@snippet :
     * HMETAFILE CloseMetaFile(HDC hdc);
     * }
     */
    public static MemorySegment CloseMetaFile(MemorySegment hdc) {
        var mh$ = CloseMetaFile$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CombineRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$997.const$0,"CombineRgn");
    }
    /**
     * {@snippet :
     * int CombineRgn(HRGN hrgnDst, HRGN hrgnSrc1, HRGN hrgnSrc2, int iMode);
     * }
     */
    public static int CombineRgn(MemorySegment hrgnDst, MemorySegment hrgnSrc1, MemorySegment hrgnSrc2, int iMode) {
        var mh$ = CombineRgn$MH();
        try {
            return (int)mh$.invokeExact(hrgnDst, hrgnSrc1, hrgnSrc2, iMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CopyMetaFileA$MH() {
        return RuntimeHelper.requireNonNull(constants$997.const$1,"CopyMetaFileA");
    }
    /**
     * {@snippet :
     * HMETAFILE CopyMetaFileA(HMETAFILE, LPCSTR);
     * }
     */
    public static MemorySegment CopyMetaFileA(MemorySegment x0, MemorySegment x1) {
        var mh$ = CopyMetaFileA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CopyMetaFileW$MH() {
        return RuntimeHelper.requireNonNull(constants$997.const$2,"CopyMetaFileW");
    }
    /**
     * {@snippet :
     * HMETAFILE CopyMetaFileW(HMETAFILE, LPCWSTR);
     * }
     */
    public static MemorySegment CopyMetaFileW(MemorySegment x0, MemorySegment x1) {
        var mh$ = CopyMetaFileW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateBitmap$MH() {
        return RuntimeHelper.requireNonNull(constants$997.const$4,"CreateBitmap");
    }
    /**
     * {@snippet :
     * HBITMAP CreateBitmap(int nWidth, int nHeight, UINT nPlanes, UINT nBitCount, void* lpBits);
     * }
     */
    public static MemorySegment CreateBitmap(int nWidth, int nHeight, int nPlanes, int nBitCount, MemorySegment lpBits) {
        var mh$ = CreateBitmap$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(nWidth, nHeight, nPlanes, nBitCount, lpBits);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateBitmapIndirect$MH() {
        return RuntimeHelper.requireNonNull(constants$997.const$5,"CreateBitmapIndirect");
    }
    /**
     * {@snippet :
     * HBITMAP CreateBitmapIndirect(const BITMAP* pbm);
     * }
     */
    public static MemorySegment CreateBitmapIndirect(MemorySegment pbm) {
        var mh$ = CreateBitmapIndirect$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(pbm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateBrushIndirect$MH() {
        return RuntimeHelper.requireNonNull(constants$998.const$0,"CreateBrushIndirect");
    }
    /**
     * {@snippet :
     * HBRUSH CreateBrushIndirect(const LOGBRUSH* plbrush);
     * }
     */
    public static MemorySegment CreateBrushIndirect(MemorySegment plbrush) {
        var mh$ = CreateBrushIndirect$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(plbrush);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateCompatibleBitmap$MH() {
        return RuntimeHelper.requireNonNull(constants$998.const$1,"CreateCompatibleBitmap");
    }
    /**
     * {@snippet :
     * HBITMAP CreateCompatibleBitmap(HDC hdc, int cx, int cy);
     * }
     */
    public static MemorySegment CreateCompatibleBitmap(MemorySegment hdc, int cx, int cy) {
        var mh$ = CreateCompatibleBitmap$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hdc, cx, cy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDiscardableBitmap$MH() {
        return RuntimeHelper.requireNonNull(constants$998.const$2,"CreateDiscardableBitmap");
    }
    /**
     * {@snippet :
     * HBITMAP CreateDiscardableBitmap(HDC hdc, int cx, int cy);
     * }
     */
    public static MemorySegment CreateDiscardableBitmap(MemorySegment hdc, int cx, int cy) {
        var mh$ = CreateDiscardableBitmap$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hdc, cx, cy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateCompatibleDC$MH() {
        return RuntimeHelper.requireNonNull(constants$998.const$3,"CreateCompatibleDC");
    }
    /**
     * {@snippet :
     * HDC CreateCompatibleDC(HDC hdc);
     * }
     */
    public static MemorySegment CreateCompatibleDC(MemorySegment hdc) {
        var mh$ = CreateCompatibleDC$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDCA$MH() {
        return RuntimeHelper.requireNonNull(constants$998.const$4,"CreateDCA");
    }
    /**
     * {@snippet :
     * HDC CreateDCA(LPCSTR pwszDriver, LPCSTR pwszDevice, LPCSTR pszPort, const DEVMODEA* pdm);
     * }
     */
    public static MemorySegment CreateDCA(MemorySegment pwszDriver, MemorySegment pwszDevice, MemorySegment pszPort, MemorySegment pdm) {
        var mh$ = CreateDCA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(pwszDriver, pwszDevice, pszPort, pdm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDCW$MH() {
        return RuntimeHelper.requireNonNull(constants$998.const$5,"CreateDCW");
    }
    /**
     * {@snippet :
     * HDC CreateDCW(LPCWSTR pwszDriver, LPCWSTR pwszDevice, LPCWSTR pszPort, const DEVMODEW* pdm);
     * }
     */
    public static MemorySegment CreateDCW(MemorySegment pwszDriver, MemorySegment pwszDevice, MemorySegment pszPort, MemorySegment pdm) {
        var mh$ = CreateDCW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(pwszDriver, pwszDevice, pszPort, pdm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDIBitmap$MH() {
        return RuntimeHelper.requireNonNull(constants$999.const$1,"CreateDIBitmap");
    }
    /**
     * {@snippet :
     * HBITMAP CreateDIBitmap(HDC hdc, const BITMAPINFOHEADER* pbmih, DWORD flInit, void* pjBits, const BITMAPINFO* pbmi, UINT iUsage);
     * }
     */
    public static MemorySegment CreateDIBitmap(MemorySegment hdc, MemorySegment pbmih, int flInit, MemorySegment pjBits, MemorySegment pbmi, int iUsage) {
        var mh$ = CreateDIBitmap$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hdc, pbmih, flInit, pjBits, pbmi, iUsage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDIBPatternBrush$MH() {
        return RuntimeHelper.requireNonNull(constants$999.const$2,"CreateDIBPatternBrush");
    }
    /**
     * {@snippet :
     * HBRUSH CreateDIBPatternBrush(HGLOBAL h, UINT iUsage);
     * }
     */
    public static MemorySegment CreateDIBPatternBrush(MemorySegment h, int iUsage) {
        var mh$ = CreateDIBPatternBrush$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(h, iUsage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDIBPatternBrushPt$MH() {
        return RuntimeHelper.requireNonNull(constants$999.const$3,"CreateDIBPatternBrushPt");
    }
    /**
     * {@snippet :
     * HBRUSH CreateDIBPatternBrushPt(void* lpPackedDIB, UINT iUsage);
     * }
     */
    public static MemorySegment CreateDIBPatternBrushPt(MemorySegment lpPackedDIB, int iUsage) {
        var mh$ = CreateDIBPatternBrushPt$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpPackedDIB, iUsage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateEllipticRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$999.const$5,"CreateEllipticRgn");
    }
    /**
     * {@snippet :
     * HRGN CreateEllipticRgn(int x1, int y1, int x2, int y2);
     * }
     */
    public static MemorySegment CreateEllipticRgn(int x1, int y1, int x2, int y2) {
        var mh$ = CreateEllipticRgn$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x1, y1, x2, y2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateEllipticRgnIndirect$MH() {
        return RuntimeHelper.requireNonNull(constants$1000.const$0,"CreateEllipticRgnIndirect");
    }
    /**
     * {@snippet :
     * HRGN CreateEllipticRgnIndirect(const RECT* lprect);
     * }
     */
    public static MemorySegment CreateEllipticRgnIndirect(MemorySegment lprect) {
        var mh$ = CreateEllipticRgnIndirect$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lprect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateFontIndirectA$MH() {
        return RuntimeHelper.requireNonNull(constants$1000.const$1,"CreateFontIndirectA");
    }
    /**
     * {@snippet :
     * HFONT CreateFontIndirectA(const LOGFONTA* lplf);
     * }
     */
    public static MemorySegment CreateFontIndirectA(MemorySegment lplf) {
        var mh$ = CreateFontIndirectA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lplf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateFontIndirectW$MH() {
        return RuntimeHelper.requireNonNull(constants$1000.const$2,"CreateFontIndirectW");
    }
    /**
     * {@snippet :
     * HFONT CreateFontIndirectW(const LOGFONTW* lplf);
     * }
     */
    public static MemorySegment CreateFontIndirectW(MemorySegment lplf) {
        var mh$ = CreateFontIndirectW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lplf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateFontA$MH() {
        return RuntimeHelper.requireNonNull(constants$1000.const$4,"CreateFontA");
    }
    /**
     * {@snippet :
     * HFONT CreateFontA(int cHeight, int cWidth, int cEscapement, int cOrientation, int cWeight, DWORD bItalic, DWORD bUnderline, DWORD bStrikeOut, DWORD iCharSet, DWORD iOutPrecision, DWORD iClipPrecision, DWORD iQuality, DWORD iPitchAndFamily, LPCSTR pszFaceName);
     * }
     */
    public static MemorySegment CreateFontA(int cHeight, int cWidth, int cEscapement, int cOrientation, int cWeight, int bItalic, int bUnderline, int bStrikeOut, int iCharSet, int iOutPrecision, int iClipPrecision, int iQuality, int iPitchAndFamily, MemorySegment pszFaceName) {
        var mh$ = CreateFontA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(cHeight, cWidth, cEscapement, cOrientation, cWeight, bItalic, bUnderline, bStrikeOut, iCharSet, iOutPrecision, iClipPrecision, iQuality, iPitchAndFamily, pszFaceName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateFontW$MH() {
        return RuntimeHelper.requireNonNull(constants$1000.const$5,"CreateFontW");
    }
    /**
     * {@snippet :
     * HFONT CreateFontW(int cHeight, int cWidth, int cEscapement, int cOrientation, int cWeight, DWORD bItalic, DWORD bUnderline, DWORD bStrikeOut, DWORD iCharSet, DWORD iOutPrecision, DWORD iClipPrecision, DWORD iQuality, DWORD iPitchAndFamily, LPCWSTR pszFaceName);
     * }
     */
    public static MemorySegment CreateFontW(int cHeight, int cWidth, int cEscapement, int cOrientation, int cWeight, int bItalic, int bUnderline, int bStrikeOut, int iCharSet, int iOutPrecision, int iClipPrecision, int iQuality, int iPitchAndFamily, MemorySegment pszFaceName) {
        var mh$ = CreateFontW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(cHeight, cWidth, cEscapement, cOrientation, cWeight, bItalic, bUnderline, bStrikeOut, iCharSet, iOutPrecision, iClipPrecision, iQuality, iPitchAndFamily, pszFaceName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateHatchBrush$MH() {
        return RuntimeHelper.requireNonNull(constants$1001.const$1,"CreateHatchBrush");
    }
    /**
     * {@snippet :
     * HBRUSH CreateHatchBrush(int iHatch, COLORREF color);
     * }
     */
    public static MemorySegment CreateHatchBrush(int iHatch, int color) {
        var mh$ = CreateHatchBrush$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(iHatch, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateICA$MH() {
        return RuntimeHelper.requireNonNull(constants$1001.const$2,"CreateICA");
    }
    /**
     * {@snippet :
     * HDC CreateICA(LPCSTR pszDriver, LPCSTR pszDevice, LPCSTR pszPort, const DEVMODEA* pdm);
     * }
     */
    public static MemorySegment CreateICA(MemorySegment pszDriver, MemorySegment pszDevice, MemorySegment pszPort, MemorySegment pdm) {
        var mh$ = CreateICA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(pszDriver, pszDevice, pszPort, pdm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateICW$MH() {
        return RuntimeHelper.requireNonNull(constants$1001.const$3,"CreateICW");
    }
    /**
     * {@snippet :
     * HDC CreateICW(LPCWSTR pszDriver, LPCWSTR pszDevice, LPCWSTR pszPort, const DEVMODEW* pdm);
     * }
     */
    public static MemorySegment CreateICW(MemorySegment pszDriver, MemorySegment pszDevice, MemorySegment pszPort, MemorySegment pdm) {
        var mh$ = CreateICW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(pszDriver, pszDevice, pszPort, pdm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateMetaFileA$MH() {
        return RuntimeHelper.requireNonNull(constants$1001.const$4,"CreateMetaFileA");
    }
    /**
     * {@snippet :
     * HDC CreateMetaFileA(LPCSTR pszFile);
     * }
     */
    public static MemorySegment CreateMetaFileA(MemorySegment pszFile) {
        var mh$ = CreateMetaFileA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(pszFile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateMetaFileW$MH() {
        return RuntimeHelper.requireNonNull(constants$1001.const$5,"CreateMetaFileW");
    }
    /**
     * {@snippet :
     * HDC CreateMetaFileW(LPCWSTR pszFile);
     * }
     */
    public static MemorySegment CreateMetaFileW(MemorySegment pszFile) {
        var mh$ = CreateMetaFileW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(pszFile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreatePalette$MH() {
        return RuntimeHelper.requireNonNull(constants$1002.const$0,"CreatePalette");
    }
    /**
     * {@snippet :
     * HPALETTE CreatePalette(const LOGPALETTE* plpal);
     * }
     */
    public static MemorySegment CreatePalette(MemorySegment plpal) {
        var mh$ = CreatePalette$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(plpal);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreatePen$MH() {
        return RuntimeHelper.requireNonNull(constants$1002.const$1,"CreatePen");
    }
    /**
     * {@snippet :
     * HPEN CreatePen(int iStyle, int cWidth, COLORREF color);
     * }
     */
    public static MemorySegment CreatePen(int iStyle, int cWidth, int color) {
        var mh$ = CreatePen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(iStyle, cWidth, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreatePenIndirect$MH() {
        return RuntimeHelper.requireNonNull(constants$1002.const$2,"CreatePenIndirect");
    }
    /**
     * {@snippet :
     * HPEN CreatePenIndirect(const LOGPEN* plpen);
     * }
     */
    public static MemorySegment CreatePenIndirect(MemorySegment plpen) {
        var mh$ = CreatePenIndirect$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(plpen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreatePolyPolygonRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$1002.const$3,"CreatePolyPolygonRgn");
    }
    /**
     * {@snippet :
     * HRGN CreatePolyPolygonRgn(const POINT* pptl, const INT* pc, int cPoly, int iMode);
     * }
     */
    public static MemorySegment CreatePolyPolygonRgn(MemorySegment pptl, MemorySegment pc, int cPoly, int iMode) {
        var mh$ = CreatePolyPolygonRgn$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(pptl, pc, cPoly, iMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreatePatternBrush$MH() {
        return RuntimeHelper.requireNonNull(constants$1002.const$4,"CreatePatternBrush");
    }
    /**
     * {@snippet :
     * HBRUSH CreatePatternBrush(HBITMAP hbm);
     * }
     */
    public static MemorySegment CreatePatternBrush(MemorySegment hbm) {
        var mh$ = CreatePatternBrush$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hbm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateRectRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$1002.const$5,"CreateRectRgn");
    }
    /**
     * {@snippet :
     * HRGN CreateRectRgn(int x1, int y1, int x2, int y2);
     * }
     */
    public static MemorySegment CreateRectRgn(int x1, int y1, int x2, int y2) {
        var mh$ = CreateRectRgn$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x1, y1, x2, y2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateRectRgnIndirect$MH() {
        return RuntimeHelper.requireNonNull(constants$1003.const$0,"CreateRectRgnIndirect");
    }
    /**
     * {@snippet :
     * HRGN CreateRectRgnIndirect(const RECT* lprect);
     * }
     */
    public static MemorySegment CreateRectRgnIndirect(MemorySegment lprect) {
        var mh$ = CreateRectRgnIndirect$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lprect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateRoundRectRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$1003.const$2,"CreateRoundRectRgn");
    }
    /**
     * {@snippet :
     * HRGN CreateRoundRectRgn(int x1, int y1, int x2, int y2, int w, int h);
     * }
     */
    public static MemorySegment CreateRoundRectRgn(int x1, int y1, int x2, int y2, int w, int h) {
        var mh$ = CreateRoundRectRgn$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x1, y1, x2, y2, w, h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateScalableFontResourceA$MH() {
        return RuntimeHelper.requireNonNull(constants$1003.const$3,"CreateScalableFontResourceA");
    }
    /**
     * {@snippet :
     * BOOL CreateScalableFontResourceA(DWORD fdwHidden, LPCSTR lpszFont, LPCSTR lpszFile, LPCSTR lpszPath);
     * }
     */
    public static int CreateScalableFontResourceA(int fdwHidden, MemorySegment lpszFont, MemorySegment lpszFile, MemorySegment lpszPath) {
        var mh$ = CreateScalableFontResourceA$MH();
        try {
            return (int)mh$.invokeExact(fdwHidden, lpszFont, lpszFile, lpszPath);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateScalableFontResourceW$MH() {
        return RuntimeHelper.requireNonNull(constants$1003.const$4,"CreateScalableFontResourceW");
    }
    /**
     * {@snippet :
     * BOOL CreateScalableFontResourceW(DWORD fdwHidden, LPCWSTR lpszFont, LPCWSTR lpszFile, LPCWSTR lpszPath);
     * }
     */
    public static int CreateScalableFontResourceW(int fdwHidden, MemorySegment lpszFont, MemorySegment lpszFile, MemorySegment lpszPath) {
        var mh$ = CreateScalableFontResourceW$MH();
        try {
            return (int)mh$.invokeExact(fdwHidden, lpszFont, lpszFile, lpszPath);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateSolidBrush$MH() {
        return RuntimeHelper.requireNonNull(constants$1003.const$5,"CreateSolidBrush");
    }
    /**
     * {@snippet :
     * HBRUSH CreateSolidBrush(COLORREF color);
     * }
     */
    public static MemorySegment CreateSolidBrush(int color) {
        var mh$ = CreateSolidBrush$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteDC$MH() {
        return RuntimeHelper.requireNonNull(constants$1004.const$0,"DeleteDC");
    }
    /**
     * {@snippet :
     * BOOL DeleteDC(HDC hdc);
     * }
     */
    public static int DeleteDC(MemorySegment hdc) {
        var mh$ = DeleteDC$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteMetaFile$MH() {
        return RuntimeHelper.requireNonNull(constants$1004.const$1,"DeleteMetaFile");
    }
    /**
     * {@snippet :
     * BOOL DeleteMetaFile(HMETAFILE hmf);
     * }
     */
    public static int DeleteMetaFile(MemorySegment hmf) {
        var mh$ = DeleteMetaFile$MH();
        try {
            return (int)mh$.invokeExact(hmf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteObject$MH() {
        return RuntimeHelper.requireNonNull(constants$1004.const$2,"DeleteObject");
    }
    /**
     * {@snippet :
     * BOOL DeleteObject(HGDIOBJ ho);
     * }
     */
    public static int DeleteObject(MemorySegment ho) {
        var mh$ = DeleteObject$MH();
        try {
            return (int)mh$.invokeExact(ho);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DescribePixelFormat$MH() {
        return RuntimeHelper.requireNonNull(constants$1004.const$3,"DescribePixelFormat");
    }
    /**
     * {@snippet :
     * int DescribePixelFormat(HDC hdc, int iPixelFormat, UINT nBytes, LPPIXELFORMATDESCRIPTOR ppfd);
     * }
     */
    public static int DescribePixelFormat(MemorySegment hdc, int iPixelFormat, int nBytes, MemorySegment ppfd) {
        var mh$ = DescribePixelFormat$MH();
        try {
            return (int)mh$.invokeExact(hdc, iPixelFormat, nBytes, ppfd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeviceCapabilitiesA$MH() {
        return RuntimeHelper.requireNonNull(constants$1005.const$4,"DeviceCapabilitiesA");
    }
    /**
     * {@snippet :
     * int DeviceCapabilitiesA(LPCSTR pDevice, LPCSTR pPort, WORD fwCapability, LPSTR pOutput, const DEVMODEA* pDevMode);
     * }
     */
    public static int DeviceCapabilitiesA(MemorySegment pDevice, MemorySegment pPort, short fwCapability, MemorySegment pOutput, MemorySegment pDevMode) {
        var mh$ = DeviceCapabilitiesA$MH();
        try {
            return (int)mh$.invokeExact(pDevice, pPort, fwCapability, pOutput, pDevMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeviceCapabilitiesW$MH() {
        return RuntimeHelper.requireNonNull(constants$1005.const$5,"DeviceCapabilitiesW");
    }
    /**
     * {@snippet :
     * int DeviceCapabilitiesW(LPCWSTR pDevice, LPCWSTR pPort, WORD fwCapability, LPWSTR pOutput, const DEVMODEW* pDevMode);
     * }
     */
    public static int DeviceCapabilitiesW(MemorySegment pDevice, MemorySegment pPort, short fwCapability, MemorySegment pOutput, MemorySegment pDevMode) {
        var mh$ = DeviceCapabilitiesW$MH();
        try {
            return (int)mh$.invokeExact(pDevice, pPort, fwCapability, pOutput, pDevMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawEscape$MH() {
        return RuntimeHelper.requireNonNull(constants$1006.const$0,"DrawEscape");
    }
    /**
     * {@snippet :
     * int DrawEscape(HDC hdc, int iEscape, int cjIn, LPCSTR lpIn);
     * }
     */
    public static int DrawEscape(MemorySegment hdc, int iEscape, int cjIn, MemorySegment lpIn) {
        var mh$ = DrawEscape$MH();
        try {
            return (int)mh$.invokeExact(hdc, iEscape, cjIn, lpIn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Ellipse$MH() {
        return RuntimeHelper.requireNonNull(constants$1006.const$1,"Ellipse");
    }
    /**
     * {@snippet :
     * BOOL Ellipse(HDC hdc, int left, int top, int right, int bottom);
     * }
     */
    public static int Ellipse(MemorySegment hdc, int left, int top, int right, int bottom) {
        var mh$ = Ellipse$MH();
        try {
            return (int)mh$.invokeExact(hdc, left, top, right, bottom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumFontFamiliesExA$MH() {
        return RuntimeHelper.requireNonNull(constants$1006.const$2,"EnumFontFamiliesExA");
    }
    /**
     * {@snippet :
     * int EnumFontFamiliesExA(HDC hdc, LPLOGFONTA lpLogfont, FONTENUMPROCA lpProc, LPARAM lParam, DWORD dwFlags);
     * }
     */
    public static int EnumFontFamiliesExA(MemorySegment hdc, MemorySegment lpLogfont, MemorySegment lpProc, long lParam, int dwFlags) {
        var mh$ = EnumFontFamiliesExA$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpLogfont, lpProc, lParam, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumFontFamiliesExW$MH() {
        return RuntimeHelper.requireNonNull(constants$1006.const$3,"EnumFontFamiliesExW");
    }
    /**
     * {@snippet :
     * int EnumFontFamiliesExW(HDC hdc, LPLOGFONTW lpLogfont, FONTENUMPROCW lpProc, LPARAM lParam, DWORD dwFlags);
     * }
     */
    public static int EnumFontFamiliesExW(MemorySegment hdc, MemorySegment lpLogfont, MemorySegment lpProc, long lParam, int dwFlags) {
        var mh$ = EnumFontFamiliesExW$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpLogfont, lpProc, lParam, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumFontFamiliesA$MH() {
        return RuntimeHelper.requireNonNull(constants$1006.const$4,"EnumFontFamiliesA");
    }
    /**
     * {@snippet :
     * int EnumFontFamiliesA(HDC hdc, LPCSTR lpLogfont, FONTENUMPROCA lpProc, LPARAM lParam);
     * }
     */
    public static int EnumFontFamiliesA(MemorySegment hdc, MemorySegment lpLogfont, MemorySegment lpProc, long lParam) {
        var mh$ = EnumFontFamiliesA$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpLogfont, lpProc, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumFontFamiliesW$MH() {
        return RuntimeHelper.requireNonNull(constants$1006.const$5,"EnumFontFamiliesW");
    }
    /**
     * {@snippet :
     * int EnumFontFamiliesW(HDC hdc, LPCWSTR lpLogfont, FONTENUMPROCW lpProc, LPARAM lParam);
     * }
     */
    public static int EnumFontFamiliesW(MemorySegment hdc, MemorySegment lpLogfont, MemorySegment lpProc, long lParam) {
        var mh$ = EnumFontFamiliesW$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpLogfont, lpProc, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumFontsA$MH() {
        return RuntimeHelper.requireNonNull(constants$1007.const$0,"EnumFontsA");
    }
    /**
     * {@snippet :
     * int EnumFontsA(HDC hdc, LPCSTR lpLogfont, FONTENUMPROCA lpProc, LPARAM lParam);
     * }
     */
    public static int EnumFontsA(MemorySegment hdc, MemorySegment lpLogfont, MemorySegment lpProc, long lParam) {
        var mh$ = EnumFontsA$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpLogfont, lpProc, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumFontsW$MH() {
        return RuntimeHelper.requireNonNull(constants$1007.const$1,"EnumFontsW");
    }
    /**
     * {@snippet :
     * int EnumFontsW(HDC hdc, LPCWSTR lpLogfont, FONTENUMPROCW lpProc, LPARAM lParam);
     * }
     */
    public static int EnumFontsW(MemorySegment hdc, MemorySegment lpLogfont, MemorySegment lpProc, long lParam) {
        var mh$ = EnumFontsW$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpLogfont, lpProc, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumObjects$MH() {
        return RuntimeHelper.requireNonNull(constants$1007.const$2,"EnumObjects");
    }
    /**
     * {@snippet :
     * int EnumObjects(HDC hdc, int nType, GOBJENUMPROC lpFunc, LPARAM lParam);
     * }
     */
    public static int EnumObjects(MemorySegment hdc, int nType, MemorySegment lpFunc, long lParam) {
        var mh$ = EnumObjects$MH();
        try {
            return (int)mh$.invokeExact(hdc, nType, lpFunc, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EqualRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$1007.const$3,"EqualRgn");
    }
    /**
     * {@snippet :
     * BOOL EqualRgn(HRGN hrgn1, HRGN hrgn2);
     * }
     */
    public static int EqualRgn(MemorySegment hrgn1, MemorySegment hrgn2) {
        var mh$ = EqualRgn$MH();
        try {
            return (int)mh$.invokeExact(hrgn1, hrgn2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Escape$MH() {
        return RuntimeHelper.requireNonNull(constants$1007.const$5,"Escape");
    }
    /**
     * {@snippet :
     * int Escape(HDC hdc, int iEscape, int cjIn, LPCSTR pvIn, LPVOID pvOut);
     * }
     */
    public static int Escape(MemorySegment hdc, int iEscape, int cjIn, MemorySegment pvIn, MemorySegment pvOut) {
        var mh$ = Escape$MH();
        try {
            return (int)mh$.invokeExact(hdc, iEscape, cjIn, pvIn, pvOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExtEscape$MH() {
        return RuntimeHelper.requireNonNull(constants$1008.const$1,"ExtEscape");
    }
    /**
     * {@snippet :
     * int ExtEscape(HDC hdc, int iEscape, int cjInput, LPCSTR lpInData, int cjOutput, LPSTR lpOutData);
     * }
     */
    public static int ExtEscape(MemorySegment hdc, int iEscape, int cjInput, MemorySegment lpInData, int cjOutput, MemorySegment lpOutData) {
        var mh$ = ExtEscape$MH();
        try {
            return (int)mh$.invokeExact(hdc, iEscape, cjInput, lpInData, cjOutput, lpOutData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExcludeClipRect$MH() {
        return RuntimeHelper.requireNonNull(constants$1008.const$2,"ExcludeClipRect");
    }
    /**
     * {@snippet :
     * int ExcludeClipRect(HDC hdc, int left, int top, int right, int bottom);
     * }
     */
    public static int ExcludeClipRect(MemorySegment hdc, int left, int top, int right, int bottom) {
        var mh$ = ExcludeClipRect$MH();
        try {
            return (int)mh$.invokeExact(hdc, left, top, right, bottom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExtCreateRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$1008.const$3,"ExtCreateRegion");
    }
    /**
     * {@snippet :
     * HRGN ExtCreateRegion(const XFORM* lpx, DWORD nCount, const RGNDATA* lpData);
     * }
     */
    public static MemorySegment ExtCreateRegion(MemorySegment lpx, int nCount, MemorySegment lpData) {
        var mh$ = ExtCreateRegion$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpx, nCount, lpData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExtFloodFill$MH() {
        return RuntimeHelper.requireNonNull(constants$1008.const$4,"ExtFloodFill");
    }
    /**
     * {@snippet :
     * BOOL ExtFloodFill(HDC hdc, int x, int y, COLORREF color, UINT type);
     * }
     */
    public static int ExtFloodFill(MemorySegment hdc, int x, int y, int color, int type) {
        var mh$ = ExtFloodFill$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, color, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FillRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$1008.const$5,"FillRgn");
    }
    /**
     * {@snippet :
     * BOOL FillRgn(HDC hdc, HRGN hrgn, HBRUSH hbr);
     * }
     */
    public static int FillRgn(MemorySegment hdc, MemorySegment hrgn, MemorySegment hbr) {
        var mh$ = FillRgn$MH();
        try {
            return (int)mh$.invokeExact(hdc, hrgn, hbr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FloodFill$MH() {
        return RuntimeHelper.requireNonNull(constants$1009.const$0,"FloodFill");
    }
    /**
     * {@snippet :
     * BOOL FloodFill(HDC hdc, int x, int y, COLORREF color);
     * }
     */
    public static int FloodFill(MemorySegment hdc, int x, int y, int color) {
        var mh$ = FloodFill$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FrameRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$1009.const$1,"FrameRgn");
    }
    /**
     * {@snippet :
     * BOOL FrameRgn(HDC hdc, HRGN hrgn, HBRUSH hbr, int w, int h);
     * }
     */
    public static int FrameRgn(MemorySegment hdc, MemorySegment hrgn, MemorySegment hbr, int w, int h) {
        var mh$ = FrameRgn$MH();
        try {
            return (int)mh$.invokeExact(hdc, hrgn, hbr, w, h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetROP2$MH() {
        return RuntimeHelper.requireNonNull(constants$1009.const$2,"GetROP2");
    }
    /**
     * {@snippet :
     * int GetROP2(HDC hdc);
     * }
     */
    public static int GetROP2(MemorySegment hdc) {
        var mh$ = GetROP2$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetAspectRatioFilterEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1009.const$3,"GetAspectRatioFilterEx");
    }
    /**
     * {@snippet :
     * BOOL GetAspectRatioFilterEx(HDC hdc, LPSIZE lpsize);
     * }
     */
    public static int GetAspectRatioFilterEx(MemorySegment hdc, MemorySegment lpsize) {
        var mh$ = GetAspectRatioFilterEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpsize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetBkColor$MH() {
        return RuntimeHelper.requireNonNull(constants$1009.const$4,"GetBkColor");
    }
    /**
     * {@snippet :
     * COLORREF GetBkColor(HDC hdc);
     * }
     */
    public static int GetBkColor(MemorySegment hdc) {
        var mh$ = GetBkColor$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDCBrushColor$MH() {
        return RuntimeHelper.requireNonNull(constants$1009.const$5,"GetDCBrushColor");
    }
    /**
     * {@snippet :
     * COLORREF GetDCBrushColor(HDC hdc);
     * }
     */
    public static int GetDCBrushColor(MemorySegment hdc) {
        var mh$ = GetDCBrushColor$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDCPenColor$MH() {
        return RuntimeHelper.requireNonNull(constants$1010.const$0,"GetDCPenColor");
    }
    /**
     * {@snippet :
     * COLORREF GetDCPenColor(HDC hdc);
     * }
     */
    public static int GetDCPenColor(MemorySegment hdc) {
        var mh$ = GetDCPenColor$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetBkMode$MH() {
        return RuntimeHelper.requireNonNull(constants$1010.const$1,"GetBkMode");
    }
    /**
     * {@snippet :
     * int GetBkMode(HDC hdc);
     * }
     */
    public static int GetBkMode(MemorySegment hdc) {
        var mh$ = GetBkMode$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetBitmapBits$MH() {
        return RuntimeHelper.requireNonNull(constants$1010.const$2,"GetBitmapBits");
    }
    /**
     * {@snippet :
     * LONG GetBitmapBits(HBITMAP hbit, LONG cb, LPVOID lpvBits);
     * }
     */
    public static int GetBitmapBits(MemorySegment hbit, int cb, MemorySegment lpvBits) {
        var mh$ = GetBitmapBits$MH();
        try {
            return (int)mh$.invokeExact(hbit, cb, lpvBits);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetBitmapDimensionEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1010.const$3,"GetBitmapDimensionEx");
    }
    /**
     * {@snippet :
     * BOOL GetBitmapDimensionEx(HBITMAP hbit, LPSIZE lpsize);
     * }
     */
    public static int GetBitmapDimensionEx(MemorySegment hbit, MemorySegment lpsize) {
        var mh$ = GetBitmapDimensionEx$MH();
        try {
            return (int)mh$.invokeExact(hbit, lpsize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetBoundsRect$MH() {
        return RuntimeHelper.requireNonNull(constants$1010.const$4,"GetBoundsRect");
    }
    /**
     * {@snippet :
     * UINT GetBoundsRect(HDC hdc, LPRECT lprect, UINT flags);
     * }
     */
    public static int GetBoundsRect(MemorySegment hdc, MemorySegment lprect, int flags) {
        var mh$ = GetBoundsRect$MH();
        try {
            return (int)mh$.invokeExact(hdc, lprect, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetBrushOrgEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1010.const$5,"GetBrushOrgEx");
    }
    /**
     * {@snippet :
     * BOOL GetBrushOrgEx(HDC hdc, LPPOINT lppt);
     * }
     */
    public static int GetBrushOrgEx(MemorySegment hdc, MemorySegment lppt) {
        var mh$ = GetBrushOrgEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, lppt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCharWidthA$MH() {
        return RuntimeHelper.requireNonNull(constants$1011.const$0,"GetCharWidthA");
    }
    /**
     * {@snippet :
     * BOOL GetCharWidthA(HDC hdc, UINT iFirst, UINT iLast, LPINT lpBuffer);
     * }
     */
    public static int GetCharWidthA(MemorySegment hdc, int iFirst, int iLast, MemorySegment lpBuffer) {
        var mh$ = GetCharWidthA$MH();
        try {
            return (int)mh$.invokeExact(hdc, iFirst, iLast, lpBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCharWidthW$MH() {
        return RuntimeHelper.requireNonNull(constants$1011.const$1,"GetCharWidthW");
    }
    /**
     * {@snippet :
     * BOOL GetCharWidthW(HDC hdc, UINT iFirst, UINT iLast, LPINT lpBuffer);
     * }
     */
    public static int GetCharWidthW(MemorySegment hdc, int iFirst, int iLast, MemorySegment lpBuffer) {
        var mh$ = GetCharWidthW$MH();
        try {
            return (int)mh$.invokeExact(hdc, iFirst, iLast, lpBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCharWidth32A$MH() {
        return RuntimeHelper.requireNonNull(constants$1011.const$2,"GetCharWidth32A");
    }
    /**
     * {@snippet :
     * BOOL GetCharWidth32A(HDC hdc, UINT iFirst, UINT iLast, LPINT lpBuffer);
     * }
     */
    public static int GetCharWidth32A(MemorySegment hdc, int iFirst, int iLast, MemorySegment lpBuffer) {
        var mh$ = GetCharWidth32A$MH();
        try {
            return (int)mh$.invokeExact(hdc, iFirst, iLast, lpBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCharWidth32W$MH() {
        return RuntimeHelper.requireNonNull(constants$1011.const$3,"GetCharWidth32W");
    }
    /**
     * {@snippet :
     * BOOL GetCharWidth32W(HDC hdc, UINT iFirst, UINT iLast, LPINT lpBuffer);
     * }
     */
    public static int GetCharWidth32W(MemorySegment hdc, int iFirst, int iLast, MemorySegment lpBuffer) {
        var mh$ = GetCharWidth32W$MH();
        try {
            return (int)mh$.invokeExact(hdc, iFirst, iLast, lpBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCharWidthFloatA$MH() {
        return RuntimeHelper.requireNonNull(constants$1011.const$4,"GetCharWidthFloatA");
    }
    /**
     * {@snippet :
     * BOOL GetCharWidthFloatA(HDC hdc, UINT iFirst, UINT iLast, PFLOAT lpBuffer);
     * }
     */
    public static int GetCharWidthFloatA(MemorySegment hdc, int iFirst, int iLast, MemorySegment lpBuffer) {
        var mh$ = GetCharWidthFloatA$MH();
        try {
            return (int)mh$.invokeExact(hdc, iFirst, iLast, lpBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCharWidthFloatW$MH() {
        return RuntimeHelper.requireNonNull(constants$1011.const$5,"GetCharWidthFloatW");
    }
    /**
     * {@snippet :
     * BOOL GetCharWidthFloatW(HDC hdc, UINT iFirst, UINT iLast, PFLOAT lpBuffer);
     * }
     */
    public static int GetCharWidthFloatW(MemorySegment hdc, int iFirst, int iLast, MemorySegment lpBuffer) {
        var mh$ = GetCharWidthFloatW$MH();
        try {
            return (int)mh$.invokeExact(hdc, iFirst, iLast, lpBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCharABCWidthsA$MH() {
        return RuntimeHelper.requireNonNull(constants$1012.const$0,"GetCharABCWidthsA");
    }
    /**
     * {@snippet :
     * BOOL GetCharABCWidthsA(HDC hdc, UINT wFirst, UINT wLast, LPABC lpABC);
     * }
     */
    public static int GetCharABCWidthsA(MemorySegment hdc, int wFirst, int wLast, MemorySegment lpABC) {
        var mh$ = GetCharABCWidthsA$MH();
        try {
            return (int)mh$.invokeExact(hdc, wFirst, wLast, lpABC);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCharABCWidthsW$MH() {
        return RuntimeHelper.requireNonNull(constants$1012.const$1,"GetCharABCWidthsW");
    }
    /**
     * {@snippet :
     * BOOL GetCharABCWidthsW(HDC hdc, UINT wFirst, UINT wLast, LPABC lpABC);
     * }
     */
    public static int GetCharABCWidthsW(MemorySegment hdc, int wFirst, int wLast, MemorySegment lpABC) {
        var mh$ = GetCharABCWidthsW$MH();
        try {
            return (int)mh$.invokeExact(hdc, wFirst, wLast, lpABC);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCharABCWidthsFloatA$MH() {
        return RuntimeHelper.requireNonNull(constants$1012.const$2,"GetCharABCWidthsFloatA");
    }
    /**
     * {@snippet :
     * BOOL GetCharABCWidthsFloatA(HDC hdc, UINT iFirst, UINT iLast, LPABCFLOAT lpABC);
     * }
     */
    public static int GetCharABCWidthsFloatA(MemorySegment hdc, int iFirst, int iLast, MemorySegment lpABC) {
        var mh$ = GetCharABCWidthsFloatA$MH();
        try {
            return (int)mh$.invokeExact(hdc, iFirst, iLast, lpABC);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCharABCWidthsFloatW$MH() {
        return RuntimeHelper.requireNonNull(constants$1012.const$3,"GetCharABCWidthsFloatW");
    }
    /**
     * {@snippet :
     * BOOL GetCharABCWidthsFloatW(HDC hdc, UINT iFirst, UINT iLast, LPABCFLOAT lpABC);
     * }
     */
    public static int GetCharABCWidthsFloatW(MemorySegment hdc, int iFirst, int iLast, MemorySegment lpABC) {
        var mh$ = GetCharABCWidthsFloatW$MH();
        try {
            return (int)mh$.invokeExact(hdc, iFirst, iLast, lpABC);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetClipBox$MH() {
        return RuntimeHelper.requireNonNull(constants$1012.const$4,"GetClipBox");
    }
    /**
     * {@snippet :
     * int GetClipBox(HDC hdc, LPRECT lprect);
     * }
     */
    public static int GetClipBox(MemorySegment hdc, MemorySegment lprect) {
        var mh$ = GetClipBox$MH();
        try {
            return (int)mh$.invokeExact(hdc, lprect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetClipRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$1012.const$5,"GetClipRgn");
    }
    /**
     * {@snippet :
     * int GetClipRgn(HDC hdc, HRGN hrgn);
     * }
     */
    public static int GetClipRgn(MemorySegment hdc, MemorySegment hrgn) {
        var mh$ = GetClipRgn$MH();
        try {
            return (int)mh$.invokeExact(hdc, hrgn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMetaRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$1013.const$0,"GetMetaRgn");
    }
    /**
     * {@snippet :
     * int GetMetaRgn(HDC hdc, HRGN hrgn);
     * }
     */
    public static int GetMetaRgn(MemorySegment hdc, MemorySegment hrgn) {
        var mh$ = GetMetaRgn$MH();
        try {
            return (int)mh$.invokeExact(hdc, hrgn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrentObject$MH() {
        return RuntimeHelper.requireNonNull(constants$1013.const$1,"GetCurrentObject");
    }
    /**
     * {@snippet :
     * HGDIOBJ GetCurrentObject(HDC hdc, UINT type);
     * }
     */
    public static MemorySegment GetCurrentObject(MemorySegment hdc, int type) {
        var mh$ = GetCurrentObject$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hdc, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrentPositionEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1013.const$2,"GetCurrentPositionEx");
    }
    /**
     * {@snippet :
     * BOOL GetCurrentPositionEx(HDC hdc, LPPOINT lppt);
     * }
     */
    public static int GetCurrentPositionEx(MemorySegment hdc, MemorySegment lppt) {
        var mh$ = GetCurrentPositionEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, lppt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDeviceCaps$MH() {
        return RuntimeHelper.requireNonNull(constants$1013.const$3,"GetDeviceCaps");
    }
    /**
     * {@snippet :
     * int GetDeviceCaps(HDC hdc, int index);
     * }
     */
    public static int GetDeviceCaps(MemorySegment hdc, int index) {
        var mh$ = GetDeviceCaps$MH();
        try {
            return (int)mh$.invokeExact(hdc, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDIBits$MH() {
        return RuntimeHelper.requireNonNull(constants$1013.const$5,"GetDIBits");
    }
    /**
     * {@snippet :
     * int GetDIBits(HDC hdc, HBITMAP hbm, UINT start, UINT cLines, LPVOID lpvBits, LPBITMAPINFO lpbmi, UINT usage);
     * }
     */
    public static int GetDIBits(MemorySegment hdc, MemorySegment hbm, int start, int cLines, MemorySegment lpvBits, MemorySegment lpbmi, int usage) {
        var mh$ = GetDIBits$MH();
        try {
            return (int)mh$.invokeExact(hdc, hbm, start, cLines, lpvBits, lpbmi, usage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFontData$MH() {
        return RuntimeHelper.requireNonNull(constants$1014.const$0,"GetFontData");
    }
    /**
     * {@snippet :
     * DWORD GetFontData(HDC hdc, DWORD dwTable, DWORD dwOffset, PVOID pvBuffer, DWORD cjBuffer);
     * }
     */
    public static int GetFontData(MemorySegment hdc, int dwTable, int dwOffset, MemorySegment pvBuffer, int cjBuffer) {
        var mh$ = GetFontData$MH();
        try {
            return (int)mh$.invokeExact(hdc, dwTable, dwOffset, pvBuffer, cjBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetGlyphOutlineA$MH() {
        return RuntimeHelper.requireNonNull(constants$1014.const$1,"GetGlyphOutlineA");
    }
    /**
     * {@snippet :
     * DWORD GetGlyphOutlineA(HDC hdc, UINT uChar, UINT fuFormat, LPGLYPHMETRICS lpgm, DWORD cjBuffer, LPVOID pvBuffer, const MAT2* lpmat2);
     * }
     */
    public static int GetGlyphOutlineA(MemorySegment hdc, int uChar, int fuFormat, MemorySegment lpgm, int cjBuffer, MemorySegment pvBuffer, MemorySegment lpmat2) {
        var mh$ = GetGlyphOutlineA$MH();
        try {
            return (int)mh$.invokeExact(hdc, uChar, fuFormat, lpgm, cjBuffer, pvBuffer, lpmat2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetGlyphOutlineW$MH() {
        return RuntimeHelper.requireNonNull(constants$1014.const$2,"GetGlyphOutlineW");
    }
    /**
     * {@snippet :
     * DWORD GetGlyphOutlineW(HDC hdc, UINT uChar, UINT fuFormat, LPGLYPHMETRICS lpgm, DWORD cjBuffer, LPVOID pvBuffer, const MAT2* lpmat2);
     * }
     */
    public static int GetGlyphOutlineW(MemorySegment hdc, int uChar, int fuFormat, MemorySegment lpgm, int cjBuffer, MemorySegment pvBuffer, MemorySegment lpmat2) {
        var mh$ = GetGlyphOutlineW$MH();
        try {
            return (int)mh$.invokeExact(hdc, uChar, fuFormat, lpgm, cjBuffer, pvBuffer, lpmat2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetGraphicsMode$MH() {
        return RuntimeHelper.requireNonNull(constants$1014.const$3,"GetGraphicsMode");
    }
    /**
     * {@snippet :
     * int GetGraphicsMode(HDC hdc);
     * }
     */
    public static int GetGraphicsMode(MemorySegment hdc) {
        var mh$ = GetGraphicsMode$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMapMode$MH() {
        return RuntimeHelper.requireNonNull(constants$1014.const$4,"GetMapMode");
    }
    /**
     * {@snippet :
     * int GetMapMode(HDC hdc);
     * }
     */
    public static int GetMapMode(MemorySegment hdc) {
        var mh$ = GetMapMode$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMetaFileBitsEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1014.const$5,"GetMetaFileBitsEx");
    }
    /**
     * {@snippet :
     * UINT GetMetaFileBitsEx(HMETAFILE hMF, UINT cbBuffer, LPVOID lpData);
     * }
     */
    public static int GetMetaFileBitsEx(MemorySegment hMF, int cbBuffer, MemorySegment lpData) {
        var mh$ = GetMetaFileBitsEx$MH();
        try {
            return (int)mh$.invokeExact(hMF, cbBuffer, lpData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMetaFileA$MH() {
        return RuntimeHelper.requireNonNull(constants$1015.const$0,"GetMetaFileA");
    }
    /**
     * {@snippet :
     * HMETAFILE GetMetaFileA(LPCSTR lpName);
     * }
     */
    public static MemorySegment GetMetaFileA(MemorySegment lpName) {
        var mh$ = GetMetaFileA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMetaFileW$MH() {
        return RuntimeHelper.requireNonNull(constants$1015.const$1,"GetMetaFileW");
    }
    /**
     * {@snippet :
     * HMETAFILE GetMetaFileW(LPCWSTR lpName);
     * }
     */
    public static MemorySegment GetMetaFileW(MemorySegment lpName) {
        var mh$ = GetMetaFileW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNearestColor$MH() {
        return RuntimeHelper.requireNonNull(constants$1015.const$2,"GetNearestColor");
    }
    /**
     * {@snippet :
     * COLORREF GetNearestColor(HDC hdc, COLORREF color);
     * }
     */
    public static int GetNearestColor(MemorySegment hdc, int color) {
        var mh$ = GetNearestColor$MH();
        try {
            return (int)mh$.invokeExact(hdc, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNearestPaletteIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$1015.const$3,"GetNearestPaletteIndex");
    }
    /**
     * {@snippet :
     * UINT GetNearestPaletteIndex(HPALETTE h, COLORREF color);
     * }
     */
    public static int GetNearestPaletteIndex(MemorySegment h, int color) {
        var mh$ = GetNearestPaletteIndex$MH();
        try {
            return (int)mh$.invokeExact(h, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetObjectType$MH() {
        return RuntimeHelper.requireNonNull(constants$1015.const$4,"GetObjectType");
    }
    /**
     * {@snippet :
     * DWORD GetObjectType(HGDIOBJ h);
     * }
     */
    public static int GetObjectType(MemorySegment h) {
        var mh$ = GetObjectType$MH();
        try {
            return (int)mh$.invokeExact(h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetOutlineTextMetricsA$MH() {
        return RuntimeHelper.requireNonNull(constants$1015.const$5,"GetOutlineTextMetricsA");
    }
    /**
     * {@snippet :
     * UINT GetOutlineTextMetricsA(HDC hdc, UINT cjCopy, LPOUTLINETEXTMETRICA potm);
     * }
     */
    public static int GetOutlineTextMetricsA(MemorySegment hdc, int cjCopy, MemorySegment potm) {
        var mh$ = GetOutlineTextMetricsA$MH();
        try {
            return (int)mh$.invokeExact(hdc, cjCopy, potm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetOutlineTextMetricsW$MH() {
        return RuntimeHelper.requireNonNull(constants$1016.const$0,"GetOutlineTextMetricsW");
    }
    /**
     * {@snippet :
     * UINT GetOutlineTextMetricsW(HDC hdc, UINT cjCopy, LPOUTLINETEXTMETRICW potm);
     * }
     */
    public static int GetOutlineTextMetricsW(MemorySegment hdc, int cjCopy, MemorySegment potm) {
        var mh$ = GetOutlineTextMetricsW$MH();
        try {
            return (int)mh$.invokeExact(hdc, cjCopy, potm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPaletteEntries$MH() {
        return RuntimeHelper.requireNonNull(constants$1016.const$1,"GetPaletteEntries");
    }
    /**
     * {@snippet :
     * UINT GetPaletteEntries(HPALETTE hpal, UINT iStart, UINT cEntries, LPPALETTEENTRY pPalEntries);
     * }
     */
    public static int GetPaletteEntries(MemorySegment hpal, int iStart, int cEntries, MemorySegment pPalEntries) {
        var mh$ = GetPaletteEntries$MH();
        try {
            return (int)mh$.invokeExact(hpal, iStart, cEntries, pPalEntries);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPixel$MH() {
        return RuntimeHelper.requireNonNull(constants$1016.const$2,"GetPixel");
    }
    /**
     * {@snippet :
     * COLORREF GetPixel(HDC hdc, int x, int y);
     * }
     */
    public static int GetPixel(MemorySegment hdc, int x, int y) {
        var mh$ = GetPixel$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPixelFormat$MH() {
        return RuntimeHelper.requireNonNull(constants$1016.const$3,"GetPixelFormat");
    }
    /**
     * {@snippet :
     * int GetPixelFormat(HDC hdc);
     * }
     */
    public static int GetPixelFormat(MemorySegment hdc) {
        var mh$ = GetPixelFormat$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPolyFillMode$MH() {
        return RuntimeHelper.requireNonNull(constants$1016.const$4,"GetPolyFillMode");
    }
    /**
     * {@snippet :
     * int GetPolyFillMode(HDC hdc);
     * }
     */
    public static int GetPolyFillMode(MemorySegment hdc) {
        var mh$ = GetPolyFillMode$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetRasterizerCaps$MH() {
        return RuntimeHelper.requireNonNull(constants$1016.const$5,"GetRasterizerCaps");
    }
    /**
     * {@snippet :
     * BOOL GetRasterizerCaps(LPRASTERIZER_STATUS lpraststat, UINT cjBytes);
     * }
     */
    public static int GetRasterizerCaps(MemorySegment lpraststat, int cjBytes) {
        var mh$ = GetRasterizerCaps$MH();
        try {
            return (int)mh$.invokeExact(lpraststat, cjBytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetRandomRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$1017.const$0,"GetRandomRgn");
    }
    /**
     * {@snippet :
     * int GetRandomRgn(HDC hdc, HRGN hrgn, INT i);
     * }
     */
    public static int GetRandomRgn(MemorySegment hdc, MemorySegment hrgn, int i) {
        var mh$ = GetRandomRgn$MH();
        try {
            return (int)mh$.invokeExact(hdc, hrgn, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetRegionData$MH() {
        return RuntimeHelper.requireNonNull(constants$1017.const$1,"GetRegionData");
    }
    /**
     * {@snippet :
     * DWORD GetRegionData(HRGN hrgn, DWORD nCount, LPRGNDATA lpRgnData);
     * }
     */
    public static int GetRegionData(MemorySegment hrgn, int nCount, MemorySegment lpRgnData) {
        var mh$ = GetRegionData$MH();
        try {
            return (int)mh$.invokeExact(hrgn, nCount, lpRgnData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetRgnBox$MH() {
        return RuntimeHelper.requireNonNull(constants$1017.const$2,"GetRgnBox");
    }
    /**
     * {@snippet :
     * int GetRgnBox(HRGN hrgn, LPRECT lprc);
     * }
     */
    public static int GetRgnBox(MemorySegment hrgn, MemorySegment lprc) {
        var mh$ = GetRgnBox$MH();
        try {
            return (int)mh$.invokeExact(hrgn, lprc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetStockObject$MH() {
        return RuntimeHelper.requireNonNull(constants$1017.const$3,"GetStockObject");
    }
    /**
     * {@snippet :
     * HGDIOBJ GetStockObject(int i);
     * }
     */
    public static MemorySegment GetStockObject(int i) {
        var mh$ = GetStockObject$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetStretchBltMode$MH() {
        return RuntimeHelper.requireNonNull(constants$1017.const$4,"GetStretchBltMode");
    }
    /**
     * {@snippet :
     * int GetStretchBltMode(HDC hdc);
     * }
     */
    public static int GetStretchBltMode(MemorySegment hdc) {
        var mh$ = GetStretchBltMode$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemPaletteEntries$MH() {
        return RuntimeHelper.requireNonNull(constants$1017.const$5,"GetSystemPaletteEntries");
    }
    /**
     * {@snippet :
     * UINT GetSystemPaletteEntries(HDC hdc, UINT iStart, UINT cEntries, LPPALETTEENTRY pPalEntries);
     * }
     */
    public static int GetSystemPaletteEntries(MemorySegment hdc, int iStart, int cEntries, MemorySegment pPalEntries) {
        var mh$ = GetSystemPaletteEntries$MH();
        try {
            return (int)mh$.invokeExact(hdc, iStart, cEntries, pPalEntries);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemPaletteUse$MH() {
        return RuntimeHelper.requireNonNull(constants$1018.const$0,"GetSystemPaletteUse");
    }
    /**
     * {@snippet :
     * UINT GetSystemPaletteUse(HDC hdc);
     * }
     */
    public static int GetSystemPaletteUse(MemorySegment hdc) {
        var mh$ = GetSystemPaletteUse$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTextCharacterExtra$MH() {
        return RuntimeHelper.requireNonNull(constants$1018.const$1,"GetTextCharacterExtra");
    }
    /**
     * {@snippet :
     * int GetTextCharacterExtra(HDC hdc);
     * }
     */
    public static int GetTextCharacterExtra(MemorySegment hdc) {
        var mh$ = GetTextCharacterExtra$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTextAlign$MH() {
        return RuntimeHelper.requireNonNull(constants$1018.const$2,"GetTextAlign");
    }
    /**
     * {@snippet :
     * UINT GetTextAlign(HDC hdc);
     * }
     */
    public static int GetTextAlign(MemorySegment hdc) {
        var mh$ = GetTextAlign$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTextColor$MH() {
        return RuntimeHelper.requireNonNull(constants$1018.const$3,"GetTextColor");
    }
    /**
     * {@snippet :
     * COLORREF GetTextColor(HDC hdc);
     * }
     */
    public static int GetTextColor(MemorySegment hdc) {
        var mh$ = GetTextColor$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTextExtentPointA$MH() {
        return RuntimeHelper.requireNonNull(constants$1018.const$4,"GetTextExtentPointA");
    }
    /**
     * {@snippet :
     * BOOL GetTextExtentPointA(HDC hdc, LPCSTR lpString, int c, LPSIZE lpsz);
     * }
     */
    public static int GetTextExtentPointA(MemorySegment hdc, MemorySegment lpString, int c, MemorySegment lpsz) {
        var mh$ = GetTextExtentPointA$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpString, c, lpsz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTextExtentPointW$MH() {
        return RuntimeHelper.requireNonNull(constants$1018.const$5,"GetTextExtentPointW");
    }
    /**
     * {@snippet :
     * BOOL GetTextExtentPointW(HDC hdc, LPCWSTR lpString, int c, LPSIZE lpsz);
     * }
     */
    public static int GetTextExtentPointW(MemorySegment hdc, MemorySegment lpString, int c, MemorySegment lpsz) {
        var mh$ = GetTextExtentPointW$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpString, c, lpsz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTextExtentPoint32A$MH() {
        return RuntimeHelper.requireNonNull(constants$1019.const$0,"GetTextExtentPoint32A");
    }
    /**
     * {@snippet :
     * BOOL GetTextExtentPoint32A(HDC hdc, LPCSTR lpString, int c, LPSIZE psizl);
     * }
     */
    public static int GetTextExtentPoint32A(MemorySegment hdc, MemorySegment lpString, int c, MemorySegment psizl) {
        var mh$ = GetTextExtentPoint32A$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpString, c, psizl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTextExtentPoint32W$MH() {
        return RuntimeHelper.requireNonNull(constants$1019.const$1,"GetTextExtentPoint32W");
    }
    /**
     * {@snippet :
     * BOOL GetTextExtentPoint32W(HDC hdc, LPCWSTR lpString, int c, LPSIZE psizl);
     * }
     */
    public static int GetTextExtentPoint32W(MemorySegment hdc, MemorySegment lpString, int c, MemorySegment psizl) {
        var mh$ = GetTextExtentPoint32W$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpString, c, psizl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTextExtentExPointA$MH() {
        return RuntimeHelper.requireNonNull(constants$1019.const$3,"GetTextExtentExPointA");
    }
    /**
     * {@snippet :
     * BOOL GetTextExtentExPointA(HDC hdc, LPCSTR lpszString, int cchString, int nMaxExtent, LPINT lpnFit, LPINT lpnDx, LPSIZE lpSize);
     * }
     */
    public static int GetTextExtentExPointA(MemorySegment hdc, MemorySegment lpszString, int cchString, int nMaxExtent, MemorySegment lpnFit, MemorySegment lpnDx, MemorySegment lpSize) {
        var mh$ = GetTextExtentExPointA$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpszString, cchString, nMaxExtent, lpnFit, lpnDx, lpSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTextExtentExPointW$MH() {
        return RuntimeHelper.requireNonNull(constants$1019.const$4,"GetTextExtentExPointW");
    }
    /**
     * {@snippet :
     * BOOL GetTextExtentExPointW(HDC hdc, LPCWSTR lpszString, int cchString, int nMaxExtent, LPINT lpnFit, LPINT lpnDx, LPSIZE lpSize);
     * }
     */
    public static int GetTextExtentExPointW(MemorySegment hdc, MemorySegment lpszString, int cchString, int nMaxExtent, MemorySegment lpnFit, MemorySegment lpnDx, MemorySegment lpSize) {
        var mh$ = GetTextExtentExPointW$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpszString, cchString, nMaxExtent, lpnFit, lpnDx, lpSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTextCharset$MH() {
        return RuntimeHelper.requireNonNull(constants$1019.const$5,"GetTextCharset");
    }
    /**
     * {@snippet :
     * int GetTextCharset(HDC hdc);
     * }
     */
    public static int GetTextCharset(MemorySegment hdc) {
        var mh$ = GetTextCharset$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTextCharsetInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$1020.const$0,"GetTextCharsetInfo");
    }
    /**
     * {@snippet :
     * int GetTextCharsetInfo(HDC hdc, LPFONTSIGNATURE lpSig, DWORD dwFlags);
     * }
     */
    public static int GetTextCharsetInfo(MemorySegment hdc, MemorySegment lpSig, int dwFlags) {
        var mh$ = GetTextCharsetInfo$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpSig, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TranslateCharsetInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$1020.const$1,"TranslateCharsetInfo");
    }
    /**
     * {@snippet :
     * BOOL TranslateCharsetInfo(DWORD* lpSrc, LPCHARSETINFO lpCs, DWORD dwFlags);
     * }
     */
    public static int TranslateCharsetInfo(MemorySegment lpSrc, MemorySegment lpCs, int dwFlags) {
        var mh$ = TranslateCharsetInfo$MH();
        try {
            return (int)mh$.invokeExact(lpSrc, lpCs, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFontLanguageInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$1020.const$2,"GetFontLanguageInfo");
    }
    /**
     * {@snippet :
     * DWORD GetFontLanguageInfo(HDC hdc);
     * }
     */
    public static int GetFontLanguageInfo(MemorySegment hdc) {
        var mh$ = GetFontLanguageInfo$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCharacterPlacementA$MH() {
        return RuntimeHelper.requireNonNull(constants$1020.const$4,"GetCharacterPlacementA");
    }
    /**
     * {@snippet :
     * DWORD GetCharacterPlacementA(HDC hdc, LPCSTR lpString, int nCount, int nMexExtent, LPGCP_RESULTSA lpResults, DWORD dwFlags);
     * }
     */
    public static int GetCharacterPlacementA(MemorySegment hdc, MemorySegment lpString, int nCount, int nMexExtent, MemorySegment lpResults, int dwFlags) {
        var mh$ = GetCharacterPlacementA$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpString, nCount, nMexExtent, lpResults, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCharacterPlacementW$MH() {
        return RuntimeHelper.requireNonNull(constants$1020.const$5,"GetCharacterPlacementW");
    }
    /**
     * {@snippet :
     * DWORD GetCharacterPlacementW(HDC hdc, LPCWSTR lpString, int nCount, int nMexExtent, LPGCP_RESULTSW lpResults, DWORD dwFlags);
     * }
     */
    public static int GetCharacterPlacementW(MemorySegment hdc, MemorySegment lpString, int nCount, int nMexExtent, MemorySegment lpResults, int dwFlags) {
        var mh$ = GetCharacterPlacementW$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpString, nCount, nMexExtent, lpResults, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagWCRANGE* PWCRANGE;
     * }
     */
    public static final AddressLayout PWCRANGE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagWCRANGE* LPWCRANGE;
     * }
     */
    public static final AddressLayout LPWCRANGE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagGLYPHSET* PGLYPHSET;
     * }
     */
    public static final AddressLayout PGLYPHSET = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagGLYPHSET* LPGLYPHSET;
     * }
     */
    public static final AddressLayout LPGLYPHSET = RuntimeHelper.POINTER;
    public static MethodHandle GetFontUnicodeRanges$MH() {
        return RuntimeHelper.requireNonNull(constants$1022.const$2,"GetFontUnicodeRanges");
    }
    /**
     * {@snippet :
     * DWORD GetFontUnicodeRanges(HDC hdc, LPGLYPHSET lpgs);
     * }
     */
    public static int GetFontUnicodeRanges(MemorySegment hdc, MemorySegment lpgs) {
        var mh$ = GetFontUnicodeRanges$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpgs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetGlyphIndicesA$MH() {
        return RuntimeHelper.requireNonNull(constants$1022.const$4,"GetGlyphIndicesA");
    }
    /**
     * {@snippet :
     * DWORD GetGlyphIndicesA(HDC hdc, LPCSTR lpstr, int c, LPWORD pgi, DWORD fl);
     * }
     */
    public static int GetGlyphIndicesA(MemorySegment hdc, MemorySegment lpstr, int c, MemorySegment pgi, int fl) {
        var mh$ = GetGlyphIndicesA$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpstr, c, pgi, fl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetGlyphIndicesW$MH() {
        return RuntimeHelper.requireNonNull(constants$1022.const$5,"GetGlyphIndicesW");
    }
    /**
     * {@snippet :
     * DWORD GetGlyphIndicesW(HDC hdc, LPCWSTR lpstr, int c, LPWORD pgi, DWORD fl);
     * }
     */
    public static int GetGlyphIndicesW(MemorySegment hdc, MemorySegment lpstr, int c, MemorySegment pgi, int fl) {
        var mh$ = GetGlyphIndicesW$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpstr, c, pgi, fl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTextExtentPointI$MH() {
        return RuntimeHelper.requireNonNull(constants$1023.const$0,"GetTextExtentPointI");
    }
    /**
     * {@snippet :
     * BOOL GetTextExtentPointI(HDC hdc, LPWORD pgiIn, int cgi, LPSIZE psize);
     * }
     */
    public static int GetTextExtentPointI(MemorySegment hdc, MemorySegment pgiIn, int cgi, MemorySegment psize) {
        var mh$ = GetTextExtentPointI$MH();
        try {
            return (int)mh$.invokeExact(hdc, pgiIn, cgi, psize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTextExtentExPointI$MH() {
        return RuntimeHelper.requireNonNull(constants$1023.const$1,"GetTextExtentExPointI");
    }
    /**
     * {@snippet :
     * BOOL GetTextExtentExPointI(HDC hdc, LPWORD lpwszString, int cwchString, int nMaxExtent, LPINT lpnFit, LPINT lpnDx, LPSIZE lpSize);
     * }
     */
    public static int GetTextExtentExPointI(MemorySegment hdc, MemorySegment lpwszString, int cwchString, int nMaxExtent, MemorySegment lpnFit, MemorySegment lpnDx, MemorySegment lpSize) {
        var mh$ = GetTextExtentExPointI$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpwszString, cwchString, nMaxExtent, lpnFit, lpnDx, lpSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCharWidthI$MH() {
        return RuntimeHelper.requireNonNull(constants$1023.const$2,"GetCharWidthI");
    }
    /**
     * {@snippet :
     * BOOL GetCharWidthI(HDC hdc, UINT giFirst, UINT cgi, LPWORD pgi, LPINT piWidths);
     * }
     */
    public static int GetCharWidthI(MemorySegment hdc, int giFirst, int cgi, MemorySegment pgi, MemorySegment piWidths) {
        var mh$ = GetCharWidthI$MH();
        try {
            return (int)mh$.invokeExact(hdc, giFirst, cgi, pgi, piWidths);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCharABCWidthsI$MH() {
        return RuntimeHelper.requireNonNull(constants$1023.const$3,"GetCharABCWidthsI");
    }
    /**
     * {@snippet :
     * BOOL GetCharABCWidthsI(HDC hdc, UINT giFirst, UINT cgi, LPWORD pgi, LPABC pabc);
     * }
     */
    public static int GetCharABCWidthsI(MemorySegment hdc, int giFirst, int cgi, MemorySegment pgi, MemorySegment pabc) {
        var mh$ = GetCharABCWidthsI$MH();
        try {
            return (int)mh$.invokeExact(hdc, giFirst, cgi, pgi, pabc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagDESIGNVECTOR* PDESIGNVECTOR;
     * }
     */
    public static final AddressLayout PDESIGNVECTOR = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagDESIGNVECTOR* LPDESIGNVECTOR;
     * }
     */
    public static final AddressLayout LPDESIGNVECTOR = RuntimeHelper.POINTER;
    public static MethodHandle AddFontResourceExA$MH() {
        return RuntimeHelper.requireNonNull(constants$1024.const$1,"AddFontResourceExA");
    }
    /**
     * {@snippet :
     * int AddFontResourceExA(LPCSTR name, DWORD fl, PVOID res);
     * }
     */
    public static int AddFontResourceExA(MemorySegment name, int fl, MemorySegment res) {
        var mh$ = AddFontResourceExA$MH();
        try {
            return (int)mh$.invokeExact(name, fl, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddFontResourceExW$MH() {
        return RuntimeHelper.requireNonNull(constants$1024.const$2,"AddFontResourceExW");
    }
    /**
     * {@snippet :
     * int AddFontResourceExW(LPCWSTR name, DWORD fl, PVOID res);
     * }
     */
    public static int AddFontResourceExW(MemorySegment name, int fl, MemorySegment res) {
        var mh$ = AddFontResourceExW$MH();
        try {
            return (int)mh$.invokeExact(name, fl, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RemoveFontResourceExA$MH() {
        return RuntimeHelper.requireNonNull(constants$1024.const$3,"RemoveFontResourceExA");
    }
    /**
     * {@snippet :
     * BOOL RemoveFontResourceExA(LPCSTR name, DWORD fl, PVOID pdv);
     * }
     */
    public static int RemoveFontResourceExA(MemorySegment name, int fl, MemorySegment pdv) {
        var mh$ = RemoveFontResourceExA$MH();
        try {
            return (int)mh$.invokeExact(name, fl, pdv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RemoveFontResourceExW$MH() {
        return RuntimeHelper.requireNonNull(constants$1024.const$4,"RemoveFontResourceExW");
    }
    /**
     * {@snippet :
     * BOOL RemoveFontResourceExW(LPCWSTR name, DWORD fl, PVOID pdv);
     * }
     */
    public static int RemoveFontResourceExW(MemorySegment name, int fl, MemorySegment pdv) {
        var mh$ = RemoveFontResourceExW$MH();
        try {
            return (int)mh$.invokeExact(name, fl, pdv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddFontMemResourceEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1024.const$5,"AddFontMemResourceEx");
    }
    /**
     * {@snippet :
     * HANDLE AddFontMemResourceEx(PVOID pFileView, DWORD cjSize, PVOID pvResrved, DWORD* pNumFonts);
     * }
     */
    public static MemorySegment AddFontMemResourceEx(MemorySegment pFileView, int cjSize, MemorySegment pvResrved, MemorySegment pNumFonts) {
        var mh$ = AddFontMemResourceEx$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(pFileView, cjSize, pvResrved, pNumFonts);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RemoveFontMemResourceEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1025.const$0,"RemoveFontMemResourceEx");
    }
    /**
     * {@snippet :
     * BOOL RemoveFontMemResourceEx(HANDLE h);
     * }
     */
    public static int RemoveFontMemResourceEx(MemorySegment h) {
        var mh$ = RemoveFontMemResourceEx$MH();
        try {
            return (int)mh$.invokeExact(h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagAXISINFOA* PAXISINFOA;
     * }
     */
    public static final AddressLayout PAXISINFOA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagAXISINFOA* LPAXISINFOA;
     * }
     */
    public static final AddressLayout LPAXISINFOA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagAXISINFOW* PAXISINFOW;
     * }
     */
    public static final AddressLayout PAXISINFOW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagAXISINFOW* LPAXISINFOW;
     * }
     */
    public static final AddressLayout LPAXISINFOW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagAXISINFOA* PAXISINFO;
     * }
     */
    public static final AddressLayout PAXISINFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagAXISINFOA* LPAXISINFO;
     * }
     */
    public static final AddressLayout LPAXISINFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagAXESLISTA* PAXESLISTA;
     * }
     */
    public static final AddressLayout PAXESLISTA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagAXESLISTA* LPAXESLISTA;
     * }
     */
    public static final AddressLayout LPAXESLISTA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagAXESLISTW* PAXESLISTW;
     * }
     */
    public static final AddressLayout PAXESLISTW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagAXESLISTW* LPAXESLISTW;
     * }
     */
    public static final AddressLayout LPAXESLISTW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagAXESLISTA* PAXESLIST;
     * }
     */
    public static final AddressLayout PAXESLIST = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagAXESLISTA* LPAXESLIST;
     * }
     */
    public static final AddressLayout LPAXESLIST = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagENUMLOGFONTEXDVA* PENUMLOGFONTEXDVA;
     * }
     */
    public static final AddressLayout PENUMLOGFONTEXDVA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagENUMLOGFONTEXDVA* LPENUMLOGFONTEXDVA;
     * }
     */
    public static final AddressLayout LPENUMLOGFONTEXDVA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagENUMLOGFONTEXDVW* PENUMLOGFONTEXDVW;
     * }
     */
    public static final AddressLayout PENUMLOGFONTEXDVW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagENUMLOGFONTEXDVW* LPENUMLOGFONTEXDVW;
     * }
     */
    public static final AddressLayout LPENUMLOGFONTEXDVW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagENUMLOGFONTEXDVA* PENUMLOGFONTEXDV;
     * }
     */
    public static final AddressLayout PENUMLOGFONTEXDV = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagENUMLOGFONTEXDVA* LPENUMLOGFONTEXDV;
     * }
     */
    public static final AddressLayout LPENUMLOGFONTEXDV = RuntimeHelper.POINTER;
    public static MethodHandle CreateFontIndirectExA$MH() {
        return RuntimeHelper.requireNonNull(constants$1027.const$3,"CreateFontIndirectExA");
    }
    /**
     * {@snippet :
     * HFONT CreateFontIndirectExA(const ENUMLOGFONTEXDVA*);
     * }
     */
    public static MemorySegment CreateFontIndirectExA(MemorySegment x0) {
        var mh$ = CreateFontIndirectExA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateFontIndirectExW$MH() {
        return RuntimeHelper.requireNonNull(constants$1027.const$4,"CreateFontIndirectExW");
    }
    /**
     * {@snippet :
     * HFONT CreateFontIndirectExW(const ENUMLOGFONTEXDVW*);
     * }
     */
    public static MemorySegment CreateFontIndirectExW(MemorySegment x0) {
        var mh$ = CreateFontIndirectExW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagENUMTEXTMETRICA* PENUMTEXTMETRICA;
     * }
     */
    public static final AddressLayout PENUMTEXTMETRICA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagENUMTEXTMETRICA* LPENUMTEXTMETRICA;
     * }
     */
    public static final AddressLayout LPENUMTEXTMETRICA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagENUMTEXTMETRICW* PENUMTEXTMETRICW;
     * }
     */
    public static final AddressLayout PENUMTEXTMETRICW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagENUMTEXTMETRICW* LPENUMTEXTMETRICW;
     * }
     */
    public static final AddressLayout LPENUMTEXTMETRICW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagENUMTEXTMETRICA* PENUMTEXTMETRIC;
     * }
     */
    public static final AddressLayout PENUMTEXTMETRIC = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagENUMTEXTMETRICA* LPENUMTEXTMETRIC;
     * }
     */
    public static final AddressLayout LPENUMTEXTMETRIC = RuntimeHelper.POINTER;
    public static MethodHandle GetViewportExtEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1028.const$1,"GetViewportExtEx");
    }
    /**
     * {@snippet :
     * BOOL GetViewportExtEx(HDC hdc, LPSIZE lpsize);
     * }
     */
    public static int GetViewportExtEx(MemorySegment hdc, MemorySegment lpsize) {
        var mh$ = GetViewportExtEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpsize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetViewportOrgEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1028.const$2,"GetViewportOrgEx");
    }
    /**
     * {@snippet :
     * BOOL GetViewportOrgEx(HDC hdc, LPPOINT lppoint);
     * }
     */
    public static int GetViewportOrgEx(MemorySegment hdc, MemorySegment lppoint) {
        var mh$ = GetViewportOrgEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, lppoint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowExtEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1028.const$3,"GetWindowExtEx");
    }
    /**
     * {@snippet :
     * BOOL GetWindowExtEx(HDC hdc, LPSIZE lpsize);
     * }
     */
    public static int GetWindowExtEx(MemorySegment hdc, MemorySegment lpsize) {
        var mh$ = GetWindowExtEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpsize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowOrgEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1028.const$4,"GetWindowOrgEx");
    }
    /**
     * {@snippet :
     * BOOL GetWindowOrgEx(HDC hdc, LPPOINT lppoint);
     * }
     */
    public static int GetWindowOrgEx(MemorySegment hdc, MemorySegment lppoint) {
        var mh$ = GetWindowOrgEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, lppoint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IntersectClipRect$MH() {
        return RuntimeHelper.requireNonNull(constants$1028.const$5,"IntersectClipRect");
    }
    /**
     * {@snippet :
     * int IntersectClipRect(HDC hdc, int left, int top, int right, int bottom);
     * }
     */
    public static int IntersectClipRect(MemorySegment hdc, int left, int top, int right, int bottom) {
        var mh$ = IntersectClipRect$MH();
        try {
            return (int)mh$.invokeExact(hdc, left, top, right, bottom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InvertRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$1029.const$0,"InvertRgn");
    }
    /**
     * {@snippet :
     * BOOL InvertRgn(HDC hdc, HRGN hrgn);
     * }
     */
    public static int InvertRgn(MemorySegment hdc, MemorySegment hrgn) {
        var mh$ = InvertRgn$MH();
        try {
            return (int)mh$.invokeExact(hdc, hrgn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LineDDA$MH() {
        return RuntimeHelper.requireNonNull(constants$1029.const$2,"LineDDA");
    }
    /**
     * {@snippet :
     * BOOL LineDDA(int xStart, int yStart, int xEnd, int yEnd, LINEDDAPROC lpProc, LPARAM data);
     * }
     */
    public static int LineDDA(int xStart, int yStart, int xEnd, int yEnd, MemorySegment lpProc, long data) {
        var mh$ = LineDDA$MH();
        try {
            return (int)mh$.invokeExact(xStart, yStart, xEnd, yEnd, lpProc, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LineTo$MH() {
        return RuntimeHelper.requireNonNull(constants$1029.const$3,"LineTo");
    }
    /**
     * {@snippet :
     * BOOL LineTo(HDC hdc, int x, int y);
     * }
     */
    public static int LineTo(MemorySegment hdc, int x, int y) {
        var mh$ = LineTo$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MaskBlt$MH() {
        return RuntimeHelper.requireNonNull(constants$1029.const$5,"MaskBlt");
    }
    /**
     * {@snippet :
     * BOOL MaskBlt(HDC hdcDest, int xDest, int yDest, int width, int height, HDC hdcSrc, int xSrc, int ySrc, HBITMAP hbmMask, int xMask, int yMask, DWORD rop);
     * }
     */
    public static int MaskBlt(MemorySegment hdcDest, int xDest, int yDest, int width, int height, MemorySegment hdcSrc, int xSrc, int ySrc, MemorySegment hbmMask, int xMask, int yMask, int rop) {
        var mh$ = MaskBlt$MH();
        try {
            return (int)mh$.invokeExact(hdcDest, xDest, yDest, width, height, hdcSrc, xSrc, ySrc, hbmMask, xMask, yMask, rop);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PlgBlt$MH() {
        return RuntimeHelper.requireNonNull(constants$1030.const$1,"PlgBlt");
    }
    /**
     * {@snippet :
     * BOOL PlgBlt(HDC hdcDest, const POINT* lpPoint, HDC hdcSrc, int xSrc, int ySrc, int width, int height, HBITMAP hbmMask, int xMask, int yMask);
     * }
     */
    public static int PlgBlt(MemorySegment hdcDest, MemorySegment lpPoint, MemorySegment hdcSrc, int xSrc, int ySrc, int width, int height, MemorySegment hbmMask, int xMask, int yMask) {
        var mh$ = PlgBlt$MH();
        try {
            return (int)mh$.invokeExact(hdcDest, lpPoint, hdcSrc, xSrc, ySrc, width, height, hbmMask, xMask, yMask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OffsetClipRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$1030.const$2,"OffsetClipRgn");
    }
    /**
     * {@snippet :
     * int OffsetClipRgn(HDC hdc, int x, int y);
     * }
     */
    public static int OffsetClipRgn(MemorySegment hdc, int x, int y) {
        var mh$ = OffsetClipRgn$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OffsetRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$1030.const$3,"OffsetRgn");
    }
    /**
     * {@snippet :
     * int OffsetRgn(HRGN hrgn, int x, int y);
     * }
     */
    public static int OffsetRgn(MemorySegment hrgn, int x, int y) {
        var mh$ = OffsetRgn$MH();
        try {
            return (int)mh$.invokeExact(hrgn, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PatBlt$MH() {
        return RuntimeHelper.requireNonNull(constants$1030.const$4,"PatBlt");
    }
    /**
     * {@snippet :
     * BOOL PatBlt(HDC hdc, int x, int y, int w, int h, DWORD rop);
     * }
     */
    public static int PatBlt(MemorySegment hdc, int x, int y, int w, int h, int rop) {
        var mh$ = PatBlt$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, w, h, rop);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Pie$MH() {
        return RuntimeHelper.requireNonNull(constants$1030.const$5,"Pie");
    }
    /**
     * {@snippet :
     * BOOL Pie(HDC hdc, int left, int top, int right, int bottom, int xr1, int yr1, int xr2, int yr2);
     * }
     */
    public static int Pie(MemorySegment hdc, int left, int top, int right, int bottom, int xr1, int yr1, int xr2, int yr2) {
        var mh$ = Pie$MH();
        try {
            return (int)mh$.invokeExact(hdc, left, top, right, bottom, xr1, yr1, xr2, yr2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PlayMetaFile$MH() {
        return RuntimeHelper.requireNonNull(constants$1031.const$0,"PlayMetaFile");
    }
    /**
     * {@snippet :
     * BOOL PlayMetaFile(HDC hdc, HMETAFILE hmf);
     * }
     */
    public static int PlayMetaFile(MemorySegment hdc, MemorySegment hmf) {
        var mh$ = PlayMetaFile$MH();
        try {
            return (int)mh$.invokeExact(hdc, hmf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PaintRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$1031.const$1,"PaintRgn");
    }
    /**
     * {@snippet :
     * BOOL PaintRgn(HDC hdc, HRGN hrgn);
     * }
     */
    public static int PaintRgn(MemorySegment hdc, MemorySegment hrgn) {
        var mh$ = PaintRgn$MH();
        try {
            return (int)mh$.invokeExact(hdc, hrgn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PolyPolygon$MH() {
        return RuntimeHelper.requireNonNull(constants$1031.const$2,"PolyPolygon");
    }
    /**
     * {@snippet :
     * BOOL PolyPolygon(HDC hdc, const POINT* apt, const INT* asz, int csz);
     * }
     */
    public static int PolyPolygon(MemorySegment hdc, MemorySegment apt, MemorySegment asz, int csz) {
        var mh$ = PolyPolygon$MH();
        try {
            return (int)mh$.invokeExact(hdc, apt, asz, csz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PtInRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$1031.const$3,"PtInRegion");
    }
    /**
     * {@snippet :
     * BOOL PtInRegion(HRGN hrgn, int x, int y);
     * }
     */
    public static int PtInRegion(MemorySegment hrgn, int x, int y) {
        var mh$ = PtInRegion$MH();
        try {
            return (int)mh$.invokeExact(hrgn, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PtVisible$MH() {
        return RuntimeHelper.requireNonNull(constants$1031.const$4,"PtVisible");
    }
    /**
     * {@snippet :
     * BOOL PtVisible(HDC hdc, int x, int y);
     * }
     */
    public static int PtVisible(MemorySegment hdc, int x, int y) {
        var mh$ = PtVisible$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RectInRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$1031.const$5,"RectInRegion");
    }
    /**
     * {@snippet :
     * BOOL RectInRegion(HRGN hrgn, const RECT* lprect);
     * }
     */
    public static int RectInRegion(MemorySegment hrgn, MemorySegment lprect) {
        var mh$ = RectInRegion$MH();
        try {
            return (int)mh$.invokeExact(hrgn, lprect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RectVisible$MH() {
        return RuntimeHelper.requireNonNull(constants$1032.const$0,"RectVisible");
    }
    /**
     * {@snippet :
     * BOOL RectVisible(HDC hdc, const RECT* lprect);
     * }
     */
    public static int RectVisible(MemorySegment hdc, MemorySegment lprect) {
        var mh$ = RectVisible$MH();
        try {
            return (int)mh$.invokeExact(hdc, lprect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Rectangle$MH() {
        return RuntimeHelper.requireNonNull(constants$1032.const$1,"Rectangle");
    }
    /**
     * {@snippet :
     * BOOL Rectangle(HDC hdc, int left, int top, int right, int bottom);
     * }
     */
    public static int Rectangle(MemorySegment hdc, int left, int top, int right, int bottom) {
        var mh$ = Rectangle$MH();
        try {
            return (int)mh$.invokeExact(hdc, left, top, right, bottom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RestoreDC$MH() {
        return RuntimeHelper.requireNonNull(constants$1032.const$2,"RestoreDC");
    }
    /**
     * {@snippet :
     * BOOL RestoreDC(HDC hdc, int nSavedDC);
     * }
     */
    public static int RestoreDC(MemorySegment hdc, int nSavedDC) {
        var mh$ = RestoreDC$MH();
        try {
            return (int)mh$.invokeExact(hdc, nSavedDC);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ResetDCA$MH() {
        return RuntimeHelper.requireNonNull(constants$1032.const$3,"ResetDCA");
    }
    /**
     * {@snippet :
     * HDC ResetDCA(HDC hdc, const DEVMODEA* lpdm);
     * }
     */
    public static MemorySegment ResetDCA(MemorySegment hdc, MemorySegment lpdm) {
        var mh$ = ResetDCA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hdc, lpdm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ResetDCW$MH() {
        return RuntimeHelper.requireNonNull(constants$1032.const$4,"ResetDCW");
    }
    /**
     * {@snippet :
     * HDC ResetDCW(HDC hdc, const DEVMODEW* lpdm);
     * }
     */
    public static MemorySegment ResetDCW(MemorySegment hdc, MemorySegment lpdm) {
        var mh$ = ResetDCW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hdc, lpdm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RealizePalette$MH() {
        return RuntimeHelper.requireNonNull(constants$1032.const$5,"RealizePalette");
    }
    /**
     * {@snippet :
     * UINT RealizePalette(HDC hdc);
     * }
     */
    public static int RealizePalette(MemorySegment hdc) {
        var mh$ = RealizePalette$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RemoveFontResourceA$MH() {
        return RuntimeHelper.requireNonNull(constants$1033.const$0,"RemoveFontResourceA");
    }
    /**
     * {@snippet :
     * BOOL RemoveFontResourceA(LPCSTR lpFileName);
     * }
     */
    public static int RemoveFontResourceA(MemorySegment lpFileName) {
        var mh$ = RemoveFontResourceA$MH();
        try {
            return (int)mh$.invokeExact(lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RemoveFontResourceW$MH() {
        return RuntimeHelper.requireNonNull(constants$1033.const$1,"RemoveFontResourceW");
    }
    /**
     * {@snippet :
     * BOOL RemoveFontResourceW(LPCWSTR lpFileName);
     * }
     */
    public static int RemoveFontResourceW(MemorySegment lpFileName) {
        var mh$ = RemoveFontResourceW$MH();
        try {
            return (int)mh$.invokeExact(lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RoundRect$MH() {
        return RuntimeHelper.requireNonNull(constants$1033.const$3,"RoundRect");
    }
    /**
     * {@snippet :
     * BOOL RoundRect(HDC hdc, int left, int top, int right, int bottom, int width, int height);
     * }
     */
    public static int RoundRect(MemorySegment hdc, int left, int top, int right, int bottom, int width, int height) {
        var mh$ = RoundRect$MH();
        try {
            return (int)mh$.invokeExact(hdc, left, top, right, bottom, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ResizePalette$MH() {
        return RuntimeHelper.requireNonNull(constants$1033.const$4,"ResizePalette");
    }
    /**
     * {@snippet :
     * BOOL ResizePalette(HPALETTE hpal, UINT n);
     * }
     */
    public static int ResizePalette(MemorySegment hpal, int n) {
        var mh$ = ResizePalette$MH();
        try {
            return (int)mh$.invokeExact(hpal, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SaveDC$MH() {
        return RuntimeHelper.requireNonNull(constants$1033.const$5,"SaveDC");
    }
    /**
     * {@snippet :
     * int SaveDC(HDC hdc);
     * }
     */
    public static int SaveDC(MemorySegment hdc) {
        var mh$ = SaveDC$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SelectClipRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$1034.const$0,"SelectClipRgn");
    }
    /**
     * {@snippet :
     * int SelectClipRgn(HDC hdc, HRGN hrgn);
     * }
     */
    public static int SelectClipRgn(MemorySegment hdc, MemorySegment hrgn) {
        var mh$ = SelectClipRgn$MH();
        try {
            return (int)mh$.invokeExact(hdc, hrgn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExtSelectClipRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$1034.const$1,"ExtSelectClipRgn");
    }
    /**
     * {@snippet :
     * int ExtSelectClipRgn(HDC hdc, HRGN hrgn, int mode);
     * }
     */
    public static int ExtSelectClipRgn(MemorySegment hdc, MemorySegment hrgn, int mode) {
        var mh$ = ExtSelectClipRgn$MH();
        try {
            return (int)mh$.invokeExact(hdc, hrgn, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetMetaRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$1034.const$2,"SetMetaRgn");
    }
    /**
     * {@snippet :
     * int SetMetaRgn(HDC hdc);
     * }
     */
    public static int SetMetaRgn(MemorySegment hdc) {
        var mh$ = SetMetaRgn$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SelectObject$MH() {
        return RuntimeHelper.requireNonNull(constants$1034.const$3,"SelectObject");
    }
    /**
     * {@snippet :
     * HGDIOBJ SelectObject(HDC hdc, HGDIOBJ h);
     * }
     */
    public static MemorySegment SelectObject(MemorySegment hdc, MemorySegment h) {
        var mh$ = SelectObject$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hdc, h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SelectPalette$MH() {
        return RuntimeHelper.requireNonNull(constants$1034.const$4,"SelectPalette");
    }
    /**
     * {@snippet :
     * HPALETTE SelectPalette(HDC hdc, HPALETTE hPal, BOOL bForceBkgd);
     * }
     */
    public static MemorySegment SelectPalette(MemorySegment hdc, MemorySegment hPal, int bForceBkgd) {
        var mh$ = SelectPalette$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hdc, hPal, bForceBkgd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetBkColor$MH() {
        return RuntimeHelper.requireNonNull(constants$1034.const$5,"SetBkColor");
    }
    /**
     * {@snippet :
     * COLORREF SetBkColor(HDC hdc, COLORREF color);
     * }
     */
    public static int SetBkColor(MemorySegment hdc, int color) {
        var mh$ = SetBkColor$MH();
        try {
            return (int)mh$.invokeExact(hdc, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetDCBrushColor$MH() {
        return RuntimeHelper.requireNonNull(constants$1035.const$0,"SetDCBrushColor");
    }
    /**
     * {@snippet :
     * COLORREF SetDCBrushColor(HDC hdc, COLORREF color);
     * }
     */
    public static int SetDCBrushColor(MemorySegment hdc, int color) {
        var mh$ = SetDCBrushColor$MH();
        try {
            return (int)mh$.invokeExact(hdc, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetDCPenColor$MH() {
        return RuntimeHelper.requireNonNull(constants$1035.const$1,"SetDCPenColor");
    }
    /**
     * {@snippet :
     * COLORREF SetDCPenColor(HDC hdc, COLORREF color);
     * }
     */
    public static int SetDCPenColor(MemorySegment hdc, int color) {
        var mh$ = SetDCPenColor$MH();
        try {
            return (int)mh$.invokeExact(hdc, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetBkMode$MH() {
        return RuntimeHelper.requireNonNull(constants$1035.const$2,"SetBkMode");
    }
    /**
     * {@snippet :
     * int SetBkMode(HDC hdc, int mode);
     * }
     */
    public static int SetBkMode(MemorySegment hdc, int mode) {
        var mh$ = SetBkMode$MH();
        try {
            return (int)mh$.invokeExact(hdc, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetBitmapBits$MH() {
        return RuntimeHelper.requireNonNull(constants$1035.const$3,"SetBitmapBits");
    }
    /**
     * {@snippet :
     * LONG SetBitmapBits(HBITMAP hbm, DWORD cb, void* pvBits);
     * }
     */
    public static int SetBitmapBits(MemorySegment hbm, int cb, MemorySegment pvBits) {
        var mh$ = SetBitmapBits$MH();
        try {
            return (int)mh$.invokeExact(hbm, cb, pvBits);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetBoundsRect$MH() {
        return RuntimeHelper.requireNonNull(constants$1035.const$4,"SetBoundsRect");
    }
    /**
     * {@snippet :
     * UINT SetBoundsRect(HDC hdc, const RECT* lprect, UINT flags);
     * }
     */
    public static int SetBoundsRect(MemorySegment hdc, MemorySegment lprect, int flags) {
        var mh$ = SetBoundsRect$MH();
        try {
            return (int)mh$.invokeExact(hdc, lprect, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetDIBits$MH() {
        return RuntimeHelper.requireNonNull(constants$1035.const$5,"SetDIBits");
    }
    /**
     * {@snippet :
     * int SetDIBits(HDC hdc, HBITMAP hbm, UINT start, UINT cLines, void* lpBits, const BITMAPINFO* lpbmi, UINT ColorUse);
     * }
     */
    public static int SetDIBits(MemorySegment hdc, MemorySegment hbm, int start, int cLines, MemorySegment lpBits, MemorySegment lpbmi, int ColorUse) {
        var mh$ = SetDIBits$MH();
        try {
            return (int)mh$.invokeExact(hdc, hbm, start, cLines, lpBits, lpbmi, ColorUse);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetDIBitsToDevice$MH() {
        return RuntimeHelper.requireNonNull(constants$1036.const$1,"SetDIBitsToDevice");
    }
    /**
     * {@snippet :
     * int SetDIBitsToDevice(HDC hdc, int xDest, int yDest, DWORD w, DWORD h, int xSrc, int ySrc, UINT StartScan, UINT cLines, void* lpvBits, const BITMAPINFO* lpbmi, UINT ColorUse);
     * }
     */
    public static int SetDIBitsToDevice(MemorySegment hdc, int xDest, int yDest, int w, int h, int xSrc, int ySrc, int StartScan, int cLines, MemorySegment lpvBits, MemorySegment lpbmi, int ColorUse) {
        var mh$ = SetDIBitsToDevice$MH();
        try {
            return (int)mh$.invokeExact(hdc, xDest, yDest, w, h, xSrc, ySrc, StartScan, cLines, lpvBits, lpbmi, ColorUse);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetMapperFlags$MH() {
        return RuntimeHelper.requireNonNull(constants$1036.const$2,"SetMapperFlags");
    }
    /**
     * {@snippet :
     * DWORD SetMapperFlags(HDC hdc, DWORD flags);
     * }
     */
    public static int SetMapperFlags(MemorySegment hdc, int flags) {
        var mh$ = SetMapperFlags$MH();
        try {
            return (int)mh$.invokeExact(hdc, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetGraphicsMode$MH() {
        return RuntimeHelper.requireNonNull(constants$1036.const$3,"SetGraphicsMode");
    }
    /**
     * {@snippet :
     * int SetGraphicsMode(HDC hdc, int iMode);
     * }
     */
    public static int SetGraphicsMode(MemorySegment hdc, int iMode) {
        var mh$ = SetGraphicsMode$MH();
        try {
            return (int)mh$.invokeExact(hdc, iMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetMapMode$MH() {
        return RuntimeHelper.requireNonNull(constants$1036.const$4,"SetMapMode");
    }
    /**
     * {@snippet :
     * int SetMapMode(HDC hdc, int iMode);
     * }
     */
    public static int SetMapMode(MemorySegment hdc, int iMode) {
        var mh$ = SetMapMode$MH();
        try {
            return (int)mh$.invokeExact(hdc, iMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetLayout$MH() {
        return RuntimeHelper.requireNonNull(constants$1036.const$5,"SetLayout");
    }
    /**
     * {@snippet :
     * DWORD SetLayout(HDC hdc, DWORD l);
     * }
     */
    public static int SetLayout(MemorySegment hdc, int l) {
        var mh$ = SetLayout$MH();
        try {
            return (int)mh$.invokeExact(hdc, l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLayout$MH() {
        return RuntimeHelper.requireNonNull(constants$1037.const$0,"GetLayout");
    }
    /**
     * {@snippet :
     * DWORD GetLayout(HDC hdc);
     * }
     */
    public static int GetLayout(MemorySegment hdc) {
        var mh$ = GetLayout$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetMetaFileBitsEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1037.const$1,"SetMetaFileBitsEx");
    }
    /**
     * {@snippet :
     * HMETAFILE SetMetaFileBitsEx(UINT cbBuffer, const BYTE* lpData);
     * }
     */
    public static MemorySegment SetMetaFileBitsEx(int cbBuffer, MemorySegment lpData) {
        var mh$ = SetMetaFileBitsEx$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(cbBuffer, lpData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetPaletteEntries$MH() {
        return RuntimeHelper.requireNonNull(constants$1037.const$2,"SetPaletteEntries");
    }
    /**
     * {@snippet :
     * UINT SetPaletteEntries(HPALETTE hpal, UINT iStart, UINT cEntries, const PALETTEENTRY* pPalEntries);
     * }
     */
    public static int SetPaletteEntries(MemorySegment hpal, int iStart, int cEntries, MemorySegment pPalEntries) {
        var mh$ = SetPaletteEntries$MH();
        try {
            return (int)mh$.invokeExact(hpal, iStart, cEntries, pPalEntries);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetPixel$MH() {
        return RuntimeHelper.requireNonNull(constants$1037.const$3,"SetPixel");
    }
    /**
     * {@snippet :
     * COLORREF SetPixel(HDC hdc, int x, int y, COLORREF color);
     * }
     */
    public static int SetPixel(MemorySegment hdc, int x, int y, int color) {
        var mh$ = SetPixel$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetPixelV$MH() {
        return RuntimeHelper.requireNonNull(constants$1037.const$4,"SetPixelV");
    }
    /**
     * {@snippet :
     * BOOL SetPixelV(HDC hdc, int x, int y, COLORREF color);
     * }
     */
    public static int SetPixelV(MemorySegment hdc, int x, int y, int color) {
        var mh$ = SetPixelV$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetPixelFormat$MH() {
        return RuntimeHelper.requireNonNull(constants$1037.const$5,"SetPixelFormat");
    }
    /**
     * {@snippet :
     * BOOL SetPixelFormat(HDC hdc, int format, const PIXELFORMATDESCRIPTOR* ppfd);
     * }
     */
    public static int SetPixelFormat(MemorySegment hdc, int format, MemorySegment ppfd) {
        var mh$ = SetPixelFormat$MH();
        try {
            return (int)mh$.invokeExact(hdc, format, ppfd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetPolyFillMode$MH() {
        return RuntimeHelper.requireNonNull(constants$1038.const$0,"SetPolyFillMode");
    }
    /**
     * {@snippet :
     * int SetPolyFillMode(HDC hdc, int mode);
     * }
     */
    public static int SetPolyFillMode(MemorySegment hdc, int mode) {
        var mh$ = SetPolyFillMode$MH();
        try {
            return (int)mh$.invokeExact(hdc, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle StretchBlt$MH() {
        return RuntimeHelper.requireNonNull(constants$1038.const$2,"StretchBlt");
    }
    /**
     * {@snippet :
     * BOOL StretchBlt(HDC hdcDest, int xDest, int yDest, int wDest, int hDest, HDC hdcSrc, int xSrc, int ySrc, int wSrc, int hSrc, DWORD rop);
     * }
     */
    public static int StretchBlt(MemorySegment hdcDest, int xDest, int yDest, int wDest, int hDest, MemorySegment hdcSrc, int xSrc, int ySrc, int wSrc, int hSrc, int rop) {
        var mh$ = StretchBlt$MH();
        try {
            return (int)mh$.invokeExact(hdcDest, xDest, yDest, wDest, hDest, hdcSrc, xSrc, ySrc, wSrc, hSrc, rop);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetRectRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$1038.const$3,"SetRectRgn");
    }
    /**
     * {@snippet :
     * BOOL SetRectRgn(HRGN hrgn, int left, int top, int right, int bottom);
     * }
     */
    public static int SetRectRgn(MemorySegment hrgn, int left, int top, int right, int bottom) {
        var mh$ = SetRectRgn$MH();
        try {
            return (int)mh$.invokeExact(hrgn, left, top, right, bottom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle StretchDIBits$MH() {
        return RuntimeHelper.requireNonNull(constants$1038.const$5,"StretchDIBits");
    }
    /**
     * {@snippet :
     * int StretchDIBits(HDC hdc, int xDest, int yDest, int DestWidth, int DestHeight, int xSrc, int ySrc, int SrcWidth, int SrcHeight, void* lpBits, const BITMAPINFO* lpbmi, UINT iUsage, DWORD rop);
     * }
     */
    public static int StretchDIBits(MemorySegment hdc, int xDest, int yDest, int DestWidth, int DestHeight, int xSrc, int ySrc, int SrcWidth, int SrcHeight, MemorySegment lpBits, MemorySegment lpbmi, int iUsage, int rop) {
        var mh$ = StretchDIBits$MH();
        try {
            return (int)mh$.invokeExact(hdc, xDest, yDest, DestWidth, DestHeight, xSrc, ySrc, SrcWidth, SrcHeight, lpBits, lpbmi, iUsage, rop);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetROP2$MH() {
        return RuntimeHelper.requireNonNull(constants$1039.const$0,"SetROP2");
    }
    /**
     * {@snippet :
     * int SetROP2(HDC hdc, int rop2);
     * }
     */
    public static int SetROP2(MemorySegment hdc, int rop2) {
        var mh$ = SetROP2$MH();
        try {
            return (int)mh$.invokeExact(hdc, rop2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetStretchBltMode$MH() {
        return RuntimeHelper.requireNonNull(constants$1039.const$1,"SetStretchBltMode");
    }
    /**
     * {@snippet :
     * int SetStretchBltMode(HDC hdc, int mode);
     * }
     */
    public static int SetStretchBltMode(MemorySegment hdc, int mode) {
        var mh$ = SetStretchBltMode$MH();
        try {
            return (int)mh$.invokeExact(hdc, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetSystemPaletteUse$MH() {
        return RuntimeHelper.requireNonNull(constants$1039.const$2,"SetSystemPaletteUse");
    }
    /**
     * {@snippet :
     * UINT SetSystemPaletteUse(HDC hdc, UINT use);
     * }
     */
    public static int SetSystemPaletteUse(MemorySegment hdc, int use) {
        var mh$ = SetSystemPaletteUse$MH();
        try {
            return (int)mh$.invokeExact(hdc, use);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetTextCharacterExtra$MH() {
        return RuntimeHelper.requireNonNull(constants$1039.const$3,"SetTextCharacterExtra");
    }
    /**
     * {@snippet :
     * int SetTextCharacterExtra(HDC hdc, int extra);
     * }
     */
    public static int SetTextCharacterExtra(MemorySegment hdc, int extra) {
        var mh$ = SetTextCharacterExtra$MH();
        try {
            return (int)mh$.invokeExact(hdc, extra);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetTextColor$MH() {
        return RuntimeHelper.requireNonNull(constants$1039.const$4,"SetTextColor");
    }
    /**
     * {@snippet :
     * COLORREF SetTextColor(HDC hdc, COLORREF color);
     * }
     */
    public static int SetTextColor(MemorySegment hdc, int color) {
        var mh$ = SetTextColor$MH();
        try {
            return (int)mh$.invokeExact(hdc, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetTextAlign$MH() {
        return RuntimeHelper.requireNonNull(constants$1039.const$5,"SetTextAlign");
    }
    /**
     * {@snippet :
     * UINT SetTextAlign(HDC hdc, UINT align);
     * }
     */
    public static int SetTextAlign(MemorySegment hdc, int align) {
        var mh$ = SetTextAlign$MH();
        try {
            return (int)mh$.invokeExact(hdc, align);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetTextJustification$MH() {
        return RuntimeHelper.requireNonNull(constants$1040.const$0,"SetTextJustification");
    }
    /**
     * {@snippet :
     * BOOL SetTextJustification(HDC hdc, int extra, int count);
     * }
     */
    public static int SetTextJustification(MemorySegment hdc, int extra, int count) {
        var mh$ = SetTextJustification$MH();
        try {
            return (int)mh$.invokeExact(hdc, extra, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UpdateColors$MH() {
        return RuntimeHelper.requireNonNull(constants$1040.const$1,"UpdateColors");
    }
    /**
     * {@snippet :
     * BOOL UpdateColors(HDC hdc);
     * }
     */
    public static int UpdateColors(MemorySegment hdc) {
        var mh$ = UpdateColors$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned short COLOR16;
     * }
     */
    public static final OfShort COLOR16 = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef struct _TRIVERTEX* PTRIVERTEX;
     * }
     */
    public static final AddressLayout PTRIVERTEX = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _TRIVERTEX* LPTRIVERTEX;
     * }
     */
    public static final AddressLayout LPTRIVERTEX = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GRADIENT_TRIANGLE* PGRADIENT_TRIANGLE;
     * }
     */
    public static final AddressLayout PGRADIENT_TRIANGLE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GRADIENT_TRIANGLE* LPGRADIENT_TRIANGLE;
     * }
     */
    public static final AddressLayout LPGRADIENT_TRIANGLE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GRADIENT_RECT* PGRADIENT_RECT;
     * }
     */
    public static final AddressLayout PGRADIENT_RECT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GRADIENT_RECT* LPGRADIENT_RECT;
     * }
     */
    public static final AddressLayout LPGRADIENT_RECT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _BLENDFUNCTION* PBLENDFUNCTION;
     * }
     */
    public static final AddressLayout PBLENDFUNCTION = RuntimeHelper.POINTER;
    public static MethodHandle AlphaBlend$MH() {
        return RuntimeHelper.requireNonNull(constants$1043.const$4,"AlphaBlend");
    }
    /**
     * {@snippet :
     * BOOL AlphaBlend(HDC hdcDest, int xoriginDest, int yoriginDest, int wDest, int hDest, HDC hdcSrc, int xoriginSrc, int yoriginSrc, int wSrc, int hSrc, BLENDFUNCTION ftn);
     * }
     */
    public static int AlphaBlend(MemorySegment hdcDest, int xoriginDest, int yoriginDest, int wDest, int hDest, MemorySegment hdcSrc, int xoriginSrc, int yoriginSrc, int wSrc, int hSrc, MemorySegment ftn) {
        var mh$ = AlphaBlend$MH();
        try {
            return (int)mh$.invokeExact(hdcDest, xoriginDest, yoriginDest, wDest, hDest, hdcSrc, xoriginSrc, yoriginSrc, wSrc, hSrc, ftn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TransparentBlt$MH() {
        return RuntimeHelper.requireNonNull(constants$1043.const$5,"TransparentBlt");
    }
    /**
     * {@snippet :
     * BOOL TransparentBlt(HDC hdcDest, int xoriginDest, int yoriginDest, int wDest, int hDest, HDC hdcSrc, int xoriginSrc, int yoriginSrc, int wSrc, int hSrc, UINT crTransparent);
     * }
     */
    public static int TransparentBlt(MemorySegment hdcDest, int xoriginDest, int yoriginDest, int wDest, int hDest, MemorySegment hdcSrc, int xoriginSrc, int yoriginSrc, int wSrc, int hSrc, int crTransparent) {
        var mh$ = TransparentBlt$MH();
        try {
            return (int)mh$.invokeExact(hdcDest, xoriginDest, yoriginDest, wDest, hDest, hdcSrc, xoriginSrc, yoriginSrc, wSrc, hSrc, crTransparent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GradientFill$MH() {
        return RuntimeHelper.requireNonNull(constants$1044.const$0,"GradientFill");
    }
    /**
     * {@snippet :
     * BOOL GradientFill(HDC hdc, PTRIVERTEX pVertex, ULONG nVertex, PVOID pMesh, ULONG nMesh, ULONG ulMode);
     * }
     */
    public static int GradientFill(MemorySegment hdc, MemorySegment pVertex, int nVertex, MemorySegment pMesh, int nMesh, int ulMode) {
        var mh$ = GradientFill$MH();
        try {
            return (int)mh$.invokeExact(hdc, pVertex, nVertex, pMesh, nMesh, ulMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GdiAlphaBlend$MH() {
        return RuntimeHelper.requireNonNull(constants$1044.const$1,"GdiAlphaBlend");
    }
    /**
     * {@snippet :
     * BOOL GdiAlphaBlend(HDC hdcDest, int xoriginDest, int yoriginDest, int wDest, int hDest, HDC hdcSrc, int xoriginSrc, int yoriginSrc, int wSrc, int hSrc, BLENDFUNCTION ftn);
     * }
     */
    public static int GdiAlphaBlend(MemorySegment hdcDest, int xoriginDest, int yoriginDest, int wDest, int hDest, MemorySegment hdcSrc, int xoriginSrc, int yoriginSrc, int wSrc, int hSrc, MemorySegment ftn) {
        var mh$ = GdiAlphaBlend$MH();
        try {
            return (int)mh$.invokeExact(hdcDest, xoriginDest, yoriginDest, wDest, hDest, hdcSrc, xoriginSrc, yoriginSrc, wSrc, hSrc, ftn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GdiTransparentBlt$MH() {
        return RuntimeHelper.requireNonNull(constants$1044.const$2,"GdiTransparentBlt");
    }
    /**
     * {@snippet :
     * BOOL GdiTransparentBlt(HDC hdcDest, int xoriginDest, int yoriginDest, int wDest, int hDest, HDC hdcSrc, int xoriginSrc, int yoriginSrc, int wSrc, int hSrc, UINT crTransparent);
     * }
     */
    public static int GdiTransparentBlt(MemorySegment hdcDest, int xoriginDest, int yoriginDest, int wDest, int hDest, MemorySegment hdcSrc, int xoriginSrc, int yoriginSrc, int wSrc, int hSrc, int crTransparent) {
        var mh$ = GdiTransparentBlt$MH();
        try {
            return (int)mh$.invokeExact(hdcDest, xoriginDest, yoriginDest, wDest, hDest, hdcSrc, xoriginSrc, yoriginSrc, wSrc, hSrc, crTransparent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GdiGradientFill$MH() {
        return RuntimeHelper.requireNonNull(constants$1044.const$3,"GdiGradientFill");
    }
    /**
     * {@snippet :
     * BOOL GdiGradientFill(HDC hdc, PTRIVERTEX pVertex, ULONG nVertex, PVOID pMesh, ULONG nCount, ULONG ulMode);
     * }
     */
    public static int GdiGradientFill(MemorySegment hdc, MemorySegment pVertex, int nVertex, MemorySegment pMesh, int nCount, int ulMode) {
        var mh$ = GdiGradientFill$MH();
        try {
            return (int)mh$.invokeExact(hdc, pVertex, nVertex, pMesh, nCount, ulMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PlayMetaFileRecord$MH() {
        return RuntimeHelper.requireNonNull(constants$1044.const$4,"PlayMetaFileRecord");
    }
    /**
     * {@snippet :
     * BOOL PlayMetaFileRecord(HDC hdc, LPHANDLETABLE lpHandleTable, LPMETARECORD lpMR, UINT noObjs);
     * }
     */
    public static int PlayMetaFileRecord(MemorySegment hdc, MemorySegment lpHandleTable, MemorySegment lpMR, int noObjs) {
        var mh$ = PlayMetaFileRecord$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpHandleTable, lpMR, noObjs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumMetaFile$MH() {
        return RuntimeHelper.requireNonNull(constants$1045.const$2,"EnumMetaFile");
    }
    /**
     * {@snippet :
     * BOOL EnumMetaFile(HDC hdc, HMETAFILE hmf, MFENUMPROC proc, LPARAM param);
     * }
     */
    public static int EnumMetaFile(MemorySegment hdc, MemorySegment hmf, MemorySegment proc, long param) {
        var mh$ = EnumMetaFile$MH();
        try {
            return (int)mh$.invokeExact(hdc, hmf, proc, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CloseEnhMetaFile$MH() {
        return RuntimeHelper.requireNonNull(constants$1045.const$4,"CloseEnhMetaFile");
    }
    /**
     * {@snippet :
     * HENHMETAFILE CloseEnhMetaFile(HDC hdc);
     * }
     */
    public static MemorySegment CloseEnhMetaFile(MemorySegment hdc) {
        var mh$ = CloseEnhMetaFile$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CopyEnhMetaFileA$MH() {
        return RuntimeHelper.requireNonNull(constants$1045.const$5,"CopyEnhMetaFileA");
    }
    /**
     * {@snippet :
     * HENHMETAFILE CopyEnhMetaFileA(HENHMETAFILE hEnh, LPCSTR lpFileName);
     * }
     */
    public static MemorySegment CopyEnhMetaFileA(MemorySegment hEnh, MemorySegment lpFileName) {
        var mh$ = CopyEnhMetaFileA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hEnh, lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CopyEnhMetaFileW$MH() {
        return RuntimeHelper.requireNonNull(constants$1046.const$0,"CopyEnhMetaFileW");
    }
    /**
     * {@snippet :
     * HENHMETAFILE CopyEnhMetaFileW(HENHMETAFILE hEnh, LPCWSTR lpFileName);
     * }
     */
    public static MemorySegment CopyEnhMetaFileW(MemorySegment hEnh, MemorySegment lpFileName) {
        var mh$ = CopyEnhMetaFileW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hEnh, lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateEnhMetaFileA$MH() {
        return RuntimeHelper.requireNonNull(constants$1046.const$1,"CreateEnhMetaFileA");
    }
    /**
     * {@snippet :
     * HDC CreateEnhMetaFileA(HDC hdc, LPCSTR lpFilename, const RECT* lprc, LPCSTR lpDesc);
     * }
     */
    public static MemorySegment CreateEnhMetaFileA(MemorySegment hdc, MemorySegment lpFilename, MemorySegment lprc, MemorySegment lpDesc) {
        var mh$ = CreateEnhMetaFileA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hdc, lpFilename, lprc, lpDesc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateEnhMetaFileW$MH() {
        return RuntimeHelper.requireNonNull(constants$1046.const$2,"CreateEnhMetaFileW");
    }
    /**
     * {@snippet :
     * HDC CreateEnhMetaFileW(HDC hdc, LPCWSTR lpFilename, const RECT* lprc, LPCWSTR lpDesc);
     * }
     */
    public static MemorySegment CreateEnhMetaFileW(MemorySegment hdc, MemorySegment lpFilename, MemorySegment lprc, MemorySegment lpDesc) {
        var mh$ = CreateEnhMetaFileW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hdc, lpFilename, lprc, lpDesc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteEnhMetaFile$MH() {
        return RuntimeHelper.requireNonNull(constants$1046.const$3,"DeleteEnhMetaFile");
    }
    /**
     * {@snippet :
     * BOOL DeleteEnhMetaFile(HENHMETAFILE hmf);
     * }
     */
    public static int DeleteEnhMetaFile(MemorySegment hmf) {
        var mh$ = DeleteEnhMetaFile$MH();
        try {
            return (int)mh$.invokeExact(hmf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumEnhMetaFile$MH() {
        return RuntimeHelper.requireNonNull(constants$1046.const$4,"EnumEnhMetaFile");
    }
    /**
     * {@snippet :
     * BOOL EnumEnhMetaFile(HDC hdc, HENHMETAFILE hmf, ENHMFENUMPROC proc, LPVOID param, const RECT* lpRect);
     * }
     */
    public static int EnumEnhMetaFile(MemorySegment hdc, MemorySegment hmf, MemorySegment proc, MemorySegment param, MemorySegment lpRect) {
        var mh$ = EnumEnhMetaFile$MH();
        try {
            return (int)mh$.invokeExact(hdc, hmf, proc, param, lpRect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetEnhMetaFileA$MH() {
        return RuntimeHelper.requireNonNull(constants$1046.const$5,"GetEnhMetaFileA");
    }
    /**
     * {@snippet :
     * HENHMETAFILE GetEnhMetaFileA(LPCSTR lpName);
     * }
     */
    public static MemorySegment GetEnhMetaFileA(MemorySegment lpName) {
        var mh$ = GetEnhMetaFileA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetEnhMetaFileW$MH() {
        return RuntimeHelper.requireNonNull(constants$1047.const$0,"GetEnhMetaFileW");
    }
    /**
     * {@snippet :
     * HENHMETAFILE GetEnhMetaFileW(LPCWSTR lpName);
     * }
     */
    public static MemorySegment GetEnhMetaFileW(MemorySegment lpName) {
        var mh$ = GetEnhMetaFileW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetEnhMetaFileBits$MH() {
        return RuntimeHelper.requireNonNull(constants$1047.const$1,"GetEnhMetaFileBits");
    }
    /**
     * {@snippet :
     * UINT GetEnhMetaFileBits(HENHMETAFILE hEMF, UINT nSize, LPBYTE lpData);
     * }
     */
    public static int GetEnhMetaFileBits(MemorySegment hEMF, int nSize, MemorySegment lpData) {
        var mh$ = GetEnhMetaFileBits$MH();
        try {
            return (int)mh$.invokeExact(hEMF, nSize, lpData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetEnhMetaFileDescriptionA$MH() {
        return RuntimeHelper.requireNonNull(constants$1047.const$2,"GetEnhMetaFileDescriptionA");
    }
    /**
     * {@snippet :
     * UINT GetEnhMetaFileDescriptionA(HENHMETAFILE hemf, UINT cchBuffer, LPSTR lpDescription);
     * }
     */
    public static int GetEnhMetaFileDescriptionA(MemorySegment hemf, int cchBuffer, MemorySegment lpDescription) {
        var mh$ = GetEnhMetaFileDescriptionA$MH();
        try {
            return (int)mh$.invokeExact(hemf, cchBuffer, lpDescription);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetEnhMetaFileDescriptionW$MH() {
        return RuntimeHelper.requireNonNull(constants$1047.const$3,"GetEnhMetaFileDescriptionW");
    }
    /**
     * {@snippet :
     * UINT GetEnhMetaFileDescriptionW(HENHMETAFILE hemf, UINT cchBuffer, LPWSTR lpDescription);
     * }
     */
    public static int GetEnhMetaFileDescriptionW(MemorySegment hemf, int cchBuffer, MemorySegment lpDescription) {
        var mh$ = GetEnhMetaFileDescriptionW$MH();
        try {
            return (int)mh$.invokeExact(hemf, cchBuffer, lpDescription);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetEnhMetaFileHeader$MH() {
        return RuntimeHelper.requireNonNull(constants$1047.const$4,"GetEnhMetaFileHeader");
    }
    /**
     * {@snippet :
     * UINT GetEnhMetaFileHeader(HENHMETAFILE hemf, UINT nSize, LPENHMETAHEADER lpEnhMetaHeader);
     * }
     */
    public static int GetEnhMetaFileHeader(MemorySegment hemf, int nSize, MemorySegment lpEnhMetaHeader) {
        var mh$ = GetEnhMetaFileHeader$MH();
        try {
            return (int)mh$.invokeExact(hemf, nSize, lpEnhMetaHeader);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetEnhMetaFilePaletteEntries$MH() {
        return RuntimeHelper.requireNonNull(constants$1047.const$5,"GetEnhMetaFilePaletteEntries");
    }
    /**
     * {@snippet :
     * UINT GetEnhMetaFilePaletteEntries(HENHMETAFILE hemf, UINT nNumEntries, LPPALETTEENTRY lpPaletteEntries);
     * }
     */
    public static int GetEnhMetaFilePaletteEntries(MemorySegment hemf, int nNumEntries, MemorySegment lpPaletteEntries) {
        var mh$ = GetEnhMetaFilePaletteEntries$MH();
        try {
            return (int)mh$.invokeExact(hemf, nNumEntries, lpPaletteEntries);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetEnhMetaFilePixelFormat$MH() {
        return RuntimeHelper.requireNonNull(constants$1048.const$0,"GetEnhMetaFilePixelFormat");
    }
    /**
     * {@snippet :
     * UINT GetEnhMetaFilePixelFormat(HENHMETAFILE hemf, UINT cbBuffer, PIXELFORMATDESCRIPTOR* ppfd);
     * }
     */
    public static int GetEnhMetaFilePixelFormat(MemorySegment hemf, int cbBuffer, MemorySegment ppfd) {
        var mh$ = GetEnhMetaFilePixelFormat$MH();
        try {
            return (int)mh$.invokeExact(hemf, cbBuffer, ppfd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWinMetaFileBits$MH() {
        return RuntimeHelper.requireNonNull(constants$1048.const$1,"GetWinMetaFileBits");
    }
    /**
     * {@snippet :
     * UINT GetWinMetaFileBits(HENHMETAFILE hemf, UINT cbData16, LPBYTE pData16, INT iMapMode, HDC hdcRef);
     * }
     */
    public static int GetWinMetaFileBits(MemorySegment hemf, int cbData16, MemorySegment pData16, int iMapMode, MemorySegment hdcRef) {
        var mh$ = GetWinMetaFileBits$MH();
        try {
            return (int)mh$.invokeExact(hemf, cbData16, pData16, iMapMode, hdcRef);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PlayEnhMetaFile$MH() {
        return RuntimeHelper.requireNonNull(constants$1048.const$2,"PlayEnhMetaFile");
    }
    /**
     * {@snippet :
     * BOOL PlayEnhMetaFile(HDC hdc, HENHMETAFILE hmf, const RECT* lprect);
     * }
     */
    public static int PlayEnhMetaFile(MemorySegment hdc, MemorySegment hmf, MemorySegment lprect) {
        var mh$ = PlayEnhMetaFile$MH();
        try {
            return (int)mh$.invokeExact(hdc, hmf, lprect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PlayEnhMetaFileRecord$MH() {
        return RuntimeHelper.requireNonNull(constants$1048.const$3,"PlayEnhMetaFileRecord");
    }
    /**
     * {@snippet :
     * BOOL PlayEnhMetaFileRecord(HDC hdc, LPHANDLETABLE pht, const ENHMETARECORD* pmr, UINT cht);
     * }
     */
    public static int PlayEnhMetaFileRecord(MemorySegment hdc, MemorySegment pht, MemorySegment pmr, int cht) {
        var mh$ = PlayEnhMetaFileRecord$MH();
        try {
            return (int)mh$.invokeExact(hdc, pht, pmr, cht);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetEnhMetaFileBits$MH() {
        return RuntimeHelper.requireNonNull(constants$1048.const$4,"SetEnhMetaFileBits");
    }
    /**
     * {@snippet :
     * HENHMETAFILE SetEnhMetaFileBits(UINT nSize, const BYTE* pb);
     * }
     */
    public static MemorySegment SetEnhMetaFileBits(int nSize, MemorySegment pb) {
        var mh$ = SetEnhMetaFileBits$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(nSize, pb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWinMetaFileBits$MH() {
        return RuntimeHelper.requireNonNull(constants$1048.const$6,"SetWinMetaFileBits");
    }
    /**
     * {@snippet :
     * HENHMETAFILE SetWinMetaFileBits(UINT nSize, const BYTE* lpMeta16Data, HDC hdcRef, const METAFILEPICT* lpMFP);
     * }
     */
    public static MemorySegment SetWinMetaFileBits(int nSize, MemorySegment lpMeta16Data, MemorySegment hdcRef, MemorySegment lpMFP) {
        var mh$ = SetWinMetaFileBits$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(nSize, lpMeta16Data, hdcRef, lpMFP);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GdiComment$MH() {
        return RuntimeHelper.requireNonNull(constants$1049.const$0,"GdiComment");
    }
    /**
     * {@snippet :
     * BOOL GdiComment(HDC hdc, UINT nSize, const BYTE* lpData);
     * }
     */
    public static int GdiComment(MemorySegment hdc, int nSize, MemorySegment lpData) {
        var mh$ = GdiComment$MH();
        try {
            return (int)mh$.invokeExact(hdc, nSize, lpData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTextMetricsA$MH() {
        return RuntimeHelper.requireNonNull(constants$1049.const$1,"GetTextMetricsA");
    }
    /**
     * {@snippet :
     * BOOL GetTextMetricsA(HDC hdc, LPTEXTMETRICA lptm);
     * }
     */
    public static int GetTextMetricsA(MemorySegment hdc, MemorySegment lptm) {
        var mh$ = GetTextMetricsA$MH();
        try {
            return (int)mh$.invokeExact(hdc, lptm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTextMetricsW$MH() {
        return RuntimeHelper.requireNonNull(constants$1049.const$2,"GetTextMetricsW");
    }
    /**
     * {@snippet :
     * BOOL GetTextMetricsW(HDC hdc, LPTEXTMETRICW lptm);
     * }
     */
    public static int GetTextMetricsW(MemorySegment hdc, MemorySegment lptm) {
        var mh$ = GetTextMetricsW$MH();
        try {
            return (int)mh$.invokeExact(hdc, lptm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagDIBSECTION* LPDIBSECTION;
     * }
     */
    public static final AddressLayout LPDIBSECTION = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagDIBSECTION* PDIBSECTION;
     * }
     */
    public static final AddressLayout PDIBSECTION = RuntimeHelper.POINTER;
    public static MethodHandle AngleArc$MH() {
        return RuntimeHelper.requireNonNull(constants$1050.const$1,"AngleArc");
    }
    /**
     * {@snippet :
     * BOOL AngleArc(HDC hdc, int x, int y, DWORD r, FLOAT StartAngle, FLOAT SweepAngle);
     * }
     */
    public static int AngleArc(MemorySegment hdc, int x, int y, int r, float StartAngle, float SweepAngle) {
        var mh$ = AngleArc$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, r, StartAngle, SweepAngle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PolyPolyline$MH() {
        return RuntimeHelper.requireNonNull(constants$1050.const$2,"PolyPolyline");
    }
    /**
     * {@snippet :
     * BOOL PolyPolyline(HDC hdc, const POINT* apt, const DWORD* asz, DWORD csz);
     * }
     */
    public static int PolyPolyline(MemorySegment hdc, MemorySegment apt, MemorySegment asz, int csz) {
        var mh$ = PolyPolyline$MH();
        try {
            return (int)mh$.invokeExact(hdc, apt, asz, csz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWorldTransform$MH() {
        return RuntimeHelper.requireNonNull(constants$1050.const$3,"GetWorldTransform");
    }
    /**
     * {@snippet :
     * BOOL GetWorldTransform(HDC hdc, LPXFORM lpxf);
     * }
     */
    public static int GetWorldTransform(MemorySegment hdc, MemorySegment lpxf) {
        var mh$ = GetWorldTransform$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpxf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWorldTransform$MH() {
        return RuntimeHelper.requireNonNull(constants$1050.const$4,"SetWorldTransform");
    }
    /**
     * {@snippet :
     * BOOL SetWorldTransform(HDC hdc, const XFORM* lpxf);
     * }
     */
    public static int SetWorldTransform(MemorySegment hdc, MemorySegment lpxf) {
        var mh$ = SetWorldTransform$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpxf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ModifyWorldTransform$MH() {
        return RuntimeHelper.requireNonNull(constants$1050.const$5,"ModifyWorldTransform");
    }
    /**
     * {@snippet :
     * BOOL ModifyWorldTransform(HDC hdc, const XFORM* lpxf, DWORD mode);
     * }
     */
    public static int ModifyWorldTransform(MemorySegment hdc, MemorySegment lpxf, int mode) {
        var mh$ = ModifyWorldTransform$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpxf, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CombineTransform$MH() {
        return RuntimeHelper.requireNonNull(constants$1051.const$0,"CombineTransform");
    }
    /**
     * {@snippet :
     * BOOL CombineTransform(LPXFORM lpxfOut, const XFORM* lpxf1, const XFORM* lpxf2);
     * }
     */
    public static int CombineTransform(MemorySegment lpxfOut, MemorySegment lpxf1, MemorySegment lpxf2) {
        var mh$ = CombineTransform$MH();
        try {
            return (int)mh$.invokeExact(lpxfOut, lpxf1, lpxf2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDIBSection$MH() {
        return RuntimeHelper.requireNonNull(constants$1051.const$1,"CreateDIBSection");
    }
    /**
     * {@snippet :
     * HBITMAP CreateDIBSection(HDC hdc, const BITMAPINFO* pbmi, UINT usage, void** ppvBits, HANDLE hSection, DWORD offset);
     * }
     */
    public static MemorySegment CreateDIBSection(MemorySegment hdc, MemorySegment pbmi, int usage, MemorySegment ppvBits, MemorySegment hSection, int offset) {
        var mh$ = CreateDIBSection$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hdc, pbmi, usage, ppvBits, hSection, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDIBColorTable$MH() {
        return RuntimeHelper.requireNonNull(constants$1051.const$2,"GetDIBColorTable");
    }
    /**
     * {@snippet :
     * UINT GetDIBColorTable(HDC hdc, UINT iStart, UINT cEntries, RGBQUAD* prgbq);
     * }
     */
    public static int GetDIBColorTable(MemorySegment hdc, int iStart, int cEntries, MemorySegment prgbq) {
        var mh$ = GetDIBColorTable$MH();
        try {
            return (int)mh$.invokeExact(hdc, iStart, cEntries, prgbq);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetDIBColorTable$MH() {
        return RuntimeHelper.requireNonNull(constants$1051.const$3,"SetDIBColorTable");
    }
    /**
     * {@snippet :
     * UINT SetDIBColorTable(HDC hdc, UINT iStart, UINT cEntries, const RGBQUAD* prgbq);
     * }
     */
    public static int SetDIBColorTable(MemorySegment hdc, int iStart, int cEntries, MemorySegment prgbq) {
        var mh$ = SetDIBColorTable$MH();
        try {
            return (int)mh$.invokeExact(hdc, iStart, cEntries, prgbq);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagCOLORADJUSTMENT* PCOLORADJUSTMENT;
     * }
     */
    public static final AddressLayout PCOLORADJUSTMENT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagCOLORADJUSTMENT* LPCOLORADJUSTMENT;
     * }
     */
    public static final AddressLayout LPCOLORADJUSTMENT = RuntimeHelper.POINTER;
    public static MethodHandle SetColorAdjustment$MH() {
        return RuntimeHelper.requireNonNull(constants$1053.const$5,"SetColorAdjustment");
    }
    /**
     * {@snippet :
     * BOOL SetColorAdjustment(HDC hdc, const COLORADJUSTMENT* lpca);
     * }
     */
    public static int SetColorAdjustment(MemorySegment hdc, MemorySegment lpca) {
        var mh$ = SetColorAdjustment$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpca);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetColorAdjustment$MH() {
        return RuntimeHelper.requireNonNull(constants$1054.const$0,"GetColorAdjustment");
    }
    /**
     * {@snippet :
     * BOOL GetColorAdjustment(HDC hdc, LPCOLORADJUSTMENT lpca);
     * }
     */
    public static int GetColorAdjustment(MemorySegment hdc, MemorySegment lpca) {
        var mh$ = GetColorAdjustment$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpca);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateHalftonePalette$MH() {
        return RuntimeHelper.requireNonNull(constants$1054.const$1,"CreateHalftonePalette");
    }
    /**
     * {@snippet :
     * HPALETTE CreateHalftonePalette(HDC hdc);
     * }
     */
    public static MemorySegment CreateHalftonePalette(MemorySegment hdc) {
        var mh$ = CreateHalftonePalette$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _DOCINFOA* LPDOCINFOA;
     * }
     */
    public static final AddressLayout LPDOCINFOA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _DOCINFOW* LPDOCINFOW;
     * }
     */
    public static final AddressLayout LPDOCINFOW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _DOCINFOA* LPDOCINFO;
     * }
     */
    public static final AddressLayout LPDOCINFO = RuntimeHelper.POINTER;
    public static MethodHandle StartDocA$MH() {
        return RuntimeHelper.requireNonNull(constants$1056.const$3,"StartDocA");
    }
    /**
     * {@snippet :
     * int StartDocA(HDC hdc, const DOCINFOA* lpdi);
     * }
     */
    public static int StartDocA(MemorySegment hdc, MemorySegment lpdi) {
        var mh$ = StartDocA$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpdi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle StartDocW$MH() {
        return RuntimeHelper.requireNonNull(constants$1056.const$4,"StartDocW");
    }
    /**
     * {@snippet :
     * int StartDocW(HDC hdc, const DOCINFOW* lpdi);
     * }
     */
    public static int StartDocW(MemorySegment hdc, MemorySegment lpdi) {
        var mh$ = StartDocW$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpdi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EndDoc$MH() {
        return RuntimeHelper.requireNonNull(constants$1056.const$5,"EndDoc");
    }
    /**
     * {@snippet :
     * int EndDoc(HDC hdc);
     * }
     */
    public static int EndDoc(MemorySegment hdc) {
        var mh$ = EndDoc$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle StartPage$MH() {
        return RuntimeHelper.requireNonNull(constants$1057.const$0,"StartPage");
    }
    /**
     * {@snippet :
     * int StartPage(HDC hdc);
     * }
     */
    public static int StartPage(MemorySegment hdc) {
        var mh$ = StartPage$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EndPage$MH() {
        return RuntimeHelper.requireNonNull(constants$1057.const$1,"EndPage");
    }
    /**
     * {@snippet :
     * int EndPage(HDC hdc);
     * }
     */
    public static int EndPage(MemorySegment hdc) {
        var mh$ = EndPage$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AbortDoc$MH() {
        return RuntimeHelper.requireNonNull(constants$1057.const$2,"AbortDoc");
    }
    /**
     * {@snippet :
     * int AbortDoc(HDC hdc);
     * }
     */
    public static int AbortDoc(MemorySegment hdc) {
        var mh$ = AbortDoc$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetAbortProc$MH() {
        return RuntimeHelper.requireNonNull(constants$1057.const$3,"SetAbortProc");
    }
    /**
     * {@snippet :
     * int SetAbortProc(HDC hdc, ABORTPROC proc);
     * }
     */
    public static int SetAbortProc(MemorySegment hdc, MemorySegment proc) {
        var mh$ = SetAbortProc$MH();
        try {
            return (int)mh$.invokeExact(hdc, proc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AbortPath$MH() {
        return RuntimeHelper.requireNonNull(constants$1057.const$4,"AbortPath");
    }
    /**
     * {@snippet :
     * BOOL AbortPath(HDC hdc);
     * }
     */
    public static int AbortPath(MemorySegment hdc) {
        var mh$ = AbortPath$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ArcTo$MH() {
        return RuntimeHelper.requireNonNull(constants$1057.const$5,"ArcTo");
    }
    /**
     * {@snippet :
     * BOOL ArcTo(HDC hdc, int left, int top, int right, int bottom, int xr1, int yr1, int xr2, int yr2);
     * }
     */
    public static int ArcTo(MemorySegment hdc, int left, int top, int right, int bottom, int xr1, int yr1, int xr2, int yr2) {
        var mh$ = ArcTo$MH();
        try {
            return (int)mh$.invokeExact(hdc, left, top, right, bottom, xr1, yr1, xr2, yr2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BeginPath$MH() {
        return RuntimeHelper.requireNonNull(constants$1058.const$0,"BeginPath");
    }
    /**
     * {@snippet :
     * BOOL BeginPath(HDC hdc);
     * }
     */
    public static int BeginPath(MemorySegment hdc) {
        var mh$ = BeginPath$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CloseFigure$MH() {
        return RuntimeHelper.requireNonNull(constants$1058.const$1,"CloseFigure");
    }
    /**
     * {@snippet :
     * BOOL CloseFigure(HDC hdc);
     * }
     */
    public static int CloseFigure(MemorySegment hdc) {
        var mh$ = CloseFigure$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EndPath$MH() {
        return RuntimeHelper.requireNonNull(constants$1058.const$2,"EndPath");
    }
    /**
     * {@snippet :
     * BOOL EndPath(HDC hdc);
     * }
     */
    public static int EndPath(MemorySegment hdc) {
        var mh$ = EndPath$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FillPath$MH() {
        return RuntimeHelper.requireNonNull(constants$1058.const$3,"FillPath");
    }
    /**
     * {@snippet :
     * BOOL FillPath(HDC hdc);
     * }
     */
    public static int FillPath(MemorySegment hdc) {
        var mh$ = FillPath$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FlattenPath$MH() {
        return RuntimeHelper.requireNonNull(constants$1058.const$4,"FlattenPath");
    }
    /**
     * {@snippet :
     * BOOL FlattenPath(HDC hdc);
     * }
     */
    public static int FlattenPath(MemorySegment hdc) {
        var mh$ = FlattenPath$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPath$MH() {
        return RuntimeHelper.requireNonNull(constants$1058.const$5,"GetPath");
    }
    /**
     * {@snippet :
     * int GetPath(HDC hdc, LPPOINT apt, LPBYTE aj, int cpt);
     * }
     */
    public static int GetPath(MemorySegment hdc, MemorySegment apt, MemorySegment aj, int cpt) {
        var mh$ = GetPath$MH();
        try {
            return (int)mh$.invokeExact(hdc, apt, aj, cpt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PathToRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$1059.const$0,"PathToRegion");
    }
    /**
     * {@snippet :
     * HRGN PathToRegion(HDC hdc);
     * }
     */
    public static MemorySegment PathToRegion(MemorySegment hdc) {
        var mh$ = PathToRegion$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PolyDraw$MH() {
        return RuntimeHelper.requireNonNull(constants$1059.const$1,"PolyDraw");
    }
    /**
     * {@snippet :
     * BOOL PolyDraw(HDC hdc, const POINT* apt, const BYTE* aj, int cpt);
     * }
     */
    public static int PolyDraw(MemorySegment hdc, MemorySegment apt, MemorySegment aj, int cpt) {
        var mh$ = PolyDraw$MH();
        try {
            return (int)mh$.invokeExact(hdc, apt, aj, cpt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SelectClipPath$MH() {
        return RuntimeHelper.requireNonNull(constants$1059.const$2,"SelectClipPath");
    }
    /**
     * {@snippet :
     * BOOL SelectClipPath(HDC hdc, int mode);
     * }
     */
    public static int SelectClipPath(MemorySegment hdc, int mode) {
        var mh$ = SelectClipPath$MH();
        try {
            return (int)mh$.invokeExact(hdc, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetArcDirection$MH() {
        return RuntimeHelper.requireNonNull(constants$1059.const$3,"SetArcDirection");
    }
    /**
     * {@snippet :
     * int SetArcDirection(HDC hdc, int dir);
     * }
     */
    public static int SetArcDirection(MemorySegment hdc, int dir) {
        var mh$ = SetArcDirection$MH();
        try {
            return (int)mh$.invokeExact(hdc, dir);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetMiterLimit$MH() {
        return RuntimeHelper.requireNonNull(constants$1059.const$5,"SetMiterLimit");
    }
    /**
     * {@snippet :
     * BOOL SetMiterLimit(HDC hdc, FLOAT limit, PFLOAT old);
     * }
     */
    public static int SetMiterLimit(MemorySegment hdc, float limit, MemorySegment old) {
        var mh$ = SetMiterLimit$MH();
        try {
            return (int)mh$.invokeExact(hdc, limit, old);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle StrokeAndFillPath$MH() {
        return RuntimeHelper.requireNonNull(constants$1060.const$0,"StrokeAndFillPath");
    }
    /**
     * {@snippet :
     * BOOL StrokeAndFillPath(HDC hdc);
     * }
     */
    public static int StrokeAndFillPath(MemorySegment hdc) {
        var mh$ = StrokeAndFillPath$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle StrokePath$MH() {
        return RuntimeHelper.requireNonNull(constants$1060.const$1,"StrokePath");
    }
    /**
     * {@snippet :
     * BOOL StrokePath(HDC hdc);
     * }
     */
    public static int StrokePath(MemorySegment hdc) {
        var mh$ = StrokePath$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WidenPath$MH() {
        return RuntimeHelper.requireNonNull(constants$1060.const$2,"WidenPath");
    }
    /**
     * {@snippet :
     * BOOL WidenPath(HDC hdc);
     * }
     */
    public static int WidenPath(MemorySegment hdc) {
        var mh$ = WidenPath$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExtCreatePen$MH() {
        return RuntimeHelper.requireNonNull(constants$1060.const$4,"ExtCreatePen");
    }
    /**
     * {@snippet :
     * HPEN ExtCreatePen(DWORD iPenStyle, DWORD cWidth, const LOGBRUSH* plbrush, DWORD cStyle, const DWORD* pstyle);
     * }
     */
    public static MemorySegment ExtCreatePen(int iPenStyle, int cWidth, MemorySegment plbrush, int cStyle, MemorySegment pstyle) {
        var mh$ = ExtCreatePen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(iPenStyle, cWidth, plbrush, cStyle, pstyle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMiterLimit$MH() {
        return RuntimeHelper.requireNonNull(constants$1060.const$5,"GetMiterLimit");
    }
    /**
     * {@snippet :
     * BOOL GetMiterLimit(HDC hdc, PFLOAT plimit);
     * }
     */
    public static int GetMiterLimit(MemorySegment hdc, MemorySegment plimit) {
        var mh$ = GetMiterLimit$MH();
        try {
            return (int)mh$.invokeExact(hdc, plimit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetArcDirection$MH() {
        return RuntimeHelper.requireNonNull(constants$1061.const$0,"GetArcDirection");
    }
    /**
     * {@snippet :
     * int GetArcDirection(HDC hdc);
     * }
     */
    public static int GetArcDirection(MemorySegment hdc) {
        var mh$ = GetArcDirection$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetObjectA$MH() {
        return RuntimeHelper.requireNonNull(constants$1061.const$1,"GetObjectA");
    }
    /**
     * {@snippet :
     * int GetObjectA(HANDLE h, int c, LPVOID pv);
     * }
     */
    public static int GetObjectA(MemorySegment h, int c, MemorySegment pv) {
        var mh$ = GetObjectA$MH();
        try {
            return (int)mh$.invokeExact(h, c, pv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetObjectW$MH() {
        return RuntimeHelper.requireNonNull(constants$1061.const$2,"GetObjectW");
    }
    /**
     * {@snippet :
     * int GetObjectW(HANDLE h, int c, LPVOID pv);
     * }
     */
    public static int GetObjectW(MemorySegment h, int c, MemorySegment pv) {
        var mh$ = GetObjectW$MH();
        try {
            return (int)mh$.invokeExact(h, c, pv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MoveToEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1061.const$3,"MoveToEx");
    }
    /**
     * {@snippet :
     * BOOL MoveToEx(HDC hdc, int x, int y, LPPOINT lppt);
     * }
     */
    public static int MoveToEx(MemorySegment hdc, int x, int y, MemorySegment lppt) {
        var mh$ = MoveToEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, lppt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TextOutA$MH() {
        return RuntimeHelper.requireNonNull(constants$1061.const$4,"TextOutA");
    }
    /**
     * {@snippet :
     * BOOL TextOutA(HDC hdc, int x, int y, LPCSTR lpString, int c);
     * }
     */
    public static int TextOutA(MemorySegment hdc, int x, int y, MemorySegment lpString, int c) {
        var mh$ = TextOutA$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, lpString, c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TextOutW$MH() {
        return RuntimeHelper.requireNonNull(constants$1061.const$5,"TextOutW");
    }
    /**
     * {@snippet :
     * BOOL TextOutW(HDC hdc, int x, int y, LPCWSTR lpString, int c);
     * }
     */
    public static int TextOutW(MemorySegment hdc, int x, int y, MemorySegment lpString, int c) {
        var mh$ = TextOutW$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, lpString, c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExtTextOutA$MH() {
        return RuntimeHelper.requireNonNull(constants$1062.const$1,"ExtTextOutA");
    }
    /**
     * {@snippet :
     * BOOL ExtTextOutA(HDC hdc, int x, int y, UINT options, const RECT* lprect, LPCSTR lpString, UINT c, const INT* lpDx);
     * }
     */
    public static int ExtTextOutA(MemorySegment hdc, int x, int y, int options, MemorySegment lprect, MemorySegment lpString, int c, MemorySegment lpDx) {
        var mh$ = ExtTextOutA$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, options, lprect, lpString, c, lpDx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExtTextOutW$MH() {
        return RuntimeHelper.requireNonNull(constants$1062.const$2,"ExtTextOutW");
    }
    /**
     * {@snippet :
     * BOOL ExtTextOutW(HDC hdc, int x, int y, UINT options, const RECT* lprect, LPCWSTR lpString, UINT c, const INT* lpDx);
     * }
     */
    public static int ExtTextOutW(MemorySegment hdc, int x, int y, int options, MemorySegment lprect, MemorySegment lpString, int c, MemorySegment lpDx) {
        var mh$ = ExtTextOutW$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, options, lprect, lpString, c, lpDx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PolyTextOutA$MH() {
        return RuntimeHelper.requireNonNull(constants$1062.const$3,"PolyTextOutA");
    }
    /**
     * {@snippet :
     * BOOL PolyTextOutA(HDC hdc, const POLYTEXTA* ppt, int nstrings);
     * }
     */
    public static int PolyTextOutA(MemorySegment hdc, MemorySegment ppt, int nstrings) {
        var mh$ = PolyTextOutA$MH();
        try {
            return (int)mh$.invokeExact(hdc, ppt, nstrings);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PolyTextOutW$MH() {
        return RuntimeHelper.requireNonNull(constants$1062.const$4,"PolyTextOutW");
    }
    /**
     * {@snippet :
     * BOOL PolyTextOutW(HDC hdc, const POLYTEXTW* ppt, int nstrings);
     * }
     */
    public static int PolyTextOutW(MemorySegment hdc, MemorySegment ppt, int nstrings) {
        var mh$ = PolyTextOutW$MH();
        try {
            return (int)mh$.invokeExact(hdc, ppt, nstrings);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreatePolygonRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$1062.const$5,"CreatePolygonRgn");
    }
    /**
     * {@snippet :
     * HRGN CreatePolygonRgn(const POINT* pptl, int cPoint, int iMode);
     * }
     */
    public static MemorySegment CreatePolygonRgn(MemorySegment pptl, int cPoint, int iMode) {
        var mh$ = CreatePolygonRgn$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(pptl, cPoint, iMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DPtoLP$MH() {
        return RuntimeHelper.requireNonNull(constants$1063.const$0,"DPtoLP");
    }
    /**
     * {@snippet :
     * BOOL DPtoLP(HDC hdc, LPPOINT lppt, int c);
     * }
     */
    public static int DPtoLP(MemorySegment hdc, MemorySegment lppt, int c) {
        var mh$ = DPtoLP$MH();
        try {
            return (int)mh$.invokeExact(hdc, lppt, c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LPtoDP$MH() {
        return RuntimeHelper.requireNonNull(constants$1063.const$1,"LPtoDP");
    }
    /**
     * {@snippet :
     * BOOL LPtoDP(HDC hdc, LPPOINT lppt, int c);
     * }
     */
    public static int LPtoDP(MemorySegment hdc, MemorySegment lppt, int c) {
        var mh$ = LPtoDP$MH();
        try {
            return (int)mh$.invokeExact(hdc, lppt, c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Polygon$MH() {
        return RuntimeHelper.requireNonNull(constants$1063.const$2,"Polygon");
    }
    /**
     * {@snippet :
     * BOOL Polygon(HDC hdc, const POINT* apt, int cpt);
     * }
     */
    public static int Polygon(MemorySegment hdc, MemorySegment apt, int cpt) {
        var mh$ = Polygon$MH();
        try {
            return (int)mh$.invokeExact(hdc, apt, cpt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Polyline$MH() {
        return RuntimeHelper.requireNonNull(constants$1063.const$3,"Polyline");
    }
    /**
     * {@snippet :
     * BOOL Polyline(HDC hdc, const POINT* apt, int cpt);
     * }
     */
    public static int Polyline(MemorySegment hdc, MemorySegment apt, int cpt) {
        var mh$ = Polyline$MH();
        try {
            return (int)mh$.invokeExact(hdc, apt, cpt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PolyBezier$MH() {
        return RuntimeHelper.requireNonNull(constants$1063.const$4,"PolyBezier");
    }
    /**
     * {@snippet :
     * BOOL PolyBezier(HDC hdc, const POINT* apt, DWORD cpt);
     * }
     */
    public static int PolyBezier(MemorySegment hdc, MemorySegment apt, int cpt) {
        var mh$ = PolyBezier$MH();
        try {
            return (int)mh$.invokeExact(hdc, apt, cpt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PolyBezierTo$MH() {
        return RuntimeHelper.requireNonNull(constants$1063.const$5,"PolyBezierTo");
    }
    /**
     * {@snippet :
     * BOOL PolyBezierTo(HDC hdc, const POINT* apt, DWORD cpt);
     * }
     */
    public static int PolyBezierTo(MemorySegment hdc, MemorySegment apt, int cpt) {
        var mh$ = PolyBezierTo$MH();
        try {
            return (int)mh$.invokeExact(hdc, apt, cpt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PolylineTo$MH() {
        return RuntimeHelper.requireNonNull(constants$1064.const$0,"PolylineTo");
    }
    /**
     * {@snippet :
     * BOOL PolylineTo(HDC hdc, const POINT* apt, DWORD cpt);
     * }
     */
    public static int PolylineTo(MemorySegment hdc, MemorySegment apt, int cpt) {
        var mh$ = PolylineTo$MH();
        try {
            return (int)mh$.invokeExact(hdc, apt, cpt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetViewportExtEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1064.const$1,"SetViewportExtEx");
    }
    /**
     * {@snippet :
     * BOOL SetViewportExtEx(HDC hdc, int x, int y, LPSIZE lpsz);
     * }
     */
    public static int SetViewportExtEx(MemorySegment hdc, int x, int y, MemorySegment lpsz) {
        var mh$ = SetViewportExtEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, lpsz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetViewportOrgEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1064.const$2,"SetViewportOrgEx");
    }
    /**
     * {@snippet :
     * BOOL SetViewportOrgEx(HDC hdc, int x, int y, LPPOINT lppt);
     * }
     */
    public static int SetViewportOrgEx(MemorySegment hdc, int x, int y, MemorySegment lppt) {
        var mh$ = SetViewportOrgEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, lppt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowExtEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1064.const$3,"SetWindowExtEx");
    }
    /**
     * {@snippet :
     * BOOL SetWindowExtEx(HDC hdc, int x, int y, LPSIZE lpsz);
     * }
     */
    public static int SetWindowExtEx(MemorySegment hdc, int x, int y, MemorySegment lpsz) {
        var mh$ = SetWindowExtEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, lpsz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowOrgEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1064.const$4,"SetWindowOrgEx");
    }
    /**
     * {@snippet :
     * BOOL SetWindowOrgEx(HDC hdc, int x, int y, LPPOINT lppt);
     * }
     */
    public static int SetWindowOrgEx(MemorySegment hdc, int x, int y, MemorySegment lppt) {
        var mh$ = SetWindowOrgEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, lppt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OffsetViewportOrgEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1064.const$5,"OffsetViewportOrgEx");
    }
    /**
     * {@snippet :
     * BOOL OffsetViewportOrgEx(HDC hdc, int x, int y, LPPOINT lppt);
     * }
     */
    public static int OffsetViewportOrgEx(MemorySegment hdc, int x, int y, MemorySegment lppt) {
        var mh$ = OffsetViewportOrgEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, lppt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OffsetWindowOrgEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1065.const$0,"OffsetWindowOrgEx");
    }
    /**
     * {@snippet :
     * BOOL OffsetWindowOrgEx(HDC hdc, int x, int y, LPPOINT lppt);
     * }
     */
    public static int OffsetWindowOrgEx(MemorySegment hdc, int x, int y, MemorySegment lppt) {
        var mh$ = OffsetWindowOrgEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, lppt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ScaleViewportExtEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1065.const$1,"ScaleViewportExtEx");
    }
    /**
     * {@snippet :
     * BOOL ScaleViewportExtEx(HDC hdc, int xn, int dx, int yn, int yd, LPSIZE lpsz);
     * }
     */
    public static int ScaleViewportExtEx(MemorySegment hdc, int xn, int dx, int yn, int yd, MemorySegment lpsz) {
        var mh$ = ScaleViewportExtEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, xn, dx, yn, yd, lpsz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ScaleWindowExtEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1065.const$2,"ScaleWindowExtEx");
    }
    /**
     * {@snippet :
     * BOOL ScaleWindowExtEx(HDC hdc, int xn, int xd, int yn, int yd, LPSIZE lpsz);
     * }
     */
    public static int ScaleWindowExtEx(MemorySegment hdc, int xn, int xd, int yn, int yd, MemorySegment lpsz) {
        var mh$ = ScaleWindowExtEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, xn, xd, yn, yd, lpsz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetBitmapDimensionEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1065.const$3,"SetBitmapDimensionEx");
    }
    /**
     * {@snippet :
     * BOOL SetBitmapDimensionEx(HBITMAP hbm, int w, int h, LPSIZE lpsz);
     * }
     */
    public static int SetBitmapDimensionEx(MemorySegment hbm, int w, int h, MemorySegment lpsz) {
        var mh$ = SetBitmapDimensionEx$MH();
        try {
            return (int)mh$.invokeExact(hbm, w, h, lpsz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetBrushOrgEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1065.const$4,"SetBrushOrgEx");
    }
    /**
     * {@snippet :
     * BOOL SetBrushOrgEx(HDC hdc, int x, int y, LPPOINT lppt);
     * }
     */
    public static int SetBrushOrgEx(MemorySegment hdc, int x, int y, MemorySegment lppt) {
        var mh$ = SetBrushOrgEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, lppt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTextFaceA$MH() {
        return RuntimeHelper.requireNonNull(constants$1065.const$5,"GetTextFaceA");
    }
    /**
     * {@snippet :
     * int GetTextFaceA(HDC hdc, int c, LPSTR lpName);
     * }
     */
    public static int GetTextFaceA(MemorySegment hdc, int c, MemorySegment lpName) {
        var mh$ = GetTextFaceA$MH();
        try {
            return (int)mh$.invokeExact(hdc, c, lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTextFaceW$MH() {
        return RuntimeHelper.requireNonNull(constants$1066.const$0,"GetTextFaceW");
    }
    /**
     * {@snippet :
     * int GetTextFaceW(HDC hdc, int c, LPWSTR lpName);
     * }
     */
    public static int GetTextFaceW(MemorySegment hdc, int c, MemorySegment lpName) {
        var mh$ = GetTextFaceW$MH();
        try {
            return (int)mh$.invokeExact(hdc, c, lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagKERNINGPAIR* LPKERNINGPAIR;
     * }
     */
    public static final AddressLayout LPKERNINGPAIR = RuntimeHelper.POINTER;
    public static MethodHandle GetKerningPairsA$MH() {
        return RuntimeHelper.requireNonNull(constants$1066.const$5,"GetKerningPairsA");
    }
    /**
     * {@snippet :
     * DWORD GetKerningPairsA(HDC hdc, DWORD nPairs, LPKERNINGPAIR lpKernPair);
     * }
     */
    public static int GetKerningPairsA(MemorySegment hdc, int nPairs, MemorySegment lpKernPair) {
        var mh$ = GetKerningPairsA$MH();
        try {
            return (int)mh$.invokeExact(hdc, nPairs, lpKernPair);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetKerningPairsW$MH() {
        return RuntimeHelper.requireNonNull(constants$1067.const$0,"GetKerningPairsW");
    }
    /**
     * {@snippet :
     * DWORD GetKerningPairsW(HDC hdc, DWORD nPairs, LPKERNINGPAIR lpKernPair);
     * }
     */
    public static int GetKerningPairsW(MemorySegment hdc, int nPairs, MemorySegment lpKernPair) {
        var mh$ = GetKerningPairsW$MH();
        try {
            return (int)mh$.invokeExact(hdc, nPairs, lpKernPair);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDCOrgEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1067.const$1,"GetDCOrgEx");
    }
    /**
     * {@snippet :
     * BOOL GetDCOrgEx(HDC hdc, LPPOINT lppt);
     * }
     */
    public static int GetDCOrgEx(MemorySegment hdc, MemorySegment lppt) {
        var mh$ = GetDCOrgEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, lppt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FixBrushOrgEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1067.const$2,"FixBrushOrgEx");
    }
    /**
     * {@snippet :
     * BOOL FixBrushOrgEx(HDC hdc, int x, int y, LPPOINT ptl);
     * }
     */
    public static int FixBrushOrgEx(MemorySegment hdc, int x, int y, MemorySegment ptl) {
        var mh$ = FixBrushOrgEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, ptl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnrealizeObject$MH() {
        return RuntimeHelper.requireNonNull(constants$1067.const$3,"UnrealizeObject");
    }
    /**
     * {@snippet :
     * BOOL UnrealizeObject(HGDIOBJ h);
     * }
     */
    public static int UnrealizeObject(MemorySegment h) {
        var mh$ = UnrealizeObject$MH();
        try {
            return (int)mh$.invokeExact(h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GdiFlush$MH() {
        return RuntimeHelper.requireNonNull(constants$1067.const$4,"GdiFlush");
    }
    /**
     * {@snippet :
     * BOOL GdiFlush();
     * }
     */
    public static int GdiFlush() {
        var mh$ = GdiFlush$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GdiSetBatchLimit$MH() {
        return RuntimeHelper.requireNonNull(constants$1067.const$5,"GdiSetBatchLimit");
    }
    /**
     * {@snippet :
     * DWORD GdiSetBatchLimit(DWORD dw);
     * }
     */
    public static int GdiSetBatchLimit(int dw) {
        var mh$ = GdiSetBatchLimit$MH();
        try {
            return (int)mh$.invokeExact(dw);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GdiGetBatchLimit$MH() {
        return RuntimeHelper.requireNonNull(constants$1068.const$0,"GdiGetBatchLimit");
    }
    /**
     * {@snippet :
     * DWORD GdiGetBatchLimit();
     * }
     */
    public static int GdiGetBatchLimit() {
        var mh$ = GdiGetBatchLimit$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetICMMode$MH() {
        return RuntimeHelper.requireNonNull(constants$1068.const$3,"SetICMMode");
    }
    /**
     * {@snippet :
     * int SetICMMode(HDC hdc, int mode);
     * }
     */
    public static int SetICMMode(MemorySegment hdc, int mode) {
        var mh$ = SetICMMode$MH();
        try {
            return (int)mh$.invokeExact(hdc, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CheckColorsInGamut$MH() {
        return RuntimeHelper.requireNonNull(constants$1068.const$4,"CheckColorsInGamut");
    }
    /**
     * {@snippet :
     * BOOL CheckColorsInGamut(HDC hdc, LPRGBTRIPLE lpRGBTriple, LPVOID dlpBuffer, DWORD nCount);
     * }
     */
    public static int CheckColorsInGamut(MemorySegment hdc, MemorySegment lpRGBTriple, MemorySegment dlpBuffer, int nCount) {
        var mh$ = CheckColorsInGamut$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpRGBTriple, dlpBuffer, nCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetColorSpace$MH() {
        return RuntimeHelper.requireNonNull(constants$1068.const$5,"GetColorSpace");
    }
    /**
     * {@snippet :
     * HCOLORSPACE GetColorSpace(HDC hdc);
     * }
     */
    public static MemorySegment GetColorSpace(MemorySegment hdc) {
        var mh$ = GetColorSpace$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLogColorSpaceA$MH() {
        return RuntimeHelper.requireNonNull(constants$1069.const$0,"GetLogColorSpaceA");
    }
    /**
     * {@snippet :
     * BOOL GetLogColorSpaceA(HCOLORSPACE hColorSpace, LPLOGCOLORSPACEA lpBuffer, DWORD nSize);
     * }
     */
    public static int GetLogColorSpaceA(MemorySegment hColorSpace, MemorySegment lpBuffer, int nSize) {
        var mh$ = GetLogColorSpaceA$MH();
        try {
            return (int)mh$.invokeExact(hColorSpace, lpBuffer, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLogColorSpaceW$MH() {
        return RuntimeHelper.requireNonNull(constants$1069.const$1,"GetLogColorSpaceW");
    }
    /**
     * {@snippet :
     * BOOL GetLogColorSpaceW(HCOLORSPACE hColorSpace, LPLOGCOLORSPACEW lpBuffer, DWORD nSize);
     * }
     */
    public static int GetLogColorSpaceW(MemorySegment hColorSpace, MemorySegment lpBuffer, int nSize) {
        var mh$ = GetLogColorSpaceW$MH();
        try {
            return (int)mh$.invokeExact(hColorSpace, lpBuffer, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateColorSpaceA$MH() {
        return RuntimeHelper.requireNonNull(constants$1069.const$2,"CreateColorSpaceA");
    }
    /**
     * {@snippet :
     * HCOLORSPACE CreateColorSpaceA(LPLOGCOLORSPACEA lplcs);
     * }
     */
    public static MemorySegment CreateColorSpaceA(MemorySegment lplcs) {
        var mh$ = CreateColorSpaceA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lplcs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateColorSpaceW$MH() {
        return RuntimeHelper.requireNonNull(constants$1069.const$3,"CreateColorSpaceW");
    }
    /**
     * {@snippet :
     * HCOLORSPACE CreateColorSpaceW(LPLOGCOLORSPACEW lplcs);
     * }
     */
    public static MemorySegment CreateColorSpaceW(MemorySegment lplcs) {
        var mh$ = CreateColorSpaceW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lplcs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetColorSpace$MH() {
        return RuntimeHelper.requireNonNull(constants$1069.const$4,"SetColorSpace");
    }
    /**
     * {@snippet :
     * HCOLORSPACE SetColorSpace(HDC hdc, HCOLORSPACE hcs);
     * }
     */
    public static MemorySegment SetColorSpace(MemorySegment hdc, MemorySegment hcs) {
        var mh$ = SetColorSpace$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hdc, hcs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteColorSpace$MH() {
        return RuntimeHelper.requireNonNull(constants$1069.const$5,"DeleteColorSpace");
    }
    /**
     * {@snippet :
     * BOOL DeleteColorSpace(HCOLORSPACE hcs);
     * }
     */
    public static int DeleteColorSpace(MemorySegment hcs) {
        var mh$ = DeleteColorSpace$MH();
        try {
            return (int)mh$.invokeExact(hcs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetICMProfileA$MH() {
        return RuntimeHelper.requireNonNull(constants$1070.const$0,"GetICMProfileA");
    }
    /**
     * {@snippet :
     * BOOL GetICMProfileA(HDC hdc, LPDWORD pBufSize, LPSTR pszFilename);
     * }
     */
    public static int GetICMProfileA(MemorySegment hdc, MemorySegment pBufSize, MemorySegment pszFilename) {
        var mh$ = GetICMProfileA$MH();
        try {
            return (int)mh$.invokeExact(hdc, pBufSize, pszFilename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetICMProfileW$MH() {
        return RuntimeHelper.requireNonNull(constants$1070.const$1,"GetICMProfileW");
    }
    /**
     * {@snippet :
     * BOOL GetICMProfileW(HDC hdc, LPDWORD pBufSize, LPWSTR pszFilename);
     * }
     */
    public static int GetICMProfileW(MemorySegment hdc, MemorySegment pBufSize, MemorySegment pszFilename) {
        var mh$ = GetICMProfileW$MH();
        try {
            return (int)mh$.invokeExact(hdc, pBufSize, pszFilename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetICMProfileA$MH() {
        return RuntimeHelper.requireNonNull(constants$1070.const$2,"SetICMProfileA");
    }
    /**
     * {@snippet :
     * BOOL SetICMProfileA(HDC hdc, LPSTR lpFileName);
     * }
     */
    public static int SetICMProfileA(MemorySegment hdc, MemorySegment lpFileName) {
        var mh$ = SetICMProfileA$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetICMProfileW$MH() {
        return RuntimeHelper.requireNonNull(constants$1070.const$3,"SetICMProfileW");
    }
    /**
     * {@snippet :
     * BOOL SetICMProfileW(HDC hdc, LPWSTR lpFileName);
     * }
     */
    public static int SetICMProfileW(MemorySegment hdc, MemorySegment lpFileName) {
        var mh$ = SetICMProfileW$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDeviceGammaRamp$MH() {
        return RuntimeHelper.requireNonNull(constants$1070.const$4,"GetDeviceGammaRamp");
    }
    /**
     * {@snippet :
     * BOOL GetDeviceGammaRamp(HDC hdc, LPVOID lpRamp);
     * }
     */
    public static int GetDeviceGammaRamp(MemorySegment hdc, MemorySegment lpRamp) {
        var mh$ = GetDeviceGammaRamp$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpRamp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetDeviceGammaRamp$MH() {
        return RuntimeHelper.requireNonNull(constants$1070.const$5,"SetDeviceGammaRamp");
    }
    /**
     * {@snippet :
     * BOOL SetDeviceGammaRamp(HDC hdc, LPVOID lpRamp);
     * }
     */
    public static int SetDeviceGammaRamp(MemorySegment hdc, MemorySegment lpRamp) {
        var mh$ = SetDeviceGammaRamp$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpRamp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ColorMatchToTarget$MH() {
        return RuntimeHelper.requireNonNull(constants$1071.const$0,"ColorMatchToTarget");
    }
    /**
     * {@snippet :
     * BOOL ColorMatchToTarget(HDC hdc, HDC hdcTarget, DWORD action);
     * }
     */
    public static int ColorMatchToTarget(MemorySegment hdc, MemorySegment hdcTarget, int action) {
        var mh$ = ColorMatchToTarget$MH();
        try {
            return (int)mh$.invokeExact(hdc, hdcTarget, action);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumICMProfilesA$MH() {
        return RuntimeHelper.requireNonNull(constants$1071.const$1,"EnumICMProfilesA");
    }
    /**
     * {@snippet :
     * int EnumICMProfilesA(HDC hdc, ICMENUMPROCA proc, LPARAM param);
     * }
     */
    public static int EnumICMProfilesA(MemorySegment hdc, MemorySegment proc, long param) {
        var mh$ = EnumICMProfilesA$MH();
        try {
            return (int)mh$.invokeExact(hdc, proc, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumICMProfilesW$MH() {
        return RuntimeHelper.requireNonNull(constants$1071.const$2,"EnumICMProfilesW");
    }
    /**
     * {@snippet :
     * int EnumICMProfilesW(HDC hdc, ICMENUMPROCW proc, LPARAM param);
     * }
     */
    public static int EnumICMProfilesW(MemorySegment hdc, MemorySegment proc, long param) {
        var mh$ = EnumICMProfilesW$MH();
        try {
            return (int)mh$.invokeExact(hdc, proc, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UpdateICMRegKeyA$MH() {
        return RuntimeHelper.requireNonNull(constants$1071.const$4,"UpdateICMRegKeyA");
    }
    /**
     * {@snippet :
     * BOOL UpdateICMRegKeyA(DWORD reserved, LPSTR lpszCMID, LPSTR lpszFileName, UINT command);
     * }
     */
    public static int UpdateICMRegKeyA(int reserved, MemorySegment lpszCMID, MemorySegment lpszFileName, int command) {
        var mh$ = UpdateICMRegKeyA$MH();
        try {
            return (int)mh$.invokeExact(reserved, lpszCMID, lpszFileName, command);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UpdateICMRegKeyW$MH() {
        return RuntimeHelper.requireNonNull(constants$1071.const$5,"UpdateICMRegKeyW");
    }
    /**
     * {@snippet :
     * BOOL UpdateICMRegKeyW(DWORD reserved, LPWSTR lpszCMID, LPWSTR lpszFileName, UINT command);
     * }
     */
    public static int UpdateICMRegKeyW(int reserved, MemorySegment lpszCMID, MemorySegment lpszFileName, int command) {
        var mh$ = UpdateICMRegKeyW$MH();
        try {
            return (int)mh$.invokeExact(reserved, lpszCMID, lpszFileName, command);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ColorCorrectPalette$MH() {
        return RuntimeHelper.requireNonNull(constants$1072.const$0,"ColorCorrectPalette");
    }
    /**
     * {@snippet :
     * BOOL ColorCorrectPalette(HDC hdc, HPALETTE hPal, DWORD deFirst, DWORD num);
     * }
     */
    public static int ColorCorrectPalette(MemorySegment hdc, MemorySegment hPal, int deFirst, int num) {
        var mh$ = ColorCorrectPalette$MH();
        try {
            return (int)mh$.invokeExact(hdc, hPal, deFirst, num);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagEMR* PEMR;
     * }
     */
    public static final AddressLayout PEMR = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRTEXT* PEMRTEXT;
     * }
     */
    public static final AddressLayout PEMRTEXT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagABORTPATH* PEMRABORTPATH;
     * }
     */
    public static final AddressLayout PEMRABORTPATH = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagABORTPATH* PEMRBEGINPATH;
     * }
     */
    public static final AddressLayout PEMRBEGINPATH = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagABORTPATH* PEMRENDPATH;
     * }
     */
    public static final AddressLayout PEMRENDPATH = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagABORTPATH* PEMRCLOSEFIGURE;
     * }
     */
    public static final AddressLayout PEMRCLOSEFIGURE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagABORTPATH* PEMRFLATTENPATH;
     * }
     */
    public static final AddressLayout PEMRFLATTENPATH = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagABORTPATH* PEMRWIDENPATH;
     * }
     */
    public static final AddressLayout PEMRWIDENPATH = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagABORTPATH* PEMRSETMETARGN;
     * }
     */
    public static final AddressLayout PEMRSETMETARGN = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagABORTPATH* PEMRSAVEDC;
     * }
     */
    public static final AddressLayout PEMRSAVEDC = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagABORTPATH* PEMRREALIZEPALETTE;
     * }
     */
    public static final AddressLayout PEMRREALIZEPALETTE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRSELECTCLIPPATH* PEMRSELECTCLIPPATH;
     * }
     */
    public static final AddressLayout PEMRSELECTCLIPPATH = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRSELECTCLIPPATH* PEMRSETBKMODE;
     * }
     */
    public static final AddressLayout PEMRSETBKMODE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRSELECTCLIPPATH* PEMRSETMAPMODE;
     * }
     */
    public static final AddressLayout PEMRSETMAPMODE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRSELECTCLIPPATH* PEMRSETLAYOUT;
     * }
     */
    public static final AddressLayout PEMRSETLAYOUT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRSELECTCLIPPATH* PEMRSETPOLYFILLMODE;
     * }
     */
    public static final AddressLayout PEMRSETPOLYFILLMODE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRSELECTCLIPPATH* PEMRSETROP2;
     * }
     */
    public static final AddressLayout PEMRSETROP2 = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRSELECTCLIPPATH* PEMRSETSTRETCHBLTMODE;
     * }
     */
    public static final AddressLayout PEMRSETSTRETCHBLTMODE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRSELECTCLIPPATH* PEMRSETICMMODE;
     * }
     */
    public static final AddressLayout PEMRSETICMMODE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRSELECTCLIPPATH* PEMRSETTEXTALIGN;
     * }
     */
    public static final AddressLayout PEMRSETTEXTALIGN = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRSETMITERLIMIT* PEMRSETMITERLIMIT;
     * }
     */
    public static final AddressLayout PEMRSETMITERLIMIT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRRESTOREDC* PEMRRESTOREDC;
     * }
     */
    public static final AddressLayout PEMRRESTOREDC = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRSETARCDIRECTION* PEMRSETARCDIRECTION;
     * }
     */
    public static final AddressLayout PEMRSETARCDIRECTION = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRSETMAPPERFLAGS* PEMRSETMAPPERFLAGS;
     * }
     */
    public static final AddressLayout PEMRSETMAPPERFLAGS = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRSETTEXTCOLOR* PEMRSETBKCOLOR;
     * }
     */
    public static final AddressLayout PEMRSETBKCOLOR = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRSETTEXTCOLOR* PEMRSETTEXTCOLOR;
     * }
     */
    public static final AddressLayout PEMRSETTEXTCOLOR = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRSELECTOBJECT* PEMRSELECTOBJECT;
     * }
     */
    public static final AddressLayout PEMRSELECTOBJECT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRSELECTOBJECT* PEMRDELETEOBJECT;
     * }
     */
    public static final AddressLayout PEMRDELETEOBJECT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRSELECTPALETTE* PEMRSELECTPALETTE;
     * }
     */
    public static final AddressLayout PEMRSELECTPALETTE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRRESIZEPALETTE* PEMRRESIZEPALETTE;
     * }
     */
    public static final AddressLayout PEMRRESIZEPALETTE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRSETPALETTEENTRIES* PEMRSETPALETTEENTRIES;
     * }
     */
    public static final AddressLayout PEMRSETPALETTEENTRIES = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRSETCOLORADJUSTMENT* PEMRSETCOLORADJUSTMENT;
     * }
     */
    public static final AddressLayout PEMRSETCOLORADJUSTMENT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRGDICOMMENT* PEMRGDICOMMENT;
     * }
     */
    public static final AddressLayout PEMRGDICOMMENT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMREOF* PEMREOF;
     * }
     */
    public static final AddressLayout PEMREOF = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRLINETO* PEMRLINETO;
     * }
     */
    public static final AddressLayout PEMRLINETO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRLINETO* PEMRMOVETOEX;
     * }
     */
    public static final AddressLayout PEMRMOVETOEX = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMROFFSETCLIPRGN* PEMROFFSETCLIPRGN;
     * }
     */
    public static final AddressLayout PEMROFFSETCLIPRGN = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRFILLPATH* PEMRFILLPATH;
     * }
     */
    public static final AddressLayout PEMRFILLPATH = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRFILLPATH* PEMRSTROKEANDFILLPATH;
     * }
     */
    public static final AddressLayout PEMRSTROKEANDFILLPATH = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRFILLPATH* PEMRSTROKEPATH;
     * }
     */
    public static final AddressLayout PEMRSTROKEPATH = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMREXCLUDECLIPRECT* PEMREXCLUDECLIPRECT;
     * }
     */
    public static final AddressLayout PEMREXCLUDECLIPRECT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMREXCLUDECLIPRECT* PEMRINTERSECTCLIPRECT;
     * }
     */
    public static final AddressLayout PEMRINTERSECTCLIPRECT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRSETVIEWPORTORGEX* PEMRSETVIEWPORTORGEX;
     * }
     */
    public static final AddressLayout PEMRSETVIEWPORTORGEX = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRSETVIEWPORTORGEX* PEMRSETWINDOWORGEX;
     * }
     */
    public static final AddressLayout PEMRSETWINDOWORGEX = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRSETVIEWPORTORGEX* PEMRSETBRUSHORGEX;
     * }
     */
    public static final AddressLayout PEMRSETBRUSHORGEX = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRSETVIEWPORTEXTEX* PEMRSETVIEWPORTEXTEX;
     * }
     */
    public static final AddressLayout PEMRSETVIEWPORTEXTEX = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRSETVIEWPORTEXTEX* PEMRSETWINDOWEXTEX;
     * }
     */
    public static final AddressLayout PEMRSETWINDOWEXTEX = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRSCALEVIEWPORTEXTEX* PEMRSCALEVIEWPORTEXTEX;
     * }
     */
    public static final AddressLayout PEMRSCALEVIEWPORTEXTEX = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRSCALEVIEWPORTEXTEX* PEMRSCALEWINDOWEXTEX;
     * }
     */
    public static final AddressLayout PEMRSCALEWINDOWEXTEX = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRSETWORLDTRANSFORM* PEMRSETWORLDTRANSFORM;
     * }
     */
    public static final AddressLayout PEMRSETWORLDTRANSFORM = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRMODIFYWORLDTRANSFORM* PEMRMODIFYWORLDTRANSFORM;
     * }
     */
    public static final AddressLayout PEMRMODIFYWORLDTRANSFORM = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRSETPIXELV* PEMRSETPIXELV;
     * }
     */
    public static final AddressLayout PEMRSETPIXELV = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMREXTFLOODFILL* PEMREXTFLOODFILL;
     * }
     */
    public static final AddressLayout PEMREXTFLOODFILL = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRELLIPSE* PEMRELLIPSE;
     * }
     */
    public static final AddressLayout PEMRELLIPSE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRELLIPSE* PEMRRECTANGLE;
     * }
     */
    public static final AddressLayout PEMRRECTANGLE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRROUNDRECT* PEMRROUNDRECT;
     * }
     */
    public static final AddressLayout PEMRROUNDRECT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRARC* PEMRARC;
     * }
     */
    public static final AddressLayout PEMRARC = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRARC* PEMRARCTO;
     * }
     */
    public static final AddressLayout PEMRARCTO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRARC* PEMRCHORD;
     * }
     */
    public static final AddressLayout PEMRCHORD = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRARC* PEMRPIE;
     * }
     */
    public static final AddressLayout PEMRPIE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRANGLEARC* PEMRANGLEARC;
     * }
     */
    public static final AddressLayout PEMRANGLEARC = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRPOLYLINE* PEMRPOLYLINE;
     * }
     */
    public static final AddressLayout PEMRPOLYLINE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRPOLYLINE* PEMRPOLYBEZIER;
     * }
     */
    public static final AddressLayout PEMRPOLYBEZIER = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRPOLYLINE* PEMRPOLYGON;
     * }
     */
    public static final AddressLayout PEMRPOLYGON = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRPOLYLINE* PEMRPOLYBEZIERTO;
     * }
     */
    public static final AddressLayout PEMRPOLYBEZIERTO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRPOLYLINE* PEMRPOLYLINETO;
     * }
     */
    public static final AddressLayout PEMRPOLYLINETO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRPOLYLINE16* PEMRPOLYLINE16;
     * }
     */
    public static final AddressLayout PEMRPOLYLINE16 = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRPOLYLINE16* PEMRPOLYBEZIER16;
     * }
     */
    public static final AddressLayout PEMRPOLYBEZIER16 = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRPOLYLINE16* PEMRPOLYGON16;
     * }
     */
    public static final AddressLayout PEMRPOLYGON16 = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRPOLYLINE16* PEMRPOLYBEZIERTO16;
     * }
     */
    public static final AddressLayout PEMRPOLYBEZIERTO16 = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRPOLYLINE16* PEMRPOLYLINETO16;
     * }
     */
    public static final AddressLayout PEMRPOLYLINETO16 = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRPOLYDRAW* PEMRPOLYDRAW;
     * }
     */
    public static final AddressLayout PEMRPOLYDRAW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRPOLYDRAW16* PEMRPOLYDRAW16;
     * }
     */
    public static final AddressLayout PEMRPOLYDRAW16 = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRPOLYPOLYLINE* PEMRPOLYPOLYLINE;
     * }
     */
    public static final AddressLayout PEMRPOLYPOLYLINE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRPOLYPOLYLINE* PEMRPOLYPOLYGON;
     * }
     */
    public static final AddressLayout PEMRPOLYPOLYGON = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRPOLYPOLYLINE16* PEMRPOLYPOLYLINE16;
     * }
     */
    public static final AddressLayout PEMRPOLYPOLYLINE16 = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRPOLYPOLYLINE16* PEMRPOLYPOLYGON16;
     * }
     */
    public static final AddressLayout PEMRPOLYPOLYGON16 = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRINVERTRGN* PEMRINVERTRGN;
     * }
     */
    public static final AddressLayout PEMRINVERTRGN = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRINVERTRGN* PEMRPAINTRGN;
     * }
     */
    public static final AddressLayout PEMRPAINTRGN = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRFILLRGN* PEMRFILLRGN;
     * }
     */
    public static final AddressLayout PEMRFILLRGN = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRFRAMERGN* PEMRFRAMERGN;
     * }
     */
    public static final AddressLayout PEMRFRAMERGN = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMREXTSELECTCLIPRGN* PEMREXTSELECTCLIPRGN;
     * }
     */
    public static final AddressLayout PEMREXTSELECTCLIPRGN = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMREXTTEXTOUTA* PEMREXTTEXTOUTA;
     * }
     */
    public static final AddressLayout PEMREXTTEXTOUTA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMREXTTEXTOUTA* PEMREXTTEXTOUTW;
     * }
     */
    public static final AddressLayout PEMREXTTEXTOUTW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRPOLYTEXTOUTA* PEMRPOLYTEXTOUTA;
     * }
     */
    public static final AddressLayout PEMRPOLYTEXTOUTA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRPOLYTEXTOUTA* PEMRPOLYTEXTOUTW;
     * }
     */
    public static final AddressLayout PEMRPOLYTEXTOUTW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRBITBLT* PEMRBITBLT;
     * }
     */
    public static final AddressLayout PEMRBITBLT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRSTRETCHBLT* PEMRSTRETCHBLT;
     * }
     */
    public static final AddressLayout PEMRSTRETCHBLT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRMASKBLT* PEMRMASKBLT;
     * }
     */
    public static final AddressLayout PEMRMASKBLT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRPLGBLT* PEMRPLGBLT;
     * }
     */
    public static final AddressLayout PEMRPLGBLT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRSETDIBITSTODEVICE* PEMRSETDIBITSTODEVICE;
     * }
     */
    public static final AddressLayout PEMRSETDIBITSTODEVICE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRSTRETCHDIBITS* PEMRSTRETCHDIBITS;
     * }
     */
    public static final AddressLayout PEMRSTRETCHDIBITS = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMREXTCREATEFONTINDIRECTW* PEMREXTCREATEFONTINDIRECTW;
     * }
     */
    public static final AddressLayout PEMREXTCREATEFONTINDIRECTW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRCREATEPALETTE* PEMRCREATEPALETTE;
     * }
     */
    public static final AddressLayout PEMRCREATEPALETTE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRCREATEPEN* PEMRCREATEPEN;
     * }
     */
    public static final AddressLayout PEMRCREATEPEN = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMREXTCREATEPEN* PEMREXTCREATEPEN;
     * }
     */
    public static final AddressLayout PEMREXTCREATEPEN = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRCREATEBRUSHINDIRECT* PEMRCREATEBRUSHINDIRECT;
     * }
     */
    public static final AddressLayout PEMRCREATEBRUSHINDIRECT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRCREATEMONOBRUSH* PEMRCREATEMONOBRUSH;
     * }
     */
    public static final AddressLayout PEMRCREATEMONOBRUSH = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRCREATEDIBPATTERNBRUSHPT* PEMRCREATEDIBPATTERNBRUSHPT;
     * }
     */
    public static final AddressLayout PEMRCREATEDIBPATTERNBRUSHPT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRFORMAT* PEMRFORMAT;
     * }
     */
    public static final AddressLayout PEMRFORMAT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRGLSRECORD* PEMRGLSRECORD;
     * }
     */
    public static final AddressLayout PEMRGLSRECORD = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRGLSBOUNDEDRECORD* PEMRGLSBOUNDEDRECORD;
     * }
     */
    public static final AddressLayout PEMRGLSBOUNDEDRECORD = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRPIXELFORMAT* PEMRPIXELFORMAT;
     * }
     */
    public static final AddressLayout PEMRPIXELFORMAT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRCREATECOLORSPACE* PEMRCREATECOLORSPACE;
     * }
     */
    public static final AddressLayout PEMRCREATECOLORSPACE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRSETCOLORSPACE* PEMRSETCOLORSPACE;
     * }
     */
    public static final AddressLayout PEMRSETCOLORSPACE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRSETCOLORSPACE* PEMRSELECTCOLORSPACE;
     * }
     */
    public static final AddressLayout PEMRSELECTCOLORSPACE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRSETCOLORSPACE* PEMRDELETECOLORSPACE;
     * }
     */
    public static final AddressLayout PEMRDELETECOLORSPACE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMREXTESCAPE* PEMREXTESCAPE;
     * }
     */
    public static final AddressLayout PEMREXTESCAPE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMREXTESCAPE* PEMRDRAWESCAPE;
     * }
     */
    public static final AddressLayout PEMRDRAWESCAPE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRNAMEDESCAPE* PEMRNAMEDESCAPE;
     * }
     */
    public static final AddressLayout PEMRNAMEDESCAPE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRSETICMPROFILE* PEMRSETICMPROFILE;
     * }
     */
    public static final AddressLayout PEMRSETICMPROFILE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRSETICMPROFILE* PEMRSETICMPROFILEA;
     * }
     */
    public static final AddressLayout PEMRSETICMPROFILEA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRSETICMPROFILE* PEMRSETICMPROFILEW;
     * }
     */
    public static final AddressLayout PEMRSETICMPROFILEW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRCREATECOLORSPACEW* PEMRCREATECOLORSPACEW;
     * }
     */
    public static final AddressLayout PEMRCREATECOLORSPACEW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagCOLORMATCHTOTARGET* PEMRCOLORMATCHTOTARGET;
     * }
     */
    public static final AddressLayout PEMRCOLORMATCHTOTARGET = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagCOLORCORRECTPALETTE* PEMRCOLORCORRECTPALETTE;
     * }
     */
    public static final AddressLayout PEMRCOLORCORRECTPALETTE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRALPHABLEND* PEMRALPHABLEND;
     * }
     */
    public static final AddressLayout PEMRALPHABLEND = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRGRADIENTFILL* PEMRGRADIENTFILL;
     * }
     */
    public static final AddressLayout PEMRGRADIENTFILL = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEMRTRANSPARENTBLT* PEMRTRANSPARENTBLT;
     * }
     */
    public static final AddressLayout PEMRTRANSPARENTBLT = RuntimeHelper.POINTER;
    public static MethodHandle wglCopyContext$MH() {
        return RuntimeHelper.requireNonNull(constants$1122.const$1,"wglCopyContext");
    }
    /**
     * {@snippet :
     * BOOL wglCopyContext(HGLRC, HGLRC, UINT);
     * }
     */
    public static int wglCopyContext(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = wglCopyContext$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wglCreateContext$MH() {
        return RuntimeHelper.requireNonNull(constants$1122.const$2,"wglCreateContext");
    }
    /**
     * {@snippet :
     * HGLRC wglCreateContext(HDC);
     * }
     */
    public static MemorySegment wglCreateContext(MemorySegment x0) {
        var mh$ = wglCreateContext$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wglCreateLayerContext$MH() {
        return RuntimeHelper.requireNonNull(constants$1122.const$3,"wglCreateLayerContext");
    }
    /**
     * {@snippet :
     * HGLRC wglCreateLayerContext(HDC, int);
     * }
     */
    public static MemorySegment wglCreateLayerContext(MemorySegment x0, int x1) {
        var mh$ = wglCreateLayerContext$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wglDeleteContext$MH() {
        return RuntimeHelper.requireNonNull(constants$1122.const$4,"wglDeleteContext");
    }
    /**
     * {@snippet :
     * BOOL wglDeleteContext(HGLRC);
     * }
     */
    public static int wglDeleteContext(MemorySegment x0) {
        var mh$ = wglDeleteContext$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wglGetCurrentContext$MH() {
        return RuntimeHelper.requireNonNull(constants$1122.const$5,"wglGetCurrentContext");
    }
    /**
     * {@snippet :
     * HGLRC wglGetCurrentContext();
     * }
     */
    public static MemorySegment wglGetCurrentContext() {
        var mh$ = wglGetCurrentContext$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wglGetCurrentDC$MH() {
        return RuntimeHelper.requireNonNull(constants$1123.const$0,"wglGetCurrentDC");
    }
    /**
     * {@snippet :
     * HDC wglGetCurrentDC();
     * }
     */
    public static MemorySegment wglGetCurrentDC() {
        var mh$ = wglGetCurrentDC$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wglGetProcAddress$MH() {
        return RuntimeHelper.requireNonNull(constants$1123.const$1,"wglGetProcAddress");
    }
    /**
     * {@snippet :
     * PROC wglGetProcAddress(LPCSTR);
     * }
     */
    public static MemorySegment wglGetProcAddress(MemorySegment x0) {
        var mh$ = wglGetProcAddress$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wglMakeCurrent$MH() {
        return RuntimeHelper.requireNonNull(constants$1123.const$2,"wglMakeCurrent");
    }
    /**
     * {@snippet :
     * BOOL wglMakeCurrent(HDC, HGLRC);
     * }
     */
    public static int wglMakeCurrent(MemorySegment x0, MemorySegment x1) {
        var mh$ = wglMakeCurrent$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wglShareLists$MH() {
        return RuntimeHelper.requireNonNull(constants$1123.const$3,"wglShareLists");
    }
    /**
     * {@snippet :
     * BOOL wglShareLists(HGLRC, HGLRC);
     * }
     */
    public static int wglShareLists(MemorySegment x0, MemorySegment x1) {
        var mh$ = wglShareLists$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wglUseFontBitmapsA$MH() {
        return RuntimeHelper.requireNonNull(constants$1123.const$4,"wglUseFontBitmapsA");
    }
    /**
     * {@snippet :
     * BOOL wglUseFontBitmapsA(HDC, DWORD, DWORD, DWORD);
     * }
     */
    public static int wglUseFontBitmapsA(MemorySegment x0, int x1, int x2, int x3) {
        var mh$ = wglUseFontBitmapsA$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wglUseFontBitmapsW$MH() {
        return RuntimeHelper.requireNonNull(constants$1123.const$5,"wglUseFontBitmapsW");
    }
    /**
     * {@snippet :
     * BOOL wglUseFontBitmapsW(HDC, DWORD, DWORD, DWORD);
     * }
     */
    public static int wglUseFontBitmapsW(MemorySegment x0, int x1, int x2, int x3) {
        var mh$ = wglUseFontBitmapsW$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SwapBuffers$MH() {
        return RuntimeHelper.requireNonNull(constants$1124.const$0,"SwapBuffers");
    }
    /**
     * {@snippet :
     * BOOL SwapBuffers(HDC);
     * }
     */
    public static int SwapBuffers(MemorySegment x0) {
        var mh$ = SwapBuffers$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _POINTFLOAT* PPOINTFLOAT;
     * }
     */
    public static final AddressLayout PPOINTFLOAT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GLYPHMETRICSFLOAT* PGLYPHMETRICSFLOAT;
     * }
     */
    public static final AddressLayout PGLYPHMETRICSFLOAT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GLYPHMETRICSFLOAT* LPGLYPHMETRICSFLOAT;
     * }
     */
    public static final AddressLayout LPGLYPHMETRICSFLOAT = RuntimeHelper.POINTER;
    public static MethodHandle wglUseFontOutlinesA$MH() {
        return RuntimeHelper.requireNonNull(constants$1125.const$4,"wglUseFontOutlinesA");
    }
    /**
     * {@snippet :
     * BOOL wglUseFontOutlinesA(HDC, DWORD, DWORD, DWORD, FLOAT, FLOAT, int, LPGLYPHMETRICSFLOAT);
     * }
     */
    public static int wglUseFontOutlinesA(MemorySegment x0, int x1, int x2, int x3, float x4, float x5, int x6, MemorySegment x7) {
        var mh$ = wglUseFontOutlinesA$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wglUseFontOutlinesW$MH() {
        return RuntimeHelper.requireNonNull(constants$1125.const$5,"wglUseFontOutlinesW");
    }
    /**
     * {@snippet :
     * BOOL wglUseFontOutlinesW(HDC, DWORD, DWORD, DWORD, FLOAT, FLOAT, int, LPGLYPHMETRICSFLOAT);
     * }
     */
    public static int wglUseFontOutlinesW(MemorySegment x0, int x1, int x2, int x3, float x4, float x5, int x6, MemorySegment x7) {
        var mh$ = wglUseFontOutlinesW$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagLAYERPLANEDESCRIPTOR* PLAYERPLANEDESCRIPTOR;
     * }
     */
    public static final AddressLayout PLAYERPLANEDESCRIPTOR = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagLAYERPLANEDESCRIPTOR* LPLAYERPLANEDESCRIPTOR;
     * }
     */
    public static final AddressLayout LPLAYERPLANEDESCRIPTOR = RuntimeHelper.POINTER;
    public static MethodHandle wglDescribeLayerPlane$MH() {
        return RuntimeHelper.requireNonNull(constants$1130.const$1,"wglDescribeLayerPlane");
    }
    /**
     * {@snippet :
     * BOOL wglDescribeLayerPlane(HDC, int, int, UINT, LPLAYERPLANEDESCRIPTOR);
     * }
     */
    public static int wglDescribeLayerPlane(MemorySegment x0, int x1, int x2, int x3, MemorySegment x4) {
        var mh$ = wglDescribeLayerPlane$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wglSetLayerPaletteEntries$MH() {
        return RuntimeHelper.requireNonNull(constants$1130.const$2,"wglSetLayerPaletteEntries");
    }
    /**
     * {@snippet :
     * int wglSetLayerPaletteEntries(HDC, int, int, int, const COLORREF*);
     * }
     */
    public static int wglSetLayerPaletteEntries(MemorySegment x0, int x1, int x2, int x3, MemorySegment x4) {
        var mh$ = wglSetLayerPaletteEntries$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wglGetLayerPaletteEntries$MH() {
        return RuntimeHelper.requireNonNull(constants$1130.const$3,"wglGetLayerPaletteEntries");
    }
    /**
     * {@snippet :
     * int wglGetLayerPaletteEntries(HDC, int, int, int, COLORREF*);
     * }
     */
    public static int wglGetLayerPaletteEntries(MemorySegment x0, int x1, int x2, int x3, MemorySegment x4) {
        var mh$ = wglGetLayerPaletteEntries$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wglRealizeLayerPalette$MH() {
        return RuntimeHelper.requireNonNull(constants$1130.const$4,"wglRealizeLayerPalette");
    }
    /**
     * {@snippet :
     * BOOL wglRealizeLayerPalette(HDC, int, BOOL);
     * }
     */
    public static int wglRealizeLayerPalette(MemorySegment x0, int x1, int x2) {
        var mh$ = wglRealizeLayerPalette$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wglSwapLayerBuffers$MH() {
        return RuntimeHelper.requireNonNull(constants$1130.const$5,"wglSwapLayerBuffers");
    }
    /**
     * {@snippet :
     * BOOL wglSwapLayerBuffers(HDC, UINT);
     * }
     */
    public static int wglSwapLayerBuffers(MemorySegment x0, int x1) {
        var mh$ = wglSwapLayerBuffers$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _WGLSWAP* PWGLSWAP;
     * }
     */
    public static final AddressLayout PWGLSWAP = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _WGLSWAP* LPWGLSWAP;
     * }
     */
    public static final AddressLayout LPWGLSWAP = RuntimeHelper.POINTER;
    public static MethodHandle wglSwapMultipleBuffers$MH() {
        return RuntimeHelper.requireNonNull(constants$1131.const$3,"wglSwapMultipleBuffers");
    }
    /**
     * {@snippet :
     * DWORD wglSwapMultipleBuffers(UINT, const WGLSWAP*);
     * }
     */
    public static int wglSwapMultipleBuffers(int x0, MemorySegment x1) {
        var mh$ = wglSwapMultipleBuffers$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef void* HDWP;
     * }
     */
    public static final AddressLayout HDWP = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef void* LPMENUTEMPLATEA;
     * }
     */
    public static final AddressLayout LPMENUTEMPLATEA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef void* LPMENUTEMPLATEW;
     * }
     */
    public static final AddressLayout LPMENUTEMPLATEW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef void* LPMENUTEMPLATE;
     * }
     */
    public static final AddressLayout LPMENUTEMPLATE = RuntimeHelper.POINTER;
    public static MethodHandle wvsprintfA$MH() {
        return RuntimeHelper.requireNonNull(constants$1137.const$5,"wvsprintfA");
    }
    /**
     * {@snippet :
     * int wvsprintfA(LPSTR, LPCSTR, va_list arglist);
     * }
     */
    public static int wvsprintfA(MemorySegment x0, MemorySegment x1, MemorySegment arglist) {
        var mh$ = wvsprintfA$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, arglist);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wvsprintfW$MH() {
        return RuntimeHelper.requireNonNull(constants$1138.const$0,"wvsprintfW");
    }
    /**
     * {@snippet :
     * int wvsprintfW(LPWSTR, LPCWSTR, va_list arglist);
     * }
     */
    public static int wvsprintfW(MemorySegment x0, MemorySegment x1, MemorySegment arglist) {
        var mh$ = wvsprintfW$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, arglist);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wsprintfA$MH() {
        return RuntimeHelper.requireNonNull(constants$1138.const$1,"wsprintfA");
    }
    /**
     * {@snippet :
     * int wsprintfA(LPSTR, LPCSTR,...);
     * }
     */
    public static int wsprintfA(MemorySegment x0, MemorySegment x1, Object... x2) {
        var mh$ = wsprintfA$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wsprintfW$MH() {
        return RuntimeHelper.requireNonNull(constants$1138.const$2,"wsprintfW");
    }
    /**
     * {@snippet :
     * int wsprintfW(LPWSTR, LPCWSTR,...);
     * }
     */
    public static int wsprintfW(MemorySegment x0, MemorySegment x1, Object... x2) {
        var mh$ = wsprintfW$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagCBT_CREATEWNDA* LPCBT_CREATEWNDA;
     * }
     */
    public static final AddressLayout LPCBT_CREATEWNDA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagCBT_CREATEWNDW* LPCBT_CREATEWNDW;
     * }
     */
    public static final AddressLayout LPCBT_CREATEWNDW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagCBT_CREATEWNDA* LPCBT_CREATEWND;
     * }
     */
    public static final AddressLayout LPCBT_CREATEWND = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagCBTACTIVATESTRUCT* LPCBTACTIVATESTRUCT;
     * }
     */
    public static final AddressLayout LPCBTACTIVATESTRUCT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagWTSSESSION_NOTIFICATION* PWTSSESSION_NOTIFICATION;
     * }
     */
    public static final AddressLayout PWTSSESSION_NOTIFICATION = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct * LPSHELLHOOKINFO;
     * }
     */
    public static final AddressLayout LPSHELLHOOKINFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEVENTMSG* PEVENTMSGMSG;
     * }
     */
    public static final AddressLayout PEVENTMSGMSG = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEVENTMSG* NPEVENTMSGMSG;
     * }
     */
    public static final AddressLayout NPEVENTMSGMSG = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEVENTMSG* LPEVENTMSGMSG;
     * }
     */
    public static final AddressLayout LPEVENTMSGMSG = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEVENTMSG* PEVENTMSG;
     * }
     */
    public static final AddressLayout PEVENTMSG = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEVENTMSG* NPEVENTMSG;
     * }
     */
    public static final AddressLayout NPEVENTMSG = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEVENTMSG* LPEVENTMSG;
     * }
     */
    public static final AddressLayout LPEVENTMSG = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagCWPSTRUCT* PCWPSTRUCT;
     * }
     */
    public static final AddressLayout PCWPSTRUCT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagCWPSTRUCT* NPCWPSTRUCT;
     * }
     */
    public static final AddressLayout NPCWPSTRUCT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagCWPSTRUCT* LPCWPSTRUCT;
     * }
     */
    public static final AddressLayout LPCWPSTRUCT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagCWPRETSTRUCT* PCWPRETSTRUCT;
     * }
     */
    public static final AddressLayout PCWPRETSTRUCT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagCWPRETSTRUCT* NPCWPRETSTRUCT;
     * }
     */
    public static final AddressLayout NPCWPRETSTRUCT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagCWPRETSTRUCT* LPCWPRETSTRUCT;
     * }
     */
    public static final AddressLayout LPCWPRETSTRUCT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagKBDLLHOOKSTRUCT* LPKBDLLHOOKSTRUCT;
     * }
     */
    public static final AddressLayout LPKBDLLHOOKSTRUCT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagKBDLLHOOKSTRUCT* PKBDLLHOOKSTRUCT;
     * }
     */
    public static final AddressLayout PKBDLLHOOKSTRUCT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagMSLLHOOKSTRUCT* LPMSLLHOOKSTRUCT;
     * }
     */
    public static final AddressLayout LPMSLLHOOKSTRUCT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagMSLLHOOKSTRUCT* PMSLLHOOKSTRUCT;
     * }
     */
    public static final AddressLayout PMSLLHOOKSTRUCT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagDEBUGHOOKINFO* PDEBUGHOOKINFO;
     * }
     */
    public static final AddressLayout PDEBUGHOOKINFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagDEBUGHOOKINFO* NPDEBUGHOOKINFO;
     * }
     */
    public static final AddressLayout NPDEBUGHOOKINFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagDEBUGHOOKINFO* LPDEBUGHOOKINFO;
     * }
     */
    public static final AddressLayout LPDEBUGHOOKINFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagMOUSEHOOKSTRUCT* LPMOUSEHOOKSTRUCT;
     * }
     */
    public static final AddressLayout LPMOUSEHOOKSTRUCT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagMOUSEHOOKSTRUCT* PMOUSEHOOKSTRUCT;
     * }
     */
    public static final AddressLayout PMOUSEHOOKSTRUCT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagMOUSEHOOKSTRUCTEX* LPMOUSEHOOKSTRUCTEX;
     * }
     */
    public static final AddressLayout LPMOUSEHOOKSTRUCTEX = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagMOUSEHOOKSTRUCTEX* PMOUSEHOOKSTRUCTEX;
     * }
     */
    public static final AddressLayout PMOUSEHOOKSTRUCTEX = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagHARDWAREHOOKSTRUCT* LPHARDWAREHOOKSTRUCT;
     * }
     */
    public static final AddressLayout LPHARDWAREHOOKSTRUCT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagHARDWAREHOOKSTRUCT* PHARDWAREHOOKSTRUCT;
     * }
     */
    public static final AddressLayout PHARDWAREHOOKSTRUCT = RuntimeHelper.POINTER;
    public static MethodHandle LoadKeyboardLayoutA$MH() {
        return RuntimeHelper.requireNonNull(constants$1148.const$2,"LoadKeyboardLayoutA");
    }
    /**
     * {@snippet :
     * HKL LoadKeyboardLayoutA(LPCSTR pwszKLID, UINT Flags);
     * }
     */
    public static MemorySegment LoadKeyboardLayoutA(MemorySegment pwszKLID, int Flags) {
        var mh$ = LoadKeyboardLayoutA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(pwszKLID, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadKeyboardLayoutW$MH() {
        return RuntimeHelper.requireNonNull(constants$1148.const$3,"LoadKeyboardLayoutW");
    }
    /**
     * {@snippet :
     * HKL LoadKeyboardLayoutW(LPCWSTR pwszKLID, UINT Flags);
     * }
     */
    public static MemorySegment LoadKeyboardLayoutW(MemorySegment pwszKLID, int Flags) {
        var mh$ = LoadKeyboardLayoutW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(pwszKLID, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ActivateKeyboardLayout$MH() {
        return RuntimeHelper.requireNonNull(constants$1148.const$4,"ActivateKeyboardLayout");
    }
    /**
     * {@snippet :
     * HKL ActivateKeyboardLayout(HKL hkl, UINT Flags);
     * }
     */
    public static MemorySegment ActivateKeyboardLayout(MemorySegment hkl, int Flags) {
        var mh$ = ActivateKeyboardLayout$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hkl, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ToUnicodeEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1148.const$6,"ToUnicodeEx");
    }
    /**
     * {@snippet :
     * int ToUnicodeEx(UINT wVirtKey, UINT wScanCode, const BYTE* lpKeyState, LPWSTR pwszBuff, int cchBuff, UINT wFlags, HKL dwhkl);
     * }
     */
    public static int ToUnicodeEx(int wVirtKey, int wScanCode, MemorySegment lpKeyState, MemorySegment pwszBuff, int cchBuff, int wFlags, MemorySegment dwhkl) {
        var mh$ = ToUnicodeEx$MH();
        try {
            return (int)mh$.invokeExact(wVirtKey, wScanCode, lpKeyState, pwszBuff, cchBuff, wFlags, dwhkl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnloadKeyboardLayout$MH() {
        return RuntimeHelper.requireNonNull(constants$1149.const$0,"UnloadKeyboardLayout");
    }
    /**
     * {@snippet :
     * BOOL UnloadKeyboardLayout(HKL hkl);
     * }
     */
    public static int UnloadKeyboardLayout(MemorySegment hkl) {
        var mh$ = UnloadKeyboardLayout$MH();
        try {
            return (int)mh$.invokeExact(hkl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetKeyboardLayoutNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$1149.const$1,"GetKeyboardLayoutNameA");
    }
    /**
     * {@snippet :
     * BOOL GetKeyboardLayoutNameA(LPSTR pwszKLID);
     * }
     */
    public static int GetKeyboardLayoutNameA(MemorySegment pwszKLID) {
        var mh$ = GetKeyboardLayoutNameA$MH();
        try {
            return (int)mh$.invokeExact(pwszKLID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetKeyboardLayoutNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$1149.const$2,"GetKeyboardLayoutNameW");
    }
    /**
     * {@snippet :
     * BOOL GetKeyboardLayoutNameW(LPWSTR pwszKLID);
     * }
     */
    public static int GetKeyboardLayoutNameW(MemorySegment pwszKLID) {
        var mh$ = GetKeyboardLayoutNameW$MH();
        try {
            return (int)mh$.invokeExact(pwszKLID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetKeyboardLayoutList$MH() {
        return RuntimeHelper.requireNonNull(constants$1149.const$3,"GetKeyboardLayoutList");
    }
    /**
     * {@snippet :
     * int GetKeyboardLayoutList(int nBuff, HKL* lpList);
     * }
     */
    public static int GetKeyboardLayoutList(int nBuff, MemorySegment lpList) {
        var mh$ = GetKeyboardLayoutList$MH();
        try {
            return (int)mh$.invokeExact(nBuff, lpList);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetKeyboardLayout$MH() {
        return RuntimeHelper.requireNonNull(constants$1149.const$4,"GetKeyboardLayout");
    }
    /**
     * {@snippet :
     * HKL GetKeyboardLayout(DWORD idThread);
     * }
     */
    public static MemorySegment GetKeyboardLayout(int idThread) {
        var mh$ = GetKeyboardLayout$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(idThread);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagMOUSEMOVEPOINT* PMOUSEMOVEPOINT;
     * }
     */
    public static final AddressLayout PMOUSEMOVEPOINT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagMOUSEMOVEPOINT* LPMOUSEMOVEPOINT;
     * }
     */
    public static final AddressLayout LPMOUSEMOVEPOINT = RuntimeHelper.POINTER;
    public static MethodHandle GetMouseMovePointsEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1150.const$5,"GetMouseMovePointsEx");
    }
    /**
     * {@snippet :
     * int GetMouseMovePointsEx(UINT cbSize, LPMOUSEMOVEPOINT lppt, LPMOUSEMOVEPOINT lpptBuf, int nBufPoints, DWORD resolution);
     * }
     */
    public static int GetMouseMovePointsEx(int cbSize, MemorySegment lppt, MemorySegment lpptBuf, int nBufPoints, int resolution) {
        var mh$ = GetMouseMovePointsEx$MH();
        try {
            return (int)mh$.invokeExact(cbSize, lppt, lpptBuf, nBufPoints, resolution);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDesktopA$MH() {
        return RuntimeHelper.requireNonNull(constants$1151.const$1,"CreateDesktopA");
    }
    /**
     * {@snippet :
     * HDESK CreateDesktopA(LPCSTR lpszDesktop, LPCSTR lpszDevice, DEVMODEA* pDevmode, DWORD dwFlags, ACCESS_MASK dwDesiredAccess, LPSECURITY_ATTRIBUTES lpsa);
     * }
     */
    public static MemorySegment CreateDesktopA(MemorySegment lpszDesktop, MemorySegment lpszDevice, MemorySegment pDevmode, int dwFlags, int dwDesiredAccess, MemorySegment lpsa) {
        var mh$ = CreateDesktopA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpszDesktop, lpszDevice, pDevmode, dwFlags, dwDesiredAccess, lpsa);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDesktopW$MH() {
        return RuntimeHelper.requireNonNull(constants$1151.const$2,"CreateDesktopW");
    }
    /**
     * {@snippet :
     * HDESK CreateDesktopW(LPCWSTR lpszDesktop, LPCWSTR lpszDevice, DEVMODEW* pDevmode, DWORD dwFlags, ACCESS_MASK dwDesiredAccess, LPSECURITY_ATTRIBUTES lpsa);
     * }
     */
    public static MemorySegment CreateDesktopW(MemorySegment lpszDesktop, MemorySegment lpszDevice, MemorySegment pDevmode, int dwFlags, int dwDesiredAccess, MemorySegment lpsa) {
        var mh$ = CreateDesktopW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpszDesktop, lpszDevice, pDevmode, dwFlags, dwDesiredAccess, lpsa);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDesktopExA$MH() {
        return RuntimeHelper.requireNonNull(constants$1151.const$4,"CreateDesktopExA");
    }
    /**
     * {@snippet :
     * HDESK CreateDesktopExA(LPCSTR lpszDesktop, LPCSTR lpszDevice, DEVMODEA* pDevmode, DWORD dwFlags, ACCESS_MASK dwDesiredAccess, LPSECURITY_ATTRIBUTES lpsa, ULONG ulHeapSize, PVOID pvoid);
     * }
     */
    public static MemorySegment CreateDesktopExA(MemorySegment lpszDesktop, MemorySegment lpszDevice, MemorySegment pDevmode, int dwFlags, int dwDesiredAccess, MemorySegment lpsa, int ulHeapSize, MemorySegment pvoid) {
        var mh$ = CreateDesktopExA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpszDesktop, lpszDevice, pDevmode, dwFlags, dwDesiredAccess, lpsa, ulHeapSize, pvoid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDesktopExW$MH() {
        return RuntimeHelper.requireNonNull(constants$1151.const$5,"CreateDesktopExW");
    }
    /**
     * {@snippet :
     * HDESK CreateDesktopExW(LPCWSTR lpszDesktop, LPCWSTR lpszDevice, DEVMODEW* pDevmode, DWORD dwFlags, ACCESS_MASK dwDesiredAccess, LPSECURITY_ATTRIBUTES lpsa, ULONG ulHeapSize, PVOID pvoid);
     * }
     */
    public static MemorySegment CreateDesktopExW(MemorySegment lpszDesktop, MemorySegment lpszDevice, MemorySegment pDevmode, int dwFlags, int dwDesiredAccess, MemorySegment lpsa, int ulHeapSize, MemorySegment pvoid) {
        var mh$ = CreateDesktopExW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpszDesktop, lpszDevice, pDevmode, dwFlags, dwDesiredAccess, lpsa, ulHeapSize, pvoid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenDesktopA$MH() {
        return RuntimeHelper.requireNonNull(constants$1152.const$0,"OpenDesktopA");
    }
    /**
     * {@snippet :
     * HDESK OpenDesktopA(LPCSTR lpszDesktop, DWORD dwFlags, BOOL fInherit, ACCESS_MASK dwDesiredAccess);
     * }
     */
    public static MemorySegment OpenDesktopA(MemorySegment lpszDesktop, int dwFlags, int fInherit, int dwDesiredAccess) {
        var mh$ = OpenDesktopA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpszDesktop, dwFlags, fInherit, dwDesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenDesktopW$MH() {
        return RuntimeHelper.requireNonNull(constants$1152.const$1,"OpenDesktopW");
    }
    /**
     * {@snippet :
     * HDESK OpenDesktopW(LPCWSTR lpszDesktop, DWORD dwFlags, BOOL fInherit, ACCESS_MASK dwDesiredAccess);
     * }
     */
    public static MemorySegment OpenDesktopW(MemorySegment lpszDesktop, int dwFlags, int fInherit, int dwDesiredAccess) {
        var mh$ = OpenDesktopW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpszDesktop, dwFlags, fInherit, dwDesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenInputDesktop$MH() {
        return RuntimeHelper.requireNonNull(constants$1152.const$2,"OpenInputDesktop");
    }
    /**
     * {@snippet :
     * HDESK OpenInputDesktop(DWORD dwFlags, BOOL fInherit, ACCESS_MASK dwDesiredAccess);
     * }
     */
    public static MemorySegment OpenInputDesktop(int dwFlags, int fInherit, int dwDesiredAccess) {
        var mh$ = OpenInputDesktop$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(dwFlags, fInherit, dwDesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumDesktopsA$MH() {
        return RuntimeHelper.requireNonNull(constants$1152.const$3,"EnumDesktopsA");
    }
    /**
     * {@snippet :
     * BOOL EnumDesktopsA(HWINSTA hwinsta, DESKTOPENUMPROCA lpEnumFunc, LPARAM lParam);
     * }
     */
    public static int EnumDesktopsA(MemorySegment hwinsta, MemorySegment lpEnumFunc, long lParam) {
        var mh$ = EnumDesktopsA$MH();
        try {
            return (int)mh$.invokeExact(hwinsta, lpEnumFunc, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumDesktopsW$MH() {
        return RuntimeHelper.requireNonNull(constants$1152.const$4,"EnumDesktopsW");
    }
    /**
     * {@snippet :
     * BOOL EnumDesktopsW(HWINSTA hwinsta, DESKTOPENUMPROCW lpEnumFunc, LPARAM lParam);
     * }
     */
    public static int EnumDesktopsW(MemorySegment hwinsta, MemorySegment lpEnumFunc, long lParam) {
        var mh$ = EnumDesktopsW$MH();
        try {
            return (int)mh$.invokeExact(hwinsta, lpEnumFunc, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumDesktopWindows$MH() {
        return RuntimeHelper.requireNonNull(constants$1152.const$5,"EnumDesktopWindows");
    }
    /**
     * {@snippet :
     * BOOL EnumDesktopWindows(HDESK hDesktop, WNDENUMPROC lpfn, LPARAM lParam);
     * }
     */
    public static int EnumDesktopWindows(MemorySegment hDesktop, MemorySegment lpfn, long lParam) {
        var mh$ = EnumDesktopWindows$MH();
        try {
            return (int)mh$.invokeExact(hDesktop, lpfn, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SwitchDesktop$MH() {
        return RuntimeHelper.requireNonNull(constants$1153.const$0,"SwitchDesktop");
    }
    /**
     * {@snippet :
     * BOOL SwitchDesktop(HDESK hDesktop);
     * }
     */
    public static int SwitchDesktop(MemorySegment hDesktop) {
        var mh$ = SwitchDesktop$MH();
        try {
            return (int)mh$.invokeExact(hDesktop);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadDesktop$MH() {
        return RuntimeHelper.requireNonNull(constants$1153.const$1,"SetThreadDesktop");
    }
    /**
     * {@snippet :
     * BOOL SetThreadDesktop(HDESK hDesktop);
     * }
     */
    public static int SetThreadDesktop(MemorySegment hDesktop) {
        var mh$ = SetThreadDesktop$MH();
        try {
            return (int)mh$.invokeExact(hDesktop);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CloseDesktop$MH() {
        return RuntimeHelper.requireNonNull(constants$1153.const$2,"CloseDesktop");
    }
    /**
     * {@snippet :
     * BOOL CloseDesktop(HDESK hDesktop);
     * }
     */
    public static int CloseDesktop(MemorySegment hDesktop) {
        var mh$ = CloseDesktop$MH();
        try {
            return (int)mh$.invokeExact(hDesktop);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetThreadDesktop$MH() {
        return RuntimeHelper.requireNonNull(constants$1153.const$3,"GetThreadDesktop");
    }
    /**
     * {@snippet :
     * HDESK GetThreadDesktop(DWORD dwThreadId);
     * }
     */
    public static MemorySegment GetThreadDesktop(int dwThreadId) {
        var mh$ = GetThreadDesktop$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(dwThreadId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateWindowStationA$MH() {
        return RuntimeHelper.requireNonNull(constants$1153.const$4,"CreateWindowStationA");
    }
    /**
     * {@snippet :
     * HWINSTA CreateWindowStationA(LPCSTR lpwinsta, DWORD dwFlags, ACCESS_MASK dwDesiredAccess, LPSECURITY_ATTRIBUTES lpsa);
     * }
     */
    public static MemorySegment CreateWindowStationA(MemorySegment lpwinsta, int dwFlags, int dwDesiredAccess, MemorySegment lpsa) {
        var mh$ = CreateWindowStationA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpwinsta, dwFlags, dwDesiredAccess, lpsa);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateWindowStationW$MH() {
        return RuntimeHelper.requireNonNull(constants$1153.const$5,"CreateWindowStationW");
    }
    /**
     * {@snippet :
     * HWINSTA CreateWindowStationW(LPCWSTR lpwinsta, DWORD dwFlags, ACCESS_MASK dwDesiredAccess, LPSECURITY_ATTRIBUTES lpsa);
     * }
     */
    public static MemorySegment CreateWindowStationW(MemorySegment lpwinsta, int dwFlags, int dwDesiredAccess, MemorySegment lpsa) {
        var mh$ = CreateWindowStationW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpwinsta, dwFlags, dwDesiredAccess, lpsa);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenWindowStationA$MH() {
        return RuntimeHelper.requireNonNull(constants$1154.const$0,"OpenWindowStationA");
    }
    /**
     * {@snippet :
     * HWINSTA OpenWindowStationA(LPCSTR lpszWinSta, BOOL fInherit, ACCESS_MASK dwDesiredAccess);
     * }
     */
    public static MemorySegment OpenWindowStationA(MemorySegment lpszWinSta, int fInherit, int dwDesiredAccess) {
        var mh$ = OpenWindowStationA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpszWinSta, fInherit, dwDesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenWindowStationW$MH() {
        return RuntimeHelper.requireNonNull(constants$1154.const$1,"OpenWindowStationW");
    }
    /**
     * {@snippet :
     * HWINSTA OpenWindowStationW(LPCWSTR lpszWinSta, BOOL fInherit, ACCESS_MASK dwDesiredAccess);
     * }
     */
    public static MemorySegment OpenWindowStationW(MemorySegment lpszWinSta, int fInherit, int dwDesiredAccess) {
        var mh$ = OpenWindowStationW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpszWinSta, fInherit, dwDesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumWindowStationsA$MH() {
        return RuntimeHelper.requireNonNull(constants$1154.const$2,"EnumWindowStationsA");
    }
    /**
     * {@snippet :
     * BOOL EnumWindowStationsA(WINSTAENUMPROCA lpEnumFunc, LPARAM lParam);
     * }
     */
    public static int EnumWindowStationsA(MemorySegment lpEnumFunc, long lParam) {
        var mh$ = EnumWindowStationsA$MH();
        try {
            return (int)mh$.invokeExact(lpEnumFunc, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumWindowStationsW$MH() {
        return RuntimeHelper.requireNonNull(constants$1154.const$3,"EnumWindowStationsW");
    }
    /**
     * {@snippet :
     * BOOL EnumWindowStationsW(WINSTAENUMPROCW lpEnumFunc, LPARAM lParam);
     * }
     */
    public static int EnumWindowStationsW(MemorySegment lpEnumFunc, long lParam) {
        var mh$ = EnumWindowStationsW$MH();
        try {
            return (int)mh$.invokeExact(lpEnumFunc, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CloseWindowStation$MH() {
        return RuntimeHelper.requireNonNull(constants$1154.const$4,"CloseWindowStation");
    }
    /**
     * {@snippet :
     * BOOL CloseWindowStation(HWINSTA hWinSta);
     * }
     */
    public static int CloseWindowStation(MemorySegment hWinSta) {
        var mh$ = CloseWindowStation$MH();
        try {
            return (int)mh$.invokeExact(hWinSta);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetProcessWindowStation$MH() {
        return RuntimeHelper.requireNonNull(constants$1154.const$5,"SetProcessWindowStation");
    }
    /**
     * {@snippet :
     * BOOL SetProcessWindowStation(HWINSTA hWinSta);
     * }
     */
    public static int SetProcessWindowStation(MemorySegment hWinSta) {
        var mh$ = SetProcessWindowStation$MH();
        try {
            return (int)mh$.invokeExact(hWinSta);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcessWindowStation$MH() {
        return RuntimeHelper.requireNonNull(constants$1155.const$0,"GetProcessWindowStation");
    }
    /**
     * {@snippet :
     * HWINSTA GetProcessWindowStation();
     * }
     */
    public static MemorySegment GetProcessWindowStation() {
        var mh$ = GetProcessWindowStation$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetUserObjectSecurity$MH() {
        return RuntimeHelper.requireNonNull(constants$1155.const$1,"SetUserObjectSecurity");
    }
    /**
     * {@snippet :
     * BOOL SetUserObjectSecurity(HANDLE hObj, PSECURITY_INFORMATION pSIRequested, PSECURITY_DESCRIPTOR pSID);
     * }
     */
    public static int SetUserObjectSecurity(MemorySegment hObj, MemorySegment pSIRequested, MemorySegment pSID) {
        var mh$ = SetUserObjectSecurity$MH();
        try {
            return (int)mh$.invokeExact(hObj, pSIRequested, pSID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetUserObjectSecurity$MH() {
        return RuntimeHelper.requireNonNull(constants$1155.const$2,"GetUserObjectSecurity");
    }
    /**
     * {@snippet :
     * BOOL GetUserObjectSecurity(HANDLE hObj, PSECURITY_INFORMATION pSIRequested, PSECURITY_DESCRIPTOR pSID, DWORD nLength, LPDWORD lpnLengthNeeded);
     * }
     */
    public static int GetUserObjectSecurity(MemorySegment hObj, MemorySegment pSIRequested, MemorySegment pSID, int nLength, MemorySegment lpnLengthNeeded) {
        var mh$ = GetUserObjectSecurity$MH();
        try {
            return (int)mh$.invokeExact(hObj, pSIRequested, pSID, nLength, lpnLengthNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagUSEROBJECTFLAGS* PUSEROBJECTFLAGS;
     * }
     */
    public static final AddressLayout PUSEROBJECTFLAGS = RuntimeHelper.POINTER;
    public static MethodHandle GetUserObjectInformationA$MH() {
        return RuntimeHelper.requireNonNull(constants$1156.const$1,"GetUserObjectInformationA");
    }
    /**
     * {@snippet :
     * BOOL GetUserObjectInformationA(HANDLE hObj, int nIndex, PVOID pvInfo, DWORD nLength, LPDWORD lpnLengthNeeded);
     * }
     */
    public static int GetUserObjectInformationA(MemorySegment hObj, int nIndex, MemorySegment pvInfo, int nLength, MemorySegment lpnLengthNeeded) {
        var mh$ = GetUserObjectInformationA$MH();
        try {
            return (int)mh$.invokeExact(hObj, nIndex, pvInfo, nLength, lpnLengthNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetUserObjectInformationW$MH() {
        return RuntimeHelper.requireNonNull(constants$1156.const$2,"GetUserObjectInformationW");
    }
    /**
     * {@snippet :
     * BOOL GetUserObjectInformationW(HANDLE hObj, int nIndex, PVOID pvInfo, DWORD nLength, LPDWORD lpnLengthNeeded);
     * }
     */
    public static int GetUserObjectInformationW(MemorySegment hObj, int nIndex, MemorySegment pvInfo, int nLength, MemorySegment lpnLengthNeeded) {
        var mh$ = GetUserObjectInformationW$MH();
        try {
            return (int)mh$.invokeExact(hObj, nIndex, pvInfo, nLength, lpnLengthNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetUserObjectInformationA$MH() {
        return RuntimeHelper.requireNonNull(constants$1156.const$3,"SetUserObjectInformationA");
    }
    /**
     * {@snippet :
     * BOOL SetUserObjectInformationA(HANDLE hObj, int nIndex, PVOID pvInfo, DWORD nLength);
     * }
     */
    public static int SetUserObjectInformationA(MemorySegment hObj, int nIndex, MemorySegment pvInfo, int nLength) {
        var mh$ = SetUserObjectInformationA$MH();
        try {
            return (int)mh$.invokeExact(hObj, nIndex, pvInfo, nLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetUserObjectInformationW$MH() {
        return RuntimeHelper.requireNonNull(constants$1156.const$4,"SetUserObjectInformationW");
    }
    /**
     * {@snippet :
     * BOOL SetUserObjectInformationW(HANDLE hObj, int nIndex, PVOID pvInfo, DWORD nLength);
     * }
     */
    public static int SetUserObjectInformationW(MemorySegment hObj, int nIndex, MemorySegment pvInfo, int nLength) {
        var mh$ = SetUserObjectInformationW$MH();
        try {
            return (int)mh$.invokeExact(hObj, nIndex, pvInfo, nLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagWNDCLASSEXA* PWNDCLASSEXA;
     * }
     */
    public static final AddressLayout PWNDCLASSEXA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagWNDCLASSEXA* NPWNDCLASSEXA;
     * }
     */
    public static final AddressLayout NPWNDCLASSEXA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagWNDCLASSEXA* LPWNDCLASSEXA;
     * }
     */
    public static final AddressLayout LPWNDCLASSEXA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagWNDCLASSEXW* PWNDCLASSEXW;
     * }
     */
    public static final AddressLayout PWNDCLASSEXW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagWNDCLASSEXW* NPWNDCLASSEXW;
     * }
     */
    public static final AddressLayout NPWNDCLASSEXW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagWNDCLASSEXW* LPWNDCLASSEXW;
     * }
     */
    public static final AddressLayout LPWNDCLASSEXW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagWNDCLASSEXA* PWNDCLASSEX;
     * }
     */
    public static final AddressLayout PWNDCLASSEX = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagWNDCLASSEXA* NPWNDCLASSEX;
     * }
     */
    public static final AddressLayout NPWNDCLASSEX = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagWNDCLASSEXA* LPWNDCLASSEX;
     * }
     */
    public static final AddressLayout LPWNDCLASSEX = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagWNDCLASSA* PWNDCLASSA;
     * }
     */
    public static final AddressLayout PWNDCLASSA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagWNDCLASSA* NPWNDCLASSA;
     * }
     */
    public static final AddressLayout NPWNDCLASSA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagWNDCLASSA* LPWNDCLASSA;
     * }
     */
    public static final AddressLayout LPWNDCLASSA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagWNDCLASSW* PWNDCLASSW;
     * }
     */
    public static final AddressLayout PWNDCLASSW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagWNDCLASSW* NPWNDCLASSW;
     * }
     */
    public static final AddressLayout NPWNDCLASSW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagWNDCLASSW* LPWNDCLASSW;
     * }
     */
    public static final AddressLayout LPWNDCLASSW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagWNDCLASSA* PWNDCLASS;
     * }
     */
    public static final AddressLayout PWNDCLASS = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagWNDCLASSA* NPWNDCLASS;
     * }
     */
    public static final AddressLayout NPWNDCLASS = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagWNDCLASSA* LPWNDCLASS;
     * }
     */
    public static final AddressLayout LPWNDCLASS = RuntimeHelper.POINTER;
    public static MethodHandle IsHungAppWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$1164.const$5,"IsHungAppWindow");
    }
    /**
     * {@snippet :
     * BOOL IsHungAppWindow(HWND hwnd);
     * }
     */
    public static int IsHungAppWindow(MemorySegment hwnd) {
        var mh$ = IsHungAppWindow$MH();
        try {
            return (int)mh$.invokeExact(hwnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DisableProcessWindowsGhosting$MH() {
        return RuntimeHelper.requireNonNull(constants$1165.const$0,"DisableProcessWindowsGhosting");
    }
    /**
     * {@snippet :
     * void DisableProcessWindowsGhosting();
     * }
     */
    public static void DisableProcessWindowsGhosting() {
        var mh$ = DisableProcessWindowsGhosting$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagMSG* PMSG;
     * }
     */
    public static final AddressLayout PMSG = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagMSG* NPMSG;
     * }
     */
    public static final AddressLayout NPMSG = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagMSG* LPMSG;
     * }
     */
    public static final AddressLayout LPMSG = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagMINMAXINFO* PMINMAXINFO;
     * }
     */
    public static final AddressLayout PMINMAXINFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagMINMAXINFO* LPMINMAXINFO;
     * }
     */
    public static final AddressLayout LPMINMAXINFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagCOPYDATASTRUCT* PCOPYDATASTRUCT;
     * }
     */
    public static final AddressLayout PCOPYDATASTRUCT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagMDINEXTMENU* PMDINEXTMENU;
     * }
     */
    public static final AddressLayout PMDINEXTMENU = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagMDINEXTMENU* LPMDINEXTMENU;
     * }
     */
    public static final AddressLayout LPMDINEXTMENU = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct * PPOWERBROADCAST_SETTING;
     * }
     */
    public static final AddressLayout PPOWERBROADCAST_SETTING = RuntimeHelper.POINTER;
    public static MethodHandle RegisterWindowMessageA$MH() {
        return RuntimeHelper.requireNonNull(constants$1168.const$0,"RegisterWindowMessageA");
    }
    /**
     * {@snippet :
     * UINT RegisterWindowMessageA(LPCSTR lpString);
     * }
     */
    public static int RegisterWindowMessageA(MemorySegment lpString) {
        var mh$ = RegisterWindowMessageA$MH();
        try {
            return (int)mh$.invokeExact(lpString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterWindowMessageW$MH() {
        return RuntimeHelper.requireNonNull(constants$1168.const$1,"RegisterWindowMessageW");
    }
    /**
     * {@snippet :
     * UINT RegisterWindowMessageW(LPCWSTR lpString);
     * }
     */
    public static int RegisterWindowMessageW(MemorySegment lpString) {
        var mh$ = RegisterWindowMessageW$MH();
        try {
            return (int)mh$.invokeExact(lpString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagWINDOWPOS* LPWINDOWPOS;
     * }
     */
    public static final AddressLayout LPWINDOWPOS = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagWINDOWPOS* PWINDOWPOS;
     * }
     */
    public static final AddressLayout PWINDOWPOS = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagNCCALCSIZE_PARAMS* LPNCCALCSIZE_PARAMS;
     * }
     */
    public static final AddressLayout LPNCCALCSIZE_PARAMS = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagTRACKMOUSEEVENT* LPTRACKMOUSEEVENT;
     * }
     */
    public static final AddressLayout LPTRACKMOUSEEVENT = RuntimeHelper.POINTER;
    public static MethodHandle TrackMouseEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$1170.const$5,"TrackMouseEvent");
    }
    /**
     * {@snippet :
     * BOOL TrackMouseEvent(LPTRACKMOUSEEVENT lpEventTrack);
     * }
     */
    public static int TrackMouseEvent(MemorySegment lpEventTrack) {
        var mh$ = TrackMouseEvent$MH();
        try {
            return (int)mh$.invokeExact(lpEventTrack);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawEdge$MH() {
        return RuntimeHelper.requireNonNull(constants$1171.const$0,"DrawEdge");
    }
    /**
     * {@snippet :
     * BOOL DrawEdge(HDC hdc, LPRECT qrc, UINT edge, UINT grfFlags);
     * }
     */
    public static int DrawEdge(MemorySegment hdc, MemorySegment qrc, int edge, int grfFlags) {
        var mh$ = DrawEdge$MH();
        try {
            return (int)mh$.invokeExact(hdc, qrc, edge, grfFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawFrameControl$MH() {
        return RuntimeHelper.requireNonNull(constants$1171.const$1,"DrawFrameControl");
    }
    /**
     * {@snippet :
     * BOOL DrawFrameControl(HDC, LPRECT, UINT, UINT);
     * }
     */
    public static int DrawFrameControl(MemorySegment x0, MemorySegment x1, int x2, int x3) {
        var mh$ = DrawFrameControl$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawCaption$MH() {
        return RuntimeHelper.requireNonNull(constants$1171.const$2,"DrawCaption");
    }
    /**
     * {@snippet :
     * BOOL DrawCaption(HWND hwnd, HDC hdc, const RECT* lprect, UINT flags);
     * }
     */
    public static int DrawCaption(MemorySegment hwnd, MemorySegment hdc, MemorySegment lprect, int flags) {
        var mh$ = DrawCaption$MH();
        try {
            return (int)mh$.invokeExact(hwnd, hdc, lprect, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawAnimatedRects$MH() {
        return RuntimeHelper.requireNonNull(constants$1171.const$3,"DrawAnimatedRects");
    }
    /**
     * {@snippet :
     * BOOL DrawAnimatedRects(HWND hwnd, int idAni, const RECT* lprcFrom, const RECT* lprcTo);
     * }
     */
    public static int DrawAnimatedRects(MemorySegment hwnd, int idAni, MemorySegment lprcFrom, MemorySegment lprcTo) {
        var mh$ = DrawAnimatedRects$MH();
        try {
            return (int)mh$.invokeExact(hwnd, idAni, lprcFrom, lprcTo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagACCEL* LPACCEL;
     * }
     */
    public static final AddressLayout LPACCEL = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagPAINTSTRUCT* PPAINTSTRUCT;
     * }
     */
    public static final AddressLayout PPAINTSTRUCT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagPAINTSTRUCT* NPPAINTSTRUCT;
     * }
     */
    public static final AddressLayout NPPAINTSTRUCT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagPAINTSTRUCT* LPPAINTSTRUCT;
     * }
     */
    public static final AddressLayout LPPAINTSTRUCT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagCREATESTRUCTA* LPCREATESTRUCTA;
     * }
     */
    public static final AddressLayout LPCREATESTRUCTA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagCREATESTRUCTW* LPCREATESTRUCTW;
     * }
     */
    public static final AddressLayout LPCREATESTRUCTW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagCREATESTRUCTA* LPCREATESTRUCT;
     * }
     */
    public static final AddressLayout LPCREATESTRUCT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagWINDOWPLACEMENT* PWINDOWPLACEMENT;
     * }
     */
    public static final AddressLayout PWINDOWPLACEMENT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagWINDOWPLACEMENT* LPWINDOWPLACEMENT;
     * }
     */
    public static final AddressLayout LPWINDOWPLACEMENT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagNMHDR* LPNMHDR;
     * }
     */
    public static final AddressLayout LPNMHDR = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagSTYLESTRUCT* LPSTYLESTRUCT;
     * }
     */
    public static final AddressLayout LPSTYLESTRUCT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagMEASUREITEMSTRUCT* PMEASUREITEMSTRUCT;
     * }
     */
    public static final AddressLayout PMEASUREITEMSTRUCT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagMEASUREITEMSTRUCT* LPMEASUREITEMSTRUCT;
     * }
     */
    public static final AddressLayout LPMEASUREITEMSTRUCT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagDRAWITEMSTRUCT* PDRAWITEMSTRUCT;
     * }
     */
    public static final AddressLayout PDRAWITEMSTRUCT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagDRAWITEMSTRUCT* LPDRAWITEMSTRUCT;
     * }
     */
    public static final AddressLayout LPDRAWITEMSTRUCT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagDELETEITEMSTRUCT* PDELETEITEMSTRUCT;
     * }
     */
    public static final AddressLayout PDELETEITEMSTRUCT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagDELETEITEMSTRUCT* LPDELETEITEMSTRUCT;
     * }
     */
    public static final AddressLayout LPDELETEITEMSTRUCT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagCOMPAREITEMSTRUCT* PCOMPAREITEMSTRUCT;
     * }
     */
    public static final AddressLayout PCOMPAREITEMSTRUCT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagCOMPAREITEMSTRUCT* LPCOMPAREITEMSTRUCT;
     * }
     */
    public static final AddressLayout LPCOMPAREITEMSTRUCT = RuntimeHelper.POINTER;
    public static MethodHandle GetMessageA$MH() {
        return RuntimeHelper.requireNonNull(constants$1184.const$3,"GetMessageA");
    }
    /**
     * {@snippet :
     * BOOL GetMessageA(LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax);
     * }
     */
    public static int GetMessageA(MemorySegment lpMsg, MemorySegment hWnd, int wMsgFilterMin, int wMsgFilterMax) {
        var mh$ = GetMessageA$MH();
        try {
            return (int)mh$.invokeExact(lpMsg, hWnd, wMsgFilterMin, wMsgFilterMax);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMessageW$MH() {
        return RuntimeHelper.requireNonNull(constants$1184.const$4,"GetMessageW");
    }
    /**
     * {@snippet :
     * BOOL GetMessageW(LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax);
     * }
     */
    public static int GetMessageW(MemorySegment lpMsg, MemorySegment hWnd, int wMsgFilterMin, int wMsgFilterMax) {
        var mh$ = GetMessageW$MH();
        try {
            return (int)mh$.invokeExact(lpMsg, hWnd, wMsgFilterMin, wMsgFilterMax);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TranslateMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$1184.const$5,"TranslateMessage");
    }
    /**
     * {@snippet :
     * BOOL TranslateMessage(const MSG* lpMsg);
     * }
     */
    public static int TranslateMessage(MemorySegment lpMsg) {
        var mh$ = TranslateMessage$MH();
        try {
            return (int)mh$.invokeExact(lpMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DispatchMessageA$MH() {
        return RuntimeHelper.requireNonNull(constants$1185.const$0,"DispatchMessageA");
    }
    /**
     * {@snippet :
     * LRESULT DispatchMessageA(const MSG* lpMsg);
     * }
     */
    public static long DispatchMessageA(MemorySegment lpMsg) {
        var mh$ = DispatchMessageA$MH();
        try {
            return (long)mh$.invokeExact(lpMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DispatchMessageW$MH() {
        return RuntimeHelper.requireNonNull(constants$1185.const$1,"DispatchMessageW");
    }
    /**
     * {@snippet :
     * LRESULT DispatchMessageW(const MSG* lpMsg);
     * }
     */
    public static long DispatchMessageW(MemorySegment lpMsg) {
        var mh$ = DispatchMessageW$MH();
        try {
            return (long)mh$.invokeExact(lpMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetMessageQueue$MH() {
        return RuntimeHelper.requireNonNull(constants$1185.const$2,"SetMessageQueue");
    }
    /**
     * {@snippet :
     * BOOL SetMessageQueue(int cMessagesMax);
     * }
     */
    public static int SetMessageQueue(int cMessagesMax) {
        var mh$ = SetMessageQueue$MH();
        try {
            return (int)mh$.invokeExact(cMessagesMax);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PeekMessageA$MH() {
        return RuntimeHelper.requireNonNull(constants$1185.const$4,"PeekMessageA");
    }
    /**
     * {@snippet :
     * BOOL PeekMessageA(LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax, UINT wRemoveMsg);
     * }
     */
    public static int PeekMessageA(MemorySegment lpMsg, MemorySegment hWnd, int wMsgFilterMin, int wMsgFilterMax, int wRemoveMsg) {
        var mh$ = PeekMessageA$MH();
        try {
            return (int)mh$.invokeExact(lpMsg, hWnd, wMsgFilterMin, wMsgFilterMax, wRemoveMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PeekMessageW$MH() {
        return RuntimeHelper.requireNonNull(constants$1185.const$5,"PeekMessageW");
    }
    /**
     * {@snippet :
     * BOOL PeekMessageW(LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax, UINT wRemoveMsg);
     * }
     */
    public static int PeekMessageW(MemorySegment lpMsg, MemorySegment hWnd, int wMsgFilterMin, int wMsgFilterMax, int wRemoveMsg) {
        var mh$ = PeekMessageW$MH();
        try {
            return (int)mh$.invokeExact(lpMsg, hWnd, wMsgFilterMin, wMsgFilterMax, wRemoveMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterHotKey$MH() {
        return RuntimeHelper.requireNonNull(constants$1186.const$0,"RegisterHotKey");
    }
    /**
     * {@snippet :
     * BOOL RegisterHotKey(HWND hWnd, int id, UINT fsModifiers, UINT vk);
     * }
     */
    public static int RegisterHotKey(MemorySegment hWnd, int id, int fsModifiers, int vk) {
        var mh$ = RegisterHotKey$MH();
        try {
            return (int)mh$.invokeExact(hWnd, id, fsModifiers, vk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnregisterHotKey$MH() {
        return RuntimeHelper.requireNonNull(constants$1186.const$1,"UnregisterHotKey");
    }
    /**
     * {@snippet :
     * BOOL UnregisterHotKey(HWND hWnd, int id);
     * }
     */
    public static int UnregisterHotKey(MemorySegment hWnd, int id) {
        var mh$ = UnregisterHotKey$MH();
        try {
            return (int)mh$.invokeExact(hWnd, id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExitWindowsEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1186.const$2,"ExitWindowsEx");
    }
    /**
     * {@snippet :
     * BOOL ExitWindowsEx(UINT uFlags, DWORD dwReason);
     * }
     */
    public static int ExitWindowsEx(int uFlags, int dwReason) {
        var mh$ = ExitWindowsEx$MH();
        try {
            return (int)mh$.invokeExact(uFlags, dwReason);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SwapMouseButton$MH() {
        return RuntimeHelper.requireNonNull(constants$1186.const$3,"SwapMouseButton");
    }
    /**
     * {@snippet :
     * BOOL SwapMouseButton(BOOL fSwap);
     * }
     */
    public static int SwapMouseButton(int fSwap) {
        var mh$ = SwapMouseButton$MH();
        try {
            return (int)mh$.invokeExact(fSwap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMessagePos$MH() {
        return RuntimeHelper.requireNonNull(constants$1186.const$4,"GetMessagePos");
    }
    /**
     * {@snippet :
     * DWORD GetMessagePos();
     * }
     */
    public static int GetMessagePos() {
        var mh$ = GetMessagePos$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMessageTime$MH() {
        return RuntimeHelper.requireNonNull(constants$1186.const$5,"GetMessageTime");
    }
    /**
     * {@snippet :
     * LONG GetMessageTime();
     * }
     */
    public static int GetMessageTime() {
        var mh$ = GetMessageTime$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMessageExtraInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$1187.const$0,"GetMessageExtraInfo");
    }
    /**
     * {@snippet :
     * LPARAM GetMessageExtraInfo();
     * }
     */
    public static long GetMessageExtraInfo() {
        var mh$ = GetMessageExtraInfo$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetUnpredictedMessagePos$MH() {
        return RuntimeHelper.requireNonNull(constants$1187.const$1,"GetUnpredictedMessagePos");
    }
    /**
     * {@snippet :
     * DWORD GetUnpredictedMessagePos();
     * }
     */
    public static int GetUnpredictedMessagePos() {
        var mh$ = GetUnpredictedMessagePos$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsWow64Message$MH() {
        return RuntimeHelper.requireNonNull(constants$1187.const$2,"IsWow64Message");
    }
    /**
     * {@snippet :
     * BOOL IsWow64Message();
     * }
     */
    public static int IsWow64Message() {
        var mh$ = IsWow64Message$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetMessageExtraInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$1187.const$3,"SetMessageExtraInfo");
    }
    /**
     * {@snippet :
     * LPARAM SetMessageExtraInfo(LPARAM lParam);
     * }
     */
    public static long SetMessageExtraInfo(long lParam) {
        var mh$ = SetMessageExtraInfo$MH();
        try {
            return (long)mh$.invokeExact(lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SendMessageA$MH() {
        return RuntimeHelper.requireNonNull(constants$1187.const$4,"SendMessageA");
    }
    /**
     * {@snippet :
     * LRESULT SendMessageA(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
     * }
     */
    public static long SendMessageA(MemorySegment hWnd, int Msg, long wParam, long lParam) {
        var mh$ = SendMessageA$MH();
        try {
            return (long)mh$.invokeExact(hWnd, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SendMessageW$MH() {
        return RuntimeHelper.requireNonNull(constants$1187.const$5,"SendMessageW");
    }
    /**
     * {@snippet :
     * LRESULT SendMessageW(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
     * }
     */
    public static long SendMessageW(MemorySegment hWnd, int Msg, long wParam, long lParam) {
        var mh$ = SendMessageW$MH();
        try {
            return (long)mh$.invokeExact(hWnd, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SendMessageTimeoutA$MH() {
        return RuntimeHelper.requireNonNull(constants$1188.const$1,"SendMessageTimeoutA");
    }
    /**
     * {@snippet :
     * LRESULT SendMessageTimeoutA(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam, UINT fuFlags, UINT uTimeout, PDWORD_PTR lpdwResult);
     * }
     */
    public static long SendMessageTimeoutA(MemorySegment hWnd, int Msg, long wParam, long lParam, int fuFlags, int uTimeout, MemorySegment lpdwResult) {
        var mh$ = SendMessageTimeoutA$MH();
        try {
            return (long)mh$.invokeExact(hWnd, Msg, wParam, lParam, fuFlags, uTimeout, lpdwResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SendMessageTimeoutW$MH() {
        return RuntimeHelper.requireNonNull(constants$1188.const$2,"SendMessageTimeoutW");
    }
    /**
     * {@snippet :
     * LRESULT SendMessageTimeoutW(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam, UINT fuFlags, UINT uTimeout, PDWORD_PTR lpdwResult);
     * }
     */
    public static long SendMessageTimeoutW(MemorySegment hWnd, int Msg, long wParam, long lParam, int fuFlags, int uTimeout, MemorySegment lpdwResult) {
        var mh$ = SendMessageTimeoutW$MH();
        try {
            return (long)mh$.invokeExact(hWnd, Msg, wParam, lParam, fuFlags, uTimeout, lpdwResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SendNotifyMessageA$MH() {
        return RuntimeHelper.requireNonNull(constants$1188.const$4,"SendNotifyMessageA");
    }
    /**
     * {@snippet :
     * BOOL SendNotifyMessageA(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
     * }
     */
    public static int SendNotifyMessageA(MemorySegment hWnd, int Msg, long wParam, long lParam) {
        var mh$ = SendNotifyMessageA$MH();
        try {
            return (int)mh$.invokeExact(hWnd, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SendNotifyMessageW$MH() {
        return RuntimeHelper.requireNonNull(constants$1188.const$5,"SendNotifyMessageW");
    }
    /**
     * {@snippet :
     * BOOL SendNotifyMessageW(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
     * }
     */
    public static int SendNotifyMessageW(MemorySegment hWnd, int Msg, long wParam, long lParam) {
        var mh$ = SendNotifyMessageW$MH();
        try {
            return (int)mh$.invokeExact(hWnd, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SendMessageCallbackA$MH() {
        return RuntimeHelper.requireNonNull(constants$1189.const$1,"SendMessageCallbackA");
    }
    /**
     * {@snippet :
     * BOOL SendMessageCallbackA(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam, SENDASYNCPROC lpResultCallBack, ULONG_PTR dwData);
     * }
     */
    public static int SendMessageCallbackA(MemorySegment hWnd, int Msg, long wParam, long lParam, MemorySegment lpResultCallBack, long dwData) {
        var mh$ = SendMessageCallbackA$MH();
        try {
            return (int)mh$.invokeExact(hWnd, Msg, wParam, lParam, lpResultCallBack, dwData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SendMessageCallbackW$MH() {
        return RuntimeHelper.requireNonNull(constants$1189.const$2,"SendMessageCallbackW");
    }
    /**
     * {@snippet :
     * BOOL SendMessageCallbackW(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam, SENDASYNCPROC lpResultCallBack, ULONG_PTR dwData);
     * }
     */
    public static int SendMessageCallbackW(MemorySegment hWnd, int Msg, long wParam, long lParam, MemorySegment lpResultCallBack, long dwData) {
        var mh$ = SendMessageCallbackW$MH();
        try {
            return (int)mh$.invokeExact(hWnd, Msg, wParam, lParam, lpResultCallBack, dwData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct * PBSMINFO;
     * }
     */
    public static final AddressLayout PBSMINFO = RuntimeHelper.POINTER;
    public static MethodHandle BroadcastSystemMessageExA$MH() {
        return RuntimeHelper.requireNonNull(constants$1190.const$2,"BroadcastSystemMessageExA");
    }
    /**
     * {@snippet :
     * long BroadcastSystemMessageExA(DWORD flags, LPDWORD lpInfo, UINT Msg, WPARAM wParam, LPARAM lParam, PBSMINFO pbsmInfo);
     * }
     */
    public static int BroadcastSystemMessageExA(int flags, MemorySegment lpInfo, int Msg, long wParam, long lParam, MemorySegment pbsmInfo) {
        var mh$ = BroadcastSystemMessageExA$MH();
        try {
            return (int)mh$.invokeExact(flags, lpInfo, Msg, wParam, lParam, pbsmInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BroadcastSystemMessageExW$MH() {
        return RuntimeHelper.requireNonNull(constants$1190.const$3,"BroadcastSystemMessageExW");
    }
    /**
     * {@snippet :
     * long BroadcastSystemMessageExW(DWORD flags, LPDWORD lpInfo, UINT Msg, WPARAM wParam, LPARAM lParam, PBSMINFO pbsmInfo);
     * }
     */
    public static int BroadcastSystemMessageExW(int flags, MemorySegment lpInfo, int Msg, long wParam, long lParam, MemorySegment pbsmInfo) {
        var mh$ = BroadcastSystemMessageExW$MH();
        try {
            return (int)mh$.invokeExact(flags, lpInfo, Msg, wParam, lParam, pbsmInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BroadcastSystemMessageA$MH() {
        return RuntimeHelper.requireNonNull(constants$1190.const$5,"BroadcastSystemMessageA");
    }
    /**
     * {@snippet :
     * long BroadcastSystemMessageA(DWORD flags, LPDWORD lpInfo, UINT Msg, WPARAM wParam, LPARAM lParam);
     * }
     */
    public static int BroadcastSystemMessageA(int flags, MemorySegment lpInfo, int Msg, long wParam, long lParam) {
        var mh$ = BroadcastSystemMessageA$MH();
        try {
            return (int)mh$.invokeExact(flags, lpInfo, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BroadcastSystemMessageW$MH() {
        return RuntimeHelper.requireNonNull(constants$1191.const$0,"BroadcastSystemMessageW");
    }
    /**
     * {@snippet :
     * long BroadcastSystemMessageW(DWORD flags, LPDWORD lpInfo, UINT Msg, WPARAM wParam, LPARAM lParam);
     * }
     */
    public static int BroadcastSystemMessageW(int flags, MemorySegment lpInfo, int Msg, long wParam, long lParam) {
        var mh$ = BroadcastSystemMessageW$MH();
        try {
            return (int)mh$.invokeExact(flags, lpInfo, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef void* HDEVNOTIFY;
     * }
     */
    public static final AddressLayout HDEVNOTIFY = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef void** PHDEVNOTIFY;
     * }
     */
    public static final AddressLayout PHDEVNOTIFY = RuntimeHelper.POINTER;
    public static MethodHandle RegisterDeviceNotificationA$MH() {
        return RuntimeHelper.requireNonNull(constants$1191.const$1,"RegisterDeviceNotificationA");
    }
    /**
     * {@snippet :
     * HDEVNOTIFY RegisterDeviceNotificationA(HANDLE hRecipient, LPVOID NotificationFilter, DWORD Flags);
     * }
     */
    public static MemorySegment RegisterDeviceNotificationA(MemorySegment hRecipient, MemorySegment NotificationFilter, int Flags) {
        var mh$ = RegisterDeviceNotificationA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hRecipient, NotificationFilter, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterDeviceNotificationW$MH() {
        return RuntimeHelper.requireNonNull(constants$1191.const$2,"RegisterDeviceNotificationW");
    }
    /**
     * {@snippet :
     * HDEVNOTIFY RegisterDeviceNotificationW(HANDLE hRecipient, LPVOID NotificationFilter, DWORD Flags);
     * }
     */
    public static MemorySegment RegisterDeviceNotificationW(MemorySegment hRecipient, MemorySegment NotificationFilter, int Flags) {
        var mh$ = RegisterDeviceNotificationW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hRecipient, NotificationFilter, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnregisterDeviceNotification$MH() {
        return RuntimeHelper.requireNonNull(constants$1191.const$3,"UnregisterDeviceNotification");
    }
    /**
     * {@snippet :
     * BOOL UnregisterDeviceNotification(HDEVNOTIFY Handle);
     * }
     */
    public static int UnregisterDeviceNotification(MemorySegment Handle) {
        var mh$ = UnregisterDeviceNotification$MH();
        try {
            return (int)mh$.invokeExact(Handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef void* HPOWERNOTIFY;
     * }
     */
    public static final AddressLayout HPOWERNOTIFY = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef void** PHPOWERNOTIFY;
     * }
     */
    public static final AddressLayout PHPOWERNOTIFY = RuntimeHelper.POINTER;
    public static MethodHandle RegisterPowerSettingNotification$MH() {
        return RuntimeHelper.requireNonNull(constants$1191.const$4,"RegisterPowerSettingNotification");
    }
    /**
     * {@snippet :
     * HPOWERNOTIFY RegisterPowerSettingNotification(HANDLE hRecipient, LPCGUID PowerSettingGuid, DWORD Flags);
     * }
     */
    public static MemorySegment RegisterPowerSettingNotification(MemorySegment hRecipient, MemorySegment PowerSettingGuid, int Flags) {
        var mh$ = RegisterPowerSettingNotification$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hRecipient, PowerSettingGuid, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnregisterPowerSettingNotification$MH() {
        return RuntimeHelper.requireNonNull(constants$1191.const$5,"UnregisterPowerSettingNotification");
    }
    /**
     * {@snippet :
     * BOOL UnregisterPowerSettingNotification(HPOWERNOTIFY Handle);
     * }
     */
    public static int UnregisterPowerSettingNotification(MemorySegment Handle) {
        var mh$ = UnregisterPowerSettingNotification$MH();
        try {
            return (int)mh$.invokeExact(Handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterSuspendResumeNotification$MH() {
        return RuntimeHelper.requireNonNull(constants$1192.const$0,"RegisterSuspendResumeNotification");
    }
    /**
     * {@snippet :
     * HPOWERNOTIFY RegisterSuspendResumeNotification(HANDLE hRecipient, DWORD Flags);
     * }
     */
    public static MemorySegment RegisterSuspendResumeNotification(MemorySegment hRecipient, int Flags) {
        var mh$ = RegisterSuspendResumeNotification$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hRecipient, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnregisterSuspendResumeNotification$MH() {
        return RuntimeHelper.requireNonNull(constants$1192.const$1,"UnregisterSuspendResumeNotification");
    }
    /**
     * {@snippet :
     * BOOL UnregisterSuspendResumeNotification(HPOWERNOTIFY Handle);
     * }
     */
    public static int UnregisterSuspendResumeNotification(MemorySegment Handle) {
        var mh$ = UnregisterSuspendResumeNotification$MH();
        try {
            return (int)mh$.invokeExact(Handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PostMessageA$MH() {
        return RuntimeHelper.requireNonNull(constants$1192.const$2,"PostMessageA");
    }
    /**
     * {@snippet :
     * BOOL PostMessageA(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
     * }
     */
    public static int PostMessageA(MemorySegment hWnd, int Msg, long wParam, long lParam) {
        var mh$ = PostMessageA$MH();
        try {
            return (int)mh$.invokeExact(hWnd, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PostMessageW$MH() {
        return RuntimeHelper.requireNonNull(constants$1192.const$3,"PostMessageW");
    }
    /**
     * {@snippet :
     * BOOL PostMessageW(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
     * }
     */
    public static int PostMessageW(MemorySegment hWnd, int Msg, long wParam, long lParam) {
        var mh$ = PostMessageW$MH();
        try {
            return (int)mh$.invokeExact(hWnd, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PostThreadMessageA$MH() {
        return RuntimeHelper.requireNonNull(constants$1192.const$5,"PostThreadMessageA");
    }
    /**
     * {@snippet :
     * BOOL PostThreadMessageA(DWORD idThread, UINT Msg, WPARAM wParam, LPARAM lParam);
     * }
     */
    public static int PostThreadMessageA(int idThread, int Msg, long wParam, long lParam) {
        var mh$ = PostThreadMessageA$MH();
        try {
            return (int)mh$.invokeExact(idThread, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PostThreadMessageW$MH() {
        return RuntimeHelper.requireNonNull(constants$1193.const$0,"PostThreadMessageW");
    }
    /**
     * {@snippet :
     * BOOL PostThreadMessageW(DWORD idThread, UINT Msg, WPARAM wParam, LPARAM lParam);
     * }
     */
    public static int PostThreadMessageW(int idThread, int Msg, long wParam, long lParam) {
        var mh$ = PostThreadMessageW$MH();
        try {
            return (int)mh$.invokeExact(idThread, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AttachThreadInput$MH() {
        return RuntimeHelper.requireNonNull(constants$1193.const$1,"AttachThreadInput");
    }
    /**
     * {@snippet :
     * BOOL AttachThreadInput(DWORD idAttach, DWORD idAttachTo, BOOL fAttach);
     * }
     */
    public static int AttachThreadInput(int idAttach, int idAttachTo, int fAttach) {
        var mh$ = AttachThreadInput$MH();
        try {
            return (int)mh$.invokeExact(idAttach, idAttachTo, fAttach);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReplyMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$1193.const$2,"ReplyMessage");
    }
    /**
     * {@snippet :
     * BOOL ReplyMessage(LRESULT lResult);
     * }
     */
    public static int ReplyMessage(long lResult) {
        var mh$ = ReplyMessage$MH();
        try {
            return (int)mh$.invokeExact(lResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WaitMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$1193.const$3,"WaitMessage");
    }
    /**
     * {@snippet :
     * BOOL WaitMessage();
     * }
     */
    public static int WaitMessage() {
        var mh$ = WaitMessage$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WaitForInputIdle$MH() {
        return RuntimeHelper.requireNonNull(constants$1193.const$4,"WaitForInputIdle");
    }
    /**
     * {@snippet :
     * DWORD WaitForInputIdle(HANDLE hProcess, DWORD dwMilliseconds);
     * }
     */
    public static int WaitForInputIdle(MemorySegment hProcess, int dwMilliseconds) {
        var mh$ = WaitForInputIdle$MH();
        try {
            return (int)mh$.invokeExact(hProcess, dwMilliseconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DefWindowProcA$MH() {
        return RuntimeHelper.requireNonNull(constants$1193.const$5,"DefWindowProcA");
    }
    /**
     * {@snippet :
     * LRESULT DefWindowProcA(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
     * }
     */
    public static long DefWindowProcA(MemorySegment hWnd, int Msg, long wParam, long lParam) {
        var mh$ = DefWindowProcA$MH();
        try {
            return (long)mh$.invokeExact(hWnd, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DefWindowProcW$MH() {
        return RuntimeHelper.requireNonNull(constants$1194.const$0,"DefWindowProcW");
    }
    /**
     * {@snippet :
     * LRESULT DefWindowProcW(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
     * }
     */
    public static long DefWindowProcW(MemorySegment hWnd, int Msg, long wParam, long lParam) {
        var mh$ = DefWindowProcW$MH();
        try {
            return (long)mh$.invokeExact(hWnd, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PostQuitMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$1194.const$1,"PostQuitMessage");
    }
    /**
     * {@snippet :
     * void PostQuitMessage(int nExitCode);
     * }
     */
    public static void PostQuitMessage(int nExitCode) {
        var mh$ = PostQuitMessage$MH();
        try {
            mh$.invokeExact(nExitCode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CallWindowProcA$MH() {
        return RuntimeHelper.requireNonNull(constants$1194.const$3,"CallWindowProcA");
    }
    /**
     * {@snippet :
     * LRESULT CallWindowProcA(WNDPROC lpPrevWndFunc, HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
     * }
     */
    public static long CallWindowProcA(MemorySegment lpPrevWndFunc, MemorySegment hWnd, int Msg, long wParam, long lParam) {
        var mh$ = CallWindowProcA$MH();
        try {
            return (long)mh$.invokeExact(lpPrevWndFunc, hWnd, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CallWindowProcW$MH() {
        return RuntimeHelper.requireNonNull(constants$1194.const$4,"CallWindowProcW");
    }
    /**
     * {@snippet :
     * LRESULT CallWindowProcW(WNDPROC lpPrevWndFunc, HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
     * }
     */
    public static long CallWindowProcW(MemorySegment lpPrevWndFunc, MemorySegment hWnd, int Msg, long wParam, long lParam) {
        var mh$ = CallWindowProcW$MH();
        try {
            return (long)mh$.invokeExact(lpPrevWndFunc, hWnd, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InSendMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$1194.const$5,"InSendMessage");
    }
    /**
     * {@snippet :
     * BOOL InSendMessage();
     * }
     */
    public static int InSendMessage() {
        var mh$ = InSendMessage$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InSendMessageEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1195.const$0,"InSendMessageEx");
    }
    /**
     * {@snippet :
     * DWORD InSendMessageEx(LPVOID lpReserved);
     * }
     */
    public static int InSendMessageEx(MemorySegment lpReserved) {
        var mh$ = InSendMessageEx$MH();
        try {
            return (int)mh$.invokeExact(lpReserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDoubleClickTime$MH() {
        return RuntimeHelper.requireNonNull(constants$1195.const$1,"GetDoubleClickTime");
    }
    /**
     * {@snippet :
     * UINT GetDoubleClickTime();
     * }
     */
    public static int GetDoubleClickTime() {
        var mh$ = GetDoubleClickTime$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetDoubleClickTime$MH() {
        return RuntimeHelper.requireNonNull(constants$1195.const$2,"SetDoubleClickTime");
    }
    /**
     * {@snippet :
     * BOOL SetDoubleClickTime(UINT);
     * }
     */
    public static int SetDoubleClickTime(int x0) {
        var mh$ = SetDoubleClickTime$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterClassA$MH() {
        return RuntimeHelper.requireNonNull(constants$1195.const$3,"RegisterClassA");
    }
    /**
     * {@snippet :
     * ATOM RegisterClassA(const WNDCLASSA* lpWndClass);
     * }
     */
    public static short RegisterClassA(MemorySegment lpWndClass) {
        var mh$ = RegisterClassA$MH();
        try {
            return (short)mh$.invokeExact(lpWndClass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterClassW$MH() {
        return RuntimeHelper.requireNonNull(constants$1195.const$4,"RegisterClassW");
    }
    /**
     * {@snippet :
     * ATOM RegisterClassW(const WNDCLASSW* lpWndClass);
     * }
     */
    public static short RegisterClassW(MemorySegment lpWndClass) {
        var mh$ = RegisterClassW$MH();
        try {
            return (short)mh$.invokeExact(lpWndClass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnregisterClassA$MH() {
        return RuntimeHelper.requireNonNull(constants$1195.const$5,"UnregisterClassA");
    }
    /**
     * {@snippet :
     * BOOL UnregisterClassA(LPCSTR lpClassName, HINSTANCE hInstance);
     * }
     */
    public static int UnregisterClassA(MemorySegment lpClassName, MemorySegment hInstance) {
        var mh$ = UnregisterClassA$MH();
        try {
            return (int)mh$.invokeExact(lpClassName, hInstance);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnregisterClassW$MH() {
        return RuntimeHelper.requireNonNull(constants$1196.const$0,"UnregisterClassW");
    }
    /**
     * {@snippet :
     * BOOL UnregisterClassW(LPCWSTR lpClassName, HINSTANCE hInstance);
     * }
     */
    public static int UnregisterClassW(MemorySegment lpClassName, MemorySegment hInstance) {
        var mh$ = UnregisterClassW$MH();
        try {
            return (int)mh$.invokeExact(lpClassName, hInstance);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetClassInfoA$MH() {
        return RuntimeHelper.requireNonNull(constants$1196.const$1,"GetClassInfoA");
    }
    /**
     * {@snippet :
     * BOOL GetClassInfoA(HINSTANCE hInstance, LPCSTR lpClassName, LPWNDCLASSA lpWndClass);
     * }
     */
    public static int GetClassInfoA(MemorySegment hInstance, MemorySegment lpClassName, MemorySegment lpWndClass) {
        var mh$ = GetClassInfoA$MH();
        try {
            return (int)mh$.invokeExact(hInstance, lpClassName, lpWndClass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetClassInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$1196.const$2,"GetClassInfoW");
    }
    /**
     * {@snippet :
     * BOOL GetClassInfoW(HINSTANCE hInstance, LPCWSTR lpClassName, LPWNDCLASSW lpWndClass);
     * }
     */
    public static int GetClassInfoW(MemorySegment hInstance, MemorySegment lpClassName, MemorySegment lpWndClass) {
        var mh$ = GetClassInfoW$MH();
        try {
            return (int)mh$.invokeExact(hInstance, lpClassName, lpWndClass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterClassExA$MH() {
        return RuntimeHelper.requireNonNull(constants$1196.const$3,"RegisterClassExA");
    }
    /**
     * {@snippet :
     * ATOM RegisterClassExA(const WNDCLASSEXA*);
     * }
     */
    public static short RegisterClassExA(MemorySegment x0) {
        var mh$ = RegisterClassExA$MH();
        try {
            return (short)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterClassExW$MH() {
        return RuntimeHelper.requireNonNull(constants$1196.const$4,"RegisterClassExW");
    }
    /**
     * {@snippet :
     * ATOM RegisterClassExW(const WNDCLASSEXW*);
     * }
     */
    public static short RegisterClassExW(MemorySegment x0) {
        var mh$ = RegisterClassExW$MH();
        try {
            return (short)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetClassInfoExA$MH() {
        return RuntimeHelper.requireNonNull(constants$1196.const$5,"GetClassInfoExA");
    }
    /**
     * {@snippet :
     * BOOL GetClassInfoExA(HINSTANCE hInstance, LPCSTR lpszClass, LPWNDCLASSEXA lpwcx);
     * }
     */
    public static int GetClassInfoExA(MemorySegment hInstance, MemorySegment lpszClass, MemorySegment lpwcx) {
        var mh$ = GetClassInfoExA$MH();
        try {
            return (int)mh$.invokeExact(hInstance, lpszClass, lpwcx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetClassInfoExW$MH() {
        return RuntimeHelper.requireNonNull(constants$1197.const$0,"GetClassInfoExW");
    }
    /**
     * {@snippet :
     * BOOL GetClassInfoExW(HINSTANCE hInstance, LPCWSTR lpszClass, LPWNDCLASSEXW lpwcx);
     * }
     */
    public static int GetClassInfoExW(MemorySegment hInstance, MemorySegment lpszClass, MemorySegment lpwcx) {
        var mh$ = GetClassInfoExW$MH();
        try {
            return (int)mh$.invokeExact(hInstance, lpszClass, lpwcx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateWindowExA$MH() {
        return RuntimeHelper.requireNonNull(constants$1197.const$4,"CreateWindowExA");
    }
    /**
     * {@snippet :
     * HWND CreateWindowExA(DWORD dwExStyle, LPCSTR lpClassName, LPCSTR lpWindowName, DWORD dwStyle, int X, int Y, int nWidth, int nHeight, HWND hWndParent, HMENU hMenu, HINSTANCE hInstance, LPVOID lpParam);
     * }
     */
    public static MemorySegment CreateWindowExA(int dwExStyle, MemorySegment lpClassName, MemorySegment lpWindowName, int dwStyle, int X, int Y, int nWidth, int nHeight, MemorySegment hWndParent, MemorySegment hMenu, MemorySegment hInstance, MemorySegment lpParam) {
        var mh$ = CreateWindowExA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(dwExStyle, lpClassName, lpWindowName, dwStyle, X, Y, nWidth, nHeight, hWndParent, hMenu, hInstance, lpParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateWindowExW$MH() {
        return RuntimeHelper.requireNonNull(constants$1197.const$5,"CreateWindowExW");
    }
    /**
     * {@snippet :
     * HWND CreateWindowExW(DWORD dwExStyle, LPCWSTR lpClassName, LPCWSTR lpWindowName, DWORD dwStyle, int X, int Y, int nWidth, int nHeight, HWND hWndParent, HMENU hMenu, HINSTANCE hInstance, LPVOID lpParam);
     * }
     */
    public static MemorySegment CreateWindowExW(int dwExStyle, MemorySegment lpClassName, MemorySegment lpWindowName, int dwStyle, int X, int Y, int nWidth, int nHeight, MemorySegment hWndParent, MemorySegment hMenu, MemorySegment hInstance, MemorySegment lpParam) {
        var mh$ = CreateWindowExW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(dwExStyle, lpClassName, lpWindowName, dwStyle, X, Y, nWidth, nHeight, hWndParent, hMenu, hInstance, lpParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$1198.const$0,"IsWindow");
    }
    /**
     * {@snippet :
     * BOOL IsWindow(HWND hWnd);
     * }
     */
    public static int IsWindow(MemorySegment hWnd) {
        var mh$ = IsWindow$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$1198.const$1,"IsMenu");
    }
    /**
     * {@snippet :
     * BOOL IsMenu(HMENU hMenu);
     * }
     */
    public static int IsMenu(MemorySegment hMenu) {
        var mh$ = IsMenu$MH();
        try {
            return (int)mh$.invokeExact(hMenu);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsChild$MH() {
        return RuntimeHelper.requireNonNull(constants$1198.const$2,"IsChild");
    }
    /**
     * {@snippet :
     * BOOL IsChild(HWND hWndParent, HWND hWnd);
     * }
     */
    public static int IsChild(MemorySegment hWndParent, MemorySegment hWnd) {
        var mh$ = IsChild$MH();
        try {
            return (int)mh$.invokeExact(hWndParent, hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DestroyWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$1198.const$3,"DestroyWindow");
    }
    /**
     * {@snippet :
     * BOOL DestroyWindow(HWND hWnd);
     * }
     */
    public static int DestroyWindow(MemorySegment hWnd) {
        var mh$ = DestroyWindow$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ShowWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$1198.const$4,"ShowWindow");
    }
    /**
     * {@snippet :
     * BOOL ShowWindow(HWND hWnd, int nCmdShow);
     * }
     */
    public static int ShowWindow(MemorySegment hWnd, int nCmdShow) {
        var mh$ = ShowWindow$MH();
        try {
            return (int)mh$.invokeExact(hWnd, nCmdShow);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AnimateWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$1198.const$5,"AnimateWindow");
    }
    /**
     * {@snippet :
     * BOOL AnimateWindow(HWND hWnd, DWORD dwTime, DWORD dwFlags);
     * }
     */
    public static int AnimateWindow(MemorySegment hWnd, int dwTime, int dwFlags) {
        var mh$ = AnimateWindow$MH();
        try {
            return (int)mh$.invokeExact(hWnd, dwTime, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UpdateLayeredWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$1199.const$1,"UpdateLayeredWindow");
    }
    /**
     * {@snippet :
     * BOOL UpdateLayeredWindow(HWND hWnd, HDC hdcDst, POINT* pptDst, SIZE* psize, HDC hdcSrc, POINT* pptSrc, COLORREF crKey, BLENDFUNCTION* pblend, DWORD dwFlags);
     * }
     */
    public static int UpdateLayeredWindow(MemorySegment hWnd, MemorySegment hdcDst, MemorySegment pptDst, MemorySegment psize, MemorySegment hdcSrc, MemorySegment pptSrc, int crKey, MemorySegment pblend, int dwFlags) {
        var mh$ = UpdateLayeredWindow$MH();
        try {
            return (int)mh$.invokeExact(hWnd, hdcDst, pptDst, psize, hdcSrc, pptSrc, crKey, pblend, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagUPDATELAYEREDWINDOWINFO* PUPDATELAYEREDWINDOWINFO;
     * }
     */
    public static final AddressLayout PUPDATELAYEREDWINDOWINFO = RuntimeHelper.POINTER;
    public static MethodHandle UpdateLayeredWindowIndirect$MH() {
        return RuntimeHelper.requireNonNull(constants$1201.const$1,"UpdateLayeredWindowIndirect");
    }
    /**
     * {@snippet :
     * BOOL UpdateLayeredWindowIndirect(HWND hWnd, const UPDATELAYEREDWINDOWINFO* pULWInfo);
     * }
     */
    public static int UpdateLayeredWindowIndirect(MemorySegment hWnd, MemorySegment pULWInfo) {
        var mh$ = UpdateLayeredWindowIndirect$MH();
        try {
            return (int)mh$.invokeExact(hWnd, pULWInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLayeredWindowAttributes$MH() {
        return RuntimeHelper.requireNonNull(constants$1201.const$2,"GetLayeredWindowAttributes");
    }
    /**
     * {@snippet :
     * BOOL GetLayeredWindowAttributes(HWND hwnd, COLORREF* pcrKey, BYTE* pbAlpha, DWORD* pdwFlags);
     * }
     */
    public static int GetLayeredWindowAttributes(MemorySegment hwnd, MemorySegment pcrKey, MemorySegment pbAlpha, MemorySegment pdwFlags) {
        var mh$ = GetLayeredWindowAttributes$MH();
        try {
            return (int)mh$.invokeExact(hwnd, pcrKey, pbAlpha, pdwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PrintWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$1201.const$3,"PrintWindow");
    }
    /**
     * {@snippet :
     * BOOL PrintWindow(HWND hwnd, HDC hdcBlt, UINT nFlags);
     * }
     */
    public static int PrintWindow(MemorySegment hwnd, MemorySegment hdcBlt, int nFlags) {
        var mh$ = PrintWindow$MH();
        try {
            return (int)mh$.invokeExact(hwnd, hdcBlt, nFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetLayeredWindowAttributes$MH() {
        return RuntimeHelper.requireNonNull(constants$1201.const$5,"SetLayeredWindowAttributes");
    }
    /**
     * {@snippet :
     * BOOL SetLayeredWindowAttributes(HWND hwnd, COLORREF crKey, BYTE bAlpha, DWORD dwFlags);
     * }
     */
    public static int SetLayeredWindowAttributes(MemorySegment hwnd, int crKey, byte bAlpha, int dwFlags) {
        var mh$ = SetLayeredWindowAttributes$MH();
        try {
            return (int)mh$.invokeExact(hwnd, crKey, bAlpha, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ShowWindowAsync$MH() {
        return RuntimeHelper.requireNonNull(constants$1202.const$0,"ShowWindowAsync");
    }
    /**
     * {@snippet :
     * BOOL ShowWindowAsync(HWND hWnd, int nCmdShow);
     * }
     */
    public static int ShowWindowAsync(MemorySegment hWnd, int nCmdShow) {
        var mh$ = ShowWindowAsync$MH();
        try {
            return (int)mh$.invokeExact(hWnd, nCmdShow);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FlashWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$1202.const$1,"FlashWindow");
    }
    /**
     * {@snippet :
     * BOOL FlashWindow(HWND hWnd, BOOL bInvert);
     * }
     */
    public static int FlashWindow(MemorySegment hWnd, int bInvert) {
        var mh$ = FlashWindow$MH();
        try {
            return (int)mh$.invokeExact(hWnd, bInvert);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct * PFLASHWINFO;
     * }
     */
    public static final AddressLayout PFLASHWINFO = RuntimeHelper.POINTER;
    public static MethodHandle FlashWindowEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1203.const$2,"FlashWindowEx");
    }
    /**
     * {@snippet :
     * BOOL FlashWindowEx(PFLASHWINFO pfwi);
     * }
     */
    public static int FlashWindowEx(MemorySegment pfwi) {
        var mh$ = FlashWindowEx$MH();
        try {
            return (int)mh$.invokeExact(pfwi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ShowOwnedPopups$MH() {
        return RuntimeHelper.requireNonNull(constants$1203.const$3,"ShowOwnedPopups");
    }
    /**
     * {@snippet :
     * BOOL ShowOwnedPopups(HWND hWnd, BOOL fShow);
     * }
     */
    public static int ShowOwnedPopups(MemorySegment hWnd, int fShow) {
        var mh$ = ShowOwnedPopups$MH();
        try {
            return (int)mh$.invokeExact(hWnd, fShow);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenIcon$MH() {
        return RuntimeHelper.requireNonNull(constants$1203.const$4,"OpenIcon");
    }
    /**
     * {@snippet :
     * BOOL OpenIcon(HWND hWnd);
     * }
     */
    public static int OpenIcon(MemorySegment hWnd) {
        var mh$ = OpenIcon$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CloseWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$1203.const$5,"CloseWindow");
    }
    /**
     * {@snippet :
     * BOOL CloseWindow(HWND hWnd);
     * }
     */
    public static int CloseWindow(MemorySegment hWnd) {
        var mh$ = CloseWindow$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MoveWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$1204.const$0,"MoveWindow");
    }
    /**
     * {@snippet :
     * BOOL MoveWindow(HWND hWnd, int X, int Y, int nWidth, int nHeight, BOOL bRepaint);
     * }
     */
    public static int MoveWindow(MemorySegment hWnd, int X, int Y, int nWidth, int nHeight, int bRepaint) {
        var mh$ = MoveWindow$MH();
        try {
            return (int)mh$.invokeExact(hWnd, X, Y, nWidth, nHeight, bRepaint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowPos$MH() {
        return RuntimeHelper.requireNonNull(constants$1204.const$2,"SetWindowPos");
    }
    /**
     * {@snippet :
     * BOOL SetWindowPos(HWND hWnd, HWND hWndInsertAfter, int X, int Y, int cx, int cy, UINT uFlags);
     * }
     */
    public static int SetWindowPos(MemorySegment hWnd, MemorySegment hWndInsertAfter, int X, int Y, int cx, int cy, int uFlags) {
        var mh$ = SetWindowPos$MH();
        try {
            return (int)mh$.invokeExact(hWnd, hWndInsertAfter, X, Y, cx, cy, uFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowPlacement$MH() {
        return RuntimeHelper.requireNonNull(constants$1204.const$3,"GetWindowPlacement");
    }
    /**
     * {@snippet :
     * BOOL GetWindowPlacement(HWND hWnd, WINDOWPLACEMENT* lpwndpl);
     * }
     */
    public static int GetWindowPlacement(MemorySegment hWnd, MemorySegment lpwndpl) {
        var mh$ = GetWindowPlacement$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpwndpl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowPlacement$MH() {
        return RuntimeHelper.requireNonNull(constants$1204.const$4,"SetWindowPlacement");
    }
    /**
     * {@snippet :
     * BOOL SetWindowPlacement(HWND hWnd, const WINDOWPLACEMENT* lpwndpl);
     * }
     */
    public static int SetWindowPlacement(MemorySegment hWnd, MemorySegment lpwndpl) {
        var mh$ = SetWindowPlacement$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpwndpl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowDisplayAffinity$MH() {
        return RuntimeHelper.requireNonNull(constants$1204.const$5,"GetWindowDisplayAffinity");
    }
    /**
     * {@snippet :
     * BOOL GetWindowDisplayAffinity(HWND hWnd, DWORD* pdwAffinity);
     * }
     */
    public static int GetWindowDisplayAffinity(MemorySegment hWnd, MemorySegment pdwAffinity) {
        var mh$ = GetWindowDisplayAffinity$MH();
        try {
            return (int)mh$.invokeExact(hWnd, pdwAffinity);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowDisplayAffinity$MH() {
        return RuntimeHelper.requireNonNull(constants$1205.const$0,"SetWindowDisplayAffinity");
    }
    /**
     * {@snippet :
     * BOOL SetWindowDisplayAffinity(HWND hWnd, DWORD dwAffinity);
     * }
     */
    public static int SetWindowDisplayAffinity(MemorySegment hWnd, int dwAffinity) {
        var mh$ = SetWindowDisplayAffinity$MH();
        try {
            return (int)mh$.invokeExact(hWnd, dwAffinity);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BeginDeferWindowPos$MH() {
        return RuntimeHelper.requireNonNull(constants$1205.const$1,"BeginDeferWindowPos");
    }
    /**
     * {@snippet :
     * HDWP BeginDeferWindowPos(int nNumWindows);
     * }
     */
    public static MemorySegment BeginDeferWindowPos(int nNumWindows) {
        var mh$ = BeginDeferWindowPos$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(nNumWindows);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeferWindowPos$MH() {
        return RuntimeHelper.requireNonNull(constants$1205.const$3,"DeferWindowPos");
    }
    /**
     * {@snippet :
     * HDWP DeferWindowPos(HDWP hWinPosInfo, HWND hWnd, HWND hWndInsertAfter, int x, int y, int cx, int cy, UINT uFlags);
     * }
     */
    public static MemorySegment DeferWindowPos(MemorySegment hWinPosInfo, MemorySegment hWnd, MemorySegment hWndInsertAfter, int x, int y, int cx, int cy, int uFlags) {
        var mh$ = DeferWindowPos$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hWinPosInfo, hWnd, hWndInsertAfter, x, y, cx, cy, uFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EndDeferWindowPos$MH() {
        return RuntimeHelper.requireNonNull(constants$1205.const$4,"EndDeferWindowPos");
    }
    /**
     * {@snippet :
     * BOOL EndDeferWindowPos(HDWP hWinPosInfo);
     * }
     */
    public static int EndDeferWindowPos(MemorySegment hWinPosInfo) {
        var mh$ = EndDeferWindowPos$MH();
        try {
            return (int)mh$.invokeExact(hWinPosInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsWindowVisible$MH() {
        return RuntimeHelper.requireNonNull(constants$1205.const$5,"IsWindowVisible");
    }
    /**
     * {@snippet :
     * BOOL IsWindowVisible(HWND hWnd);
     * }
     */
    public static int IsWindowVisible(MemorySegment hWnd) {
        var mh$ = IsWindowVisible$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsIconic$MH() {
        return RuntimeHelper.requireNonNull(constants$1206.const$0,"IsIconic");
    }
    /**
     * {@snippet :
     * BOOL IsIconic(HWND hWnd);
     * }
     */
    public static int IsIconic(MemorySegment hWnd) {
        var mh$ = IsIconic$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AnyPopup$MH() {
        return RuntimeHelper.requireNonNull(constants$1206.const$1,"AnyPopup");
    }
    /**
     * {@snippet :
     * BOOL AnyPopup();
     * }
     */
    public static int AnyPopup() {
        var mh$ = AnyPopup$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BringWindowToTop$MH() {
        return RuntimeHelper.requireNonNull(constants$1206.const$2,"BringWindowToTop");
    }
    /**
     * {@snippet :
     * BOOL BringWindowToTop(HWND hWnd);
     * }
     */
    public static int BringWindowToTop(MemorySegment hWnd) {
        var mh$ = BringWindowToTop$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsZoomed$MH() {
        return RuntimeHelper.requireNonNull(constants$1206.const$3,"IsZoomed");
    }
    /**
     * {@snippet :
     * BOOL IsZoomed(HWND hWnd);
     * }
     */
    public static int IsZoomed(MemorySegment hWnd) {
        var mh$ = IsZoomed$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct * LPDLGTEMPLATEA;
     * }
     */
    public static final AddressLayout LPDLGTEMPLATEA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct * LPDLGTEMPLATEW;
     * }
     */
    public static final AddressLayout LPDLGTEMPLATEW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct * LPDLGTEMPLATE;
     * }
     */
    public static final AddressLayout LPDLGTEMPLATE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct * LPCDLGTEMPLATEA;
     * }
     */
    public static final AddressLayout LPCDLGTEMPLATEA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct * LPCDLGTEMPLATEW;
     * }
     */
    public static final AddressLayout LPCDLGTEMPLATEW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct * LPCDLGTEMPLATE;
     * }
     */
    public static final AddressLayout LPCDLGTEMPLATE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct * PDLGITEMTEMPLATEA;
     * }
     */
    public static final AddressLayout PDLGITEMTEMPLATEA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct * PDLGITEMTEMPLATEW;
     * }
     */
    public static final AddressLayout PDLGITEMTEMPLATEW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct * PDLGITEMTEMPLATE;
     * }
     */
    public static final AddressLayout PDLGITEMTEMPLATE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct * LPDLGITEMTEMPLATEA;
     * }
     */
    public static final AddressLayout LPDLGITEMTEMPLATEA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct * LPDLGITEMTEMPLATEW;
     * }
     */
    public static final AddressLayout LPDLGITEMTEMPLATEW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct * LPDLGITEMTEMPLATE;
     * }
     */
    public static final AddressLayout LPDLGITEMTEMPLATE = RuntimeHelper.POINTER;
    public static MethodHandle CreateDialogParamA$MH() {
        return RuntimeHelper.requireNonNull(constants$1209.const$3,"CreateDialogParamA");
    }
    /**
     * {@snippet :
     * HWND CreateDialogParamA(HINSTANCE hInstance, LPCSTR lpTemplateName, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam);
     * }
     */
    public static MemorySegment CreateDialogParamA(MemorySegment hInstance, MemorySegment lpTemplateName, MemorySegment hWndParent, MemorySegment lpDialogFunc, long dwInitParam) {
        var mh$ = CreateDialogParamA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hInstance, lpTemplateName, hWndParent, lpDialogFunc, dwInitParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDialogParamW$MH() {
        return RuntimeHelper.requireNonNull(constants$1209.const$4,"CreateDialogParamW");
    }
    /**
     * {@snippet :
     * HWND CreateDialogParamW(HINSTANCE hInstance, LPCWSTR lpTemplateName, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam);
     * }
     */
    public static MemorySegment CreateDialogParamW(MemorySegment hInstance, MemorySegment lpTemplateName, MemorySegment hWndParent, MemorySegment lpDialogFunc, long dwInitParam) {
        var mh$ = CreateDialogParamW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hInstance, lpTemplateName, hWndParent, lpDialogFunc, dwInitParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDialogIndirectParamA$MH() {
        return RuntimeHelper.requireNonNull(constants$1209.const$5,"CreateDialogIndirectParamA");
    }
    /**
     * {@snippet :
     * HWND CreateDialogIndirectParamA(HINSTANCE hInstance, LPCDLGTEMPLATEA lpTemplate, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam);
     * }
     */
    public static MemorySegment CreateDialogIndirectParamA(MemorySegment hInstance, MemorySegment lpTemplate, MemorySegment hWndParent, MemorySegment lpDialogFunc, long dwInitParam) {
        var mh$ = CreateDialogIndirectParamA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hInstance, lpTemplate, hWndParent, lpDialogFunc, dwInitParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDialogIndirectParamW$MH() {
        return RuntimeHelper.requireNonNull(constants$1210.const$0,"CreateDialogIndirectParamW");
    }
    /**
     * {@snippet :
     * HWND CreateDialogIndirectParamW(HINSTANCE hInstance, LPCDLGTEMPLATEW lpTemplate, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam);
     * }
     */
    public static MemorySegment CreateDialogIndirectParamW(MemorySegment hInstance, MemorySegment lpTemplate, MemorySegment hWndParent, MemorySegment lpDialogFunc, long dwInitParam) {
        var mh$ = CreateDialogIndirectParamW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hInstance, lpTemplate, hWndParent, lpDialogFunc, dwInitParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DialogBoxParamA$MH() {
        return RuntimeHelper.requireNonNull(constants$1210.const$2,"DialogBoxParamA");
    }
    /**
     * {@snippet :
     * INT_PTR DialogBoxParamA(HINSTANCE hInstance, LPCSTR lpTemplateName, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam);
     * }
     */
    public static long DialogBoxParamA(MemorySegment hInstance, MemorySegment lpTemplateName, MemorySegment hWndParent, MemorySegment lpDialogFunc, long dwInitParam) {
        var mh$ = DialogBoxParamA$MH();
        try {
            return (long)mh$.invokeExact(hInstance, lpTemplateName, hWndParent, lpDialogFunc, dwInitParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DialogBoxParamW$MH() {
        return RuntimeHelper.requireNonNull(constants$1210.const$3,"DialogBoxParamW");
    }
    /**
     * {@snippet :
     * INT_PTR DialogBoxParamW(HINSTANCE hInstance, LPCWSTR lpTemplateName, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam);
     * }
     */
    public static long DialogBoxParamW(MemorySegment hInstance, MemorySegment lpTemplateName, MemorySegment hWndParent, MemorySegment lpDialogFunc, long dwInitParam) {
        var mh$ = DialogBoxParamW$MH();
        try {
            return (long)mh$.invokeExact(hInstance, lpTemplateName, hWndParent, lpDialogFunc, dwInitParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DialogBoxIndirectParamA$MH() {
        return RuntimeHelper.requireNonNull(constants$1210.const$4,"DialogBoxIndirectParamA");
    }
    /**
     * {@snippet :
     * INT_PTR DialogBoxIndirectParamA(HINSTANCE hInstance, LPCDLGTEMPLATEA hDialogTemplate, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam);
     * }
     */
    public static long DialogBoxIndirectParamA(MemorySegment hInstance, MemorySegment hDialogTemplate, MemorySegment hWndParent, MemorySegment lpDialogFunc, long dwInitParam) {
        var mh$ = DialogBoxIndirectParamA$MH();
        try {
            return (long)mh$.invokeExact(hInstance, hDialogTemplate, hWndParent, lpDialogFunc, dwInitParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DialogBoxIndirectParamW$MH() {
        return RuntimeHelper.requireNonNull(constants$1210.const$5,"DialogBoxIndirectParamW");
    }
    /**
     * {@snippet :
     * INT_PTR DialogBoxIndirectParamW(HINSTANCE hInstance, LPCDLGTEMPLATEW hDialogTemplate, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam);
     * }
     */
    public static long DialogBoxIndirectParamW(MemorySegment hInstance, MemorySegment hDialogTemplate, MemorySegment hWndParent, MemorySegment lpDialogFunc, long dwInitParam) {
        var mh$ = DialogBoxIndirectParamW$MH();
        try {
            return (long)mh$.invokeExact(hInstance, hDialogTemplate, hWndParent, lpDialogFunc, dwInitParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EndDialog$MH() {
        return RuntimeHelper.requireNonNull(constants$1211.const$0,"EndDialog");
    }
    /**
     * {@snippet :
     * BOOL EndDialog(HWND hDlg, INT_PTR nResult);
     * }
     */
    public static int EndDialog(MemorySegment hDlg, long nResult) {
        var mh$ = EndDialog$MH();
        try {
            return (int)mh$.invokeExact(hDlg, nResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDlgItem$MH() {
        return RuntimeHelper.requireNonNull(constants$1211.const$1,"GetDlgItem");
    }
    /**
     * {@snippet :
     * HWND GetDlgItem(HWND hDlg, int nIDDlgItem);
     * }
     */
    public static MemorySegment GetDlgItem(MemorySegment hDlg, int nIDDlgItem) {
        var mh$ = GetDlgItem$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hDlg, nIDDlgItem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetDlgItemInt$MH() {
        return RuntimeHelper.requireNonNull(constants$1211.const$2,"SetDlgItemInt");
    }
    /**
     * {@snippet :
     * BOOL SetDlgItemInt(HWND hDlg, int nIDDlgItem, UINT uValue, BOOL bSigned);
     * }
     */
    public static int SetDlgItemInt(MemorySegment hDlg, int nIDDlgItem, int uValue, int bSigned) {
        var mh$ = SetDlgItemInt$MH();
        try {
            return (int)mh$.invokeExact(hDlg, nIDDlgItem, uValue, bSigned);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDlgItemInt$MH() {
        return RuntimeHelper.requireNonNull(constants$1211.const$3,"GetDlgItemInt");
    }
    /**
     * {@snippet :
     * UINT GetDlgItemInt(HWND hDlg, int nIDDlgItem, BOOL* lpTranslated, BOOL bSigned);
     * }
     */
    public static int GetDlgItemInt(MemorySegment hDlg, int nIDDlgItem, MemorySegment lpTranslated, int bSigned) {
        var mh$ = GetDlgItemInt$MH();
        try {
            return (int)mh$.invokeExact(hDlg, nIDDlgItem, lpTranslated, bSigned);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetDlgItemTextA$MH() {
        return RuntimeHelper.requireNonNull(constants$1211.const$4,"SetDlgItemTextA");
    }
    /**
     * {@snippet :
     * BOOL SetDlgItemTextA(HWND hDlg, int nIDDlgItem, LPCSTR lpString);
     * }
     */
    public static int SetDlgItemTextA(MemorySegment hDlg, int nIDDlgItem, MemorySegment lpString) {
        var mh$ = SetDlgItemTextA$MH();
        try {
            return (int)mh$.invokeExact(hDlg, nIDDlgItem, lpString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetDlgItemTextW$MH() {
        return RuntimeHelper.requireNonNull(constants$1211.const$5,"SetDlgItemTextW");
    }
    /**
     * {@snippet :
     * BOOL SetDlgItemTextW(HWND hDlg, int nIDDlgItem, LPCWSTR lpString);
     * }
     */
    public static int SetDlgItemTextW(MemorySegment hDlg, int nIDDlgItem, MemorySegment lpString) {
        var mh$ = SetDlgItemTextW$MH();
        try {
            return (int)mh$.invokeExact(hDlg, nIDDlgItem, lpString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDlgItemTextA$MH() {
        return RuntimeHelper.requireNonNull(constants$1212.const$0,"GetDlgItemTextA");
    }
    /**
     * {@snippet :
     * UINT GetDlgItemTextA(HWND hDlg, int nIDDlgItem, LPSTR lpString, int cchMax);
     * }
     */
    public static int GetDlgItemTextA(MemorySegment hDlg, int nIDDlgItem, MemorySegment lpString, int cchMax) {
        var mh$ = GetDlgItemTextA$MH();
        try {
            return (int)mh$.invokeExact(hDlg, nIDDlgItem, lpString, cchMax);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDlgItemTextW$MH() {
        return RuntimeHelper.requireNonNull(constants$1212.const$1,"GetDlgItemTextW");
    }
    /**
     * {@snippet :
     * UINT GetDlgItemTextW(HWND hDlg, int nIDDlgItem, LPWSTR lpString, int cchMax);
     * }
     */
    public static int GetDlgItemTextW(MemorySegment hDlg, int nIDDlgItem, MemorySegment lpString, int cchMax) {
        var mh$ = GetDlgItemTextW$MH();
        try {
            return (int)mh$.invokeExact(hDlg, nIDDlgItem, lpString, cchMax);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CheckDlgButton$MH() {
        return RuntimeHelper.requireNonNull(constants$1212.const$2,"CheckDlgButton");
    }
    /**
     * {@snippet :
     * BOOL CheckDlgButton(HWND hDlg, int nIDButton, UINT uCheck);
     * }
     */
    public static int CheckDlgButton(MemorySegment hDlg, int nIDButton, int uCheck) {
        var mh$ = CheckDlgButton$MH();
        try {
            return (int)mh$.invokeExact(hDlg, nIDButton, uCheck);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CheckRadioButton$MH() {
        return RuntimeHelper.requireNonNull(constants$1212.const$3,"CheckRadioButton");
    }
    /**
     * {@snippet :
     * BOOL CheckRadioButton(HWND hDlg, int nIDFirstButton, int nIDLastButton, int nIDCheckButton);
     * }
     */
    public static int CheckRadioButton(MemorySegment hDlg, int nIDFirstButton, int nIDLastButton, int nIDCheckButton) {
        var mh$ = CheckRadioButton$MH();
        try {
            return (int)mh$.invokeExact(hDlg, nIDFirstButton, nIDLastButton, nIDCheckButton);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsDlgButtonChecked$MH() {
        return RuntimeHelper.requireNonNull(constants$1212.const$4,"IsDlgButtonChecked");
    }
    /**
     * {@snippet :
     * UINT IsDlgButtonChecked(HWND hDlg, int nIDButton);
     * }
     */
    public static int IsDlgButtonChecked(MemorySegment hDlg, int nIDButton) {
        var mh$ = IsDlgButtonChecked$MH();
        try {
            return (int)mh$.invokeExact(hDlg, nIDButton);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SendDlgItemMessageA$MH() {
        return RuntimeHelper.requireNonNull(constants$1212.const$6,"SendDlgItemMessageA");
    }
    /**
     * {@snippet :
     * LRESULT SendDlgItemMessageA(HWND hDlg, int nIDDlgItem, UINT Msg, WPARAM wParam, LPARAM lParam);
     * }
     */
    public static long SendDlgItemMessageA(MemorySegment hDlg, int nIDDlgItem, int Msg, long wParam, long lParam) {
        var mh$ = SendDlgItemMessageA$MH();
        try {
            return (long)mh$.invokeExact(hDlg, nIDDlgItem, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SendDlgItemMessageW$MH() {
        return RuntimeHelper.requireNonNull(constants$1213.const$0,"SendDlgItemMessageW");
    }
    /**
     * {@snippet :
     * LRESULT SendDlgItemMessageW(HWND hDlg, int nIDDlgItem, UINT Msg, WPARAM wParam, LPARAM lParam);
     * }
     */
    public static long SendDlgItemMessageW(MemorySegment hDlg, int nIDDlgItem, int Msg, long wParam, long lParam) {
        var mh$ = SendDlgItemMessageW$MH();
        try {
            return (long)mh$.invokeExact(hDlg, nIDDlgItem, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNextDlgGroupItem$MH() {
        return RuntimeHelper.requireNonNull(constants$1213.const$1,"GetNextDlgGroupItem");
    }
    /**
     * {@snippet :
     * HWND GetNextDlgGroupItem(HWND hDlg, HWND hCtl, BOOL bPrevious);
     * }
     */
    public static MemorySegment GetNextDlgGroupItem(MemorySegment hDlg, MemorySegment hCtl, int bPrevious) {
        var mh$ = GetNextDlgGroupItem$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hDlg, hCtl, bPrevious);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNextDlgTabItem$MH() {
        return RuntimeHelper.requireNonNull(constants$1213.const$2,"GetNextDlgTabItem");
    }
    /**
     * {@snippet :
     * HWND GetNextDlgTabItem(HWND hDlg, HWND hCtl, BOOL bPrevious);
     * }
     */
    public static MemorySegment GetNextDlgTabItem(MemorySegment hDlg, MemorySegment hCtl, int bPrevious) {
        var mh$ = GetNextDlgTabItem$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hDlg, hCtl, bPrevious);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDlgCtrlID$MH() {
        return RuntimeHelper.requireNonNull(constants$1213.const$3,"GetDlgCtrlID");
    }
    /**
     * {@snippet :
     * int GetDlgCtrlID(HWND hWnd);
     * }
     */
    public static int GetDlgCtrlID(MemorySegment hWnd) {
        var mh$ = GetDlgCtrlID$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDialogBaseUnits$MH() {
        return RuntimeHelper.requireNonNull(constants$1213.const$4,"GetDialogBaseUnits");
    }
    /**
     * {@snippet :
     * long GetDialogBaseUnits();
     * }
     */
    public static int GetDialogBaseUnits() {
        var mh$ = GetDialogBaseUnits$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DefDlgProcA$MH() {
        return RuntimeHelper.requireNonNull(constants$1213.const$5,"DefDlgProcA");
    }
    /**
     * {@snippet :
     * LRESULT DefDlgProcA(HWND hDlg, UINT Msg, WPARAM wParam, LPARAM lParam);
     * }
     */
    public static long DefDlgProcA(MemorySegment hDlg, int Msg, long wParam, long lParam) {
        var mh$ = DefDlgProcA$MH();
        try {
            return (long)mh$.invokeExact(hDlg, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DefDlgProcW$MH() {
        return RuntimeHelper.requireNonNull(constants$1214.const$0,"DefDlgProcW");
    }
    /**
     * {@snippet :
     * LRESULT DefDlgProcW(HWND hDlg, UINT Msg, WPARAM wParam, LPARAM lParam);
     * }
     */
    public static long DefDlgProcW(MemorySegment hDlg, int Msg, long wParam, long lParam) {
        var mh$ = DefDlgProcW$MH();
        try {
            return (long)mh$.invokeExact(hDlg, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS.DCDC_DEFAULT = 0;
     * }
     */
    public static int DCDC_DEFAULT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS.DCDC_DISABLE_FONT_UPDATE = 1;
     * }
     */
    public static int DCDC_DISABLE_FONT_UPDATE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS.DCDC_DISABLE_RELAYOUT = 2;
     * }
     */
    public static int DCDC_DISABLE_RELAYOUT() {
        return (int)2L;
    }
    public static MethodHandle SetDialogControlDpiChangeBehavior$MH() {
        return RuntimeHelper.requireNonNull(constants$1214.const$1,"SetDialogControlDpiChangeBehavior");
    }
    /**
     * {@snippet :
     * BOOL SetDialogControlDpiChangeBehavior(HWND hWnd, DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS mask, DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS values);
     * }
     */
    public static int SetDialogControlDpiChangeBehavior(MemorySegment hWnd, int mask, int values) {
        var mh$ = SetDialogControlDpiChangeBehavior$MH();
        try {
            return (int)mh$.invokeExact(hWnd, mask, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDialogControlDpiChangeBehavior$MH() {
        return RuntimeHelper.requireNonNull(constants$1214.const$2,"GetDialogControlDpiChangeBehavior");
    }
    /**
     * {@snippet :
     * DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS GetDialogControlDpiChangeBehavior(HWND hWnd);
     * }
     */
    public static int GetDialogControlDpiChangeBehavior(MemorySegment hWnd) {
        var mh$ = GetDialogControlDpiChangeBehavior$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum DIALOG_DPI_CHANGE_BEHAVIORS.DDC_DEFAULT = 0;
     * }
     */
    public static int DDC_DEFAULT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum DIALOG_DPI_CHANGE_BEHAVIORS.DDC_DISABLE_ALL = 1;
     * }
     */
    public static int DDC_DISABLE_ALL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum DIALOG_DPI_CHANGE_BEHAVIORS.DDC_DISABLE_RESIZE = 2;
     * }
     */
    public static int DDC_DISABLE_RESIZE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum DIALOG_DPI_CHANGE_BEHAVIORS.DDC_DISABLE_CONTROL_RELAYOUT = 4;
     * }
     */
    public static int DDC_DISABLE_CONTROL_RELAYOUT() {
        return (int)4L;
    }
    public static MethodHandle SetDialogDpiChangeBehavior$MH() {
        return RuntimeHelper.requireNonNull(constants$1214.const$3,"SetDialogDpiChangeBehavior");
    }
    /**
     * {@snippet :
     * BOOL SetDialogDpiChangeBehavior(HWND hDlg, DIALOG_DPI_CHANGE_BEHAVIORS mask, DIALOG_DPI_CHANGE_BEHAVIORS values);
     * }
     */
    public static int SetDialogDpiChangeBehavior(MemorySegment hDlg, int mask, int values) {
        var mh$ = SetDialogDpiChangeBehavior$MH();
        try {
            return (int)mh$.invokeExact(hDlg, mask, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDialogDpiChangeBehavior$MH() {
        return RuntimeHelper.requireNonNull(constants$1214.const$4,"GetDialogDpiChangeBehavior");
    }
    /**
     * {@snippet :
     * DIALOG_DPI_CHANGE_BEHAVIORS GetDialogDpiChangeBehavior(HWND hDlg);
     * }
     */
    public static int GetDialogDpiChangeBehavior(MemorySegment hDlg) {
        var mh$ = GetDialogDpiChangeBehavior$MH();
        try {
            return (int)mh$.invokeExact(hDlg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CallMsgFilterA$MH() {
        return RuntimeHelper.requireNonNull(constants$1214.const$5,"CallMsgFilterA");
    }
    /**
     * {@snippet :
     * BOOL CallMsgFilterA(LPMSG lpMsg, int nCode);
     * }
     */
    public static int CallMsgFilterA(MemorySegment lpMsg, int nCode) {
        var mh$ = CallMsgFilterA$MH();
        try {
            return (int)mh$.invokeExact(lpMsg, nCode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CallMsgFilterW$MH() {
        return RuntimeHelper.requireNonNull(constants$1215.const$0,"CallMsgFilterW");
    }
    /**
     * {@snippet :
     * BOOL CallMsgFilterW(LPMSG lpMsg, int nCode);
     * }
     */
    public static int CallMsgFilterW(MemorySegment lpMsg, int nCode) {
        var mh$ = CallMsgFilterW$MH();
        try {
            return (int)mh$.invokeExact(lpMsg, nCode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenClipboard$MH() {
        return RuntimeHelper.requireNonNull(constants$1215.const$1,"OpenClipboard");
    }
    /**
     * {@snippet :
     * BOOL OpenClipboard(HWND hWndNewOwner);
     * }
     */
    public static int OpenClipboard(MemorySegment hWndNewOwner) {
        var mh$ = OpenClipboard$MH();
        try {
            return (int)mh$.invokeExact(hWndNewOwner);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CloseClipboard$MH() {
        return RuntimeHelper.requireNonNull(constants$1215.const$2,"CloseClipboard");
    }
    /**
     * {@snippet :
     * BOOL CloseClipboard();
     * }
     */
    public static int CloseClipboard() {
        var mh$ = CloseClipboard$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetClipboardSequenceNumber$MH() {
        return RuntimeHelper.requireNonNull(constants$1215.const$3,"GetClipboardSequenceNumber");
    }
    /**
     * {@snippet :
     * DWORD GetClipboardSequenceNumber();
     * }
     */
    public static int GetClipboardSequenceNumber() {
        var mh$ = GetClipboardSequenceNumber$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetClipboardOwner$MH() {
        return RuntimeHelper.requireNonNull(constants$1215.const$4,"GetClipboardOwner");
    }
    /**
     * {@snippet :
     * HWND GetClipboardOwner();
     * }
     */
    public static MemorySegment GetClipboardOwner() {
        var mh$ = GetClipboardOwner$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetClipboardViewer$MH() {
        return RuntimeHelper.requireNonNull(constants$1215.const$5,"SetClipboardViewer");
    }
    /**
     * {@snippet :
     * HWND SetClipboardViewer(HWND hWndNewViewer);
     * }
     */
    public static MemorySegment SetClipboardViewer(MemorySegment hWndNewViewer) {
        var mh$ = SetClipboardViewer$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hWndNewViewer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetClipboardViewer$MH() {
        return RuntimeHelper.requireNonNull(constants$1216.const$0,"GetClipboardViewer");
    }
    /**
     * {@snippet :
     * HWND GetClipboardViewer();
     * }
     */
    public static MemorySegment GetClipboardViewer() {
        var mh$ = GetClipboardViewer$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ChangeClipboardChain$MH() {
        return RuntimeHelper.requireNonNull(constants$1216.const$1,"ChangeClipboardChain");
    }
    /**
     * {@snippet :
     * BOOL ChangeClipboardChain(HWND hWndRemove, HWND hWndNewNext);
     * }
     */
    public static int ChangeClipboardChain(MemorySegment hWndRemove, MemorySegment hWndNewNext) {
        var mh$ = ChangeClipboardChain$MH();
        try {
            return (int)mh$.invokeExact(hWndRemove, hWndNewNext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetClipboardData$MH() {
        return RuntimeHelper.requireNonNull(constants$1216.const$2,"SetClipboardData");
    }
    /**
     * {@snippet :
     * HANDLE SetClipboardData(UINT uFormat, HANDLE hMem);
     * }
     */
    public static MemorySegment SetClipboardData(int uFormat, MemorySegment hMem) {
        var mh$ = SetClipboardData$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(uFormat, hMem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetClipboardData$MH() {
        return RuntimeHelper.requireNonNull(constants$1216.const$3,"GetClipboardData");
    }
    /**
     * {@snippet :
     * HANDLE GetClipboardData(UINT uFormat);
     * }
     */
    public static MemorySegment GetClipboardData(int uFormat) {
        var mh$ = GetClipboardData$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(uFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterClipboardFormatA$MH() {
        return RuntimeHelper.requireNonNull(constants$1216.const$4,"RegisterClipboardFormatA");
    }
    /**
     * {@snippet :
     * UINT RegisterClipboardFormatA(LPCSTR lpszFormat);
     * }
     */
    public static int RegisterClipboardFormatA(MemorySegment lpszFormat) {
        var mh$ = RegisterClipboardFormatA$MH();
        try {
            return (int)mh$.invokeExact(lpszFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterClipboardFormatW$MH() {
        return RuntimeHelper.requireNonNull(constants$1216.const$5,"RegisterClipboardFormatW");
    }
    /**
     * {@snippet :
     * UINT RegisterClipboardFormatW(LPCWSTR lpszFormat);
     * }
     */
    public static int RegisterClipboardFormatW(MemorySegment lpszFormat) {
        var mh$ = RegisterClipboardFormatW$MH();
        try {
            return (int)mh$.invokeExact(lpszFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CountClipboardFormats$MH() {
        return RuntimeHelper.requireNonNull(constants$1217.const$0,"CountClipboardFormats");
    }
    /**
     * {@snippet :
     * int CountClipboardFormats();
     * }
     */
    public static int CountClipboardFormats() {
        var mh$ = CountClipboardFormats$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumClipboardFormats$MH() {
        return RuntimeHelper.requireNonNull(constants$1217.const$1,"EnumClipboardFormats");
    }
    /**
     * {@snippet :
     * UINT EnumClipboardFormats(UINT format);
     * }
     */
    public static int EnumClipboardFormats(int format) {
        var mh$ = EnumClipboardFormats$MH();
        try {
            return (int)mh$.invokeExact(format);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetClipboardFormatNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$1217.const$2,"GetClipboardFormatNameA");
    }
    /**
     * {@snippet :
     * int GetClipboardFormatNameA(UINT format, LPSTR lpszFormatName, int cchMaxCount);
     * }
     */
    public static int GetClipboardFormatNameA(int format, MemorySegment lpszFormatName, int cchMaxCount) {
        var mh$ = GetClipboardFormatNameA$MH();
        try {
            return (int)mh$.invokeExact(format, lpszFormatName, cchMaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetClipboardFormatNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$1217.const$3,"GetClipboardFormatNameW");
    }
    /**
     * {@snippet :
     * int GetClipboardFormatNameW(UINT format, LPWSTR lpszFormatName, int cchMaxCount);
     * }
     */
    public static int GetClipboardFormatNameW(int format, MemorySegment lpszFormatName, int cchMaxCount) {
        var mh$ = GetClipboardFormatNameW$MH();
        try {
            return (int)mh$.invokeExact(format, lpszFormatName, cchMaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EmptyClipboard$MH() {
        return RuntimeHelper.requireNonNull(constants$1217.const$4,"EmptyClipboard");
    }
    /**
     * {@snippet :
     * BOOL EmptyClipboard();
     * }
     */
    public static int EmptyClipboard() {
        var mh$ = EmptyClipboard$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsClipboardFormatAvailable$MH() {
        return RuntimeHelper.requireNonNull(constants$1217.const$5,"IsClipboardFormatAvailable");
    }
    /**
     * {@snippet :
     * BOOL IsClipboardFormatAvailable(UINT format);
     * }
     */
    public static int IsClipboardFormatAvailable(int format) {
        var mh$ = IsClipboardFormatAvailable$MH();
        try {
            return (int)mh$.invokeExact(format);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPriorityClipboardFormat$MH() {
        return RuntimeHelper.requireNonNull(constants$1218.const$0,"GetPriorityClipboardFormat");
    }
    /**
     * {@snippet :
     * int GetPriorityClipboardFormat(UINT* paFormatPriorityList, int cFormats);
     * }
     */
    public static int GetPriorityClipboardFormat(MemorySegment paFormatPriorityList, int cFormats) {
        var mh$ = GetPriorityClipboardFormat$MH();
        try {
            return (int)mh$.invokeExact(paFormatPriorityList, cFormats);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetOpenClipboardWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$1218.const$1,"GetOpenClipboardWindow");
    }
    /**
     * {@snippet :
     * HWND GetOpenClipboardWindow();
     * }
     */
    public static MemorySegment GetOpenClipboardWindow() {
        var mh$ = GetOpenClipboardWindow$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddClipboardFormatListener$MH() {
        return RuntimeHelper.requireNonNull(constants$1218.const$2,"AddClipboardFormatListener");
    }
    /**
     * {@snippet :
     * BOOL AddClipboardFormatListener(HWND hwnd);
     * }
     */
    public static int AddClipboardFormatListener(MemorySegment hwnd) {
        var mh$ = AddClipboardFormatListener$MH();
        try {
            return (int)mh$.invokeExact(hwnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RemoveClipboardFormatListener$MH() {
        return RuntimeHelper.requireNonNull(constants$1218.const$3,"RemoveClipboardFormatListener");
    }
    /**
     * {@snippet :
     * BOOL RemoveClipboardFormatListener(HWND hwnd);
     * }
     */
    public static int RemoveClipboardFormatListener(MemorySegment hwnd) {
        var mh$ = RemoveClipboardFormatListener$MH();
        try {
            return (int)mh$.invokeExact(hwnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetUpdatedClipboardFormats$MH() {
        return RuntimeHelper.requireNonNull(constants$1218.const$4,"GetUpdatedClipboardFormats");
    }
    /**
     * {@snippet :
     * BOOL GetUpdatedClipboardFormats(PUINT lpuiFormats, UINT cFormats, PUINT pcFormatsOut);
     * }
     */
    public static int GetUpdatedClipboardFormats(MemorySegment lpuiFormats, int cFormats, MemorySegment pcFormatsOut) {
        var mh$ = GetUpdatedClipboardFormats$MH();
        try {
            return (int)mh$.invokeExact(lpuiFormats, cFormats, pcFormatsOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CharToOemA$MH() {
        return RuntimeHelper.requireNonNull(constants$1218.const$5,"CharToOemA");
    }
    /**
     * {@snippet :
     * BOOL CharToOemA(LPCSTR pSrc, LPSTR pDst);
     * }
     */
    public static int CharToOemA(MemorySegment pSrc, MemorySegment pDst) {
        var mh$ = CharToOemA$MH();
        try {
            return (int)mh$.invokeExact(pSrc, pDst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CharToOemW$MH() {
        return RuntimeHelper.requireNonNull(constants$1219.const$0,"CharToOemW");
    }
    /**
     * {@snippet :
     * BOOL CharToOemW(LPCWSTR pSrc, LPSTR pDst);
     * }
     */
    public static int CharToOemW(MemorySegment pSrc, MemorySegment pDst) {
        var mh$ = CharToOemW$MH();
        try {
            return (int)mh$.invokeExact(pSrc, pDst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OemToCharA$MH() {
        return RuntimeHelper.requireNonNull(constants$1219.const$1,"OemToCharA");
    }
    /**
     * {@snippet :
     * BOOL OemToCharA(LPCSTR pSrc, LPSTR pDst);
     * }
     */
    public static int OemToCharA(MemorySegment pSrc, MemorySegment pDst) {
        var mh$ = OemToCharA$MH();
        try {
            return (int)mh$.invokeExact(pSrc, pDst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OemToCharW$MH() {
        return RuntimeHelper.requireNonNull(constants$1219.const$2,"OemToCharW");
    }
    /**
     * {@snippet :
     * BOOL OemToCharW(LPCSTR pSrc, LPWSTR pDst);
     * }
     */
    public static int OemToCharW(MemorySegment pSrc, MemorySegment pDst) {
        var mh$ = OemToCharW$MH();
        try {
            return (int)mh$.invokeExact(pSrc, pDst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CharToOemBuffA$MH() {
        return RuntimeHelper.requireNonNull(constants$1219.const$3,"CharToOemBuffA");
    }
    /**
     * {@snippet :
     * BOOL CharToOemBuffA(LPCSTR lpszSrc, LPSTR lpszDst, DWORD cchDstLength);
     * }
     */
    public static int CharToOemBuffA(MemorySegment lpszSrc, MemorySegment lpszDst, int cchDstLength) {
        var mh$ = CharToOemBuffA$MH();
        try {
            return (int)mh$.invokeExact(lpszSrc, lpszDst, cchDstLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CharToOemBuffW$MH() {
        return RuntimeHelper.requireNonNull(constants$1219.const$4,"CharToOemBuffW");
    }
    /**
     * {@snippet :
     * BOOL CharToOemBuffW(LPCWSTR lpszSrc, LPSTR lpszDst, DWORD cchDstLength);
     * }
     */
    public static int CharToOemBuffW(MemorySegment lpszSrc, MemorySegment lpszDst, int cchDstLength) {
        var mh$ = CharToOemBuffW$MH();
        try {
            return (int)mh$.invokeExact(lpszSrc, lpszDst, cchDstLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OemToCharBuffA$MH() {
        return RuntimeHelper.requireNonNull(constants$1219.const$5,"OemToCharBuffA");
    }
    /**
     * {@snippet :
     * BOOL OemToCharBuffA(LPCSTR lpszSrc, LPSTR lpszDst, DWORD cchDstLength);
     * }
     */
    public static int OemToCharBuffA(MemorySegment lpszSrc, MemorySegment lpszDst, int cchDstLength) {
        var mh$ = OemToCharBuffA$MH();
        try {
            return (int)mh$.invokeExact(lpszSrc, lpszDst, cchDstLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OemToCharBuffW$MH() {
        return RuntimeHelper.requireNonNull(constants$1220.const$0,"OemToCharBuffW");
    }
    /**
     * {@snippet :
     * BOOL OemToCharBuffW(LPCSTR lpszSrc, LPWSTR lpszDst, DWORD cchDstLength);
     * }
     */
    public static int OemToCharBuffW(MemorySegment lpszSrc, MemorySegment lpszDst, int cchDstLength) {
        var mh$ = OemToCharBuffW$MH();
        try {
            return (int)mh$.invokeExact(lpszSrc, lpszDst, cchDstLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CharUpperA$MH() {
        return RuntimeHelper.requireNonNull(constants$1220.const$1,"CharUpperA");
    }
    /**
     * {@snippet :
     * LPSTR CharUpperA(LPSTR lpsz);
     * }
     */
    public static MemorySegment CharUpperA(MemorySegment lpsz) {
        var mh$ = CharUpperA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpsz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CharUpperW$MH() {
        return RuntimeHelper.requireNonNull(constants$1220.const$2,"CharUpperW");
    }
    /**
     * {@snippet :
     * LPWSTR CharUpperW(LPWSTR lpsz);
     * }
     */
    public static MemorySegment CharUpperW(MemorySegment lpsz) {
        var mh$ = CharUpperW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpsz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CharUpperBuffA$MH() {
        return RuntimeHelper.requireNonNull(constants$1220.const$3,"CharUpperBuffA");
    }
    /**
     * {@snippet :
     * DWORD CharUpperBuffA(LPSTR lpsz, DWORD cchLength);
     * }
     */
    public static int CharUpperBuffA(MemorySegment lpsz, int cchLength) {
        var mh$ = CharUpperBuffA$MH();
        try {
            return (int)mh$.invokeExact(lpsz, cchLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CharUpperBuffW$MH() {
        return RuntimeHelper.requireNonNull(constants$1220.const$4,"CharUpperBuffW");
    }
    /**
     * {@snippet :
     * DWORD CharUpperBuffW(LPWSTR lpsz, DWORD cchLength);
     * }
     */
    public static int CharUpperBuffW(MemorySegment lpsz, int cchLength) {
        var mh$ = CharUpperBuffW$MH();
        try {
            return (int)mh$.invokeExact(lpsz, cchLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CharLowerA$MH() {
        return RuntimeHelper.requireNonNull(constants$1220.const$5,"CharLowerA");
    }
    /**
     * {@snippet :
     * LPSTR CharLowerA(LPSTR lpsz);
     * }
     */
    public static MemorySegment CharLowerA(MemorySegment lpsz) {
        var mh$ = CharLowerA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpsz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CharLowerW$MH() {
        return RuntimeHelper.requireNonNull(constants$1221.const$0,"CharLowerW");
    }
    /**
     * {@snippet :
     * LPWSTR CharLowerW(LPWSTR lpsz);
     * }
     */
    public static MemorySegment CharLowerW(MemorySegment lpsz) {
        var mh$ = CharLowerW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpsz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CharLowerBuffA$MH() {
        return RuntimeHelper.requireNonNull(constants$1221.const$1,"CharLowerBuffA");
    }
    /**
     * {@snippet :
     * DWORD CharLowerBuffA(LPSTR lpsz, DWORD cchLength);
     * }
     */
    public static int CharLowerBuffA(MemorySegment lpsz, int cchLength) {
        var mh$ = CharLowerBuffA$MH();
        try {
            return (int)mh$.invokeExact(lpsz, cchLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CharLowerBuffW$MH() {
        return RuntimeHelper.requireNonNull(constants$1221.const$2,"CharLowerBuffW");
    }
    /**
     * {@snippet :
     * DWORD CharLowerBuffW(LPWSTR lpsz, DWORD cchLength);
     * }
     */
    public static int CharLowerBuffW(MemorySegment lpsz, int cchLength) {
        var mh$ = CharLowerBuffW$MH();
        try {
            return (int)mh$.invokeExact(lpsz, cchLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CharNextA$MH() {
        return RuntimeHelper.requireNonNull(constants$1221.const$3,"CharNextA");
    }
    /**
     * {@snippet :
     * LPSTR CharNextA(LPCSTR lpsz);
     * }
     */
    public static MemorySegment CharNextA(MemorySegment lpsz) {
        var mh$ = CharNextA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpsz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CharNextW$MH() {
        return RuntimeHelper.requireNonNull(constants$1221.const$4,"CharNextW");
    }
    /**
     * {@snippet :
     * LPWSTR CharNextW(LPCWSTR lpsz);
     * }
     */
    public static MemorySegment CharNextW(MemorySegment lpsz) {
        var mh$ = CharNextW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpsz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CharPrevA$MH() {
        return RuntimeHelper.requireNonNull(constants$1221.const$5,"CharPrevA");
    }
    /**
     * {@snippet :
     * LPSTR CharPrevA(LPCSTR lpszStart, LPCSTR lpszCurrent);
     * }
     */
    public static MemorySegment CharPrevA(MemorySegment lpszStart, MemorySegment lpszCurrent) {
        var mh$ = CharPrevA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpszStart, lpszCurrent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CharPrevW$MH() {
        return RuntimeHelper.requireNonNull(constants$1222.const$0,"CharPrevW");
    }
    /**
     * {@snippet :
     * LPWSTR CharPrevW(LPCWSTR lpszStart, LPCWSTR lpszCurrent);
     * }
     */
    public static MemorySegment CharPrevW(MemorySegment lpszStart, MemorySegment lpszCurrent) {
        var mh$ = CharPrevW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpszStart, lpszCurrent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CharNextExA$MH() {
        return RuntimeHelper.requireNonNull(constants$1222.const$2,"CharNextExA");
    }
    /**
     * {@snippet :
     * LPSTR CharNextExA(WORD CodePage, LPCSTR lpCurrentChar, DWORD dwFlags);
     * }
     */
    public static MemorySegment CharNextExA(short CodePage, MemorySegment lpCurrentChar, int dwFlags) {
        var mh$ = CharNextExA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(CodePage, lpCurrentChar, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CharPrevExA$MH() {
        return RuntimeHelper.requireNonNull(constants$1222.const$4,"CharPrevExA");
    }
    /**
     * {@snippet :
     * LPSTR CharPrevExA(WORD CodePage, LPCSTR lpStart, LPCSTR lpCurrentChar, DWORD dwFlags);
     * }
     */
    public static MemorySegment CharPrevExA(short CodePage, MemorySegment lpStart, MemorySegment lpCurrentChar, int dwFlags) {
        var mh$ = CharPrevExA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(CodePage, lpStart, lpCurrentChar, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsCharAlphaA$MH() {
        return RuntimeHelper.requireNonNull(constants$1222.const$5,"IsCharAlphaA");
    }
    /**
     * {@snippet :
     * BOOL IsCharAlphaA(CHAR ch);
     * }
     */
    public static int IsCharAlphaA(byte ch) {
        var mh$ = IsCharAlphaA$MH();
        try {
            return (int)mh$.invokeExact(ch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsCharAlphaW$MH() {
        return RuntimeHelper.requireNonNull(constants$1223.const$0,"IsCharAlphaW");
    }
    /**
     * {@snippet :
     * BOOL IsCharAlphaW(WCHAR ch);
     * }
     */
    public static int IsCharAlphaW(short ch) {
        var mh$ = IsCharAlphaW$MH();
        try {
            return (int)mh$.invokeExact(ch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsCharAlphaNumericA$MH() {
        return RuntimeHelper.requireNonNull(constants$1223.const$1,"IsCharAlphaNumericA");
    }
    /**
     * {@snippet :
     * BOOL IsCharAlphaNumericA(CHAR ch);
     * }
     */
    public static int IsCharAlphaNumericA(byte ch) {
        var mh$ = IsCharAlphaNumericA$MH();
        try {
            return (int)mh$.invokeExact(ch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsCharAlphaNumericW$MH() {
        return RuntimeHelper.requireNonNull(constants$1223.const$2,"IsCharAlphaNumericW");
    }
    /**
     * {@snippet :
     * BOOL IsCharAlphaNumericW(WCHAR ch);
     * }
     */
    public static int IsCharAlphaNumericW(short ch) {
        var mh$ = IsCharAlphaNumericW$MH();
        try {
            return (int)mh$.invokeExact(ch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsCharUpperA$MH() {
        return RuntimeHelper.requireNonNull(constants$1223.const$3,"IsCharUpperA");
    }
    /**
     * {@snippet :
     * BOOL IsCharUpperA(CHAR ch);
     * }
     */
    public static int IsCharUpperA(byte ch) {
        var mh$ = IsCharUpperA$MH();
        try {
            return (int)mh$.invokeExact(ch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsCharUpperW$MH() {
        return RuntimeHelper.requireNonNull(constants$1223.const$4,"IsCharUpperW");
    }
    /**
     * {@snippet :
     * BOOL IsCharUpperW(WCHAR ch);
     * }
     */
    public static int IsCharUpperW(short ch) {
        var mh$ = IsCharUpperW$MH();
        try {
            return (int)mh$.invokeExact(ch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsCharLowerA$MH() {
        return RuntimeHelper.requireNonNull(constants$1223.const$5,"IsCharLowerA");
    }
    /**
     * {@snippet :
     * BOOL IsCharLowerA(CHAR ch);
     * }
     */
    public static int IsCharLowerA(byte ch) {
        var mh$ = IsCharLowerA$MH();
        try {
            return (int)mh$.invokeExact(ch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsCharLowerW$MH() {
        return RuntimeHelper.requireNonNull(constants$1224.const$0,"IsCharLowerW");
    }
    /**
     * {@snippet :
     * BOOL IsCharLowerW(WCHAR ch);
     * }
     */
    public static int IsCharLowerW(short ch) {
        var mh$ = IsCharLowerW$MH();
        try {
            return (int)mh$.invokeExact(ch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFocus$MH() {
        return RuntimeHelper.requireNonNull(constants$1224.const$1,"SetFocus");
    }
    /**
     * {@snippet :
     * HWND SetFocus(HWND hWnd);
     * }
     */
    public static MemorySegment SetFocus(MemorySegment hWnd) {
        var mh$ = SetFocus$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetActiveWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$1224.const$2,"GetActiveWindow");
    }
    /**
     * {@snippet :
     * HWND GetActiveWindow();
     * }
     */
    public static MemorySegment GetActiveWindow() {
        var mh$ = GetActiveWindow$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFocus$MH() {
        return RuntimeHelper.requireNonNull(constants$1224.const$3,"GetFocus");
    }
    /**
     * {@snippet :
     * HWND GetFocus();
     * }
     */
    public static MemorySegment GetFocus() {
        var mh$ = GetFocus$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetKBCodePage$MH() {
        return RuntimeHelper.requireNonNull(constants$1224.const$4,"GetKBCodePage");
    }
    /**
     * {@snippet :
     * UINT GetKBCodePage();
     * }
     */
    public static int GetKBCodePage() {
        var mh$ = GetKBCodePage$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetKeyState$MH() {
        return RuntimeHelper.requireNonNull(constants$1224.const$5,"GetKeyState");
    }
    /**
     * {@snippet :
     * SHORT GetKeyState(int nVirtKey);
     * }
     */
    public static short GetKeyState(int nVirtKey) {
        var mh$ = GetKeyState$MH();
        try {
            return (short)mh$.invokeExact(nVirtKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetAsyncKeyState$MH() {
        return RuntimeHelper.requireNonNull(constants$1225.const$0,"GetAsyncKeyState");
    }
    /**
     * {@snippet :
     * SHORT GetAsyncKeyState(int vKey);
     * }
     */
    public static short GetAsyncKeyState(int vKey) {
        var mh$ = GetAsyncKeyState$MH();
        try {
            return (short)mh$.invokeExact(vKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetKeyboardState$MH() {
        return RuntimeHelper.requireNonNull(constants$1225.const$1,"GetKeyboardState");
    }
    /**
     * {@snippet :
     * BOOL GetKeyboardState(PBYTE lpKeyState);
     * }
     */
    public static int GetKeyboardState(MemorySegment lpKeyState) {
        var mh$ = GetKeyboardState$MH();
        try {
            return (int)mh$.invokeExact(lpKeyState);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetKeyboardState$MH() {
        return RuntimeHelper.requireNonNull(constants$1225.const$2,"SetKeyboardState");
    }
    /**
     * {@snippet :
     * BOOL SetKeyboardState(LPBYTE lpKeyState);
     * }
     */
    public static int SetKeyboardState(MemorySegment lpKeyState) {
        var mh$ = SetKeyboardState$MH();
        try {
            return (int)mh$.invokeExact(lpKeyState);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetKeyNameTextA$MH() {
        return RuntimeHelper.requireNonNull(constants$1225.const$3,"GetKeyNameTextA");
    }
    /**
     * {@snippet :
     * int GetKeyNameTextA(LONG lParam, LPSTR lpString, int cchSize);
     * }
     */
    public static int GetKeyNameTextA(int lParam, MemorySegment lpString, int cchSize) {
        var mh$ = GetKeyNameTextA$MH();
        try {
            return (int)mh$.invokeExact(lParam, lpString, cchSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetKeyNameTextW$MH() {
        return RuntimeHelper.requireNonNull(constants$1225.const$4,"GetKeyNameTextW");
    }
    /**
     * {@snippet :
     * int GetKeyNameTextW(LONG lParam, LPWSTR lpString, int cchSize);
     * }
     */
    public static int GetKeyNameTextW(int lParam, MemorySegment lpString, int cchSize) {
        var mh$ = GetKeyNameTextW$MH();
        try {
            return (int)mh$.invokeExact(lParam, lpString, cchSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetKeyboardType$MH() {
        return RuntimeHelper.requireNonNull(constants$1225.const$5,"GetKeyboardType");
    }
    /**
     * {@snippet :
     * int GetKeyboardType(int nTypeFlag);
     * }
     */
    public static int GetKeyboardType(int nTypeFlag) {
        var mh$ = GetKeyboardType$MH();
        try {
            return (int)mh$.invokeExact(nTypeFlag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ToAscii$MH() {
        return RuntimeHelper.requireNonNull(constants$1226.const$1,"ToAscii");
    }
    /**
     * {@snippet :
     * int ToAscii(UINT uVirtKey, UINT uScanCode, const BYTE* lpKeyState, LPWORD lpChar, UINT uFlags);
     * }
     */
    public static int ToAscii(int uVirtKey, int uScanCode, MemorySegment lpKeyState, MemorySegment lpChar, int uFlags) {
        var mh$ = ToAscii$MH();
        try {
            return (int)mh$.invokeExact(uVirtKey, uScanCode, lpKeyState, lpChar, uFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ToAsciiEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1226.const$3,"ToAsciiEx");
    }
    /**
     * {@snippet :
     * int ToAsciiEx(UINT uVirtKey, UINT uScanCode, const BYTE* lpKeyState, LPWORD lpChar, UINT uFlags, HKL dwhkl);
     * }
     */
    public static int ToAsciiEx(int uVirtKey, int uScanCode, MemorySegment lpKeyState, MemorySegment lpChar, int uFlags, MemorySegment dwhkl) {
        var mh$ = ToAsciiEx$MH();
        try {
            return (int)mh$.invokeExact(uVirtKey, uScanCode, lpKeyState, lpChar, uFlags, dwhkl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ToUnicode$MH() {
        return RuntimeHelper.requireNonNull(constants$1226.const$5,"ToUnicode");
    }
    /**
     * {@snippet :
     * int ToUnicode(UINT wVirtKey, UINT wScanCode, const BYTE* lpKeyState, LPWSTR pwszBuff, int cchBuff, UINT wFlags);
     * }
     */
    public static int ToUnicode(int wVirtKey, int wScanCode, MemorySegment lpKeyState, MemorySegment pwszBuff, int cchBuff, int wFlags) {
        var mh$ = ToUnicode$MH();
        try {
            return (int)mh$.invokeExact(wVirtKey, wScanCode, lpKeyState, pwszBuff, cchBuff, wFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OemKeyScan$MH() {
        return RuntimeHelper.requireNonNull(constants$1227.const$0,"OemKeyScan");
    }
    /**
     * {@snippet :
     * DWORD OemKeyScan(WORD wOemChar);
     * }
     */
    public static int OemKeyScan(short wOemChar) {
        var mh$ = OemKeyScan$MH();
        try {
            return (int)mh$.invokeExact(wOemChar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VkKeyScanA$MH() {
        return RuntimeHelper.requireNonNull(constants$1227.const$2,"VkKeyScanA");
    }
    /**
     * {@snippet :
     * SHORT VkKeyScanA(CHAR ch);
     * }
     */
    public static short VkKeyScanA(byte ch) {
        var mh$ = VkKeyScanA$MH();
        try {
            return (short)mh$.invokeExact(ch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VkKeyScanW$MH() {
        return RuntimeHelper.requireNonNull(constants$1227.const$3,"VkKeyScanW");
    }
    /**
     * {@snippet :
     * SHORT VkKeyScanW(WCHAR ch);
     * }
     */
    public static short VkKeyScanW(short ch) {
        var mh$ = VkKeyScanW$MH();
        try {
            return (short)mh$.invokeExact(ch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VkKeyScanExA$MH() {
        return RuntimeHelper.requireNonNull(constants$1227.const$5,"VkKeyScanExA");
    }
    /**
     * {@snippet :
     * SHORT VkKeyScanExA(CHAR ch, HKL dwhkl);
     * }
     */
    public static short VkKeyScanExA(byte ch, MemorySegment dwhkl) {
        var mh$ = VkKeyScanExA$MH();
        try {
            return (short)mh$.invokeExact(ch, dwhkl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VkKeyScanExW$MH() {
        return RuntimeHelper.requireNonNull(constants$1228.const$0,"VkKeyScanExW");
    }
    /**
     * {@snippet :
     * SHORT VkKeyScanExW(WCHAR ch, HKL dwhkl);
     * }
     */
    public static short VkKeyScanExW(short ch, MemorySegment dwhkl) {
        var mh$ = VkKeyScanExW$MH();
        try {
            return (short)mh$.invokeExact(ch, dwhkl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle keybd_event$MH() {
        return RuntimeHelper.requireNonNull(constants$1228.const$2,"keybd_event");
    }
    /**
     * {@snippet :
     * void keybd_event(BYTE bVk, BYTE bScan, DWORD dwFlags, ULONG_PTR dwExtraInfo);
     * }
     */
    public static void keybd_event(byte bVk, byte bScan, int dwFlags, long dwExtraInfo) {
        var mh$ = keybd_event$MH();
        try {
            mh$.invokeExact(bVk, bScan, dwFlags, dwExtraInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mouse_event$MH() {
        return RuntimeHelper.requireNonNull(constants$1228.const$4,"mouse_event");
    }
    /**
     * {@snippet :
     * void mouse_event(DWORD dwFlags, DWORD dx, DWORD dy, DWORD dwData, ULONG_PTR dwExtraInfo);
     * }
     */
    public static void mouse_event(int dwFlags, int dx, int dy, int dwData, long dwExtraInfo) {
        var mh$ = mouse_event$MH();
        try {
            mh$.invokeExact(dwFlags, dx, dy, dwData, dwExtraInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagMOUSEINPUT* PMOUSEINPUT;
     * }
     */
    public static final AddressLayout PMOUSEINPUT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagMOUSEINPUT* LPMOUSEINPUT;
     * }
     */
    public static final AddressLayout LPMOUSEINPUT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagKEYBDINPUT* PKEYBDINPUT;
     * }
     */
    public static final AddressLayout PKEYBDINPUT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagKEYBDINPUT* LPKEYBDINPUT;
     * }
     */
    public static final AddressLayout LPKEYBDINPUT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagHARDWAREINPUT* PHARDWAREINPUT;
     * }
     */
    public static final AddressLayout PHARDWAREINPUT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagHARDWAREINPUT* LPHARDWAREINPUT;
     * }
     */
    public static final AddressLayout LPHARDWAREINPUT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagINPUT* PINPUT;
     * }
     */
    public static final AddressLayout PINPUT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagINPUT* LPINPUT;
     * }
     */
    public static final AddressLayout LPINPUT = RuntimeHelper.POINTER;
    public static MethodHandle SendInput$MH() {
        return RuntimeHelper.requireNonNull(constants$1232.const$0,"SendInput");
    }
    /**
     * {@snippet :
     * UINT SendInput(UINT cInputs, LPINPUT pInputs, int cbSize);
     * }
     */
    public static int SendInput(int cInputs, MemorySegment pInputs, int cbSize) {
        var mh$ = SendInput$MH();
        try {
            return (int)mh$.invokeExact(cInputs, pInputs, cbSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct HTOUCHINPUT__* HTOUCHINPUT;
     * }
     */
    public static final AddressLayout HTOUCHINPUT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagTOUCHINPUT* PTOUCHINPUT;
     * }
     */
    public static final AddressLayout PTOUCHINPUT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagTOUCHINPUT* PCTOUCHINPUT;
     * }
     */
    public static final AddressLayout PCTOUCHINPUT = RuntimeHelper.POINTER;
    public static MethodHandle GetTouchInputInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$1234.const$2,"GetTouchInputInfo");
    }
    /**
     * {@snippet :
     * BOOL GetTouchInputInfo(HTOUCHINPUT hTouchInput, UINT cInputs, PTOUCHINPUT pInputs, int cbSize);
     * }
     */
    public static int GetTouchInputInfo(MemorySegment hTouchInput, int cInputs, MemorySegment pInputs, int cbSize) {
        var mh$ = GetTouchInputInfo$MH();
        try {
            return (int)mh$.invokeExact(hTouchInput, cInputs, pInputs, cbSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CloseTouchInputHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$1234.const$3,"CloseTouchInputHandle");
    }
    /**
     * {@snippet :
     * BOOL CloseTouchInputHandle(HTOUCHINPUT hTouchInput);
     * }
     */
    public static int CloseTouchInputHandle(MemorySegment hTouchInput) {
        var mh$ = CloseTouchInputHandle$MH();
        try {
            return (int)mh$.invokeExact(hTouchInput);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterTouchWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$1234.const$4,"RegisterTouchWindow");
    }
    /**
     * {@snippet :
     * BOOL RegisterTouchWindow(HWND hwnd, ULONG ulFlags);
     * }
     */
    public static int RegisterTouchWindow(MemorySegment hwnd, int ulFlags) {
        var mh$ = RegisterTouchWindow$MH();
        try {
            return (int)mh$.invokeExact(hwnd, ulFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnregisterTouchWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$1234.const$5,"UnregisterTouchWindow");
    }
    /**
     * {@snippet :
     * BOOL UnregisterTouchWindow(HWND hwnd);
     * }
     */
    public static int UnregisterTouchWindow(MemorySegment hwnd) {
        var mh$ = UnregisterTouchWindow$MH();
        try {
            return (int)mh$.invokeExact(hwnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsTouchWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$1235.const$0,"IsTouchWindow");
    }
    /**
     * {@snippet :
     * BOOL IsTouchWindow(HWND hwnd, PULONG pulFlags);
     * }
     */
    public static int IsTouchWindow(MemorySegment hwnd, MemorySegment pulFlags) {
        var mh$ = IsTouchWindow$MH();
        try {
            return (int)mh$.invokeExact(hwnd, pulFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum tagPOINTER_INPUT_TYPE.PT_POINTER = 1;
     * }
     */
    public static int PT_POINTER() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum tagPOINTER_INPUT_TYPE.PT_TOUCH = 2;
     * }
     */
    public static int PT_TOUCH() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum tagPOINTER_INPUT_TYPE.PT_PEN = 3;
     * }
     */
    public static int PT_PEN() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum tagPOINTER_INPUT_TYPE.PT_MOUSE = 4;
     * }
     */
    public static int PT_MOUSE() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum tagPOINTER_INPUT_TYPE.PT_TOUCHPAD = 5;
     * }
     */
    public static int PT_TOUCHPAD() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * typedef unsigned long POINTER_INPUT_TYPE;
     * }
     */
    public static final OfInt POINTER_INPUT_TYPE = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int POINTER_FLAGS;
     * }
     */
    public static final OfInt POINTER_FLAGS = JAVA_INT;
    /**
     * {@snippet :
     * enum tagPOINTER_BUTTON_CHANGE_TYPE.POINTER_CHANGE_NONE = 0;
     * }
     */
    public static int POINTER_CHANGE_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum tagPOINTER_BUTTON_CHANGE_TYPE.POINTER_CHANGE_FIRSTBUTTON_DOWN = 1;
     * }
     */
    public static int POINTER_CHANGE_FIRSTBUTTON_DOWN() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum tagPOINTER_BUTTON_CHANGE_TYPE.POINTER_CHANGE_FIRSTBUTTON_UP = 2;
     * }
     */
    public static int POINTER_CHANGE_FIRSTBUTTON_UP() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum tagPOINTER_BUTTON_CHANGE_TYPE.POINTER_CHANGE_SECONDBUTTON_DOWN = 3;
     * }
     */
    public static int POINTER_CHANGE_SECONDBUTTON_DOWN() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum tagPOINTER_BUTTON_CHANGE_TYPE.POINTER_CHANGE_SECONDBUTTON_UP = 4;
     * }
     */
    public static int POINTER_CHANGE_SECONDBUTTON_UP() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum tagPOINTER_BUTTON_CHANGE_TYPE.POINTER_CHANGE_THIRDBUTTON_DOWN = 5;
     * }
     */
    public static int POINTER_CHANGE_THIRDBUTTON_DOWN() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum tagPOINTER_BUTTON_CHANGE_TYPE.POINTER_CHANGE_THIRDBUTTON_UP = 6;
     * }
     */
    public static int POINTER_CHANGE_THIRDBUTTON_UP() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum tagPOINTER_BUTTON_CHANGE_TYPE.POINTER_CHANGE_FOURTHBUTTON_DOWN = 7;
     * }
     */
    public static int POINTER_CHANGE_FOURTHBUTTON_DOWN() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum tagPOINTER_BUTTON_CHANGE_TYPE.POINTER_CHANGE_FOURTHBUTTON_UP = 8;
     * }
     */
    public static int POINTER_CHANGE_FOURTHBUTTON_UP() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum tagPOINTER_BUTTON_CHANGE_TYPE.POINTER_CHANGE_FIFTHBUTTON_DOWN = 9;
     * }
     */
    public static int POINTER_CHANGE_FIFTHBUTTON_DOWN() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum tagPOINTER_BUTTON_CHANGE_TYPE.POINTER_CHANGE_FIFTHBUTTON_UP = 10;
     * }
     */
    public static int POINTER_CHANGE_FIFTHBUTTON_UP() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * typedef unsigned int TOUCH_FLAGS;
     * }
     */
    public static final OfInt TOUCH_FLAGS = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int TOUCH_MASK;
     * }
     */
    public static final OfInt TOUCH_MASK = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int PEN_FLAGS;
     * }
     */
    public static final OfInt PEN_FLAGS = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int PEN_MASK;
     * }
     */
    public static final OfInt PEN_MASK = JAVA_INT;
    /**
     * {@snippet :
     * enum .POINTER_FEEDBACK_DEFAULT = 1;
     * }
     */
    public static int POINTER_FEEDBACK_DEFAULT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .POINTER_FEEDBACK_INDIRECT = 2;
     * }
     */
    public static int POINTER_FEEDBACK_INDIRECT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .POINTER_FEEDBACK_NONE = 3;
     * }
     */
    public static int POINTER_FEEDBACK_NONE() {
        return (int)3L;
    }
    public static MethodHandle InitializeTouchInjection$MH() {
        return RuntimeHelper.requireNonNull(constants$1239.const$2,"InitializeTouchInjection");
    }
    /**
     * {@snippet :
     * BOOL InitializeTouchInjection(UINT32 maxCount, DWORD dwMode);
     * }
     */
    public static int InitializeTouchInjection(int maxCount, int dwMode) {
        var mh$ = InitializeTouchInjection$MH();
        try {
            return (int)mh$.invokeExact(maxCount, dwMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InjectTouchInput$MH() {
        return RuntimeHelper.requireNonNull(constants$1239.const$3,"InjectTouchInput");
    }
    /**
     * {@snippet :
     * BOOL InjectTouchInput(UINT32 count, const POINTER_TOUCH_INFO* contacts);
     * }
     */
    public static int InjectTouchInput(int count, MemorySegment contacts) {
        var mh$ = InjectTouchInput$MH();
        try {
            return (int)mh$.invokeExact(count, contacts);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagUSAGE_PROPERTIES* PUSAGE_PROPERTIES;
     * }
     */
    public static final AddressLayout PUSAGE_PROPERTIES = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagPOINTER_TYPE_INFO* PPOINTER_TYPE_INFO;
     * }
     */
    public static final AddressLayout PPOINTER_TYPE_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagINPUT_INJECTION_VALUE* PINPUT_INJECTION_VALUE;
     * }
     */
    public static final AddressLayout PINPUT_INJECTION_VALUE = RuntimeHelper.POINTER;
    public static MethodHandle GetPointerType$MH() {
        return RuntimeHelper.requireNonNull(constants$1242.const$4,"GetPointerType");
    }
    /**
     * {@snippet :
     * BOOL GetPointerType(UINT32 pointerId, POINTER_INPUT_TYPE* pointerType);
     * }
     */
    public static int GetPointerType(int pointerId, MemorySegment pointerType) {
        var mh$ = GetPointerType$MH();
        try {
            return (int)mh$.invokeExact(pointerId, pointerType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPointerCursorId$MH() {
        return RuntimeHelper.requireNonNull(constants$1242.const$5,"GetPointerCursorId");
    }
    /**
     * {@snippet :
     * BOOL GetPointerCursorId(UINT32 pointerId, UINT32* cursorId);
     * }
     */
    public static int GetPointerCursorId(int pointerId, MemorySegment cursorId) {
        var mh$ = GetPointerCursorId$MH();
        try {
            return (int)mh$.invokeExact(pointerId, cursorId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPointerInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$1243.const$0,"GetPointerInfo");
    }
    /**
     * {@snippet :
     * BOOL GetPointerInfo(UINT32 pointerId, POINTER_INFO* pointerInfo);
     * }
     */
    public static int GetPointerInfo(int pointerId, MemorySegment pointerInfo) {
        var mh$ = GetPointerInfo$MH();
        try {
            return (int)mh$.invokeExact(pointerId, pointerInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPointerInfoHistory$MH() {
        return RuntimeHelper.requireNonNull(constants$1243.const$1,"GetPointerInfoHistory");
    }
    /**
     * {@snippet :
     * BOOL GetPointerInfoHistory(UINT32 pointerId, UINT32* entriesCount, POINTER_INFO* pointerInfo);
     * }
     */
    public static int GetPointerInfoHistory(int pointerId, MemorySegment entriesCount, MemorySegment pointerInfo) {
        var mh$ = GetPointerInfoHistory$MH();
        try {
            return (int)mh$.invokeExact(pointerId, entriesCount, pointerInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}



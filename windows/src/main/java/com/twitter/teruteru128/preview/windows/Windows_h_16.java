// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class Windows_h_16 extends Windows_h_17 {

    Windows_h_16() {
        // Should not be called directly
    }

    private static class CoCancelCall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CoCancelCall"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoCancelCall(DWORD dwThreadId, ULONG ulTimeout)
     * }
     */
    public static FunctionDescriptor CoCancelCall$descriptor() {
        return CoCancelCall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoCancelCall(DWORD dwThreadId, ULONG ulTimeout)
     * }
     */
    public static MethodHandle CoCancelCall$handle() {
        return CoCancelCall.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CoCancelCall(DWORD dwThreadId, ULONG ulTimeout)
     * }
     */
    public static int CoCancelCall(int dwThreadId, int ulTimeout) {
        var mh$ = CoCancelCall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoCancelCall", dwThreadId, ulTimeout);
            }
            return (int)mh$.invokeExact(dwThreadId, ulTimeout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoTestCancel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CoTestCancel"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoTestCancel()
     * }
     */
    public static FunctionDescriptor CoTestCancel$descriptor() {
        return CoTestCancel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoTestCancel()
     * }
     */
    public static MethodHandle CoTestCancel$handle() {
        return CoTestCancel.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CoTestCancel()
     * }
     */
    public static int CoTestCancel() {
        var mh$ = CoTestCancel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoTestCancel");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoEnableCallCancellation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CoEnableCallCancellation"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoEnableCallCancellation(LPVOID pReserved)
     * }
     */
    public static FunctionDescriptor CoEnableCallCancellation$descriptor() {
        return CoEnableCallCancellation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoEnableCallCancellation(LPVOID pReserved)
     * }
     */
    public static MethodHandle CoEnableCallCancellation$handle() {
        return CoEnableCallCancellation.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CoEnableCallCancellation(LPVOID pReserved)
     * }
     */
    public static int CoEnableCallCancellation(MemorySegment pReserved) {
        var mh$ = CoEnableCallCancellation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoEnableCallCancellation", pReserved);
            }
            return (int)mh$.invokeExact(pReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoDisableCallCancellation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CoDisableCallCancellation"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoDisableCallCancellation(LPVOID pReserved)
     * }
     */
    public static FunctionDescriptor CoDisableCallCancellation$descriptor() {
        return CoDisableCallCancellation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoDisableCallCancellation(LPVOID pReserved)
     * }
     */
    public static MethodHandle CoDisableCallCancellation$handle() {
        return CoDisableCallCancellation.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CoDisableCallCancellation(LPVOID pReserved)
     * }
     */
    public static int CoDisableCallCancellation(MemorySegment pReserved) {
        var mh$ = CoDisableCallCancellation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoDisableCallCancellation", pReserved);
            }
            return (int)mh$.invokeExact(pReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StringFromCLSID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("StringFromCLSID"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT StringFromCLSID(const IID *const rclsid, LPOLESTR *lplpsz)
     * }
     */
    public static FunctionDescriptor StringFromCLSID$descriptor() {
        return StringFromCLSID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT StringFromCLSID(const IID *const rclsid, LPOLESTR *lplpsz)
     * }
     */
    public static MethodHandle StringFromCLSID$handle() {
        return StringFromCLSID.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT StringFromCLSID(const IID *const rclsid, LPOLESTR *lplpsz)
     * }
     */
    public static int StringFromCLSID(MemorySegment rclsid, MemorySegment lplpsz) {
        var mh$ = StringFromCLSID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StringFromCLSID", rclsid, lplpsz);
            }
            return (int)mh$.invokeExact(rclsid, lplpsz);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CLSIDFromString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CLSIDFromString"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CLSIDFromString(LPCOLESTR lpsz, LPCLSID pclsid)
     * }
     */
    public static FunctionDescriptor CLSIDFromString$descriptor() {
        return CLSIDFromString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CLSIDFromString(LPCOLESTR lpsz, LPCLSID pclsid)
     * }
     */
    public static MethodHandle CLSIDFromString$handle() {
        return CLSIDFromString.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CLSIDFromString(LPCOLESTR lpsz, LPCLSID pclsid)
     * }
     */
    public static int CLSIDFromString(MemorySegment lpsz, MemorySegment pclsid) {
        var mh$ = CLSIDFromString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CLSIDFromString", lpsz, pclsid);
            }
            return (int)mh$.invokeExact(lpsz, pclsid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StringFromIID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("StringFromIID"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT StringFromIID(const IID *const rclsid, LPOLESTR *lplpsz)
     * }
     */
    public static FunctionDescriptor StringFromIID$descriptor() {
        return StringFromIID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT StringFromIID(const IID *const rclsid, LPOLESTR *lplpsz)
     * }
     */
    public static MethodHandle StringFromIID$handle() {
        return StringFromIID.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT StringFromIID(const IID *const rclsid, LPOLESTR *lplpsz)
     * }
     */
    public static int StringFromIID(MemorySegment rclsid, MemorySegment lplpsz) {
        var mh$ = StringFromIID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StringFromIID", rclsid, lplpsz);
            }
            return (int)mh$.invokeExact(rclsid, lplpsz);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IIDFromString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IIDFromString"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT IIDFromString(LPCOLESTR lpsz, LPIID lpiid)
     * }
     */
    public static FunctionDescriptor IIDFromString$descriptor() {
        return IIDFromString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT IIDFromString(LPCOLESTR lpsz, LPIID lpiid)
     * }
     */
    public static MethodHandle IIDFromString$handle() {
        return IIDFromString.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT IIDFromString(LPCOLESTR lpsz, LPIID lpiid)
     * }
     */
    public static int IIDFromString(MemorySegment lpsz, MemorySegment lpiid) {
        var mh$ = IIDFromString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IIDFromString", lpsz, lpiid);
            }
            return (int)mh$.invokeExact(lpsz, lpiid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ProgIDFromCLSID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ProgIDFromCLSID"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT ProgIDFromCLSID(const IID *const clsid, LPOLESTR *lplpszProgID)
     * }
     */
    public static FunctionDescriptor ProgIDFromCLSID$descriptor() {
        return ProgIDFromCLSID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT ProgIDFromCLSID(const IID *const clsid, LPOLESTR *lplpszProgID)
     * }
     */
    public static MethodHandle ProgIDFromCLSID$handle() {
        return ProgIDFromCLSID.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT ProgIDFromCLSID(const IID *const clsid, LPOLESTR *lplpszProgID)
     * }
     */
    public static int ProgIDFromCLSID(MemorySegment clsid, MemorySegment lplpszProgID) {
        var mh$ = ProgIDFromCLSID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ProgIDFromCLSID", clsid, lplpszProgID);
            }
            return (int)mh$.invokeExact(clsid, lplpszProgID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CLSIDFromProgID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CLSIDFromProgID"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CLSIDFromProgID(LPCOLESTR lpszProgID, LPCLSID lpclsid)
     * }
     */
    public static FunctionDescriptor CLSIDFromProgID$descriptor() {
        return CLSIDFromProgID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CLSIDFromProgID(LPCOLESTR lpszProgID, LPCLSID lpclsid)
     * }
     */
    public static MethodHandle CLSIDFromProgID$handle() {
        return CLSIDFromProgID.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CLSIDFromProgID(LPCOLESTR lpszProgID, LPCLSID lpclsid)
     * }
     */
    public static int CLSIDFromProgID(MemorySegment lpszProgID, MemorySegment lpclsid) {
        var mh$ = CLSIDFromProgID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CLSIDFromProgID", lpszProgID, lpclsid);
            }
            return (int)mh$.invokeExact(lpszProgID, lpclsid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StringFromGUID2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("StringFromGUID2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int StringFromGUID2(const GUID *const rguid, LPOLESTR lpsz, int cchMax)
     * }
     */
    public static FunctionDescriptor StringFromGUID2$descriptor() {
        return StringFromGUID2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int StringFromGUID2(const GUID *const rguid, LPOLESTR lpsz, int cchMax)
     * }
     */
    public static MethodHandle StringFromGUID2$handle() {
        return StringFromGUID2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int StringFromGUID2(const GUID *const rguid, LPOLESTR lpsz, int cchMax)
     * }
     */
    public static int StringFromGUID2(MemorySegment rguid, MemorySegment lpsz, int cchMax) {
        var mh$ = StringFromGUID2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StringFromGUID2", rguid, lpsz, cchMax);
            }
            return (int)mh$.invokeExact(rguid, lpsz, cchMax);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoCreateGuid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CoCreateGuid"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoCreateGuid(GUID *pguid)
     * }
     */
    public static FunctionDescriptor CoCreateGuid$descriptor() {
        return CoCreateGuid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoCreateGuid(GUID *pguid)
     * }
     */
    public static MethodHandle CoCreateGuid$handle() {
        return CoCreateGuid.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CoCreateGuid(GUID *pguid)
     * }
     */
    public static int CoCreateGuid(MemorySegment pguid) {
        var mh$ = CoCreateGuid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoCreateGuid", pguid);
            }
            return (int)mh$.invokeExact(pguid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PropVariantCopy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("PropVariantCopy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT PropVariantCopy(PROPVARIANT *pvarDest, const PROPVARIANT *pvarSrc)
     * }
     */
    public static FunctionDescriptor PropVariantCopy$descriptor() {
        return PropVariantCopy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT PropVariantCopy(PROPVARIANT *pvarDest, const PROPVARIANT *pvarSrc)
     * }
     */
    public static MethodHandle PropVariantCopy$handle() {
        return PropVariantCopy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT PropVariantCopy(PROPVARIANT *pvarDest, const PROPVARIANT *pvarSrc)
     * }
     */
    public static int PropVariantCopy(MemorySegment pvarDest, MemorySegment pvarSrc) {
        var mh$ = PropVariantCopy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PropVariantCopy", pvarDest, pvarSrc);
            }
            return (int)mh$.invokeExact(pvarDest, pvarSrc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PropVariantClear {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("PropVariantClear"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT PropVariantClear(PROPVARIANT *pvar)
     * }
     */
    public static FunctionDescriptor PropVariantClear$descriptor() {
        return PropVariantClear.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT PropVariantClear(PROPVARIANT *pvar)
     * }
     */
    public static MethodHandle PropVariantClear$handle() {
        return PropVariantClear.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT PropVariantClear(PROPVARIANT *pvar)
     * }
     */
    public static int PropVariantClear(MemorySegment pvar) {
        var mh$ = PropVariantClear.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PropVariantClear", pvar);
            }
            return (int)mh$.invokeExact(pvar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FreePropVariantArray {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("FreePropVariantArray"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT FreePropVariantArray(ULONG cVariants, PROPVARIANT *rgvars)
     * }
     */
    public static FunctionDescriptor FreePropVariantArray$descriptor() {
        return FreePropVariantArray.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT FreePropVariantArray(ULONG cVariants, PROPVARIANT *rgvars)
     * }
     */
    public static MethodHandle FreePropVariantArray$handle() {
        return FreePropVariantArray.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT FreePropVariantArray(ULONG cVariants, PROPVARIANT *rgvars)
     * }
     */
    public static int FreePropVariantArray(int cVariants, MemorySegment rgvars) {
        var mh$ = FreePropVariantArray.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FreePropVariantArray", cVariants, rgvars);
            }
            return (int)mh$.invokeExact(cVariants, rgvars);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoWaitForMultipleHandles {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_LONG,
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CoWaitForMultipleHandles"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoWaitForMultipleHandles(DWORD dwFlags, DWORD dwTimeout, ULONG cHandles, LPHANDLE pHandles, LPDWORD lpdwindex)
     * }
     */
    public static FunctionDescriptor CoWaitForMultipleHandles$descriptor() {
        return CoWaitForMultipleHandles.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoWaitForMultipleHandles(DWORD dwFlags, DWORD dwTimeout, ULONG cHandles, LPHANDLE pHandles, LPDWORD lpdwindex)
     * }
     */
    public static MethodHandle CoWaitForMultipleHandles$handle() {
        return CoWaitForMultipleHandles.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CoWaitForMultipleHandles(DWORD dwFlags, DWORD dwTimeout, ULONG cHandles, LPHANDLE pHandles, LPDWORD lpdwindex)
     * }
     */
    public static int CoWaitForMultipleHandles(int dwFlags, int dwTimeout, int cHandles, MemorySegment pHandles, MemorySegment lpdwindex) {
        var mh$ = CoWaitForMultipleHandles.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoWaitForMultipleHandles", dwFlags, dwTimeout, cHandles, pHandles, lpdwindex);
            }
            return (int)mh$.invokeExact(dwFlags, dwTimeout, cHandles, pHandles, lpdwindex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int COWAIT_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagCOWAIT_FLAGS.COWAIT_DEFAULT = 0
     * }
     */
    public static int COWAIT_DEFAULT() {
        return COWAIT_DEFAULT;
    }
    private static final int COWAIT_WAITALL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagCOWAIT_FLAGS.COWAIT_WAITALL = 1
     * }
     */
    public static int COWAIT_WAITALL() {
        return COWAIT_WAITALL;
    }
    private static final int COWAIT_ALERTABLE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagCOWAIT_FLAGS.COWAIT_ALERTABLE = 2
     * }
     */
    public static int COWAIT_ALERTABLE() {
        return COWAIT_ALERTABLE;
    }
    private static final int COWAIT_INPUTAVAILABLE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagCOWAIT_FLAGS.COWAIT_INPUTAVAILABLE = 4
     * }
     */
    public static int COWAIT_INPUTAVAILABLE() {
        return COWAIT_INPUTAVAILABLE;
    }
    private static final int COWAIT_DISPATCH_CALLS = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagCOWAIT_FLAGS.COWAIT_DISPATCH_CALLS = 8
     * }
     */
    public static int COWAIT_DISPATCH_CALLS() {
        return COWAIT_DISPATCH_CALLS;
    }
    private static final int COWAIT_DISPATCH_WINDOW_MESSAGES = (int)16L;
    /**
     * {@snippet lang=c :
     * enum tagCOWAIT_FLAGS.COWAIT_DISPATCH_WINDOW_MESSAGES = 16
     * }
     */
    public static int COWAIT_DISPATCH_WINDOW_MESSAGES() {
        return COWAIT_DISPATCH_WINDOW_MESSAGES;
    }
    private static final int CWMO_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum CWMO_FLAGS.CWMO_DEFAULT = 0
     * }
     */
    public static int CWMO_DEFAULT() {
        return CWMO_DEFAULT;
    }
    private static final int CWMO_DISPATCH_CALLS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum CWMO_FLAGS.CWMO_DISPATCH_CALLS = 1
     * }
     */
    public static int CWMO_DISPATCH_CALLS() {
        return CWMO_DISPATCH_CALLS;
    }
    private static final int CWMO_DISPATCH_WINDOW_MESSAGES = (int)2L;
    /**
     * {@snippet lang=c :
     * enum CWMO_FLAGS.CWMO_DISPATCH_WINDOW_MESSAGES = 2
     * }
     */
    public static int CWMO_DISPATCH_WINDOW_MESSAGES() {
        return CWMO_DISPATCH_WINDOW_MESSAGES;
    }

    private static class CoWaitForMultipleObjects {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_LONG,
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CoWaitForMultipleObjects"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoWaitForMultipleObjects(DWORD dwFlags, DWORD dwTimeout, ULONG cHandles, const HANDLE *pHandles, LPDWORD lpdwindex)
     * }
     */
    public static FunctionDescriptor CoWaitForMultipleObjects$descriptor() {
        return CoWaitForMultipleObjects.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoWaitForMultipleObjects(DWORD dwFlags, DWORD dwTimeout, ULONG cHandles, const HANDLE *pHandles, LPDWORD lpdwindex)
     * }
     */
    public static MethodHandle CoWaitForMultipleObjects$handle() {
        return CoWaitForMultipleObjects.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CoWaitForMultipleObjects(DWORD dwFlags, DWORD dwTimeout, ULONG cHandles, const HANDLE *pHandles, LPDWORD lpdwindex)
     * }
     */
    public static int CoWaitForMultipleObjects(int dwFlags, int dwTimeout, int cHandles, MemorySegment pHandles, MemorySegment lpdwindex) {
        var mh$ = CoWaitForMultipleObjects.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoWaitForMultipleObjects", dwFlags, dwTimeout, cHandles, pHandles, lpdwindex);
            }
            return (int)mh$.invokeExact(dwFlags, dwTimeout, cHandles, pHandles, lpdwindex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoGetTreatAsClass {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CoGetTreatAsClass"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoGetTreatAsClass(const IID *const clsidOld, LPCLSID pClsidNew)
     * }
     */
    public static FunctionDescriptor CoGetTreatAsClass$descriptor() {
        return CoGetTreatAsClass.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoGetTreatAsClass(const IID *const clsidOld, LPCLSID pClsidNew)
     * }
     */
    public static MethodHandle CoGetTreatAsClass$handle() {
        return CoGetTreatAsClass.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CoGetTreatAsClass(const IID *const clsidOld, LPCLSID pClsidNew)
     * }
     */
    public static int CoGetTreatAsClass(MemorySegment clsidOld, MemorySegment pClsidNew) {
        var mh$ = CoGetTreatAsClass.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoGetTreatAsClass", clsidOld, pClsidNew);
            }
            return (int)mh$.invokeExact(clsidOld, pClsidNew);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoInvalidateRemoteMachineBindings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CoInvalidateRemoteMachineBindings"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInvalidateRemoteMachineBindings(LPOLESTR pszMachineName)
     * }
     */
    public static FunctionDescriptor CoInvalidateRemoteMachineBindings$descriptor() {
        return CoInvalidateRemoteMachineBindings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInvalidateRemoteMachineBindings(LPOLESTR pszMachineName)
     * }
     */
    public static MethodHandle CoInvalidateRemoteMachineBindings$handle() {
        return CoInvalidateRemoteMachineBindings.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CoInvalidateRemoteMachineBindings(LPOLESTR pszMachineName)
     * }
     */
    public static int CoInvalidateRemoteMachineBindings(MemorySegment pszMachineName) {
        var mh$ = CoInvalidateRemoteMachineBindings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInvalidateRemoteMachineBindings", pszMachineName);
            }
            return (int)mh$.invokeExact(pszMachineName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int AGILEREFERENCE_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum AgileReferenceOptions.AGILEREFERENCE_DEFAULT = 0
     * }
     */
    public static int AGILEREFERENCE_DEFAULT() {
        return AGILEREFERENCE_DEFAULT;
    }
    private static final int AGILEREFERENCE_DELAYEDMARSHAL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum AgileReferenceOptions.AGILEREFERENCE_DELAYEDMARSHAL = 1
     * }
     */
    public static int AGILEREFERENCE_DELAYEDMARSHAL() {
        return AGILEREFERENCE_DELAYEDMARSHAL;
    }

    private static class RoGetAgileReference {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_INT,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RoGetAgileReference"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT RoGetAgileReference(enum AgileReferenceOptions options, const IID *const riid, IUnknown *pUnk, IAgileReference **ppAgileReference)
     * }
     */
    public static FunctionDescriptor RoGetAgileReference$descriptor() {
        return RoGetAgileReference.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT RoGetAgileReference(enum AgileReferenceOptions options, const IID *const riid, IUnknown *pUnk, IAgileReference **ppAgileReference)
     * }
     */
    public static MethodHandle RoGetAgileReference$handle() {
        return RoGetAgileReference.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT RoGetAgileReference(enum AgileReferenceOptions options, const IID *const riid, IUnknown *pUnk, IAgileReference **ppAgileReference)
     * }
     */
    public static int RoGetAgileReference(int options, MemorySegment riid, MemorySegment pUnk, MemorySegment ppAgileReference) {
        var mh$ = RoGetAgileReference.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RoGetAgileReference", options, riid, pUnk, ppAgileReference);
            }
            return (int)mh$.invokeExact(options, riid, pUnk, ppAgileReference);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DllGetClassObject {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("DllGetClassObject"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT DllGetClassObject(const IID *const rclsid, const IID *const riid, LPVOID *ppv)
     * }
     */
    public static FunctionDescriptor DllGetClassObject$descriptor() {
        return DllGetClassObject.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT DllGetClassObject(const IID *const rclsid, const IID *const riid, LPVOID *ppv)
     * }
     */
    public static MethodHandle DllGetClassObject$handle() {
        return DllGetClassObject.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT DllGetClassObject(const IID *const rclsid, const IID *const riid, LPVOID *ppv)
     * }
     */
    public static int DllGetClassObject(MemorySegment rclsid, MemorySegment riid, MemorySegment ppv) {
        var mh$ = DllGetClassObject.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DllGetClassObject", rclsid, riid, ppv);
            }
            return (int)mh$.invokeExact(rclsid, riid, ppv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DllCanUnloadNow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("DllCanUnloadNow"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT DllCanUnloadNow()
     * }
     */
    public static FunctionDescriptor DllCanUnloadNow$descriptor() {
        return DllCanUnloadNow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT DllCanUnloadNow()
     * }
     */
    public static MethodHandle DllCanUnloadNow$handle() {
        return DllCanUnloadNow.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT DllCanUnloadNow()
     * }
     */
    public static int DllCanUnloadNow() {
        var mh$ = DllCanUnloadNow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DllCanUnloadNow");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoTaskMemAlloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CoTaskMemAlloc"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LPVOID CoTaskMemAlloc(SIZE_T cb)
     * }
     */
    public static FunctionDescriptor CoTaskMemAlloc$descriptor() {
        return CoTaskMemAlloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LPVOID CoTaskMemAlloc(SIZE_T cb)
     * }
     */
    public static MethodHandle CoTaskMemAlloc$handle() {
        return CoTaskMemAlloc.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LPVOID CoTaskMemAlloc(SIZE_T cb)
     * }
     */
    public static MemorySegment CoTaskMemAlloc(long cb) {
        var mh$ = CoTaskMemAlloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoTaskMemAlloc", cb);
            }
            return (MemorySegment)mh$.invokeExact(cb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoTaskMemRealloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CoTaskMemRealloc"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LPVOID CoTaskMemRealloc(LPVOID pv, SIZE_T cb)
     * }
     */
    public static FunctionDescriptor CoTaskMemRealloc$descriptor() {
        return CoTaskMemRealloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LPVOID CoTaskMemRealloc(LPVOID pv, SIZE_T cb)
     * }
     */
    public static MethodHandle CoTaskMemRealloc$handle() {
        return CoTaskMemRealloc.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LPVOID CoTaskMemRealloc(LPVOID pv, SIZE_T cb)
     * }
     */
    public static MemorySegment CoTaskMemRealloc(MemorySegment pv, long cb) {
        var mh$ = CoTaskMemRealloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoTaskMemRealloc", pv, cb);
            }
            return (MemorySegment)mh$.invokeExact(pv, cb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoTaskMemFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CoTaskMemFree"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void CoTaskMemFree(LPVOID pv)
     * }
     */
    public static FunctionDescriptor CoTaskMemFree$descriptor() {
        return CoTaskMemFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void CoTaskMemFree(LPVOID pv)
     * }
     */
    public static MethodHandle CoTaskMemFree$handle() {
        return CoTaskMemFree.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void CoTaskMemFree(LPVOID pv)
     * }
     */
    public static void CoTaskMemFree(MemorySegment pv) {
        var mh$ = CoTaskMemFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoTaskMemFree", pv);
            }
            mh$.invokeExact(pv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoFileTimeNow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CoFileTimeNow"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoFileTimeNow(FILETIME *lpFileTime)
     * }
     */
    public static FunctionDescriptor CoFileTimeNow$descriptor() {
        return CoFileTimeNow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoFileTimeNow(FILETIME *lpFileTime)
     * }
     */
    public static MethodHandle CoFileTimeNow$handle() {
        return CoFileTimeNow.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CoFileTimeNow(FILETIME *lpFileTime)
     * }
     */
    public static int CoFileTimeNow(MemorySegment lpFileTime) {
        var mh$ = CoFileTimeNow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoFileTimeNow", lpFileTime);
            }
            return (int)mh$.invokeExact(lpFileTime);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CLSIDFromProgIDEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CLSIDFromProgIDEx"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CLSIDFromProgIDEx(LPCOLESTR lpszProgID, LPCLSID lpclsid)
     * }
     */
    public static FunctionDescriptor CLSIDFromProgIDEx$descriptor() {
        return CLSIDFromProgIDEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CLSIDFromProgIDEx(LPCOLESTR lpszProgID, LPCLSID lpclsid)
     * }
     */
    public static MethodHandle CLSIDFromProgIDEx$handle() {
        return CLSIDFromProgIDEx.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CLSIDFromProgIDEx(LPCOLESTR lpszProgID, LPCLSID lpclsid)
     * }
     */
    public static int CLSIDFromProgIDEx(MemorySegment lpszProgID, MemorySegment lpclsid) {
        var mh$ = CLSIDFromProgIDEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CLSIDFromProgIDEx", lpszProgID, lpclsid);
            }
            return (int)mh$.invokeExact(lpszProgID, lpclsid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct CO_DEVICE_CATALOG_COOKIE__ {
     *     int unused;
     * } *CO_DEVICE_CATALOG_COOKIE
     * }
     */
    public static final AddressLayout CO_DEVICE_CATALOG_COOKIE = C_POINTER;

    private static class CoRegisterDeviceCatalog {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CoRegisterDeviceCatalog"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoRegisterDeviceCatalog(PCWSTR deviceInstanceId, CO_DEVICE_CATALOG_COOKIE *cookie)
     * }
     */
    public static FunctionDescriptor CoRegisterDeviceCatalog$descriptor() {
        return CoRegisterDeviceCatalog.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoRegisterDeviceCatalog(PCWSTR deviceInstanceId, CO_DEVICE_CATALOG_COOKIE *cookie)
     * }
     */
    public static MethodHandle CoRegisterDeviceCatalog$handle() {
        return CoRegisterDeviceCatalog.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CoRegisterDeviceCatalog(PCWSTR deviceInstanceId, CO_DEVICE_CATALOG_COOKIE *cookie)
     * }
     */
    public static int CoRegisterDeviceCatalog(MemorySegment deviceInstanceId, MemorySegment cookie) {
        var mh$ = CoRegisterDeviceCatalog.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoRegisterDeviceCatalog", deviceInstanceId, cookie);
            }
            return (int)mh$.invokeExact(deviceInstanceId, cookie);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoRevokeDeviceCatalog {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CoRevokeDeviceCatalog"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoRevokeDeviceCatalog(CO_DEVICE_CATALOG_COOKIE cookie)
     * }
     */
    public static FunctionDescriptor CoRevokeDeviceCatalog$descriptor() {
        return CoRevokeDeviceCatalog.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoRevokeDeviceCatalog(CO_DEVICE_CATALOG_COOKIE cookie)
     * }
     */
    public static MethodHandle CoRevokeDeviceCatalog$handle() {
        return CoRevokeDeviceCatalog.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CoRevokeDeviceCatalog(CO_DEVICE_CATALOG_COOKIE cookie)
     * }
     */
    public static int CoRevokeDeviceCatalog(MemorySegment cookie) {
        var mh$ = CoRevokeDeviceCatalog.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoRevokeDeviceCatalog", cookie);
            }
            return (int)mh$.invokeExact(cookie);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec$layout() {
        return __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec$segment() {
        return __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec() {
        return __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec$layout() {
        return __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec$segment() {
        return __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec() {
        return __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec$layout() {
        return __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec$segment() {
        return __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec() {
        return __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec$layout() {
        return __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec$segment() {
        return __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec() {
        return __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec$layout() {
        return __MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec$segment() {
        return __MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec() {
        return __MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec$layout() {
        return __MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec$segment() {
        return __MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec() {
        return __MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec$layout() {
        return __MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec$segment() {
        return __MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec() {
        return __MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec$layout() {
        return __MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec$segment() {
        return __MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec() {
        return __MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0055_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_objidl_0000_0055_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0055_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0055_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0055_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0055_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0055_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0055_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0055_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0055_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0055_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0055_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0055_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0055_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0055_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0055_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0055_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_objidl_0000_0055_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0055_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0055_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0055_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0055_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0055_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0055_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0055_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0055_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0055_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0055_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0055_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0055_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0055_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0055_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IMallocSpy *LPMALLOCSPY
     * }
     */
    public static final AddressLayout LPMALLOCSPY = C_POINTER;

    private static class IID_IMallocSpy$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IMallocSpy").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMallocSpy
     * }
     */
    public static GroupLayout IID_IMallocSpy$layout() {
        return IID_IMallocSpy$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMallocSpy
     * }
     */
    public static MemorySegment IID_IMallocSpy() {
        return IID_IMallocSpy$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMallocSpy
     * }
     */
    public static void IID_IMallocSpy(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IMallocSpy$constants.SEGMENT, 0L, IID_IMallocSpy$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidl_0000_0056_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_objidl_0000_0056_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0056_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0056_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0056_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0056_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0056_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0056_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0056_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0056_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0056_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0056_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0056_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0056_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0056_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0056_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0056_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_objidl_0000_0056_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0056_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0056_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0056_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0056_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0056_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0056_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0056_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0056_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0056_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0056_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0056_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0056_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0056_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0056_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IBindCtx *LPBC
     * }
     */
    public static final AddressLayout LPBC = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef IBindCtx *LPBINDCTX
     * }
     */
    public static final AddressLayout LPBINDCTX = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagBIND_OPTS {
     *     DWORD cbStruct;
     *     DWORD grfFlags;
     *     DWORD grfMode;
     *     DWORD dwTickCountDeadline;
     * } *LPBIND_OPTS
     * }
     */
    public static final AddressLayout LPBIND_OPTS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagBIND_OPTS2 {
     *     DWORD cbStruct;
     *     DWORD grfFlags;
     *     DWORD grfMode;
     *     DWORD dwTickCountDeadline;
     *     DWORD dwTrackFlags;
     *     DWORD dwClassContext;
     *     LCID locale;
     *     COSERVERINFO *pServerInfo;
     * } *LPBIND_OPTS2
     * }
     */
    public static final AddressLayout LPBIND_OPTS2 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagBIND_OPTS3 {
     *     DWORD cbStruct;
     *     DWORD grfFlags;
     *     DWORD grfMode;
     *     DWORD dwTickCountDeadline;
     *     DWORD dwTrackFlags;
     *     DWORD dwClassContext;
     *     LCID locale;
     *     COSERVERINFO *pServerInfo;
     *     HWND hwnd;
     * } *LPBIND_OPTS3
     * }
     */
    public static final AddressLayout LPBIND_OPTS3 = C_POINTER;
    private static final int BIND_MAYBOTHERUSER = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagBIND_FLAGS.BIND_MAYBOTHERUSER = 1
     * }
     */
    public static int BIND_MAYBOTHERUSER() {
        return BIND_MAYBOTHERUSER;
    }
    private static final int BIND_JUSTTESTEXISTENCE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagBIND_FLAGS.BIND_JUSTTESTEXISTENCE = 2
     * }
     */
    public static int BIND_JUSTTESTEXISTENCE() {
        return BIND_JUSTTESTEXISTENCE;
    }

    private static class IID_IBindCtx$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IBindCtx").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBindCtx
     * }
     */
    public static GroupLayout IID_IBindCtx$layout() {
        return IID_IBindCtx$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBindCtx
     * }
     */
    public static MemorySegment IID_IBindCtx() {
        return IID_IBindCtx$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBindCtx
     * }
     */
    public static void IID_IBindCtx(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IBindCtx$constants.SEGMENT, 0L, IID_IBindCtx$constants.LAYOUT.byteSize());
    }

    private static class IBindCtx_RemoteSetBindOptions_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IBindCtx_RemoteSetBindOptions_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBindCtx_RemoteSetBindOptions_Proxy(IBindCtx *This, BIND_OPTS2 *pbindopts)
     * }
     */
    public static FunctionDescriptor IBindCtx_RemoteSetBindOptions_Proxy$descriptor() {
        return IBindCtx_RemoteSetBindOptions_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBindCtx_RemoteSetBindOptions_Proxy(IBindCtx *This, BIND_OPTS2 *pbindopts)
     * }
     */
    public static MethodHandle IBindCtx_RemoteSetBindOptions_Proxy$handle() {
        return IBindCtx_RemoteSetBindOptions_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IBindCtx_RemoteSetBindOptions_Proxy(IBindCtx *This, BIND_OPTS2 *pbindopts)
     * }
     */
    public static int IBindCtx_RemoteSetBindOptions_Proxy(MemorySegment This, MemorySegment pbindopts) {
        var mh$ = IBindCtx_RemoteSetBindOptions_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindCtx_RemoteSetBindOptions_Proxy", This, pbindopts);
            }
            return (int)mh$.invokeExact(This, pbindopts);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindCtx_RemoteSetBindOptions_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IBindCtx_RemoteSetBindOptions_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IBindCtx_RemoteSetBindOptions_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IBindCtx_RemoteSetBindOptions_Stub$descriptor() {
        return IBindCtx_RemoteSetBindOptions_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IBindCtx_RemoteSetBindOptions_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IBindCtx_RemoteSetBindOptions_Stub$handle() {
        return IBindCtx_RemoteSetBindOptions_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void IBindCtx_RemoteSetBindOptions_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IBindCtx_RemoteSetBindOptions_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IBindCtx_RemoteSetBindOptions_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindCtx_RemoteSetBindOptions_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindCtx_RemoteGetBindOptions_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IBindCtx_RemoteGetBindOptions_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBindCtx_RemoteGetBindOptions_Proxy(IBindCtx *This, BIND_OPTS2 *pbindopts)
     * }
     */
    public static FunctionDescriptor IBindCtx_RemoteGetBindOptions_Proxy$descriptor() {
        return IBindCtx_RemoteGetBindOptions_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBindCtx_RemoteGetBindOptions_Proxy(IBindCtx *This, BIND_OPTS2 *pbindopts)
     * }
     */
    public static MethodHandle IBindCtx_RemoteGetBindOptions_Proxy$handle() {
        return IBindCtx_RemoteGetBindOptions_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IBindCtx_RemoteGetBindOptions_Proxy(IBindCtx *This, BIND_OPTS2 *pbindopts)
     * }
     */
    public static int IBindCtx_RemoteGetBindOptions_Proxy(MemorySegment This, MemorySegment pbindopts) {
        var mh$ = IBindCtx_RemoteGetBindOptions_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindCtx_RemoteGetBindOptions_Proxy", This, pbindopts);
            }
            return (int)mh$.invokeExact(This, pbindopts);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindCtx_RemoteGetBindOptions_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IBindCtx_RemoteGetBindOptions_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IBindCtx_RemoteGetBindOptions_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IBindCtx_RemoteGetBindOptions_Stub$descriptor() {
        return IBindCtx_RemoteGetBindOptions_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IBindCtx_RemoteGetBindOptions_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IBindCtx_RemoteGetBindOptions_Stub$handle() {
        return IBindCtx_RemoteGetBindOptions_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void IBindCtx_RemoteGetBindOptions_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IBindCtx_RemoteGetBindOptions_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IBindCtx_RemoteGetBindOptions_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindCtx_RemoteGetBindOptions_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef IEnumMoniker *LPENUMMONIKER
     * }
     */
    public static final AddressLayout LPENUMMONIKER = C_POINTER;

    private static class IID_IEnumMoniker$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IEnumMoniker").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumMoniker
     * }
     */
    public static GroupLayout IID_IEnumMoniker$layout() {
        return IID_IEnumMoniker$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumMoniker
     * }
     */
    public static MemorySegment IID_IEnumMoniker() {
        return IID_IEnumMoniker$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumMoniker
     * }
     */
    public static void IID_IEnumMoniker(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IEnumMoniker$constants.SEGMENT, 0L, IID_IEnumMoniker$constants.LAYOUT.byteSize());
    }

    private static class IEnumMoniker_RemoteNext_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IEnumMoniker_RemoteNext_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumMoniker_RemoteNext_Proxy(IEnumMoniker *This, ULONG celt, IMoniker **rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumMoniker_RemoteNext_Proxy$descriptor() {
        return IEnumMoniker_RemoteNext_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumMoniker_RemoteNext_Proxy(IEnumMoniker *This, ULONG celt, IMoniker **rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumMoniker_RemoteNext_Proxy$handle() {
        return IEnumMoniker_RemoteNext_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IEnumMoniker_RemoteNext_Proxy(IEnumMoniker *This, ULONG celt, IMoniker **rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumMoniker_RemoteNext_Proxy(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumMoniker_RemoteNext_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumMoniker_RemoteNext_Proxy", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumMoniker_RemoteNext_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IEnumMoniker_RemoteNext_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IEnumMoniker_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IEnumMoniker_RemoteNext_Stub$descriptor() {
        return IEnumMoniker_RemoteNext_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IEnumMoniker_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IEnumMoniker_RemoteNext_Stub$handle() {
        return IEnumMoniker_RemoteNext_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void IEnumMoniker_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IEnumMoniker_RemoteNext_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IEnumMoniker_RemoteNext_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumMoniker_RemoteNext_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_objidl_0000_0058_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_objidl_0000_0058_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0058_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0058_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0058_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0058_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0058_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0058_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0058_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0058_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0058_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0058_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0058_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0058_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0058_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0058_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0058_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_objidl_0000_0058_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0058_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0058_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0058_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0058_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0058_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0058_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0058_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0058_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0058_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0058_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0058_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0058_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0058_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0058_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IRunnableObject *LPRUNNABLEOBJECT
     * }
     */
    public static final AddressLayout LPRUNNABLEOBJECT = C_POINTER;

    private static class IID_IRunnableObject$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IRunnableObject").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRunnableObject
     * }
     */
    public static GroupLayout IID_IRunnableObject$layout() {
        return IID_IRunnableObject$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRunnableObject
     * }
     */
    public static MemorySegment IID_IRunnableObject() {
        return IID_IRunnableObject$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRunnableObject
     * }
     */
    public static void IID_IRunnableObject(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IRunnableObject$constants.SEGMENT, 0L, IID_IRunnableObject$constants.LAYOUT.byteSize());
    }

    private static class IRunnableObject_RemoteIsRunning_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IRunnableObject_RemoteIsRunning_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IRunnableObject_RemoteIsRunning_Proxy(IRunnableObject *This)
     * }
     */
    public static FunctionDescriptor IRunnableObject_RemoteIsRunning_Proxy$descriptor() {
        return IRunnableObject_RemoteIsRunning_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IRunnableObject_RemoteIsRunning_Proxy(IRunnableObject *This)
     * }
     */
    public static MethodHandle IRunnableObject_RemoteIsRunning_Proxy$handle() {
        return IRunnableObject_RemoteIsRunning_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IRunnableObject_RemoteIsRunning_Proxy(IRunnableObject *This)
     * }
     */
    public static int IRunnableObject_RemoteIsRunning_Proxy(MemorySegment This) {
        var mh$ = IRunnableObject_RemoteIsRunning_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IRunnableObject_RemoteIsRunning_Proxy", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IRunnableObject_RemoteIsRunning_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IRunnableObject_RemoteIsRunning_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IRunnableObject_RemoteIsRunning_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IRunnableObject_RemoteIsRunning_Stub$descriptor() {
        return IRunnableObject_RemoteIsRunning_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IRunnableObject_RemoteIsRunning_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IRunnableObject_RemoteIsRunning_Stub$handle() {
        return IRunnableObject_RemoteIsRunning_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void IRunnableObject_RemoteIsRunning_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IRunnableObject_RemoteIsRunning_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IRunnableObject_RemoteIsRunning_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IRunnableObject_RemoteIsRunning_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef IRunningObjectTable *LPRUNNINGOBJECTTABLE
     * }
     */
    public static final AddressLayout LPRUNNINGOBJECTTABLE = C_POINTER;

    private static class IID_IRunningObjectTable$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IRunningObjectTable").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRunningObjectTable
     * }
     */
    public static GroupLayout IID_IRunningObjectTable$layout() {
        return IID_IRunningObjectTable$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRunningObjectTable
     * }
     */
    public static MemorySegment IID_IRunningObjectTable() {
        return IID_IRunningObjectTable$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRunningObjectTable
     * }
     */
    public static void IID_IRunningObjectTable(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IRunningObjectTable$constants.SEGMENT, 0L, IID_IRunningObjectTable$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidl_0000_0060_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_objidl_0000_0060_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0060_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0060_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0060_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0060_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0060_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0060_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0060_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0060_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0060_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0060_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0060_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0060_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0060_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0060_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0060_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_objidl_0000_0060_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0060_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0060_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0060_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0060_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0060_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0060_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0060_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0060_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0060_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0060_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0060_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0060_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0060_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0060_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IPersist *LPPERSIST
     * }
     */
    public static final AddressLayout LPPERSIST = C_POINTER;

    private static class IID_IPersist$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IPersist").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPersist
     * }
     */
    public static GroupLayout IID_IPersist$layout() {
        return IID_IPersist$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPersist
     * }
     */
    public static MemorySegment IID_IPersist() {
        return IID_IPersist$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPersist
     * }
     */
    public static void IID_IPersist(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IPersist$constants.SEGMENT, 0L, IID_IPersist$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IPersistStream *LPPERSISTSTREAM
     * }
     */
    public static final AddressLayout LPPERSISTSTREAM = C_POINTER;

    private static class IID_IPersistStream$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IPersistStream").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPersistStream
     * }
     */
    public static GroupLayout IID_IPersistStream$layout() {
        return IID_IPersistStream$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPersistStream
     * }
     */
    public static MemorySegment IID_IPersistStream() {
        return IID_IPersistStream$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPersistStream
     * }
     */
    public static void IID_IPersistStream(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IPersistStream$constants.SEGMENT, 0L, IID_IPersistStream$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IMoniker *LPMONIKER
     * }
     */
    public static final AddressLayout LPMONIKER = C_POINTER;
    private static final int MKSYS_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagMKSYS.MKSYS_NONE = 0
     * }
     */
    public static int MKSYS_NONE() {
        return MKSYS_NONE;
    }
    private static final int MKSYS_GENERICCOMPOSITE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagMKSYS.MKSYS_GENERICCOMPOSITE = 1
     * }
     */
    public static int MKSYS_GENERICCOMPOSITE() {
        return MKSYS_GENERICCOMPOSITE;
    }
    private static final int MKSYS_FILEMONIKER = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagMKSYS.MKSYS_FILEMONIKER = 2
     * }
     */
    public static int MKSYS_FILEMONIKER() {
        return MKSYS_FILEMONIKER;
    }
    private static final int MKSYS_ANTIMONIKER = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagMKSYS.MKSYS_ANTIMONIKER = 3
     * }
     */
    public static int MKSYS_ANTIMONIKER() {
        return MKSYS_ANTIMONIKER;
    }
    private static final int MKSYS_ITEMMONIKER = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagMKSYS.MKSYS_ITEMMONIKER = 4
     * }
     */
    public static int MKSYS_ITEMMONIKER() {
        return MKSYS_ITEMMONIKER;
    }
    private static final int MKSYS_POINTERMONIKER = (int)5L;
    /**
     * {@snippet lang=c :
     * enum tagMKSYS.MKSYS_POINTERMONIKER = 5
     * }
     */
    public static int MKSYS_POINTERMONIKER() {
        return MKSYS_POINTERMONIKER;
    }
    private static final int MKSYS_CLASSMONIKER = (int)7L;
    /**
     * {@snippet lang=c :
     * enum tagMKSYS.MKSYS_CLASSMONIKER = 7
     * }
     */
    public static int MKSYS_CLASSMONIKER() {
        return MKSYS_CLASSMONIKER;
    }
    private static final int MKSYS_OBJREFMONIKER = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagMKSYS.MKSYS_OBJREFMONIKER = 8
     * }
     */
    public static int MKSYS_OBJREFMONIKER() {
        return MKSYS_OBJREFMONIKER;
    }
    private static final int MKSYS_SESSIONMONIKER = (int)9L;
    /**
     * {@snippet lang=c :
     * enum tagMKSYS.MKSYS_SESSIONMONIKER = 9
     * }
     */
    public static int MKSYS_SESSIONMONIKER() {
        return MKSYS_SESSIONMONIKER;
    }
    private static final int MKSYS_LUAMONIKER = (int)10L;
    /**
     * {@snippet lang=c :
     * enum tagMKSYS.MKSYS_LUAMONIKER = 10
     * }
     */
    public static int MKSYS_LUAMONIKER() {
        return MKSYS_LUAMONIKER;
    }
    private static final int MKRREDUCE_ONE = (int)196608L;
    /**
     * {@snippet lang=c :
     * enum tagMKREDUCE.MKRREDUCE_ONE = 196608
     * }
     */
    public static int MKRREDUCE_ONE() {
        return MKRREDUCE_ONE;
    }
    private static final int MKRREDUCE_TOUSER = (int)131072L;
    /**
     * {@snippet lang=c :
     * enum tagMKREDUCE.MKRREDUCE_TOUSER = 131072
     * }
     */
    public static int MKRREDUCE_TOUSER() {
        return MKRREDUCE_TOUSER;
    }
    private static final int MKRREDUCE_THROUGHUSER = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum tagMKREDUCE.MKRREDUCE_THROUGHUSER = 65536
     * }
     */
    public static int MKRREDUCE_THROUGHUSER() {
        return MKRREDUCE_THROUGHUSER;
    }
    private static final int MKRREDUCE_ALL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagMKREDUCE.MKRREDUCE_ALL = 0
     * }
     */
    public static int MKRREDUCE_ALL() {
        return MKRREDUCE_ALL;
    }

    private static class IID_IMoniker$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IMoniker").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMoniker
     * }
     */
    public static GroupLayout IID_IMoniker$layout() {
        return IID_IMoniker$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMoniker
     * }
     */
    public static MemorySegment IID_IMoniker() {
        return IID_IMoniker$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMoniker
     * }
     */
    public static void IID_IMoniker(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IMoniker$constants.SEGMENT, 0L, IID_IMoniker$constants.LAYOUT.byteSize());
    }

    private static class IMoniker_RemoteBindToObject_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IMoniker_RemoteBindToObject_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IMoniker_RemoteBindToObject_Proxy(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riidResult, IUnknown **ppvResult)
     * }
     */
    public static FunctionDescriptor IMoniker_RemoteBindToObject_Proxy$descriptor() {
        return IMoniker_RemoteBindToObject_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IMoniker_RemoteBindToObject_Proxy(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riidResult, IUnknown **ppvResult)
     * }
     */
    public static MethodHandle IMoniker_RemoteBindToObject_Proxy$handle() {
        return IMoniker_RemoteBindToObject_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IMoniker_RemoteBindToObject_Proxy(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riidResult, IUnknown **ppvResult)
     * }
     */
    public static int IMoniker_RemoteBindToObject_Proxy(MemorySegment This, MemorySegment pbc, MemorySegment pmkToLeft, MemorySegment riidResult, MemorySegment ppvResult) {
        var mh$ = IMoniker_RemoteBindToObject_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IMoniker_RemoteBindToObject_Proxy", This, pbc, pmkToLeft, riidResult, ppvResult);
            }
            return (int)mh$.invokeExact(This, pbc, pmkToLeft, riidResult, ppvResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IMoniker_RemoteBindToObject_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IMoniker_RemoteBindToObject_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IMoniker_RemoteBindToObject_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IMoniker_RemoteBindToObject_Stub$descriptor() {
        return IMoniker_RemoteBindToObject_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IMoniker_RemoteBindToObject_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IMoniker_RemoteBindToObject_Stub$handle() {
        return IMoniker_RemoteBindToObject_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void IMoniker_RemoteBindToObject_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IMoniker_RemoteBindToObject_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IMoniker_RemoteBindToObject_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IMoniker_RemoteBindToObject_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IMoniker_RemoteBindToStorage_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IMoniker_RemoteBindToStorage_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IMoniker_RemoteBindToStorage_Proxy(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static FunctionDescriptor IMoniker_RemoteBindToStorage_Proxy$descriptor() {
        return IMoniker_RemoteBindToStorage_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IMoniker_RemoteBindToStorage_Proxy(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static MethodHandle IMoniker_RemoteBindToStorage_Proxy$handle() {
        return IMoniker_RemoteBindToStorage_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IMoniker_RemoteBindToStorage_Proxy(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static int IMoniker_RemoteBindToStorage_Proxy(MemorySegment This, MemorySegment pbc, MemorySegment pmkToLeft, MemorySegment riid, MemorySegment ppvObj) {
        var mh$ = IMoniker_RemoteBindToStorage_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IMoniker_RemoteBindToStorage_Proxy", This, pbc, pmkToLeft, riid, ppvObj);
            }
            return (int)mh$.invokeExact(This, pbc, pmkToLeft, riid, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IMoniker_RemoteBindToStorage_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IMoniker_RemoteBindToStorage_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IMoniker_RemoteBindToStorage_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IMoniker_RemoteBindToStorage_Stub$descriptor() {
        return IMoniker_RemoteBindToStorage_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IMoniker_RemoteBindToStorage_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IMoniker_RemoteBindToStorage_Stub$handle() {
        return IMoniker_RemoteBindToStorage_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void IMoniker_RemoteBindToStorage_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IMoniker_RemoteBindToStorage_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IMoniker_RemoteBindToStorage_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IMoniker_RemoteBindToStorage_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_objidl_0000_0063_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_objidl_0000_0063_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0063_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0063_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0063_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0063_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0063_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0063_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0063_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0063_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0063_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0063_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0063_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0063_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0063_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0063_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0063_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_objidl_0000_0063_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0063_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0063_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0063_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0063_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0063_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0063_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0063_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0063_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0063_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0063_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0063_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0063_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0063_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0063_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IROTData$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IROTData").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IROTData
     * }
     */
    public static GroupLayout IID_IROTData$layout() {
        return IID_IROTData$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IROTData
     * }
     */
    public static MemorySegment IID_IROTData() {
        return IID_IROTData$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IROTData
     * }
     */
    public static void IID_IROTData(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IROTData$constants.SEGMENT, 0L, IID_IROTData$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidl_0000_0064_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_objidl_0000_0064_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0064_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0064_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0064_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0064_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0064_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0064_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0064_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0064_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0064_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0064_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0064_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0064_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0064_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0064_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0064_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_objidl_0000_0064_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0064_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0064_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0064_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0064_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0064_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0064_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0064_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0064_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0064_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0064_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0064_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0064_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0064_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0064_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IEnumSTATSTG *LPENUMSTATSTG
     * }
     */
    public static final AddressLayout LPENUMSTATSTG = C_POINTER;

    private static class IID_IEnumSTATSTG$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IEnumSTATSTG").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumSTATSTG
     * }
     */
    public static GroupLayout IID_IEnumSTATSTG$layout() {
        return IID_IEnumSTATSTG$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumSTATSTG
     * }
     */
    public static MemorySegment IID_IEnumSTATSTG() {
        return IID_IEnumSTATSTG$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumSTATSTG
     * }
     */
    public static void IID_IEnumSTATSTG(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IEnumSTATSTG$constants.SEGMENT, 0L, IID_IEnumSTATSTG$constants.LAYOUT.byteSize());
    }

    private static class IEnumSTATSTG_RemoteNext_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IEnumSTATSTG_RemoteNext_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATSTG_RemoteNext_Proxy(IEnumSTATSTG *This, ULONG celt, STATSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumSTATSTG_RemoteNext_Proxy$descriptor() {
        return IEnumSTATSTG_RemoteNext_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATSTG_RemoteNext_Proxy(IEnumSTATSTG *This, ULONG celt, STATSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumSTATSTG_RemoteNext_Proxy$handle() {
        return IEnumSTATSTG_RemoteNext_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IEnumSTATSTG_RemoteNext_Proxy(IEnumSTATSTG *This, ULONG celt, STATSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumSTATSTG_RemoteNext_Proxy(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumSTATSTG_RemoteNext_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumSTATSTG_RemoteNext_Proxy", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumSTATSTG_RemoteNext_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IEnumSTATSTG_RemoteNext_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IEnumSTATSTG_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IEnumSTATSTG_RemoteNext_Stub$descriptor() {
        return IEnumSTATSTG_RemoteNext_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IEnumSTATSTG_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IEnumSTATSTG_RemoteNext_Stub$handle() {
        return IEnumSTATSTG_RemoteNext_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void IEnumSTATSTG_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IEnumSTATSTG_RemoteNext_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IEnumSTATSTG_RemoteNext_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumSTATSTG_RemoteNext_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef IStorage *LPSTORAGE
     * }
     */
    public static final AddressLayout LPSTORAGE = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef RemSNB *wireSNB
     * }
     */
    public static final AddressLayout wireSNB = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPOLESTR *SNB
     * }
     */
    public static final AddressLayout SNB = C_POINTER;

    private static class IID_IStorage$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IStorage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IStorage
     * }
     */
    public static GroupLayout IID_IStorage$layout() {
        return IID_IStorage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IStorage
     * }
     */
    public static MemorySegment IID_IStorage() {
        return IID_IStorage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IStorage
     * }
     */
    public static void IID_IStorage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IStorage$constants.SEGMENT, 0L, IID_IStorage$constants.LAYOUT.byteSize());
    }

    private static class IStorage_RemoteOpenStream_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IStorage_RemoteOpenStream_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IStorage_RemoteOpenStream_Proxy(IStorage *This, const OLECHAR *pwcsName, ULONG cbReserved1, byte *reserved1, DWORD grfMode, DWORD reserved2, IStream **ppstm)
     * }
     */
    public static FunctionDescriptor IStorage_RemoteOpenStream_Proxy$descriptor() {
        return IStorage_RemoteOpenStream_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IStorage_RemoteOpenStream_Proxy(IStorage *This, const OLECHAR *pwcsName, ULONG cbReserved1, byte *reserved1, DWORD grfMode, DWORD reserved2, IStream **ppstm)
     * }
     */
    public static MethodHandle IStorage_RemoteOpenStream_Proxy$handle() {
        return IStorage_RemoteOpenStream_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IStorage_RemoteOpenStream_Proxy(IStorage *This, const OLECHAR *pwcsName, ULONG cbReserved1, byte *reserved1, DWORD grfMode, DWORD reserved2, IStream **ppstm)
     * }
     */
    public static int IStorage_RemoteOpenStream_Proxy(MemorySegment This, MemorySegment pwcsName, int cbReserved1, MemorySegment reserved1, int grfMode, int reserved2, MemorySegment ppstm) {
        var mh$ = IStorage_RemoteOpenStream_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IStorage_RemoteOpenStream_Proxy", This, pwcsName, cbReserved1, reserved1, grfMode, reserved2, ppstm);
            }
            return (int)mh$.invokeExact(This, pwcsName, cbReserved1, reserved1, grfMode, reserved2, ppstm);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IStorage_RemoteOpenStream_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IStorage_RemoteOpenStream_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IStorage_RemoteOpenStream_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IStorage_RemoteOpenStream_Stub$descriptor() {
        return IStorage_RemoteOpenStream_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IStorage_RemoteOpenStream_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IStorage_RemoteOpenStream_Stub$handle() {
        return IStorage_RemoteOpenStream_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void IStorage_RemoteOpenStream_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IStorage_RemoteOpenStream_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IStorage_RemoteOpenStream_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IStorage_RemoteOpenStream_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IStorage_RemoteCopyTo_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IStorage_RemoteCopyTo_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IStorage_RemoteCopyTo_Proxy(IStorage *This, DWORD ciidExclude, const IID *rgiidExclude, SNB snbExclude, IStorage *pstgDest)
     * }
     */
    public static FunctionDescriptor IStorage_RemoteCopyTo_Proxy$descriptor() {
        return IStorage_RemoteCopyTo_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IStorage_RemoteCopyTo_Proxy(IStorage *This, DWORD ciidExclude, const IID *rgiidExclude, SNB snbExclude, IStorage *pstgDest)
     * }
     */
    public static MethodHandle IStorage_RemoteCopyTo_Proxy$handle() {
        return IStorage_RemoteCopyTo_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IStorage_RemoteCopyTo_Proxy(IStorage *This, DWORD ciidExclude, const IID *rgiidExclude, SNB snbExclude, IStorage *pstgDest)
     * }
     */
    public static int IStorage_RemoteCopyTo_Proxy(MemorySegment This, int ciidExclude, MemorySegment rgiidExclude, MemorySegment snbExclude, MemorySegment pstgDest) {
        var mh$ = IStorage_RemoteCopyTo_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IStorage_RemoteCopyTo_Proxy", This, ciidExclude, rgiidExclude, snbExclude, pstgDest);
            }
            return (int)mh$.invokeExact(This, ciidExclude, rgiidExclude, snbExclude, pstgDest);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IStorage_RemoteCopyTo_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IStorage_RemoteCopyTo_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IStorage_RemoteCopyTo_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IStorage_RemoteCopyTo_Stub$descriptor() {
        return IStorage_RemoteCopyTo_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IStorage_RemoteCopyTo_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IStorage_RemoteCopyTo_Stub$handle() {
        return IStorage_RemoteCopyTo_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void IStorage_RemoteCopyTo_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IStorage_RemoteCopyTo_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IStorage_RemoteCopyTo_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IStorage_RemoteCopyTo_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IStorage_RemoteEnumElements_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IStorage_RemoteEnumElements_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IStorage_RemoteEnumElements_Proxy(IStorage *This, DWORD reserved1, ULONG cbReserved2, byte *reserved2, DWORD reserved3, IEnumSTATSTG **ppenum)
     * }
     */
    public static FunctionDescriptor IStorage_RemoteEnumElements_Proxy$descriptor() {
        return IStorage_RemoteEnumElements_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IStorage_RemoteEnumElements_Proxy(IStorage *This, DWORD reserved1, ULONG cbReserved2, byte *reserved2, DWORD reserved3, IEnumSTATSTG **ppenum)
     * }
     */
    public static MethodHandle IStorage_RemoteEnumElements_Proxy$handle() {
        return IStorage_RemoteEnumElements_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IStorage_RemoteEnumElements_Proxy(IStorage *This, DWORD reserved1, ULONG cbReserved2, byte *reserved2, DWORD reserved3, IEnumSTATSTG **ppenum)
     * }
     */
    public static int IStorage_RemoteEnumElements_Proxy(MemorySegment This, int reserved1, int cbReserved2, MemorySegment reserved2, int reserved3, MemorySegment ppenum) {
        var mh$ = IStorage_RemoteEnumElements_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IStorage_RemoteEnumElements_Proxy", This, reserved1, cbReserved2, reserved2, reserved3, ppenum);
            }
            return (int)mh$.invokeExact(This, reserved1, cbReserved2, reserved2, reserved3, ppenum);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IStorage_RemoteEnumElements_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IStorage_RemoteEnumElements_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IStorage_RemoteEnumElements_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IStorage_RemoteEnumElements_Stub$descriptor() {
        return IStorage_RemoteEnumElements_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IStorage_RemoteEnumElements_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IStorage_RemoteEnumElements_Stub$handle() {
        return IStorage_RemoteEnumElements_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void IStorage_RemoteEnumElements_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IStorage_RemoteEnumElements_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IStorage_RemoteEnumElements_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IStorage_RemoteEnumElements_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_objidl_0000_0066_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_objidl_0000_0066_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0066_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0066_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0066_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0066_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0066_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0066_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0066_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0066_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0066_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0066_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0066_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0066_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0066_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0066_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0066_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_objidl_0000_0066_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0066_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0066_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0066_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0066_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0066_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0066_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0066_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0066_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0066_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0066_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0066_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0066_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0066_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0066_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IPersistFile *LPPERSISTFILE
     * }
     */
    public static final AddressLayout LPPERSISTFILE = C_POINTER;

    private static class IID_IPersistFile$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IPersistFile").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPersistFile
     * }
     */
    public static GroupLayout IID_IPersistFile$layout() {
        return IID_IPersistFile$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPersistFile
     * }
     */
    public static MemorySegment IID_IPersistFile() {
        return IID_IPersistFile$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPersistFile
     * }
     */
    public static void IID_IPersistFile(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IPersistFile$constants.SEGMENT, 0L, IID_IPersistFile$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IPersistStorage *LPPERSISTSTORAGE
     * }
     */
    public static final AddressLayout LPPERSISTSTORAGE = C_POINTER;

    private static class IID_IPersistStorage$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IPersistStorage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPersistStorage
     * }
     */
    public static GroupLayout IID_IPersistStorage$layout() {
        return IID_IPersistStorage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPersistStorage
     * }
     */
    public static MemorySegment IID_IPersistStorage() {
        return IID_IPersistStorage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPersistStorage
     * }
     */
    public static void IID_IPersistStorage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IPersistStorage$constants.SEGMENT, 0L, IID_IPersistStorage$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidl_0000_0068_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_objidl_0000_0068_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0068_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0068_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0068_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0068_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0068_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0068_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0068_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0068_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0068_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0068_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0068_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0068_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0068_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0068_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0068_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_objidl_0000_0068_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0068_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0068_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0068_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0068_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0068_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0068_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0068_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0068_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0068_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0068_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0068_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0068_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0068_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0068_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef ILockBytes *LPLOCKBYTES
     * }
     */
    public static final AddressLayout LPLOCKBYTES = C_POINTER;

    private static class IID_ILockBytes$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_ILockBytes").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ILockBytes
     * }
     */
    public static GroupLayout IID_ILockBytes$layout() {
        return IID_ILockBytes$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ILockBytes
     * }
     */
    public static MemorySegment IID_ILockBytes() {
        return IID_ILockBytes$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ILockBytes
     * }
     */
    public static void IID_ILockBytes(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ILockBytes$constants.SEGMENT, 0L, IID_ILockBytes$constants.LAYOUT.byteSize());
    }

    private static class ILockBytes_RemoteReadAt_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            _ULARGE_INTEGER.layout(),
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ILockBytes_RemoteReadAt_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ILockBytes_RemoteReadAt_Proxy(ILockBytes *This, ULARGE_INTEGER ulOffset, byte *pv, ULONG cb, ULONG *pcbRead)
     * }
     */
    public static FunctionDescriptor ILockBytes_RemoteReadAt_Proxy$descriptor() {
        return ILockBytes_RemoteReadAt_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ILockBytes_RemoteReadAt_Proxy(ILockBytes *This, ULARGE_INTEGER ulOffset, byte *pv, ULONG cb, ULONG *pcbRead)
     * }
     */
    public static MethodHandle ILockBytes_RemoteReadAt_Proxy$handle() {
        return ILockBytes_RemoteReadAt_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ILockBytes_RemoteReadAt_Proxy(ILockBytes *This, ULARGE_INTEGER ulOffset, byte *pv, ULONG cb, ULONG *pcbRead)
     * }
     */
    public static int ILockBytes_RemoteReadAt_Proxy(MemorySegment This, MemorySegment ulOffset, MemorySegment pv, int cb, MemorySegment pcbRead) {
        var mh$ = ILockBytes_RemoteReadAt_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ILockBytes_RemoteReadAt_Proxy", This, ulOffset, pv, cb, pcbRead);
            }
            return (int)mh$.invokeExact(This, ulOffset, pv, cb, pcbRead);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ILockBytes_RemoteReadAt_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ILockBytes_RemoteReadAt_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ILockBytes_RemoteReadAt_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ILockBytes_RemoteReadAt_Stub$descriptor() {
        return ILockBytes_RemoteReadAt_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ILockBytes_RemoteReadAt_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ILockBytes_RemoteReadAt_Stub$handle() {
        return ILockBytes_RemoteReadAt_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void ILockBytes_RemoteReadAt_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ILockBytes_RemoteReadAt_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ILockBytes_RemoteReadAt_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ILockBytes_RemoteReadAt_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ILockBytes_RemoteWriteAt_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            _ULARGE_INTEGER.layout(),
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ILockBytes_RemoteWriteAt_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ILockBytes_RemoteWriteAt_Proxy(ILockBytes *This, ULARGE_INTEGER ulOffset, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static FunctionDescriptor ILockBytes_RemoteWriteAt_Proxy$descriptor() {
        return ILockBytes_RemoteWriteAt_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ILockBytes_RemoteWriteAt_Proxy(ILockBytes *This, ULARGE_INTEGER ulOffset, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static MethodHandle ILockBytes_RemoteWriteAt_Proxy$handle() {
        return ILockBytes_RemoteWriteAt_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ILockBytes_RemoteWriteAt_Proxy(ILockBytes *This, ULARGE_INTEGER ulOffset, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static int ILockBytes_RemoteWriteAt_Proxy(MemorySegment This, MemorySegment ulOffset, MemorySegment pv, int cb, MemorySegment pcbWritten) {
        var mh$ = ILockBytes_RemoteWriteAt_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ILockBytes_RemoteWriteAt_Proxy", This, ulOffset, pv, cb, pcbWritten);
            }
            return (int)mh$.invokeExact(This, ulOffset, pv, cb, pcbWritten);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ILockBytes_RemoteWriteAt_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ILockBytes_RemoteWriteAt_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ILockBytes_RemoteWriteAt_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ILockBytes_RemoteWriteAt_Stub$descriptor() {
        return ILockBytes_RemoteWriteAt_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ILockBytes_RemoteWriteAt_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ILockBytes_RemoteWriteAt_Stub$handle() {
        return ILockBytes_RemoteWriteAt_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void ILockBytes_RemoteWriteAt_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ILockBytes_RemoteWriteAt_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ILockBytes_RemoteWriteAt_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ILockBytes_RemoteWriteAt_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef IEnumFORMATETC *LPENUMFORMATETC
     * }
     */
    public static final AddressLayout LPENUMFORMATETC = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef CLIPFORMAT *LPCLIPFORMAT
     * }
     */
    public static final AddressLayout LPCLIPFORMAT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagFORMATETC {
     *     CLIPFORMAT cfFormat;
     *     DVTARGETDEVICE *ptd;
     *     DWORD dwAspect;
     *     LONG lindex;
     *     DWORD tymed;
     * } *LPFORMATETC
     * }
     */
    public static final AddressLayout LPFORMATETC = C_POINTER;

    private static class IID_IEnumFORMATETC$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IEnumFORMATETC").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumFORMATETC
     * }
     */
    public static GroupLayout IID_IEnumFORMATETC$layout() {
        return IID_IEnumFORMATETC$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumFORMATETC
     * }
     */
    public static MemorySegment IID_IEnumFORMATETC() {
        return IID_IEnumFORMATETC$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumFORMATETC
     * }
     */
    public static void IID_IEnumFORMATETC(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IEnumFORMATETC$constants.SEGMENT, 0L, IID_IEnumFORMATETC$constants.LAYOUT.byteSize());
    }

    private static class IEnumFORMATETC_RemoteNext_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IEnumFORMATETC_RemoteNext_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumFORMATETC_RemoteNext_Proxy(IEnumFORMATETC *This, ULONG celt, FORMATETC *rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumFORMATETC_RemoteNext_Proxy$descriptor() {
        return IEnumFORMATETC_RemoteNext_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumFORMATETC_RemoteNext_Proxy(IEnumFORMATETC *This, ULONG celt, FORMATETC *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumFORMATETC_RemoteNext_Proxy$handle() {
        return IEnumFORMATETC_RemoteNext_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IEnumFORMATETC_RemoteNext_Proxy(IEnumFORMATETC *This, ULONG celt, FORMATETC *rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumFORMATETC_RemoteNext_Proxy(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumFORMATETC_RemoteNext_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumFORMATETC_RemoteNext_Proxy", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumFORMATETC_RemoteNext_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IEnumFORMATETC_RemoteNext_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IEnumFORMATETC_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IEnumFORMATETC_RemoteNext_Stub$descriptor() {
        return IEnumFORMATETC_RemoteNext_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IEnumFORMATETC_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IEnumFORMATETC_RemoteNext_Stub$handle() {
        return IEnumFORMATETC_RemoteNext_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void IEnumFORMATETC_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IEnumFORMATETC_RemoteNext_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IEnumFORMATETC_RemoteNext_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumFORMATETC_RemoteNext_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef IEnumSTATDATA *LPENUMSTATDATA
     * }
     */
    public static final AddressLayout LPENUMSTATDATA = C_POINTER;
    private static final int ADVF_NODATA = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagADVF.ADVF_NODATA = 1
     * }
     */
    public static int ADVF_NODATA() {
        return ADVF_NODATA;
    }
    private static final int ADVF_PRIMEFIRST = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagADVF.ADVF_PRIMEFIRST = 2
     * }
     */
    public static int ADVF_PRIMEFIRST() {
        return ADVF_PRIMEFIRST;
    }
    private static final int ADVF_ONLYONCE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagADVF.ADVF_ONLYONCE = 4
     * }
     */
    public static int ADVF_ONLYONCE() {
        return ADVF_ONLYONCE;
    }
    private static final int ADVF_DATAONSTOP = (int)64L;
    /**
     * {@snippet lang=c :
     * enum tagADVF.ADVF_DATAONSTOP = 64
     * }
     */
    public static int ADVF_DATAONSTOP() {
        return ADVF_DATAONSTOP;
    }
    private static final int ADVFCACHE_NOHANDLER = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagADVF.ADVFCACHE_NOHANDLER = 8
     * }
     */
    public static int ADVFCACHE_NOHANDLER() {
        return ADVFCACHE_NOHANDLER;
    }
    private static final int ADVFCACHE_FORCEBUILTIN = (int)16L;
    /**
     * {@snippet lang=c :
     * enum tagADVF.ADVFCACHE_FORCEBUILTIN = 16
     * }
     */
    public static int ADVFCACHE_FORCEBUILTIN() {
        return ADVFCACHE_FORCEBUILTIN;
    }
    private static final int ADVFCACHE_ONSAVE = (int)32L;
    /**
     * {@snippet lang=c :
     * enum tagADVF.ADVFCACHE_ONSAVE = 32
     * }
     */
    public static int ADVFCACHE_ONSAVE() {
        return ADVFCACHE_ONSAVE;
    }
    /**
     * {@snippet lang=c :
     * typedef STATDATA *LPSTATDATA
     * }
     */
    public static final AddressLayout LPSTATDATA = C_POINTER;

    private static class IID_IEnumSTATDATA$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IEnumSTATDATA").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumSTATDATA
     * }
     */
    public static GroupLayout IID_IEnumSTATDATA$layout() {
        return IID_IEnumSTATDATA$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumSTATDATA
     * }
     */
    public static MemorySegment IID_IEnumSTATDATA() {
        return IID_IEnumSTATDATA$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumSTATDATA
     * }
     */
    public static void IID_IEnumSTATDATA(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IEnumSTATDATA$constants.SEGMENT, 0L, IID_IEnumSTATDATA$constants.LAYOUT.byteSize());
    }

    private static class IEnumSTATDATA_RemoteNext_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IEnumSTATDATA_RemoteNext_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATDATA_RemoteNext_Proxy(IEnumSTATDATA *This, ULONG celt, STATDATA *rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumSTATDATA_RemoteNext_Proxy$descriptor() {
        return IEnumSTATDATA_RemoteNext_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATDATA_RemoteNext_Proxy(IEnumSTATDATA *This, ULONG celt, STATDATA *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumSTATDATA_RemoteNext_Proxy$handle() {
        return IEnumSTATDATA_RemoteNext_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IEnumSTATDATA_RemoteNext_Proxy(IEnumSTATDATA *This, ULONG celt, STATDATA *rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumSTATDATA_RemoteNext_Proxy(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumSTATDATA_RemoteNext_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumSTATDATA_RemoteNext_Proxy", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumSTATDATA_RemoteNext_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IEnumSTATDATA_RemoteNext_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IEnumSTATDATA_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IEnumSTATDATA_RemoteNext_Stub$descriptor() {
        return IEnumSTATDATA_RemoteNext_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IEnumSTATDATA_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IEnumSTATDATA_RemoteNext_Stub$handle() {
        return IEnumSTATDATA_RemoteNext_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void IEnumSTATDATA_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IEnumSTATDATA_RemoteNext_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IEnumSTATDATA_RemoteNext_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumSTATDATA_RemoteNext_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef IRootStorage *LPROOTSTORAGE
     * }
     */
    public static final AddressLayout LPROOTSTORAGE = C_POINTER;

    private static class IID_IRootStorage$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IRootStorage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRootStorage
     * }
     */
    public static GroupLayout IID_IRootStorage$layout() {
        return IID_IRootStorage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRootStorage
     * }
     */
    public static MemorySegment IID_IRootStorage() {
        return IID_IRootStorage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRootStorage
     * }
     */
    public static void IID_IRootStorage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IRootStorage$constants.SEGMENT, 0L, IID_IRootStorage$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IAdviseSink *LPADVISESINK
     * }
     */
    public static final AddressLayout LPADVISESINK = C_POINTER;
    private static final int TYMED_HGLOBAL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagTYMED.TYMED_HGLOBAL = 1
     * }
     */
    public static int TYMED_HGLOBAL() {
        return TYMED_HGLOBAL;
    }
    private static final int TYMED_FILE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagTYMED.TYMED_FILE = 2
     * }
     */
    public static int TYMED_FILE() {
        return TYMED_FILE;
    }
    private static final int TYMED_ISTREAM = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagTYMED.TYMED_ISTREAM = 4
     * }
     */
    public static int TYMED_ISTREAM() {
        return TYMED_ISTREAM;
    }
    private static final int TYMED_ISTORAGE = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagTYMED.TYMED_ISTORAGE = 8
     * }
     */
    public static int TYMED_ISTORAGE() {
        return TYMED_ISTORAGE;
    }
    private static final int TYMED_GDI = (int)16L;
    /**
     * {@snippet lang=c :
     * enum tagTYMED.TYMED_GDI = 16
     * }
     */
    public static int TYMED_GDI() {
        return TYMED_GDI;
    }
    private static final int TYMED_MFPICT = (int)32L;
    /**
     * {@snippet lang=c :
     * enum tagTYMED.TYMED_MFPICT = 32
     * }
     */
    public static int TYMED_MFPICT() {
        return TYMED_MFPICT;
    }
    private static final int TYMED_ENHMF = (int)64L;
    /**
     * {@snippet lang=c :
     * enum tagTYMED.TYMED_ENHMF = 64
     * }
     */
    public static int TYMED_ENHMF() {
        return TYMED_ENHMF;
    }
    private static final int TYMED_NULL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagTYMED.TYMED_NULL = 0
     * }
     */
    public static int TYMED_NULL() {
        return TYMED_NULL;
    }
    /**
     * {@snippet lang=c :
     * typedef userSTGMEDIUM *wireSTGMEDIUM
     * }
     */
    public static final AddressLayout wireSTGMEDIUM = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef userSTGMEDIUM *wireASYNC_STGMEDIUM
     * }
     */
    public static final AddressLayout wireASYNC_STGMEDIUM = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef STGMEDIUM *LPSTGMEDIUM
     * }
     */
    public static final AddressLayout LPSTGMEDIUM = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef userFLAG_STGMEDIUM *wireFLAG_STGMEDIUM
     * }
     */
    public static final AddressLayout wireFLAG_STGMEDIUM = C_POINTER;

    private static class IID_IAdviseSink$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IAdviseSink").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAdviseSink
     * }
     */
    public static GroupLayout IID_IAdviseSink$layout() {
        return IID_IAdviseSink$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAdviseSink
     * }
     */
    public static MemorySegment IID_IAdviseSink() {
        return IID_IAdviseSink$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAdviseSink
     * }
     */
    public static void IID_IAdviseSink(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IAdviseSink$constants.SEGMENT, 0L, IID_IAdviseSink$constants.LAYOUT.byteSize());
    }

    private static class IAdviseSink_RemoteOnDataChange_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IAdviseSink_RemoteOnDataChange_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_RemoteOnDataChange_Proxy(IAdviseSink *This, FORMATETC *pFormatetc, ASYNC_STGMEDIUM *pStgmed)
     * }
     */
    public static FunctionDescriptor IAdviseSink_RemoteOnDataChange_Proxy$descriptor() {
        return IAdviseSink_RemoteOnDataChange_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_RemoteOnDataChange_Proxy(IAdviseSink *This, FORMATETC *pFormatetc, ASYNC_STGMEDIUM *pStgmed)
     * }
     */
    public static MethodHandle IAdviseSink_RemoteOnDataChange_Proxy$handle() {
        return IAdviseSink_RemoteOnDataChange_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IAdviseSink_RemoteOnDataChange_Proxy(IAdviseSink *This, FORMATETC *pFormatetc, ASYNC_STGMEDIUM *pStgmed)
     * }
     */
    public static int IAdviseSink_RemoteOnDataChange_Proxy(MemorySegment This, MemorySegment pFormatetc, MemorySegment pStgmed) {
        var mh$ = IAdviseSink_RemoteOnDataChange_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink_RemoteOnDataChange_Proxy", This, pFormatetc, pStgmed);
            }
            return (int)mh$.invokeExact(This, pFormatetc, pStgmed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink_RemoteOnDataChange_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IAdviseSink_RemoteOnDataChange_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IAdviseSink_RemoteOnDataChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IAdviseSink_RemoteOnDataChange_Stub$descriptor() {
        return IAdviseSink_RemoteOnDataChange_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IAdviseSink_RemoteOnDataChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IAdviseSink_RemoteOnDataChange_Stub$handle() {
        return IAdviseSink_RemoteOnDataChange_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void IAdviseSink_RemoteOnDataChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IAdviseSink_RemoteOnDataChange_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IAdviseSink_RemoteOnDataChange_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink_RemoteOnDataChange_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink_RemoteOnViewChange_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IAdviseSink_RemoteOnViewChange_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_RemoteOnViewChange_Proxy(IAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static FunctionDescriptor IAdviseSink_RemoteOnViewChange_Proxy$descriptor() {
        return IAdviseSink_RemoteOnViewChange_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_RemoteOnViewChange_Proxy(IAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static MethodHandle IAdviseSink_RemoteOnViewChange_Proxy$handle() {
        return IAdviseSink_RemoteOnViewChange_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IAdviseSink_RemoteOnViewChange_Proxy(IAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static int IAdviseSink_RemoteOnViewChange_Proxy(MemorySegment This, int dwAspect, int lindex) {
        var mh$ = IAdviseSink_RemoteOnViewChange_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink_RemoteOnViewChange_Proxy", This, dwAspect, lindex);
            }
            return (int)mh$.invokeExact(This, dwAspect, lindex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink_RemoteOnViewChange_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IAdviseSink_RemoteOnViewChange_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IAdviseSink_RemoteOnViewChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IAdviseSink_RemoteOnViewChange_Stub$descriptor() {
        return IAdviseSink_RemoteOnViewChange_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IAdviseSink_RemoteOnViewChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IAdviseSink_RemoteOnViewChange_Stub$handle() {
        return IAdviseSink_RemoteOnViewChange_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void IAdviseSink_RemoteOnViewChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IAdviseSink_RemoteOnViewChange_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IAdviseSink_RemoteOnViewChange_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink_RemoteOnViewChange_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink_RemoteOnRename_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IAdviseSink_RemoteOnRename_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_RemoteOnRename_Proxy(IAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static FunctionDescriptor IAdviseSink_RemoteOnRename_Proxy$descriptor() {
        return IAdviseSink_RemoteOnRename_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_RemoteOnRename_Proxy(IAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static MethodHandle IAdviseSink_RemoteOnRename_Proxy$handle() {
        return IAdviseSink_RemoteOnRename_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IAdviseSink_RemoteOnRename_Proxy(IAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static int IAdviseSink_RemoteOnRename_Proxy(MemorySegment This, MemorySegment pmk) {
        var mh$ = IAdviseSink_RemoteOnRename_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink_RemoteOnRename_Proxy", This, pmk);
            }
            return (int)mh$.invokeExact(This, pmk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink_RemoteOnRename_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IAdviseSink_RemoteOnRename_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IAdviseSink_RemoteOnRename_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IAdviseSink_RemoteOnRename_Stub$descriptor() {
        return IAdviseSink_RemoteOnRename_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IAdviseSink_RemoteOnRename_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IAdviseSink_RemoteOnRename_Stub$handle() {
        return IAdviseSink_RemoteOnRename_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void IAdviseSink_RemoteOnRename_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IAdviseSink_RemoteOnRename_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IAdviseSink_RemoteOnRename_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink_RemoteOnRename_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink_RemoteOnSave_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IAdviseSink_RemoteOnSave_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_RemoteOnSave_Proxy(IAdviseSink *This)
     * }
     */
    public static FunctionDescriptor IAdviseSink_RemoteOnSave_Proxy$descriptor() {
        return IAdviseSink_RemoteOnSave_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_RemoteOnSave_Proxy(IAdviseSink *This)
     * }
     */
    public static MethodHandle IAdviseSink_RemoteOnSave_Proxy$handle() {
        return IAdviseSink_RemoteOnSave_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IAdviseSink_RemoteOnSave_Proxy(IAdviseSink *This)
     * }
     */
    public static int IAdviseSink_RemoteOnSave_Proxy(MemorySegment This) {
        var mh$ = IAdviseSink_RemoteOnSave_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink_RemoteOnSave_Proxy", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink_RemoteOnSave_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IAdviseSink_RemoteOnSave_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IAdviseSink_RemoteOnSave_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IAdviseSink_RemoteOnSave_Stub$descriptor() {
        return IAdviseSink_RemoteOnSave_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IAdviseSink_RemoteOnSave_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IAdviseSink_RemoteOnSave_Stub$handle() {
        return IAdviseSink_RemoteOnSave_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void IAdviseSink_RemoteOnSave_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IAdviseSink_RemoteOnSave_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IAdviseSink_RemoteOnSave_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink_RemoteOnSave_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink_RemoteOnClose_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IAdviseSink_RemoteOnClose_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_RemoteOnClose_Proxy(IAdviseSink *This)
     * }
     */
    public static FunctionDescriptor IAdviseSink_RemoteOnClose_Proxy$descriptor() {
        return IAdviseSink_RemoteOnClose_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_RemoteOnClose_Proxy(IAdviseSink *This)
     * }
     */
    public static MethodHandle IAdviseSink_RemoteOnClose_Proxy$handle() {
        return IAdviseSink_RemoteOnClose_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IAdviseSink_RemoteOnClose_Proxy(IAdviseSink *This)
     * }
     */
    public static int IAdviseSink_RemoteOnClose_Proxy(MemorySegment This) {
        var mh$ = IAdviseSink_RemoteOnClose_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink_RemoteOnClose_Proxy", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink_RemoteOnClose_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IAdviseSink_RemoteOnClose_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IAdviseSink_RemoteOnClose_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IAdviseSink_RemoteOnClose_Stub$descriptor() {
        return IAdviseSink_RemoteOnClose_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IAdviseSink_RemoteOnClose_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IAdviseSink_RemoteOnClose_Stub$handle() {
        return IAdviseSink_RemoteOnClose_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void IAdviseSink_RemoteOnClose_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IAdviseSink_RemoteOnClose_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IAdviseSink_RemoteOnClose_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink_RemoteOnClose_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IID_AsyncIAdviseSink$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_AsyncIAdviseSink").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_AsyncIAdviseSink
     * }
     */
    public static GroupLayout IID_AsyncIAdviseSink$layout() {
        return IID_AsyncIAdviseSink$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_AsyncIAdviseSink
     * }
     */
    public static MemorySegment IID_AsyncIAdviseSink() {
        return IID_AsyncIAdviseSink$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_AsyncIAdviseSink
     * }
     */
    public static void IID_AsyncIAdviseSink(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_AsyncIAdviseSink$constants.SEGMENT, 0L, IID_AsyncIAdviseSink$constants.LAYOUT.byteSize());
    }

    private static class AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy(AsyncIAdviseSink *This, FORMATETC *pFormatetc, ASYNC_STGMEDIUM *pStgmed)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy$descriptor() {
        return AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy(AsyncIAdviseSink *This, FORMATETC *pFormatetc, ASYNC_STGMEDIUM *pStgmed)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy$handle() {
        return AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy(AsyncIAdviseSink *This, FORMATETC *pFormatetc, ASYNC_STGMEDIUM *pStgmed)
     * }
     */
    public static int AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy(MemorySegment This, MemorySegment pFormatetc, MemorySegment pStgmed) {
        var mh$ = AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy", This, pFormatetc, pStgmed);
            }
            return (int)mh$.invokeExact(This, pFormatetc, pStgmed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub$descriptor() {
        return AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub$handle() {
        return AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy$descriptor() {
        return AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy$handle() {
        return AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static int AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub$descriptor() {
        return AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub$handle() {
        return AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy(AsyncIAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy$descriptor() {
        return AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy(AsyncIAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy$handle() {
        return AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy(AsyncIAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static int AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy(MemorySegment This, int dwAspect, int lindex) {
        var mh$ = AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy", This, dwAspect, lindex);
            }
            return (int)mh$.invokeExact(This, dwAspect, lindex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub$descriptor() {
        return AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub$handle() {
        return AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy$descriptor() {
        return AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy$handle() {
        return AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static int AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub$descriptor() {
        return AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub$handle() {
        return AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Begin_RemoteOnRename_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("AsyncIAdviseSink_Begin_RemoteOnRename_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_RemoteOnRename_Proxy(AsyncIAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Begin_RemoteOnRename_Proxy$descriptor() {
        return AsyncIAdviseSink_Begin_RemoteOnRename_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_RemoteOnRename_Proxy(AsyncIAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Begin_RemoteOnRename_Proxy$handle() {
        return AsyncIAdviseSink_Begin_RemoteOnRename_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_RemoteOnRename_Proxy(AsyncIAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static int AsyncIAdviseSink_Begin_RemoteOnRename_Proxy(MemorySegment This, MemorySegment pmk) {
        var mh$ = AsyncIAdviseSink_Begin_RemoteOnRename_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Begin_RemoteOnRename_Proxy", This, pmk);
            }
            return (int)mh$.invokeExact(This, pmk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Begin_RemoteOnRename_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("AsyncIAdviseSink_Begin_RemoteOnRename_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_RemoteOnRename_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Begin_RemoteOnRename_Stub$descriptor() {
        return AsyncIAdviseSink_Begin_RemoteOnRename_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_RemoteOnRename_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Begin_RemoteOnRename_Stub$handle() {
        return AsyncIAdviseSink_Begin_RemoteOnRename_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_RemoteOnRename_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void AsyncIAdviseSink_Begin_RemoteOnRename_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = AsyncIAdviseSink_Begin_RemoteOnRename_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Begin_RemoteOnRename_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Finish_RemoteOnRename_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("AsyncIAdviseSink_Finish_RemoteOnRename_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_RemoteOnRename_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Finish_RemoteOnRename_Proxy$descriptor() {
        return AsyncIAdviseSink_Finish_RemoteOnRename_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_RemoteOnRename_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Finish_RemoteOnRename_Proxy$handle() {
        return AsyncIAdviseSink_Finish_RemoteOnRename_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_RemoteOnRename_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static int AsyncIAdviseSink_Finish_RemoteOnRename_Proxy(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Finish_RemoteOnRename_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Finish_RemoteOnRename_Proxy", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Finish_RemoteOnRename_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("AsyncIAdviseSink_Finish_RemoteOnRename_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_RemoteOnRename_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Finish_RemoteOnRename_Stub$descriptor() {
        return AsyncIAdviseSink_Finish_RemoteOnRename_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_RemoteOnRename_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Finish_RemoteOnRename_Stub$handle() {
        return AsyncIAdviseSink_Finish_RemoteOnRename_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_RemoteOnRename_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void AsyncIAdviseSink_Finish_RemoteOnRename_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = AsyncIAdviseSink_Finish_RemoteOnRename_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Finish_RemoteOnRename_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Begin_RemoteOnSave_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("AsyncIAdviseSink_Begin_RemoteOnSave_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_RemoteOnSave_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Begin_RemoteOnSave_Proxy$descriptor() {
        return AsyncIAdviseSink_Begin_RemoteOnSave_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_RemoteOnSave_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Begin_RemoteOnSave_Proxy$handle() {
        return AsyncIAdviseSink_Begin_RemoteOnSave_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_RemoteOnSave_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static int AsyncIAdviseSink_Begin_RemoteOnSave_Proxy(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Begin_RemoteOnSave_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Begin_RemoteOnSave_Proxy", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Begin_RemoteOnSave_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("AsyncIAdviseSink_Begin_RemoteOnSave_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_RemoteOnSave_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Begin_RemoteOnSave_Stub$descriptor() {
        return AsyncIAdviseSink_Begin_RemoteOnSave_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_RemoteOnSave_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Begin_RemoteOnSave_Stub$handle() {
        return AsyncIAdviseSink_Begin_RemoteOnSave_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_RemoteOnSave_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void AsyncIAdviseSink_Begin_RemoteOnSave_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = AsyncIAdviseSink_Begin_RemoteOnSave_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Begin_RemoteOnSave_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Finish_RemoteOnSave_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("AsyncIAdviseSink_Finish_RemoteOnSave_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_RemoteOnSave_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Finish_RemoteOnSave_Proxy$descriptor() {
        return AsyncIAdviseSink_Finish_RemoteOnSave_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_RemoteOnSave_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Finish_RemoteOnSave_Proxy$handle() {
        return AsyncIAdviseSink_Finish_RemoteOnSave_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_RemoteOnSave_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static int AsyncIAdviseSink_Finish_RemoteOnSave_Proxy(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Finish_RemoteOnSave_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Finish_RemoteOnSave_Proxy", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Finish_RemoteOnSave_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("AsyncIAdviseSink_Finish_RemoteOnSave_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_RemoteOnSave_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Finish_RemoteOnSave_Stub$descriptor() {
        return AsyncIAdviseSink_Finish_RemoteOnSave_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_RemoteOnSave_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Finish_RemoteOnSave_Stub$handle() {
        return AsyncIAdviseSink_Finish_RemoteOnSave_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_RemoteOnSave_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void AsyncIAdviseSink_Finish_RemoteOnSave_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = AsyncIAdviseSink_Finish_RemoteOnSave_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Finish_RemoteOnSave_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Begin_RemoteOnClose_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("AsyncIAdviseSink_Begin_RemoteOnClose_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_RemoteOnClose_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Begin_RemoteOnClose_Proxy$descriptor() {
        return AsyncIAdviseSink_Begin_RemoteOnClose_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_RemoteOnClose_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Begin_RemoteOnClose_Proxy$handle() {
        return AsyncIAdviseSink_Begin_RemoteOnClose_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_RemoteOnClose_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static int AsyncIAdviseSink_Begin_RemoteOnClose_Proxy(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Begin_RemoteOnClose_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Begin_RemoteOnClose_Proxy", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Begin_RemoteOnClose_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("AsyncIAdviseSink_Begin_RemoteOnClose_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_RemoteOnClose_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Begin_RemoteOnClose_Stub$descriptor() {
        return AsyncIAdviseSink_Begin_RemoteOnClose_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_RemoteOnClose_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Begin_RemoteOnClose_Stub$handle() {
        return AsyncIAdviseSink_Begin_RemoteOnClose_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_RemoteOnClose_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void AsyncIAdviseSink_Begin_RemoteOnClose_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = AsyncIAdviseSink_Begin_RemoteOnClose_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Begin_RemoteOnClose_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Finish_RemoteOnClose_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("AsyncIAdviseSink_Finish_RemoteOnClose_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_RemoteOnClose_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Finish_RemoteOnClose_Proxy$descriptor() {
        return AsyncIAdviseSink_Finish_RemoteOnClose_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_RemoteOnClose_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Finish_RemoteOnClose_Proxy$handle() {
        return AsyncIAdviseSink_Finish_RemoteOnClose_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_RemoteOnClose_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static int AsyncIAdviseSink_Finish_RemoteOnClose_Proxy(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Finish_RemoteOnClose_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Finish_RemoteOnClose_Proxy", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Finish_RemoteOnClose_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("AsyncIAdviseSink_Finish_RemoteOnClose_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_RemoteOnClose_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Finish_RemoteOnClose_Stub$descriptor() {
        return AsyncIAdviseSink_Finish_RemoteOnClose_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_RemoteOnClose_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Finish_RemoteOnClose_Stub$handle() {
        return AsyncIAdviseSink_Finish_RemoteOnClose_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_RemoteOnClose_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void AsyncIAdviseSink_Finish_RemoteOnClose_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = AsyncIAdviseSink_Finish_RemoteOnClose_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Finish_RemoteOnClose_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_objidl_0000_0073_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_objidl_0000_0073_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0073_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0073_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0073_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0073_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0073_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0073_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0073_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0073_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0073_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0073_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0073_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0073_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0073_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0073_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0073_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_objidl_0000_0073_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0073_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0073_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0073_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0073_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0073_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0073_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0073_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0073_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0073_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0073_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0073_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0073_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0073_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0073_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IAdviseSink2 *LPADVISESINK2
     * }
     */
    public static final AddressLayout LPADVISESINK2 = C_POINTER;

    private static class IID_IAdviseSink2$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IAdviseSink2").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAdviseSink2
     * }
     */
    public static GroupLayout IID_IAdviseSink2$layout() {
        return IID_IAdviseSink2$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAdviseSink2
     * }
     */
    public static MemorySegment IID_IAdviseSink2() {
        return IID_IAdviseSink2$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAdviseSink2
     * }
     */
    public static void IID_IAdviseSink2(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IAdviseSink2$constants.SEGMENT, 0L, IID_IAdviseSink2$constants.LAYOUT.byteSize());
    }

    private static class IAdviseSink2_RemoteOnLinkSrcChange_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IAdviseSink2_RemoteOnLinkSrcChange_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink2_RemoteOnLinkSrcChange_Proxy(IAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static FunctionDescriptor IAdviseSink2_RemoteOnLinkSrcChange_Proxy$descriptor() {
        return IAdviseSink2_RemoteOnLinkSrcChange_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink2_RemoteOnLinkSrcChange_Proxy(IAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static MethodHandle IAdviseSink2_RemoteOnLinkSrcChange_Proxy$handle() {
        return IAdviseSink2_RemoteOnLinkSrcChange_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IAdviseSink2_RemoteOnLinkSrcChange_Proxy(IAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static int IAdviseSink2_RemoteOnLinkSrcChange_Proxy(MemorySegment This, MemorySegment pmk) {
        var mh$ = IAdviseSink2_RemoteOnLinkSrcChange_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink2_RemoteOnLinkSrcChange_Proxy", This, pmk);
            }
            return (int)mh$.invokeExact(This, pmk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink2_RemoteOnLinkSrcChange_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IAdviseSink2_RemoteOnLinkSrcChange_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IAdviseSink2_RemoteOnLinkSrcChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IAdviseSink2_RemoteOnLinkSrcChange_Stub$descriptor() {
        return IAdviseSink2_RemoteOnLinkSrcChange_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IAdviseSink2_RemoteOnLinkSrcChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IAdviseSink2_RemoteOnLinkSrcChange_Stub$handle() {
        return IAdviseSink2_RemoteOnLinkSrcChange_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void IAdviseSink2_RemoteOnLinkSrcChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IAdviseSink2_RemoteOnLinkSrcChange_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IAdviseSink2_RemoteOnLinkSrcChange_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink2_RemoteOnLinkSrcChange_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IID_AsyncIAdviseSink2$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_AsyncIAdviseSink2").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_AsyncIAdviseSink2
     * }
     */
    public static GroupLayout IID_AsyncIAdviseSink2$layout() {
        return IID_AsyncIAdviseSink2$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_AsyncIAdviseSink2
     * }
     */
    public static MemorySegment IID_AsyncIAdviseSink2() {
        return IID_AsyncIAdviseSink2$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_AsyncIAdviseSink2
     * }
     */
    public static void IID_AsyncIAdviseSink2(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_AsyncIAdviseSink2$constants.SEGMENT, 0L, IID_AsyncIAdviseSink2$constants.LAYOUT.byteSize());
    }

    private static class AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy(AsyncIAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy$descriptor() {
        return AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy(AsyncIAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static MethodHandle AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy$handle() {
        return AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy(AsyncIAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static int AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy(MemorySegment This, MemorySegment pmk) {
        var mh$ = AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy", This, pmk);
            }
            return (int)mh$.invokeExact(This, pmk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub$descriptor() {
        return AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub$handle() {
        return AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy(AsyncIAdviseSink2 *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy$descriptor() {
        return AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy(AsyncIAdviseSink2 *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy$handle() {
        return AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy(AsyncIAdviseSink2 *This)
     * }
     */
    public static int AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy(MemorySegment This) {
        var mh$ = AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub$descriptor() {
        return AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub$handle() {
        return AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_objidl_0000_0074_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_objidl_0000_0074_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0074_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0074_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0074_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0074_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0074_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0074_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0074_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0074_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0074_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0074_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0074_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0074_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0074_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0074_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0074_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_objidl_0000_0074_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0074_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0074_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0074_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0074_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0074_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0074_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0074_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0074_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0074_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0074_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0074_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0074_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0074_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0074_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IDataObject *LPDATAOBJECT
     * }
     */
    public static final AddressLayout LPDATAOBJECT = C_POINTER;
    private static final int DATADIR_GET = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagDATADIR.DATADIR_GET = 1
     * }
     */
    public static int DATADIR_GET() {
        return DATADIR_GET;
    }
    private static final int DATADIR_SET = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagDATADIR.DATADIR_SET = 2
     * }
     */
    public static int DATADIR_SET() {
        return DATADIR_SET;
    }

    private static class IID_IDataObject$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IDataObject").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDataObject
     * }
     */
    public static GroupLayout IID_IDataObject$layout() {
        return IID_IDataObject$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDataObject
     * }
     */
    public static MemorySegment IID_IDataObject() {
        return IID_IDataObject$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDataObject
     * }
     */
    public static void IID_IDataObject(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IDataObject$constants.SEGMENT, 0L, IID_IDataObject$constants.LAYOUT.byteSize());
    }

    private static class IDataObject_RemoteGetData_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IDataObject_RemoteGetData_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IDataObject_RemoteGetData_Proxy(IDataObject *This, FORMATETC *pformatetcIn, STGMEDIUM *pRemoteMedium)
     * }
     */
    public static FunctionDescriptor IDataObject_RemoteGetData_Proxy$descriptor() {
        return IDataObject_RemoteGetData_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IDataObject_RemoteGetData_Proxy(IDataObject *This, FORMATETC *pformatetcIn, STGMEDIUM *pRemoteMedium)
     * }
     */
    public static MethodHandle IDataObject_RemoteGetData_Proxy$handle() {
        return IDataObject_RemoteGetData_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IDataObject_RemoteGetData_Proxy(IDataObject *This, FORMATETC *pformatetcIn, STGMEDIUM *pRemoteMedium)
     * }
     */
    public static int IDataObject_RemoteGetData_Proxy(MemorySegment This, MemorySegment pformatetcIn, MemorySegment pRemoteMedium) {
        var mh$ = IDataObject_RemoteGetData_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IDataObject_RemoteGetData_Proxy", This, pformatetcIn, pRemoteMedium);
            }
            return (int)mh$.invokeExact(This, pformatetcIn, pRemoteMedium);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IDataObject_RemoteGetData_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IDataObject_RemoteGetData_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IDataObject_RemoteGetData_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IDataObject_RemoteGetData_Stub$descriptor() {
        return IDataObject_RemoteGetData_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IDataObject_RemoteGetData_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IDataObject_RemoteGetData_Stub$handle() {
        return IDataObject_RemoteGetData_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void IDataObject_RemoteGetData_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IDataObject_RemoteGetData_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IDataObject_RemoteGetData_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IDataObject_RemoteGetData_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IDataObject_RemoteGetDataHere_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IDataObject_RemoteGetDataHere_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IDataObject_RemoteGetDataHere_Proxy(IDataObject *This, FORMATETC *pformatetc, STGMEDIUM *pRemoteMedium)
     * }
     */
    public static FunctionDescriptor IDataObject_RemoteGetDataHere_Proxy$descriptor() {
        return IDataObject_RemoteGetDataHere_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IDataObject_RemoteGetDataHere_Proxy(IDataObject *This, FORMATETC *pformatetc, STGMEDIUM *pRemoteMedium)
     * }
     */
    public static MethodHandle IDataObject_RemoteGetDataHere_Proxy$handle() {
        return IDataObject_RemoteGetDataHere_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IDataObject_RemoteGetDataHere_Proxy(IDataObject *This, FORMATETC *pformatetc, STGMEDIUM *pRemoteMedium)
     * }
     */
    public static int IDataObject_RemoteGetDataHere_Proxy(MemorySegment This, MemorySegment pformatetc, MemorySegment pRemoteMedium) {
        var mh$ = IDataObject_RemoteGetDataHere_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IDataObject_RemoteGetDataHere_Proxy", This, pformatetc, pRemoteMedium);
            }
            return (int)mh$.invokeExact(This, pformatetc, pRemoteMedium);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IDataObject_RemoteGetDataHere_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IDataObject_RemoteGetDataHere_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IDataObject_RemoteGetDataHere_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IDataObject_RemoteGetDataHere_Stub$descriptor() {
        return IDataObject_RemoteGetDataHere_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IDataObject_RemoteGetDataHere_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IDataObject_RemoteGetDataHere_Stub$handle() {
        return IDataObject_RemoteGetDataHere_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void IDataObject_RemoteGetDataHere_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IDataObject_RemoteGetDataHere_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IDataObject_RemoteGetDataHere_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IDataObject_RemoteGetDataHere_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IDataObject_RemoteSetData_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IDataObject_RemoteSetData_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IDataObject_RemoteSetData_Proxy(IDataObject *This, FORMATETC *pformatetc, FLAG_STGMEDIUM *pmedium, BOOL fRelease)
     * }
     */
    public static FunctionDescriptor IDataObject_RemoteSetData_Proxy$descriptor() {
        return IDataObject_RemoteSetData_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IDataObject_RemoteSetData_Proxy(IDataObject *This, FORMATETC *pformatetc, FLAG_STGMEDIUM *pmedium, BOOL fRelease)
     * }
     */
    public static MethodHandle IDataObject_RemoteSetData_Proxy$handle() {
        return IDataObject_RemoteSetData_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IDataObject_RemoteSetData_Proxy(IDataObject *This, FORMATETC *pformatetc, FLAG_STGMEDIUM *pmedium, BOOL fRelease)
     * }
     */
    public static int IDataObject_RemoteSetData_Proxy(MemorySegment This, MemorySegment pformatetc, MemorySegment pmedium, int fRelease) {
        var mh$ = IDataObject_RemoteSetData_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IDataObject_RemoteSetData_Proxy", This, pformatetc, pmedium, fRelease);
            }
            return (int)mh$.invokeExact(This, pformatetc, pmedium, fRelease);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IDataObject_RemoteSetData_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IDataObject_RemoteSetData_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IDataObject_RemoteSetData_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IDataObject_RemoteSetData_Stub$descriptor() {
        return IDataObject_RemoteSetData_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IDataObject_RemoteSetData_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IDataObject_RemoteSetData_Stub$handle() {
        return IDataObject_RemoteSetData_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void IDataObject_RemoteSetData_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IDataObject_RemoteSetData_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IDataObject_RemoteSetData_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IDataObject_RemoteSetData_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_objidl_0000_0075_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_objidl_0000_0075_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0075_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0075_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0075_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0075_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0075_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0075_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0075_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0075_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0075_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0075_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0075_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0075_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0075_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0075_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0075_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_objidl_0000_0075_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0075_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0075_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0075_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0075_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0075_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0075_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0075_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0075_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0075_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0075_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0075_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0075_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0075_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0075_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IDataAdviseHolder *LPDATAADVISEHOLDER
     * }
     */
    public static final AddressLayout LPDATAADVISEHOLDER = C_POINTER;

    private static class IID_IDataAdviseHolder$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IDataAdviseHolder").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDataAdviseHolder
     * }
     */
    public static GroupLayout IID_IDataAdviseHolder$layout() {
        return IID_IDataAdviseHolder$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDataAdviseHolder
     * }
     */
    public static MemorySegment IID_IDataAdviseHolder() {
        return IID_IDataAdviseHolder$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDataAdviseHolder
     * }
     */
    public static void IID_IDataAdviseHolder(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IDataAdviseHolder$constants.SEGMENT, 0L, IID_IDataAdviseHolder$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IMessageFilter *LPMESSAGEFILTER
     * }
     */
    public static final AddressLayout LPMESSAGEFILTER = C_POINTER;
    private static final int CALLTYPE_TOPLEVEL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagCALLTYPE.CALLTYPE_TOPLEVEL = 1
     * }
     */
    public static int CALLTYPE_TOPLEVEL() {
        return CALLTYPE_TOPLEVEL;
    }
    private static final int CALLTYPE_NESTED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagCALLTYPE.CALLTYPE_NESTED = 2
     * }
     */
    public static int CALLTYPE_NESTED() {
        return CALLTYPE_NESTED;
    }
    private static final int CALLTYPE_ASYNC = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagCALLTYPE.CALLTYPE_ASYNC = 3
     * }
     */
    public static int CALLTYPE_ASYNC() {
        return CALLTYPE_ASYNC;
    }
    private static final int CALLTYPE_TOPLEVEL_CALLPENDING = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagCALLTYPE.CALLTYPE_TOPLEVEL_CALLPENDING = 4
     * }
     */
    public static int CALLTYPE_TOPLEVEL_CALLPENDING() {
        return CALLTYPE_TOPLEVEL_CALLPENDING;
    }
    private static final int CALLTYPE_ASYNC_CALLPENDING = (int)5L;
    /**
     * {@snippet lang=c :
     * enum tagCALLTYPE.CALLTYPE_ASYNC_CALLPENDING = 5
     * }
     */
    public static int CALLTYPE_ASYNC_CALLPENDING() {
        return CALLTYPE_ASYNC_CALLPENDING;
    }
    private static final int SERVERCALL_ISHANDLED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagSERVERCALL.SERVERCALL_ISHANDLED = 0
     * }
     */
    public static int SERVERCALL_ISHANDLED() {
        return SERVERCALL_ISHANDLED;
    }
    private static final int SERVERCALL_REJECTED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagSERVERCALL.SERVERCALL_REJECTED = 1
     * }
     */
    public static int SERVERCALL_REJECTED() {
        return SERVERCALL_REJECTED;
    }
    private static final int SERVERCALL_RETRYLATER = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagSERVERCALL.SERVERCALL_RETRYLATER = 2
     * }
     */
    public static int SERVERCALL_RETRYLATER() {
        return SERVERCALL_RETRYLATER;
    }
    private static final int PENDINGTYPE_TOPLEVEL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagPENDINGTYPE.PENDINGTYPE_TOPLEVEL = 1
     * }
     */
    public static int PENDINGTYPE_TOPLEVEL() {
        return PENDINGTYPE_TOPLEVEL;
    }
    private static final int PENDINGTYPE_NESTED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagPENDINGTYPE.PENDINGTYPE_NESTED = 2
     * }
     */
    public static int PENDINGTYPE_NESTED() {
        return PENDINGTYPE_NESTED;
    }
    private static final int PENDINGMSG_CANCELCALL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagPENDINGMSG.PENDINGMSG_CANCELCALL = 0
     * }
     */
    public static int PENDINGMSG_CANCELCALL() {
        return PENDINGMSG_CANCELCALL;
    }
    private static final int PENDINGMSG_WAITNOPROCESS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagPENDINGMSG.PENDINGMSG_WAITNOPROCESS = 1
     * }
     */
    public static int PENDINGMSG_WAITNOPROCESS() {
        return PENDINGMSG_WAITNOPROCESS;
    }
    private static final int PENDINGMSG_WAITDEFPROCESS = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagPENDINGMSG.PENDINGMSG_WAITDEFPROCESS = 2
     * }
     */
    public static int PENDINGMSG_WAITDEFPROCESS() {
        return PENDINGMSG_WAITDEFPROCESS;
    }
    /**
     * {@snippet lang=c :
     * typedef struct tagINTERFACEINFO {
     *     IUnknown *pUnk;
     *     IID iid;
     *     WORD wMethod;
     * } *LPINTERFACEINFO
     * }
     */
    public static final AddressLayout LPINTERFACEINFO = C_POINTER;

    private static class IID_IMessageFilter$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IMessageFilter").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMessageFilter
     * }
     */
    public static GroupLayout IID_IMessageFilter$layout() {
        return IID_IMessageFilter$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMessageFilter
     * }
     */
    public static MemorySegment IID_IMessageFilter() {
        return IID_IMessageFilter$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMessageFilter
     * }
     */
    public static void IID_IMessageFilter(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IMessageFilter$constants.SEGMENT, 0L, IID_IMessageFilter$constants.LAYOUT.byteSize());
    }

    private static class FMTID_SummaryInformation$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("FMTID_SummaryInformation").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_SummaryInformation
     * }
     */
    public static GroupLayout FMTID_SummaryInformation$layout() {
        return FMTID_SummaryInformation$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_SummaryInformation
     * }
     */
    public static MemorySegment FMTID_SummaryInformation() {
        return FMTID_SummaryInformation$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_SummaryInformation
     * }
     */
    public static void FMTID_SummaryInformation(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, FMTID_SummaryInformation$constants.SEGMENT, 0L, FMTID_SummaryInformation$constants.LAYOUT.byteSize());
    }

    private static class FMTID_DocSummaryInformation$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("FMTID_DocSummaryInformation").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_DocSummaryInformation
     * }
     */
    public static GroupLayout FMTID_DocSummaryInformation$layout() {
        return FMTID_DocSummaryInformation$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_DocSummaryInformation
     * }
     */
    public static MemorySegment FMTID_DocSummaryInformation() {
        return FMTID_DocSummaryInformation$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_DocSummaryInformation
     * }
     */
    public static void FMTID_DocSummaryInformation(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, FMTID_DocSummaryInformation$constants.SEGMENT, 0L, FMTID_DocSummaryInformation$constants.LAYOUT.byteSize());
    }

    private static class FMTID_UserDefinedProperties$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("FMTID_UserDefinedProperties").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_UserDefinedProperties
     * }
     */
    public static GroupLayout FMTID_UserDefinedProperties$layout() {
        return FMTID_UserDefinedProperties$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_UserDefinedProperties
     * }
     */
    public static MemorySegment FMTID_UserDefinedProperties() {
        return FMTID_UserDefinedProperties$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_UserDefinedProperties
     * }
     */
    public static void FMTID_UserDefinedProperties(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, FMTID_UserDefinedProperties$constants.SEGMENT, 0L, FMTID_UserDefinedProperties$constants.LAYOUT.byteSize());
    }

    private static class FMTID_DiscardableInformation$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("FMTID_DiscardableInformation").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_DiscardableInformation
     * }
     */
    public static GroupLayout FMTID_DiscardableInformation$layout() {
        return FMTID_DiscardableInformation$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_DiscardableInformation
     * }
     */
    public static MemorySegment FMTID_DiscardableInformation() {
        return FMTID_DiscardableInformation$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_DiscardableInformation
     * }
     */
    public static void FMTID_DiscardableInformation(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, FMTID_DiscardableInformation$constants.SEGMENT, 0L, FMTID_DiscardableInformation$constants.LAYOUT.byteSize());
    }

    private static class FMTID_ImageSummaryInformation$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("FMTID_ImageSummaryInformation").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_ImageSummaryInformation
     * }
     */
    public static GroupLayout FMTID_ImageSummaryInformation$layout() {
        return FMTID_ImageSummaryInformation$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_ImageSummaryInformation
     * }
     */
    public static MemorySegment FMTID_ImageSummaryInformation() {
        return FMTID_ImageSummaryInformation$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_ImageSummaryInformation
     * }
     */
    public static void FMTID_ImageSummaryInformation(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, FMTID_ImageSummaryInformation$constants.SEGMENT, 0L, FMTID_ImageSummaryInformation$constants.LAYOUT.byteSize());
    }

    private static class FMTID_AudioSummaryInformation$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("FMTID_AudioSummaryInformation").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_AudioSummaryInformation
     * }
     */
    public static GroupLayout FMTID_AudioSummaryInformation$layout() {
        return FMTID_AudioSummaryInformation$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_AudioSummaryInformation
     * }
     */
    public static MemorySegment FMTID_AudioSummaryInformation() {
        return FMTID_AudioSummaryInformation$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_AudioSummaryInformation
     * }
     */
    public static void FMTID_AudioSummaryInformation(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, FMTID_AudioSummaryInformation$constants.SEGMENT, 0L, FMTID_AudioSummaryInformation$constants.LAYOUT.byteSize());
    }

    private static class FMTID_VideoSummaryInformation$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("FMTID_VideoSummaryInformation").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_VideoSummaryInformation
     * }
     */
    public static GroupLayout FMTID_VideoSummaryInformation$layout() {
        return FMTID_VideoSummaryInformation$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_VideoSummaryInformation
     * }
     */
    public static MemorySegment FMTID_VideoSummaryInformation() {
        return FMTID_VideoSummaryInformation$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_VideoSummaryInformation
     * }
     */
    public static void FMTID_VideoSummaryInformation(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, FMTID_VideoSummaryInformation$constants.SEGMENT, 0L, FMTID_VideoSummaryInformation$constants.LAYOUT.byteSize());
    }

    private static class FMTID_MediaFileSummaryInformation$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("FMTID_MediaFileSummaryInformation").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_MediaFileSummaryInformation
     * }
     */
    public static GroupLayout FMTID_MediaFileSummaryInformation$layout() {
        return FMTID_MediaFileSummaryInformation$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_MediaFileSummaryInformation
     * }
     */
    public static MemorySegment FMTID_MediaFileSummaryInformation() {
        return FMTID_MediaFileSummaryInformation$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_MediaFileSummaryInformation
     * }
     */
    public static void FMTID_MediaFileSummaryInformation(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, FMTID_MediaFileSummaryInformation$constants.SEGMENT, 0L, FMTID_MediaFileSummaryInformation$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidl_0000_0077_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_objidl_0000_0077_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0077_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0077_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0077_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0077_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0077_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0077_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0077_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0077_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0077_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0077_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0077_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0077_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0077_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0077_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0077_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_objidl_0000_0077_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0077_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0077_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0077_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0077_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0077_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0077_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0077_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0077_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0077_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0077_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0077_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0077_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0077_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0077_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IClassActivator$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IClassActivator").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IClassActivator
     * }
     */
    public static GroupLayout IID_IClassActivator$layout() {
        return IID_IClassActivator$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IClassActivator
     * }
     */
    public static MemorySegment IID_IClassActivator() {
        return IID_IClassActivator$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IClassActivator
     * }
     */
    public static void IID_IClassActivator(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IClassActivator$constants.SEGMENT, 0L, IID_IClassActivator$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidl_0000_0078_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_objidl_0000_0078_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0078_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0078_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0078_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0078_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0078_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0078_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0078_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0078_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0078_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0078_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0078_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0078_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0078_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0078_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0078_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_objidl_0000_0078_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0078_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0078_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0078_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0078_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0078_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0078_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0078_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0078_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0078_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0078_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0078_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0078_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0078_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0078_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IFillLockBytes$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IFillLockBytes").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IFillLockBytes
     * }
     */
    public static GroupLayout IID_IFillLockBytes$layout() {
        return IID_IFillLockBytes$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IFillLockBytes
     * }
     */
    public static MemorySegment IID_IFillLockBytes() {
        return IID_IFillLockBytes$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IFillLockBytes
     * }
     */
    public static void IID_IFillLockBytes(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IFillLockBytes$constants.SEGMENT, 0L, IID_IFillLockBytes$constants.LAYOUT.byteSize());
    }

    private static class IFillLockBytes_RemoteFillAppend_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IFillLockBytes_RemoteFillAppend_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_RemoteFillAppend_Proxy(IFillLockBytes *This, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static FunctionDescriptor IFillLockBytes_RemoteFillAppend_Proxy$descriptor() {
        return IFillLockBytes_RemoteFillAppend_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_RemoteFillAppend_Proxy(IFillLockBytes *This, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static MethodHandle IFillLockBytes_RemoteFillAppend_Proxy$handle() {
        return IFillLockBytes_RemoteFillAppend_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_RemoteFillAppend_Proxy(IFillLockBytes *This, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static int IFillLockBytes_RemoteFillAppend_Proxy(MemorySegment This, MemorySegment pv, int cb, MemorySegment pcbWritten) {
        var mh$ = IFillLockBytes_RemoteFillAppend_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IFillLockBytes_RemoteFillAppend_Proxy", This, pv, cb, pcbWritten);
            }
            return (int)mh$.invokeExact(This, pv, cb, pcbWritten);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IFillLockBytes_RemoteFillAppend_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IFillLockBytes_RemoteFillAppend_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IFillLockBytes_RemoteFillAppend_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IFillLockBytes_RemoteFillAppend_Stub$descriptor() {
        return IFillLockBytes_RemoteFillAppend_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IFillLockBytes_RemoteFillAppend_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IFillLockBytes_RemoteFillAppend_Stub$handle() {
        return IFillLockBytes_RemoteFillAppend_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void IFillLockBytes_RemoteFillAppend_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IFillLockBytes_RemoteFillAppend_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IFillLockBytes_RemoteFillAppend_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IFillLockBytes_RemoteFillAppend_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IFillLockBytes_RemoteFillAt_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            _ULARGE_INTEGER.layout(),
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IFillLockBytes_RemoteFillAt_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_RemoteFillAt_Proxy(IFillLockBytes *This, ULARGE_INTEGER ulOffset, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static FunctionDescriptor IFillLockBytes_RemoteFillAt_Proxy$descriptor() {
        return IFillLockBytes_RemoteFillAt_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_RemoteFillAt_Proxy(IFillLockBytes *This, ULARGE_INTEGER ulOffset, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static MethodHandle IFillLockBytes_RemoteFillAt_Proxy$handle() {
        return IFillLockBytes_RemoteFillAt_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_RemoteFillAt_Proxy(IFillLockBytes *This, ULARGE_INTEGER ulOffset, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static int IFillLockBytes_RemoteFillAt_Proxy(MemorySegment This, MemorySegment ulOffset, MemorySegment pv, int cb, MemorySegment pcbWritten) {
        var mh$ = IFillLockBytes_RemoteFillAt_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IFillLockBytes_RemoteFillAt_Proxy", This, ulOffset, pv, cb, pcbWritten);
            }
            return (int)mh$.invokeExact(This, ulOffset, pv, cb, pcbWritten);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IFillLockBytes_RemoteFillAt_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IFillLockBytes_RemoteFillAt_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IFillLockBytes_RemoteFillAt_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IFillLockBytes_RemoteFillAt_Stub$descriptor() {
        return IFillLockBytes_RemoteFillAt_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IFillLockBytes_RemoteFillAt_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IFillLockBytes_RemoteFillAt_Stub$handle() {
        return IFillLockBytes_RemoteFillAt_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void IFillLockBytes_RemoteFillAt_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IFillLockBytes_RemoteFillAt_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IFillLockBytes_RemoteFillAt_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IFillLockBytes_RemoteFillAt_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_objidl_0000_0079_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_objidl_0000_0079_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0079_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0079_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0079_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0079_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0079_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0079_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0079_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0079_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0079_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0079_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0079_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0079_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0079_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0079_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0079_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_objidl_0000_0079_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0079_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0079_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0079_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0079_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0079_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0079_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0079_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0079_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0079_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0079_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0079_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0079_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0079_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0079_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IProgressNotify$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IProgressNotify").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IProgressNotify
     * }
     */
    public static GroupLayout IID_IProgressNotify$layout() {
        return IID_IProgressNotify$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IProgressNotify
     * }
     */
    public static MemorySegment IID_IProgressNotify() {
        return IID_IProgressNotify$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IProgressNotify
     * }
     */
    public static void IID_IProgressNotify(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IProgressNotify$constants.SEGMENT, 0L, IID_IProgressNotify$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidl_0000_0080_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_objidl_0000_0080_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0080_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0080_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0080_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0080_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0080_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0080_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0080_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0080_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0080_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0080_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0080_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0080_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0080_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0080_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0080_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_objidl_0000_0080_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0080_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0080_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0080_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0080_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0080_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0080_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0080_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0080_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0080_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0080_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0080_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0080_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0080_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0080_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_ILayoutStorage$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_ILayoutStorage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ILayoutStorage
     * }
     */
    public static GroupLayout IID_ILayoutStorage$layout() {
        return IID_ILayoutStorage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ILayoutStorage
     * }
     */
    public static MemorySegment IID_ILayoutStorage() {
        return IID_ILayoutStorage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ILayoutStorage
     * }
     */
    public static void IID_ILayoutStorage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ILayoutStorage$constants.SEGMENT, 0L, IID_ILayoutStorage$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidl_0000_0081_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_objidl_0000_0081_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0081_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0081_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0081_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0081_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0081_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0081_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0081_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0081_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0081_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0081_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0081_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0081_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0081_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0081_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0081_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_objidl_0000_0081_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0081_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0081_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0081_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0081_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0081_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0081_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0081_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0081_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0081_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0081_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0081_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0081_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0081_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0081_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IBlockingLock$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IBlockingLock").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBlockingLock
     * }
     */
    public static GroupLayout IID_IBlockingLock$layout() {
        return IID_IBlockingLock$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBlockingLock
     * }
     */
    public static MemorySegment IID_IBlockingLock() {
        return IID_IBlockingLock$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBlockingLock
     * }
     */
    public static void IID_IBlockingLock(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IBlockingLock$constants.SEGMENT, 0L, IID_IBlockingLock$constants.LAYOUT.byteSize());
    }

    private static class IID_ITimeAndNoticeControl$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_ITimeAndNoticeControl").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITimeAndNoticeControl
     * }
     */
    public static GroupLayout IID_ITimeAndNoticeControl$layout() {
        return IID_ITimeAndNoticeControl$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITimeAndNoticeControl
     * }
     */
    public static MemorySegment IID_ITimeAndNoticeControl() {
        return IID_ITimeAndNoticeControl$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITimeAndNoticeControl
     * }
     */
    public static void IID_ITimeAndNoticeControl(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ITimeAndNoticeControl$constants.SEGMENT, 0L, IID_ITimeAndNoticeControl$constants.LAYOUT.byteSize());
    }

    private static class IID_IOplockStorage$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IOplockStorage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOplockStorage
     * }
     */
    public static GroupLayout IID_IOplockStorage$layout() {
        return IID_IOplockStorage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOplockStorage
     * }
     */
    public static MemorySegment IID_IOplockStorage() {
        return IID_IOplockStorage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOplockStorage
     * }
     */
    public static void IID_IOplockStorage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IOplockStorage$constants.SEGMENT, 0L, IID_IOplockStorage$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidl_0000_0084_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_objidl_0000_0084_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0084_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0084_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0084_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0084_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0084_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0084_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0084_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0084_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0084_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0084_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0084_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0084_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0084_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0084_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0084_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_objidl_0000_0084_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0084_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0084_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0084_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0084_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0084_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0084_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0084_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0084_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0084_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0084_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0084_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0084_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0084_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0084_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IDirectWriterLock$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IDirectWriterLock").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDirectWriterLock
     * }
     */
    public static GroupLayout IID_IDirectWriterLock$layout() {
        return IID_IDirectWriterLock$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDirectWriterLock
     * }
     */
    public static MemorySegment IID_IDirectWriterLock() {
        return IID_IDirectWriterLock$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDirectWriterLock
     * }
     */
    public static void IID_IDirectWriterLock(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IDirectWriterLock$constants.SEGMENT, 0L, IID_IDirectWriterLock$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidl_0000_0085_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_objidl_0000_0085_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0085_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0085_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0085_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0085_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0085_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0085_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0085_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0085_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0085_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0085_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0085_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0085_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0085_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0085_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0085_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_objidl_0000_0085_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0085_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0085_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0085_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0085_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0085_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0085_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0085_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0085_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0085_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0085_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0085_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0085_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0085_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0085_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IUrlMon$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IUrlMon").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IUrlMon
     * }
     */
    public static GroupLayout IID_IUrlMon$layout() {
        return IID_IUrlMon$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IUrlMon
     * }
     */
    public static MemorySegment IID_IUrlMon() {
        return IID_IUrlMon$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IUrlMon
     * }
     */
    public static void IID_IUrlMon(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IUrlMon$constants.SEGMENT, 0L, IID_IUrlMon$constants.LAYOUT.byteSize());
    }

    private static class IID_IForegroundTransfer$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IForegroundTransfer").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IForegroundTransfer
     * }
     */
    public static GroupLayout IID_IForegroundTransfer$layout() {
        return IID_IForegroundTransfer$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IForegroundTransfer
     * }
     */
    public static MemorySegment IID_IForegroundTransfer() {
        return IID_IForegroundTransfer$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IForegroundTransfer
     * }
     */
    public static void IID_IForegroundTransfer(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IForegroundTransfer$constants.SEGMENT, 0L, IID_IForegroundTransfer$constants.LAYOUT.byteSize());
    }

    private static class IID_IThumbnailExtractor$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IThumbnailExtractor").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IThumbnailExtractor
     * }
     */
    public static GroupLayout IID_IThumbnailExtractor$layout() {
        return IID_IThumbnailExtractor$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IThumbnailExtractor
     * }
     */
    public static MemorySegment IID_IThumbnailExtractor() {
        return IID_IThumbnailExtractor$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IThumbnailExtractor
     * }
     */
    public static void IID_IThumbnailExtractor(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IThumbnailExtractor$constants.SEGMENT, 0L, IID_IThumbnailExtractor$constants.LAYOUT.byteSize());
    }

    private static class IID_IDummyHICONIncluder$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IDummyHICONIncluder").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDummyHICONIncluder
     * }
     */
    public static GroupLayout IID_IDummyHICONIncluder$layout() {
        return IID_IDummyHICONIncluder$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDummyHICONIncluder
     * }
     */
    public static MemorySegment IID_IDummyHICONIncluder() {
        return IID_IDummyHICONIncluder$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDummyHICONIncluder
     * }
     */
    public static void IID_IDummyHICONIncluder(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IDummyHICONIncluder$constants.SEGMENT, 0L, IID_IDummyHICONIncluder$constants.LAYOUT.byteSize());
    }
    private static final int ServerApplication = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagApplicationType.ServerApplication = 0
     * }
     */
    public static int ServerApplication() {
        return ServerApplication;
    }
    private static final int LibraryApplication = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagApplicationType.LibraryApplication = 1
     * }
     */
    public static int LibraryApplication() {
        return LibraryApplication;
    }
    private static final int IdleShutdown = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagShutdownType.IdleShutdown = 0
     * }
     */
    public static int IdleShutdown() {
        return IdleShutdown;
    }
    private static final int ForcedShutdown = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagShutdownType.ForcedShutdown = 1
     * }
     */
    public static int ForcedShutdown() {
        return ForcedShutdown;
    }

    private static class __MIDL_itf_objidl_0000_0089_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_objidl_0000_0089_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0089_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0089_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0089_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0089_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0089_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0089_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0089_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0089_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0089_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0089_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0089_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0089_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0089_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0089_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0089_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_objidl_0000_0089_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0089_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0089_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0089_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0089_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0089_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0089_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0089_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0089_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0089_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0089_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0089_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0089_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0089_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0089_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IProcessLock$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IProcessLock").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IProcessLock
     * }
     */
    public static GroupLayout IID_IProcessLock$layout() {
        return IID_IProcessLock$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IProcessLock
     * }
     */
    public static MemorySegment IID_IProcessLock() {
        return IID_IProcessLock$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IProcessLock
     * }
     */
    public static void IID_IProcessLock(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IProcessLock$constants.SEGMENT, 0L, IID_IProcessLock$constants.LAYOUT.byteSize());
    }

    private static class IID_ISurrogateService$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_ISurrogateService").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISurrogateService
     * }
     */
    public static GroupLayout IID_ISurrogateService$layout() {
        return IID_ISurrogateService$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISurrogateService
     * }
     */
    public static MemorySegment IID_ISurrogateService() {
        return IID_ISurrogateService$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISurrogateService
     * }
     */
    public static void IID_ISurrogateService(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ISurrogateService$constants.SEGMENT, 0L, IID_ISurrogateService$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidl_0000_0091_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_objidl_0000_0091_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0091_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0091_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0091_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0091_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0091_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0091_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0091_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0091_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0091_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0091_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0091_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0091_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0091_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0091_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0091_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_objidl_0000_0091_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0091_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0091_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0091_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0091_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0091_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0091_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0091_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0091_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0091_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0091_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0091_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0091_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0091_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0091_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IInitializeSpy *LPINITIALIZESPY
     * }
     */
    public static final AddressLayout LPINITIALIZESPY = C_POINTER;

    private static class IID_IInitializeSpy$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IInitializeSpy").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInitializeSpy
     * }
     */
    public static GroupLayout IID_IInitializeSpy$layout() {
        return IID_IInitializeSpy$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInitializeSpy
     * }
     */
    public static MemorySegment IID_IInitializeSpy() {
        return IID_IInitializeSpy$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInitializeSpy
     * }
     */
    public static void IID_IInitializeSpy(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInitializeSpy$constants.SEGMENT, 0L, IID_IInitializeSpy$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidl_0000_0092_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_objidl_0000_0092_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0092_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0092_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0092_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0092_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0092_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0092_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0092_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0092_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0092_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0092_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0092_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0092_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0092_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0092_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0092_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_objidl_0000_0092_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0092_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0092_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0092_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0092_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0092_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0092_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0092_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0092_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0092_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0092_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0092_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0092_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0092_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0092_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IApartmentShutdown$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IApartmentShutdown").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IApartmentShutdown
     * }
     */
    public static GroupLayout IID_IApartmentShutdown$layout() {
        return IID_IApartmentShutdown$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IApartmentShutdown
     * }
     */
    public static MemorySegment IID_IApartmentShutdown() {
        return IID_IApartmentShutdown$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IApartmentShutdown
     * }
     */
    public static void IID_IApartmentShutdown(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IApartmentShutdown$constants.SEGMENT, 0L, IID_IApartmentShutdown$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidl_0000_0093_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_objidl_0000_0093_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0093_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0093_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0093_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0093_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0093_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0093_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0093_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0093_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0093_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0093_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0093_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0093_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0093_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0093_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0093_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_objidl_0000_0093_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0093_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0093_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0093_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0093_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0093_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0093_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0093_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0093_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0093_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0093_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0093_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0093_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0093_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0093_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class ASYNC_STGMEDIUM_UserSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ASYNC_STGMEDIUM_UserSize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long ASYNC_STGMEDIUM_UserSize(unsigned long *, unsigned long, ASYNC_STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor ASYNC_STGMEDIUM_UserSize$descriptor() {
        return ASYNC_STGMEDIUM_UserSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long ASYNC_STGMEDIUM_UserSize(unsigned long *, unsigned long, ASYNC_STGMEDIUM *)
     * }
     */
    public static MethodHandle ASYNC_STGMEDIUM_UserSize$handle() {
        return ASYNC_STGMEDIUM_UserSize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned long ASYNC_STGMEDIUM_UserSize(unsigned long *, unsigned long, ASYNC_STGMEDIUM *)
     * }
     */
    public static int ASYNC_STGMEDIUM_UserSize(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = ASYNC_STGMEDIUM_UserSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ASYNC_STGMEDIUM_UserSize", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ASYNC_STGMEDIUM_UserMarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ASYNC_STGMEDIUM_UserMarshal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *ASYNC_STGMEDIUM_UserMarshal(unsigned long *, unsigned char *, ASYNC_STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor ASYNC_STGMEDIUM_UserMarshal$descriptor() {
        return ASYNC_STGMEDIUM_UserMarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *ASYNC_STGMEDIUM_UserMarshal(unsigned long *, unsigned char *, ASYNC_STGMEDIUM *)
     * }
     */
    public static MethodHandle ASYNC_STGMEDIUM_UserMarshal$handle() {
        return ASYNC_STGMEDIUM_UserMarshal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *ASYNC_STGMEDIUM_UserMarshal(unsigned long *, unsigned char *, ASYNC_STGMEDIUM *)
     * }
     */
    public static MemorySegment ASYNC_STGMEDIUM_UserMarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = ASYNC_STGMEDIUM_UserMarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ASYNC_STGMEDIUM_UserMarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ASYNC_STGMEDIUM_UserUnmarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ASYNC_STGMEDIUM_UserUnmarshal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *ASYNC_STGMEDIUM_UserUnmarshal(unsigned long *, unsigned char *, ASYNC_STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor ASYNC_STGMEDIUM_UserUnmarshal$descriptor() {
        return ASYNC_STGMEDIUM_UserUnmarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *ASYNC_STGMEDIUM_UserUnmarshal(unsigned long *, unsigned char *, ASYNC_STGMEDIUM *)
     * }
     */
    public static MethodHandle ASYNC_STGMEDIUM_UserUnmarshal$handle() {
        return ASYNC_STGMEDIUM_UserUnmarshal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *ASYNC_STGMEDIUM_UserUnmarshal(unsigned long *, unsigned char *, ASYNC_STGMEDIUM *)
     * }
     */
    public static MemorySegment ASYNC_STGMEDIUM_UserUnmarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = ASYNC_STGMEDIUM_UserUnmarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ASYNC_STGMEDIUM_UserUnmarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ASYNC_STGMEDIUM_UserFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ASYNC_STGMEDIUM_UserFree"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ASYNC_STGMEDIUM_UserFree(unsigned long *, ASYNC_STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor ASYNC_STGMEDIUM_UserFree$descriptor() {
        return ASYNC_STGMEDIUM_UserFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ASYNC_STGMEDIUM_UserFree(unsigned long *, ASYNC_STGMEDIUM *)
     * }
     */
    public static MethodHandle ASYNC_STGMEDIUM_UserFree$handle() {
        return ASYNC_STGMEDIUM_UserFree.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void ASYNC_STGMEDIUM_UserFree(unsigned long *, ASYNC_STGMEDIUM *)
     * }
     */
    public static void ASYNC_STGMEDIUM_UserFree(MemorySegment x0, MemorySegment x1) {
        var mh$ = ASYNC_STGMEDIUM_UserFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ASYNC_STGMEDIUM_UserFree", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CLIPFORMAT_UserSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CLIPFORMAT_UserSize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long CLIPFORMAT_UserSize(unsigned long *, unsigned long, CLIPFORMAT *)
     * }
     */
    public static FunctionDescriptor CLIPFORMAT_UserSize$descriptor() {
        return CLIPFORMAT_UserSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long CLIPFORMAT_UserSize(unsigned long *, unsigned long, CLIPFORMAT *)
     * }
     */
    public static MethodHandle CLIPFORMAT_UserSize$handle() {
        return CLIPFORMAT_UserSize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned long CLIPFORMAT_UserSize(unsigned long *, unsigned long, CLIPFORMAT *)
     * }
     */
    public static int CLIPFORMAT_UserSize(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = CLIPFORMAT_UserSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CLIPFORMAT_UserSize", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CLIPFORMAT_UserMarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CLIPFORMAT_UserMarshal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *CLIPFORMAT_UserMarshal(unsigned long *, unsigned char *, CLIPFORMAT *)
     * }
     */
    public static FunctionDescriptor CLIPFORMAT_UserMarshal$descriptor() {
        return CLIPFORMAT_UserMarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *CLIPFORMAT_UserMarshal(unsigned long *, unsigned char *, CLIPFORMAT *)
     * }
     */
    public static MethodHandle CLIPFORMAT_UserMarshal$handle() {
        return CLIPFORMAT_UserMarshal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *CLIPFORMAT_UserMarshal(unsigned long *, unsigned char *, CLIPFORMAT *)
     * }
     */
    public static MemorySegment CLIPFORMAT_UserMarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = CLIPFORMAT_UserMarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CLIPFORMAT_UserMarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CLIPFORMAT_UserUnmarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CLIPFORMAT_UserUnmarshal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *CLIPFORMAT_UserUnmarshal(unsigned long *, unsigned char *, CLIPFORMAT *)
     * }
     */
    public static FunctionDescriptor CLIPFORMAT_UserUnmarshal$descriptor() {
        return CLIPFORMAT_UserUnmarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *CLIPFORMAT_UserUnmarshal(unsigned long *, unsigned char *, CLIPFORMAT *)
     * }
     */
    public static MethodHandle CLIPFORMAT_UserUnmarshal$handle() {
        return CLIPFORMAT_UserUnmarshal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *CLIPFORMAT_UserUnmarshal(unsigned long *, unsigned char *, CLIPFORMAT *)
     * }
     */
    public static MemorySegment CLIPFORMAT_UserUnmarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = CLIPFORMAT_UserUnmarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CLIPFORMAT_UserUnmarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CLIPFORMAT_UserFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CLIPFORMAT_UserFree"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void CLIPFORMAT_UserFree(unsigned long *, CLIPFORMAT *)
     * }
     */
    public static FunctionDescriptor CLIPFORMAT_UserFree$descriptor() {
        return CLIPFORMAT_UserFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void CLIPFORMAT_UserFree(unsigned long *, CLIPFORMAT *)
     * }
     */
    public static MethodHandle CLIPFORMAT_UserFree$handle() {
        return CLIPFORMAT_UserFree.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void CLIPFORMAT_UserFree(unsigned long *, CLIPFORMAT *)
     * }
     */
    public static void CLIPFORMAT_UserFree(MemorySegment x0, MemorySegment x1) {
        var mh$ = CLIPFORMAT_UserFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CLIPFORMAT_UserFree", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FLAG_STGMEDIUM_UserSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("FLAG_STGMEDIUM_UserSize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long FLAG_STGMEDIUM_UserSize(unsigned long *, unsigned long, FLAG_STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor FLAG_STGMEDIUM_UserSize$descriptor() {
        return FLAG_STGMEDIUM_UserSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long FLAG_STGMEDIUM_UserSize(unsigned long *, unsigned long, FLAG_STGMEDIUM *)
     * }
     */
    public static MethodHandle FLAG_STGMEDIUM_UserSize$handle() {
        return FLAG_STGMEDIUM_UserSize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned long FLAG_STGMEDIUM_UserSize(unsigned long *, unsigned long, FLAG_STGMEDIUM *)
     * }
     */
    public static int FLAG_STGMEDIUM_UserSize(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = FLAG_STGMEDIUM_UserSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FLAG_STGMEDIUM_UserSize", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FLAG_STGMEDIUM_UserMarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("FLAG_STGMEDIUM_UserMarshal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *FLAG_STGMEDIUM_UserMarshal(unsigned long *, unsigned char *, FLAG_STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor FLAG_STGMEDIUM_UserMarshal$descriptor() {
        return FLAG_STGMEDIUM_UserMarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *FLAG_STGMEDIUM_UserMarshal(unsigned long *, unsigned char *, FLAG_STGMEDIUM *)
     * }
     */
    public static MethodHandle FLAG_STGMEDIUM_UserMarshal$handle() {
        return FLAG_STGMEDIUM_UserMarshal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *FLAG_STGMEDIUM_UserMarshal(unsigned long *, unsigned char *, FLAG_STGMEDIUM *)
     * }
     */
    public static MemorySegment FLAG_STGMEDIUM_UserMarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = FLAG_STGMEDIUM_UserMarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FLAG_STGMEDIUM_UserMarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FLAG_STGMEDIUM_UserUnmarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("FLAG_STGMEDIUM_UserUnmarshal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *FLAG_STGMEDIUM_UserUnmarshal(unsigned long *, unsigned char *, FLAG_STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor FLAG_STGMEDIUM_UserUnmarshal$descriptor() {
        return FLAG_STGMEDIUM_UserUnmarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *FLAG_STGMEDIUM_UserUnmarshal(unsigned long *, unsigned char *, FLAG_STGMEDIUM *)
     * }
     */
    public static MethodHandle FLAG_STGMEDIUM_UserUnmarshal$handle() {
        return FLAG_STGMEDIUM_UserUnmarshal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *FLAG_STGMEDIUM_UserUnmarshal(unsigned long *, unsigned char *, FLAG_STGMEDIUM *)
     * }
     */
    public static MemorySegment FLAG_STGMEDIUM_UserUnmarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = FLAG_STGMEDIUM_UserUnmarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FLAG_STGMEDIUM_UserUnmarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FLAG_STGMEDIUM_UserFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("FLAG_STGMEDIUM_UserFree"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void FLAG_STGMEDIUM_UserFree(unsigned long *, FLAG_STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor FLAG_STGMEDIUM_UserFree$descriptor() {
        return FLAG_STGMEDIUM_UserFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void FLAG_STGMEDIUM_UserFree(unsigned long *, FLAG_STGMEDIUM *)
     * }
     */
    public static MethodHandle FLAG_STGMEDIUM_UserFree$handle() {
        return FLAG_STGMEDIUM_UserFree.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void FLAG_STGMEDIUM_UserFree(unsigned long *, FLAG_STGMEDIUM *)
     * }
     */
    public static void FLAG_STGMEDIUM_UserFree(MemorySegment x0, MemorySegment x1) {
        var mh$ = FLAG_STGMEDIUM_UserFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FLAG_STGMEDIUM_UserFree", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HBITMAP_UserSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("HBITMAP_UserSize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long HBITMAP_UserSize(unsigned long *, unsigned long, HBITMAP *)
     * }
     */
    public static FunctionDescriptor HBITMAP_UserSize$descriptor() {
        return HBITMAP_UserSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long HBITMAP_UserSize(unsigned long *, unsigned long, HBITMAP *)
     * }
     */
    public static MethodHandle HBITMAP_UserSize$handle() {
        return HBITMAP_UserSize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned long HBITMAP_UserSize(unsigned long *, unsigned long, HBITMAP *)
     * }
     */
    public static int HBITMAP_UserSize(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = HBITMAP_UserSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HBITMAP_UserSize", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HBITMAP_UserMarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("HBITMAP_UserMarshal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HBITMAP_UserMarshal(unsigned long *, unsigned char *, HBITMAP *)
     * }
     */
    public static FunctionDescriptor HBITMAP_UserMarshal$descriptor() {
        return HBITMAP_UserMarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HBITMAP_UserMarshal(unsigned long *, unsigned char *, HBITMAP *)
     * }
     */
    public static MethodHandle HBITMAP_UserMarshal$handle() {
        return HBITMAP_UserMarshal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *HBITMAP_UserMarshal(unsigned long *, unsigned char *, HBITMAP *)
     * }
     */
    public static MemorySegment HBITMAP_UserMarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HBITMAP_UserMarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HBITMAP_UserMarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HBITMAP_UserUnmarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("HBITMAP_UserUnmarshal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HBITMAP_UserUnmarshal(unsigned long *, unsigned char *, HBITMAP *)
     * }
     */
    public static FunctionDescriptor HBITMAP_UserUnmarshal$descriptor() {
        return HBITMAP_UserUnmarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HBITMAP_UserUnmarshal(unsigned long *, unsigned char *, HBITMAP *)
     * }
     */
    public static MethodHandle HBITMAP_UserUnmarshal$handle() {
        return HBITMAP_UserUnmarshal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *HBITMAP_UserUnmarshal(unsigned long *, unsigned char *, HBITMAP *)
     * }
     */
    public static MemorySegment HBITMAP_UserUnmarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HBITMAP_UserUnmarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HBITMAP_UserUnmarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HBITMAP_UserFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("HBITMAP_UserFree"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void HBITMAP_UserFree(unsigned long *, HBITMAP *)
     * }
     */
    public static FunctionDescriptor HBITMAP_UserFree$descriptor() {
        return HBITMAP_UserFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void HBITMAP_UserFree(unsigned long *, HBITMAP *)
     * }
     */
    public static MethodHandle HBITMAP_UserFree$handle() {
        return HBITMAP_UserFree.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void HBITMAP_UserFree(unsigned long *, HBITMAP *)
     * }
     */
    public static void HBITMAP_UserFree(MemorySegment x0, MemorySegment x1) {
        var mh$ = HBITMAP_UserFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HBITMAP_UserFree", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HDC_UserSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("HDC_UserSize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long HDC_UserSize(unsigned long *, unsigned long, HDC *)
     * }
     */
    public static FunctionDescriptor HDC_UserSize$descriptor() {
        return HDC_UserSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long HDC_UserSize(unsigned long *, unsigned long, HDC *)
     * }
     */
    public static MethodHandle HDC_UserSize$handle() {
        return HDC_UserSize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned long HDC_UserSize(unsigned long *, unsigned long, HDC *)
     * }
     */
    public static int HDC_UserSize(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = HDC_UserSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HDC_UserSize", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HDC_UserMarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("HDC_UserMarshal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HDC_UserMarshal(unsigned long *, unsigned char *, HDC *)
     * }
     */
    public static FunctionDescriptor HDC_UserMarshal$descriptor() {
        return HDC_UserMarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HDC_UserMarshal(unsigned long *, unsigned char *, HDC *)
     * }
     */
    public static MethodHandle HDC_UserMarshal$handle() {
        return HDC_UserMarshal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *HDC_UserMarshal(unsigned long *, unsigned char *, HDC *)
     * }
     */
    public static MemorySegment HDC_UserMarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HDC_UserMarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HDC_UserMarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HDC_UserUnmarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("HDC_UserUnmarshal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HDC_UserUnmarshal(unsigned long *, unsigned char *, HDC *)
     * }
     */
    public static FunctionDescriptor HDC_UserUnmarshal$descriptor() {
        return HDC_UserUnmarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HDC_UserUnmarshal(unsigned long *, unsigned char *, HDC *)
     * }
     */
    public static MethodHandle HDC_UserUnmarshal$handle() {
        return HDC_UserUnmarshal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *HDC_UserUnmarshal(unsigned long *, unsigned char *, HDC *)
     * }
     */
    public static MemorySegment HDC_UserUnmarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HDC_UserUnmarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HDC_UserUnmarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HDC_UserFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("HDC_UserFree"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void HDC_UserFree(unsigned long *, HDC *)
     * }
     */
    public static FunctionDescriptor HDC_UserFree$descriptor() {
        return HDC_UserFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void HDC_UserFree(unsigned long *, HDC *)
     * }
     */
    public static MethodHandle HDC_UserFree$handle() {
        return HDC_UserFree.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void HDC_UserFree(unsigned long *, HDC *)
     * }
     */
    public static void HDC_UserFree(MemorySegment x0, MemorySegment x1) {
        var mh$ = HDC_UserFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HDC_UserFree", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HICON_UserSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("HICON_UserSize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long HICON_UserSize(unsigned long *, unsigned long, HICON *)
     * }
     */
    public static FunctionDescriptor HICON_UserSize$descriptor() {
        return HICON_UserSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long HICON_UserSize(unsigned long *, unsigned long, HICON *)
     * }
     */
    public static MethodHandle HICON_UserSize$handle() {
        return HICON_UserSize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned long HICON_UserSize(unsigned long *, unsigned long, HICON *)
     * }
     */
    public static int HICON_UserSize(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = HICON_UserSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HICON_UserSize", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HICON_UserMarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("HICON_UserMarshal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HICON_UserMarshal(unsigned long *, unsigned char *, HICON *)
     * }
     */
    public static FunctionDescriptor HICON_UserMarshal$descriptor() {
        return HICON_UserMarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HICON_UserMarshal(unsigned long *, unsigned char *, HICON *)
     * }
     */
    public static MethodHandle HICON_UserMarshal$handle() {
        return HICON_UserMarshal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *HICON_UserMarshal(unsigned long *, unsigned char *, HICON *)
     * }
     */
    public static MemorySegment HICON_UserMarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HICON_UserMarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HICON_UserMarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HICON_UserUnmarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("HICON_UserUnmarshal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HICON_UserUnmarshal(unsigned long *, unsigned char *, HICON *)
     * }
     */
    public static FunctionDescriptor HICON_UserUnmarshal$descriptor() {
        return HICON_UserUnmarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HICON_UserUnmarshal(unsigned long *, unsigned char *, HICON *)
     * }
     */
    public static MethodHandle HICON_UserUnmarshal$handle() {
        return HICON_UserUnmarshal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *HICON_UserUnmarshal(unsigned long *, unsigned char *, HICON *)
     * }
     */
    public static MemorySegment HICON_UserUnmarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HICON_UserUnmarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HICON_UserUnmarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HICON_UserFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("HICON_UserFree"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void HICON_UserFree(unsigned long *, HICON *)
     * }
     */
    public static FunctionDescriptor HICON_UserFree$descriptor() {
        return HICON_UserFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void HICON_UserFree(unsigned long *, HICON *)
     * }
     */
    public static MethodHandle HICON_UserFree$handle() {
        return HICON_UserFree.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void HICON_UserFree(unsigned long *, HICON *)
     * }
     */
    public static void HICON_UserFree(MemorySegment x0, MemorySegment x1) {
        var mh$ = HICON_UserFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HICON_UserFree", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SNB_UserSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SNB_UserSize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long SNB_UserSize(unsigned long *, unsigned long, SNB *)
     * }
     */
    public static FunctionDescriptor SNB_UserSize$descriptor() {
        return SNB_UserSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long SNB_UserSize(unsigned long *, unsigned long, SNB *)
     * }
     */
    public static MethodHandle SNB_UserSize$handle() {
        return SNB_UserSize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned long SNB_UserSize(unsigned long *, unsigned long, SNB *)
     * }
     */
    public static int SNB_UserSize(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = SNB_UserSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SNB_UserSize", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SNB_UserMarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SNB_UserMarshal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *SNB_UserMarshal(unsigned long *, unsigned char *, SNB *)
     * }
     */
    public static FunctionDescriptor SNB_UserMarshal$descriptor() {
        return SNB_UserMarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *SNB_UserMarshal(unsigned long *, unsigned char *, SNB *)
     * }
     */
    public static MethodHandle SNB_UserMarshal$handle() {
        return SNB_UserMarshal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *SNB_UserMarshal(unsigned long *, unsigned char *, SNB *)
     * }
     */
    public static MemorySegment SNB_UserMarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = SNB_UserMarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SNB_UserMarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SNB_UserUnmarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SNB_UserUnmarshal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *SNB_UserUnmarshal(unsigned long *, unsigned char *, SNB *)
     * }
     */
    public static FunctionDescriptor SNB_UserUnmarshal$descriptor() {
        return SNB_UserUnmarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *SNB_UserUnmarshal(unsigned long *, unsigned char *, SNB *)
     * }
     */
    public static MethodHandle SNB_UserUnmarshal$handle() {
        return SNB_UserUnmarshal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *SNB_UserUnmarshal(unsigned long *, unsigned char *, SNB *)
     * }
     */
    public static MemorySegment SNB_UserUnmarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = SNB_UserUnmarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SNB_UserUnmarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SNB_UserFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SNB_UserFree"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SNB_UserFree(unsigned long *, SNB *)
     * }
     */
    public static FunctionDescriptor SNB_UserFree$descriptor() {
        return SNB_UserFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SNB_UserFree(unsigned long *, SNB *)
     * }
     */
    public static MethodHandle SNB_UserFree$handle() {
        return SNB_UserFree.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SNB_UserFree(unsigned long *, SNB *)
     * }
     */
    public static void SNB_UserFree(MemorySegment x0, MemorySegment x1) {
        var mh$ = SNB_UserFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SNB_UserFree", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class STGMEDIUM_UserSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("STGMEDIUM_UserSize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long STGMEDIUM_UserSize(unsigned long *, unsigned long, STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor STGMEDIUM_UserSize$descriptor() {
        return STGMEDIUM_UserSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long STGMEDIUM_UserSize(unsigned long *, unsigned long, STGMEDIUM *)
     * }
     */
    public static MethodHandle STGMEDIUM_UserSize$handle() {
        return STGMEDIUM_UserSize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned long STGMEDIUM_UserSize(unsigned long *, unsigned long, STGMEDIUM *)
     * }
     */
    public static int STGMEDIUM_UserSize(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = STGMEDIUM_UserSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("STGMEDIUM_UserSize", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class STGMEDIUM_UserMarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("STGMEDIUM_UserMarshal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *STGMEDIUM_UserMarshal(unsigned long *, unsigned char *, STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor STGMEDIUM_UserMarshal$descriptor() {
        return STGMEDIUM_UserMarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *STGMEDIUM_UserMarshal(unsigned long *, unsigned char *, STGMEDIUM *)
     * }
     */
    public static MethodHandle STGMEDIUM_UserMarshal$handle() {
        return STGMEDIUM_UserMarshal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *STGMEDIUM_UserMarshal(unsigned long *, unsigned char *, STGMEDIUM *)
     * }
     */
    public static MemorySegment STGMEDIUM_UserMarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = STGMEDIUM_UserMarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("STGMEDIUM_UserMarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class STGMEDIUM_UserUnmarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("STGMEDIUM_UserUnmarshal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *STGMEDIUM_UserUnmarshal(unsigned long *, unsigned char *, STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor STGMEDIUM_UserUnmarshal$descriptor() {
        return STGMEDIUM_UserUnmarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *STGMEDIUM_UserUnmarshal(unsigned long *, unsigned char *, STGMEDIUM *)
     * }
     */
    public static MethodHandle STGMEDIUM_UserUnmarshal$handle() {
        return STGMEDIUM_UserUnmarshal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *STGMEDIUM_UserUnmarshal(unsigned long *, unsigned char *, STGMEDIUM *)
     * }
     */
    public static MemorySegment STGMEDIUM_UserUnmarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = STGMEDIUM_UserUnmarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("STGMEDIUM_UserUnmarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class STGMEDIUM_UserFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("STGMEDIUM_UserFree"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void STGMEDIUM_UserFree(unsigned long *, STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor STGMEDIUM_UserFree$descriptor() {
        return STGMEDIUM_UserFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void STGMEDIUM_UserFree(unsigned long *, STGMEDIUM *)
     * }
     */
    public static MethodHandle STGMEDIUM_UserFree$handle() {
        return STGMEDIUM_UserFree.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void STGMEDIUM_UserFree(unsigned long *, STGMEDIUM *)
     * }
     */
    public static void STGMEDIUM_UserFree(MemorySegment x0, MemorySegment x1) {
        var mh$ = STGMEDIUM_UserFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("STGMEDIUM_UserFree", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ASYNC_STGMEDIUM_UserSize64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ASYNC_STGMEDIUM_UserSize64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long ASYNC_STGMEDIUM_UserSize64(unsigned long *, unsigned long, ASYNC_STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor ASYNC_STGMEDIUM_UserSize64$descriptor() {
        return ASYNC_STGMEDIUM_UserSize64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long ASYNC_STGMEDIUM_UserSize64(unsigned long *, unsigned long, ASYNC_STGMEDIUM *)
     * }
     */
    public static MethodHandle ASYNC_STGMEDIUM_UserSize64$handle() {
        return ASYNC_STGMEDIUM_UserSize64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned long ASYNC_STGMEDIUM_UserSize64(unsigned long *, unsigned long, ASYNC_STGMEDIUM *)
     * }
     */
    public static int ASYNC_STGMEDIUM_UserSize64(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = ASYNC_STGMEDIUM_UserSize64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ASYNC_STGMEDIUM_UserSize64", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ASYNC_STGMEDIUM_UserMarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ASYNC_STGMEDIUM_UserMarshal64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *ASYNC_STGMEDIUM_UserMarshal64(unsigned long *, unsigned char *, ASYNC_STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor ASYNC_STGMEDIUM_UserMarshal64$descriptor() {
        return ASYNC_STGMEDIUM_UserMarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *ASYNC_STGMEDIUM_UserMarshal64(unsigned long *, unsigned char *, ASYNC_STGMEDIUM *)
     * }
     */
    public static MethodHandle ASYNC_STGMEDIUM_UserMarshal64$handle() {
        return ASYNC_STGMEDIUM_UserMarshal64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *ASYNC_STGMEDIUM_UserMarshal64(unsigned long *, unsigned char *, ASYNC_STGMEDIUM *)
     * }
     */
    public static MemorySegment ASYNC_STGMEDIUM_UserMarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = ASYNC_STGMEDIUM_UserMarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ASYNC_STGMEDIUM_UserMarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ASYNC_STGMEDIUM_UserUnmarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ASYNC_STGMEDIUM_UserUnmarshal64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *ASYNC_STGMEDIUM_UserUnmarshal64(unsigned long *, unsigned char *, ASYNC_STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor ASYNC_STGMEDIUM_UserUnmarshal64$descriptor() {
        return ASYNC_STGMEDIUM_UserUnmarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *ASYNC_STGMEDIUM_UserUnmarshal64(unsigned long *, unsigned char *, ASYNC_STGMEDIUM *)
     * }
     */
    public static MethodHandle ASYNC_STGMEDIUM_UserUnmarshal64$handle() {
        return ASYNC_STGMEDIUM_UserUnmarshal64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *ASYNC_STGMEDIUM_UserUnmarshal64(unsigned long *, unsigned char *, ASYNC_STGMEDIUM *)
     * }
     */
    public static MemorySegment ASYNC_STGMEDIUM_UserUnmarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = ASYNC_STGMEDIUM_UserUnmarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ASYNC_STGMEDIUM_UserUnmarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ASYNC_STGMEDIUM_UserFree64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ASYNC_STGMEDIUM_UserFree64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ASYNC_STGMEDIUM_UserFree64(unsigned long *, ASYNC_STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor ASYNC_STGMEDIUM_UserFree64$descriptor() {
        return ASYNC_STGMEDIUM_UserFree64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ASYNC_STGMEDIUM_UserFree64(unsigned long *, ASYNC_STGMEDIUM *)
     * }
     */
    public static MethodHandle ASYNC_STGMEDIUM_UserFree64$handle() {
        return ASYNC_STGMEDIUM_UserFree64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void ASYNC_STGMEDIUM_UserFree64(unsigned long *, ASYNC_STGMEDIUM *)
     * }
     */
    public static void ASYNC_STGMEDIUM_UserFree64(MemorySegment x0, MemorySegment x1) {
        var mh$ = ASYNC_STGMEDIUM_UserFree64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ASYNC_STGMEDIUM_UserFree64", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CLIPFORMAT_UserSize64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CLIPFORMAT_UserSize64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long CLIPFORMAT_UserSize64(unsigned long *, unsigned long, CLIPFORMAT *)
     * }
     */
    public static FunctionDescriptor CLIPFORMAT_UserSize64$descriptor() {
        return CLIPFORMAT_UserSize64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long CLIPFORMAT_UserSize64(unsigned long *, unsigned long, CLIPFORMAT *)
     * }
     */
    public static MethodHandle CLIPFORMAT_UserSize64$handle() {
        return CLIPFORMAT_UserSize64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned long CLIPFORMAT_UserSize64(unsigned long *, unsigned long, CLIPFORMAT *)
     * }
     */
    public static int CLIPFORMAT_UserSize64(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = CLIPFORMAT_UserSize64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CLIPFORMAT_UserSize64", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CLIPFORMAT_UserMarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CLIPFORMAT_UserMarshal64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *CLIPFORMAT_UserMarshal64(unsigned long *, unsigned char *, CLIPFORMAT *)
     * }
     */
    public static FunctionDescriptor CLIPFORMAT_UserMarshal64$descriptor() {
        return CLIPFORMAT_UserMarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *CLIPFORMAT_UserMarshal64(unsigned long *, unsigned char *, CLIPFORMAT *)
     * }
     */
    public static MethodHandle CLIPFORMAT_UserMarshal64$handle() {
        return CLIPFORMAT_UserMarshal64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *CLIPFORMAT_UserMarshal64(unsigned long *, unsigned char *, CLIPFORMAT *)
     * }
     */
    public static MemorySegment CLIPFORMAT_UserMarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = CLIPFORMAT_UserMarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CLIPFORMAT_UserMarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CLIPFORMAT_UserUnmarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CLIPFORMAT_UserUnmarshal64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *CLIPFORMAT_UserUnmarshal64(unsigned long *, unsigned char *, CLIPFORMAT *)
     * }
     */
    public static FunctionDescriptor CLIPFORMAT_UserUnmarshal64$descriptor() {
        return CLIPFORMAT_UserUnmarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *CLIPFORMAT_UserUnmarshal64(unsigned long *, unsigned char *, CLIPFORMAT *)
     * }
     */
    public static MethodHandle CLIPFORMAT_UserUnmarshal64$handle() {
        return CLIPFORMAT_UserUnmarshal64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *CLIPFORMAT_UserUnmarshal64(unsigned long *, unsigned char *, CLIPFORMAT *)
     * }
     */
    public static MemorySegment CLIPFORMAT_UserUnmarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = CLIPFORMAT_UserUnmarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CLIPFORMAT_UserUnmarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CLIPFORMAT_UserFree64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CLIPFORMAT_UserFree64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void CLIPFORMAT_UserFree64(unsigned long *, CLIPFORMAT *)
     * }
     */
    public static FunctionDescriptor CLIPFORMAT_UserFree64$descriptor() {
        return CLIPFORMAT_UserFree64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void CLIPFORMAT_UserFree64(unsigned long *, CLIPFORMAT *)
     * }
     */
    public static MethodHandle CLIPFORMAT_UserFree64$handle() {
        return CLIPFORMAT_UserFree64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void CLIPFORMAT_UserFree64(unsigned long *, CLIPFORMAT *)
     * }
     */
    public static void CLIPFORMAT_UserFree64(MemorySegment x0, MemorySegment x1) {
        var mh$ = CLIPFORMAT_UserFree64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CLIPFORMAT_UserFree64", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FLAG_STGMEDIUM_UserSize64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("FLAG_STGMEDIUM_UserSize64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long FLAG_STGMEDIUM_UserSize64(unsigned long *, unsigned long, FLAG_STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor FLAG_STGMEDIUM_UserSize64$descriptor() {
        return FLAG_STGMEDIUM_UserSize64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long FLAG_STGMEDIUM_UserSize64(unsigned long *, unsigned long, FLAG_STGMEDIUM *)
     * }
     */
    public static MethodHandle FLAG_STGMEDIUM_UserSize64$handle() {
        return FLAG_STGMEDIUM_UserSize64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned long FLAG_STGMEDIUM_UserSize64(unsigned long *, unsigned long, FLAG_STGMEDIUM *)
     * }
     */
    public static int FLAG_STGMEDIUM_UserSize64(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = FLAG_STGMEDIUM_UserSize64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FLAG_STGMEDIUM_UserSize64", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FLAG_STGMEDIUM_UserMarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("FLAG_STGMEDIUM_UserMarshal64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *FLAG_STGMEDIUM_UserMarshal64(unsigned long *, unsigned char *, FLAG_STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor FLAG_STGMEDIUM_UserMarshal64$descriptor() {
        return FLAG_STGMEDIUM_UserMarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *FLAG_STGMEDIUM_UserMarshal64(unsigned long *, unsigned char *, FLAG_STGMEDIUM *)
     * }
     */
    public static MethodHandle FLAG_STGMEDIUM_UserMarshal64$handle() {
        return FLAG_STGMEDIUM_UserMarshal64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *FLAG_STGMEDIUM_UserMarshal64(unsigned long *, unsigned char *, FLAG_STGMEDIUM *)
     * }
     */
    public static MemorySegment FLAG_STGMEDIUM_UserMarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = FLAG_STGMEDIUM_UserMarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FLAG_STGMEDIUM_UserMarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FLAG_STGMEDIUM_UserUnmarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("FLAG_STGMEDIUM_UserUnmarshal64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *FLAG_STGMEDIUM_UserUnmarshal64(unsigned long *, unsigned char *, FLAG_STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor FLAG_STGMEDIUM_UserUnmarshal64$descriptor() {
        return FLAG_STGMEDIUM_UserUnmarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *FLAG_STGMEDIUM_UserUnmarshal64(unsigned long *, unsigned char *, FLAG_STGMEDIUM *)
     * }
     */
    public static MethodHandle FLAG_STGMEDIUM_UserUnmarshal64$handle() {
        return FLAG_STGMEDIUM_UserUnmarshal64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *FLAG_STGMEDIUM_UserUnmarshal64(unsigned long *, unsigned char *, FLAG_STGMEDIUM *)
     * }
     */
    public static MemorySegment FLAG_STGMEDIUM_UserUnmarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = FLAG_STGMEDIUM_UserUnmarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FLAG_STGMEDIUM_UserUnmarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FLAG_STGMEDIUM_UserFree64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("FLAG_STGMEDIUM_UserFree64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void FLAG_STGMEDIUM_UserFree64(unsigned long *, FLAG_STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor FLAG_STGMEDIUM_UserFree64$descriptor() {
        return FLAG_STGMEDIUM_UserFree64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void FLAG_STGMEDIUM_UserFree64(unsigned long *, FLAG_STGMEDIUM *)
     * }
     */
    public static MethodHandle FLAG_STGMEDIUM_UserFree64$handle() {
        return FLAG_STGMEDIUM_UserFree64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void FLAG_STGMEDIUM_UserFree64(unsigned long *, FLAG_STGMEDIUM *)
     * }
     */
    public static void FLAG_STGMEDIUM_UserFree64(MemorySegment x0, MemorySegment x1) {
        var mh$ = FLAG_STGMEDIUM_UserFree64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FLAG_STGMEDIUM_UserFree64", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HBITMAP_UserSize64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("HBITMAP_UserSize64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long HBITMAP_UserSize64(unsigned long *, unsigned long, HBITMAP *)
     * }
     */
    public static FunctionDescriptor HBITMAP_UserSize64$descriptor() {
        return HBITMAP_UserSize64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long HBITMAP_UserSize64(unsigned long *, unsigned long, HBITMAP *)
     * }
     */
    public static MethodHandle HBITMAP_UserSize64$handle() {
        return HBITMAP_UserSize64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned long HBITMAP_UserSize64(unsigned long *, unsigned long, HBITMAP *)
     * }
     */
    public static int HBITMAP_UserSize64(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = HBITMAP_UserSize64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HBITMAP_UserSize64", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HBITMAP_UserMarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("HBITMAP_UserMarshal64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HBITMAP_UserMarshal64(unsigned long *, unsigned char *, HBITMAP *)
     * }
     */
    public static FunctionDescriptor HBITMAP_UserMarshal64$descriptor() {
        return HBITMAP_UserMarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HBITMAP_UserMarshal64(unsigned long *, unsigned char *, HBITMAP *)
     * }
     */
    public static MethodHandle HBITMAP_UserMarshal64$handle() {
        return HBITMAP_UserMarshal64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *HBITMAP_UserMarshal64(unsigned long *, unsigned char *, HBITMAP *)
     * }
     */
    public static MemorySegment HBITMAP_UserMarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HBITMAP_UserMarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HBITMAP_UserMarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HBITMAP_UserUnmarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("HBITMAP_UserUnmarshal64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HBITMAP_UserUnmarshal64(unsigned long *, unsigned char *, HBITMAP *)
     * }
     */
    public static FunctionDescriptor HBITMAP_UserUnmarshal64$descriptor() {
        return HBITMAP_UserUnmarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HBITMAP_UserUnmarshal64(unsigned long *, unsigned char *, HBITMAP *)
     * }
     */
    public static MethodHandle HBITMAP_UserUnmarshal64$handle() {
        return HBITMAP_UserUnmarshal64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *HBITMAP_UserUnmarshal64(unsigned long *, unsigned char *, HBITMAP *)
     * }
     */
    public static MemorySegment HBITMAP_UserUnmarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HBITMAP_UserUnmarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HBITMAP_UserUnmarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HBITMAP_UserFree64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("HBITMAP_UserFree64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void HBITMAP_UserFree64(unsigned long *, HBITMAP *)
     * }
     */
    public static FunctionDescriptor HBITMAP_UserFree64$descriptor() {
        return HBITMAP_UserFree64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void HBITMAP_UserFree64(unsigned long *, HBITMAP *)
     * }
     */
    public static MethodHandle HBITMAP_UserFree64$handle() {
        return HBITMAP_UserFree64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void HBITMAP_UserFree64(unsigned long *, HBITMAP *)
     * }
     */
    public static void HBITMAP_UserFree64(MemorySegment x0, MemorySegment x1) {
        var mh$ = HBITMAP_UserFree64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HBITMAP_UserFree64", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HDC_UserSize64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("HDC_UserSize64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long HDC_UserSize64(unsigned long *, unsigned long, HDC *)
     * }
     */
    public static FunctionDescriptor HDC_UserSize64$descriptor() {
        return HDC_UserSize64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long HDC_UserSize64(unsigned long *, unsigned long, HDC *)
     * }
     */
    public static MethodHandle HDC_UserSize64$handle() {
        return HDC_UserSize64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned long HDC_UserSize64(unsigned long *, unsigned long, HDC *)
     * }
     */
    public static int HDC_UserSize64(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = HDC_UserSize64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HDC_UserSize64", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HDC_UserMarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("HDC_UserMarshal64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HDC_UserMarshal64(unsigned long *, unsigned char *, HDC *)
     * }
     */
    public static FunctionDescriptor HDC_UserMarshal64$descriptor() {
        return HDC_UserMarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HDC_UserMarshal64(unsigned long *, unsigned char *, HDC *)
     * }
     */
    public static MethodHandle HDC_UserMarshal64$handle() {
        return HDC_UserMarshal64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *HDC_UserMarshal64(unsigned long *, unsigned char *, HDC *)
     * }
     */
    public static MemorySegment HDC_UserMarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HDC_UserMarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HDC_UserMarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HDC_UserUnmarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("HDC_UserUnmarshal64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HDC_UserUnmarshal64(unsigned long *, unsigned char *, HDC *)
     * }
     */
    public static FunctionDescriptor HDC_UserUnmarshal64$descriptor() {
        return HDC_UserUnmarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HDC_UserUnmarshal64(unsigned long *, unsigned char *, HDC *)
     * }
     */
    public static MethodHandle HDC_UserUnmarshal64$handle() {
        return HDC_UserUnmarshal64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *HDC_UserUnmarshal64(unsigned long *, unsigned char *, HDC *)
     * }
     */
    public static MemorySegment HDC_UserUnmarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HDC_UserUnmarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HDC_UserUnmarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HDC_UserFree64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("HDC_UserFree64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void HDC_UserFree64(unsigned long *, HDC *)
     * }
     */
    public static FunctionDescriptor HDC_UserFree64$descriptor() {
        return HDC_UserFree64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void HDC_UserFree64(unsigned long *, HDC *)
     * }
     */
    public static MethodHandle HDC_UserFree64$handle() {
        return HDC_UserFree64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void HDC_UserFree64(unsigned long *, HDC *)
     * }
     */
    public static void HDC_UserFree64(MemorySegment x0, MemorySegment x1) {
        var mh$ = HDC_UserFree64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HDC_UserFree64", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HICON_UserSize64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("HICON_UserSize64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long HICON_UserSize64(unsigned long *, unsigned long, HICON *)
     * }
     */
    public static FunctionDescriptor HICON_UserSize64$descriptor() {
        return HICON_UserSize64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long HICON_UserSize64(unsigned long *, unsigned long, HICON *)
     * }
     */
    public static MethodHandle HICON_UserSize64$handle() {
        return HICON_UserSize64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned long HICON_UserSize64(unsigned long *, unsigned long, HICON *)
     * }
     */
    public static int HICON_UserSize64(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = HICON_UserSize64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HICON_UserSize64", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HICON_UserMarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("HICON_UserMarshal64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HICON_UserMarshal64(unsigned long *, unsigned char *, HICON *)
     * }
     */
    public static FunctionDescriptor HICON_UserMarshal64$descriptor() {
        return HICON_UserMarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HICON_UserMarshal64(unsigned long *, unsigned char *, HICON *)
     * }
     */
    public static MethodHandle HICON_UserMarshal64$handle() {
        return HICON_UserMarshal64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *HICON_UserMarshal64(unsigned long *, unsigned char *, HICON *)
     * }
     */
    public static MemorySegment HICON_UserMarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HICON_UserMarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HICON_UserMarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HICON_UserUnmarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("HICON_UserUnmarshal64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HICON_UserUnmarshal64(unsigned long *, unsigned char *, HICON *)
     * }
     */
    public static FunctionDescriptor HICON_UserUnmarshal64$descriptor() {
        return HICON_UserUnmarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HICON_UserUnmarshal64(unsigned long *, unsigned char *, HICON *)
     * }
     */
    public static MethodHandle HICON_UserUnmarshal64$handle() {
        return HICON_UserUnmarshal64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *HICON_UserUnmarshal64(unsigned long *, unsigned char *, HICON *)
     * }
     */
    public static MemorySegment HICON_UserUnmarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HICON_UserUnmarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HICON_UserUnmarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HICON_UserFree64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("HICON_UserFree64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void HICON_UserFree64(unsigned long *, HICON *)
     * }
     */
    public static FunctionDescriptor HICON_UserFree64$descriptor() {
        return HICON_UserFree64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void HICON_UserFree64(unsigned long *, HICON *)
     * }
     */
    public static MethodHandle HICON_UserFree64$handle() {
        return HICON_UserFree64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void HICON_UserFree64(unsigned long *, HICON *)
     * }
     */
    public static void HICON_UserFree64(MemorySegment x0, MemorySegment x1) {
        var mh$ = HICON_UserFree64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HICON_UserFree64", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SNB_UserSize64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SNB_UserSize64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long SNB_UserSize64(unsigned long *, unsigned long, SNB *)
     * }
     */
    public static FunctionDescriptor SNB_UserSize64$descriptor() {
        return SNB_UserSize64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long SNB_UserSize64(unsigned long *, unsigned long, SNB *)
     * }
     */
    public static MethodHandle SNB_UserSize64$handle() {
        return SNB_UserSize64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned long SNB_UserSize64(unsigned long *, unsigned long, SNB *)
     * }
     */
    public static int SNB_UserSize64(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = SNB_UserSize64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SNB_UserSize64", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SNB_UserMarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SNB_UserMarshal64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *SNB_UserMarshal64(unsigned long *, unsigned char *, SNB *)
     * }
     */
    public static FunctionDescriptor SNB_UserMarshal64$descriptor() {
        return SNB_UserMarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *SNB_UserMarshal64(unsigned long *, unsigned char *, SNB *)
     * }
     */
    public static MethodHandle SNB_UserMarshal64$handle() {
        return SNB_UserMarshal64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *SNB_UserMarshal64(unsigned long *, unsigned char *, SNB *)
     * }
     */
    public static MemorySegment SNB_UserMarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = SNB_UserMarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SNB_UserMarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SNB_UserUnmarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SNB_UserUnmarshal64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *SNB_UserUnmarshal64(unsigned long *, unsigned char *, SNB *)
     * }
     */
    public static FunctionDescriptor SNB_UserUnmarshal64$descriptor() {
        return SNB_UserUnmarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *SNB_UserUnmarshal64(unsigned long *, unsigned char *, SNB *)
     * }
     */
    public static MethodHandle SNB_UserUnmarshal64$handle() {
        return SNB_UserUnmarshal64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *SNB_UserUnmarshal64(unsigned long *, unsigned char *, SNB *)
     * }
     */
    public static MemorySegment SNB_UserUnmarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = SNB_UserUnmarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SNB_UserUnmarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SNB_UserFree64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SNB_UserFree64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SNB_UserFree64(unsigned long *, SNB *)
     * }
     */
    public static FunctionDescriptor SNB_UserFree64$descriptor() {
        return SNB_UserFree64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SNB_UserFree64(unsigned long *, SNB *)
     * }
     */
    public static MethodHandle SNB_UserFree64$handle() {
        return SNB_UserFree64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SNB_UserFree64(unsigned long *, SNB *)
     * }
     */
    public static void SNB_UserFree64(MemorySegment x0, MemorySegment x1) {
        var mh$ = SNB_UserFree64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SNB_UserFree64", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class STGMEDIUM_UserSize64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("STGMEDIUM_UserSize64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long STGMEDIUM_UserSize64(unsigned long *, unsigned long, STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor STGMEDIUM_UserSize64$descriptor() {
        return STGMEDIUM_UserSize64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long STGMEDIUM_UserSize64(unsigned long *, unsigned long, STGMEDIUM *)
     * }
     */
    public static MethodHandle STGMEDIUM_UserSize64$handle() {
        return STGMEDIUM_UserSize64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned long STGMEDIUM_UserSize64(unsigned long *, unsigned long, STGMEDIUM *)
     * }
     */
    public static int STGMEDIUM_UserSize64(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = STGMEDIUM_UserSize64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("STGMEDIUM_UserSize64", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class STGMEDIUM_UserMarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("STGMEDIUM_UserMarshal64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *STGMEDIUM_UserMarshal64(unsigned long *, unsigned char *, STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor STGMEDIUM_UserMarshal64$descriptor() {
        return STGMEDIUM_UserMarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *STGMEDIUM_UserMarshal64(unsigned long *, unsigned char *, STGMEDIUM *)
     * }
     */
    public static MethodHandle STGMEDIUM_UserMarshal64$handle() {
        return STGMEDIUM_UserMarshal64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *STGMEDIUM_UserMarshal64(unsigned long *, unsigned char *, STGMEDIUM *)
     * }
     */
    public static MemorySegment STGMEDIUM_UserMarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = STGMEDIUM_UserMarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("STGMEDIUM_UserMarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class STGMEDIUM_UserUnmarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("STGMEDIUM_UserUnmarshal64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *STGMEDIUM_UserUnmarshal64(unsigned long *, unsigned char *, STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor STGMEDIUM_UserUnmarshal64$descriptor() {
        return STGMEDIUM_UserUnmarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *STGMEDIUM_UserUnmarshal64(unsigned long *, unsigned char *, STGMEDIUM *)
     * }
     */
    public static MethodHandle STGMEDIUM_UserUnmarshal64$handle() {
        return STGMEDIUM_UserUnmarshal64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *STGMEDIUM_UserUnmarshal64(unsigned long *, unsigned char *, STGMEDIUM *)
     * }
     */
    public static MemorySegment STGMEDIUM_UserUnmarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = STGMEDIUM_UserUnmarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("STGMEDIUM_UserUnmarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class STGMEDIUM_UserFree64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("STGMEDIUM_UserFree64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void STGMEDIUM_UserFree64(unsigned long *, STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor STGMEDIUM_UserFree64$descriptor() {
        return STGMEDIUM_UserFree64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void STGMEDIUM_UserFree64(unsigned long *, STGMEDIUM *)
     * }
     */
    public static MethodHandle STGMEDIUM_UserFree64$handle() {
        return STGMEDIUM_UserFree64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void STGMEDIUM_UserFree64(unsigned long *, STGMEDIUM *)
     * }
     */
    public static void STGMEDIUM_UserFree64(MemorySegment x0, MemorySegment x1) {
        var mh$ = STGMEDIUM_UserFree64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("STGMEDIUM_UserFree64", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindCtx_SetBindOptions_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IBindCtx_SetBindOptions_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBindCtx_SetBindOptions_Proxy(IBindCtx *This, BIND_OPTS *pbindopts)
     * }
     */
    public static FunctionDescriptor IBindCtx_SetBindOptions_Proxy$descriptor() {
        return IBindCtx_SetBindOptions_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBindCtx_SetBindOptions_Proxy(IBindCtx *This, BIND_OPTS *pbindopts)
     * }
     */
    public static MethodHandle IBindCtx_SetBindOptions_Proxy$handle() {
        return IBindCtx_SetBindOptions_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IBindCtx_SetBindOptions_Proxy(IBindCtx *This, BIND_OPTS *pbindopts)
     * }
     */
    public static int IBindCtx_SetBindOptions_Proxy(MemorySegment This, MemorySegment pbindopts) {
        var mh$ = IBindCtx_SetBindOptions_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindCtx_SetBindOptions_Proxy", This, pbindopts);
            }
            return (int)mh$.invokeExact(This, pbindopts);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindCtx_SetBindOptions_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IBindCtx_SetBindOptions_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBindCtx_SetBindOptions_Stub(IBindCtx *This, BIND_OPTS2 *pbindopts)
     * }
     */
    public static FunctionDescriptor IBindCtx_SetBindOptions_Stub$descriptor() {
        return IBindCtx_SetBindOptions_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBindCtx_SetBindOptions_Stub(IBindCtx *This, BIND_OPTS2 *pbindopts)
     * }
     */
    public static MethodHandle IBindCtx_SetBindOptions_Stub$handle() {
        return IBindCtx_SetBindOptions_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IBindCtx_SetBindOptions_Stub(IBindCtx *This, BIND_OPTS2 *pbindopts)
     * }
     */
    public static int IBindCtx_SetBindOptions_Stub(MemorySegment This, MemorySegment pbindopts) {
        var mh$ = IBindCtx_SetBindOptions_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindCtx_SetBindOptions_Stub", This, pbindopts);
            }
            return (int)mh$.invokeExact(This, pbindopts);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindCtx_GetBindOptions_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IBindCtx_GetBindOptions_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBindCtx_GetBindOptions_Proxy(IBindCtx *This, BIND_OPTS *pbindopts)
     * }
     */
    public static FunctionDescriptor IBindCtx_GetBindOptions_Proxy$descriptor() {
        return IBindCtx_GetBindOptions_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBindCtx_GetBindOptions_Proxy(IBindCtx *This, BIND_OPTS *pbindopts)
     * }
     */
    public static MethodHandle IBindCtx_GetBindOptions_Proxy$handle() {
        return IBindCtx_GetBindOptions_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IBindCtx_GetBindOptions_Proxy(IBindCtx *This, BIND_OPTS *pbindopts)
     * }
     */
    public static int IBindCtx_GetBindOptions_Proxy(MemorySegment This, MemorySegment pbindopts) {
        var mh$ = IBindCtx_GetBindOptions_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindCtx_GetBindOptions_Proxy", This, pbindopts);
            }
            return (int)mh$.invokeExact(This, pbindopts);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindCtx_GetBindOptions_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IBindCtx_GetBindOptions_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBindCtx_GetBindOptions_Stub(IBindCtx *This, BIND_OPTS2 *pbindopts)
     * }
     */
    public static FunctionDescriptor IBindCtx_GetBindOptions_Stub$descriptor() {
        return IBindCtx_GetBindOptions_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBindCtx_GetBindOptions_Stub(IBindCtx *This, BIND_OPTS2 *pbindopts)
     * }
     */
    public static MethodHandle IBindCtx_GetBindOptions_Stub$handle() {
        return IBindCtx_GetBindOptions_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IBindCtx_GetBindOptions_Stub(IBindCtx *This, BIND_OPTS2 *pbindopts)
     * }
     */
    public static int IBindCtx_GetBindOptions_Stub(MemorySegment This, MemorySegment pbindopts) {
        var mh$ = IBindCtx_GetBindOptions_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindCtx_GetBindOptions_Stub", This, pbindopts);
            }
            return (int)mh$.invokeExact(This, pbindopts);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumMoniker_Next_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IEnumMoniker_Next_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumMoniker_Next_Proxy(IEnumMoniker *This, ULONG celt, IMoniker **rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumMoniker_Next_Proxy$descriptor() {
        return IEnumMoniker_Next_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumMoniker_Next_Proxy(IEnumMoniker *This, ULONG celt, IMoniker **rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumMoniker_Next_Proxy$handle() {
        return IEnumMoniker_Next_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IEnumMoniker_Next_Proxy(IEnumMoniker *This, ULONG celt, IMoniker **rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumMoniker_Next_Proxy(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumMoniker_Next_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumMoniker_Next_Proxy", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumMoniker_Next_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IEnumMoniker_Next_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumMoniker_Next_Stub(IEnumMoniker *This, ULONG celt, IMoniker **rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumMoniker_Next_Stub$descriptor() {
        return IEnumMoniker_Next_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumMoniker_Next_Stub(IEnumMoniker *This, ULONG celt, IMoniker **rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumMoniker_Next_Stub$handle() {
        return IEnumMoniker_Next_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IEnumMoniker_Next_Stub(IEnumMoniker *This, ULONG celt, IMoniker **rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumMoniker_Next_Stub(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumMoniker_Next_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumMoniker_Next_Stub", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IRunnableObject_IsRunning_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IRunnableObject_IsRunning_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL IRunnableObject_IsRunning_Proxy(IRunnableObject *This)
     * }
     */
    public static FunctionDescriptor IRunnableObject_IsRunning_Proxy$descriptor() {
        return IRunnableObject_IsRunning_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL IRunnableObject_IsRunning_Proxy(IRunnableObject *This)
     * }
     */
    public static MethodHandle IRunnableObject_IsRunning_Proxy$handle() {
        return IRunnableObject_IsRunning_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL IRunnableObject_IsRunning_Proxy(IRunnableObject *This)
     * }
     */
    public static int IRunnableObject_IsRunning_Proxy(MemorySegment This) {
        var mh$ = IRunnableObject_IsRunning_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IRunnableObject_IsRunning_Proxy", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IRunnableObject_IsRunning_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IRunnableObject_IsRunning_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IRunnableObject_IsRunning_Stub(IRunnableObject *This)
     * }
     */
    public static FunctionDescriptor IRunnableObject_IsRunning_Stub$descriptor() {
        return IRunnableObject_IsRunning_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IRunnableObject_IsRunning_Stub(IRunnableObject *This)
     * }
     */
    public static MethodHandle IRunnableObject_IsRunning_Stub$handle() {
        return IRunnableObject_IsRunning_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IRunnableObject_IsRunning_Stub(IRunnableObject *This)
     * }
     */
    public static int IRunnableObject_IsRunning_Stub(MemorySegment This) {
        var mh$ = IRunnableObject_IsRunning_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IRunnableObject_IsRunning_Stub", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IMoniker_BindToObject_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IMoniker_BindToObject_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IMoniker_BindToObject_Proxy(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riidResult, void **ppvResult)
     * }
     */
    public static FunctionDescriptor IMoniker_BindToObject_Proxy$descriptor() {
        return IMoniker_BindToObject_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IMoniker_BindToObject_Proxy(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riidResult, void **ppvResult)
     * }
     */
    public static MethodHandle IMoniker_BindToObject_Proxy$handle() {
        return IMoniker_BindToObject_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IMoniker_BindToObject_Proxy(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riidResult, void **ppvResult)
     * }
     */
    public static int IMoniker_BindToObject_Proxy(MemorySegment This, MemorySegment pbc, MemorySegment pmkToLeft, MemorySegment riidResult, MemorySegment ppvResult) {
        var mh$ = IMoniker_BindToObject_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IMoniker_BindToObject_Proxy", This, pbc, pmkToLeft, riidResult, ppvResult);
            }
            return (int)mh$.invokeExact(This, pbc, pmkToLeft, riidResult, ppvResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IMoniker_BindToObject_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IMoniker_BindToObject_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IMoniker_BindToObject_Stub(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riidResult, IUnknown **ppvResult)
     * }
     */
    public static FunctionDescriptor IMoniker_BindToObject_Stub$descriptor() {
        return IMoniker_BindToObject_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IMoniker_BindToObject_Stub(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riidResult, IUnknown **ppvResult)
     * }
     */
    public static MethodHandle IMoniker_BindToObject_Stub$handle() {
        return IMoniker_BindToObject_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IMoniker_BindToObject_Stub(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riidResult, IUnknown **ppvResult)
     * }
     */
    public static int IMoniker_BindToObject_Stub(MemorySegment This, MemorySegment pbc, MemorySegment pmkToLeft, MemorySegment riidResult, MemorySegment ppvResult) {
        var mh$ = IMoniker_BindToObject_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IMoniker_BindToObject_Stub", This, pbc, pmkToLeft, riidResult, ppvResult);
            }
            return (int)mh$.invokeExact(This, pbc, pmkToLeft, riidResult, ppvResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IMoniker_BindToStorage_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IMoniker_BindToStorage_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IMoniker_BindToStorage_Proxy(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riid, void **ppvObj)
     * }
     */
    public static FunctionDescriptor IMoniker_BindToStorage_Proxy$descriptor() {
        return IMoniker_BindToStorage_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IMoniker_BindToStorage_Proxy(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riid, void **ppvObj)
     * }
     */
    public static MethodHandle IMoniker_BindToStorage_Proxy$handle() {
        return IMoniker_BindToStorage_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IMoniker_BindToStorage_Proxy(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riid, void **ppvObj)
     * }
     */
    public static int IMoniker_BindToStorage_Proxy(MemorySegment This, MemorySegment pbc, MemorySegment pmkToLeft, MemorySegment riid, MemorySegment ppvObj) {
        var mh$ = IMoniker_BindToStorage_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IMoniker_BindToStorage_Proxy", This, pbc, pmkToLeft, riid, ppvObj);
            }
            return (int)mh$.invokeExact(This, pbc, pmkToLeft, riid, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IMoniker_BindToStorage_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IMoniker_BindToStorage_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IMoniker_BindToStorage_Stub(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static FunctionDescriptor IMoniker_BindToStorage_Stub$descriptor() {
        return IMoniker_BindToStorage_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IMoniker_BindToStorage_Stub(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static MethodHandle IMoniker_BindToStorage_Stub$handle() {
        return IMoniker_BindToStorage_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IMoniker_BindToStorage_Stub(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static int IMoniker_BindToStorage_Stub(MemorySegment This, MemorySegment pbc, MemorySegment pmkToLeft, MemorySegment riid, MemorySegment ppvObj) {
        var mh$ = IMoniker_BindToStorage_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IMoniker_BindToStorage_Stub", This, pbc, pmkToLeft, riid, ppvObj);
            }
            return (int)mh$.invokeExact(This, pbc, pmkToLeft, riid, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumSTATSTG_Next_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IEnumSTATSTG_Next_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATSTG_Next_Proxy(IEnumSTATSTG *This, ULONG celt, STATSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumSTATSTG_Next_Proxy$descriptor() {
        return IEnumSTATSTG_Next_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATSTG_Next_Proxy(IEnumSTATSTG *This, ULONG celt, STATSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumSTATSTG_Next_Proxy$handle() {
        return IEnumSTATSTG_Next_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IEnumSTATSTG_Next_Proxy(IEnumSTATSTG *This, ULONG celt, STATSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumSTATSTG_Next_Proxy(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumSTATSTG_Next_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumSTATSTG_Next_Proxy", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumSTATSTG_Next_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IEnumSTATSTG_Next_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATSTG_Next_Stub(IEnumSTATSTG *This, ULONG celt, STATSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumSTATSTG_Next_Stub$descriptor() {
        return IEnumSTATSTG_Next_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATSTG_Next_Stub(IEnumSTATSTG *This, ULONG celt, STATSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumSTATSTG_Next_Stub$handle() {
        return IEnumSTATSTG_Next_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IEnumSTATSTG_Next_Stub(IEnumSTATSTG *This, ULONG celt, STATSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumSTATSTG_Next_Stub(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumSTATSTG_Next_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumSTATSTG_Next_Stub", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IStorage_OpenStream_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IStorage_OpenStream_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IStorage_OpenStream_Proxy(IStorage *This, const OLECHAR *pwcsName, void *reserved1, DWORD grfMode, DWORD reserved2, IStream **ppstm)
     * }
     */
    public static FunctionDescriptor IStorage_OpenStream_Proxy$descriptor() {
        return IStorage_OpenStream_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IStorage_OpenStream_Proxy(IStorage *This, const OLECHAR *pwcsName, void *reserved1, DWORD grfMode, DWORD reserved2, IStream **ppstm)
     * }
     */
    public static MethodHandle IStorage_OpenStream_Proxy$handle() {
        return IStorage_OpenStream_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IStorage_OpenStream_Proxy(IStorage *This, const OLECHAR *pwcsName, void *reserved1, DWORD grfMode, DWORD reserved2, IStream **ppstm)
     * }
     */
    public static int IStorage_OpenStream_Proxy(MemorySegment This, MemorySegment pwcsName, MemorySegment reserved1, int grfMode, int reserved2, MemorySegment ppstm) {
        var mh$ = IStorage_OpenStream_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IStorage_OpenStream_Proxy", This, pwcsName, reserved1, grfMode, reserved2, ppstm);
            }
            return (int)mh$.invokeExact(This, pwcsName, reserved1, grfMode, reserved2, ppstm);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IStorage_OpenStream_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IStorage_OpenStream_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IStorage_OpenStream_Stub(IStorage *This, const OLECHAR *pwcsName, ULONG cbReserved1, byte *reserved1, DWORD grfMode, DWORD reserved2, IStream **ppstm)
     * }
     */
    public static FunctionDescriptor IStorage_OpenStream_Stub$descriptor() {
        return IStorage_OpenStream_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IStorage_OpenStream_Stub(IStorage *This, const OLECHAR *pwcsName, ULONG cbReserved1, byte *reserved1, DWORD grfMode, DWORD reserved2, IStream **ppstm)
     * }
     */
    public static MethodHandle IStorage_OpenStream_Stub$handle() {
        return IStorage_OpenStream_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IStorage_OpenStream_Stub(IStorage *This, const OLECHAR *pwcsName, ULONG cbReserved1, byte *reserved1, DWORD grfMode, DWORD reserved2, IStream **ppstm)
     * }
     */
    public static int IStorage_OpenStream_Stub(MemorySegment This, MemorySegment pwcsName, int cbReserved1, MemorySegment reserved1, int grfMode, int reserved2, MemorySegment ppstm) {
        var mh$ = IStorage_OpenStream_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IStorage_OpenStream_Stub", This, pwcsName, cbReserved1, reserved1, grfMode, reserved2, ppstm);
            }
            return (int)mh$.invokeExact(This, pwcsName, cbReserved1, reserved1, grfMode, reserved2, ppstm);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IStorage_CopyTo_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IStorage_CopyTo_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IStorage_CopyTo_Proxy(IStorage *This, DWORD ciidExclude, const IID *rgiidExclude, SNB snbExclude, IStorage *pstgDest)
     * }
     */
    public static FunctionDescriptor IStorage_CopyTo_Proxy$descriptor() {
        return IStorage_CopyTo_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IStorage_CopyTo_Proxy(IStorage *This, DWORD ciidExclude, const IID *rgiidExclude, SNB snbExclude, IStorage *pstgDest)
     * }
     */
    public static MethodHandle IStorage_CopyTo_Proxy$handle() {
        return IStorage_CopyTo_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IStorage_CopyTo_Proxy(IStorage *This, DWORD ciidExclude, const IID *rgiidExclude, SNB snbExclude, IStorage *pstgDest)
     * }
     */
    public static int IStorage_CopyTo_Proxy(MemorySegment This, int ciidExclude, MemorySegment rgiidExclude, MemorySegment snbExclude, MemorySegment pstgDest) {
        var mh$ = IStorage_CopyTo_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IStorage_CopyTo_Proxy", This, ciidExclude, rgiidExclude, snbExclude, pstgDest);
            }
            return (int)mh$.invokeExact(This, ciidExclude, rgiidExclude, snbExclude, pstgDest);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IStorage_CopyTo_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IStorage_CopyTo_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IStorage_CopyTo_Stub(IStorage *This, DWORD ciidExclude, const IID *rgiidExclude, SNB snbExclude, IStorage *pstgDest)
     * }
     */
    public static FunctionDescriptor IStorage_CopyTo_Stub$descriptor() {
        return IStorage_CopyTo_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IStorage_CopyTo_Stub(IStorage *This, DWORD ciidExclude, const IID *rgiidExclude, SNB snbExclude, IStorage *pstgDest)
     * }
     */
    public static MethodHandle IStorage_CopyTo_Stub$handle() {
        return IStorage_CopyTo_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IStorage_CopyTo_Stub(IStorage *This, DWORD ciidExclude, const IID *rgiidExclude, SNB snbExclude, IStorage *pstgDest)
     * }
     */
    public static int IStorage_CopyTo_Stub(MemorySegment This, int ciidExclude, MemorySegment rgiidExclude, MemorySegment snbExclude, MemorySegment pstgDest) {
        var mh$ = IStorage_CopyTo_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IStorage_CopyTo_Stub", This, ciidExclude, rgiidExclude, snbExclude, pstgDest);
            }
            return (int)mh$.invokeExact(This, ciidExclude, rgiidExclude, snbExclude, pstgDest);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IStorage_EnumElements_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IStorage_EnumElements_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IStorage_EnumElements_Proxy(IStorage *This, DWORD reserved1, void *reserved2, DWORD reserved3, IEnumSTATSTG **ppenum)
     * }
     */
    public static FunctionDescriptor IStorage_EnumElements_Proxy$descriptor() {
        return IStorage_EnumElements_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IStorage_EnumElements_Proxy(IStorage *This, DWORD reserved1, void *reserved2, DWORD reserved3, IEnumSTATSTG **ppenum)
     * }
     */
    public static MethodHandle IStorage_EnumElements_Proxy$handle() {
        return IStorage_EnumElements_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IStorage_EnumElements_Proxy(IStorage *This, DWORD reserved1, void *reserved2, DWORD reserved3, IEnumSTATSTG **ppenum)
     * }
     */
    public static int IStorage_EnumElements_Proxy(MemorySegment This, int reserved1, MemorySegment reserved2, int reserved3, MemorySegment ppenum) {
        var mh$ = IStorage_EnumElements_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IStorage_EnumElements_Proxy", This, reserved1, reserved2, reserved3, ppenum);
            }
            return (int)mh$.invokeExact(This, reserved1, reserved2, reserved3, ppenum);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IStorage_EnumElements_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IStorage_EnumElements_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IStorage_EnumElements_Stub(IStorage *This, DWORD reserved1, ULONG cbReserved2, byte *reserved2, DWORD reserved3, IEnumSTATSTG **ppenum)
     * }
     */
    public static FunctionDescriptor IStorage_EnumElements_Stub$descriptor() {
        return IStorage_EnumElements_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IStorage_EnumElements_Stub(IStorage *This, DWORD reserved1, ULONG cbReserved2, byte *reserved2, DWORD reserved3, IEnumSTATSTG **ppenum)
     * }
     */
    public static MethodHandle IStorage_EnumElements_Stub$handle() {
        return IStorage_EnumElements_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IStorage_EnumElements_Stub(IStorage *This, DWORD reserved1, ULONG cbReserved2, byte *reserved2, DWORD reserved3, IEnumSTATSTG **ppenum)
     * }
     */
    public static int IStorage_EnumElements_Stub(MemorySegment This, int reserved1, int cbReserved2, MemorySegment reserved2, int reserved3, MemorySegment ppenum) {
        var mh$ = IStorage_EnumElements_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IStorage_EnumElements_Stub", This, reserved1, cbReserved2, reserved2, reserved3, ppenum);
            }
            return (int)mh$.invokeExact(This, reserved1, cbReserved2, reserved2, reserved3, ppenum);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ILockBytes_ReadAt_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            _ULARGE_INTEGER.layout(),
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ILockBytes_ReadAt_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ILockBytes_ReadAt_Proxy(ILockBytes *This, ULARGE_INTEGER ulOffset, void *pv, ULONG cb, ULONG *pcbRead)
     * }
     */
    public static FunctionDescriptor ILockBytes_ReadAt_Proxy$descriptor() {
        return ILockBytes_ReadAt_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ILockBytes_ReadAt_Proxy(ILockBytes *This, ULARGE_INTEGER ulOffset, void *pv, ULONG cb, ULONG *pcbRead)
     * }
     */
    public static MethodHandle ILockBytes_ReadAt_Proxy$handle() {
        return ILockBytes_ReadAt_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ILockBytes_ReadAt_Proxy(ILockBytes *This, ULARGE_INTEGER ulOffset, void *pv, ULONG cb, ULONG *pcbRead)
     * }
     */
    public static int ILockBytes_ReadAt_Proxy(MemorySegment This, MemorySegment ulOffset, MemorySegment pv, int cb, MemorySegment pcbRead) {
        var mh$ = ILockBytes_ReadAt_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ILockBytes_ReadAt_Proxy", This, ulOffset, pv, cb, pcbRead);
            }
            return (int)mh$.invokeExact(This, ulOffset, pv, cb, pcbRead);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ILockBytes_ReadAt_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            _ULARGE_INTEGER.layout(),
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ILockBytes_ReadAt_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ILockBytes_ReadAt_Stub(ILockBytes *This, ULARGE_INTEGER ulOffset, byte *pv, ULONG cb, ULONG *pcbRead)
     * }
     */
    public static FunctionDescriptor ILockBytes_ReadAt_Stub$descriptor() {
        return ILockBytes_ReadAt_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ILockBytes_ReadAt_Stub(ILockBytes *This, ULARGE_INTEGER ulOffset, byte *pv, ULONG cb, ULONG *pcbRead)
     * }
     */
    public static MethodHandle ILockBytes_ReadAt_Stub$handle() {
        return ILockBytes_ReadAt_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ILockBytes_ReadAt_Stub(ILockBytes *This, ULARGE_INTEGER ulOffset, byte *pv, ULONG cb, ULONG *pcbRead)
     * }
     */
    public static int ILockBytes_ReadAt_Stub(MemorySegment This, MemorySegment ulOffset, MemorySegment pv, int cb, MemorySegment pcbRead) {
        var mh$ = ILockBytes_ReadAt_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ILockBytes_ReadAt_Stub", This, ulOffset, pv, cb, pcbRead);
            }
            return (int)mh$.invokeExact(This, ulOffset, pv, cb, pcbRead);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ILockBytes_WriteAt_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            _ULARGE_INTEGER.layout(),
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ILockBytes_WriteAt_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ILockBytes_WriteAt_Proxy(ILockBytes *This, ULARGE_INTEGER ulOffset, const void *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static FunctionDescriptor ILockBytes_WriteAt_Proxy$descriptor() {
        return ILockBytes_WriteAt_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ILockBytes_WriteAt_Proxy(ILockBytes *This, ULARGE_INTEGER ulOffset, const void *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static MethodHandle ILockBytes_WriteAt_Proxy$handle() {
        return ILockBytes_WriteAt_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ILockBytes_WriteAt_Proxy(ILockBytes *This, ULARGE_INTEGER ulOffset, const void *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static int ILockBytes_WriteAt_Proxy(MemorySegment This, MemorySegment ulOffset, MemorySegment pv, int cb, MemorySegment pcbWritten) {
        var mh$ = ILockBytes_WriteAt_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ILockBytes_WriteAt_Proxy", This, ulOffset, pv, cb, pcbWritten);
            }
            return (int)mh$.invokeExact(This, ulOffset, pv, cb, pcbWritten);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ILockBytes_WriteAt_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            _ULARGE_INTEGER.layout(),
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ILockBytes_WriteAt_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ILockBytes_WriteAt_Stub(ILockBytes *This, ULARGE_INTEGER ulOffset, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static FunctionDescriptor ILockBytes_WriteAt_Stub$descriptor() {
        return ILockBytes_WriteAt_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ILockBytes_WriteAt_Stub(ILockBytes *This, ULARGE_INTEGER ulOffset, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static MethodHandle ILockBytes_WriteAt_Stub$handle() {
        return ILockBytes_WriteAt_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ILockBytes_WriteAt_Stub(ILockBytes *This, ULARGE_INTEGER ulOffset, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static int ILockBytes_WriteAt_Stub(MemorySegment This, MemorySegment ulOffset, MemorySegment pv, int cb, MemorySegment pcbWritten) {
        var mh$ = ILockBytes_WriteAt_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ILockBytes_WriteAt_Stub", This, ulOffset, pv, cb, pcbWritten);
            }
            return (int)mh$.invokeExact(This, ulOffset, pv, cb, pcbWritten);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumFORMATETC_Next_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IEnumFORMATETC_Next_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumFORMATETC_Next_Proxy(IEnumFORMATETC *This, ULONG celt, FORMATETC *rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumFORMATETC_Next_Proxy$descriptor() {
        return IEnumFORMATETC_Next_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumFORMATETC_Next_Proxy(IEnumFORMATETC *This, ULONG celt, FORMATETC *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumFORMATETC_Next_Proxy$handle() {
        return IEnumFORMATETC_Next_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IEnumFORMATETC_Next_Proxy(IEnumFORMATETC *This, ULONG celt, FORMATETC *rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumFORMATETC_Next_Proxy(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumFORMATETC_Next_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumFORMATETC_Next_Proxy", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumFORMATETC_Next_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IEnumFORMATETC_Next_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumFORMATETC_Next_Stub(IEnumFORMATETC *This, ULONG celt, FORMATETC *rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumFORMATETC_Next_Stub$descriptor() {
        return IEnumFORMATETC_Next_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumFORMATETC_Next_Stub(IEnumFORMATETC *This, ULONG celt, FORMATETC *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumFORMATETC_Next_Stub$handle() {
        return IEnumFORMATETC_Next_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IEnumFORMATETC_Next_Stub(IEnumFORMATETC *This, ULONG celt, FORMATETC *rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumFORMATETC_Next_Stub(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumFORMATETC_Next_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumFORMATETC_Next_Stub", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumSTATDATA_Next_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IEnumSTATDATA_Next_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATDATA_Next_Proxy(IEnumSTATDATA *This, ULONG celt, STATDATA *rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumSTATDATA_Next_Proxy$descriptor() {
        return IEnumSTATDATA_Next_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATDATA_Next_Proxy(IEnumSTATDATA *This, ULONG celt, STATDATA *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumSTATDATA_Next_Proxy$handle() {
        return IEnumSTATDATA_Next_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IEnumSTATDATA_Next_Proxy(IEnumSTATDATA *This, ULONG celt, STATDATA *rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumSTATDATA_Next_Proxy(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumSTATDATA_Next_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumSTATDATA_Next_Proxy", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumSTATDATA_Next_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IEnumSTATDATA_Next_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATDATA_Next_Stub(IEnumSTATDATA *This, ULONG celt, STATDATA *rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumSTATDATA_Next_Stub$descriptor() {
        return IEnumSTATDATA_Next_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATDATA_Next_Stub(IEnumSTATDATA *This, ULONG celt, STATDATA *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumSTATDATA_Next_Stub$handle() {
        return IEnumSTATDATA_Next_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IEnumSTATDATA_Next_Stub(IEnumSTATDATA *This, ULONG celt, STATDATA *rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumSTATDATA_Next_Stub(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumSTATDATA_Next_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumSTATDATA_Next_Stub", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink_OnDataChange_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IAdviseSink_OnDataChange_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IAdviseSink_OnDataChange_Proxy(IAdviseSink *This, FORMATETC *pFormatetc, STGMEDIUM *pStgmed)
     * }
     */
    public static FunctionDescriptor IAdviseSink_OnDataChange_Proxy$descriptor() {
        return IAdviseSink_OnDataChange_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IAdviseSink_OnDataChange_Proxy(IAdviseSink *This, FORMATETC *pFormatetc, STGMEDIUM *pStgmed)
     * }
     */
    public static MethodHandle IAdviseSink_OnDataChange_Proxy$handle() {
        return IAdviseSink_OnDataChange_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void IAdviseSink_OnDataChange_Proxy(IAdviseSink *This, FORMATETC *pFormatetc, STGMEDIUM *pStgmed)
     * }
     */
    public static void IAdviseSink_OnDataChange_Proxy(MemorySegment This, MemorySegment pFormatetc, MemorySegment pStgmed) {
        var mh$ = IAdviseSink_OnDataChange_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink_OnDataChange_Proxy", This, pFormatetc, pStgmed);
            }
            mh$.invokeExact(This, pFormatetc, pStgmed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink_OnDataChange_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IAdviseSink_OnDataChange_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_OnDataChange_Stub(IAdviseSink *This, FORMATETC *pFormatetc, ASYNC_STGMEDIUM *pStgmed)
     * }
     */
    public static FunctionDescriptor IAdviseSink_OnDataChange_Stub$descriptor() {
        return IAdviseSink_OnDataChange_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_OnDataChange_Stub(IAdviseSink *This, FORMATETC *pFormatetc, ASYNC_STGMEDIUM *pStgmed)
     * }
     */
    public static MethodHandle IAdviseSink_OnDataChange_Stub$handle() {
        return IAdviseSink_OnDataChange_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IAdviseSink_OnDataChange_Stub(IAdviseSink *This, FORMATETC *pFormatetc, ASYNC_STGMEDIUM *pStgmed)
     * }
     */
    public static int IAdviseSink_OnDataChange_Stub(MemorySegment This, MemorySegment pFormatetc, MemorySegment pStgmed) {
        var mh$ = IAdviseSink_OnDataChange_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink_OnDataChange_Stub", This, pFormatetc, pStgmed);
            }
            return (int)mh$.invokeExact(This, pFormatetc, pStgmed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink_OnViewChange_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_LONG,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IAdviseSink_OnViewChange_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IAdviseSink_OnViewChange_Proxy(IAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static FunctionDescriptor IAdviseSink_OnViewChange_Proxy$descriptor() {
        return IAdviseSink_OnViewChange_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IAdviseSink_OnViewChange_Proxy(IAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static MethodHandle IAdviseSink_OnViewChange_Proxy$handle() {
        return IAdviseSink_OnViewChange_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void IAdviseSink_OnViewChange_Proxy(IAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static void IAdviseSink_OnViewChange_Proxy(MemorySegment This, int dwAspect, int lindex) {
        var mh$ = IAdviseSink_OnViewChange_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink_OnViewChange_Proxy", This, dwAspect, lindex);
            }
            mh$.invokeExact(This, dwAspect, lindex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink_OnViewChange_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IAdviseSink_OnViewChange_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_OnViewChange_Stub(IAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static FunctionDescriptor IAdviseSink_OnViewChange_Stub$descriptor() {
        return IAdviseSink_OnViewChange_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_OnViewChange_Stub(IAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static MethodHandle IAdviseSink_OnViewChange_Stub$handle() {
        return IAdviseSink_OnViewChange_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IAdviseSink_OnViewChange_Stub(IAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static int IAdviseSink_OnViewChange_Stub(MemorySegment This, int dwAspect, int lindex) {
        var mh$ = IAdviseSink_OnViewChange_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink_OnViewChange_Stub", This, dwAspect, lindex);
            }
            return (int)mh$.invokeExact(This, dwAspect, lindex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink_OnRename_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IAdviseSink_OnRename_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IAdviseSink_OnRename_Proxy(IAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static FunctionDescriptor IAdviseSink_OnRename_Proxy$descriptor() {
        return IAdviseSink_OnRename_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IAdviseSink_OnRename_Proxy(IAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static MethodHandle IAdviseSink_OnRename_Proxy$handle() {
        return IAdviseSink_OnRename_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void IAdviseSink_OnRename_Proxy(IAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static void IAdviseSink_OnRename_Proxy(MemorySegment This, MemorySegment pmk) {
        var mh$ = IAdviseSink_OnRename_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink_OnRename_Proxy", This, pmk);
            }
            mh$.invokeExact(This, pmk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink_OnRename_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IAdviseSink_OnRename_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_OnRename_Stub(IAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static FunctionDescriptor IAdviseSink_OnRename_Stub$descriptor() {
        return IAdviseSink_OnRename_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_OnRename_Stub(IAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static MethodHandle IAdviseSink_OnRename_Stub$handle() {
        return IAdviseSink_OnRename_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IAdviseSink_OnRename_Stub(IAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static int IAdviseSink_OnRename_Stub(MemorySegment This, MemorySegment pmk) {
        var mh$ = IAdviseSink_OnRename_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink_OnRename_Stub", This, pmk);
            }
            return (int)mh$.invokeExact(This, pmk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink_OnSave_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IAdviseSink_OnSave_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IAdviseSink_OnSave_Proxy(IAdviseSink *This)
     * }
     */
    public static FunctionDescriptor IAdviseSink_OnSave_Proxy$descriptor() {
        return IAdviseSink_OnSave_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IAdviseSink_OnSave_Proxy(IAdviseSink *This)
     * }
     */
    public static MethodHandle IAdviseSink_OnSave_Proxy$handle() {
        return IAdviseSink_OnSave_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void IAdviseSink_OnSave_Proxy(IAdviseSink *This)
     * }
     */
    public static void IAdviseSink_OnSave_Proxy(MemorySegment This) {
        var mh$ = IAdviseSink_OnSave_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink_OnSave_Proxy", This);
            }
            mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink_OnSave_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IAdviseSink_OnSave_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_OnSave_Stub(IAdviseSink *This)
     * }
     */
    public static FunctionDescriptor IAdviseSink_OnSave_Stub$descriptor() {
        return IAdviseSink_OnSave_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_OnSave_Stub(IAdviseSink *This)
     * }
     */
    public static MethodHandle IAdviseSink_OnSave_Stub$handle() {
        return IAdviseSink_OnSave_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IAdviseSink_OnSave_Stub(IAdviseSink *This)
     * }
     */
    public static int IAdviseSink_OnSave_Stub(MemorySegment This) {
        var mh$ = IAdviseSink_OnSave_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink_OnSave_Stub", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink_OnClose_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IAdviseSink_OnClose_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IAdviseSink_OnClose_Proxy(IAdviseSink *This)
     * }
     */
    public static FunctionDescriptor IAdviseSink_OnClose_Proxy$descriptor() {
        return IAdviseSink_OnClose_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IAdviseSink_OnClose_Proxy(IAdviseSink *This)
     * }
     */
    public static MethodHandle IAdviseSink_OnClose_Proxy$handle() {
        return IAdviseSink_OnClose_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void IAdviseSink_OnClose_Proxy(IAdviseSink *This)
     * }
     */
    public static void IAdviseSink_OnClose_Proxy(MemorySegment This) {
        var mh$ = IAdviseSink_OnClose_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink_OnClose_Proxy", This);
            }
            mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink_OnClose_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IAdviseSink_OnClose_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_OnClose_Stub(IAdviseSink *This)
     * }
     */
    public static FunctionDescriptor IAdviseSink_OnClose_Stub$descriptor() {
        return IAdviseSink_OnClose_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_OnClose_Stub(IAdviseSink *This)
     * }
     */
    public static MethodHandle IAdviseSink_OnClose_Stub$handle() {
        return IAdviseSink_OnClose_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IAdviseSink_OnClose_Stub(IAdviseSink *This)
     * }
     */
    public static int IAdviseSink_OnClose_Stub(MemorySegment This) {
        var mh$ = IAdviseSink_OnClose_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink_OnClose_Stub", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Begin_OnDataChange_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("AsyncIAdviseSink_Begin_OnDataChange_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_OnDataChange_Proxy(AsyncIAdviseSink *This, FORMATETC *pFormatetc, STGMEDIUM *pStgmed)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Begin_OnDataChange_Proxy$descriptor() {
        return AsyncIAdviseSink_Begin_OnDataChange_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_OnDataChange_Proxy(AsyncIAdviseSink *This, FORMATETC *pFormatetc, STGMEDIUM *pStgmed)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Begin_OnDataChange_Proxy$handle() {
        return AsyncIAdviseSink_Begin_OnDataChange_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_OnDataChange_Proxy(AsyncIAdviseSink *This, FORMATETC *pFormatetc, STGMEDIUM *pStgmed)
     * }
     */
    public static void AsyncIAdviseSink_Begin_OnDataChange_Proxy(MemorySegment This, MemorySegment pFormatetc, MemorySegment pStgmed) {
        var mh$ = AsyncIAdviseSink_Begin_OnDataChange_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Begin_OnDataChange_Proxy", This, pFormatetc, pStgmed);
            }
            mh$.invokeExact(This, pFormatetc, pStgmed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Begin_OnDataChange_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("AsyncIAdviseSink_Begin_OnDataChange_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_OnDataChange_Stub(AsyncIAdviseSink *This, FORMATETC *pFormatetc, ASYNC_STGMEDIUM *pStgmed)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Begin_OnDataChange_Stub$descriptor() {
        return AsyncIAdviseSink_Begin_OnDataChange_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_OnDataChange_Stub(AsyncIAdviseSink *This, FORMATETC *pFormatetc, ASYNC_STGMEDIUM *pStgmed)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Begin_OnDataChange_Stub$handle() {
        return AsyncIAdviseSink_Begin_OnDataChange_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_OnDataChange_Stub(AsyncIAdviseSink *This, FORMATETC *pFormatetc, ASYNC_STGMEDIUM *pStgmed)
     * }
     */
    public static int AsyncIAdviseSink_Begin_OnDataChange_Stub(MemorySegment This, MemorySegment pFormatetc, MemorySegment pStgmed) {
        var mh$ = AsyncIAdviseSink_Begin_OnDataChange_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Begin_OnDataChange_Stub", This, pFormatetc, pStgmed);
            }
            return (int)mh$.invokeExact(This, pFormatetc, pStgmed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Finish_OnDataChange_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("AsyncIAdviseSink_Finish_OnDataChange_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_OnDataChange_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Finish_OnDataChange_Proxy$descriptor() {
        return AsyncIAdviseSink_Finish_OnDataChange_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_OnDataChange_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Finish_OnDataChange_Proxy$handle() {
        return AsyncIAdviseSink_Finish_OnDataChange_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_OnDataChange_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static void AsyncIAdviseSink_Finish_OnDataChange_Proxy(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Finish_OnDataChange_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Finish_OnDataChange_Proxy", This);
            }
            mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Finish_OnDataChange_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("AsyncIAdviseSink_Finish_OnDataChange_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_OnDataChange_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Finish_OnDataChange_Stub$descriptor() {
        return AsyncIAdviseSink_Finish_OnDataChange_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_OnDataChange_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Finish_OnDataChange_Stub$handle() {
        return AsyncIAdviseSink_Finish_OnDataChange_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_OnDataChange_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static int AsyncIAdviseSink_Finish_OnDataChange_Stub(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Finish_OnDataChange_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Finish_OnDataChange_Stub", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Begin_OnViewChange_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_LONG,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("AsyncIAdviseSink_Begin_OnViewChange_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_OnViewChange_Proxy(AsyncIAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Begin_OnViewChange_Proxy$descriptor() {
        return AsyncIAdviseSink_Begin_OnViewChange_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_OnViewChange_Proxy(AsyncIAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Begin_OnViewChange_Proxy$handle() {
        return AsyncIAdviseSink_Begin_OnViewChange_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_OnViewChange_Proxy(AsyncIAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static void AsyncIAdviseSink_Begin_OnViewChange_Proxy(MemorySegment This, int dwAspect, int lindex) {
        var mh$ = AsyncIAdviseSink_Begin_OnViewChange_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Begin_OnViewChange_Proxy", This, dwAspect, lindex);
            }
            mh$.invokeExact(This, dwAspect, lindex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Begin_OnViewChange_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("AsyncIAdviseSink_Begin_OnViewChange_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_OnViewChange_Stub(AsyncIAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Begin_OnViewChange_Stub$descriptor() {
        return AsyncIAdviseSink_Begin_OnViewChange_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_OnViewChange_Stub(AsyncIAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Begin_OnViewChange_Stub$handle() {
        return AsyncIAdviseSink_Begin_OnViewChange_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_OnViewChange_Stub(AsyncIAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static int AsyncIAdviseSink_Begin_OnViewChange_Stub(MemorySegment This, int dwAspect, int lindex) {
        var mh$ = AsyncIAdviseSink_Begin_OnViewChange_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Begin_OnViewChange_Stub", This, dwAspect, lindex);
            }
            return (int)mh$.invokeExact(This, dwAspect, lindex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Finish_OnViewChange_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("AsyncIAdviseSink_Finish_OnViewChange_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_OnViewChange_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Finish_OnViewChange_Proxy$descriptor() {
        return AsyncIAdviseSink_Finish_OnViewChange_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_OnViewChange_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Finish_OnViewChange_Proxy$handle() {
        return AsyncIAdviseSink_Finish_OnViewChange_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_OnViewChange_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static void AsyncIAdviseSink_Finish_OnViewChange_Proxy(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Finish_OnViewChange_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Finish_OnViewChange_Proxy", This);
            }
            mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Finish_OnViewChange_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("AsyncIAdviseSink_Finish_OnViewChange_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_OnViewChange_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Finish_OnViewChange_Stub$descriptor() {
        return AsyncIAdviseSink_Finish_OnViewChange_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_OnViewChange_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Finish_OnViewChange_Stub$handle() {
        return AsyncIAdviseSink_Finish_OnViewChange_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_OnViewChange_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static int AsyncIAdviseSink_Finish_OnViewChange_Stub(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Finish_OnViewChange_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Finish_OnViewChange_Stub", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Begin_OnRename_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("AsyncIAdviseSink_Begin_OnRename_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_OnRename_Proxy(AsyncIAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Begin_OnRename_Proxy$descriptor() {
        return AsyncIAdviseSink_Begin_OnRename_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_OnRename_Proxy(AsyncIAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Begin_OnRename_Proxy$handle() {
        return AsyncIAdviseSink_Begin_OnRename_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_OnRename_Proxy(AsyncIAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static void AsyncIAdviseSink_Begin_OnRename_Proxy(MemorySegment This, MemorySegment pmk) {
        var mh$ = AsyncIAdviseSink_Begin_OnRename_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Begin_OnRename_Proxy", This, pmk);
            }
            mh$.invokeExact(This, pmk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Begin_OnRename_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("AsyncIAdviseSink_Begin_OnRename_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_OnRename_Stub(AsyncIAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Begin_OnRename_Stub$descriptor() {
        return AsyncIAdviseSink_Begin_OnRename_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_OnRename_Stub(AsyncIAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Begin_OnRename_Stub$handle() {
        return AsyncIAdviseSink_Begin_OnRename_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_OnRename_Stub(AsyncIAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static int AsyncIAdviseSink_Begin_OnRename_Stub(MemorySegment This, MemorySegment pmk) {
        var mh$ = AsyncIAdviseSink_Begin_OnRename_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Begin_OnRename_Stub", This, pmk);
            }
            return (int)mh$.invokeExact(This, pmk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Finish_OnRename_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("AsyncIAdviseSink_Finish_OnRename_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_OnRename_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Finish_OnRename_Proxy$descriptor() {
        return AsyncIAdviseSink_Finish_OnRename_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_OnRename_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Finish_OnRename_Proxy$handle() {
        return AsyncIAdviseSink_Finish_OnRename_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_OnRename_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static void AsyncIAdviseSink_Finish_OnRename_Proxy(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Finish_OnRename_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Finish_OnRename_Proxy", This);
            }
            mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Finish_OnRename_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("AsyncIAdviseSink_Finish_OnRename_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_OnRename_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Finish_OnRename_Stub$descriptor() {
        return AsyncIAdviseSink_Finish_OnRename_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_OnRename_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Finish_OnRename_Stub$handle() {
        return AsyncIAdviseSink_Finish_OnRename_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_OnRename_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static int AsyncIAdviseSink_Finish_OnRename_Stub(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Finish_OnRename_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Finish_OnRename_Stub", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Begin_OnSave_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("AsyncIAdviseSink_Begin_OnSave_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_OnSave_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Begin_OnSave_Proxy$descriptor() {
        return AsyncIAdviseSink_Begin_OnSave_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_OnSave_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Begin_OnSave_Proxy$handle() {
        return AsyncIAdviseSink_Begin_OnSave_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_OnSave_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static void AsyncIAdviseSink_Begin_OnSave_Proxy(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Begin_OnSave_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Begin_OnSave_Proxy", This);
            }
            mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Begin_OnSave_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("AsyncIAdviseSink_Begin_OnSave_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_OnSave_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Begin_OnSave_Stub$descriptor() {
        return AsyncIAdviseSink_Begin_OnSave_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_OnSave_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Begin_OnSave_Stub$handle() {
        return AsyncIAdviseSink_Begin_OnSave_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_OnSave_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static int AsyncIAdviseSink_Begin_OnSave_Stub(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Begin_OnSave_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Begin_OnSave_Stub", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Finish_OnSave_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("AsyncIAdviseSink_Finish_OnSave_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_OnSave_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Finish_OnSave_Proxy$descriptor() {
        return AsyncIAdviseSink_Finish_OnSave_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_OnSave_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Finish_OnSave_Proxy$handle() {
        return AsyncIAdviseSink_Finish_OnSave_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_OnSave_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static void AsyncIAdviseSink_Finish_OnSave_Proxy(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Finish_OnSave_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Finish_OnSave_Proxy", This);
            }
            mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Finish_OnSave_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("AsyncIAdviseSink_Finish_OnSave_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_OnSave_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Finish_OnSave_Stub$descriptor() {
        return AsyncIAdviseSink_Finish_OnSave_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_OnSave_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Finish_OnSave_Stub$handle() {
        return AsyncIAdviseSink_Finish_OnSave_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_OnSave_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static int AsyncIAdviseSink_Finish_OnSave_Stub(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Finish_OnSave_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Finish_OnSave_Stub", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Begin_OnClose_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("AsyncIAdviseSink_Begin_OnClose_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_OnClose_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Begin_OnClose_Proxy$descriptor() {
        return AsyncIAdviseSink_Begin_OnClose_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_OnClose_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Begin_OnClose_Proxy$handle() {
        return AsyncIAdviseSink_Begin_OnClose_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_OnClose_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static void AsyncIAdviseSink_Begin_OnClose_Proxy(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Begin_OnClose_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Begin_OnClose_Proxy", This);
            }
            mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Begin_OnClose_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("AsyncIAdviseSink_Begin_OnClose_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_OnClose_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Begin_OnClose_Stub$descriptor() {
        return AsyncIAdviseSink_Begin_OnClose_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_OnClose_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Begin_OnClose_Stub$handle() {
        return AsyncIAdviseSink_Begin_OnClose_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_OnClose_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static int AsyncIAdviseSink_Begin_OnClose_Stub(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Begin_OnClose_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Begin_OnClose_Stub", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Finish_OnClose_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("AsyncIAdviseSink_Finish_OnClose_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_OnClose_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Finish_OnClose_Proxy$descriptor() {
        return AsyncIAdviseSink_Finish_OnClose_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_OnClose_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Finish_OnClose_Proxy$handle() {
        return AsyncIAdviseSink_Finish_OnClose_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_OnClose_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static void AsyncIAdviseSink_Finish_OnClose_Proxy(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Finish_OnClose_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Finish_OnClose_Proxy", This);
            }
            mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Finish_OnClose_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("AsyncIAdviseSink_Finish_OnClose_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_OnClose_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Finish_OnClose_Stub$descriptor() {
        return AsyncIAdviseSink_Finish_OnClose_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_OnClose_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Finish_OnClose_Stub$handle() {
        return AsyncIAdviseSink_Finish_OnClose_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_OnClose_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static int AsyncIAdviseSink_Finish_OnClose_Stub(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Finish_OnClose_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Finish_OnClose_Stub", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink2_OnLinkSrcChange_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IAdviseSink2_OnLinkSrcChange_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IAdviseSink2_OnLinkSrcChange_Proxy(IAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static FunctionDescriptor IAdviseSink2_OnLinkSrcChange_Proxy$descriptor() {
        return IAdviseSink2_OnLinkSrcChange_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IAdviseSink2_OnLinkSrcChange_Proxy(IAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static MethodHandle IAdviseSink2_OnLinkSrcChange_Proxy$handle() {
        return IAdviseSink2_OnLinkSrcChange_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void IAdviseSink2_OnLinkSrcChange_Proxy(IAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static void IAdviseSink2_OnLinkSrcChange_Proxy(MemorySegment This, MemorySegment pmk) {
        var mh$ = IAdviseSink2_OnLinkSrcChange_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink2_OnLinkSrcChange_Proxy", This, pmk);
            }
            mh$.invokeExact(This, pmk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink2_OnLinkSrcChange_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IAdviseSink2_OnLinkSrcChange_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink2_OnLinkSrcChange_Stub(IAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static FunctionDescriptor IAdviseSink2_OnLinkSrcChange_Stub$descriptor() {
        return IAdviseSink2_OnLinkSrcChange_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink2_OnLinkSrcChange_Stub(IAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static MethodHandle IAdviseSink2_OnLinkSrcChange_Stub$handle() {
        return IAdviseSink2_OnLinkSrcChange_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IAdviseSink2_OnLinkSrcChange_Stub(IAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static int IAdviseSink2_OnLinkSrcChange_Stub(MemorySegment This, MemorySegment pmk) {
        var mh$ = IAdviseSink2_OnLinkSrcChange_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink2_OnLinkSrcChange_Stub", This, pmk);
            }
            return (int)mh$.invokeExact(This, pmk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy(AsyncIAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy$descriptor() {
        return AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy(AsyncIAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static MethodHandle AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy$handle() {
        return AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy(AsyncIAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static void AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy(MemorySegment This, MemorySegment pmk) {
        var mh$ = AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy", This, pmk);
            }
            mh$.invokeExact(This, pmk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub(AsyncIAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub$descriptor() {
        return AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub(AsyncIAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static MethodHandle AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub$handle() {
        return AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub(AsyncIAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static int AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub(MemorySegment This, MemorySegment pmk) {
        var mh$ = AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub", This, pmk);
            }
            return (int)mh$.invokeExact(This, pmk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy(AsyncIAdviseSink2 *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy$descriptor() {
        return AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy(AsyncIAdviseSink2 *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy$handle() {
        return AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy(AsyncIAdviseSink2 *This)
     * }
     */
    public static void AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy(MemorySegment This) {
        var mh$ = AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy", This);
            }
            mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub(AsyncIAdviseSink2 *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub$descriptor() {
        return AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub(AsyncIAdviseSink2 *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub$handle() {
        return AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub(AsyncIAdviseSink2 *This)
     * }
     */
    public static int AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub(MemorySegment This) {
        var mh$ = AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IDataObject_GetData_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IDataObject_GetData_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IDataObject_GetData_Proxy(IDataObject *This, FORMATETC *pformatetcIn, STGMEDIUM *pmedium)
     * }
     */
    public static FunctionDescriptor IDataObject_GetData_Proxy$descriptor() {
        return IDataObject_GetData_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IDataObject_GetData_Proxy(IDataObject *This, FORMATETC *pformatetcIn, STGMEDIUM *pmedium)
     * }
     */
    public static MethodHandle IDataObject_GetData_Proxy$handle() {
        return IDataObject_GetData_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IDataObject_GetData_Proxy(IDataObject *This, FORMATETC *pformatetcIn, STGMEDIUM *pmedium)
     * }
     */
    public static int IDataObject_GetData_Proxy(MemorySegment This, MemorySegment pformatetcIn, MemorySegment pmedium) {
        var mh$ = IDataObject_GetData_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IDataObject_GetData_Proxy", This, pformatetcIn, pmedium);
            }
            return (int)mh$.invokeExact(This, pformatetcIn, pmedium);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IDataObject_GetData_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IDataObject_GetData_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IDataObject_GetData_Stub(IDataObject *This, FORMATETC *pformatetcIn, STGMEDIUM *pRemoteMedium)
     * }
     */
    public static FunctionDescriptor IDataObject_GetData_Stub$descriptor() {
        return IDataObject_GetData_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IDataObject_GetData_Stub(IDataObject *This, FORMATETC *pformatetcIn, STGMEDIUM *pRemoteMedium)
     * }
     */
    public static MethodHandle IDataObject_GetData_Stub$handle() {
        return IDataObject_GetData_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IDataObject_GetData_Stub(IDataObject *This, FORMATETC *pformatetcIn, STGMEDIUM *pRemoteMedium)
     * }
     */
    public static int IDataObject_GetData_Stub(MemorySegment This, MemorySegment pformatetcIn, MemorySegment pRemoteMedium) {
        var mh$ = IDataObject_GetData_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IDataObject_GetData_Stub", This, pformatetcIn, pRemoteMedium);
            }
            return (int)mh$.invokeExact(This, pformatetcIn, pRemoteMedium);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IDataObject_GetDataHere_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IDataObject_GetDataHere_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IDataObject_GetDataHere_Proxy(IDataObject *This, FORMATETC *pformatetc, STGMEDIUM *pmedium)
     * }
     */
    public static FunctionDescriptor IDataObject_GetDataHere_Proxy$descriptor() {
        return IDataObject_GetDataHere_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IDataObject_GetDataHere_Proxy(IDataObject *This, FORMATETC *pformatetc, STGMEDIUM *pmedium)
     * }
     */
    public static MethodHandle IDataObject_GetDataHere_Proxy$handle() {
        return IDataObject_GetDataHere_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IDataObject_GetDataHere_Proxy(IDataObject *This, FORMATETC *pformatetc, STGMEDIUM *pmedium)
     * }
     */
    public static int IDataObject_GetDataHere_Proxy(MemorySegment This, MemorySegment pformatetc, MemorySegment pmedium) {
        var mh$ = IDataObject_GetDataHere_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IDataObject_GetDataHere_Proxy", This, pformatetc, pmedium);
            }
            return (int)mh$.invokeExact(This, pformatetc, pmedium);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IDataObject_GetDataHere_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IDataObject_GetDataHere_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IDataObject_GetDataHere_Stub(IDataObject *This, FORMATETC *pformatetc, STGMEDIUM *pRemoteMedium)
     * }
     */
    public static FunctionDescriptor IDataObject_GetDataHere_Stub$descriptor() {
        return IDataObject_GetDataHere_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IDataObject_GetDataHere_Stub(IDataObject *This, FORMATETC *pformatetc, STGMEDIUM *pRemoteMedium)
     * }
     */
    public static MethodHandle IDataObject_GetDataHere_Stub$handle() {
        return IDataObject_GetDataHere_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IDataObject_GetDataHere_Stub(IDataObject *This, FORMATETC *pformatetc, STGMEDIUM *pRemoteMedium)
     * }
     */
    public static int IDataObject_GetDataHere_Stub(MemorySegment This, MemorySegment pformatetc, MemorySegment pRemoteMedium) {
        var mh$ = IDataObject_GetDataHere_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IDataObject_GetDataHere_Stub", This, pformatetc, pRemoteMedium);
            }
            return (int)mh$.invokeExact(This, pformatetc, pRemoteMedium);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IDataObject_SetData_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IDataObject_SetData_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IDataObject_SetData_Proxy(IDataObject *This, FORMATETC *pformatetc, STGMEDIUM *pmedium, BOOL fRelease)
     * }
     */
    public static FunctionDescriptor IDataObject_SetData_Proxy$descriptor() {
        return IDataObject_SetData_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IDataObject_SetData_Proxy(IDataObject *This, FORMATETC *pformatetc, STGMEDIUM *pmedium, BOOL fRelease)
     * }
     */
    public static MethodHandle IDataObject_SetData_Proxy$handle() {
        return IDataObject_SetData_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IDataObject_SetData_Proxy(IDataObject *This, FORMATETC *pformatetc, STGMEDIUM *pmedium, BOOL fRelease)
     * }
     */
    public static int IDataObject_SetData_Proxy(MemorySegment This, MemorySegment pformatetc, MemorySegment pmedium, int fRelease) {
        var mh$ = IDataObject_SetData_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IDataObject_SetData_Proxy", This, pformatetc, pmedium, fRelease);
            }
            return (int)mh$.invokeExact(This, pformatetc, pmedium, fRelease);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IDataObject_SetData_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IDataObject_SetData_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IDataObject_SetData_Stub(IDataObject *This, FORMATETC *pformatetc, FLAG_STGMEDIUM *pmedium, BOOL fRelease)
     * }
     */
    public static FunctionDescriptor IDataObject_SetData_Stub$descriptor() {
        return IDataObject_SetData_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IDataObject_SetData_Stub(IDataObject *This, FORMATETC *pformatetc, FLAG_STGMEDIUM *pmedium, BOOL fRelease)
     * }
     */
    public static MethodHandle IDataObject_SetData_Stub$handle() {
        return IDataObject_SetData_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IDataObject_SetData_Stub(IDataObject *This, FORMATETC *pformatetc, FLAG_STGMEDIUM *pmedium, BOOL fRelease)
     * }
     */
    public static int IDataObject_SetData_Stub(MemorySegment This, MemorySegment pformatetc, MemorySegment pmedium, int fRelease) {
        var mh$ = IDataObject_SetData_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IDataObject_SetData_Stub", This, pformatetc, pmedium, fRelease);
            }
            return (int)mh$.invokeExact(This, pformatetc, pmedium, fRelease);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IFillLockBytes_FillAppend_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IFillLockBytes_FillAppend_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_FillAppend_Proxy(IFillLockBytes *This, const void *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static FunctionDescriptor IFillLockBytes_FillAppend_Proxy$descriptor() {
        return IFillLockBytes_FillAppend_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_FillAppend_Proxy(IFillLockBytes *This, const void *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static MethodHandle IFillLockBytes_FillAppend_Proxy$handle() {
        return IFillLockBytes_FillAppend_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_FillAppend_Proxy(IFillLockBytes *This, const void *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static int IFillLockBytes_FillAppend_Proxy(MemorySegment This, MemorySegment pv, int cb, MemorySegment pcbWritten) {
        var mh$ = IFillLockBytes_FillAppend_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IFillLockBytes_FillAppend_Proxy", This, pv, cb, pcbWritten);
            }
            return (int)mh$.invokeExact(This, pv, cb, pcbWritten);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IFillLockBytes_FillAppend_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IFillLockBytes_FillAppend_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_FillAppend_Stub(IFillLockBytes *This, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static FunctionDescriptor IFillLockBytes_FillAppend_Stub$descriptor() {
        return IFillLockBytes_FillAppend_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_FillAppend_Stub(IFillLockBytes *This, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static MethodHandle IFillLockBytes_FillAppend_Stub$handle() {
        return IFillLockBytes_FillAppend_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_FillAppend_Stub(IFillLockBytes *This, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static int IFillLockBytes_FillAppend_Stub(MemorySegment This, MemorySegment pv, int cb, MemorySegment pcbWritten) {
        var mh$ = IFillLockBytes_FillAppend_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IFillLockBytes_FillAppend_Stub", This, pv, cb, pcbWritten);
            }
            return (int)mh$.invokeExact(This, pv, cb, pcbWritten);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IFillLockBytes_FillAt_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            _ULARGE_INTEGER.layout(),
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IFillLockBytes_FillAt_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_FillAt_Proxy(IFillLockBytes *This, ULARGE_INTEGER ulOffset, const void *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static FunctionDescriptor IFillLockBytes_FillAt_Proxy$descriptor() {
        return IFillLockBytes_FillAt_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_FillAt_Proxy(IFillLockBytes *This, ULARGE_INTEGER ulOffset, const void *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static MethodHandle IFillLockBytes_FillAt_Proxy$handle() {
        return IFillLockBytes_FillAt_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_FillAt_Proxy(IFillLockBytes *This, ULARGE_INTEGER ulOffset, const void *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static int IFillLockBytes_FillAt_Proxy(MemorySegment This, MemorySegment ulOffset, MemorySegment pv, int cb, MemorySegment pcbWritten) {
        var mh$ = IFillLockBytes_FillAt_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IFillLockBytes_FillAt_Proxy", This, ulOffset, pv, cb, pcbWritten);
            }
            return (int)mh$.invokeExact(This, ulOffset, pv, cb, pcbWritten);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IFillLockBytes_FillAt_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            _ULARGE_INTEGER.layout(),
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IFillLockBytes_FillAt_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_FillAt_Stub(IFillLockBytes *This, ULARGE_INTEGER ulOffset, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static FunctionDescriptor IFillLockBytes_FillAt_Stub$descriptor() {
        return IFillLockBytes_FillAt_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_FillAt_Stub(IFillLockBytes *This, ULARGE_INTEGER ulOffset, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static MethodHandle IFillLockBytes_FillAt_Stub$handle() {
        return IFillLockBytes_FillAt_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_FillAt_Stub(IFillLockBytes *This, ULARGE_INTEGER ulOffset, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static int IFillLockBytes_FillAt_Stub(MemorySegment This, MemorySegment ulOffset, MemorySegment pv, int cb, MemorySegment pcbWritten) {
        var mh$ = IFillLockBytes_FillAt_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IFillLockBytes_FillAt_Stub", This, ulOffset, pv, cb, pcbWritten);
            }
            return (int)mh$.invokeExact(This, ulOffset, pv, cb, pcbWritten);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec$layout() {
        return __MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec$segment() {
        return __MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec() {
        return __MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec$layout() {
        return __MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec$segment() {
        return __MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec() {
        return __MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef struct tagSAFEARRAYBOUND {
     *     ULONG cElements;
     *     LONG lLbound;
     * } *LPSAFEARRAYBOUND
     * }
     */
    public static final AddressLayout LPSAFEARRAYBOUND = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _wireVARIANT *wireVARIANT
     * }
     */
    public static final AddressLayout wireVARIANT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _wireBRECORD *wireBRECORD
     * }
     */
    public static final AddressLayout wireBRECORD = C_POINTER;
    private static final int SF_ERROR = (int)10L;
    /**
     * {@snippet lang=c :
     * enum tagSF_TYPE.SF_ERROR = 10
     * }
     */
    public static int SF_ERROR() {
        return SF_ERROR;
    }
    private static final int SF_I1 = (int)16L;
    /**
     * {@snippet lang=c :
     * enum tagSF_TYPE.SF_I1 = 16
     * }
     */
    public static int SF_I1() {
        return SF_I1;
    }
    private static final int SF_I2 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagSF_TYPE.SF_I2 = 2
     * }
     */
    public static int SF_I2() {
        return SF_I2;
    }
    private static final int SF_I4 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagSF_TYPE.SF_I4 = 3
     * }
     */
    public static int SF_I4() {
        return SF_I4;
    }
    private static final int SF_I8 = (int)20L;
    /**
     * {@snippet lang=c :
     * enum tagSF_TYPE.SF_I8 = 20
     * }
     */
    public static int SF_I8() {
        return SF_I8;
    }
    private static final int SF_BSTR = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagSF_TYPE.SF_BSTR = 8
     * }
     */
    public static int SF_BSTR() {
        return SF_BSTR;
    }
    private static final int SF_UNKNOWN = (int)13L;
    /**
     * {@snippet lang=c :
     * enum tagSF_TYPE.SF_UNKNOWN = 13
     * }
     */
    public static int SF_UNKNOWN() {
        return SF_UNKNOWN;
    }
    private static final int SF_DISPATCH = (int)9L;
    /**
     * {@snippet lang=c :
     * enum tagSF_TYPE.SF_DISPATCH = 9
     * }
     */
    public static int SF_DISPATCH() {
        return SF_DISPATCH;
    }
    private static final int SF_VARIANT = (int)12L;
    /**
     * {@snippet lang=c :
     * enum tagSF_TYPE.SF_VARIANT = 12
     * }
     */
    public static int SF_VARIANT() {
        return SF_VARIANT;
    }
    private static final int SF_RECORD = (int)36L;
    /**
     * {@snippet lang=c :
     * enum tagSF_TYPE.SF_RECORD = 36
     * }
     */
    public static int SF_RECORD() {
        return SF_RECORD;
    }
    private static final int SF_HAVEIID = (int)32781L;
    /**
     * {@snippet lang=c :
     * enum tagSF_TYPE.SF_HAVEIID = 32781
     * }
     */
    public static int SF_HAVEIID() {
        return SF_HAVEIID;
    }
    /**
     * {@snippet lang=c :
     * typedef struct _wireSAFEARRAY {
     *     USHORT cDims;
     *     USHORT fFeatures;
     *     ULONG cbElements;
     *     ULONG cLocks;
     *     SAFEARRAYUNION uArrayStructs;
     *     SAFEARRAYBOUND rgsabound[1];
     * } *wireSAFEARRAY
     * }
     */
    public static final AddressLayout wireSAFEARRAY = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef wireSAFEARRAY *wirePSAFEARRAY
     * }
     */
    public static final AddressLayout wirePSAFEARRAY = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef SAFEARRAY *LPSAFEARRAY
     * }
     */
    public static final AddressLayout LPSAFEARRAY = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef VARIANT *LPVARIANT
     * }
     */
    public static final AddressLayout LPVARIANT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef VARIANT *LPVARIANTARG
     * }
     */
    public static final AddressLayout LPVARIANTARG = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LONG DISPID
     * }
     */
    public static final OfInt DISPID = C_LONG;
    /**
     * {@snippet lang=c :
     * typedef DISPID MEMBERID
     * }
     */
    public static final OfInt MEMBERID = C_LONG;
    /**
     * {@snippet lang=c :
     * typedef DWORD HREFTYPE
     * }
     */
    public static final OfInt HREFTYPE = C_LONG;
    private static final int TKIND_ENUM = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEKIND.TKIND_ENUM = 0
     * }
     */
    public static int TKIND_ENUM() {
        return TKIND_ENUM;
    }
    private static final int TKIND_RECORD = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEKIND.TKIND_RECORD = 1
     * }
     */
    public static int TKIND_RECORD() {
        return TKIND_RECORD;
    }
    private static final int TKIND_MODULE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEKIND.TKIND_MODULE = 2
     * }
     */
    public static int TKIND_MODULE() {
        return TKIND_MODULE;
    }
    private static final int TKIND_INTERFACE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEKIND.TKIND_INTERFACE = 3
     * }
     */
    public static int TKIND_INTERFACE() {
        return TKIND_INTERFACE;
    }
    private static final int TKIND_DISPATCH = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEKIND.TKIND_DISPATCH = 4
     * }
     */
    public static int TKIND_DISPATCH() {
        return TKIND_DISPATCH;
    }
    private static final int TKIND_COCLASS = (int)5L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEKIND.TKIND_COCLASS = 5
     * }
     */
    public static int TKIND_COCLASS() {
        return TKIND_COCLASS;
    }
    private static final int TKIND_ALIAS = (int)6L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEKIND.TKIND_ALIAS = 6
     * }
     */
    public static int TKIND_ALIAS() {
        return TKIND_ALIAS;
    }
    private static final int TKIND_UNION = (int)7L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEKIND.TKIND_UNION = 7
     * }
     */
    public static int TKIND_UNION() {
        return TKIND_UNION;
    }
    private static final int TKIND_MAX = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEKIND.TKIND_MAX = 8
     * }
     */
    public static int TKIND_MAX() {
        return TKIND_MAX;
    }
    /**
     * {@snippet lang=c :
     * typedef struct tagPARAMDESCEX {
     *     ULONG cBytes;
     *     VARIANTARG varDefaultValue;
     * } *LPPARAMDESCEX
     * }
     */
    public static final AddressLayout LPPARAMDESCEX = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagPARAMDESC {
     *     LPPARAMDESCEX pparamdescex;
     *     USHORT wParamFlags;
     * } *LPPARAMDESC
     * }
     */
    public static final AddressLayout LPPARAMDESC = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagIDLDESC {
     *     ULONG_PTR dwReserved;
     *     USHORT wIDLFlags;
     * } *LPIDLDESC
     * }
     */
    public static final AddressLayout LPIDLDESC = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagELEMDESC {
     *     TYPEDESC tdesc;
     *     union {
     *         IDLDESC idldesc;
     *         PARAMDESC paramdesc;
     *     };
     * } *LPELEMDESC
     * }
     */
    public static final AddressLayout LPELEMDESC = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagTYPEATTR {
     *     GUID guid;
     *     LCID lcid;
     *     DWORD dwReserved;
     *     MEMBERID memidConstructor;
     *     MEMBERID memidDestructor;
     *     LPOLESTR lpstrSchema;
     *     ULONG cbSizeInstance;
     *     TYPEKIND typekind;
     *     WORD cFuncs;
     *     WORD cVars;
     *     WORD cImplTypes;
     *     WORD cbSizeVft;
     *     WORD cbAlignment;
     *     WORD wTypeFlags;
     *     WORD wMajorVerNum;
     *     WORD wMinorVerNum;
     *     TYPEDESC tdescAlias;
     *     IDLDESC idldescType;
     * } *LPTYPEATTR
     * }
     */
    public static final AddressLayout LPTYPEATTR = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagEXCEPINFO {
     *     WORD wCode;
     *     WORD wReserved;
     *     BSTR bstrSource;
     *     BSTR bstrDescription;
     *     BSTR bstrHelpFile;
     *     DWORD dwHelpContext;
     *     PVOID pvReserved;
     *     HRESULT (*pfnDeferredFillIn)(struct tagEXCEPINFO *) __attribute__((stdcall));
     *     SCODE scode;
     * } *LPEXCEPINFO
     * }
     */
    public static final AddressLayout LPEXCEPINFO = C_POINTER;
    private static final int CC_FASTCALL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagCALLCONV.CC_FASTCALL = 0
     * }
     */
    public static int CC_FASTCALL() {
        return CC_FASTCALL;
    }
    private static final int CC_CDECL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagCALLCONV.CC_CDECL = 1
     * }
     */
    public static int CC_CDECL() {
        return CC_CDECL;
    }
    private static final int CC_MSCPASCAL = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagCALLCONV.CC_MSCPASCAL = 2
     * }
     */
    public static int CC_MSCPASCAL() {
        return CC_MSCPASCAL;
    }
    private static final int CC_PASCAL = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagCALLCONV.CC_PASCAL = 2
     * }
     */
    public static int CC_PASCAL() {
        return CC_PASCAL;
    }
    private static final int CC_MACPASCAL = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagCALLCONV.CC_MACPASCAL = 3
     * }
     */
    public static int CC_MACPASCAL() {
        return CC_MACPASCAL;
    }
    private static final int CC_STDCALL = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagCALLCONV.CC_STDCALL = 4
     * }
     */
    public static int CC_STDCALL() {
        return CC_STDCALL;
    }
    private static final int CC_FPFASTCALL = (int)5L;
    /**
     * {@snippet lang=c :
     * enum tagCALLCONV.CC_FPFASTCALL = 5
     * }
     */
    public static int CC_FPFASTCALL() {
        return CC_FPFASTCALL;
    }
    private static final int CC_SYSCALL = (int)6L;
    /**
     * {@snippet lang=c :
     * enum tagCALLCONV.CC_SYSCALL = 6
     * }
     */
    public static int CC_SYSCALL() {
        return CC_SYSCALL;
    }
    private static final int CC_MPWCDECL = (int)7L;
    /**
     * {@snippet lang=c :
     * enum tagCALLCONV.CC_MPWCDECL = 7
     * }
     */
    public static int CC_MPWCDECL() {
        return CC_MPWCDECL;
    }
    private static final int CC_MPWPASCAL = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagCALLCONV.CC_MPWPASCAL = 8
     * }
     */
    public static int CC_MPWPASCAL() {
        return CC_MPWPASCAL;
    }
    private static final int CC_MAX = (int)9L;
    /**
     * {@snippet lang=c :
     * enum tagCALLCONV.CC_MAX = 9
     * }
     */
    public static int CC_MAX() {
        return CC_MAX;
    }
    private static final int FUNC_VIRTUAL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagFUNCKIND.FUNC_VIRTUAL = 0
     * }
     */
    public static int FUNC_VIRTUAL() {
        return FUNC_VIRTUAL;
    }
    private static final int FUNC_PUREVIRTUAL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagFUNCKIND.FUNC_PUREVIRTUAL = 1
     * }
     */
    public static int FUNC_PUREVIRTUAL() {
        return FUNC_PUREVIRTUAL;
    }
    private static final int FUNC_NONVIRTUAL = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagFUNCKIND.FUNC_NONVIRTUAL = 2
     * }
     */
    public static int FUNC_NONVIRTUAL() {
        return FUNC_NONVIRTUAL;
    }
    private static final int FUNC_STATIC = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagFUNCKIND.FUNC_STATIC = 3
     * }
     */
    public static int FUNC_STATIC() {
        return FUNC_STATIC;
    }
    private static final int FUNC_DISPATCH = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagFUNCKIND.FUNC_DISPATCH = 4
     * }
     */
    public static int FUNC_DISPATCH() {
        return FUNC_DISPATCH;
    }
    private static final int INVOKE_FUNC = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagINVOKEKIND.INVOKE_FUNC = 1
     * }
     */
    public static int INVOKE_FUNC() {
        return INVOKE_FUNC;
    }
    private static final int INVOKE_PROPERTYGET = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagINVOKEKIND.INVOKE_PROPERTYGET = 2
     * }
     */
    public static int INVOKE_PROPERTYGET() {
        return INVOKE_PROPERTYGET;
    }
    private static final int INVOKE_PROPERTYPUT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagINVOKEKIND.INVOKE_PROPERTYPUT = 4
     * }
     */
    public static int INVOKE_PROPERTYPUT() {
        return INVOKE_PROPERTYPUT;
    }
    private static final int INVOKE_PROPERTYPUTREF = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagINVOKEKIND.INVOKE_PROPERTYPUTREF = 8
     * }
     */
    public static int INVOKE_PROPERTYPUTREF() {
        return INVOKE_PROPERTYPUTREF;
    }
    /**
     * {@snippet lang=c :
     * typedef struct tagFUNCDESC {
     *     MEMBERID memid;
     *     SCODE *lprgscode;
     *     ELEMDESC *lprgelemdescParam;
     *     FUNCKIND funckind;
     *     INVOKEKIND invkind;
     *     CALLCONV callconv;
     *     SHORT cParams;
     *     SHORT cParamsOpt;
     *     SHORT oVft;
     *     SHORT cScodes;
     *     ELEMDESC elemdescFunc;
     *     WORD wFuncFlags;
     * } *LPFUNCDESC
     * }
     */
    public static final AddressLayout LPFUNCDESC = C_POINTER;
    private static final int VAR_PERINSTANCE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagVARKIND.VAR_PERINSTANCE = 0
     * }
     */
    public static int VAR_PERINSTANCE() {
        return VAR_PERINSTANCE;
    }
    private static final int VAR_STATIC = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagVARKIND.VAR_STATIC = 1
     * }
     */
    public static int VAR_STATIC() {
        return VAR_STATIC;
    }
    private static final int VAR_CONST = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagVARKIND.VAR_CONST = 2
     * }
     */
    public static int VAR_CONST() {
        return VAR_CONST;
    }
    private static final int VAR_DISPATCH = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagVARKIND.VAR_DISPATCH = 3
     * }
     */
    public static int VAR_DISPATCH() {
        return VAR_DISPATCH;
    }
    /**
     * {@snippet lang=c :
     * typedef struct tagVARDESC {
     *     MEMBERID memid;
     *     LPOLESTR lpstrSchema;
     *     union {
     *         ULONG oInst;
     *         VARIANT *lpvarValue;
     *     };
     *     ELEMDESC elemdescVar;
     *     WORD wVarFlags;
     *     VARKIND varkind;
     * } *LPVARDESC
     * }
     */
    public static final AddressLayout LPVARDESC = C_POINTER;
    private static final int TYPEFLAG_FAPPOBJECT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEFLAGS.TYPEFLAG_FAPPOBJECT = 1
     * }
     */
    public static int TYPEFLAG_FAPPOBJECT() {
        return TYPEFLAG_FAPPOBJECT;
    }
    private static final int TYPEFLAG_FCANCREATE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEFLAGS.TYPEFLAG_FCANCREATE = 2
     * }
     */
    public static int TYPEFLAG_FCANCREATE() {
        return TYPEFLAG_FCANCREATE;
    }
    private static final int TYPEFLAG_FLICENSED = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEFLAGS.TYPEFLAG_FLICENSED = 4
     * }
     */
    public static int TYPEFLAG_FLICENSED() {
        return TYPEFLAG_FLICENSED;
    }
    private static final int TYPEFLAG_FPREDECLID = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEFLAGS.TYPEFLAG_FPREDECLID = 8
     * }
     */
    public static int TYPEFLAG_FPREDECLID() {
        return TYPEFLAG_FPREDECLID;
    }
    private static final int TYPEFLAG_FHIDDEN = (int)16L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEFLAGS.TYPEFLAG_FHIDDEN = 16
     * }
     */
    public static int TYPEFLAG_FHIDDEN() {
        return TYPEFLAG_FHIDDEN;
    }
    private static final int TYPEFLAG_FCONTROL = (int)32L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEFLAGS.TYPEFLAG_FCONTROL = 32
     * }
     */
    public static int TYPEFLAG_FCONTROL() {
        return TYPEFLAG_FCONTROL;
    }
    private static final int TYPEFLAG_FDUAL = (int)64L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEFLAGS.TYPEFLAG_FDUAL = 64
     * }
     */
    public static int TYPEFLAG_FDUAL() {
        return TYPEFLAG_FDUAL;
    }
    private static final int TYPEFLAG_FNONEXTENSIBLE = (int)128L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEFLAGS.TYPEFLAG_FNONEXTENSIBLE = 128
     * }
     */
    public static int TYPEFLAG_FNONEXTENSIBLE() {
        return TYPEFLAG_FNONEXTENSIBLE;
    }
    private static final int TYPEFLAG_FOLEAUTOMATION = (int)256L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEFLAGS.TYPEFLAG_FOLEAUTOMATION = 256
     * }
     */
    public static int TYPEFLAG_FOLEAUTOMATION() {
        return TYPEFLAG_FOLEAUTOMATION;
    }
    private static final int TYPEFLAG_FRESTRICTED = (int)512L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEFLAGS.TYPEFLAG_FRESTRICTED = 512
     * }
     */
    public static int TYPEFLAG_FRESTRICTED() {
        return TYPEFLAG_FRESTRICTED;
    }
    private static final int TYPEFLAG_FAGGREGATABLE = (int)1024L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEFLAGS.TYPEFLAG_FAGGREGATABLE = 1024
     * }
     */
    public static int TYPEFLAG_FAGGREGATABLE() {
        return TYPEFLAG_FAGGREGATABLE;
    }
    private static final int TYPEFLAG_FREPLACEABLE = (int)2048L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEFLAGS.TYPEFLAG_FREPLACEABLE = 2048
     * }
     */
    public static int TYPEFLAG_FREPLACEABLE() {
        return TYPEFLAG_FREPLACEABLE;
    }
    private static final int TYPEFLAG_FDISPATCHABLE = (int)4096L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEFLAGS.TYPEFLAG_FDISPATCHABLE = 4096
     * }
     */
    public static int TYPEFLAG_FDISPATCHABLE() {
        return TYPEFLAG_FDISPATCHABLE;
    }
    private static final int TYPEFLAG_FREVERSEBIND = (int)8192L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEFLAGS.TYPEFLAG_FREVERSEBIND = 8192
     * }
     */
    public static int TYPEFLAG_FREVERSEBIND() {
        return TYPEFLAG_FREVERSEBIND;
    }
    private static final int TYPEFLAG_FPROXY = (int)16384L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEFLAGS.TYPEFLAG_FPROXY = 16384
     * }
     */
    public static int TYPEFLAG_FPROXY() {
        return TYPEFLAG_FPROXY;
    }
    private static final int FUNCFLAG_FRESTRICTED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagFUNCFLAGS.FUNCFLAG_FRESTRICTED = 1
     * }
     */
    public static int FUNCFLAG_FRESTRICTED() {
        return FUNCFLAG_FRESTRICTED;
    }
    private static final int FUNCFLAG_FSOURCE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagFUNCFLAGS.FUNCFLAG_FSOURCE = 2
     * }
     */
    public static int FUNCFLAG_FSOURCE() {
        return FUNCFLAG_FSOURCE;
    }
    private static final int FUNCFLAG_FBINDABLE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagFUNCFLAGS.FUNCFLAG_FBINDABLE = 4
     * }
     */
    public static int FUNCFLAG_FBINDABLE() {
        return FUNCFLAG_FBINDABLE;
    }
    private static final int FUNCFLAG_FREQUESTEDIT = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagFUNCFLAGS.FUNCFLAG_FREQUESTEDIT = 8
     * }
     */
    public static int FUNCFLAG_FREQUESTEDIT() {
        return FUNCFLAG_FREQUESTEDIT;
    }
    private static final int FUNCFLAG_FDISPLAYBIND = (int)16L;
    /**
     * {@snippet lang=c :
     * enum tagFUNCFLAGS.FUNCFLAG_FDISPLAYBIND = 16
     * }
     */
    public static int FUNCFLAG_FDISPLAYBIND() {
        return FUNCFLAG_FDISPLAYBIND;
    }
    private static final int FUNCFLAG_FDEFAULTBIND = (int)32L;
    /**
     * {@snippet lang=c :
     * enum tagFUNCFLAGS.FUNCFLAG_FDEFAULTBIND = 32
     * }
     */
    public static int FUNCFLAG_FDEFAULTBIND() {
        return FUNCFLAG_FDEFAULTBIND;
    }
    private static final int FUNCFLAG_FHIDDEN = (int)64L;
    /**
     * {@snippet lang=c :
     * enum tagFUNCFLAGS.FUNCFLAG_FHIDDEN = 64
     * }
     */
    public static int FUNCFLAG_FHIDDEN() {
        return FUNCFLAG_FHIDDEN;
    }
    private static final int FUNCFLAG_FUSESGETLASTERROR = (int)128L;
    /**
     * {@snippet lang=c :
     * enum tagFUNCFLAGS.FUNCFLAG_FUSESGETLASTERROR = 128
     * }
     */
    public static int FUNCFLAG_FUSESGETLASTERROR() {
        return FUNCFLAG_FUSESGETLASTERROR;
    }
    private static final int FUNCFLAG_FDEFAULTCOLLELEM = (int)256L;
    /**
     * {@snippet lang=c :
     * enum tagFUNCFLAGS.FUNCFLAG_FDEFAULTCOLLELEM = 256
     * }
     */
    public static int FUNCFLAG_FDEFAULTCOLLELEM() {
        return FUNCFLAG_FDEFAULTCOLLELEM;
    }
    private static final int FUNCFLAG_FUIDEFAULT = (int)512L;
    /**
     * {@snippet lang=c :
     * enum tagFUNCFLAGS.FUNCFLAG_FUIDEFAULT = 512
     * }
     */
    public static int FUNCFLAG_FUIDEFAULT() {
        return FUNCFLAG_FUIDEFAULT;
    }
    private static final int FUNCFLAG_FNONBROWSABLE = (int)1024L;
    /**
     * {@snippet lang=c :
     * enum tagFUNCFLAGS.FUNCFLAG_FNONBROWSABLE = 1024
     * }
     */
    public static int FUNCFLAG_FNONBROWSABLE() {
        return FUNCFLAG_FNONBROWSABLE;
    }
    private static final int FUNCFLAG_FREPLACEABLE = (int)2048L;
    /**
     * {@snippet lang=c :
     * enum tagFUNCFLAGS.FUNCFLAG_FREPLACEABLE = 2048
     * }
     */
    public static int FUNCFLAG_FREPLACEABLE() {
        return FUNCFLAG_FREPLACEABLE;
    }
    private static final int FUNCFLAG_FIMMEDIATEBIND = (int)4096L;
    /**
     * {@snippet lang=c :
     * enum tagFUNCFLAGS.FUNCFLAG_FIMMEDIATEBIND = 4096
     * }
     */
    public static int FUNCFLAG_FIMMEDIATEBIND() {
        return FUNCFLAG_FIMMEDIATEBIND;
    }
    private static final int VARFLAG_FREADONLY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagVARFLAGS.VARFLAG_FREADONLY = 1
     * }
     */
    public static int VARFLAG_FREADONLY() {
        return VARFLAG_FREADONLY;
    }
    private static final int VARFLAG_FSOURCE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagVARFLAGS.VARFLAG_FSOURCE = 2
     * }
     */
    public static int VARFLAG_FSOURCE() {
        return VARFLAG_FSOURCE;
    }
    private static final int VARFLAG_FBINDABLE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagVARFLAGS.VARFLAG_FBINDABLE = 4
     * }
     */
    public static int VARFLAG_FBINDABLE() {
        return VARFLAG_FBINDABLE;
    }
    private static final int VARFLAG_FREQUESTEDIT = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagVARFLAGS.VARFLAG_FREQUESTEDIT = 8
     * }
     */
    public static int VARFLAG_FREQUESTEDIT() {
        return VARFLAG_FREQUESTEDIT;
    }
    private static final int VARFLAG_FDISPLAYBIND = (int)16L;
    /**
     * {@snippet lang=c :
     * enum tagVARFLAGS.VARFLAG_FDISPLAYBIND = 16
     * }
     */
    public static int VARFLAG_FDISPLAYBIND() {
        return VARFLAG_FDISPLAYBIND;
    }
    private static final int VARFLAG_FDEFAULTBIND = (int)32L;
    /**
     * {@snippet lang=c :
     * enum tagVARFLAGS.VARFLAG_FDEFAULTBIND = 32
     * }
     */
    public static int VARFLAG_FDEFAULTBIND() {
        return VARFLAG_FDEFAULTBIND;
    }
    private static final int VARFLAG_FHIDDEN = (int)64L;
    /**
     * {@snippet lang=c :
     * enum tagVARFLAGS.VARFLAG_FHIDDEN = 64
     * }
     */
    public static int VARFLAG_FHIDDEN() {
        return VARFLAG_FHIDDEN;
    }
    private static final int VARFLAG_FRESTRICTED = (int)128L;
    /**
     * {@snippet lang=c :
     * enum tagVARFLAGS.VARFLAG_FRESTRICTED = 128
     * }
     */
    public static int VARFLAG_FRESTRICTED() {
        return VARFLAG_FRESTRICTED;
    }
    private static final int VARFLAG_FDEFAULTCOLLELEM = (int)256L;
    /**
     * {@snippet lang=c :
     * enum tagVARFLAGS.VARFLAG_FDEFAULTCOLLELEM = 256
     * }
     */
    public static int VARFLAG_FDEFAULTCOLLELEM() {
        return VARFLAG_FDEFAULTCOLLELEM;
    }
    private static final int VARFLAG_FUIDEFAULT = (int)512L;
    /**
     * {@snippet lang=c :
     * enum tagVARFLAGS.VARFLAG_FUIDEFAULT = 512
     * }
     */
    public static int VARFLAG_FUIDEFAULT() {
        return VARFLAG_FUIDEFAULT;
    }
    private static final int VARFLAG_FNONBROWSABLE = (int)1024L;
    /**
     * {@snippet lang=c :
     * enum tagVARFLAGS.VARFLAG_FNONBROWSABLE = 1024
     * }
     */
    public static int VARFLAG_FNONBROWSABLE() {
        return VARFLAG_FNONBROWSABLE;
    }
    private static final int VARFLAG_FREPLACEABLE = (int)2048L;
    /**
     * {@snippet lang=c :
     * enum tagVARFLAGS.VARFLAG_FREPLACEABLE = 2048
     * }
     */
    public static int VARFLAG_FREPLACEABLE() {
        return VARFLAG_FREPLACEABLE;
    }
    private static final int VARFLAG_FIMMEDIATEBIND = (int)4096L;
    /**
     * {@snippet lang=c :
     * enum tagVARFLAGS.VARFLAG_FIMMEDIATEBIND = 4096
     * }
     */
    public static int VARFLAG_FIMMEDIATEBIND() {
        return VARFLAG_FIMMEDIATEBIND;
    }
    /**
     * {@snippet lang=c :
     * typedef struct tagCUSTDATAITEM {
     *     GUID guid;
     *     VARIANTARG varValue;
     * } *LPCUSTDATAITEM
     * }
     */
    public static final AddressLayout LPCUSTDATAITEM = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagCUSTDATA {
     *     DWORD cCustData;
     *     LPCUSTDATAITEM prgCustData;
     * } *LPCUSTDATA
     * }
     */
    public static final AddressLayout LPCUSTDATA = C_POINTER;

    private static class IOleAutomationTypes_v1_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("IOleAutomationTypes_v1_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_c_ifspec
     * }
     */
    public static AddressLayout IOleAutomationTypes_v1_0_c_ifspec$layout() {
        return IOleAutomationTypes_v1_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_c_ifspec
     * }
     */
    public static MemorySegment IOleAutomationTypes_v1_0_c_ifspec$segment() {
        return IOleAutomationTypes_v1_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_c_ifspec
     * }
     */
    public static MemorySegment IOleAutomationTypes_v1_0_c_ifspec() {
        return IOleAutomationTypes_v1_0_c_ifspec$constants.SEGMENT.get(IOleAutomationTypes_v1_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_c_ifspec
     * }
     */
    public static void IOleAutomationTypes_v1_0_c_ifspec(MemorySegment varValue) {
        IOleAutomationTypes_v1_0_c_ifspec$constants.SEGMENT.set(IOleAutomationTypes_v1_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IOleAutomationTypes_v1_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("IOleAutomationTypes_v1_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_s_ifspec
     * }
     */
    public static AddressLayout IOleAutomationTypes_v1_0_s_ifspec$layout() {
        return IOleAutomationTypes_v1_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_s_ifspec
     * }
     */
    public static MemorySegment IOleAutomationTypes_v1_0_s_ifspec$segment() {
        return IOleAutomationTypes_v1_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_s_ifspec
     * }
     */
    public static MemorySegment IOleAutomationTypes_v1_0_s_ifspec() {
        return IOleAutomationTypes_v1_0_s_ifspec$constants.SEGMENT.get(IOleAutomationTypes_v1_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_s_ifspec
     * }
     */
    public static void IOleAutomationTypes_v1_0_s_ifspec(MemorySegment varValue) {
        IOleAutomationTypes_v1_0_s_ifspec$constants.SEGMENT.set(IOleAutomationTypes_v1_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec$layout() {
        return __MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec$segment() {
        return __MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec() {
        return __MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec$layout() {
        return __MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec$segment() {
        return __MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec() {
        return __MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef ICreateTypeInfo *LPCREATETYPEINFO
     * }
     */
    public static final AddressLayout LPCREATETYPEINFO = C_POINTER;

    private static class IID_ICreateTypeInfo$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_ICreateTypeInfo").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICreateTypeInfo
     * }
     */
    public static GroupLayout IID_ICreateTypeInfo$layout() {
        return IID_ICreateTypeInfo$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICreateTypeInfo
     * }
     */
    public static MemorySegment IID_ICreateTypeInfo() {
        return IID_ICreateTypeInfo$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICreateTypeInfo
     * }
     */
    public static void IID_ICreateTypeInfo(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ICreateTypeInfo$constants.SEGMENT, 0L, IID_ICreateTypeInfo$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef ICreateTypeInfo2 *LPCREATETYPEINFO2
     * }
     */
    public static final AddressLayout LPCREATETYPEINFO2 = C_POINTER;

    private static class IID_ICreateTypeInfo2$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_ICreateTypeInfo2").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICreateTypeInfo2
     * }
     */
    public static GroupLayout IID_ICreateTypeInfo2$layout() {
        return IID_ICreateTypeInfo2$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICreateTypeInfo2
     * }
     */
    public static MemorySegment IID_ICreateTypeInfo2() {
        return IID_ICreateTypeInfo2$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICreateTypeInfo2
     * }
     */
    public static void IID_ICreateTypeInfo2(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ICreateTypeInfo2$constants.SEGMENT, 0L, IID_ICreateTypeInfo2$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef ICreateTypeLib *LPCREATETYPELIB
     * }
     */
    public static final AddressLayout LPCREATETYPELIB = C_POINTER;

    private static class IID_ICreateTypeLib$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_ICreateTypeLib").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICreateTypeLib
     * }
     */
    public static GroupLayout IID_ICreateTypeLib$layout() {
        return IID_ICreateTypeLib$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICreateTypeLib
     * }
     */
    public static MemorySegment IID_ICreateTypeLib() {
        return IID_ICreateTypeLib$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICreateTypeLib
     * }
     */
    public static void IID_ICreateTypeLib(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ICreateTypeLib$constants.SEGMENT, 0L, IID_ICreateTypeLib$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef ICreateTypeLib2 *LPCREATETYPELIB2
     * }
     */
    public static final AddressLayout LPCREATETYPELIB2 = C_POINTER;

    private static class IID_ICreateTypeLib2$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_ICreateTypeLib2").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICreateTypeLib2
     * }
     */
    public static GroupLayout IID_ICreateTypeLib2$layout() {
        return IID_ICreateTypeLib2$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICreateTypeLib2
     * }
     */
    public static MemorySegment IID_ICreateTypeLib2() {
        return IID_ICreateTypeLib2$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICreateTypeLib2
     * }
     */
    public static void IID_ICreateTypeLib2(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ICreateTypeLib2$constants.SEGMENT, 0L, IID_ICreateTypeLib2$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec$layout() {
        return __MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec$segment() {
        return __MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec() {
        return __MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec$layout() {
        return __MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec$segment() {
        return __MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec() {
        return __MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IDispatch *LPDISPATCH
     * }
     */
    public static final AddressLayout LPDISPATCH = C_POINTER;

    private static class IID_IDispatch$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IDispatch").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDispatch
     * }
     */
    public static GroupLayout IID_IDispatch$layout() {
        return IID_IDispatch$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDispatch
     * }
     */
    public static MemorySegment IID_IDispatch() {
        return IID_IDispatch$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDispatch
     * }
     */
    public static void IID_IDispatch(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IDispatch$constants.SEGMENT, 0L, IID_IDispatch$constants.LAYOUT.byteSize());
    }

    private static class IDispatch_RemoteInvoke_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_INT,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IDispatch_RemoteInvoke_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IDispatch_RemoteInvoke_Proxy(IDispatch *This, DISPID dispIdMember, const IID *const riid, LCID lcid, DWORD dwFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *pArgErr, UINT cVarRef, UINT *rgVarRefIdx, VARIANTARG *rgVarRef)
     * }
     */
    public static FunctionDescriptor IDispatch_RemoteInvoke_Proxy$descriptor() {
        return IDispatch_RemoteInvoke_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IDispatch_RemoteInvoke_Proxy(IDispatch *This, DISPID dispIdMember, const IID *const riid, LCID lcid, DWORD dwFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *pArgErr, UINT cVarRef, UINT *rgVarRefIdx, VARIANTARG *rgVarRef)
     * }
     */
    public static MethodHandle IDispatch_RemoteInvoke_Proxy$handle() {
        return IDispatch_RemoteInvoke_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IDispatch_RemoteInvoke_Proxy(IDispatch *This, DISPID dispIdMember, const IID *const riid, LCID lcid, DWORD dwFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *pArgErr, UINT cVarRef, UINT *rgVarRefIdx, VARIANTARG *rgVarRef)
     * }
     */
    public static int IDispatch_RemoteInvoke_Proxy(MemorySegment This, int dispIdMember, MemorySegment riid, int lcid, int dwFlags, MemorySegment pDispParams, MemorySegment pVarResult, MemorySegment pExcepInfo, MemorySegment pArgErr, int cVarRef, MemorySegment rgVarRefIdx, MemorySegment rgVarRef) {
        var mh$ = IDispatch_RemoteInvoke_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IDispatch_RemoteInvoke_Proxy", This, dispIdMember, riid, lcid, dwFlags, pDispParams, pVarResult, pExcepInfo, pArgErr, cVarRef, rgVarRefIdx, rgVarRef);
            }
            return (int)mh$.invokeExact(This, dispIdMember, riid, lcid, dwFlags, pDispParams, pVarResult, pExcepInfo, pArgErr, cVarRef, rgVarRefIdx, rgVarRef);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IDispatch_RemoteInvoke_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IDispatch_RemoteInvoke_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IDispatch_RemoteInvoke_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IDispatch_RemoteInvoke_Stub$descriptor() {
        return IDispatch_RemoteInvoke_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IDispatch_RemoteInvoke_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IDispatch_RemoteInvoke_Stub$handle() {
        return IDispatch_RemoteInvoke_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void IDispatch_RemoteInvoke_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IDispatch_RemoteInvoke_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IDispatch_RemoteInvoke_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IDispatch_RemoteInvoke_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef IEnumVARIANT *LPENUMVARIANT
     * }
     */
    public static final AddressLayout LPENUMVARIANT = C_POINTER;

    private static class IID_IEnumVARIANT$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IEnumVARIANT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumVARIANT
     * }
     */
    public static GroupLayout IID_IEnumVARIANT$layout() {
        return IID_IEnumVARIANT$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumVARIANT
     * }
     */
    public static MemorySegment IID_IEnumVARIANT() {
        return IID_IEnumVARIANT$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumVARIANT
     * }
     */
    public static void IID_IEnumVARIANT(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IEnumVARIANT$constants.SEGMENT, 0L, IID_IEnumVARIANT$constants.LAYOUT.byteSize());
    }

    private static class IEnumVARIANT_RemoteNext_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IEnumVARIANT_RemoteNext_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumVARIANT_RemoteNext_Proxy(IEnumVARIANT *This, ULONG celt, VARIANT *rgVar, ULONG *pCeltFetched)
     * }
     */
    public static FunctionDescriptor IEnumVARIANT_RemoteNext_Proxy$descriptor() {
        return IEnumVARIANT_RemoteNext_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumVARIANT_RemoteNext_Proxy(IEnumVARIANT *This, ULONG celt, VARIANT *rgVar, ULONG *pCeltFetched)
     * }
     */
    public static MethodHandle IEnumVARIANT_RemoteNext_Proxy$handle() {
        return IEnumVARIANT_RemoteNext_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IEnumVARIANT_RemoteNext_Proxy(IEnumVARIANT *This, ULONG celt, VARIANT *rgVar, ULONG *pCeltFetched)
     * }
     */
    public static int IEnumVARIANT_RemoteNext_Proxy(MemorySegment This, int celt, MemorySegment rgVar, MemorySegment pCeltFetched) {
        var mh$ = IEnumVARIANT_RemoteNext_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumVARIANT_RemoteNext_Proxy", This, celt, rgVar, pCeltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgVar, pCeltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumVARIANT_RemoteNext_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IEnumVARIANT_RemoteNext_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IEnumVARIANT_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IEnumVARIANT_RemoteNext_Stub$descriptor() {
        return IEnumVARIANT_RemoteNext_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IEnumVARIANT_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IEnumVARIANT_RemoteNext_Stub$handle() {
        return IEnumVARIANT_RemoteNext_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void IEnumVARIANT_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IEnumVARIANT_RemoteNext_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IEnumVARIANT_RemoteNext_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumVARIANT_RemoteNext_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef ITypeComp *LPTYPECOMP
     * }
     */
    public static final AddressLayout LPTYPECOMP = C_POINTER;
    private static final int DESCKIND_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagDESCKIND.DESCKIND_NONE = 0
     * }
     */
    public static int DESCKIND_NONE() {
        return DESCKIND_NONE;
    }
    private static final int DESCKIND_FUNCDESC = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagDESCKIND.DESCKIND_FUNCDESC = 1
     * }
     */
    public static int DESCKIND_FUNCDESC() {
        return DESCKIND_FUNCDESC;
    }
    private static final int DESCKIND_VARDESC = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagDESCKIND.DESCKIND_VARDESC = 2
     * }
     */
    public static int DESCKIND_VARDESC() {
        return DESCKIND_VARDESC;
    }
    private static final int DESCKIND_TYPECOMP = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagDESCKIND.DESCKIND_TYPECOMP = 3
     * }
     */
    public static int DESCKIND_TYPECOMP() {
        return DESCKIND_TYPECOMP;
    }
    private static final int DESCKIND_IMPLICITAPPOBJ = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagDESCKIND.DESCKIND_IMPLICITAPPOBJ = 4
     * }
     */
    public static int DESCKIND_IMPLICITAPPOBJ() {
        return DESCKIND_IMPLICITAPPOBJ;
    }
    private static final int DESCKIND_MAX = (int)5L;
    /**
     * {@snippet lang=c :
     * enum tagDESCKIND.DESCKIND_MAX = 5
     * }
     */
    public static int DESCKIND_MAX() {
        return DESCKIND_MAX;
    }
    /**
     * {@snippet lang=c :
     * typedef union tagBINDPTR {
     *     FUNCDESC *lpfuncdesc;
     *     VARDESC *lpvardesc;
     *     ITypeComp *lptcomp;
     * } *LPBINDPTR
     * }
     */
    public static final AddressLayout LPBINDPTR = C_POINTER;

    private static class IID_ITypeComp$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_ITypeComp").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeComp
     * }
     */
    public static GroupLayout IID_ITypeComp$layout() {
        return IID_ITypeComp$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeComp
     * }
     */
    public static MemorySegment IID_ITypeComp() {
        return IID_ITypeComp$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeComp
     * }
     */
    public static void IID_ITypeComp(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ITypeComp$constants.SEGMENT, 0L, IID_ITypeComp$constants.LAYOUT.byteSize());
    }

    private static class ITypeComp_RemoteBind_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_SHORT,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeComp_RemoteBind_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeComp_RemoteBind_Proxy(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, WORD wFlags, ITypeInfo **ppTInfo, DESCKIND *pDescKind, LPFUNCDESC *ppFuncDesc, LPVARDESC *ppVarDesc, ITypeComp **ppTypeComp, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static FunctionDescriptor ITypeComp_RemoteBind_Proxy$descriptor() {
        return ITypeComp_RemoteBind_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeComp_RemoteBind_Proxy(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, WORD wFlags, ITypeInfo **ppTInfo, DESCKIND *pDescKind, LPFUNCDESC *ppFuncDesc, LPVARDESC *ppVarDesc, ITypeComp **ppTypeComp, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static MethodHandle ITypeComp_RemoteBind_Proxy$handle() {
        return ITypeComp_RemoteBind_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeComp_RemoteBind_Proxy(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, WORD wFlags, ITypeInfo **ppTInfo, DESCKIND *pDescKind, LPFUNCDESC *ppFuncDesc, LPVARDESC *ppVarDesc, ITypeComp **ppTypeComp, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static int ITypeComp_RemoteBind_Proxy(MemorySegment This, MemorySegment szName, int lHashVal, short wFlags, MemorySegment ppTInfo, MemorySegment pDescKind, MemorySegment ppFuncDesc, MemorySegment ppVarDesc, MemorySegment ppTypeComp, MemorySegment pDummy) {
        var mh$ = ITypeComp_RemoteBind_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeComp_RemoteBind_Proxy", This, szName, lHashVal, wFlags, ppTInfo, pDescKind, ppFuncDesc, ppVarDesc, ppTypeComp, pDummy);
            }
            return (int)mh$.invokeExact(This, szName, lHashVal, wFlags, ppTInfo, pDescKind, ppFuncDesc, ppVarDesc, ppTypeComp, pDummy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeComp_RemoteBind_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeComp_RemoteBind_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITypeComp_RemoteBind_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ITypeComp_RemoteBind_Stub$descriptor() {
        return ITypeComp_RemoteBind_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITypeComp_RemoteBind_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ITypeComp_RemoteBind_Stub$handle() {
        return ITypeComp_RemoteBind_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void ITypeComp_RemoteBind_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ITypeComp_RemoteBind_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ITypeComp_RemoteBind_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeComp_RemoteBind_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeComp_RemoteBindType_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeComp_RemoteBindType_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeComp_RemoteBindType_Proxy(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, ITypeInfo **ppTInfo)
     * }
     */
    public static FunctionDescriptor ITypeComp_RemoteBindType_Proxy$descriptor() {
        return ITypeComp_RemoteBindType_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeComp_RemoteBindType_Proxy(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, ITypeInfo **ppTInfo)
     * }
     */
    public static MethodHandle ITypeComp_RemoteBindType_Proxy$handle() {
        return ITypeComp_RemoteBindType_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeComp_RemoteBindType_Proxy(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, ITypeInfo **ppTInfo)
     * }
     */
    public static int ITypeComp_RemoteBindType_Proxy(MemorySegment This, MemorySegment szName, int lHashVal, MemorySegment ppTInfo) {
        var mh$ = ITypeComp_RemoteBindType_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeComp_RemoteBindType_Proxy", This, szName, lHashVal, ppTInfo);
            }
            return (int)mh$.invokeExact(This, szName, lHashVal, ppTInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeComp_RemoteBindType_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeComp_RemoteBindType_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITypeComp_RemoteBindType_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ITypeComp_RemoteBindType_Stub$descriptor() {
        return ITypeComp_RemoteBindType_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITypeComp_RemoteBindType_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ITypeComp_RemoteBindType_Stub$handle() {
        return ITypeComp_RemoteBindType_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void ITypeComp_RemoteBindType_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ITypeComp_RemoteBindType_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ITypeComp_RemoteBindType_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeComp_RemoteBindType_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec$layout() {
        return __MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec$segment() {
        return __MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec() {
        return __MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_oaidl_0000_0008_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_oaidl_0000_0008_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0008_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_oaidl_0000_0008_v0_0_s_ifspec$layout() {
        return __MIDL_itf_oaidl_0000_0008_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0008_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0008_v0_0_s_ifspec$segment() {
        return __MIDL_itf_oaidl_0000_0008_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0008_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0008_v0_0_s_ifspec() {
        return __MIDL_itf_oaidl_0000_0008_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_oaidl_0000_0008_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0008_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_oaidl_0000_0008_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_oaidl_0000_0008_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_oaidl_0000_0008_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef ITypeInfo *LPTYPEINFO
     * }
     */
    public static final AddressLayout LPTYPEINFO = C_POINTER;

    private static class IID_ITypeInfo$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_ITypeInfo").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeInfo
     * }
     */
    public static GroupLayout IID_ITypeInfo$layout() {
        return IID_ITypeInfo$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeInfo
     * }
     */
    public static MemorySegment IID_ITypeInfo() {
        return IID_ITypeInfo$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeInfo
     * }
     */
    public static void IID_ITypeInfo(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ITypeInfo$constants.SEGMENT, 0L, IID_ITypeInfo$constants.LAYOUT.byteSize());
    }

    private static class ITypeInfo_RemoteGetTypeAttr_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeInfo_RemoteGetTypeAttr_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_RemoteGetTypeAttr_Proxy(ITypeInfo *This, LPTYPEATTR *ppTypeAttr, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static FunctionDescriptor ITypeInfo_RemoteGetTypeAttr_Proxy$descriptor() {
        return ITypeInfo_RemoteGetTypeAttr_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_RemoteGetTypeAttr_Proxy(ITypeInfo *This, LPTYPEATTR *ppTypeAttr, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static MethodHandle ITypeInfo_RemoteGetTypeAttr_Proxy$handle() {
        return ITypeInfo_RemoteGetTypeAttr_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_RemoteGetTypeAttr_Proxy(ITypeInfo *This, LPTYPEATTR *ppTypeAttr, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static int ITypeInfo_RemoteGetTypeAttr_Proxy(MemorySegment This, MemorySegment ppTypeAttr, MemorySegment pDummy) {
        var mh$ = ITypeInfo_RemoteGetTypeAttr_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_RemoteGetTypeAttr_Proxy", This, ppTypeAttr, pDummy);
            }
            return (int)mh$.invokeExact(This, ppTypeAttr, pDummy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_RemoteGetTypeAttr_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeInfo_RemoteGetTypeAttr_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITypeInfo_RemoteGetTypeAttr_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ITypeInfo_RemoteGetTypeAttr_Stub$descriptor() {
        return ITypeInfo_RemoteGetTypeAttr_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITypeInfo_RemoteGetTypeAttr_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ITypeInfo_RemoteGetTypeAttr_Stub$handle() {
        return ITypeInfo_RemoteGetTypeAttr_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void ITypeInfo_RemoteGetTypeAttr_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ITypeInfo_RemoteGetTypeAttr_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ITypeInfo_RemoteGetTypeAttr_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_RemoteGetTypeAttr_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_RemoteGetFuncDesc_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_INT,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeInfo_RemoteGetFuncDesc_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_RemoteGetFuncDesc_Proxy(ITypeInfo *This, UINT index, LPFUNCDESC *ppFuncDesc, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static FunctionDescriptor ITypeInfo_RemoteGetFuncDesc_Proxy$descriptor() {
        return ITypeInfo_RemoteGetFuncDesc_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_RemoteGetFuncDesc_Proxy(ITypeInfo *This, UINT index, LPFUNCDESC *ppFuncDesc, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static MethodHandle ITypeInfo_RemoteGetFuncDesc_Proxy$handle() {
        return ITypeInfo_RemoteGetFuncDesc_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_RemoteGetFuncDesc_Proxy(ITypeInfo *This, UINT index, LPFUNCDESC *ppFuncDesc, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static int ITypeInfo_RemoteGetFuncDesc_Proxy(MemorySegment This, int index, MemorySegment ppFuncDesc, MemorySegment pDummy) {
        var mh$ = ITypeInfo_RemoteGetFuncDesc_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_RemoteGetFuncDesc_Proxy", This, index, ppFuncDesc, pDummy);
            }
            return (int)mh$.invokeExact(This, index, ppFuncDesc, pDummy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_RemoteGetFuncDesc_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeInfo_RemoteGetFuncDesc_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITypeInfo_RemoteGetFuncDesc_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ITypeInfo_RemoteGetFuncDesc_Stub$descriptor() {
        return ITypeInfo_RemoteGetFuncDesc_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITypeInfo_RemoteGetFuncDesc_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ITypeInfo_RemoteGetFuncDesc_Stub$handle() {
        return ITypeInfo_RemoteGetFuncDesc_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void ITypeInfo_RemoteGetFuncDesc_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ITypeInfo_RemoteGetFuncDesc_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ITypeInfo_RemoteGetFuncDesc_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_RemoteGetFuncDesc_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_RemoteGetVarDesc_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_INT,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeInfo_RemoteGetVarDesc_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_RemoteGetVarDesc_Proxy(ITypeInfo *This, UINT index, LPVARDESC *ppVarDesc, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static FunctionDescriptor ITypeInfo_RemoteGetVarDesc_Proxy$descriptor() {
        return ITypeInfo_RemoteGetVarDesc_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_RemoteGetVarDesc_Proxy(ITypeInfo *This, UINT index, LPVARDESC *ppVarDesc, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static MethodHandle ITypeInfo_RemoteGetVarDesc_Proxy$handle() {
        return ITypeInfo_RemoteGetVarDesc_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_RemoteGetVarDesc_Proxy(ITypeInfo *This, UINT index, LPVARDESC *ppVarDesc, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static int ITypeInfo_RemoteGetVarDesc_Proxy(MemorySegment This, int index, MemorySegment ppVarDesc, MemorySegment pDummy) {
        var mh$ = ITypeInfo_RemoteGetVarDesc_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_RemoteGetVarDesc_Proxy", This, index, ppVarDesc, pDummy);
            }
            return (int)mh$.invokeExact(This, index, ppVarDesc, pDummy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_RemoteGetVarDesc_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeInfo_RemoteGetVarDesc_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITypeInfo_RemoteGetVarDesc_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ITypeInfo_RemoteGetVarDesc_Stub$descriptor() {
        return ITypeInfo_RemoteGetVarDesc_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITypeInfo_RemoteGetVarDesc_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ITypeInfo_RemoteGetVarDesc_Stub$handle() {
        return ITypeInfo_RemoteGetVarDesc_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void ITypeInfo_RemoteGetVarDesc_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ITypeInfo_RemoteGetVarDesc_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ITypeInfo_RemoteGetVarDesc_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_RemoteGetVarDesc_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_RemoteGetNames_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeInfo_RemoteGetNames_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_RemoteGetNames_Proxy(ITypeInfo *This, MEMBERID memid, BSTR *rgBstrNames, UINT cMaxNames, UINT *pcNames)
     * }
     */
    public static FunctionDescriptor ITypeInfo_RemoteGetNames_Proxy$descriptor() {
        return ITypeInfo_RemoteGetNames_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_RemoteGetNames_Proxy(ITypeInfo *This, MEMBERID memid, BSTR *rgBstrNames, UINT cMaxNames, UINT *pcNames)
     * }
     */
    public static MethodHandle ITypeInfo_RemoteGetNames_Proxy$handle() {
        return ITypeInfo_RemoteGetNames_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_RemoteGetNames_Proxy(ITypeInfo *This, MEMBERID memid, BSTR *rgBstrNames, UINT cMaxNames, UINT *pcNames)
     * }
     */
    public static int ITypeInfo_RemoteGetNames_Proxy(MemorySegment This, int memid, MemorySegment rgBstrNames, int cMaxNames, MemorySegment pcNames) {
        var mh$ = ITypeInfo_RemoteGetNames_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_RemoteGetNames_Proxy", This, memid, rgBstrNames, cMaxNames, pcNames);
            }
            return (int)mh$.invokeExact(This, memid, rgBstrNames, cMaxNames, pcNames);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_RemoteGetNames_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeInfo_RemoteGetNames_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITypeInfo_RemoteGetNames_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ITypeInfo_RemoteGetNames_Stub$descriptor() {
        return ITypeInfo_RemoteGetNames_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITypeInfo_RemoteGetNames_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ITypeInfo_RemoteGetNames_Stub$handle() {
        return ITypeInfo_RemoteGetNames_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void ITypeInfo_RemoteGetNames_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ITypeInfo_RemoteGetNames_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ITypeInfo_RemoteGetNames_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_RemoteGetNames_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_LocalGetIDsOfNames_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeInfo_LocalGetIDsOfNames_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_LocalGetIDsOfNames_Proxy(ITypeInfo *This)
     * }
     */
    public static FunctionDescriptor ITypeInfo_LocalGetIDsOfNames_Proxy$descriptor() {
        return ITypeInfo_LocalGetIDsOfNames_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_LocalGetIDsOfNames_Proxy(ITypeInfo *This)
     * }
     */
    public static MethodHandle ITypeInfo_LocalGetIDsOfNames_Proxy$handle() {
        return ITypeInfo_LocalGetIDsOfNames_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_LocalGetIDsOfNames_Proxy(ITypeInfo *This)
     * }
     */
    public static int ITypeInfo_LocalGetIDsOfNames_Proxy(MemorySegment This) {
        var mh$ = ITypeInfo_LocalGetIDsOfNames_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_LocalGetIDsOfNames_Proxy", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_LocalGetIDsOfNames_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeInfo_LocalGetIDsOfNames_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITypeInfo_LocalGetIDsOfNames_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ITypeInfo_LocalGetIDsOfNames_Stub$descriptor() {
        return ITypeInfo_LocalGetIDsOfNames_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITypeInfo_LocalGetIDsOfNames_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ITypeInfo_LocalGetIDsOfNames_Stub$handle() {
        return ITypeInfo_LocalGetIDsOfNames_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void ITypeInfo_LocalGetIDsOfNames_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ITypeInfo_LocalGetIDsOfNames_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ITypeInfo_LocalGetIDsOfNames_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_LocalGetIDsOfNames_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_LocalInvoke_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeInfo_LocalInvoke_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_LocalInvoke_Proxy(ITypeInfo *This)
     * }
     */
    public static FunctionDescriptor ITypeInfo_LocalInvoke_Proxy$descriptor() {
        return ITypeInfo_LocalInvoke_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_LocalInvoke_Proxy(ITypeInfo *This)
     * }
     */
    public static MethodHandle ITypeInfo_LocalInvoke_Proxy$handle() {
        return ITypeInfo_LocalInvoke_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_LocalInvoke_Proxy(ITypeInfo *This)
     * }
     */
    public static int ITypeInfo_LocalInvoke_Proxy(MemorySegment This) {
        var mh$ = ITypeInfo_LocalInvoke_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_LocalInvoke_Proxy", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_LocalInvoke_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeInfo_LocalInvoke_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITypeInfo_LocalInvoke_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ITypeInfo_LocalInvoke_Stub$descriptor() {
        return ITypeInfo_LocalInvoke_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITypeInfo_LocalInvoke_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ITypeInfo_LocalInvoke_Stub$handle() {
        return ITypeInfo_LocalInvoke_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void ITypeInfo_LocalInvoke_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ITypeInfo_LocalInvoke_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ITypeInfo_LocalInvoke_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_LocalInvoke_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_RemoteGetDocumentation_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeInfo_RemoteGetDocumentation_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_RemoteGetDocumentation_Proxy(ITypeInfo *This, MEMBERID memid, DWORD refPtrFlags, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile)
     * }
     */
    public static FunctionDescriptor ITypeInfo_RemoteGetDocumentation_Proxy$descriptor() {
        return ITypeInfo_RemoteGetDocumentation_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_RemoteGetDocumentation_Proxy(ITypeInfo *This, MEMBERID memid, DWORD refPtrFlags, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile)
     * }
     */
    public static MethodHandle ITypeInfo_RemoteGetDocumentation_Proxy$handle() {
        return ITypeInfo_RemoteGetDocumentation_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_RemoteGetDocumentation_Proxy(ITypeInfo *This, MEMBERID memid, DWORD refPtrFlags, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile)
     * }
     */
    public static int ITypeInfo_RemoteGetDocumentation_Proxy(MemorySegment This, int memid, int refPtrFlags, MemorySegment pBstrName, MemorySegment pBstrDocString, MemorySegment pdwHelpContext, MemorySegment pBstrHelpFile) {
        var mh$ = ITypeInfo_RemoteGetDocumentation_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_RemoteGetDocumentation_Proxy", This, memid, refPtrFlags, pBstrName, pBstrDocString, pdwHelpContext, pBstrHelpFile);
            }
            return (int)mh$.invokeExact(This, memid, refPtrFlags, pBstrName, pBstrDocString, pdwHelpContext, pBstrHelpFile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_RemoteGetDocumentation_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeInfo_RemoteGetDocumentation_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITypeInfo_RemoteGetDocumentation_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ITypeInfo_RemoteGetDocumentation_Stub$descriptor() {
        return ITypeInfo_RemoteGetDocumentation_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITypeInfo_RemoteGetDocumentation_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ITypeInfo_RemoteGetDocumentation_Stub$handle() {
        return ITypeInfo_RemoteGetDocumentation_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void ITypeInfo_RemoteGetDocumentation_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ITypeInfo_RemoteGetDocumentation_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ITypeInfo_RemoteGetDocumentation_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_RemoteGetDocumentation_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_RemoteGetDllEntry_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_INT,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeInfo_RemoteGetDllEntry_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_RemoteGetDllEntry_Proxy(ITypeInfo *This, MEMBERID memid, INVOKEKIND invKind, DWORD refPtrFlags, BSTR *pBstrDllName, BSTR *pBstrName, WORD *pwOrdinal)
     * }
     */
    public static FunctionDescriptor ITypeInfo_RemoteGetDllEntry_Proxy$descriptor() {
        return ITypeInfo_RemoteGetDllEntry_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_RemoteGetDllEntry_Proxy(ITypeInfo *This, MEMBERID memid, INVOKEKIND invKind, DWORD refPtrFlags, BSTR *pBstrDllName, BSTR *pBstrName, WORD *pwOrdinal)
     * }
     */
    public static MethodHandle ITypeInfo_RemoteGetDllEntry_Proxy$handle() {
        return ITypeInfo_RemoteGetDllEntry_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_RemoteGetDllEntry_Proxy(ITypeInfo *This, MEMBERID memid, INVOKEKIND invKind, DWORD refPtrFlags, BSTR *pBstrDllName, BSTR *pBstrName, WORD *pwOrdinal)
     * }
     */
    public static int ITypeInfo_RemoteGetDllEntry_Proxy(MemorySegment This, int memid, int invKind, int refPtrFlags, MemorySegment pBstrDllName, MemorySegment pBstrName, MemorySegment pwOrdinal) {
        var mh$ = ITypeInfo_RemoteGetDllEntry_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_RemoteGetDllEntry_Proxy", This, memid, invKind, refPtrFlags, pBstrDllName, pBstrName, pwOrdinal);
            }
            return (int)mh$.invokeExact(This, memid, invKind, refPtrFlags, pBstrDllName, pBstrName, pwOrdinal);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_RemoteGetDllEntry_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeInfo_RemoteGetDllEntry_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITypeInfo_RemoteGetDllEntry_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ITypeInfo_RemoteGetDllEntry_Stub$descriptor() {
        return ITypeInfo_RemoteGetDllEntry_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITypeInfo_RemoteGetDllEntry_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ITypeInfo_RemoteGetDllEntry_Stub$handle() {
        return ITypeInfo_RemoteGetDllEntry_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void ITypeInfo_RemoteGetDllEntry_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ITypeInfo_RemoteGetDllEntry_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ITypeInfo_RemoteGetDllEntry_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_RemoteGetDllEntry_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_LocalAddressOfMember_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeInfo_LocalAddressOfMember_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_LocalAddressOfMember_Proxy(ITypeInfo *This)
     * }
     */
    public static FunctionDescriptor ITypeInfo_LocalAddressOfMember_Proxy$descriptor() {
        return ITypeInfo_LocalAddressOfMember_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_LocalAddressOfMember_Proxy(ITypeInfo *This)
     * }
     */
    public static MethodHandle ITypeInfo_LocalAddressOfMember_Proxy$handle() {
        return ITypeInfo_LocalAddressOfMember_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_LocalAddressOfMember_Proxy(ITypeInfo *This)
     * }
     */
    public static int ITypeInfo_LocalAddressOfMember_Proxy(MemorySegment This) {
        var mh$ = ITypeInfo_LocalAddressOfMember_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_LocalAddressOfMember_Proxy", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_LocalAddressOfMember_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeInfo_LocalAddressOfMember_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITypeInfo_LocalAddressOfMember_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ITypeInfo_LocalAddressOfMember_Stub$descriptor() {
        return ITypeInfo_LocalAddressOfMember_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITypeInfo_LocalAddressOfMember_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ITypeInfo_LocalAddressOfMember_Stub$handle() {
        return ITypeInfo_LocalAddressOfMember_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void ITypeInfo_LocalAddressOfMember_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ITypeInfo_LocalAddressOfMember_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ITypeInfo_LocalAddressOfMember_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_LocalAddressOfMember_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_RemoteCreateInstance_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeInfo_RemoteCreateInstance_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_RemoteCreateInstance_Proxy(ITypeInfo *This, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static FunctionDescriptor ITypeInfo_RemoteCreateInstance_Proxy$descriptor() {
        return ITypeInfo_RemoteCreateInstance_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_RemoteCreateInstance_Proxy(ITypeInfo *This, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static MethodHandle ITypeInfo_RemoteCreateInstance_Proxy$handle() {
        return ITypeInfo_RemoteCreateInstance_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_RemoteCreateInstance_Proxy(ITypeInfo *This, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static int ITypeInfo_RemoteCreateInstance_Proxy(MemorySegment This, MemorySegment riid, MemorySegment ppvObj) {
        var mh$ = ITypeInfo_RemoteCreateInstance_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_RemoteCreateInstance_Proxy", This, riid, ppvObj);
            }
            return (int)mh$.invokeExact(This, riid, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_RemoteCreateInstance_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeInfo_RemoteCreateInstance_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITypeInfo_RemoteCreateInstance_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ITypeInfo_RemoteCreateInstance_Stub$descriptor() {
        return ITypeInfo_RemoteCreateInstance_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITypeInfo_RemoteCreateInstance_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ITypeInfo_RemoteCreateInstance_Stub$handle() {
        return ITypeInfo_RemoteCreateInstance_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void ITypeInfo_RemoteCreateInstance_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ITypeInfo_RemoteCreateInstance_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ITypeInfo_RemoteCreateInstance_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_RemoteCreateInstance_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_RemoteGetContainingTypeLib_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeInfo_RemoteGetContainingTypeLib_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_RemoteGetContainingTypeLib_Proxy(ITypeInfo *This, ITypeLib **ppTLib, UINT *pIndex)
     * }
     */
    public static FunctionDescriptor ITypeInfo_RemoteGetContainingTypeLib_Proxy$descriptor() {
        return ITypeInfo_RemoteGetContainingTypeLib_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_RemoteGetContainingTypeLib_Proxy(ITypeInfo *This, ITypeLib **ppTLib, UINT *pIndex)
     * }
     */
    public static MethodHandle ITypeInfo_RemoteGetContainingTypeLib_Proxy$handle() {
        return ITypeInfo_RemoteGetContainingTypeLib_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_RemoteGetContainingTypeLib_Proxy(ITypeInfo *This, ITypeLib **ppTLib, UINT *pIndex)
     * }
     */
    public static int ITypeInfo_RemoteGetContainingTypeLib_Proxy(MemorySegment This, MemorySegment ppTLib, MemorySegment pIndex) {
        var mh$ = ITypeInfo_RemoteGetContainingTypeLib_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_RemoteGetContainingTypeLib_Proxy", This, ppTLib, pIndex);
            }
            return (int)mh$.invokeExact(This, ppTLib, pIndex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_RemoteGetContainingTypeLib_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeInfo_RemoteGetContainingTypeLib_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITypeInfo_RemoteGetContainingTypeLib_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ITypeInfo_RemoteGetContainingTypeLib_Stub$descriptor() {
        return ITypeInfo_RemoteGetContainingTypeLib_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITypeInfo_RemoteGetContainingTypeLib_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ITypeInfo_RemoteGetContainingTypeLib_Stub$handle() {
        return ITypeInfo_RemoteGetContainingTypeLib_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void ITypeInfo_RemoteGetContainingTypeLib_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ITypeInfo_RemoteGetContainingTypeLib_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ITypeInfo_RemoteGetContainingTypeLib_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_RemoteGetContainingTypeLib_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_LocalReleaseTypeAttr_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeInfo_LocalReleaseTypeAttr_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_LocalReleaseTypeAttr_Proxy(ITypeInfo *This)
     * }
     */
    public static FunctionDescriptor ITypeInfo_LocalReleaseTypeAttr_Proxy$descriptor() {
        return ITypeInfo_LocalReleaseTypeAttr_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_LocalReleaseTypeAttr_Proxy(ITypeInfo *This)
     * }
     */
    public static MethodHandle ITypeInfo_LocalReleaseTypeAttr_Proxy$handle() {
        return ITypeInfo_LocalReleaseTypeAttr_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_LocalReleaseTypeAttr_Proxy(ITypeInfo *This)
     * }
     */
    public static int ITypeInfo_LocalReleaseTypeAttr_Proxy(MemorySegment This) {
        var mh$ = ITypeInfo_LocalReleaseTypeAttr_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_LocalReleaseTypeAttr_Proxy", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_LocalReleaseTypeAttr_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeInfo_LocalReleaseTypeAttr_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITypeInfo_LocalReleaseTypeAttr_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ITypeInfo_LocalReleaseTypeAttr_Stub$descriptor() {
        return ITypeInfo_LocalReleaseTypeAttr_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITypeInfo_LocalReleaseTypeAttr_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ITypeInfo_LocalReleaseTypeAttr_Stub$handle() {
        return ITypeInfo_LocalReleaseTypeAttr_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void ITypeInfo_LocalReleaseTypeAttr_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ITypeInfo_LocalReleaseTypeAttr_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ITypeInfo_LocalReleaseTypeAttr_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_LocalReleaseTypeAttr_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_LocalReleaseFuncDesc_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeInfo_LocalReleaseFuncDesc_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_LocalReleaseFuncDesc_Proxy(ITypeInfo *This)
     * }
     */
    public static FunctionDescriptor ITypeInfo_LocalReleaseFuncDesc_Proxy$descriptor() {
        return ITypeInfo_LocalReleaseFuncDesc_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_LocalReleaseFuncDesc_Proxy(ITypeInfo *This)
     * }
     */
    public static MethodHandle ITypeInfo_LocalReleaseFuncDesc_Proxy$handle() {
        return ITypeInfo_LocalReleaseFuncDesc_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_LocalReleaseFuncDesc_Proxy(ITypeInfo *This)
     * }
     */
    public static int ITypeInfo_LocalReleaseFuncDesc_Proxy(MemorySegment This) {
        var mh$ = ITypeInfo_LocalReleaseFuncDesc_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_LocalReleaseFuncDesc_Proxy", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_LocalReleaseFuncDesc_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeInfo_LocalReleaseFuncDesc_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITypeInfo_LocalReleaseFuncDesc_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ITypeInfo_LocalReleaseFuncDesc_Stub$descriptor() {
        return ITypeInfo_LocalReleaseFuncDesc_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITypeInfo_LocalReleaseFuncDesc_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ITypeInfo_LocalReleaseFuncDesc_Stub$handle() {
        return ITypeInfo_LocalReleaseFuncDesc_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void ITypeInfo_LocalReleaseFuncDesc_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ITypeInfo_LocalReleaseFuncDesc_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ITypeInfo_LocalReleaseFuncDesc_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_LocalReleaseFuncDesc_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_LocalReleaseVarDesc_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeInfo_LocalReleaseVarDesc_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_LocalReleaseVarDesc_Proxy(ITypeInfo *This)
     * }
     */
    public static FunctionDescriptor ITypeInfo_LocalReleaseVarDesc_Proxy$descriptor() {
        return ITypeInfo_LocalReleaseVarDesc_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_LocalReleaseVarDesc_Proxy(ITypeInfo *This)
     * }
     */
    public static MethodHandle ITypeInfo_LocalReleaseVarDesc_Proxy$handle() {
        return ITypeInfo_LocalReleaseVarDesc_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_LocalReleaseVarDesc_Proxy(ITypeInfo *This)
     * }
     */
    public static int ITypeInfo_LocalReleaseVarDesc_Proxy(MemorySegment This) {
        var mh$ = ITypeInfo_LocalReleaseVarDesc_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_LocalReleaseVarDesc_Proxy", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_LocalReleaseVarDesc_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeInfo_LocalReleaseVarDesc_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITypeInfo_LocalReleaseVarDesc_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ITypeInfo_LocalReleaseVarDesc_Stub$descriptor() {
        return ITypeInfo_LocalReleaseVarDesc_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITypeInfo_LocalReleaseVarDesc_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ITypeInfo_LocalReleaseVarDesc_Stub$handle() {
        return ITypeInfo_LocalReleaseVarDesc_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void ITypeInfo_LocalReleaseVarDesc_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ITypeInfo_LocalReleaseVarDesc_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ITypeInfo_LocalReleaseVarDesc_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_LocalReleaseVarDesc_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef ITypeInfo2 *LPTYPEINFO2
     * }
     */
    public static final AddressLayout LPTYPEINFO2 = C_POINTER;

    private static class IID_ITypeInfo2$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_ITypeInfo2").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeInfo2
     * }
     */
    public static GroupLayout IID_ITypeInfo2$layout() {
        return IID_ITypeInfo2$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeInfo2
     * }
     */
    public static MemorySegment IID_ITypeInfo2() {
        return IID_ITypeInfo2$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeInfo2
     * }
     */
    public static void IID_ITypeInfo2(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ITypeInfo2$constants.SEGMENT, 0L, IID_ITypeInfo2$constants.LAYOUT.byteSize());
    }

    private static class ITypeInfo2_RemoteGetDocumentation2_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeInfo2_RemoteGetDocumentation2_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo2_RemoteGetDocumentation2_Proxy(ITypeInfo2 *This, MEMBERID memid, LCID lcid, DWORD refPtrFlags, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll)
     * }
     */
    public static FunctionDescriptor ITypeInfo2_RemoteGetDocumentation2_Proxy$descriptor() {
        return ITypeInfo2_RemoteGetDocumentation2_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo2_RemoteGetDocumentation2_Proxy(ITypeInfo2 *This, MEMBERID memid, LCID lcid, DWORD refPtrFlags, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll)
     * }
     */
    public static MethodHandle ITypeInfo2_RemoteGetDocumentation2_Proxy$handle() {
        return ITypeInfo2_RemoteGetDocumentation2_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo2_RemoteGetDocumentation2_Proxy(ITypeInfo2 *This, MEMBERID memid, LCID lcid, DWORD refPtrFlags, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll)
     * }
     */
    public static int ITypeInfo2_RemoteGetDocumentation2_Proxy(MemorySegment This, int memid, int lcid, int refPtrFlags, MemorySegment pbstrHelpString, MemorySegment pdwHelpStringContext, MemorySegment pbstrHelpStringDll) {
        var mh$ = ITypeInfo2_RemoteGetDocumentation2_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo2_RemoteGetDocumentation2_Proxy", This, memid, lcid, refPtrFlags, pbstrHelpString, pdwHelpStringContext, pbstrHelpStringDll);
            }
            return (int)mh$.invokeExact(This, memid, lcid, refPtrFlags, pbstrHelpString, pdwHelpStringContext, pbstrHelpStringDll);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo2_RemoteGetDocumentation2_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeInfo2_RemoteGetDocumentation2_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITypeInfo2_RemoteGetDocumentation2_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ITypeInfo2_RemoteGetDocumentation2_Stub$descriptor() {
        return ITypeInfo2_RemoteGetDocumentation2_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITypeInfo2_RemoteGetDocumentation2_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ITypeInfo2_RemoteGetDocumentation2_Stub$handle() {
        return ITypeInfo2_RemoteGetDocumentation2_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void ITypeInfo2_RemoteGetDocumentation2_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ITypeInfo2_RemoteGetDocumentation2_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ITypeInfo2_RemoteGetDocumentation2_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo2_RemoteGetDocumentation2_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_oaidl_0000_0010_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_oaidl_0000_0010_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0010_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_oaidl_0000_0010_v0_0_c_ifspec$layout() {
        return __MIDL_itf_oaidl_0000_0010_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0010_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0010_v0_0_c_ifspec$segment() {
        return __MIDL_itf_oaidl_0000_0010_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0010_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0010_v0_0_c_ifspec() {
        return __MIDL_itf_oaidl_0000_0010_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_oaidl_0000_0010_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0010_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_oaidl_0000_0010_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_oaidl_0000_0010_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_oaidl_0000_0010_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_oaidl_0000_0010_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_oaidl_0000_0010_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0010_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_oaidl_0000_0010_v0_0_s_ifspec$layout() {
        return __MIDL_itf_oaidl_0000_0010_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0010_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0010_v0_0_s_ifspec$segment() {
        return __MIDL_itf_oaidl_0000_0010_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0010_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0010_v0_0_s_ifspec() {
        return __MIDL_itf_oaidl_0000_0010_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_oaidl_0000_0010_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0010_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_oaidl_0000_0010_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_oaidl_0000_0010_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_oaidl_0000_0010_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    private static final int SYS_WIN16 = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagSYSKIND.SYS_WIN16 = 0
     * }
     */
    public static int SYS_WIN16() {
        return SYS_WIN16;
    }
    private static final int SYS_WIN32 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagSYSKIND.SYS_WIN32 = 1
     * }
     */
    public static int SYS_WIN32() {
        return SYS_WIN32;
    }
    private static final int SYS_MAC = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagSYSKIND.SYS_MAC = 2
     * }
     */
    public static int SYS_MAC() {
        return SYS_MAC;
    }
    private static final int SYS_WIN64 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagSYSKIND.SYS_WIN64 = 3
     * }
     */
    public static int SYS_WIN64() {
        return SYS_WIN64;
    }
    private static final int LIBFLAG_FRESTRICTED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagLIBFLAGS.LIBFLAG_FRESTRICTED = 1
     * }
     */
    public static int LIBFLAG_FRESTRICTED() {
        return LIBFLAG_FRESTRICTED;
    }
    private static final int LIBFLAG_FCONTROL = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagLIBFLAGS.LIBFLAG_FCONTROL = 2
     * }
     */
    public static int LIBFLAG_FCONTROL() {
        return LIBFLAG_FCONTROL;
    }
    private static final int LIBFLAG_FHIDDEN = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagLIBFLAGS.LIBFLAG_FHIDDEN = 4
     * }
     */
    public static int LIBFLAG_FHIDDEN() {
        return LIBFLAG_FHIDDEN;
    }
    private static final int LIBFLAG_FHASDISKIMAGE = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagLIBFLAGS.LIBFLAG_FHASDISKIMAGE = 8
     * }
     */
    public static int LIBFLAG_FHASDISKIMAGE() {
        return LIBFLAG_FHASDISKIMAGE;
    }
    /**
     * {@snippet lang=c :
     * typedef ITypeLib *LPTYPELIB
     * }
     */
    public static final AddressLayout LPTYPELIB = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagTLIBATTR {
     *     GUID guid;
     *     LCID lcid;
     *     SYSKIND syskind;
     *     WORD wMajorVerNum;
     *     WORD wMinorVerNum;
     *     WORD wLibFlags;
     * } *LPTLIBATTR
     * }
     */
    public static final AddressLayout LPTLIBATTR = C_POINTER;

    private static class IID_ITypeLib$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_ITypeLib").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeLib
     * }
     */
    public static GroupLayout IID_ITypeLib$layout() {
        return IID_ITypeLib$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeLib
     * }
     */
    public static MemorySegment IID_ITypeLib() {
        return IID_ITypeLib$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeLib
     * }
     */
    public static void IID_ITypeLib(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ITypeLib$constants.SEGMENT, 0L, IID_ITypeLib$constants.LAYOUT.byteSize());
    }

    private static class ITypeLib_RemoteGetTypeInfoCount_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeLib_RemoteGetTypeInfoCount_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_RemoteGetTypeInfoCount_Proxy(ITypeLib *This, UINT *pcTInfo)
     * }
     */
    public static FunctionDescriptor ITypeLib_RemoteGetTypeInfoCount_Proxy$descriptor() {
        return ITypeLib_RemoteGetTypeInfoCount_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_RemoteGetTypeInfoCount_Proxy(ITypeLib *This, UINT *pcTInfo)
     * }
     */
    public static MethodHandle ITypeLib_RemoteGetTypeInfoCount_Proxy$handle() {
        return ITypeLib_RemoteGetTypeInfoCount_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeLib_RemoteGetTypeInfoCount_Proxy(ITypeLib *This, UINT *pcTInfo)
     * }
     */
    public static int ITypeLib_RemoteGetTypeInfoCount_Proxy(MemorySegment This, MemorySegment pcTInfo) {
        var mh$ = ITypeLib_RemoteGetTypeInfoCount_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib_RemoteGetTypeInfoCount_Proxy", This, pcTInfo);
            }
            return (int)mh$.invokeExact(This, pcTInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeLib_RemoteGetTypeInfoCount_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeLib_RemoteGetTypeInfoCount_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITypeLib_RemoteGetTypeInfoCount_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ITypeLib_RemoteGetTypeInfoCount_Stub$descriptor() {
        return ITypeLib_RemoteGetTypeInfoCount_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITypeLib_RemoteGetTypeInfoCount_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ITypeLib_RemoteGetTypeInfoCount_Stub$handle() {
        return ITypeLib_RemoteGetTypeInfoCount_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void ITypeLib_RemoteGetTypeInfoCount_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ITypeLib_RemoteGetTypeInfoCount_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ITypeLib_RemoteGetTypeInfoCount_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib_RemoteGetTypeInfoCount_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeLib_RemoteGetLibAttr_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeLib_RemoteGetLibAttr_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_RemoteGetLibAttr_Proxy(ITypeLib *This, LPTLIBATTR *ppTLibAttr, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static FunctionDescriptor ITypeLib_RemoteGetLibAttr_Proxy$descriptor() {
        return ITypeLib_RemoteGetLibAttr_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_RemoteGetLibAttr_Proxy(ITypeLib *This, LPTLIBATTR *ppTLibAttr, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static MethodHandle ITypeLib_RemoteGetLibAttr_Proxy$handle() {
        return ITypeLib_RemoteGetLibAttr_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeLib_RemoteGetLibAttr_Proxy(ITypeLib *This, LPTLIBATTR *ppTLibAttr, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static int ITypeLib_RemoteGetLibAttr_Proxy(MemorySegment This, MemorySegment ppTLibAttr, MemorySegment pDummy) {
        var mh$ = ITypeLib_RemoteGetLibAttr_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib_RemoteGetLibAttr_Proxy", This, ppTLibAttr, pDummy);
            }
            return (int)mh$.invokeExact(This, ppTLibAttr, pDummy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeLib_RemoteGetLibAttr_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeLib_RemoteGetLibAttr_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITypeLib_RemoteGetLibAttr_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ITypeLib_RemoteGetLibAttr_Stub$descriptor() {
        return ITypeLib_RemoteGetLibAttr_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITypeLib_RemoteGetLibAttr_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ITypeLib_RemoteGetLibAttr_Stub$handle() {
        return ITypeLib_RemoteGetLibAttr_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void ITypeLib_RemoteGetLibAttr_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ITypeLib_RemoteGetLibAttr_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ITypeLib_RemoteGetLibAttr_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib_RemoteGetLibAttr_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeLib_RemoteGetDocumentation_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_INT,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeLib_RemoteGetDocumentation_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_RemoteGetDocumentation_Proxy(ITypeLib *This, INT index, DWORD refPtrFlags, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile)
     * }
     */
    public static FunctionDescriptor ITypeLib_RemoteGetDocumentation_Proxy$descriptor() {
        return ITypeLib_RemoteGetDocumentation_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_RemoteGetDocumentation_Proxy(ITypeLib *This, INT index, DWORD refPtrFlags, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile)
     * }
     */
    public static MethodHandle ITypeLib_RemoteGetDocumentation_Proxy$handle() {
        return ITypeLib_RemoteGetDocumentation_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeLib_RemoteGetDocumentation_Proxy(ITypeLib *This, INT index, DWORD refPtrFlags, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile)
     * }
     */
    public static int ITypeLib_RemoteGetDocumentation_Proxy(MemorySegment This, int index, int refPtrFlags, MemorySegment pBstrName, MemorySegment pBstrDocString, MemorySegment pdwHelpContext, MemorySegment pBstrHelpFile) {
        var mh$ = ITypeLib_RemoteGetDocumentation_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib_RemoteGetDocumentation_Proxy", This, index, refPtrFlags, pBstrName, pBstrDocString, pdwHelpContext, pBstrHelpFile);
            }
            return (int)mh$.invokeExact(This, index, refPtrFlags, pBstrName, pBstrDocString, pdwHelpContext, pBstrHelpFile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeLib_RemoteGetDocumentation_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeLib_RemoteGetDocumentation_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITypeLib_RemoteGetDocumentation_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ITypeLib_RemoteGetDocumentation_Stub$descriptor() {
        return ITypeLib_RemoteGetDocumentation_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITypeLib_RemoteGetDocumentation_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ITypeLib_RemoteGetDocumentation_Stub$handle() {
        return ITypeLib_RemoteGetDocumentation_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void ITypeLib_RemoteGetDocumentation_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ITypeLib_RemoteGetDocumentation_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ITypeLib_RemoteGetDocumentation_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib_RemoteGetDocumentation_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeLib_RemoteIsName_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeLib_RemoteIsName_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_RemoteIsName_Proxy(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, BOOL *pfName, BSTR *pBstrLibName)
     * }
     */
    public static FunctionDescriptor ITypeLib_RemoteIsName_Proxy$descriptor() {
        return ITypeLib_RemoteIsName_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_RemoteIsName_Proxy(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, BOOL *pfName, BSTR *pBstrLibName)
     * }
     */
    public static MethodHandle ITypeLib_RemoteIsName_Proxy$handle() {
        return ITypeLib_RemoteIsName_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeLib_RemoteIsName_Proxy(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, BOOL *pfName, BSTR *pBstrLibName)
     * }
     */
    public static int ITypeLib_RemoteIsName_Proxy(MemorySegment This, MemorySegment szNameBuf, int lHashVal, MemorySegment pfName, MemorySegment pBstrLibName) {
        var mh$ = ITypeLib_RemoteIsName_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib_RemoteIsName_Proxy", This, szNameBuf, lHashVal, pfName, pBstrLibName);
            }
            return (int)mh$.invokeExact(This, szNameBuf, lHashVal, pfName, pBstrLibName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeLib_RemoteIsName_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeLib_RemoteIsName_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITypeLib_RemoteIsName_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ITypeLib_RemoteIsName_Stub$descriptor() {
        return ITypeLib_RemoteIsName_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITypeLib_RemoteIsName_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ITypeLib_RemoteIsName_Stub$handle() {
        return ITypeLib_RemoteIsName_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void ITypeLib_RemoteIsName_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ITypeLib_RemoteIsName_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ITypeLib_RemoteIsName_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib_RemoteIsName_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeLib_RemoteFindName_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeLib_RemoteFindName_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_RemoteFindName_Proxy(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, ITypeInfo **ppTInfo, MEMBERID *rgMemId, USHORT *pcFound, BSTR *pBstrLibName)
     * }
     */
    public static FunctionDescriptor ITypeLib_RemoteFindName_Proxy$descriptor() {
        return ITypeLib_RemoteFindName_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_RemoteFindName_Proxy(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, ITypeInfo **ppTInfo, MEMBERID *rgMemId, USHORT *pcFound, BSTR *pBstrLibName)
     * }
     */
    public static MethodHandle ITypeLib_RemoteFindName_Proxy$handle() {
        return ITypeLib_RemoteFindName_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeLib_RemoteFindName_Proxy(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, ITypeInfo **ppTInfo, MEMBERID *rgMemId, USHORT *pcFound, BSTR *pBstrLibName)
     * }
     */
    public static int ITypeLib_RemoteFindName_Proxy(MemorySegment This, MemorySegment szNameBuf, int lHashVal, MemorySegment ppTInfo, MemorySegment rgMemId, MemorySegment pcFound, MemorySegment pBstrLibName) {
        var mh$ = ITypeLib_RemoteFindName_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib_RemoteFindName_Proxy", This, szNameBuf, lHashVal, ppTInfo, rgMemId, pcFound, pBstrLibName);
            }
            return (int)mh$.invokeExact(This, szNameBuf, lHashVal, ppTInfo, rgMemId, pcFound, pBstrLibName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeLib_RemoteFindName_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeLib_RemoteFindName_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITypeLib_RemoteFindName_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ITypeLib_RemoteFindName_Stub$descriptor() {
        return ITypeLib_RemoteFindName_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITypeLib_RemoteFindName_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ITypeLib_RemoteFindName_Stub$handle() {
        return ITypeLib_RemoteFindName_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void ITypeLib_RemoteFindName_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ITypeLib_RemoteFindName_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ITypeLib_RemoteFindName_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib_RemoteFindName_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeLib_LocalReleaseTLibAttr_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeLib_LocalReleaseTLibAttr_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_LocalReleaseTLibAttr_Proxy(ITypeLib *This)
     * }
     */
    public static FunctionDescriptor ITypeLib_LocalReleaseTLibAttr_Proxy$descriptor() {
        return ITypeLib_LocalReleaseTLibAttr_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_LocalReleaseTLibAttr_Proxy(ITypeLib *This)
     * }
     */
    public static MethodHandle ITypeLib_LocalReleaseTLibAttr_Proxy$handle() {
        return ITypeLib_LocalReleaseTLibAttr_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeLib_LocalReleaseTLibAttr_Proxy(ITypeLib *This)
     * }
     */
    public static int ITypeLib_LocalReleaseTLibAttr_Proxy(MemorySegment This) {
        var mh$ = ITypeLib_LocalReleaseTLibAttr_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib_LocalReleaseTLibAttr_Proxy", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeLib_LocalReleaseTLibAttr_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeLib_LocalReleaseTLibAttr_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITypeLib_LocalReleaseTLibAttr_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ITypeLib_LocalReleaseTLibAttr_Stub$descriptor() {
        return ITypeLib_LocalReleaseTLibAttr_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITypeLib_LocalReleaseTLibAttr_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ITypeLib_LocalReleaseTLibAttr_Stub$handle() {
        return ITypeLib_LocalReleaseTLibAttr_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void ITypeLib_LocalReleaseTLibAttr_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ITypeLib_LocalReleaseTLibAttr_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ITypeLib_LocalReleaseTLibAttr_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib_LocalReleaseTLibAttr_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_oaidl_0000_0011_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_oaidl_0000_0011_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0011_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_oaidl_0000_0011_v0_0_c_ifspec$layout() {
        return __MIDL_itf_oaidl_0000_0011_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0011_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0011_v0_0_c_ifspec$segment() {
        return __MIDL_itf_oaidl_0000_0011_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0011_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0011_v0_0_c_ifspec() {
        return __MIDL_itf_oaidl_0000_0011_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_oaidl_0000_0011_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0011_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_oaidl_0000_0011_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_oaidl_0000_0011_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_oaidl_0000_0011_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_oaidl_0000_0011_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_oaidl_0000_0011_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0011_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_oaidl_0000_0011_v0_0_s_ifspec$layout() {
        return __MIDL_itf_oaidl_0000_0011_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0011_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0011_v0_0_s_ifspec$segment() {
        return __MIDL_itf_oaidl_0000_0011_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0011_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0011_v0_0_s_ifspec() {
        return __MIDL_itf_oaidl_0000_0011_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_oaidl_0000_0011_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0011_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_oaidl_0000_0011_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_oaidl_0000_0011_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_oaidl_0000_0011_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef ITypeLib2 *LPTYPELIB2
     * }
     */
    public static final AddressLayout LPTYPELIB2 = C_POINTER;

    private static class IID_ITypeLib2$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_ITypeLib2").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeLib2
     * }
     */
    public static GroupLayout IID_ITypeLib2$layout() {
        return IID_ITypeLib2$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeLib2
     * }
     */
    public static MemorySegment IID_ITypeLib2() {
        return IID_ITypeLib2$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeLib2
     * }
     */
    public static void IID_ITypeLib2(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ITypeLib2$constants.SEGMENT, 0L, IID_ITypeLib2$constants.LAYOUT.byteSize());
    }

    private static class ITypeLib2_RemoteGetLibStatistics_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeLib2_RemoteGetLibStatistics_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeLib2_RemoteGetLibStatistics_Proxy(ITypeLib2 *This, ULONG *pcUniqueNames, ULONG *pcchUniqueNames)
     * }
     */
    public static FunctionDescriptor ITypeLib2_RemoteGetLibStatistics_Proxy$descriptor() {
        return ITypeLib2_RemoteGetLibStatistics_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeLib2_RemoteGetLibStatistics_Proxy(ITypeLib2 *This, ULONG *pcUniqueNames, ULONG *pcchUniqueNames)
     * }
     */
    public static MethodHandle ITypeLib2_RemoteGetLibStatistics_Proxy$handle() {
        return ITypeLib2_RemoteGetLibStatistics_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeLib2_RemoteGetLibStatistics_Proxy(ITypeLib2 *This, ULONG *pcUniqueNames, ULONG *pcchUniqueNames)
     * }
     */
    public static int ITypeLib2_RemoteGetLibStatistics_Proxy(MemorySegment This, MemorySegment pcUniqueNames, MemorySegment pcchUniqueNames) {
        var mh$ = ITypeLib2_RemoteGetLibStatistics_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib2_RemoteGetLibStatistics_Proxy", This, pcUniqueNames, pcchUniqueNames);
            }
            return (int)mh$.invokeExact(This, pcUniqueNames, pcchUniqueNames);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeLib2_RemoteGetLibStatistics_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeLib2_RemoteGetLibStatistics_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITypeLib2_RemoteGetLibStatistics_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ITypeLib2_RemoteGetLibStatistics_Stub$descriptor() {
        return ITypeLib2_RemoteGetLibStatistics_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITypeLib2_RemoteGetLibStatistics_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ITypeLib2_RemoteGetLibStatistics_Stub$handle() {
        return ITypeLib2_RemoteGetLibStatistics_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void ITypeLib2_RemoteGetLibStatistics_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ITypeLib2_RemoteGetLibStatistics_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ITypeLib2_RemoteGetLibStatistics_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib2_RemoteGetLibStatistics_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeLib2_RemoteGetDocumentation2_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_INT,
            C_LONG,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeLib2_RemoteGetDocumentation2_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeLib2_RemoteGetDocumentation2_Proxy(ITypeLib2 *This, INT index, LCID lcid, DWORD refPtrFlags, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll)
     * }
     */
    public static FunctionDescriptor ITypeLib2_RemoteGetDocumentation2_Proxy$descriptor() {
        return ITypeLib2_RemoteGetDocumentation2_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeLib2_RemoteGetDocumentation2_Proxy(ITypeLib2 *This, INT index, LCID lcid, DWORD refPtrFlags, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll)
     * }
     */
    public static MethodHandle ITypeLib2_RemoteGetDocumentation2_Proxy$handle() {
        return ITypeLib2_RemoteGetDocumentation2_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeLib2_RemoteGetDocumentation2_Proxy(ITypeLib2 *This, INT index, LCID lcid, DWORD refPtrFlags, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll)
     * }
     */
    public static int ITypeLib2_RemoteGetDocumentation2_Proxy(MemorySegment This, int index, int lcid, int refPtrFlags, MemorySegment pbstrHelpString, MemorySegment pdwHelpStringContext, MemorySegment pbstrHelpStringDll) {
        var mh$ = ITypeLib2_RemoteGetDocumentation2_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib2_RemoteGetDocumentation2_Proxy", This, index, lcid, refPtrFlags, pbstrHelpString, pdwHelpStringContext, pbstrHelpStringDll);
            }
            return (int)mh$.invokeExact(This, index, lcid, refPtrFlags, pbstrHelpString, pdwHelpStringContext, pbstrHelpStringDll);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeLib2_RemoteGetDocumentation2_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeLib2_RemoteGetDocumentation2_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITypeLib2_RemoteGetDocumentation2_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ITypeLib2_RemoteGetDocumentation2_Stub$descriptor() {
        return ITypeLib2_RemoteGetDocumentation2_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITypeLib2_RemoteGetDocumentation2_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ITypeLib2_RemoteGetDocumentation2_Stub$handle() {
        return ITypeLib2_RemoteGetDocumentation2_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void ITypeLib2_RemoteGetDocumentation2_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ITypeLib2_RemoteGetDocumentation2_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ITypeLib2_RemoteGetDocumentation2_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib2_RemoteGetDocumentation2_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef ITypeChangeEvents *LPTYPECHANGEEVENTS
     * }
     */
    public static final AddressLayout LPTYPECHANGEEVENTS = C_POINTER;
    private static final int CHANGEKIND_ADDMEMBER = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagCHANGEKIND.CHANGEKIND_ADDMEMBER = 0
     * }
     */
    public static int CHANGEKIND_ADDMEMBER() {
        return CHANGEKIND_ADDMEMBER;
    }
    private static final int CHANGEKIND_DELETEMEMBER = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagCHANGEKIND.CHANGEKIND_DELETEMEMBER = 1
     * }
     */
    public static int CHANGEKIND_DELETEMEMBER() {
        return CHANGEKIND_DELETEMEMBER;
    }
    private static final int CHANGEKIND_SETNAMES = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagCHANGEKIND.CHANGEKIND_SETNAMES = 2
     * }
     */
    public static int CHANGEKIND_SETNAMES() {
        return CHANGEKIND_SETNAMES;
    }
    private static final int CHANGEKIND_SETDOCUMENTATION = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagCHANGEKIND.CHANGEKIND_SETDOCUMENTATION = 3
     * }
     */
    public static int CHANGEKIND_SETDOCUMENTATION() {
        return CHANGEKIND_SETDOCUMENTATION;
    }
    private static final int CHANGEKIND_GENERAL = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagCHANGEKIND.CHANGEKIND_GENERAL = 4
     * }
     */
    public static int CHANGEKIND_GENERAL() {
        return CHANGEKIND_GENERAL;
    }
    private static final int CHANGEKIND_INVALIDATE = (int)5L;
    /**
     * {@snippet lang=c :
     * enum tagCHANGEKIND.CHANGEKIND_INVALIDATE = 5
     * }
     */
    public static int CHANGEKIND_INVALIDATE() {
        return CHANGEKIND_INVALIDATE;
    }
    private static final int CHANGEKIND_CHANGEFAILED = (int)6L;
    /**
     * {@snippet lang=c :
     * enum tagCHANGEKIND.CHANGEKIND_CHANGEFAILED = 6
     * }
     */
    public static int CHANGEKIND_CHANGEFAILED() {
        return CHANGEKIND_CHANGEFAILED;
    }
    private static final int CHANGEKIND_MAX = (int)7L;
    /**
     * {@snippet lang=c :
     * enum tagCHANGEKIND.CHANGEKIND_MAX = 7
     * }
     */
    public static int CHANGEKIND_MAX() {
        return CHANGEKIND_MAX;
    }

    private static class IID_ITypeChangeEvents$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_ITypeChangeEvents").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeChangeEvents
     * }
     */
    public static GroupLayout IID_ITypeChangeEvents$layout() {
        return IID_ITypeChangeEvents$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeChangeEvents
     * }
     */
    public static MemorySegment IID_ITypeChangeEvents() {
        return IID_ITypeChangeEvents$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeChangeEvents
     * }
     */
    public static void IID_ITypeChangeEvents(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ITypeChangeEvents$constants.SEGMENT, 0L, IID_ITypeChangeEvents$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IErrorInfo *LPERRORINFO
     * }
     */
    public static final AddressLayout LPERRORINFO = C_POINTER;

    private static class IID_IErrorInfo$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IErrorInfo").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IErrorInfo
     * }
     */
    public static GroupLayout IID_IErrorInfo$layout() {
        return IID_IErrorInfo$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IErrorInfo
     * }
     */
    public static MemorySegment IID_IErrorInfo() {
        return IID_IErrorInfo$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IErrorInfo
     * }
     */
    public static void IID_IErrorInfo(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IErrorInfo$constants.SEGMENT, 0L, IID_IErrorInfo$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef ICreateErrorInfo *LPCREATEERRORINFO
     * }
     */
    public static final AddressLayout LPCREATEERRORINFO = C_POINTER;

    private static class IID_ICreateErrorInfo$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_ICreateErrorInfo").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICreateErrorInfo
     * }
     */
    public static GroupLayout IID_ICreateErrorInfo$layout() {
        return IID_ICreateErrorInfo$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICreateErrorInfo
     * }
     */
    public static MemorySegment IID_ICreateErrorInfo() {
        return IID_ICreateErrorInfo$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICreateErrorInfo
     * }
     */
    public static void IID_ICreateErrorInfo(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ICreateErrorInfo$constants.SEGMENT, 0L, IID_ICreateErrorInfo$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef ISupportErrorInfo *LPSUPPORTERRORINFO
     * }
     */
    public static final AddressLayout LPSUPPORTERRORINFO = C_POINTER;

    private static class IID_ISupportErrorInfo$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_ISupportErrorInfo").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISupportErrorInfo
     * }
     */
    public static GroupLayout IID_ISupportErrorInfo$layout() {
        return IID_ISupportErrorInfo$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISupportErrorInfo
     * }
     */
    public static MemorySegment IID_ISupportErrorInfo() {
        return IID_ISupportErrorInfo$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISupportErrorInfo
     * }
     */
    public static void IID_ISupportErrorInfo(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ISupportErrorInfo$constants.SEGMENT, 0L, IID_ISupportErrorInfo$constants.LAYOUT.byteSize());
    }

    private static class IID_ITypeFactory$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_ITypeFactory").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeFactory
     * }
     */
    public static GroupLayout IID_ITypeFactory$layout() {
        return IID_ITypeFactory$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeFactory
     * }
     */
    public static MemorySegment IID_ITypeFactory() {
        return IID_ITypeFactory$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeFactory
     * }
     */
    public static void IID_ITypeFactory(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ITypeFactory$constants.SEGMENT, 0L, IID_ITypeFactory$constants.LAYOUT.byteSize());
    }

    private static class IID_ITypeMarshal$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_ITypeMarshal").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeMarshal
     * }
     */
    public static GroupLayout IID_ITypeMarshal$layout() {
        return IID_ITypeMarshal$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeMarshal
     * }
     */
    public static MemorySegment IID_ITypeMarshal() {
        return IID_ITypeMarshal$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeMarshal
     * }
     */
    public static void IID_ITypeMarshal(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ITypeMarshal$constants.SEGMENT, 0L, IID_ITypeMarshal$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IRecordInfo *LPRECORDINFO
     * }
     */
    public static final AddressLayout LPRECORDINFO = C_POINTER;

    private static class IID_IRecordInfo$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IRecordInfo").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRecordInfo
     * }
     */
    public static GroupLayout IID_IRecordInfo$layout() {
        return IID_IRecordInfo$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRecordInfo
     * }
     */
    public static MemorySegment IID_IRecordInfo() {
        return IID_IRecordInfo$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRecordInfo
     * }
     */
    public static void IID_IRecordInfo(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IRecordInfo$constants.SEGMENT, 0L, IID_IRecordInfo$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IErrorLog *LPERRORLOG
     * }
     */
    public static final AddressLayout LPERRORLOG = C_POINTER;

    private static class IID_IErrorLog$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IErrorLog").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IErrorLog
     * }
     */
    public static GroupLayout IID_IErrorLog$layout() {
        return IID_IErrorLog$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IErrorLog
     * }
     */
    public static MemorySegment IID_IErrorLog() {
        return IID_IErrorLog$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IErrorLog
     * }
     */
    public static void IID_IErrorLog(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IErrorLog$constants.SEGMENT, 0L, IID_IErrorLog$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IPropertyBag *LPPROPERTYBAG
     * }
     */
    public static final AddressLayout LPPROPERTYBAG = C_POINTER;

    private static class IID_IPropertyBag$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IPropertyBag").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPropertyBag
     * }
     */
    public static GroupLayout IID_IPropertyBag$layout() {
        return IID_IPropertyBag$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPropertyBag
     * }
     */
    public static MemorySegment IID_IPropertyBag() {
        return IID_IPropertyBag$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPropertyBag
     * }
     */
    public static void IID_IPropertyBag(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IPropertyBag$constants.SEGMENT, 0L, IID_IPropertyBag$constants.LAYOUT.byteSize());
    }

    private static class IPropertyBag_RemoteRead_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IPropertyBag_RemoteRead_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IPropertyBag_RemoteRead_Proxy(IPropertyBag *This, LPCOLESTR pszPropName, VARIANT *pVar, IErrorLog *pErrorLog, DWORD varType, IUnknown *pUnkObj)
     * }
     */
    public static FunctionDescriptor IPropertyBag_RemoteRead_Proxy$descriptor() {
        return IPropertyBag_RemoteRead_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IPropertyBag_RemoteRead_Proxy(IPropertyBag *This, LPCOLESTR pszPropName, VARIANT *pVar, IErrorLog *pErrorLog, DWORD varType, IUnknown *pUnkObj)
     * }
     */
    public static MethodHandle IPropertyBag_RemoteRead_Proxy$handle() {
        return IPropertyBag_RemoteRead_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IPropertyBag_RemoteRead_Proxy(IPropertyBag *This, LPCOLESTR pszPropName, VARIANT *pVar, IErrorLog *pErrorLog, DWORD varType, IUnknown *pUnkObj)
     * }
     */
    public static int IPropertyBag_RemoteRead_Proxy(MemorySegment This, MemorySegment pszPropName, MemorySegment pVar, MemorySegment pErrorLog, int varType, MemorySegment pUnkObj) {
        var mh$ = IPropertyBag_RemoteRead_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IPropertyBag_RemoteRead_Proxy", This, pszPropName, pVar, pErrorLog, varType, pUnkObj);
            }
            return (int)mh$.invokeExact(This, pszPropName, pVar, pErrorLog, varType, pUnkObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IPropertyBag_RemoteRead_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IPropertyBag_RemoteRead_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IPropertyBag_RemoteRead_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IPropertyBag_RemoteRead_Stub$descriptor() {
        return IPropertyBag_RemoteRead_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IPropertyBag_RemoteRead_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IPropertyBag_RemoteRead_Stub$handle() {
        return IPropertyBag_RemoteRead_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void IPropertyBag_RemoteRead_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IPropertyBag_RemoteRead_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IPropertyBag_RemoteRead_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IPropertyBag_RemoteRead_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IID_ITypeLibRegistrationReader$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_ITypeLibRegistrationReader").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeLibRegistrationReader
     * }
     */
    public static GroupLayout IID_ITypeLibRegistrationReader$layout() {
        return IID_ITypeLibRegistrationReader$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeLibRegistrationReader
     * }
     */
    public static MemorySegment IID_ITypeLibRegistrationReader() {
        return IID_ITypeLibRegistrationReader$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeLibRegistrationReader
     * }
     */
    public static void IID_ITypeLibRegistrationReader(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ITypeLibRegistrationReader$constants.SEGMENT, 0L, IID_ITypeLibRegistrationReader$constants.LAYOUT.byteSize());
    }

    private static class IID_ITypeLibRegistration$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_ITypeLibRegistration").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeLibRegistration
     * }
     */
    public static GroupLayout IID_ITypeLibRegistration$layout() {
        return IID_ITypeLibRegistration$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeLibRegistration
     * }
     */
    public static MemorySegment IID_ITypeLibRegistration() {
        return IID_ITypeLibRegistration$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeLibRegistration
     * }
     */
    public static void IID_ITypeLibRegistration(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ITypeLibRegistration$constants.SEGMENT, 0L, IID_ITypeLibRegistration$constants.LAYOUT.byteSize());
    }

    private static class CLSID_TypeLibRegistrationReader$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("CLSID_TypeLibRegistrationReader").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_TypeLibRegistrationReader
     * }
     */
    public static GroupLayout CLSID_TypeLibRegistrationReader$layout() {
        return CLSID_TypeLibRegistrationReader$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_TypeLibRegistrationReader
     * }
     */
    public static MemorySegment CLSID_TypeLibRegistrationReader() {
        return CLSID_TypeLibRegistrationReader$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_TypeLibRegistrationReader
     * }
     */
    public static void CLSID_TypeLibRegistrationReader(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_TypeLibRegistrationReader$constants.SEGMENT, 0L, CLSID_TypeLibRegistrationReader$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_oaidl_0000_0023_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_oaidl_0000_0023_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0023_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_oaidl_0000_0023_v0_0_c_ifspec$layout() {
        return __MIDL_itf_oaidl_0000_0023_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0023_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0023_v0_0_c_ifspec$segment() {
        return __MIDL_itf_oaidl_0000_0023_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0023_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0023_v0_0_c_ifspec() {
        return __MIDL_itf_oaidl_0000_0023_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_oaidl_0000_0023_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0023_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_oaidl_0000_0023_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_oaidl_0000_0023_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_oaidl_0000_0023_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_oaidl_0000_0023_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_oaidl_0000_0023_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0023_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_oaidl_0000_0023_v0_0_s_ifspec$layout() {
        return __MIDL_itf_oaidl_0000_0023_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0023_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0023_v0_0_s_ifspec$segment() {
        return __MIDL_itf_oaidl_0000_0023_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0023_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0023_v0_0_s_ifspec() {
        return __MIDL_itf_oaidl_0000_0023_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_oaidl_0000_0023_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0023_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_oaidl_0000_0023_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_oaidl_0000_0023_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_oaidl_0000_0023_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class BSTR_UserSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("BSTR_UserSize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long BSTR_UserSize(unsigned long *, unsigned long, BSTR *)
     * }
     */
    public static FunctionDescriptor BSTR_UserSize$descriptor() {
        return BSTR_UserSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long BSTR_UserSize(unsigned long *, unsigned long, BSTR *)
     * }
     */
    public static MethodHandle BSTR_UserSize$handle() {
        return BSTR_UserSize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned long BSTR_UserSize(unsigned long *, unsigned long, BSTR *)
     * }
     */
    public static int BSTR_UserSize(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = BSTR_UserSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BSTR_UserSize", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BSTR_UserMarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("BSTR_UserMarshal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *BSTR_UserMarshal(unsigned long *, unsigned char *, BSTR *)
     * }
     */
    public static FunctionDescriptor BSTR_UserMarshal$descriptor() {
        return BSTR_UserMarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *BSTR_UserMarshal(unsigned long *, unsigned char *, BSTR *)
     * }
     */
    public static MethodHandle BSTR_UserMarshal$handle() {
        return BSTR_UserMarshal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *BSTR_UserMarshal(unsigned long *, unsigned char *, BSTR *)
     * }
     */
    public static MemorySegment BSTR_UserMarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = BSTR_UserMarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BSTR_UserMarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BSTR_UserUnmarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("BSTR_UserUnmarshal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *BSTR_UserUnmarshal(unsigned long *, unsigned char *, BSTR *)
     * }
     */
    public static FunctionDescriptor BSTR_UserUnmarshal$descriptor() {
        return BSTR_UserUnmarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *BSTR_UserUnmarshal(unsigned long *, unsigned char *, BSTR *)
     * }
     */
    public static MethodHandle BSTR_UserUnmarshal$handle() {
        return BSTR_UserUnmarshal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *BSTR_UserUnmarshal(unsigned long *, unsigned char *, BSTR *)
     * }
     */
    public static MemorySegment BSTR_UserUnmarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = BSTR_UserUnmarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BSTR_UserUnmarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BSTR_UserFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("BSTR_UserFree"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void BSTR_UserFree(unsigned long *, BSTR *)
     * }
     */
    public static FunctionDescriptor BSTR_UserFree$descriptor() {
        return BSTR_UserFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void BSTR_UserFree(unsigned long *, BSTR *)
     * }
     */
    public static MethodHandle BSTR_UserFree$handle() {
        return BSTR_UserFree.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void BSTR_UserFree(unsigned long *, BSTR *)
     * }
     */
    public static void BSTR_UserFree(MemorySegment x0, MemorySegment x1) {
        var mh$ = BSTR_UserFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BSTR_UserFree", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CLEANLOCALSTORAGE_UserSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CLEANLOCALSTORAGE_UserSize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long CLEANLOCALSTORAGE_UserSize(unsigned long *, unsigned long, CLEANLOCALSTORAGE *)
     * }
     */
    public static FunctionDescriptor CLEANLOCALSTORAGE_UserSize$descriptor() {
        return CLEANLOCALSTORAGE_UserSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long CLEANLOCALSTORAGE_UserSize(unsigned long *, unsigned long, CLEANLOCALSTORAGE *)
     * }
     */
    public static MethodHandle CLEANLOCALSTORAGE_UserSize$handle() {
        return CLEANLOCALSTORAGE_UserSize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned long CLEANLOCALSTORAGE_UserSize(unsigned long *, unsigned long, CLEANLOCALSTORAGE *)
     * }
     */
    public static int CLEANLOCALSTORAGE_UserSize(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = CLEANLOCALSTORAGE_UserSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CLEANLOCALSTORAGE_UserSize", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CLEANLOCALSTORAGE_UserMarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CLEANLOCALSTORAGE_UserMarshal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *CLEANLOCALSTORAGE_UserMarshal(unsigned long *, unsigned char *, CLEANLOCALSTORAGE *)
     * }
     */
    public static FunctionDescriptor CLEANLOCALSTORAGE_UserMarshal$descriptor() {
        return CLEANLOCALSTORAGE_UserMarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *CLEANLOCALSTORAGE_UserMarshal(unsigned long *, unsigned char *, CLEANLOCALSTORAGE *)
     * }
     */
    public static MethodHandle CLEANLOCALSTORAGE_UserMarshal$handle() {
        return CLEANLOCALSTORAGE_UserMarshal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *CLEANLOCALSTORAGE_UserMarshal(unsigned long *, unsigned char *, CLEANLOCALSTORAGE *)
     * }
     */
    public static MemorySegment CLEANLOCALSTORAGE_UserMarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = CLEANLOCALSTORAGE_UserMarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CLEANLOCALSTORAGE_UserMarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CLEANLOCALSTORAGE_UserUnmarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CLEANLOCALSTORAGE_UserUnmarshal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *CLEANLOCALSTORAGE_UserUnmarshal(unsigned long *, unsigned char *, CLEANLOCALSTORAGE *)
     * }
     */
    public static FunctionDescriptor CLEANLOCALSTORAGE_UserUnmarshal$descriptor() {
        return CLEANLOCALSTORAGE_UserUnmarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *CLEANLOCALSTORAGE_UserUnmarshal(unsigned long *, unsigned char *, CLEANLOCALSTORAGE *)
     * }
     */
    public static MethodHandle CLEANLOCALSTORAGE_UserUnmarshal$handle() {
        return CLEANLOCALSTORAGE_UserUnmarshal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *CLEANLOCALSTORAGE_UserUnmarshal(unsigned long *, unsigned char *, CLEANLOCALSTORAGE *)
     * }
     */
    public static MemorySegment CLEANLOCALSTORAGE_UserUnmarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = CLEANLOCALSTORAGE_UserUnmarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CLEANLOCALSTORAGE_UserUnmarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CLEANLOCALSTORAGE_UserFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CLEANLOCALSTORAGE_UserFree"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void CLEANLOCALSTORAGE_UserFree(unsigned long *, CLEANLOCALSTORAGE *)
     * }
     */
    public static FunctionDescriptor CLEANLOCALSTORAGE_UserFree$descriptor() {
        return CLEANLOCALSTORAGE_UserFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void CLEANLOCALSTORAGE_UserFree(unsigned long *, CLEANLOCALSTORAGE *)
     * }
     */
    public static MethodHandle CLEANLOCALSTORAGE_UserFree$handle() {
        return CLEANLOCALSTORAGE_UserFree.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void CLEANLOCALSTORAGE_UserFree(unsigned long *, CLEANLOCALSTORAGE *)
     * }
     */
    public static void CLEANLOCALSTORAGE_UserFree(MemorySegment x0, MemorySegment x1) {
        var mh$ = CLEANLOCALSTORAGE_UserFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CLEANLOCALSTORAGE_UserFree", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VARIANT_UserSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VARIANT_UserSize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long VARIANT_UserSize(unsigned long *, unsigned long, VARIANT *)
     * }
     */
    public static FunctionDescriptor VARIANT_UserSize$descriptor() {
        return VARIANT_UserSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long VARIANT_UserSize(unsigned long *, unsigned long, VARIANT *)
     * }
     */
    public static MethodHandle VARIANT_UserSize$handle() {
        return VARIANT_UserSize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned long VARIANT_UserSize(unsigned long *, unsigned long, VARIANT *)
     * }
     */
    public static int VARIANT_UserSize(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = VARIANT_UserSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VARIANT_UserSize", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VARIANT_UserMarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VARIANT_UserMarshal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *VARIANT_UserMarshal(unsigned long *, unsigned char *, VARIANT *)
     * }
     */
    public static FunctionDescriptor VARIANT_UserMarshal$descriptor() {
        return VARIANT_UserMarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *VARIANT_UserMarshal(unsigned long *, unsigned char *, VARIANT *)
     * }
     */
    public static MethodHandle VARIANT_UserMarshal$handle() {
        return VARIANT_UserMarshal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *VARIANT_UserMarshal(unsigned long *, unsigned char *, VARIANT *)
     * }
     */
    public static MemorySegment VARIANT_UserMarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = VARIANT_UserMarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VARIANT_UserMarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VARIANT_UserUnmarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VARIANT_UserUnmarshal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *VARIANT_UserUnmarshal(unsigned long *, unsigned char *, VARIANT *)
     * }
     */
    public static FunctionDescriptor VARIANT_UserUnmarshal$descriptor() {
        return VARIANT_UserUnmarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *VARIANT_UserUnmarshal(unsigned long *, unsigned char *, VARIANT *)
     * }
     */
    public static MethodHandle VARIANT_UserUnmarshal$handle() {
        return VARIANT_UserUnmarshal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *VARIANT_UserUnmarshal(unsigned long *, unsigned char *, VARIANT *)
     * }
     */
    public static MemorySegment VARIANT_UserUnmarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = VARIANT_UserUnmarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VARIANT_UserUnmarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VARIANT_UserFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VARIANT_UserFree"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void VARIANT_UserFree(unsigned long *, VARIANT *)
     * }
     */
    public static FunctionDescriptor VARIANT_UserFree$descriptor() {
        return VARIANT_UserFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void VARIANT_UserFree(unsigned long *, VARIANT *)
     * }
     */
    public static MethodHandle VARIANT_UserFree$handle() {
        return VARIANT_UserFree.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void VARIANT_UserFree(unsigned long *, VARIANT *)
     * }
     */
    public static void VARIANT_UserFree(MemorySegment x0, MemorySegment x1) {
        var mh$ = VARIANT_UserFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VARIANT_UserFree", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BSTR_UserSize64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("BSTR_UserSize64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long BSTR_UserSize64(unsigned long *, unsigned long, BSTR *)
     * }
     */
    public static FunctionDescriptor BSTR_UserSize64$descriptor() {
        return BSTR_UserSize64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long BSTR_UserSize64(unsigned long *, unsigned long, BSTR *)
     * }
     */
    public static MethodHandle BSTR_UserSize64$handle() {
        return BSTR_UserSize64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned long BSTR_UserSize64(unsigned long *, unsigned long, BSTR *)
     * }
     */
    public static int BSTR_UserSize64(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = BSTR_UserSize64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BSTR_UserSize64", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BSTR_UserMarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("BSTR_UserMarshal64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *BSTR_UserMarshal64(unsigned long *, unsigned char *, BSTR *)
     * }
     */
    public static FunctionDescriptor BSTR_UserMarshal64$descriptor() {
        return BSTR_UserMarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *BSTR_UserMarshal64(unsigned long *, unsigned char *, BSTR *)
     * }
     */
    public static MethodHandle BSTR_UserMarshal64$handle() {
        return BSTR_UserMarshal64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *BSTR_UserMarshal64(unsigned long *, unsigned char *, BSTR *)
     * }
     */
    public static MemorySegment BSTR_UserMarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = BSTR_UserMarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BSTR_UserMarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BSTR_UserUnmarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("BSTR_UserUnmarshal64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *BSTR_UserUnmarshal64(unsigned long *, unsigned char *, BSTR *)
     * }
     */
    public static FunctionDescriptor BSTR_UserUnmarshal64$descriptor() {
        return BSTR_UserUnmarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *BSTR_UserUnmarshal64(unsigned long *, unsigned char *, BSTR *)
     * }
     */
    public static MethodHandle BSTR_UserUnmarshal64$handle() {
        return BSTR_UserUnmarshal64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *BSTR_UserUnmarshal64(unsigned long *, unsigned char *, BSTR *)
     * }
     */
    public static MemorySegment BSTR_UserUnmarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = BSTR_UserUnmarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BSTR_UserUnmarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BSTR_UserFree64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("BSTR_UserFree64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void BSTR_UserFree64(unsigned long *, BSTR *)
     * }
     */
    public static FunctionDescriptor BSTR_UserFree64$descriptor() {
        return BSTR_UserFree64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void BSTR_UserFree64(unsigned long *, BSTR *)
     * }
     */
    public static MethodHandle BSTR_UserFree64$handle() {
        return BSTR_UserFree64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void BSTR_UserFree64(unsigned long *, BSTR *)
     * }
     */
    public static void BSTR_UserFree64(MemorySegment x0, MemorySegment x1) {
        var mh$ = BSTR_UserFree64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BSTR_UserFree64", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CLEANLOCALSTORAGE_UserSize64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CLEANLOCALSTORAGE_UserSize64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long CLEANLOCALSTORAGE_UserSize64(unsigned long *, unsigned long, CLEANLOCALSTORAGE *)
     * }
     */
    public static FunctionDescriptor CLEANLOCALSTORAGE_UserSize64$descriptor() {
        return CLEANLOCALSTORAGE_UserSize64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long CLEANLOCALSTORAGE_UserSize64(unsigned long *, unsigned long, CLEANLOCALSTORAGE *)
     * }
     */
    public static MethodHandle CLEANLOCALSTORAGE_UserSize64$handle() {
        return CLEANLOCALSTORAGE_UserSize64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned long CLEANLOCALSTORAGE_UserSize64(unsigned long *, unsigned long, CLEANLOCALSTORAGE *)
     * }
     */
    public static int CLEANLOCALSTORAGE_UserSize64(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = CLEANLOCALSTORAGE_UserSize64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CLEANLOCALSTORAGE_UserSize64", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CLEANLOCALSTORAGE_UserMarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CLEANLOCALSTORAGE_UserMarshal64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *CLEANLOCALSTORAGE_UserMarshal64(unsigned long *, unsigned char *, CLEANLOCALSTORAGE *)
     * }
     */
    public static FunctionDescriptor CLEANLOCALSTORAGE_UserMarshal64$descriptor() {
        return CLEANLOCALSTORAGE_UserMarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *CLEANLOCALSTORAGE_UserMarshal64(unsigned long *, unsigned char *, CLEANLOCALSTORAGE *)
     * }
     */
    public static MethodHandle CLEANLOCALSTORAGE_UserMarshal64$handle() {
        return CLEANLOCALSTORAGE_UserMarshal64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *CLEANLOCALSTORAGE_UserMarshal64(unsigned long *, unsigned char *, CLEANLOCALSTORAGE *)
     * }
     */
    public static MemorySegment CLEANLOCALSTORAGE_UserMarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = CLEANLOCALSTORAGE_UserMarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CLEANLOCALSTORAGE_UserMarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CLEANLOCALSTORAGE_UserUnmarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CLEANLOCALSTORAGE_UserUnmarshal64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *CLEANLOCALSTORAGE_UserUnmarshal64(unsigned long *, unsigned char *, CLEANLOCALSTORAGE *)
     * }
     */
    public static FunctionDescriptor CLEANLOCALSTORAGE_UserUnmarshal64$descriptor() {
        return CLEANLOCALSTORAGE_UserUnmarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *CLEANLOCALSTORAGE_UserUnmarshal64(unsigned long *, unsigned char *, CLEANLOCALSTORAGE *)
     * }
     */
    public static MethodHandle CLEANLOCALSTORAGE_UserUnmarshal64$handle() {
        return CLEANLOCALSTORAGE_UserUnmarshal64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *CLEANLOCALSTORAGE_UserUnmarshal64(unsigned long *, unsigned char *, CLEANLOCALSTORAGE *)
     * }
     */
    public static MemorySegment CLEANLOCALSTORAGE_UserUnmarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = CLEANLOCALSTORAGE_UserUnmarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CLEANLOCALSTORAGE_UserUnmarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CLEANLOCALSTORAGE_UserFree64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CLEANLOCALSTORAGE_UserFree64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void CLEANLOCALSTORAGE_UserFree64(unsigned long *, CLEANLOCALSTORAGE *)
     * }
     */
    public static FunctionDescriptor CLEANLOCALSTORAGE_UserFree64$descriptor() {
        return CLEANLOCALSTORAGE_UserFree64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void CLEANLOCALSTORAGE_UserFree64(unsigned long *, CLEANLOCALSTORAGE *)
     * }
     */
    public static MethodHandle CLEANLOCALSTORAGE_UserFree64$handle() {
        return CLEANLOCALSTORAGE_UserFree64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void CLEANLOCALSTORAGE_UserFree64(unsigned long *, CLEANLOCALSTORAGE *)
     * }
     */
    public static void CLEANLOCALSTORAGE_UserFree64(MemorySegment x0, MemorySegment x1) {
        var mh$ = CLEANLOCALSTORAGE_UserFree64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CLEANLOCALSTORAGE_UserFree64", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VARIANT_UserSize64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VARIANT_UserSize64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long VARIANT_UserSize64(unsigned long *, unsigned long, VARIANT *)
     * }
     */
    public static FunctionDescriptor VARIANT_UserSize64$descriptor() {
        return VARIANT_UserSize64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long VARIANT_UserSize64(unsigned long *, unsigned long, VARIANT *)
     * }
     */
    public static MethodHandle VARIANT_UserSize64$handle() {
        return VARIANT_UserSize64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned long VARIANT_UserSize64(unsigned long *, unsigned long, VARIANT *)
     * }
     */
    public static int VARIANT_UserSize64(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = VARIANT_UserSize64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VARIANT_UserSize64", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VARIANT_UserMarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VARIANT_UserMarshal64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *VARIANT_UserMarshal64(unsigned long *, unsigned char *, VARIANT *)
     * }
     */
    public static FunctionDescriptor VARIANT_UserMarshal64$descriptor() {
        return VARIANT_UserMarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *VARIANT_UserMarshal64(unsigned long *, unsigned char *, VARIANT *)
     * }
     */
    public static MethodHandle VARIANT_UserMarshal64$handle() {
        return VARIANT_UserMarshal64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *VARIANT_UserMarshal64(unsigned long *, unsigned char *, VARIANT *)
     * }
     */
    public static MemorySegment VARIANT_UserMarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = VARIANT_UserMarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VARIANT_UserMarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VARIANT_UserUnmarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VARIANT_UserUnmarshal64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *VARIANT_UserUnmarshal64(unsigned long *, unsigned char *, VARIANT *)
     * }
     */
    public static FunctionDescriptor VARIANT_UserUnmarshal64$descriptor() {
        return VARIANT_UserUnmarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *VARIANT_UserUnmarshal64(unsigned long *, unsigned char *, VARIANT *)
     * }
     */
    public static MethodHandle VARIANT_UserUnmarshal64$handle() {
        return VARIANT_UserUnmarshal64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *VARIANT_UserUnmarshal64(unsigned long *, unsigned char *, VARIANT *)
     * }
     */
    public static MemorySegment VARIANT_UserUnmarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = VARIANT_UserUnmarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VARIANT_UserUnmarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VARIANT_UserFree64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VARIANT_UserFree64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void VARIANT_UserFree64(unsigned long *, VARIANT *)
     * }
     */
    public static FunctionDescriptor VARIANT_UserFree64$descriptor() {
        return VARIANT_UserFree64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void VARIANT_UserFree64(unsigned long *, VARIANT *)
     * }
     */
    public static MethodHandle VARIANT_UserFree64$handle() {
        return VARIANT_UserFree64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void VARIANT_UserFree64(unsigned long *, VARIANT *)
     * }
     */
    public static void VARIANT_UserFree64(MemorySegment x0, MemorySegment x1) {
        var mh$ = VARIANT_UserFree64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VARIANT_UserFree64", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IDispatch_Invoke_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_LONG,
            C_SHORT,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IDispatch_Invoke_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IDispatch_Invoke_Proxy(IDispatch *This, DISPID dispIdMember, const IID *const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr)
     * }
     */
    public static FunctionDescriptor IDispatch_Invoke_Proxy$descriptor() {
        return IDispatch_Invoke_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IDispatch_Invoke_Proxy(IDispatch *This, DISPID dispIdMember, const IID *const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr)
     * }
     */
    public static MethodHandle IDispatch_Invoke_Proxy$handle() {
        return IDispatch_Invoke_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IDispatch_Invoke_Proxy(IDispatch *This, DISPID dispIdMember, const IID *const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr)
     * }
     */
    public static int IDispatch_Invoke_Proxy(MemorySegment This, int dispIdMember, MemorySegment riid, int lcid, short wFlags, MemorySegment pDispParams, MemorySegment pVarResult, MemorySegment pExcepInfo, MemorySegment puArgErr) {
        var mh$ = IDispatch_Invoke_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IDispatch_Invoke_Proxy", This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
            }
            return (int)mh$.invokeExact(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IDispatch_Invoke_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_INT,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IDispatch_Invoke_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IDispatch_Invoke_Stub(IDispatch *This, DISPID dispIdMember, const IID *const riid, LCID lcid, DWORD dwFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *pArgErr, UINT cVarRef, UINT *rgVarRefIdx, VARIANTARG *rgVarRef)
     * }
     */
    public static FunctionDescriptor IDispatch_Invoke_Stub$descriptor() {
        return IDispatch_Invoke_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IDispatch_Invoke_Stub(IDispatch *This, DISPID dispIdMember, const IID *const riid, LCID lcid, DWORD dwFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *pArgErr, UINT cVarRef, UINT *rgVarRefIdx, VARIANTARG *rgVarRef)
     * }
     */
    public static MethodHandle IDispatch_Invoke_Stub$handle() {
        return IDispatch_Invoke_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IDispatch_Invoke_Stub(IDispatch *This, DISPID dispIdMember, const IID *const riid, LCID lcid, DWORD dwFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *pArgErr, UINT cVarRef, UINT *rgVarRefIdx, VARIANTARG *rgVarRef)
     * }
     */
    public static int IDispatch_Invoke_Stub(MemorySegment This, int dispIdMember, MemorySegment riid, int lcid, int dwFlags, MemorySegment pDispParams, MemorySegment pVarResult, MemorySegment pExcepInfo, MemorySegment pArgErr, int cVarRef, MemorySegment rgVarRefIdx, MemorySegment rgVarRef) {
        var mh$ = IDispatch_Invoke_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IDispatch_Invoke_Stub", This, dispIdMember, riid, lcid, dwFlags, pDispParams, pVarResult, pExcepInfo, pArgErr, cVarRef, rgVarRefIdx, rgVarRef);
            }
            return (int)mh$.invokeExact(This, dispIdMember, riid, lcid, dwFlags, pDispParams, pVarResult, pExcepInfo, pArgErr, cVarRef, rgVarRefIdx, rgVarRef);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumVARIANT_Next_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IEnumVARIANT_Next_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumVARIANT_Next_Proxy(IEnumVARIANT *This, ULONG celt, VARIANT *rgVar, ULONG *pCeltFetched)
     * }
     */
    public static FunctionDescriptor IEnumVARIANT_Next_Proxy$descriptor() {
        return IEnumVARIANT_Next_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumVARIANT_Next_Proxy(IEnumVARIANT *This, ULONG celt, VARIANT *rgVar, ULONG *pCeltFetched)
     * }
     */
    public static MethodHandle IEnumVARIANT_Next_Proxy$handle() {
        return IEnumVARIANT_Next_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IEnumVARIANT_Next_Proxy(IEnumVARIANT *This, ULONG celt, VARIANT *rgVar, ULONG *pCeltFetched)
     * }
     */
    public static int IEnumVARIANT_Next_Proxy(MemorySegment This, int celt, MemorySegment rgVar, MemorySegment pCeltFetched) {
        var mh$ = IEnumVARIANT_Next_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumVARIANT_Next_Proxy", This, celt, rgVar, pCeltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgVar, pCeltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumVARIANT_Next_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IEnumVARIANT_Next_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumVARIANT_Next_Stub(IEnumVARIANT *This, ULONG celt, VARIANT *rgVar, ULONG *pCeltFetched)
     * }
     */
    public static FunctionDescriptor IEnumVARIANT_Next_Stub$descriptor() {
        return IEnumVARIANT_Next_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumVARIANT_Next_Stub(IEnumVARIANT *This, ULONG celt, VARIANT *rgVar, ULONG *pCeltFetched)
     * }
     */
    public static MethodHandle IEnumVARIANT_Next_Stub$handle() {
        return IEnumVARIANT_Next_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IEnumVARIANT_Next_Stub(IEnumVARIANT *This, ULONG celt, VARIANT *rgVar, ULONG *pCeltFetched)
     * }
     */
    public static int IEnumVARIANT_Next_Stub(MemorySegment This, int celt, MemorySegment rgVar, MemorySegment pCeltFetched) {
        var mh$ = IEnumVARIANT_Next_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumVARIANT_Next_Stub", This, celt, rgVar, pCeltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgVar, pCeltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeComp_Bind_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_SHORT,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeComp_Bind_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeComp_Bind_Proxy(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, WORD wFlags, ITypeInfo **ppTInfo, DESCKIND *pDescKind, BINDPTR *pBindPtr)
     * }
     */
    public static FunctionDescriptor ITypeComp_Bind_Proxy$descriptor() {
        return ITypeComp_Bind_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeComp_Bind_Proxy(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, WORD wFlags, ITypeInfo **ppTInfo, DESCKIND *pDescKind, BINDPTR *pBindPtr)
     * }
     */
    public static MethodHandle ITypeComp_Bind_Proxy$handle() {
        return ITypeComp_Bind_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeComp_Bind_Proxy(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, WORD wFlags, ITypeInfo **ppTInfo, DESCKIND *pDescKind, BINDPTR *pBindPtr)
     * }
     */
    public static int ITypeComp_Bind_Proxy(MemorySegment This, MemorySegment szName, int lHashVal, short wFlags, MemorySegment ppTInfo, MemorySegment pDescKind, MemorySegment pBindPtr) {
        var mh$ = ITypeComp_Bind_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeComp_Bind_Proxy", This, szName, lHashVal, wFlags, ppTInfo, pDescKind, pBindPtr);
            }
            return (int)mh$.invokeExact(This, szName, lHashVal, wFlags, ppTInfo, pDescKind, pBindPtr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeComp_Bind_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_SHORT,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeComp_Bind_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeComp_Bind_Stub(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, WORD wFlags, ITypeInfo **ppTInfo, DESCKIND *pDescKind, LPFUNCDESC *ppFuncDesc, LPVARDESC *ppVarDesc, ITypeComp **ppTypeComp, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static FunctionDescriptor ITypeComp_Bind_Stub$descriptor() {
        return ITypeComp_Bind_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeComp_Bind_Stub(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, WORD wFlags, ITypeInfo **ppTInfo, DESCKIND *pDescKind, LPFUNCDESC *ppFuncDesc, LPVARDESC *ppVarDesc, ITypeComp **ppTypeComp, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static MethodHandle ITypeComp_Bind_Stub$handle() {
        return ITypeComp_Bind_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeComp_Bind_Stub(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, WORD wFlags, ITypeInfo **ppTInfo, DESCKIND *pDescKind, LPFUNCDESC *ppFuncDesc, LPVARDESC *ppVarDesc, ITypeComp **ppTypeComp, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static int ITypeComp_Bind_Stub(MemorySegment This, MemorySegment szName, int lHashVal, short wFlags, MemorySegment ppTInfo, MemorySegment pDescKind, MemorySegment ppFuncDesc, MemorySegment ppVarDesc, MemorySegment ppTypeComp, MemorySegment pDummy) {
        var mh$ = ITypeComp_Bind_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeComp_Bind_Stub", This, szName, lHashVal, wFlags, ppTInfo, pDescKind, ppFuncDesc, ppVarDesc, ppTypeComp, pDummy);
            }
            return (int)mh$.invokeExact(This, szName, lHashVal, wFlags, ppTInfo, pDescKind, ppFuncDesc, ppVarDesc, ppTypeComp, pDummy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeComp_BindType_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeComp_BindType_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeComp_BindType_Proxy(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, ITypeInfo **ppTInfo, ITypeComp **ppTComp)
     * }
     */
    public static FunctionDescriptor ITypeComp_BindType_Proxy$descriptor() {
        return ITypeComp_BindType_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeComp_BindType_Proxy(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, ITypeInfo **ppTInfo, ITypeComp **ppTComp)
     * }
     */
    public static MethodHandle ITypeComp_BindType_Proxy$handle() {
        return ITypeComp_BindType_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeComp_BindType_Proxy(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, ITypeInfo **ppTInfo, ITypeComp **ppTComp)
     * }
     */
    public static int ITypeComp_BindType_Proxy(MemorySegment This, MemorySegment szName, int lHashVal, MemorySegment ppTInfo, MemorySegment ppTComp) {
        var mh$ = ITypeComp_BindType_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeComp_BindType_Proxy", This, szName, lHashVal, ppTInfo, ppTComp);
            }
            return (int)mh$.invokeExact(This, szName, lHashVal, ppTInfo, ppTComp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeComp_BindType_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeComp_BindType_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeComp_BindType_Stub(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, ITypeInfo **ppTInfo)
     * }
     */
    public static FunctionDescriptor ITypeComp_BindType_Stub$descriptor() {
        return ITypeComp_BindType_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeComp_BindType_Stub(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, ITypeInfo **ppTInfo)
     * }
     */
    public static MethodHandle ITypeComp_BindType_Stub$handle() {
        return ITypeComp_BindType_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeComp_BindType_Stub(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, ITypeInfo **ppTInfo)
     * }
     */
    public static int ITypeComp_BindType_Stub(MemorySegment This, MemorySegment szName, int lHashVal, MemorySegment ppTInfo) {
        var mh$ = ITypeComp_BindType_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeComp_BindType_Stub", This, szName, lHashVal, ppTInfo);
            }
            return (int)mh$.invokeExact(This, szName, lHashVal, ppTInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_GetTypeAttr_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeInfo_GetTypeAttr_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetTypeAttr_Proxy(ITypeInfo *This, TYPEATTR **ppTypeAttr)
     * }
     */
    public static FunctionDescriptor ITypeInfo_GetTypeAttr_Proxy$descriptor() {
        return ITypeInfo_GetTypeAttr_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetTypeAttr_Proxy(ITypeInfo *This, TYPEATTR **ppTypeAttr)
     * }
     */
    public static MethodHandle ITypeInfo_GetTypeAttr_Proxy$handle() {
        return ITypeInfo_GetTypeAttr_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetTypeAttr_Proxy(ITypeInfo *This, TYPEATTR **ppTypeAttr)
     * }
     */
    public static int ITypeInfo_GetTypeAttr_Proxy(MemorySegment This, MemorySegment ppTypeAttr) {
        var mh$ = ITypeInfo_GetTypeAttr_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_GetTypeAttr_Proxy", This, ppTypeAttr);
            }
            return (int)mh$.invokeExact(This, ppTypeAttr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_GetTypeAttr_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeInfo_GetTypeAttr_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetTypeAttr_Stub(ITypeInfo *This, LPTYPEATTR *ppTypeAttr, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static FunctionDescriptor ITypeInfo_GetTypeAttr_Stub$descriptor() {
        return ITypeInfo_GetTypeAttr_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetTypeAttr_Stub(ITypeInfo *This, LPTYPEATTR *ppTypeAttr, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static MethodHandle ITypeInfo_GetTypeAttr_Stub$handle() {
        return ITypeInfo_GetTypeAttr_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetTypeAttr_Stub(ITypeInfo *This, LPTYPEATTR *ppTypeAttr, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static int ITypeInfo_GetTypeAttr_Stub(MemorySegment This, MemorySegment ppTypeAttr, MemorySegment pDummy) {
        var mh$ = ITypeInfo_GetTypeAttr_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_GetTypeAttr_Stub", This, ppTypeAttr, pDummy);
            }
            return (int)mh$.invokeExact(This, ppTypeAttr, pDummy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_GetFuncDesc_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeInfo_GetFuncDesc_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetFuncDesc_Proxy(ITypeInfo *This, UINT index, FUNCDESC **ppFuncDesc)
     * }
     */
    public static FunctionDescriptor ITypeInfo_GetFuncDesc_Proxy$descriptor() {
        return ITypeInfo_GetFuncDesc_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetFuncDesc_Proxy(ITypeInfo *This, UINT index, FUNCDESC **ppFuncDesc)
     * }
     */
    public static MethodHandle ITypeInfo_GetFuncDesc_Proxy$handle() {
        return ITypeInfo_GetFuncDesc_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetFuncDesc_Proxy(ITypeInfo *This, UINT index, FUNCDESC **ppFuncDesc)
     * }
     */
    public static int ITypeInfo_GetFuncDesc_Proxy(MemorySegment This, int index, MemorySegment ppFuncDesc) {
        var mh$ = ITypeInfo_GetFuncDesc_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_GetFuncDesc_Proxy", This, index, ppFuncDesc);
            }
            return (int)mh$.invokeExact(This, index, ppFuncDesc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_GetFuncDesc_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_INT,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeInfo_GetFuncDesc_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetFuncDesc_Stub(ITypeInfo *This, UINT index, LPFUNCDESC *ppFuncDesc, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static FunctionDescriptor ITypeInfo_GetFuncDesc_Stub$descriptor() {
        return ITypeInfo_GetFuncDesc_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetFuncDesc_Stub(ITypeInfo *This, UINT index, LPFUNCDESC *ppFuncDesc, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static MethodHandle ITypeInfo_GetFuncDesc_Stub$handle() {
        return ITypeInfo_GetFuncDesc_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetFuncDesc_Stub(ITypeInfo *This, UINT index, LPFUNCDESC *ppFuncDesc, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static int ITypeInfo_GetFuncDesc_Stub(MemorySegment This, int index, MemorySegment ppFuncDesc, MemorySegment pDummy) {
        var mh$ = ITypeInfo_GetFuncDesc_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_GetFuncDesc_Stub", This, index, ppFuncDesc, pDummy);
            }
            return (int)mh$.invokeExact(This, index, ppFuncDesc, pDummy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_GetVarDesc_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeInfo_GetVarDesc_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetVarDesc_Proxy(ITypeInfo *This, UINT index, VARDESC **ppVarDesc)
     * }
     */
    public static FunctionDescriptor ITypeInfo_GetVarDesc_Proxy$descriptor() {
        return ITypeInfo_GetVarDesc_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetVarDesc_Proxy(ITypeInfo *This, UINT index, VARDESC **ppVarDesc)
     * }
     */
    public static MethodHandle ITypeInfo_GetVarDesc_Proxy$handle() {
        return ITypeInfo_GetVarDesc_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetVarDesc_Proxy(ITypeInfo *This, UINT index, VARDESC **ppVarDesc)
     * }
     */
    public static int ITypeInfo_GetVarDesc_Proxy(MemorySegment This, int index, MemorySegment ppVarDesc) {
        var mh$ = ITypeInfo_GetVarDesc_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_GetVarDesc_Proxy", This, index, ppVarDesc);
            }
            return (int)mh$.invokeExact(This, index, ppVarDesc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_GetVarDesc_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_INT,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeInfo_GetVarDesc_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetVarDesc_Stub(ITypeInfo *This, UINT index, LPVARDESC *ppVarDesc, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static FunctionDescriptor ITypeInfo_GetVarDesc_Stub$descriptor() {
        return ITypeInfo_GetVarDesc_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetVarDesc_Stub(ITypeInfo *This, UINT index, LPVARDESC *ppVarDesc, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static MethodHandle ITypeInfo_GetVarDesc_Stub$handle() {
        return ITypeInfo_GetVarDesc_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetVarDesc_Stub(ITypeInfo *This, UINT index, LPVARDESC *ppVarDesc, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static int ITypeInfo_GetVarDesc_Stub(MemorySegment This, int index, MemorySegment ppVarDesc, MemorySegment pDummy) {
        var mh$ = ITypeInfo_GetVarDesc_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_GetVarDesc_Stub", This, index, ppVarDesc, pDummy);
            }
            return (int)mh$.invokeExact(This, index, ppVarDesc, pDummy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_GetNames_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeInfo_GetNames_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetNames_Proxy(ITypeInfo *This, MEMBERID memid, BSTR *rgBstrNames, UINT cMaxNames, UINT *pcNames)
     * }
     */
    public static FunctionDescriptor ITypeInfo_GetNames_Proxy$descriptor() {
        return ITypeInfo_GetNames_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetNames_Proxy(ITypeInfo *This, MEMBERID memid, BSTR *rgBstrNames, UINT cMaxNames, UINT *pcNames)
     * }
     */
    public static MethodHandle ITypeInfo_GetNames_Proxy$handle() {
        return ITypeInfo_GetNames_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetNames_Proxy(ITypeInfo *This, MEMBERID memid, BSTR *rgBstrNames, UINT cMaxNames, UINT *pcNames)
     * }
     */
    public static int ITypeInfo_GetNames_Proxy(MemorySegment This, int memid, MemorySegment rgBstrNames, int cMaxNames, MemorySegment pcNames) {
        var mh$ = ITypeInfo_GetNames_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_GetNames_Proxy", This, memid, rgBstrNames, cMaxNames, pcNames);
            }
            return (int)mh$.invokeExact(This, memid, rgBstrNames, cMaxNames, pcNames);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_GetNames_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeInfo_GetNames_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetNames_Stub(ITypeInfo *This, MEMBERID memid, BSTR *rgBstrNames, UINT cMaxNames, UINT *pcNames)
     * }
     */
    public static FunctionDescriptor ITypeInfo_GetNames_Stub$descriptor() {
        return ITypeInfo_GetNames_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetNames_Stub(ITypeInfo *This, MEMBERID memid, BSTR *rgBstrNames, UINT cMaxNames, UINT *pcNames)
     * }
     */
    public static MethodHandle ITypeInfo_GetNames_Stub$handle() {
        return ITypeInfo_GetNames_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetNames_Stub(ITypeInfo *This, MEMBERID memid, BSTR *rgBstrNames, UINT cMaxNames, UINT *pcNames)
     * }
     */
    public static int ITypeInfo_GetNames_Stub(MemorySegment This, int memid, MemorySegment rgBstrNames, int cMaxNames, MemorySegment pcNames) {
        var mh$ = ITypeInfo_GetNames_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_GetNames_Stub", This, memid, rgBstrNames, cMaxNames, pcNames);
            }
            return (int)mh$.invokeExact(This, memid, rgBstrNames, cMaxNames, pcNames);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_GetIDsOfNames_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeInfo_GetIDsOfNames_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetIDsOfNames_Proxy(ITypeInfo *This, LPOLESTR *rgszNames, UINT cNames, MEMBERID *pMemId)
     * }
     */
    public static FunctionDescriptor ITypeInfo_GetIDsOfNames_Proxy$descriptor() {
        return ITypeInfo_GetIDsOfNames_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetIDsOfNames_Proxy(ITypeInfo *This, LPOLESTR *rgszNames, UINT cNames, MEMBERID *pMemId)
     * }
     */
    public static MethodHandle ITypeInfo_GetIDsOfNames_Proxy$handle() {
        return ITypeInfo_GetIDsOfNames_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetIDsOfNames_Proxy(ITypeInfo *This, LPOLESTR *rgszNames, UINT cNames, MEMBERID *pMemId)
     * }
     */
    public static int ITypeInfo_GetIDsOfNames_Proxy(MemorySegment This, MemorySegment rgszNames, int cNames, MemorySegment pMemId) {
        var mh$ = ITypeInfo_GetIDsOfNames_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_GetIDsOfNames_Proxy", This, rgszNames, cNames, pMemId);
            }
            return (int)mh$.invokeExact(This, rgszNames, cNames, pMemId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_GetIDsOfNames_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeInfo_GetIDsOfNames_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetIDsOfNames_Stub(ITypeInfo *This)
     * }
     */
    public static FunctionDescriptor ITypeInfo_GetIDsOfNames_Stub$descriptor() {
        return ITypeInfo_GetIDsOfNames_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetIDsOfNames_Stub(ITypeInfo *This)
     * }
     */
    public static MethodHandle ITypeInfo_GetIDsOfNames_Stub$handle() {
        return ITypeInfo_GetIDsOfNames_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetIDsOfNames_Stub(ITypeInfo *This)
     * }
     */
    public static int ITypeInfo_GetIDsOfNames_Stub(MemorySegment This) {
        var mh$ = ITypeInfo_GetIDsOfNames_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_GetIDsOfNames_Stub", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_Invoke_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_SHORT,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeInfo_Invoke_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_Invoke_Proxy(ITypeInfo *This, PVOID pvInstance, MEMBERID memid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr)
     * }
     */
    public static FunctionDescriptor ITypeInfo_Invoke_Proxy$descriptor() {
        return ITypeInfo_Invoke_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_Invoke_Proxy(ITypeInfo *This, PVOID pvInstance, MEMBERID memid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr)
     * }
     */
    public static MethodHandle ITypeInfo_Invoke_Proxy$handle() {
        return ITypeInfo_Invoke_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_Invoke_Proxy(ITypeInfo *This, PVOID pvInstance, MEMBERID memid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr)
     * }
     */
    public static int ITypeInfo_Invoke_Proxy(MemorySegment This, MemorySegment pvInstance, int memid, short wFlags, MemorySegment pDispParams, MemorySegment pVarResult, MemorySegment pExcepInfo, MemorySegment puArgErr) {
        var mh$ = ITypeInfo_Invoke_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_Invoke_Proxy", This, pvInstance, memid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
            }
            return (int)mh$.invokeExact(This, pvInstance, memid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_Invoke_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeInfo_Invoke_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_Invoke_Stub(ITypeInfo *This)
     * }
     */
    public static FunctionDescriptor ITypeInfo_Invoke_Stub$descriptor() {
        return ITypeInfo_Invoke_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_Invoke_Stub(ITypeInfo *This)
     * }
     */
    public static MethodHandle ITypeInfo_Invoke_Stub$handle() {
        return ITypeInfo_Invoke_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_Invoke_Stub(ITypeInfo *This)
     * }
     */
    public static int ITypeInfo_Invoke_Stub(MemorySegment This) {
        var mh$ = ITypeInfo_Invoke_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_Invoke_Stub", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_GetDocumentation_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeInfo_GetDocumentation_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetDocumentation_Proxy(ITypeInfo *This, MEMBERID memid, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile)
     * }
     */
    public static FunctionDescriptor ITypeInfo_GetDocumentation_Proxy$descriptor() {
        return ITypeInfo_GetDocumentation_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetDocumentation_Proxy(ITypeInfo *This, MEMBERID memid, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile)
     * }
     */
    public static MethodHandle ITypeInfo_GetDocumentation_Proxy$handle() {
        return ITypeInfo_GetDocumentation_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetDocumentation_Proxy(ITypeInfo *This, MEMBERID memid, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile)
     * }
     */
    public static int ITypeInfo_GetDocumentation_Proxy(MemorySegment This, int memid, MemorySegment pBstrName, MemorySegment pBstrDocString, MemorySegment pdwHelpContext, MemorySegment pBstrHelpFile) {
        var mh$ = ITypeInfo_GetDocumentation_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_GetDocumentation_Proxy", This, memid, pBstrName, pBstrDocString, pdwHelpContext, pBstrHelpFile);
            }
            return (int)mh$.invokeExact(This, memid, pBstrName, pBstrDocString, pdwHelpContext, pBstrHelpFile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_GetDocumentation_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeInfo_GetDocumentation_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetDocumentation_Stub(ITypeInfo *This, MEMBERID memid, DWORD refPtrFlags, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile)
     * }
     */
    public static FunctionDescriptor ITypeInfo_GetDocumentation_Stub$descriptor() {
        return ITypeInfo_GetDocumentation_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetDocumentation_Stub(ITypeInfo *This, MEMBERID memid, DWORD refPtrFlags, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile)
     * }
     */
    public static MethodHandle ITypeInfo_GetDocumentation_Stub$handle() {
        return ITypeInfo_GetDocumentation_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetDocumentation_Stub(ITypeInfo *This, MEMBERID memid, DWORD refPtrFlags, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile)
     * }
     */
    public static int ITypeInfo_GetDocumentation_Stub(MemorySegment This, int memid, int refPtrFlags, MemorySegment pBstrName, MemorySegment pBstrDocString, MemorySegment pdwHelpContext, MemorySegment pBstrHelpFile) {
        var mh$ = ITypeInfo_GetDocumentation_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_GetDocumentation_Stub", This, memid, refPtrFlags, pBstrName, pBstrDocString, pdwHelpContext, pBstrHelpFile);
            }
            return (int)mh$.invokeExact(This, memid, refPtrFlags, pBstrName, pBstrDocString, pdwHelpContext, pBstrHelpFile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_GetDllEntry_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_INT,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeInfo_GetDllEntry_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetDllEntry_Proxy(ITypeInfo *This, MEMBERID memid, INVOKEKIND invKind, BSTR *pBstrDllName, BSTR *pBstrName, WORD *pwOrdinal)
     * }
     */
    public static FunctionDescriptor ITypeInfo_GetDllEntry_Proxy$descriptor() {
        return ITypeInfo_GetDllEntry_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetDllEntry_Proxy(ITypeInfo *This, MEMBERID memid, INVOKEKIND invKind, BSTR *pBstrDllName, BSTR *pBstrName, WORD *pwOrdinal)
     * }
     */
    public static MethodHandle ITypeInfo_GetDllEntry_Proxy$handle() {
        return ITypeInfo_GetDllEntry_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetDllEntry_Proxy(ITypeInfo *This, MEMBERID memid, INVOKEKIND invKind, BSTR *pBstrDllName, BSTR *pBstrName, WORD *pwOrdinal)
     * }
     */
    public static int ITypeInfo_GetDllEntry_Proxy(MemorySegment This, int memid, int invKind, MemorySegment pBstrDllName, MemorySegment pBstrName, MemorySegment pwOrdinal) {
        var mh$ = ITypeInfo_GetDllEntry_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_GetDllEntry_Proxy", This, memid, invKind, pBstrDllName, pBstrName, pwOrdinal);
            }
            return (int)mh$.invokeExact(This, memid, invKind, pBstrDllName, pBstrName, pwOrdinal);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_GetDllEntry_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_INT,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeInfo_GetDllEntry_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetDllEntry_Stub(ITypeInfo *This, MEMBERID memid, INVOKEKIND invKind, DWORD refPtrFlags, BSTR *pBstrDllName, BSTR *pBstrName, WORD *pwOrdinal)
     * }
     */
    public static FunctionDescriptor ITypeInfo_GetDllEntry_Stub$descriptor() {
        return ITypeInfo_GetDllEntry_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetDllEntry_Stub(ITypeInfo *This, MEMBERID memid, INVOKEKIND invKind, DWORD refPtrFlags, BSTR *pBstrDllName, BSTR *pBstrName, WORD *pwOrdinal)
     * }
     */
    public static MethodHandle ITypeInfo_GetDllEntry_Stub$handle() {
        return ITypeInfo_GetDllEntry_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetDllEntry_Stub(ITypeInfo *This, MEMBERID memid, INVOKEKIND invKind, DWORD refPtrFlags, BSTR *pBstrDllName, BSTR *pBstrName, WORD *pwOrdinal)
     * }
     */
    public static int ITypeInfo_GetDllEntry_Stub(MemorySegment This, int memid, int invKind, int refPtrFlags, MemorySegment pBstrDllName, MemorySegment pBstrName, MemorySegment pwOrdinal) {
        var mh$ = ITypeInfo_GetDllEntry_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_GetDllEntry_Stub", This, memid, invKind, refPtrFlags, pBstrDllName, pBstrName, pwOrdinal);
            }
            return (int)mh$.invokeExact(This, memid, invKind, refPtrFlags, pBstrDllName, pBstrName, pwOrdinal);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_AddressOfMember_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeInfo_AddressOfMember_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_AddressOfMember_Proxy(ITypeInfo *This, MEMBERID memid, INVOKEKIND invKind, PVOID *ppv)
     * }
     */
    public static FunctionDescriptor ITypeInfo_AddressOfMember_Proxy$descriptor() {
        return ITypeInfo_AddressOfMember_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_AddressOfMember_Proxy(ITypeInfo *This, MEMBERID memid, INVOKEKIND invKind, PVOID *ppv)
     * }
     */
    public static MethodHandle ITypeInfo_AddressOfMember_Proxy$handle() {
        return ITypeInfo_AddressOfMember_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_AddressOfMember_Proxy(ITypeInfo *This, MEMBERID memid, INVOKEKIND invKind, PVOID *ppv)
     * }
     */
    public static int ITypeInfo_AddressOfMember_Proxy(MemorySegment This, int memid, int invKind, MemorySegment ppv) {
        var mh$ = ITypeInfo_AddressOfMember_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_AddressOfMember_Proxy", This, memid, invKind, ppv);
            }
            return (int)mh$.invokeExact(This, memid, invKind, ppv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_AddressOfMember_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeInfo_AddressOfMember_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_AddressOfMember_Stub(ITypeInfo *This)
     * }
     */
    public static FunctionDescriptor ITypeInfo_AddressOfMember_Stub$descriptor() {
        return ITypeInfo_AddressOfMember_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_AddressOfMember_Stub(ITypeInfo *This)
     * }
     */
    public static MethodHandle ITypeInfo_AddressOfMember_Stub$handle() {
        return ITypeInfo_AddressOfMember_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_AddressOfMember_Stub(ITypeInfo *This)
     * }
     */
    public static int ITypeInfo_AddressOfMember_Stub(MemorySegment This) {
        var mh$ = ITypeInfo_AddressOfMember_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_AddressOfMember_Stub", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_CreateInstance_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeInfo_CreateInstance_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_CreateInstance_Proxy(ITypeInfo *This, IUnknown *pUnkOuter, const IID *const riid, PVOID *ppvObj)
     * }
     */
    public static FunctionDescriptor ITypeInfo_CreateInstance_Proxy$descriptor() {
        return ITypeInfo_CreateInstance_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_CreateInstance_Proxy(ITypeInfo *This, IUnknown *pUnkOuter, const IID *const riid, PVOID *ppvObj)
     * }
     */
    public static MethodHandle ITypeInfo_CreateInstance_Proxy$handle() {
        return ITypeInfo_CreateInstance_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_CreateInstance_Proxy(ITypeInfo *This, IUnknown *pUnkOuter, const IID *const riid, PVOID *ppvObj)
     * }
     */
    public static int ITypeInfo_CreateInstance_Proxy(MemorySegment This, MemorySegment pUnkOuter, MemorySegment riid, MemorySegment ppvObj) {
        var mh$ = ITypeInfo_CreateInstance_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_CreateInstance_Proxy", This, pUnkOuter, riid, ppvObj);
            }
            return (int)mh$.invokeExact(This, pUnkOuter, riid, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_CreateInstance_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeInfo_CreateInstance_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_CreateInstance_Stub(ITypeInfo *This, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static FunctionDescriptor ITypeInfo_CreateInstance_Stub$descriptor() {
        return ITypeInfo_CreateInstance_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_CreateInstance_Stub(ITypeInfo *This, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static MethodHandle ITypeInfo_CreateInstance_Stub$handle() {
        return ITypeInfo_CreateInstance_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_CreateInstance_Stub(ITypeInfo *This, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static int ITypeInfo_CreateInstance_Stub(MemorySegment This, MemorySegment riid, MemorySegment ppvObj) {
        var mh$ = ITypeInfo_CreateInstance_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_CreateInstance_Stub", This, riid, ppvObj);
            }
            return (int)mh$.invokeExact(This, riid, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_GetContainingTypeLib_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeInfo_GetContainingTypeLib_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetContainingTypeLib_Proxy(ITypeInfo *This, ITypeLib **ppTLib, UINT *pIndex)
     * }
     */
    public static FunctionDescriptor ITypeInfo_GetContainingTypeLib_Proxy$descriptor() {
        return ITypeInfo_GetContainingTypeLib_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetContainingTypeLib_Proxy(ITypeInfo *This, ITypeLib **ppTLib, UINT *pIndex)
     * }
     */
    public static MethodHandle ITypeInfo_GetContainingTypeLib_Proxy$handle() {
        return ITypeInfo_GetContainingTypeLib_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetContainingTypeLib_Proxy(ITypeInfo *This, ITypeLib **ppTLib, UINT *pIndex)
     * }
     */
    public static int ITypeInfo_GetContainingTypeLib_Proxy(MemorySegment This, MemorySegment ppTLib, MemorySegment pIndex) {
        var mh$ = ITypeInfo_GetContainingTypeLib_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_GetContainingTypeLib_Proxy", This, ppTLib, pIndex);
            }
            return (int)mh$.invokeExact(This, ppTLib, pIndex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_GetContainingTypeLib_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeInfo_GetContainingTypeLib_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetContainingTypeLib_Stub(ITypeInfo *This, ITypeLib **ppTLib, UINT *pIndex)
     * }
     */
    public static FunctionDescriptor ITypeInfo_GetContainingTypeLib_Stub$descriptor() {
        return ITypeInfo_GetContainingTypeLib_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetContainingTypeLib_Stub(ITypeInfo *This, ITypeLib **ppTLib, UINT *pIndex)
     * }
     */
    public static MethodHandle ITypeInfo_GetContainingTypeLib_Stub$handle() {
        return ITypeInfo_GetContainingTypeLib_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetContainingTypeLib_Stub(ITypeInfo *This, ITypeLib **ppTLib, UINT *pIndex)
     * }
     */
    public static int ITypeInfo_GetContainingTypeLib_Stub(MemorySegment This, MemorySegment ppTLib, MemorySegment pIndex) {
        var mh$ = ITypeInfo_GetContainingTypeLib_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_GetContainingTypeLib_Stub", This, ppTLib, pIndex);
            }
            return (int)mh$.invokeExact(This, ppTLib, pIndex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_ReleaseTypeAttr_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeInfo_ReleaseTypeAttr_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITypeInfo_ReleaseTypeAttr_Proxy(ITypeInfo *This, TYPEATTR *pTypeAttr)
     * }
     */
    public static FunctionDescriptor ITypeInfo_ReleaseTypeAttr_Proxy$descriptor() {
        return ITypeInfo_ReleaseTypeAttr_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITypeInfo_ReleaseTypeAttr_Proxy(ITypeInfo *This, TYPEATTR *pTypeAttr)
     * }
     */
    public static MethodHandle ITypeInfo_ReleaseTypeAttr_Proxy$handle() {
        return ITypeInfo_ReleaseTypeAttr_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void ITypeInfo_ReleaseTypeAttr_Proxy(ITypeInfo *This, TYPEATTR *pTypeAttr)
     * }
     */
    public static void ITypeInfo_ReleaseTypeAttr_Proxy(MemorySegment This, MemorySegment pTypeAttr) {
        var mh$ = ITypeInfo_ReleaseTypeAttr_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_ReleaseTypeAttr_Proxy", This, pTypeAttr);
            }
            mh$.invokeExact(This, pTypeAttr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_ReleaseTypeAttr_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeInfo_ReleaseTypeAttr_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_ReleaseTypeAttr_Stub(ITypeInfo *This)
     * }
     */
    public static FunctionDescriptor ITypeInfo_ReleaseTypeAttr_Stub$descriptor() {
        return ITypeInfo_ReleaseTypeAttr_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_ReleaseTypeAttr_Stub(ITypeInfo *This)
     * }
     */
    public static MethodHandle ITypeInfo_ReleaseTypeAttr_Stub$handle() {
        return ITypeInfo_ReleaseTypeAttr_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_ReleaseTypeAttr_Stub(ITypeInfo *This)
     * }
     */
    public static int ITypeInfo_ReleaseTypeAttr_Stub(MemorySegment This) {
        var mh$ = ITypeInfo_ReleaseTypeAttr_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_ReleaseTypeAttr_Stub", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_ReleaseFuncDesc_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeInfo_ReleaseFuncDesc_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITypeInfo_ReleaseFuncDesc_Proxy(ITypeInfo *This, FUNCDESC *pFuncDesc)
     * }
     */
    public static FunctionDescriptor ITypeInfo_ReleaseFuncDesc_Proxy$descriptor() {
        return ITypeInfo_ReleaseFuncDesc_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITypeInfo_ReleaseFuncDesc_Proxy(ITypeInfo *This, FUNCDESC *pFuncDesc)
     * }
     */
    public static MethodHandle ITypeInfo_ReleaseFuncDesc_Proxy$handle() {
        return ITypeInfo_ReleaseFuncDesc_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void ITypeInfo_ReleaseFuncDesc_Proxy(ITypeInfo *This, FUNCDESC *pFuncDesc)
     * }
     */
    public static void ITypeInfo_ReleaseFuncDesc_Proxy(MemorySegment This, MemorySegment pFuncDesc) {
        var mh$ = ITypeInfo_ReleaseFuncDesc_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_ReleaseFuncDesc_Proxy", This, pFuncDesc);
            }
            mh$.invokeExact(This, pFuncDesc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_ReleaseFuncDesc_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeInfo_ReleaseFuncDesc_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_ReleaseFuncDesc_Stub(ITypeInfo *This)
     * }
     */
    public static FunctionDescriptor ITypeInfo_ReleaseFuncDesc_Stub$descriptor() {
        return ITypeInfo_ReleaseFuncDesc_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_ReleaseFuncDesc_Stub(ITypeInfo *This)
     * }
     */
    public static MethodHandle ITypeInfo_ReleaseFuncDesc_Stub$handle() {
        return ITypeInfo_ReleaseFuncDesc_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_ReleaseFuncDesc_Stub(ITypeInfo *This)
     * }
     */
    public static int ITypeInfo_ReleaseFuncDesc_Stub(MemorySegment This) {
        var mh$ = ITypeInfo_ReleaseFuncDesc_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_ReleaseFuncDesc_Stub", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_ReleaseVarDesc_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeInfo_ReleaseVarDesc_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITypeInfo_ReleaseVarDesc_Proxy(ITypeInfo *This, VARDESC *pVarDesc)
     * }
     */
    public static FunctionDescriptor ITypeInfo_ReleaseVarDesc_Proxy$descriptor() {
        return ITypeInfo_ReleaseVarDesc_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITypeInfo_ReleaseVarDesc_Proxy(ITypeInfo *This, VARDESC *pVarDesc)
     * }
     */
    public static MethodHandle ITypeInfo_ReleaseVarDesc_Proxy$handle() {
        return ITypeInfo_ReleaseVarDesc_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void ITypeInfo_ReleaseVarDesc_Proxy(ITypeInfo *This, VARDESC *pVarDesc)
     * }
     */
    public static void ITypeInfo_ReleaseVarDesc_Proxy(MemorySegment This, MemorySegment pVarDesc) {
        var mh$ = ITypeInfo_ReleaseVarDesc_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_ReleaseVarDesc_Proxy", This, pVarDesc);
            }
            mh$.invokeExact(This, pVarDesc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_ReleaseVarDesc_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeInfo_ReleaseVarDesc_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_ReleaseVarDesc_Stub(ITypeInfo *This)
     * }
     */
    public static FunctionDescriptor ITypeInfo_ReleaseVarDesc_Stub$descriptor() {
        return ITypeInfo_ReleaseVarDesc_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_ReleaseVarDesc_Stub(ITypeInfo *This)
     * }
     */
    public static MethodHandle ITypeInfo_ReleaseVarDesc_Stub$handle() {
        return ITypeInfo_ReleaseVarDesc_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_ReleaseVarDesc_Stub(ITypeInfo *This)
     * }
     */
    public static int ITypeInfo_ReleaseVarDesc_Stub(MemorySegment This) {
        var mh$ = ITypeInfo_ReleaseVarDesc_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_ReleaseVarDesc_Stub", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo2_GetDocumentation2_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeInfo2_GetDocumentation2_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo2_GetDocumentation2_Proxy(ITypeInfo2 *This, MEMBERID memid, LCID lcid, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll)
     * }
     */
    public static FunctionDescriptor ITypeInfo2_GetDocumentation2_Proxy$descriptor() {
        return ITypeInfo2_GetDocumentation2_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo2_GetDocumentation2_Proxy(ITypeInfo2 *This, MEMBERID memid, LCID lcid, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll)
     * }
     */
    public static MethodHandle ITypeInfo2_GetDocumentation2_Proxy$handle() {
        return ITypeInfo2_GetDocumentation2_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo2_GetDocumentation2_Proxy(ITypeInfo2 *This, MEMBERID memid, LCID lcid, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll)
     * }
     */
    public static int ITypeInfo2_GetDocumentation2_Proxy(MemorySegment This, int memid, int lcid, MemorySegment pbstrHelpString, MemorySegment pdwHelpStringContext, MemorySegment pbstrHelpStringDll) {
        var mh$ = ITypeInfo2_GetDocumentation2_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo2_GetDocumentation2_Proxy", This, memid, lcid, pbstrHelpString, pdwHelpStringContext, pbstrHelpStringDll);
            }
            return (int)mh$.invokeExact(This, memid, lcid, pbstrHelpString, pdwHelpStringContext, pbstrHelpStringDll);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo2_GetDocumentation2_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeInfo2_GetDocumentation2_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo2_GetDocumentation2_Stub(ITypeInfo2 *This, MEMBERID memid, LCID lcid, DWORD refPtrFlags, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll)
     * }
     */
    public static FunctionDescriptor ITypeInfo2_GetDocumentation2_Stub$descriptor() {
        return ITypeInfo2_GetDocumentation2_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo2_GetDocumentation2_Stub(ITypeInfo2 *This, MEMBERID memid, LCID lcid, DWORD refPtrFlags, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll)
     * }
     */
    public static MethodHandle ITypeInfo2_GetDocumentation2_Stub$handle() {
        return ITypeInfo2_GetDocumentation2_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo2_GetDocumentation2_Stub(ITypeInfo2 *This, MEMBERID memid, LCID lcid, DWORD refPtrFlags, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll)
     * }
     */
    public static int ITypeInfo2_GetDocumentation2_Stub(MemorySegment This, int memid, int lcid, int refPtrFlags, MemorySegment pbstrHelpString, MemorySegment pdwHelpStringContext, MemorySegment pbstrHelpStringDll) {
        var mh$ = ITypeInfo2_GetDocumentation2_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo2_GetDocumentation2_Stub", This, memid, lcid, refPtrFlags, pbstrHelpString, pdwHelpStringContext, pbstrHelpStringDll);
            }
            return (int)mh$.invokeExact(This, memid, lcid, refPtrFlags, pbstrHelpString, pdwHelpStringContext, pbstrHelpStringDll);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeLib_GetTypeInfoCount_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeLib_GetTypeInfoCount_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UINT ITypeLib_GetTypeInfoCount_Proxy(ITypeLib *This)
     * }
     */
    public static FunctionDescriptor ITypeLib_GetTypeInfoCount_Proxy$descriptor() {
        return ITypeLib_GetTypeInfoCount_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UINT ITypeLib_GetTypeInfoCount_Proxy(ITypeLib *This)
     * }
     */
    public static MethodHandle ITypeLib_GetTypeInfoCount_Proxy$handle() {
        return ITypeLib_GetTypeInfoCount_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * UINT ITypeLib_GetTypeInfoCount_Proxy(ITypeLib *This)
     * }
     */
    public static int ITypeLib_GetTypeInfoCount_Proxy(MemorySegment This) {
        var mh$ = ITypeLib_GetTypeInfoCount_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib_GetTypeInfoCount_Proxy", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeLib_GetTypeInfoCount_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeLib_GetTypeInfoCount_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_GetTypeInfoCount_Stub(ITypeLib *This, UINT *pcTInfo)
     * }
     */
    public static FunctionDescriptor ITypeLib_GetTypeInfoCount_Stub$descriptor() {
        return ITypeLib_GetTypeInfoCount_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_GetTypeInfoCount_Stub(ITypeLib *This, UINT *pcTInfo)
     * }
     */
    public static MethodHandle ITypeLib_GetTypeInfoCount_Stub$handle() {
        return ITypeLib_GetTypeInfoCount_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeLib_GetTypeInfoCount_Stub(ITypeLib *This, UINT *pcTInfo)
     * }
     */
    public static int ITypeLib_GetTypeInfoCount_Stub(MemorySegment This, MemorySegment pcTInfo) {
        var mh$ = ITypeLib_GetTypeInfoCount_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib_GetTypeInfoCount_Stub", This, pcTInfo);
            }
            return (int)mh$.invokeExact(This, pcTInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeLib_GetLibAttr_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeLib_GetLibAttr_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_GetLibAttr_Proxy(ITypeLib *This, TLIBATTR **ppTLibAttr)
     * }
     */
    public static FunctionDescriptor ITypeLib_GetLibAttr_Proxy$descriptor() {
        return ITypeLib_GetLibAttr_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_GetLibAttr_Proxy(ITypeLib *This, TLIBATTR **ppTLibAttr)
     * }
     */
    public static MethodHandle ITypeLib_GetLibAttr_Proxy$handle() {
        return ITypeLib_GetLibAttr_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeLib_GetLibAttr_Proxy(ITypeLib *This, TLIBATTR **ppTLibAttr)
     * }
     */
    public static int ITypeLib_GetLibAttr_Proxy(MemorySegment This, MemorySegment ppTLibAttr) {
        var mh$ = ITypeLib_GetLibAttr_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib_GetLibAttr_Proxy", This, ppTLibAttr);
            }
            return (int)mh$.invokeExact(This, ppTLibAttr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeLib_GetLibAttr_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeLib_GetLibAttr_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_GetLibAttr_Stub(ITypeLib *This, LPTLIBATTR *ppTLibAttr, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static FunctionDescriptor ITypeLib_GetLibAttr_Stub$descriptor() {
        return ITypeLib_GetLibAttr_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_GetLibAttr_Stub(ITypeLib *This, LPTLIBATTR *ppTLibAttr, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static MethodHandle ITypeLib_GetLibAttr_Stub$handle() {
        return ITypeLib_GetLibAttr_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeLib_GetLibAttr_Stub(ITypeLib *This, LPTLIBATTR *ppTLibAttr, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static int ITypeLib_GetLibAttr_Stub(MemorySegment This, MemorySegment ppTLibAttr, MemorySegment pDummy) {
        var mh$ = ITypeLib_GetLibAttr_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib_GetLibAttr_Stub", This, ppTLibAttr, pDummy);
            }
            return (int)mh$.invokeExact(This, ppTLibAttr, pDummy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeLib_GetDocumentation_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_INT,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeLib_GetDocumentation_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_GetDocumentation_Proxy(ITypeLib *This, INT index, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile)
     * }
     */
    public static FunctionDescriptor ITypeLib_GetDocumentation_Proxy$descriptor() {
        return ITypeLib_GetDocumentation_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_GetDocumentation_Proxy(ITypeLib *This, INT index, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile)
     * }
     */
    public static MethodHandle ITypeLib_GetDocumentation_Proxy$handle() {
        return ITypeLib_GetDocumentation_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeLib_GetDocumentation_Proxy(ITypeLib *This, INT index, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile)
     * }
     */
    public static int ITypeLib_GetDocumentation_Proxy(MemorySegment This, int index, MemorySegment pBstrName, MemorySegment pBstrDocString, MemorySegment pdwHelpContext, MemorySegment pBstrHelpFile) {
        var mh$ = ITypeLib_GetDocumentation_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib_GetDocumentation_Proxy", This, index, pBstrName, pBstrDocString, pdwHelpContext, pBstrHelpFile);
            }
            return (int)mh$.invokeExact(This, index, pBstrName, pBstrDocString, pdwHelpContext, pBstrHelpFile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeLib_GetDocumentation_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_INT,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeLib_GetDocumentation_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_GetDocumentation_Stub(ITypeLib *This, INT index, DWORD refPtrFlags, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile)
     * }
     */
    public static FunctionDescriptor ITypeLib_GetDocumentation_Stub$descriptor() {
        return ITypeLib_GetDocumentation_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_GetDocumentation_Stub(ITypeLib *This, INT index, DWORD refPtrFlags, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile)
     * }
     */
    public static MethodHandle ITypeLib_GetDocumentation_Stub$handle() {
        return ITypeLib_GetDocumentation_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeLib_GetDocumentation_Stub(ITypeLib *This, INT index, DWORD refPtrFlags, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile)
     * }
     */
    public static int ITypeLib_GetDocumentation_Stub(MemorySegment This, int index, int refPtrFlags, MemorySegment pBstrName, MemorySegment pBstrDocString, MemorySegment pdwHelpContext, MemorySegment pBstrHelpFile) {
        var mh$ = ITypeLib_GetDocumentation_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib_GetDocumentation_Stub", This, index, refPtrFlags, pBstrName, pBstrDocString, pdwHelpContext, pBstrHelpFile);
            }
            return (int)mh$.invokeExact(This, index, refPtrFlags, pBstrName, pBstrDocString, pdwHelpContext, pBstrHelpFile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeLib_IsName_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeLib_IsName_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_IsName_Proxy(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, BOOL *pfName)
     * }
     */
    public static FunctionDescriptor ITypeLib_IsName_Proxy$descriptor() {
        return ITypeLib_IsName_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_IsName_Proxy(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, BOOL *pfName)
     * }
     */
    public static MethodHandle ITypeLib_IsName_Proxy$handle() {
        return ITypeLib_IsName_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeLib_IsName_Proxy(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, BOOL *pfName)
     * }
     */
    public static int ITypeLib_IsName_Proxy(MemorySegment This, MemorySegment szNameBuf, int lHashVal, MemorySegment pfName) {
        var mh$ = ITypeLib_IsName_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib_IsName_Proxy", This, szNameBuf, lHashVal, pfName);
            }
            return (int)mh$.invokeExact(This, szNameBuf, lHashVal, pfName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeLib_IsName_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeLib_IsName_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_IsName_Stub(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, BOOL *pfName, BSTR *pBstrLibName)
     * }
     */
    public static FunctionDescriptor ITypeLib_IsName_Stub$descriptor() {
        return ITypeLib_IsName_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_IsName_Stub(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, BOOL *pfName, BSTR *pBstrLibName)
     * }
     */
    public static MethodHandle ITypeLib_IsName_Stub$handle() {
        return ITypeLib_IsName_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeLib_IsName_Stub(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, BOOL *pfName, BSTR *pBstrLibName)
     * }
     */
    public static int ITypeLib_IsName_Stub(MemorySegment This, MemorySegment szNameBuf, int lHashVal, MemorySegment pfName, MemorySegment pBstrLibName) {
        var mh$ = ITypeLib_IsName_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib_IsName_Stub", This, szNameBuf, lHashVal, pfName, pBstrLibName);
            }
            return (int)mh$.invokeExact(This, szNameBuf, lHashVal, pfName, pBstrLibName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeLib_FindName_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeLib_FindName_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_FindName_Proxy(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, ITypeInfo **ppTInfo, MEMBERID *rgMemId, USHORT *pcFound)
     * }
     */
    public static FunctionDescriptor ITypeLib_FindName_Proxy$descriptor() {
        return ITypeLib_FindName_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_FindName_Proxy(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, ITypeInfo **ppTInfo, MEMBERID *rgMemId, USHORT *pcFound)
     * }
     */
    public static MethodHandle ITypeLib_FindName_Proxy$handle() {
        return ITypeLib_FindName_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeLib_FindName_Proxy(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, ITypeInfo **ppTInfo, MEMBERID *rgMemId, USHORT *pcFound)
     * }
     */
    public static int ITypeLib_FindName_Proxy(MemorySegment This, MemorySegment szNameBuf, int lHashVal, MemorySegment ppTInfo, MemorySegment rgMemId, MemorySegment pcFound) {
        var mh$ = ITypeLib_FindName_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib_FindName_Proxy", This, szNameBuf, lHashVal, ppTInfo, rgMemId, pcFound);
            }
            return (int)mh$.invokeExact(This, szNameBuf, lHashVal, ppTInfo, rgMemId, pcFound);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeLib_FindName_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeLib_FindName_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_FindName_Stub(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, ITypeInfo **ppTInfo, MEMBERID *rgMemId, USHORT *pcFound, BSTR *pBstrLibName)
     * }
     */
    public static FunctionDescriptor ITypeLib_FindName_Stub$descriptor() {
        return ITypeLib_FindName_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_FindName_Stub(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, ITypeInfo **ppTInfo, MEMBERID *rgMemId, USHORT *pcFound, BSTR *pBstrLibName)
     * }
     */
    public static MethodHandle ITypeLib_FindName_Stub$handle() {
        return ITypeLib_FindName_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeLib_FindName_Stub(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, ITypeInfo **ppTInfo, MEMBERID *rgMemId, USHORT *pcFound, BSTR *pBstrLibName)
     * }
     */
    public static int ITypeLib_FindName_Stub(MemorySegment This, MemorySegment szNameBuf, int lHashVal, MemorySegment ppTInfo, MemorySegment rgMemId, MemorySegment pcFound, MemorySegment pBstrLibName) {
        var mh$ = ITypeLib_FindName_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib_FindName_Stub", This, szNameBuf, lHashVal, ppTInfo, rgMemId, pcFound, pBstrLibName);
            }
            return (int)mh$.invokeExact(This, szNameBuf, lHashVal, ppTInfo, rgMemId, pcFound, pBstrLibName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeLib_ReleaseTLibAttr_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeLib_ReleaseTLibAttr_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITypeLib_ReleaseTLibAttr_Proxy(ITypeLib *This, TLIBATTR *pTLibAttr)
     * }
     */
    public static FunctionDescriptor ITypeLib_ReleaseTLibAttr_Proxy$descriptor() {
        return ITypeLib_ReleaseTLibAttr_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITypeLib_ReleaseTLibAttr_Proxy(ITypeLib *This, TLIBATTR *pTLibAttr)
     * }
     */
    public static MethodHandle ITypeLib_ReleaseTLibAttr_Proxy$handle() {
        return ITypeLib_ReleaseTLibAttr_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void ITypeLib_ReleaseTLibAttr_Proxy(ITypeLib *This, TLIBATTR *pTLibAttr)
     * }
     */
    public static void ITypeLib_ReleaseTLibAttr_Proxy(MemorySegment This, MemorySegment pTLibAttr) {
        var mh$ = ITypeLib_ReleaseTLibAttr_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib_ReleaseTLibAttr_Proxy", This, pTLibAttr);
            }
            mh$.invokeExact(This, pTLibAttr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeLib_ReleaseTLibAttr_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeLib_ReleaseTLibAttr_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_ReleaseTLibAttr_Stub(ITypeLib *This)
     * }
     */
    public static FunctionDescriptor ITypeLib_ReleaseTLibAttr_Stub$descriptor() {
        return ITypeLib_ReleaseTLibAttr_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_ReleaseTLibAttr_Stub(ITypeLib *This)
     * }
     */
    public static MethodHandle ITypeLib_ReleaseTLibAttr_Stub$handle() {
        return ITypeLib_ReleaseTLibAttr_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeLib_ReleaseTLibAttr_Stub(ITypeLib *This)
     * }
     */
    public static int ITypeLib_ReleaseTLibAttr_Stub(MemorySegment This) {
        var mh$ = ITypeLib_ReleaseTLibAttr_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib_ReleaseTLibAttr_Stub", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeLib2_GetLibStatistics_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeLib2_GetLibStatistics_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeLib2_GetLibStatistics_Proxy(ITypeLib2 *This, ULONG *pcUniqueNames, ULONG *pcchUniqueNames)
     * }
     */
    public static FunctionDescriptor ITypeLib2_GetLibStatistics_Proxy$descriptor() {
        return ITypeLib2_GetLibStatistics_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeLib2_GetLibStatistics_Proxy(ITypeLib2 *This, ULONG *pcUniqueNames, ULONG *pcchUniqueNames)
     * }
     */
    public static MethodHandle ITypeLib2_GetLibStatistics_Proxy$handle() {
        return ITypeLib2_GetLibStatistics_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeLib2_GetLibStatistics_Proxy(ITypeLib2 *This, ULONG *pcUniqueNames, ULONG *pcchUniqueNames)
     * }
     */
    public static int ITypeLib2_GetLibStatistics_Proxy(MemorySegment This, MemorySegment pcUniqueNames, MemorySegment pcchUniqueNames) {
        var mh$ = ITypeLib2_GetLibStatistics_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib2_GetLibStatistics_Proxy", This, pcUniqueNames, pcchUniqueNames);
            }
            return (int)mh$.invokeExact(This, pcUniqueNames, pcchUniqueNames);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeLib2_GetLibStatistics_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeLib2_GetLibStatistics_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeLib2_GetLibStatistics_Stub(ITypeLib2 *This, ULONG *pcUniqueNames, ULONG *pcchUniqueNames)
     * }
     */
    public static FunctionDescriptor ITypeLib2_GetLibStatistics_Stub$descriptor() {
        return ITypeLib2_GetLibStatistics_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeLib2_GetLibStatistics_Stub(ITypeLib2 *This, ULONG *pcUniqueNames, ULONG *pcchUniqueNames)
     * }
     */
    public static MethodHandle ITypeLib2_GetLibStatistics_Stub$handle() {
        return ITypeLib2_GetLibStatistics_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeLib2_GetLibStatistics_Stub(ITypeLib2 *This, ULONG *pcUniqueNames, ULONG *pcchUniqueNames)
     * }
     */
    public static int ITypeLib2_GetLibStatistics_Stub(MemorySegment This, MemorySegment pcUniqueNames, MemorySegment pcchUniqueNames) {
        var mh$ = ITypeLib2_GetLibStatistics_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib2_GetLibStatistics_Stub", This, pcUniqueNames, pcchUniqueNames);
            }
            return (int)mh$.invokeExact(This, pcUniqueNames, pcchUniqueNames);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeLib2_GetDocumentation2_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_INT,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeLib2_GetDocumentation2_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeLib2_GetDocumentation2_Proxy(ITypeLib2 *This, INT index, LCID lcid, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll)
     * }
     */
    public static FunctionDescriptor ITypeLib2_GetDocumentation2_Proxy$descriptor() {
        return ITypeLib2_GetDocumentation2_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeLib2_GetDocumentation2_Proxy(ITypeLib2 *This, INT index, LCID lcid, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll)
     * }
     */
    public static MethodHandle ITypeLib2_GetDocumentation2_Proxy$handle() {
        return ITypeLib2_GetDocumentation2_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeLib2_GetDocumentation2_Proxy(ITypeLib2 *This, INT index, LCID lcid, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll)
     * }
     */
    public static int ITypeLib2_GetDocumentation2_Proxy(MemorySegment This, int index, int lcid, MemorySegment pbstrHelpString, MemorySegment pdwHelpStringContext, MemorySegment pbstrHelpStringDll) {
        var mh$ = ITypeLib2_GetDocumentation2_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib2_GetDocumentation2_Proxy", This, index, lcid, pbstrHelpString, pdwHelpStringContext, pbstrHelpStringDll);
            }
            return (int)mh$.invokeExact(This, index, lcid, pbstrHelpString, pdwHelpStringContext, pbstrHelpStringDll);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeLib2_GetDocumentation2_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_INT,
            C_LONG,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ITypeLib2_GetDocumentation2_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeLib2_GetDocumentation2_Stub(ITypeLib2 *This, INT index, LCID lcid, DWORD refPtrFlags, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll)
     * }
     */
    public static FunctionDescriptor ITypeLib2_GetDocumentation2_Stub$descriptor() {
        return ITypeLib2_GetDocumentation2_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeLib2_GetDocumentation2_Stub(ITypeLib2 *This, INT index, LCID lcid, DWORD refPtrFlags, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll)
     * }
     */
    public static MethodHandle ITypeLib2_GetDocumentation2_Stub$handle() {
        return ITypeLib2_GetDocumentation2_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT ITypeLib2_GetDocumentation2_Stub(ITypeLib2 *This, INT index, LCID lcid, DWORD refPtrFlags, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll)
     * }
     */
    public static int ITypeLib2_GetDocumentation2_Stub(MemorySegment This, int index, int lcid, int refPtrFlags, MemorySegment pbstrHelpString, MemorySegment pdwHelpStringContext, MemorySegment pbstrHelpStringDll) {
        var mh$ = ITypeLib2_GetDocumentation2_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib2_GetDocumentation2_Stub", This, index, lcid, refPtrFlags, pbstrHelpString, pdwHelpStringContext, pbstrHelpStringDll);
            }
            return (int)mh$.invokeExact(This, index, lcid, refPtrFlags, pbstrHelpString, pdwHelpStringContext, pbstrHelpStringDll);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IPropertyBag_Read_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IPropertyBag_Read_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IPropertyBag_Read_Proxy(IPropertyBag *This, LPCOLESTR pszPropName, VARIANT *pVar, IErrorLog *pErrorLog)
     * }
     */
    public static FunctionDescriptor IPropertyBag_Read_Proxy$descriptor() {
        return IPropertyBag_Read_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IPropertyBag_Read_Proxy(IPropertyBag *This, LPCOLESTR pszPropName, VARIANT *pVar, IErrorLog *pErrorLog)
     * }
     */
    public static MethodHandle IPropertyBag_Read_Proxy$handle() {
        return IPropertyBag_Read_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IPropertyBag_Read_Proxy(IPropertyBag *This, LPCOLESTR pszPropName, VARIANT *pVar, IErrorLog *pErrorLog)
     * }
     */
    public static int IPropertyBag_Read_Proxy(MemorySegment This, MemorySegment pszPropName, MemorySegment pVar, MemorySegment pErrorLog) {
        var mh$ = IPropertyBag_Read_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IPropertyBag_Read_Proxy", This, pszPropName, pVar, pErrorLog);
            }
            return (int)mh$.invokeExact(This, pszPropName, pVar, pErrorLog);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IPropertyBag_Read_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IPropertyBag_Read_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IPropertyBag_Read_Stub(IPropertyBag *This, LPCOLESTR pszPropName, VARIANT *pVar, IErrorLog *pErrorLog, DWORD varType, IUnknown *pUnkObj)
     * }
     */
    public static FunctionDescriptor IPropertyBag_Read_Stub$descriptor() {
        return IPropertyBag_Read_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IPropertyBag_Read_Stub(IPropertyBag *This, LPCOLESTR pszPropName, VARIANT *pVar, IErrorLog *pErrorLog, DWORD varType, IUnknown *pUnkObj)
     * }
     */
    public static MethodHandle IPropertyBag_Read_Stub$handle() {
        return IPropertyBag_Read_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IPropertyBag_Read_Stub(IPropertyBag *This, LPCOLESTR pszPropName, VARIANT *pVar, IErrorLog *pErrorLog, DWORD varType, IUnknown *pUnkObj)
     * }
     */
    public static int IPropertyBag_Read_Stub(MemorySegment This, MemorySegment pszPropName, MemorySegment pVar, MemorySegment pErrorLog, int varType, MemorySegment pUnkObj) {
        var mh$ = IPropertyBag_Read_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IPropertyBag_Read_Stub", This, pszPropName, pVar, pErrorLog, varType, pUnkObj);
            }
            return (int)mh$.invokeExact(This, pszPropName, pVar, pErrorLog, varType, pUnkObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct tagVersionedStream {
     *     GUID guidVersion;
     *     IStream *pStream;
     * } *LPVERSIONEDSTREAM
     * }
     */
    public static final AddressLayout LPVERSIONEDSTREAM = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef WORD PROPVAR_PAD1
     * }
     */
    public static final OfShort PROPVAR_PAD1 = C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef WORD PROPVAR_PAD2
     * }
     */
    public static final OfShort PROPVAR_PAD2 = C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef WORD PROPVAR_PAD3
     * }
     */
    public static final OfShort PROPVAR_PAD3 = C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef struct tagPROPVARIANT {
     *     union {
     *         struct {
     *             VARTYPE vt;
     *             PROPVAR_PAD1 wReserved1;
     *             PROPVAR_PAD2 wReserved2;
     *             PROPVAR_PAD3 wReserved3;
     *             union {
     *                 CHAR cVal;
     *                 UCHAR bVal;
     *                 SHORT iVal;
     *                 USHORT uiVal;
     *                 LONG lVal;
     *                 ULONG ulVal;
     *                 INT intVal;
     *                 UINT uintVal;
     *                 LARGE_INTEGER hVal;
     *                 ULARGE_INTEGER uhVal;
     *                 FLOAT fltVal;
     *                 DOUBLE dblVal;
     *                 VARIANT_BOOL boolVal;
     *                 VARIANT_BOOL __OBSOLETE__VARIANT_BOOL;
     *                 SCODE scode;
     *                 CY cyVal;
     *                 DATE date;
     *                 FILETIME filetime;
     *                 CLSID *puuid;
     *                 CLIPDATA *pclipdata;
     *                 BSTR bstrVal;
     *                 BSTRBLOB bstrblobVal;
     *                 BLOB blob;
     *                 LPSTR pszVal;
     *                 LPWSTR pwszVal;
     *                 IUnknown *punkVal;
     *                 IDispatch *pdispVal;
     *                 IStream *pStream;
     *                 IStorage *pStorage;
     *                 LPVERSIONEDSTREAM pVersionedStream;
     *                 LPSAFEARRAY parray;
     *                 CAC cac;
     *                 CAUB caub;
     *                 CAI cai;
     *                 CAUI caui;
     *                 CAL cal;
     *                 CAUL caul;
     *                 CAH cah;
     *                 CAUH cauh;
     *                 CAFLT caflt;
     *                 CADBL cadbl;
     *                 CABOOL cabool;
     *                 CASCODE cascode;
     *                 CACY cacy;
     *                 CADATE cadate;
     *                 CAFILETIME cafiletime;
     *                 CACLSID cauuid;
     *                 CACLIPDATA caclipdata;
     *                 CABSTR cabstr;
     *                 CABSTRBLOB cabstrblob;
     *                 CALPSTR calpstr;
     *                 CALPWSTR calpwstr;
     *                 CAPROPVARIANT capropvar;
     *                 CHAR *pcVal;
     *                 UCHAR *pbVal;
     *                 SHORT *piVal;
     *                 USHORT *puiVal;
     *                 LONG *plVal;
     *                 ULONG *pulVal;
     *                 INT *pintVal;
     *                 UINT *puintVal;
     *                 FLOAT *pfltVal;
     *                 DOUBLE *pdblVal;
     *                 VARIANT_BOOL *pboolVal;
     *                 DECIMAL *pdecVal;
     *                 SCODE *pscode;
     *                 CY *pcyVal;
     *                 DATE *pdate;
     *                 BSTR *pbstrVal;
     *                 IUnknown **ppunkVal;
     *                 IDispatch **ppdispVal;
     *                 LPSAFEARRAY *pparray;
     *                 PROPVARIANT *pvarVal;
     *             };
     *         };
     *         DECIMAL decVal;
     *     };
     * } *LPPROPVARIANT
     * }
     */
    public static final AddressLayout LPPROPVARIANT = C_POINTER;

    private static class __MIDL_itf_propidlbase_0000_0000_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_propidlbase_0000_0000_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_propidlbase_0000_0000_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_propidlbase_0000_0000_v0_0_c_ifspec$layout() {
        return __MIDL_itf_propidlbase_0000_0000_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_propidlbase_0000_0000_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_propidlbase_0000_0000_v0_0_c_ifspec$segment() {
        return __MIDL_itf_propidlbase_0000_0000_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_propidlbase_0000_0000_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_propidlbase_0000_0000_v0_0_c_ifspec() {
        return __MIDL_itf_propidlbase_0000_0000_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_propidlbase_0000_0000_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_propidlbase_0000_0000_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_propidlbase_0000_0000_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_propidlbase_0000_0000_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_propidlbase_0000_0000_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_propidlbase_0000_0000_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_propidlbase_0000_0000_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_propidlbase_0000_0000_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_propidlbase_0000_0000_v0_0_s_ifspec$layout() {
        return __MIDL_itf_propidlbase_0000_0000_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_propidlbase_0000_0000_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_propidlbase_0000_0000_v0_0_s_ifspec$segment() {
        return __MIDL_itf_propidlbase_0000_0000_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_propidlbase_0000_0000_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_propidlbase_0000_0000_v0_0_s_ifspec() {
        return __MIDL_itf_propidlbase_0000_0000_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_propidlbase_0000_0000_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_propidlbase_0000_0000_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_propidlbase_0000_0000_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_propidlbase_0000_0000_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_propidlbase_0000_0000_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IPropertyStorage$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IPropertyStorage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPropertyStorage
     * }
     */
    public static GroupLayout IID_IPropertyStorage$layout() {
        return IID_IPropertyStorage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPropertyStorage
     * }
     */
    public static MemorySegment IID_IPropertyStorage() {
        return IID_IPropertyStorage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPropertyStorage
     * }
     */
    public static void IID_IPropertyStorage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IPropertyStorage$constants.SEGMENT, 0L, IID_IPropertyStorage$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IPropertySetStorage *LPPROPERTYSETSTORAGE
     * }
     */
    public static final AddressLayout LPPROPERTYSETSTORAGE = C_POINTER;

    private static class IID_IPropertySetStorage$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IPropertySetStorage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPropertySetStorage
     * }
     */
    public static GroupLayout IID_IPropertySetStorage$layout() {
        return IID_IPropertySetStorage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPropertySetStorage
     * }
     */
    public static MemorySegment IID_IPropertySetStorage() {
        return IID_IPropertySetStorage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPropertySetStorage
     * }
     */
    public static void IID_IPropertySetStorage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IPropertySetStorage$constants.SEGMENT, 0L, IID_IPropertySetStorage$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IEnumSTATPROPSTG *LPENUMSTATPROPSTG
     * }
     */
    public static final AddressLayout LPENUMSTATPROPSTG = C_POINTER;

    private static class IID_IEnumSTATPROPSTG$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IEnumSTATPROPSTG").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumSTATPROPSTG
     * }
     */
    public static GroupLayout IID_IEnumSTATPROPSTG$layout() {
        return IID_IEnumSTATPROPSTG$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumSTATPROPSTG
     * }
     */
    public static MemorySegment IID_IEnumSTATPROPSTG() {
        return IID_IEnumSTATPROPSTG$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumSTATPROPSTG
     * }
     */
    public static void IID_IEnumSTATPROPSTG(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IEnumSTATPROPSTG$constants.SEGMENT, 0L, IID_IEnumSTATPROPSTG$constants.LAYOUT.byteSize());
    }

    private static class IEnumSTATPROPSTG_RemoteNext_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IEnumSTATPROPSTG_RemoteNext_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATPROPSTG_RemoteNext_Proxy(IEnumSTATPROPSTG *This, ULONG celt, STATPROPSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumSTATPROPSTG_RemoteNext_Proxy$descriptor() {
        return IEnumSTATPROPSTG_RemoteNext_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATPROPSTG_RemoteNext_Proxy(IEnumSTATPROPSTG *This, ULONG celt, STATPROPSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumSTATPROPSTG_RemoteNext_Proxy$handle() {
        return IEnumSTATPROPSTG_RemoteNext_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IEnumSTATPROPSTG_RemoteNext_Proxy(IEnumSTATPROPSTG *This, ULONG celt, STATPROPSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumSTATPROPSTG_RemoteNext_Proxy(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumSTATPROPSTG_RemoteNext_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumSTATPROPSTG_RemoteNext_Proxy", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumSTATPROPSTG_RemoteNext_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IEnumSTATPROPSTG_RemoteNext_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IEnumSTATPROPSTG_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IEnumSTATPROPSTG_RemoteNext_Stub$descriptor() {
        return IEnumSTATPROPSTG_RemoteNext_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IEnumSTATPROPSTG_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IEnumSTATPROPSTG_RemoteNext_Stub$handle() {
        return IEnumSTATPROPSTG_RemoteNext_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void IEnumSTATPROPSTG_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IEnumSTATPROPSTG_RemoteNext_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IEnumSTATPROPSTG_RemoteNext_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumSTATPROPSTG_RemoteNext_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef IEnumSTATPROPSETSTG *LPENUMSTATPROPSETSTG
     * }
     */
    public static final AddressLayout LPENUMSTATPROPSETSTG = C_POINTER;

    private static class IID_IEnumSTATPROPSETSTG$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IEnumSTATPROPSETSTG").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumSTATPROPSETSTG
     * }
     */
    public static GroupLayout IID_IEnumSTATPROPSETSTG$layout() {
        return IID_IEnumSTATPROPSETSTG$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumSTATPROPSETSTG
     * }
     */
    public static MemorySegment IID_IEnumSTATPROPSETSTG() {
        return IID_IEnumSTATPROPSETSTG$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumSTATPROPSETSTG
     * }
     */
    public static void IID_IEnumSTATPROPSETSTG(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IEnumSTATPROPSETSTG$constants.SEGMENT, 0L, IID_IEnumSTATPROPSETSTG$constants.LAYOUT.byteSize());
    }

    private static class IEnumSTATPROPSETSTG_RemoteNext_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IEnumSTATPROPSETSTG_RemoteNext_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATPROPSETSTG_RemoteNext_Proxy(IEnumSTATPROPSETSTG *This, ULONG celt, STATPROPSETSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumSTATPROPSETSTG_RemoteNext_Proxy$descriptor() {
        return IEnumSTATPROPSETSTG_RemoteNext_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATPROPSETSTG_RemoteNext_Proxy(IEnumSTATPROPSETSTG *This, ULONG celt, STATPROPSETSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumSTATPROPSETSTG_RemoteNext_Proxy$handle() {
        return IEnumSTATPROPSETSTG_RemoteNext_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IEnumSTATPROPSETSTG_RemoteNext_Proxy(IEnumSTATPROPSETSTG *This, ULONG celt, STATPROPSETSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumSTATPROPSETSTG_RemoteNext_Proxy(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumSTATPROPSETSTG_RemoteNext_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumSTATPROPSETSTG_RemoteNext_Proxy", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumSTATPROPSETSTG_RemoteNext_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IEnumSTATPROPSETSTG_RemoteNext_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IEnumSTATPROPSETSTG_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IEnumSTATPROPSETSTG_RemoteNext_Stub$descriptor() {
        return IEnumSTATPROPSETSTG_RemoteNext_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IEnumSTATPROPSETSTG_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IEnumSTATPROPSETSTG_RemoteNext_Stub$handle() {
        return IEnumSTATPROPSETSTG_RemoteNext_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void IEnumSTATPROPSETSTG_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IEnumSTATPROPSETSTG_RemoteNext_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IEnumSTATPROPSETSTG_RemoteNext_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumSTATPROPSETSTG_RemoteNext_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef IPropertyStorage *LPPROPERTYSTORAGE
     * }
     */
    public static final AddressLayout LPPROPERTYSTORAGE = C_POINTER;

    private static class __MIDL_itf_propidlbase_0000_0004_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_propidlbase_0000_0004_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_propidlbase_0000_0004_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_propidlbase_0000_0004_v0_0_c_ifspec$layout() {
        return __MIDL_itf_propidlbase_0000_0004_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_propidlbase_0000_0004_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_propidlbase_0000_0004_v0_0_c_ifspec$segment() {
        return __MIDL_itf_propidlbase_0000_0004_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_propidlbase_0000_0004_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_propidlbase_0000_0004_v0_0_c_ifspec() {
        return __MIDL_itf_propidlbase_0000_0004_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_propidlbase_0000_0004_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_propidlbase_0000_0004_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_propidlbase_0000_0004_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_propidlbase_0000_0004_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_propidlbase_0000_0004_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_propidlbase_0000_0004_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_propidlbase_0000_0004_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_propidlbase_0000_0004_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_propidlbase_0000_0004_v0_0_s_ifspec$layout() {
        return __MIDL_itf_propidlbase_0000_0004_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_propidlbase_0000_0004_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_propidlbase_0000_0004_v0_0_s_ifspec$segment() {
        return __MIDL_itf_propidlbase_0000_0004_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_propidlbase_0000_0004_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_propidlbase_0000_0004_v0_0_s_ifspec() {
        return __MIDL_itf_propidlbase_0000_0004_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_propidlbase_0000_0004_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_propidlbase_0000_0004_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_propidlbase_0000_0004_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_propidlbase_0000_0004_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_propidlbase_0000_0004_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class LPSAFEARRAY_UserSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("LPSAFEARRAY_UserSize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long LPSAFEARRAY_UserSize(unsigned long *, unsigned long, LPSAFEARRAY *)
     * }
     */
    public static FunctionDescriptor LPSAFEARRAY_UserSize$descriptor() {
        return LPSAFEARRAY_UserSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long LPSAFEARRAY_UserSize(unsigned long *, unsigned long, LPSAFEARRAY *)
     * }
     */
    public static MethodHandle LPSAFEARRAY_UserSize$handle() {
        return LPSAFEARRAY_UserSize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned long LPSAFEARRAY_UserSize(unsigned long *, unsigned long, LPSAFEARRAY *)
     * }
     */
    public static int LPSAFEARRAY_UserSize(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = LPSAFEARRAY_UserSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LPSAFEARRAY_UserSize", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LPSAFEARRAY_UserMarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("LPSAFEARRAY_UserMarshal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *LPSAFEARRAY_UserMarshal(unsigned long *, unsigned char *, LPSAFEARRAY *)
     * }
     */
    public static FunctionDescriptor LPSAFEARRAY_UserMarshal$descriptor() {
        return LPSAFEARRAY_UserMarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *LPSAFEARRAY_UserMarshal(unsigned long *, unsigned char *, LPSAFEARRAY *)
     * }
     */
    public static MethodHandle LPSAFEARRAY_UserMarshal$handle() {
        return LPSAFEARRAY_UserMarshal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *LPSAFEARRAY_UserMarshal(unsigned long *, unsigned char *, LPSAFEARRAY *)
     * }
     */
    public static MemorySegment LPSAFEARRAY_UserMarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = LPSAFEARRAY_UserMarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LPSAFEARRAY_UserMarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LPSAFEARRAY_UserUnmarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("LPSAFEARRAY_UserUnmarshal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *LPSAFEARRAY_UserUnmarshal(unsigned long *, unsigned char *, LPSAFEARRAY *)
     * }
     */
    public static FunctionDescriptor LPSAFEARRAY_UserUnmarshal$descriptor() {
        return LPSAFEARRAY_UserUnmarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *LPSAFEARRAY_UserUnmarshal(unsigned long *, unsigned char *, LPSAFEARRAY *)
     * }
     */
    public static MethodHandle LPSAFEARRAY_UserUnmarshal$handle() {
        return LPSAFEARRAY_UserUnmarshal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *LPSAFEARRAY_UserUnmarshal(unsigned long *, unsigned char *, LPSAFEARRAY *)
     * }
     */
    public static MemorySegment LPSAFEARRAY_UserUnmarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = LPSAFEARRAY_UserUnmarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LPSAFEARRAY_UserUnmarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LPSAFEARRAY_UserFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("LPSAFEARRAY_UserFree"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void LPSAFEARRAY_UserFree(unsigned long *, LPSAFEARRAY *)
     * }
     */
    public static FunctionDescriptor LPSAFEARRAY_UserFree$descriptor() {
        return LPSAFEARRAY_UserFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void LPSAFEARRAY_UserFree(unsigned long *, LPSAFEARRAY *)
     * }
     */
    public static MethodHandle LPSAFEARRAY_UserFree$handle() {
        return LPSAFEARRAY_UserFree.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void LPSAFEARRAY_UserFree(unsigned long *, LPSAFEARRAY *)
     * }
     */
    public static void LPSAFEARRAY_UserFree(MemorySegment x0, MemorySegment x1) {
        var mh$ = LPSAFEARRAY_UserFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LPSAFEARRAY_UserFree", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LPSAFEARRAY_UserSize64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("LPSAFEARRAY_UserSize64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long LPSAFEARRAY_UserSize64(unsigned long *, unsigned long, LPSAFEARRAY *)
     * }
     */
    public static FunctionDescriptor LPSAFEARRAY_UserSize64$descriptor() {
        return LPSAFEARRAY_UserSize64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long LPSAFEARRAY_UserSize64(unsigned long *, unsigned long, LPSAFEARRAY *)
     * }
     */
    public static MethodHandle LPSAFEARRAY_UserSize64$handle() {
        return LPSAFEARRAY_UserSize64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned long LPSAFEARRAY_UserSize64(unsigned long *, unsigned long, LPSAFEARRAY *)
     * }
     */
    public static int LPSAFEARRAY_UserSize64(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = LPSAFEARRAY_UserSize64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LPSAFEARRAY_UserSize64", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LPSAFEARRAY_UserMarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("LPSAFEARRAY_UserMarshal64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *LPSAFEARRAY_UserMarshal64(unsigned long *, unsigned char *, LPSAFEARRAY *)
     * }
     */
    public static FunctionDescriptor LPSAFEARRAY_UserMarshal64$descriptor() {
        return LPSAFEARRAY_UserMarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *LPSAFEARRAY_UserMarshal64(unsigned long *, unsigned char *, LPSAFEARRAY *)
     * }
     */
    public static MethodHandle LPSAFEARRAY_UserMarshal64$handle() {
        return LPSAFEARRAY_UserMarshal64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *LPSAFEARRAY_UserMarshal64(unsigned long *, unsigned char *, LPSAFEARRAY *)
     * }
     */
    public static MemorySegment LPSAFEARRAY_UserMarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = LPSAFEARRAY_UserMarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LPSAFEARRAY_UserMarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LPSAFEARRAY_UserUnmarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("LPSAFEARRAY_UserUnmarshal64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *LPSAFEARRAY_UserUnmarshal64(unsigned long *, unsigned char *, LPSAFEARRAY *)
     * }
     */
    public static FunctionDescriptor LPSAFEARRAY_UserUnmarshal64$descriptor() {
        return LPSAFEARRAY_UserUnmarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *LPSAFEARRAY_UserUnmarshal64(unsigned long *, unsigned char *, LPSAFEARRAY *)
     * }
     */
    public static MethodHandle LPSAFEARRAY_UserUnmarshal64$handle() {
        return LPSAFEARRAY_UserUnmarshal64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *LPSAFEARRAY_UserUnmarshal64(unsigned long *, unsigned char *, LPSAFEARRAY *)
     * }
     */
    public static MemorySegment LPSAFEARRAY_UserUnmarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = LPSAFEARRAY_UserUnmarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LPSAFEARRAY_UserUnmarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LPSAFEARRAY_UserFree64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("LPSAFEARRAY_UserFree64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void LPSAFEARRAY_UserFree64(unsigned long *, LPSAFEARRAY *)
     * }
     */
    public static FunctionDescriptor LPSAFEARRAY_UserFree64$descriptor() {
        return LPSAFEARRAY_UserFree64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void LPSAFEARRAY_UserFree64(unsigned long *, LPSAFEARRAY *)
     * }
     */
    public static MethodHandle LPSAFEARRAY_UserFree64$handle() {
        return LPSAFEARRAY_UserFree64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void LPSAFEARRAY_UserFree64(unsigned long *, LPSAFEARRAY *)
     * }
     */
    public static void LPSAFEARRAY_UserFree64(MemorySegment x0, MemorySegment x1) {
        var mh$ = LPSAFEARRAY_UserFree64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LPSAFEARRAY_UserFree64", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumSTATPROPSTG_Next_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IEnumSTATPROPSTG_Next_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATPROPSTG_Next_Proxy(IEnumSTATPROPSTG *This, ULONG celt, STATPROPSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumSTATPROPSTG_Next_Proxy$descriptor() {
        return IEnumSTATPROPSTG_Next_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATPROPSTG_Next_Proxy(IEnumSTATPROPSTG *This, ULONG celt, STATPROPSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumSTATPROPSTG_Next_Proxy$handle() {
        return IEnumSTATPROPSTG_Next_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IEnumSTATPROPSTG_Next_Proxy(IEnumSTATPROPSTG *This, ULONG celt, STATPROPSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumSTATPROPSTG_Next_Proxy(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumSTATPROPSTG_Next_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumSTATPROPSTG_Next_Proxy", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumSTATPROPSTG_Next_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IEnumSTATPROPSTG_Next_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATPROPSTG_Next_Stub(IEnumSTATPROPSTG *This, ULONG celt, STATPROPSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumSTATPROPSTG_Next_Stub$descriptor() {
        return IEnumSTATPROPSTG_Next_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATPROPSTG_Next_Stub(IEnumSTATPROPSTG *This, ULONG celt, STATPROPSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumSTATPROPSTG_Next_Stub$handle() {
        return IEnumSTATPROPSTG_Next_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IEnumSTATPROPSTG_Next_Stub(IEnumSTATPROPSTG *This, ULONG celt, STATPROPSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumSTATPROPSTG_Next_Stub(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumSTATPROPSTG_Next_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumSTATPROPSTG_Next_Stub", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumSTATPROPSETSTG_Next_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IEnumSTATPROPSETSTG_Next_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATPROPSETSTG_Next_Proxy(IEnumSTATPROPSETSTG *This, ULONG celt, STATPROPSETSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumSTATPROPSETSTG_Next_Proxy$descriptor() {
        return IEnumSTATPROPSETSTG_Next_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATPROPSETSTG_Next_Proxy(IEnumSTATPROPSETSTG *This, ULONG celt, STATPROPSETSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumSTATPROPSETSTG_Next_Proxy$handle() {
        return IEnumSTATPROPSETSTG_Next_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IEnumSTATPROPSETSTG_Next_Proxy(IEnumSTATPROPSETSTG *This, ULONG celt, STATPROPSETSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumSTATPROPSETSTG_Next_Proxy(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumSTATPROPSETSTG_Next_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumSTATPROPSETSTG_Next_Proxy", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumSTATPROPSETSTG_Next_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IEnumSTATPROPSETSTG_Next_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATPROPSETSTG_Next_Stub(IEnumSTATPROPSETSTG *This, ULONG celt, STATPROPSETSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumSTATPROPSETSTG_Next_Stub$descriptor() {
        return IEnumSTATPROPSETSTG_Next_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATPROPSETSTG_Next_Stub(IEnumSTATPROPSETSTG *This, ULONG celt, STATPROPSETSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumSTATPROPSETSTG_Next_Stub$handle() {
        return IEnumSTATPROPSETSTG_Next_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IEnumSTATPROPSETSTG_Next_Stub(IEnumSTATPROPSETSTG *This, ULONG celt, STATPROPSETSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumSTATPROPSETSTG_Next_Stub(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumSTATPROPSETSTG_Next_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumSTATPROPSETSTG_Next_Stub", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef DWORD STGFMT
     * }
     */
    public static final OfInt STGFMT = C_LONG;

    private static class StgCreateDocfile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("StgCreateDocfile"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT StgCreateDocfile(const WCHAR *pwcsName, DWORD grfMode, DWORD reserved, IStorage **ppstgOpen)
     * }
     */
    public static FunctionDescriptor StgCreateDocfile$descriptor() {
        return StgCreateDocfile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT StgCreateDocfile(const WCHAR *pwcsName, DWORD grfMode, DWORD reserved, IStorage **ppstgOpen)
     * }
     */
    public static MethodHandle StgCreateDocfile$handle() {
        return StgCreateDocfile.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT StgCreateDocfile(const WCHAR *pwcsName, DWORD grfMode, DWORD reserved, IStorage **ppstgOpen)
     * }
     */
    public static int StgCreateDocfile(MemorySegment pwcsName, int grfMode, int reserved, MemorySegment ppstgOpen) {
        var mh$ = StgCreateDocfile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StgCreateDocfile", pwcsName, grfMode, reserved, ppstgOpen);
            }
            return (int)mh$.invokeExact(pwcsName, grfMode, reserved, ppstgOpen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StgCreateDocfileOnILockBytes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("StgCreateDocfileOnILockBytes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT StgCreateDocfileOnILockBytes(ILockBytes *plkbyt, DWORD grfMode, DWORD reserved, IStorage **ppstgOpen)
     * }
     */
    public static FunctionDescriptor StgCreateDocfileOnILockBytes$descriptor() {
        return StgCreateDocfileOnILockBytes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT StgCreateDocfileOnILockBytes(ILockBytes *plkbyt, DWORD grfMode, DWORD reserved, IStorage **ppstgOpen)
     * }
     */
    public static MethodHandle StgCreateDocfileOnILockBytes$handle() {
        return StgCreateDocfileOnILockBytes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT StgCreateDocfileOnILockBytes(ILockBytes *plkbyt, DWORD grfMode, DWORD reserved, IStorage **ppstgOpen)
     * }
     */
    public static int StgCreateDocfileOnILockBytes(MemorySegment plkbyt, int grfMode, int reserved, MemorySegment ppstgOpen) {
        var mh$ = StgCreateDocfileOnILockBytes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StgCreateDocfileOnILockBytes", plkbyt, grfMode, reserved, ppstgOpen);
            }
            return (int)mh$.invokeExact(plkbyt, grfMode, reserved, ppstgOpen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StgOpenStorage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("StgOpenStorage"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT StgOpenStorage(const WCHAR *pwcsName, IStorage *pstgPriority, DWORD grfMode, SNB snbExclude, DWORD reserved, IStorage **ppstgOpen)
     * }
     */
    public static FunctionDescriptor StgOpenStorage$descriptor() {
        return StgOpenStorage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT StgOpenStorage(const WCHAR *pwcsName, IStorage *pstgPriority, DWORD grfMode, SNB snbExclude, DWORD reserved, IStorage **ppstgOpen)
     * }
     */
    public static MethodHandle StgOpenStorage$handle() {
        return StgOpenStorage.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT StgOpenStorage(const WCHAR *pwcsName, IStorage *pstgPriority, DWORD grfMode, SNB snbExclude, DWORD reserved, IStorage **ppstgOpen)
     * }
     */
    public static int StgOpenStorage(MemorySegment pwcsName, MemorySegment pstgPriority, int grfMode, MemorySegment snbExclude, int reserved, MemorySegment ppstgOpen) {
        var mh$ = StgOpenStorage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StgOpenStorage", pwcsName, pstgPriority, grfMode, snbExclude, reserved, ppstgOpen);
            }
            return (int)mh$.invokeExact(pwcsName, pstgPriority, grfMode, snbExclude, reserved, ppstgOpen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StgOpenStorageOnILockBytes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("StgOpenStorageOnILockBytes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT StgOpenStorageOnILockBytes(ILockBytes *plkbyt, IStorage *pstgPriority, DWORD grfMode, SNB snbExclude, DWORD reserved, IStorage **ppstgOpen)
     * }
     */
    public static FunctionDescriptor StgOpenStorageOnILockBytes$descriptor() {
        return StgOpenStorageOnILockBytes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT StgOpenStorageOnILockBytes(ILockBytes *plkbyt, IStorage *pstgPriority, DWORD grfMode, SNB snbExclude, DWORD reserved, IStorage **ppstgOpen)
     * }
     */
    public static MethodHandle StgOpenStorageOnILockBytes$handle() {
        return StgOpenStorageOnILockBytes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT StgOpenStorageOnILockBytes(ILockBytes *plkbyt, IStorage *pstgPriority, DWORD grfMode, SNB snbExclude, DWORD reserved, IStorage **ppstgOpen)
     * }
     */
    public static int StgOpenStorageOnILockBytes(MemorySegment plkbyt, MemorySegment pstgPriority, int grfMode, MemorySegment snbExclude, int reserved, MemorySegment ppstgOpen) {
        var mh$ = StgOpenStorageOnILockBytes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StgOpenStorageOnILockBytes", plkbyt, pstgPriority, grfMode, snbExclude, reserved, ppstgOpen);
            }
            return (int)mh$.invokeExact(plkbyt, pstgPriority, grfMode, snbExclude, reserved, ppstgOpen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StgIsStorageFile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("StgIsStorageFile"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT StgIsStorageFile(const WCHAR *pwcsName)
     * }
     */
    public static FunctionDescriptor StgIsStorageFile$descriptor() {
        return StgIsStorageFile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT StgIsStorageFile(const WCHAR *pwcsName)
     * }
     */
    public static MethodHandle StgIsStorageFile$handle() {
        return StgIsStorageFile.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT StgIsStorageFile(const WCHAR *pwcsName)
     * }
     */
    public static int StgIsStorageFile(MemorySegment pwcsName) {
        var mh$ = StgIsStorageFile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StgIsStorageFile", pwcsName);
            }
            return (int)mh$.invokeExact(pwcsName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StgIsStorageILockBytes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("StgIsStorageILockBytes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT StgIsStorageILockBytes(ILockBytes *plkbyt)
     * }
     */
    public static FunctionDescriptor StgIsStorageILockBytes$descriptor() {
        return StgIsStorageILockBytes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT StgIsStorageILockBytes(ILockBytes *plkbyt)
     * }
     */
    public static MethodHandle StgIsStorageILockBytes$handle() {
        return StgIsStorageILockBytes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT StgIsStorageILockBytes(ILockBytes *plkbyt)
     * }
     */
    public static int StgIsStorageILockBytes(MemorySegment plkbyt) {
        var mh$ = StgIsStorageILockBytes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StgIsStorageILockBytes", plkbyt);
            }
            return (int)mh$.invokeExact(plkbyt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StgSetTimes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("StgSetTimes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT StgSetTimes(const WCHAR *lpszName, const FILETIME *pctime, const FILETIME *patime, const FILETIME *pmtime)
     * }
     */
    public static FunctionDescriptor StgSetTimes$descriptor() {
        return StgSetTimes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT StgSetTimes(const WCHAR *lpszName, const FILETIME *pctime, const FILETIME *patime, const FILETIME *pmtime)
     * }
     */
    public static MethodHandle StgSetTimes$handle() {
        return StgSetTimes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT StgSetTimes(const WCHAR *lpszName, const FILETIME *pctime, const FILETIME *patime, const FILETIME *pmtime)
     * }
     */
    public static int StgSetTimes(MemorySegment lpszName, MemorySegment pctime, MemorySegment patime, MemorySegment pmtime) {
        var mh$ = StgSetTimes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StgSetTimes", lpszName, pctime, patime, pmtime);
            }
            return (int)mh$.invokeExact(lpszName, pctime, patime, pmtime);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StgCreateStorageEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("StgCreateStorageEx"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT StgCreateStorageEx(const WCHAR *pwcsName, DWORD grfMode, DWORD stgfmt, DWORD grfAttrs, STGOPTIONS *pStgOptions, PSECURITY_DESCRIPTOR pSecurityDescriptor, const IID *const riid, void **ppObjectOpen)
     * }
     */
    public static FunctionDescriptor StgCreateStorageEx$descriptor() {
        return StgCreateStorageEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT StgCreateStorageEx(const WCHAR *pwcsName, DWORD grfMode, DWORD stgfmt, DWORD grfAttrs, STGOPTIONS *pStgOptions, PSECURITY_DESCRIPTOR pSecurityDescriptor, const IID *const riid, void **ppObjectOpen)
     * }
     */
    public static MethodHandle StgCreateStorageEx$handle() {
        return StgCreateStorageEx.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT StgCreateStorageEx(const WCHAR *pwcsName, DWORD grfMode, DWORD stgfmt, DWORD grfAttrs, STGOPTIONS *pStgOptions, PSECURITY_DESCRIPTOR pSecurityDescriptor, const IID *const riid, void **ppObjectOpen)
     * }
     */
    public static int StgCreateStorageEx(MemorySegment pwcsName, int grfMode, int stgfmt, int grfAttrs, MemorySegment pStgOptions, MemorySegment pSecurityDescriptor, MemorySegment riid, MemorySegment ppObjectOpen) {
        var mh$ = StgCreateStorageEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StgCreateStorageEx", pwcsName, grfMode, stgfmt, grfAttrs, pStgOptions, pSecurityDescriptor, riid, ppObjectOpen);
            }
            return (int)mh$.invokeExact(pwcsName, grfMode, stgfmt, grfAttrs, pStgOptions, pSecurityDescriptor, riid, ppObjectOpen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StgOpenStorageEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("StgOpenStorageEx"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT StgOpenStorageEx(const WCHAR *pwcsName, DWORD grfMode, DWORD stgfmt, DWORD grfAttrs, STGOPTIONS *pStgOptions, PSECURITY_DESCRIPTOR pSecurityDescriptor, const IID *const riid, void **ppObjectOpen)
     * }
     */
    public static FunctionDescriptor StgOpenStorageEx$descriptor() {
        return StgOpenStorageEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT StgOpenStorageEx(const WCHAR *pwcsName, DWORD grfMode, DWORD stgfmt, DWORD grfAttrs, STGOPTIONS *pStgOptions, PSECURITY_DESCRIPTOR pSecurityDescriptor, const IID *const riid, void **ppObjectOpen)
     * }
     */
    public static MethodHandle StgOpenStorageEx$handle() {
        return StgOpenStorageEx.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT StgOpenStorageEx(const WCHAR *pwcsName, DWORD grfMode, DWORD stgfmt, DWORD grfAttrs, STGOPTIONS *pStgOptions, PSECURITY_DESCRIPTOR pSecurityDescriptor, const IID *const riid, void **ppObjectOpen)
     * }
     */
    public static int StgOpenStorageEx(MemorySegment pwcsName, int grfMode, int stgfmt, int grfAttrs, MemorySegment pStgOptions, MemorySegment pSecurityDescriptor, MemorySegment riid, MemorySegment ppObjectOpen) {
        var mh$ = StgOpenStorageEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StgOpenStorageEx", pwcsName, grfMode, stgfmt, grfAttrs, pStgOptions, pSecurityDescriptor, riid, ppObjectOpen);
            }
            return (int)mh$.invokeExact(pwcsName, grfMode, stgfmt, grfAttrs, pStgOptions, pSecurityDescriptor, riid, ppObjectOpen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StgCreatePropStg {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("StgCreatePropStg"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT StgCreatePropStg(IUnknown *pUnk, const IID *const fmtid, const CLSID *pclsid, DWORD grfFlags, DWORD dwReserved, IPropertyStorage **ppPropStg)
     * }
     */
    public static FunctionDescriptor StgCreatePropStg$descriptor() {
        return StgCreatePropStg.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT StgCreatePropStg(IUnknown *pUnk, const IID *const fmtid, const CLSID *pclsid, DWORD grfFlags, DWORD dwReserved, IPropertyStorage **ppPropStg)
     * }
     */
    public static MethodHandle StgCreatePropStg$handle() {
        return StgCreatePropStg.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT StgCreatePropStg(IUnknown *pUnk, const IID *const fmtid, const CLSID *pclsid, DWORD grfFlags, DWORD dwReserved, IPropertyStorage **ppPropStg)
     * }
     */
    public static int StgCreatePropStg(MemorySegment pUnk, MemorySegment fmtid, MemorySegment pclsid, int grfFlags, int dwReserved, MemorySegment ppPropStg) {
        var mh$ = StgCreatePropStg.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StgCreatePropStg", pUnk, fmtid, pclsid, grfFlags, dwReserved, ppPropStg);
            }
            return (int)mh$.invokeExact(pUnk, fmtid, pclsid, grfFlags, dwReserved, ppPropStg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StgOpenPropStg {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("StgOpenPropStg"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT StgOpenPropStg(IUnknown *pUnk, const IID *const fmtid, DWORD grfFlags, DWORD dwReserved, IPropertyStorage **ppPropStg)
     * }
     */
    public static FunctionDescriptor StgOpenPropStg$descriptor() {
        return StgOpenPropStg.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT StgOpenPropStg(IUnknown *pUnk, const IID *const fmtid, DWORD grfFlags, DWORD dwReserved, IPropertyStorage **ppPropStg)
     * }
     */
    public static MethodHandle StgOpenPropStg$handle() {
        return StgOpenPropStg.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT StgOpenPropStg(IUnknown *pUnk, const IID *const fmtid, DWORD grfFlags, DWORD dwReserved, IPropertyStorage **ppPropStg)
     * }
     */
    public static int StgOpenPropStg(MemorySegment pUnk, MemorySegment fmtid, int grfFlags, int dwReserved, MemorySegment ppPropStg) {
        var mh$ = StgOpenPropStg.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StgOpenPropStg", pUnk, fmtid, grfFlags, dwReserved, ppPropStg);
            }
            return (int)mh$.invokeExact(pUnk, fmtid, grfFlags, dwReserved, ppPropStg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StgCreatePropSetStg {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("StgCreatePropSetStg"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT StgCreatePropSetStg(IStorage *pStorage, DWORD dwReserved, IPropertySetStorage **ppPropSetStg)
     * }
     */
    public static FunctionDescriptor StgCreatePropSetStg$descriptor() {
        return StgCreatePropSetStg.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT StgCreatePropSetStg(IStorage *pStorage, DWORD dwReserved, IPropertySetStorage **ppPropSetStg)
     * }
     */
    public static MethodHandle StgCreatePropSetStg$handle() {
        return StgCreatePropSetStg.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT StgCreatePropSetStg(IStorage *pStorage, DWORD dwReserved, IPropertySetStorage **ppPropSetStg)
     * }
     */
    public static int StgCreatePropSetStg(MemorySegment pStorage, int dwReserved, MemorySegment ppPropSetStg) {
        var mh$ = StgCreatePropSetStg.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StgCreatePropSetStg", pStorage, dwReserved, ppPropSetStg);
            }
            return (int)mh$.invokeExact(pStorage, dwReserved, ppPropSetStg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FmtIdToPropStgName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("FmtIdToPropStgName"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT FmtIdToPropStgName(const FMTID *pfmtid, LPOLESTR oszName)
     * }
     */
    public static FunctionDescriptor FmtIdToPropStgName$descriptor() {
        return FmtIdToPropStgName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT FmtIdToPropStgName(const FMTID *pfmtid, LPOLESTR oszName)
     * }
     */
    public static MethodHandle FmtIdToPropStgName$handle() {
        return FmtIdToPropStgName.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT FmtIdToPropStgName(const FMTID *pfmtid, LPOLESTR oszName)
     * }
     */
    public static int FmtIdToPropStgName(MemorySegment pfmtid, MemorySegment oszName) {
        var mh$ = FmtIdToPropStgName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FmtIdToPropStgName", pfmtid, oszName);
            }
            return (int)mh$.invokeExact(pfmtid, oszName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PropStgNameToFmtId {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("PropStgNameToFmtId"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT PropStgNameToFmtId(const LPOLESTR oszName, FMTID *pfmtid)
     * }
     */
    public static FunctionDescriptor PropStgNameToFmtId$descriptor() {
        return PropStgNameToFmtId.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT PropStgNameToFmtId(const LPOLESTR oszName, FMTID *pfmtid)
     * }
     */
    public static MethodHandle PropStgNameToFmtId$handle() {
        return PropStgNameToFmtId.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT PropStgNameToFmtId(const LPOLESTR oszName, FMTID *pfmtid)
     * }
     */
    public static int PropStgNameToFmtId(MemorySegment oszName, MemorySegment pfmtid) {
        var mh$ = PropStgNameToFmtId.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PropStgNameToFmtId", oszName, pfmtid);
            }
            return (int)mh$.invokeExact(oszName, pfmtid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ReadClassStg {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ReadClassStg"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT ReadClassStg(LPSTORAGE pStg, CLSID *pclsid)
     * }
     */
    public static FunctionDescriptor ReadClassStg$descriptor() {
        return ReadClassStg.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT ReadClassStg(LPSTORAGE pStg, CLSID *pclsid)
     * }
     */
    public static MethodHandle ReadClassStg$handle() {
        return ReadClassStg.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT ReadClassStg(LPSTORAGE pStg, CLSID *pclsid)
     * }
     */
    public static int ReadClassStg(MemorySegment pStg, MemorySegment pclsid) {
        var mh$ = ReadClassStg.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ReadClassStg", pStg, pclsid);
            }
            return (int)mh$.invokeExact(pStg, pclsid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WriteClassStg {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("WriteClassStg"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT WriteClassStg(LPSTORAGE pStg, const IID *const rclsid)
     * }
     */
    public static FunctionDescriptor WriteClassStg$descriptor() {
        return WriteClassStg.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT WriteClassStg(LPSTORAGE pStg, const IID *const rclsid)
     * }
     */
    public static MethodHandle WriteClassStg$handle() {
        return WriteClassStg.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT WriteClassStg(LPSTORAGE pStg, const IID *const rclsid)
     * }
     */
    public static int WriteClassStg(MemorySegment pStg, MemorySegment rclsid) {
        var mh$ = WriteClassStg.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WriteClassStg", pStg, rclsid);
            }
            return (int)mh$.invokeExact(pStg, rclsid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ReadClassStm {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ReadClassStm"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT ReadClassStm(LPSTREAM pStm, CLSID *pclsid)
     * }
     */
    public static FunctionDescriptor ReadClassStm$descriptor() {
        return ReadClassStm.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT ReadClassStm(LPSTREAM pStm, CLSID *pclsid)
     * }
     */
    public static MethodHandle ReadClassStm$handle() {
        return ReadClassStm.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT ReadClassStm(LPSTREAM pStm, CLSID *pclsid)
     * }
     */
    public static int ReadClassStm(MemorySegment pStm, MemorySegment pclsid) {
        var mh$ = ReadClassStm.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ReadClassStm", pStm, pclsid);
            }
            return (int)mh$.invokeExact(pStm, pclsid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WriteClassStm {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("WriteClassStm"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT WriteClassStm(LPSTREAM pStm, const IID *const rclsid)
     * }
     */
    public static FunctionDescriptor WriteClassStm$descriptor() {
        return WriteClassStm.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT WriteClassStm(LPSTREAM pStm, const IID *const rclsid)
     * }
     */
    public static MethodHandle WriteClassStm$handle() {
        return WriteClassStm.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT WriteClassStm(LPSTREAM pStm, const IID *const rclsid)
     * }
     */
    public static int WriteClassStm(MemorySegment pStm, MemorySegment rclsid) {
        var mh$ = WriteClassStm.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WriteClassStm", pStm, rclsid);
            }
            return (int)mh$.invokeExact(pStm, rclsid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetHGlobalFromILockBytes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("GetHGlobalFromILockBytes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT GetHGlobalFromILockBytes(LPLOCKBYTES plkbyt, HGLOBAL *phglobal)
     * }
     */
    public static FunctionDescriptor GetHGlobalFromILockBytes$descriptor() {
        return GetHGlobalFromILockBytes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT GetHGlobalFromILockBytes(LPLOCKBYTES plkbyt, HGLOBAL *phglobal)
     * }
     */
    public static MethodHandle GetHGlobalFromILockBytes$handle() {
        return GetHGlobalFromILockBytes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT GetHGlobalFromILockBytes(LPLOCKBYTES plkbyt, HGLOBAL *phglobal)
     * }
     */
    public static int GetHGlobalFromILockBytes(MemorySegment plkbyt, MemorySegment phglobal) {
        var mh$ = GetHGlobalFromILockBytes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetHGlobalFromILockBytes", plkbyt, phglobal);
            }
            return (int)mh$.invokeExact(plkbyt, phglobal);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateILockBytesOnHGlobal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CreateILockBytesOnHGlobal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateILockBytesOnHGlobal(HGLOBAL hGlobal, BOOL fDeleteOnRelease, LPLOCKBYTES *pplkbyt)
     * }
     */
    public static FunctionDescriptor CreateILockBytesOnHGlobal$descriptor() {
        return CreateILockBytesOnHGlobal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateILockBytesOnHGlobal(HGLOBAL hGlobal, BOOL fDeleteOnRelease, LPLOCKBYTES *pplkbyt)
     * }
     */
    public static MethodHandle CreateILockBytesOnHGlobal$handle() {
        return CreateILockBytesOnHGlobal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CreateILockBytesOnHGlobal(HGLOBAL hGlobal, BOOL fDeleteOnRelease, LPLOCKBYTES *pplkbyt)
     * }
     */
    public static int CreateILockBytesOnHGlobal(MemorySegment hGlobal, int fDeleteOnRelease, MemorySegment pplkbyt) {
        var mh$ = CreateILockBytesOnHGlobal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateILockBytesOnHGlobal", hGlobal, fDeleteOnRelease, pplkbyt);
            }
            return (int)mh$.invokeExact(hGlobal, fDeleteOnRelease, pplkbyt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetConvertStg {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("GetConvertStg"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT GetConvertStg(LPSTORAGE pStg)
     * }
     */
    public static FunctionDescriptor GetConvertStg$descriptor() {
        return GetConvertStg.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT GetConvertStg(LPSTORAGE pStg)
     * }
     */
    public static MethodHandle GetConvertStg$handle() {
        return GetConvertStg.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT GetConvertStg(LPSTORAGE pStg)
     * }
     */
    public static int GetConvertStg(MemorySegment pStg) {
        var mh$ = GetConvertStg.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetConvertStg", pStg);
            }
            return (int)mh$.invokeExact(pStg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int COINIT_APARTMENTTHREADED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagCOINIT.COINIT_APARTMENTTHREADED = 2
     * }
     */
    public static int COINIT_APARTMENTTHREADED() {
        return COINIT_APARTMENTTHREADED;
    }
    private static final int COINIT_MULTITHREADED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagCOINIT.COINIT_MULTITHREADED = 0
     * }
     */
    public static int COINIT_MULTITHREADED() {
        return COINIT_MULTITHREADED;
    }
    private static final int COINIT_DISABLE_OLE1DDE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagCOINIT.COINIT_DISABLE_OLE1DDE = 4
     * }
     */
    public static int COINIT_DISABLE_OLE1DDE() {
        return COINIT_DISABLE_OLE1DDE;
    }
    private static final int COINIT_SPEED_OVER_MEMORY = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagCOINIT.COINIT_SPEED_OVER_MEMORY = 8
     * }
     */
    public static int COINIT_SPEED_OVER_MEMORY() {
        return COINIT_SPEED_OVER_MEMORY;
    }

    private static class CoBuildVersion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CoBuildVersion"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern DWORD CoBuildVersion()
     * }
     */
    public static FunctionDescriptor CoBuildVersion$descriptor() {
        return CoBuildVersion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern DWORD CoBuildVersion()
     * }
     */
    public static MethodHandle CoBuildVersion$handle() {
        return CoBuildVersion.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern DWORD CoBuildVersion()
     * }
     */
    public static int CoBuildVersion() {
        var mh$ = CoBuildVersion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoBuildVersion");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoInitialize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CoInitialize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInitialize(LPVOID pvReserved)
     * }
     */
    public static FunctionDescriptor CoInitialize$descriptor() {
        return CoInitialize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInitialize(LPVOID pvReserved)
     * }
     */
    public static MethodHandle CoInitialize$handle() {
        return CoInitialize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CoInitialize(LPVOID pvReserved)
     * }
     */
    public static int CoInitialize(MemorySegment pvReserved) {
        var mh$ = CoInitialize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInitialize", pvReserved);
            }
            return (int)mh$.invokeExact(pvReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoRegisterMallocSpy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CoRegisterMallocSpy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoRegisterMallocSpy(LPMALLOCSPY pMallocSpy)
     * }
     */
    public static FunctionDescriptor CoRegisterMallocSpy$descriptor() {
        return CoRegisterMallocSpy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoRegisterMallocSpy(LPMALLOCSPY pMallocSpy)
     * }
     */
    public static MethodHandle CoRegisterMallocSpy$handle() {
        return CoRegisterMallocSpy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CoRegisterMallocSpy(LPMALLOCSPY pMallocSpy)
     * }
     */
    public static int CoRegisterMallocSpy(MemorySegment pMallocSpy) {
        var mh$ = CoRegisterMallocSpy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoRegisterMallocSpy", pMallocSpy);
            }
            return (int)mh$.invokeExact(pMallocSpy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoRevokeMallocSpy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CoRevokeMallocSpy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoRevokeMallocSpy()
     * }
     */
    public static FunctionDescriptor CoRevokeMallocSpy$descriptor() {
        return CoRevokeMallocSpy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoRevokeMallocSpy()
     * }
     */
    public static MethodHandle CoRevokeMallocSpy$handle() {
        return CoRevokeMallocSpy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CoRevokeMallocSpy()
     * }
     */
    public static int CoRevokeMallocSpy() {
        var mh$ = CoRevokeMallocSpy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoRevokeMallocSpy");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoCreateStandardMalloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CoCreateStandardMalloc"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoCreateStandardMalloc(DWORD memctx, IMalloc **ppMalloc)
     * }
     */
    public static FunctionDescriptor CoCreateStandardMalloc$descriptor() {
        return CoCreateStandardMalloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoCreateStandardMalloc(DWORD memctx, IMalloc **ppMalloc)
     * }
     */
    public static MethodHandle CoCreateStandardMalloc$handle() {
        return CoCreateStandardMalloc.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CoCreateStandardMalloc(DWORD memctx, IMalloc **ppMalloc)
     * }
     */
    public static int CoCreateStandardMalloc(int memctx, MemorySegment ppMalloc) {
        var mh$ = CoCreateStandardMalloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoCreateStandardMalloc", memctx, ppMalloc);
            }
            return (int)mh$.invokeExact(memctx, ppMalloc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoRegisterInitializeSpy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CoRegisterInitializeSpy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoRegisterInitializeSpy(IInitializeSpy *pSpy, ULARGE_INTEGER *puliCookie)
     * }
     */
    public static FunctionDescriptor CoRegisterInitializeSpy$descriptor() {
        return CoRegisterInitializeSpy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoRegisterInitializeSpy(IInitializeSpy *pSpy, ULARGE_INTEGER *puliCookie)
     * }
     */
    public static MethodHandle CoRegisterInitializeSpy$handle() {
        return CoRegisterInitializeSpy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CoRegisterInitializeSpy(IInitializeSpy *pSpy, ULARGE_INTEGER *puliCookie)
     * }
     */
    public static int CoRegisterInitializeSpy(MemorySegment pSpy, MemorySegment puliCookie) {
        var mh$ = CoRegisterInitializeSpy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoRegisterInitializeSpy", pSpy, puliCookie);
            }
            return (int)mh$.invokeExact(pSpy, puliCookie);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoRevokeInitializeSpy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            _ULARGE_INTEGER.layout()
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CoRevokeInitializeSpy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoRevokeInitializeSpy(ULARGE_INTEGER uliCookie)
     * }
     */
    public static FunctionDescriptor CoRevokeInitializeSpy$descriptor() {
        return CoRevokeInitializeSpy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoRevokeInitializeSpy(ULARGE_INTEGER uliCookie)
     * }
     */
    public static MethodHandle CoRevokeInitializeSpy$handle() {
        return CoRevokeInitializeSpy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CoRevokeInitializeSpy(ULARGE_INTEGER uliCookie)
     * }
     */
    public static int CoRevokeInitializeSpy(MemorySegment uliCookie) {
        var mh$ = CoRevokeInitializeSpy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoRevokeInitializeSpy", uliCookie);
            }
            return (int)mh$.invokeExact(uliCookie);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int SD_LAUNCHPERMISSIONS = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagCOMSD.SD_LAUNCHPERMISSIONS = 0
     * }
     */
    public static int SD_LAUNCHPERMISSIONS() {
        return SD_LAUNCHPERMISSIONS;
    }
    private static final int SD_ACCESSPERMISSIONS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagCOMSD.SD_ACCESSPERMISSIONS = 1
     * }
     */
    public static int SD_ACCESSPERMISSIONS() {
        return SD_ACCESSPERMISSIONS;
    }
    private static final int SD_LAUNCHRESTRICTIONS = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagCOMSD.SD_LAUNCHRESTRICTIONS = 2
     * }
     */
    public static int SD_LAUNCHRESTRICTIONS() {
        return SD_LAUNCHRESTRICTIONS;
    }
    private static final int SD_ACCESSRESTRICTIONS = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagCOMSD.SD_ACCESSRESTRICTIONS = 3
     * }
     */
    public static int SD_ACCESSRESTRICTIONS() {
        return SD_ACCESSRESTRICTIONS;
    }

    private static class CoGetSystemSecurityPermissions {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CoGetSystemSecurityPermissions"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoGetSystemSecurityPermissions(COMSD comSDType, PSECURITY_DESCRIPTOR *ppSD)
     * }
     */
    public static FunctionDescriptor CoGetSystemSecurityPermissions$descriptor() {
        return CoGetSystemSecurityPermissions.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoGetSystemSecurityPermissions(COMSD comSDType, PSECURITY_DESCRIPTOR *ppSD)
     * }
     */
    public static MethodHandle CoGetSystemSecurityPermissions$handle() {
        return CoGetSystemSecurityPermissions.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CoGetSystemSecurityPermissions(COMSD comSDType, PSECURITY_DESCRIPTOR *ppSD)
     * }
     */
    public static int CoGetSystemSecurityPermissions(int comSDType, MemorySegment ppSD) {
        var mh$ = CoGetSystemSecurityPermissions.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoGetSystemSecurityPermissions", comSDType, ppSD);
            }
            return (int)mh$.invokeExact(comSDType, ppSD);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoLoadLibrary {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CoLoadLibrary"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HINSTANCE CoLoadLibrary(LPOLESTR lpszLibName, BOOL bAutoFree)
     * }
     */
    public static FunctionDescriptor CoLoadLibrary$descriptor() {
        return CoLoadLibrary.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HINSTANCE CoLoadLibrary(LPOLESTR lpszLibName, BOOL bAutoFree)
     * }
     */
    public static MethodHandle CoLoadLibrary$handle() {
        return CoLoadLibrary.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HINSTANCE CoLoadLibrary(LPOLESTR lpszLibName, BOOL bAutoFree)
     * }
     */
    public static MemorySegment CoLoadLibrary(MemorySegment lpszLibName, int bAutoFree) {
        var mh$ = CoLoadLibrary.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoLoadLibrary", lpszLibName, bAutoFree);
            }
            return (MemorySegment)mh$.invokeExact(lpszLibName, bAutoFree);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoFreeLibrary {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CoFreeLibrary"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void CoFreeLibrary(HINSTANCE hInst)
     * }
     */
    public static FunctionDescriptor CoFreeLibrary$descriptor() {
        return CoFreeLibrary.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void CoFreeLibrary(HINSTANCE hInst)
     * }
     */
    public static MethodHandle CoFreeLibrary$handle() {
        return CoFreeLibrary.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void CoFreeLibrary(HINSTANCE hInst)
     * }
     */
    public static void CoFreeLibrary(MemorySegment hInst) {
        var mh$ = CoFreeLibrary.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoFreeLibrary", hInst);
            }
            mh$.invokeExact(hInst);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoFreeAllLibraries {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CoFreeAllLibraries"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void CoFreeAllLibraries()
     * }
     */
    public static FunctionDescriptor CoFreeAllLibraries$descriptor() {
        return CoFreeAllLibraries.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void CoFreeAllLibraries()
     * }
     */
    public static MethodHandle CoFreeAllLibraries$handle() {
        return CoFreeAllLibraries.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void CoFreeAllLibraries()
     * }
     */
    public static void CoFreeAllLibraries() {
        var mh$ = CoFreeAllLibraries.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoFreeAllLibraries");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoGetInstanceFromFile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CoGetInstanceFromFile"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoGetInstanceFromFile(COSERVERINFO *pServerInfo, CLSID *pClsid, IUnknown *punkOuter, DWORD dwClsCtx, DWORD grfMode, OLECHAR *pwszName, DWORD dwCount, MULTI_QI *pResults)
     * }
     */
    public static FunctionDescriptor CoGetInstanceFromFile$descriptor() {
        return CoGetInstanceFromFile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoGetInstanceFromFile(COSERVERINFO *pServerInfo, CLSID *pClsid, IUnknown *punkOuter, DWORD dwClsCtx, DWORD grfMode, OLECHAR *pwszName, DWORD dwCount, MULTI_QI *pResults)
     * }
     */
    public static MethodHandle CoGetInstanceFromFile$handle() {
        return CoGetInstanceFromFile.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CoGetInstanceFromFile(COSERVERINFO *pServerInfo, CLSID *pClsid, IUnknown *punkOuter, DWORD dwClsCtx, DWORD grfMode, OLECHAR *pwszName, DWORD dwCount, MULTI_QI *pResults)
     * }
     */
    public static int CoGetInstanceFromFile(MemorySegment pServerInfo, MemorySegment pClsid, MemorySegment punkOuter, int dwClsCtx, int grfMode, MemorySegment pwszName, int dwCount, MemorySegment pResults) {
        var mh$ = CoGetInstanceFromFile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoGetInstanceFromFile", pServerInfo, pClsid, punkOuter, dwClsCtx, grfMode, pwszName, dwCount, pResults);
            }
            return (int)mh$.invokeExact(pServerInfo, pClsid, punkOuter, dwClsCtx, grfMode, pwszName, dwCount, pResults);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoGetInstanceFromIStorage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CoGetInstanceFromIStorage"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoGetInstanceFromIStorage(COSERVERINFO *pServerInfo, CLSID *pClsid, IUnknown *punkOuter, DWORD dwClsCtx, struct IStorage *pstg, DWORD dwCount, MULTI_QI *pResults)
     * }
     */
    public static FunctionDescriptor CoGetInstanceFromIStorage$descriptor() {
        return CoGetInstanceFromIStorage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoGetInstanceFromIStorage(COSERVERINFO *pServerInfo, CLSID *pClsid, IUnknown *punkOuter, DWORD dwClsCtx, struct IStorage *pstg, DWORD dwCount, MULTI_QI *pResults)
     * }
     */
    public static MethodHandle CoGetInstanceFromIStorage$handle() {
        return CoGetInstanceFromIStorage.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CoGetInstanceFromIStorage(COSERVERINFO *pServerInfo, CLSID *pClsid, IUnknown *punkOuter, DWORD dwClsCtx, struct IStorage *pstg, DWORD dwCount, MULTI_QI *pResults)
     * }
     */
    public static int CoGetInstanceFromIStorage(MemorySegment pServerInfo, MemorySegment pClsid, MemorySegment punkOuter, int dwClsCtx, MemorySegment pstg, int dwCount, MemorySegment pResults) {
        var mh$ = CoGetInstanceFromIStorage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoGetInstanceFromIStorage", pServerInfo, pClsid, punkOuter, dwClsCtx, pstg, dwCount, pResults);
            }
            return (int)mh$.invokeExact(pServerInfo, pClsid, punkOuter, dwClsCtx, pstg, dwCount, pResults);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoAllowSetForegroundWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CoAllowSetForegroundWindow"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoAllowSetForegroundWindow(IUnknown *pUnk, LPVOID lpvReserved)
     * }
     */
    public static FunctionDescriptor CoAllowSetForegroundWindow$descriptor() {
        return CoAllowSetForegroundWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoAllowSetForegroundWindow(IUnknown *pUnk, LPVOID lpvReserved)
     * }
     */
    public static MethodHandle CoAllowSetForegroundWindow$handle() {
        return CoAllowSetForegroundWindow.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CoAllowSetForegroundWindow(IUnknown *pUnk, LPVOID lpvReserved)
     * }
     */
    public static int CoAllowSetForegroundWindow(MemorySegment pUnk, MemorySegment lpvReserved) {
        var mh$ = CoAllowSetForegroundWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoAllowSetForegroundWindow", pUnk, lpvReserved);
            }
            return (int)mh$.invokeExact(pUnk, lpvReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DcomChannelSetHResult {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("DcomChannelSetHResult"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT DcomChannelSetHResult(LPVOID pvReserved, ULONG *pulReserved, HRESULT appsHR)
     * }
     */
    public static FunctionDescriptor DcomChannelSetHResult$descriptor() {
        return DcomChannelSetHResult.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT DcomChannelSetHResult(LPVOID pvReserved, ULONG *pulReserved, HRESULT appsHR)
     * }
     */
    public static MethodHandle DcomChannelSetHResult$handle() {
        return DcomChannelSetHResult.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT DcomChannelSetHResult(LPVOID pvReserved, ULONG *pulReserved, HRESULT appsHR)
     * }
     */
    public static int DcomChannelSetHResult(MemorySegment pvReserved, MemorySegment pulReserved, int appsHR) {
        var mh$ = DcomChannelSetHResult.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DcomChannelSetHResult", pvReserved, pulReserved, appsHR);
            }
            return (int)mh$.invokeExact(pvReserved, pulReserved, appsHR);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoIsOle1Class {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CoIsOle1Class"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern BOOL CoIsOle1Class(const IID *const rclsid)
     * }
     */
    public static FunctionDescriptor CoIsOle1Class$descriptor() {
        return CoIsOle1Class.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern BOOL CoIsOle1Class(const IID *const rclsid)
     * }
     */
    public static MethodHandle CoIsOle1Class$handle() {
        return CoIsOle1Class.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern BOOL CoIsOle1Class(const IID *const rclsid)
     * }
     */
    public static int CoIsOle1Class(MemorySegment rclsid) {
        var mh$ = CoIsOle1Class.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoIsOle1Class", rclsid);
            }
            return (int)mh$.invokeExact(rclsid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoFileTimeToDosDateTime {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CoFileTimeToDosDateTime"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern BOOL CoFileTimeToDosDateTime(FILETIME *lpFileTime, LPWORD lpDosDate, LPWORD lpDosTime)
     * }
     */
    public static FunctionDescriptor CoFileTimeToDosDateTime$descriptor() {
        return CoFileTimeToDosDateTime.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern BOOL CoFileTimeToDosDateTime(FILETIME *lpFileTime, LPWORD lpDosDate, LPWORD lpDosTime)
     * }
     */
    public static MethodHandle CoFileTimeToDosDateTime$handle() {
        return CoFileTimeToDosDateTime.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern BOOL CoFileTimeToDosDateTime(FILETIME *lpFileTime, LPWORD lpDosDate, LPWORD lpDosTime)
     * }
     */
    public static int CoFileTimeToDosDateTime(MemorySegment lpFileTime, MemorySegment lpDosDate, MemorySegment lpDosTime) {
        var mh$ = CoFileTimeToDosDateTime.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoFileTimeToDosDateTime", lpFileTime, lpDosDate, lpDosTime);
            }
            return (int)mh$.invokeExact(lpFileTime, lpDosDate, lpDosTime);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoDosDateTimeToFileTime {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_SHORT,
            C_SHORT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CoDosDateTimeToFileTime"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern BOOL CoDosDateTimeToFileTime(WORD nDosDate, WORD nDosTime, FILETIME *lpFileTime)
     * }
     */
    public static FunctionDescriptor CoDosDateTimeToFileTime$descriptor() {
        return CoDosDateTimeToFileTime.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern BOOL CoDosDateTimeToFileTime(WORD nDosDate, WORD nDosTime, FILETIME *lpFileTime)
     * }
     */
    public static MethodHandle CoDosDateTimeToFileTime$handle() {
        return CoDosDateTimeToFileTime.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern BOOL CoDosDateTimeToFileTime(WORD nDosDate, WORD nDosTime, FILETIME *lpFileTime)
     * }
     */
    public static int CoDosDateTimeToFileTime(short nDosDate, short nDosTime, MemorySegment lpFileTime) {
        var mh$ = CoDosDateTimeToFileTime.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoDosDateTimeToFileTime", nDosDate, nDosTime, lpFileTime);
            }
            return (int)mh$.invokeExact(nDosDate, nDosTime, lpFileTime);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoRegisterMessageFilter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CoRegisterMessageFilter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoRegisterMessageFilter(LPMESSAGEFILTER lpMessageFilter, LPMESSAGEFILTER *lplpMessageFilter)
     * }
     */
    public static FunctionDescriptor CoRegisterMessageFilter$descriptor() {
        return CoRegisterMessageFilter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoRegisterMessageFilter(LPMESSAGEFILTER lpMessageFilter, LPMESSAGEFILTER *lplpMessageFilter)
     * }
     */
    public static MethodHandle CoRegisterMessageFilter$handle() {
        return CoRegisterMessageFilter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CoRegisterMessageFilter(LPMESSAGEFILTER lpMessageFilter, LPMESSAGEFILTER *lplpMessageFilter)
     * }
     */
    public static int CoRegisterMessageFilter(MemorySegment lpMessageFilter, MemorySegment lplpMessageFilter) {
        var mh$ = CoRegisterMessageFilter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoRegisterMessageFilter", lpMessageFilter, lplpMessageFilter);
            }
            return (int)mh$.invokeExact(lpMessageFilter, lplpMessageFilter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoRegisterChannelHook {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CoRegisterChannelHook"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoRegisterChannelHook(const GUID *const ExtensionUuid, IChannelHook *pChannelHook)
     * }
     */
    public static FunctionDescriptor CoRegisterChannelHook$descriptor() {
        return CoRegisterChannelHook.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoRegisterChannelHook(const GUID *const ExtensionUuid, IChannelHook *pChannelHook)
     * }
     */
    public static MethodHandle CoRegisterChannelHook$handle() {
        return CoRegisterChannelHook.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CoRegisterChannelHook(const GUID *const ExtensionUuid, IChannelHook *pChannelHook)
     * }
     */
    public static int CoRegisterChannelHook(MemorySegment ExtensionUuid, MemorySegment pChannelHook) {
        var mh$ = CoRegisterChannelHook.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoRegisterChannelHook", ExtensionUuid, pChannelHook);
            }
            return (int)mh$.invokeExact(ExtensionUuid, pChannelHook);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoTreatAsClass {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CoTreatAsClass"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoTreatAsClass(const IID *const clsidOld, const IID *const clsidNew)
     * }
     */
    public static FunctionDescriptor CoTreatAsClass$descriptor() {
        return CoTreatAsClass.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoTreatAsClass(const IID *const clsidOld, const IID *const clsidNew)
     * }
     */
    public static MethodHandle CoTreatAsClass$handle() {
        return CoTreatAsClass.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CoTreatAsClass(const IID *const clsidOld, const IID *const clsidNew)
     * }
     */
    public static int CoTreatAsClass(MemorySegment clsidOld, MemorySegment clsidNew) {
        var mh$ = CoTreatAsClass.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoTreatAsClass", clsidOld, clsidNew);
            }
            return (int)mh$.invokeExact(clsidOld, clsidNew);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateDataAdviseHolder {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CreateDataAdviseHolder"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateDataAdviseHolder(LPDATAADVISEHOLDER *ppDAHolder)
     * }
     */
    public static FunctionDescriptor CreateDataAdviseHolder$descriptor() {
        return CreateDataAdviseHolder.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateDataAdviseHolder(LPDATAADVISEHOLDER *ppDAHolder)
     * }
     */
    public static MethodHandle CreateDataAdviseHolder$handle() {
        return CreateDataAdviseHolder.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CreateDataAdviseHolder(LPDATAADVISEHOLDER *ppDAHolder)
     * }
     */
    public static int CreateDataAdviseHolder(MemorySegment ppDAHolder) {
        var mh$ = CreateDataAdviseHolder.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateDataAdviseHolder", ppDAHolder);
            }
            return (int)mh$.invokeExact(ppDAHolder);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateDataCache {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CreateDataCache"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateDataCache(LPUNKNOWN pUnkOuter, const IID *const rclsid, const IID *const iid, LPVOID *ppv)
     * }
     */
    public static FunctionDescriptor CreateDataCache$descriptor() {
        return CreateDataCache.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateDataCache(LPUNKNOWN pUnkOuter, const IID *const rclsid, const IID *const iid, LPVOID *ppv)
     * }
     */
    public static MethodHandle CreateDataCache$handle() {
        return CreateDataCache.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CreateDataCache(LPUNKNOWN pUnkOuter, const IID *const rclsid, const IID *const iid, LPVOID *ppv)
     * }
     */
    public static int CreateDataCache(MemorySegment pUnkOuter, MemorySegment rclsid, MemorySegment iid, MemorySegment ppv) {
        var mh$ = CreateDataCache.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateDataCache", pUnkOuter, rclsid, iid, ppv);
            }
            return (int)mh$.invokeExact(pUnkOuter, rclsid, iid, ppv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StgOpenAsyncDocfileOnIFillLockBytes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("StgOpenAsyncDocfileOnIFillLockBytes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT StgOpenAsyncDocfileOnIFillLockBytes(IFillLockBytes *pflb, DWORD grfMode, DWORD asyncFlags, IStorage **ppstgOpen)
     * }
     */
    public static FunctionDescriptor StgOpenAsyncDocfileOnIFillLockBytes$descriptor() {
        return StgOpenAsyncDocfileOnIFillLockBytes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT StgOpenAsyncDocfileOnIFillLockBytes(IFillLockBytes *pflb, DWORD grfMode, DWORD asyncFlags, IStorage **ppstgOpen)
     * }
     */
    public static MethodHandle StgOpenAsyncDocfileOnIFillLockBytes$handle() {
        return StgOpenAsyncDocfileOnIFillLockBytes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT StgOpenAsyncDocfileOnIFillLockBytes(IFillLockBytes *pflb, DWORD grfMode, DWORD asyncFlags, IStorage **ppstgOpen)
     * }
     */
    public static int StgOpenAsyncDocfileOnIFillLockBytes(MemorySegment pflb, int grfMode, int asyncFlags, MemorySegment ppstgOpen) {
        var mh$ = StgOpenAsyncDocfileOnIFillLockBytes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StgOpenAsyncDocfileOnIFillLockBytes", pflb, grfMode, asyncFlags, ppstgOpen);
            }
            return (int)mh$.invokeExact(pflb, grfMode, asyncFlags, ppstgOpen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StgGetIFillLockBytesOnILockBytes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("StgGetIFillLockBytesOnILockBytes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT StgGetIFillLockBytesOnILockBytes(ILockBytes *pilb, IFillLockBytes **ppflb)
     * }
     */
    public static FunctionDescriptor StgGetIFillLockBytesOnILockBytes$descriptor() {
        return StgGetIFillLockBytesOnILockBytes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT StgGetIFillLockBytesOnILockBytes(ILockBytes *pilb, IFillLockBytes **ppflb)
     * }
     */
    public static MethodHandle StgGetIFillLockBytesOnILockBytes$handle() {
        return StgGetIFillLockBytesOnILockBytes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT StgGetIFillLockBytesOnILockBytes(ILockBytes *pilb, IFillLockBytes **ppflb)
     * }
     */
    public static int StgGetIFillLockBytesOnILockBytes(MemorySegment pilb, MemorySegment ppflb) {
        var mh$ = StgGetIFillLockBytesOnILockBytes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StgGetIFillLockBytesOnILockBytes", pilb, ppflb);
            }
            return (int)mh$.invokeExact(pilb, ppflb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StgGetIFillLockBytesOnFile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("StgGetIFillLockBytesOnFile"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT StgGetIFillLockBytesOnFile(const OLECHAR *pwcsName, IFillLockBytes **ppflb)
     * }
     */
    public static FunctionDescriptor StgGetIFillLockBytesOnFile$descriptor() {
        return StgGetIFillLockBytesOnFile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT StgGetIFillLockBytesOnFile(const OLECHAR *pwcsName, IFillLockBytes **ppflb)
     * }
     */
    public static MethodHandle StgGetIFillLockBytesOnFile$handle() {
        return StgGetIFillLockBytesOnFile.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT StgGetIFillLockBytesOnFile(const OLECHAR *pwcsName, IFillLockBytes **ppflb)
     * }
     */
    public static int StgGetIFillLockBytesOnFile(MemorySegment pwcsName, MemorySegment ppflb) {
        var mh$ = StgGetIFillLockBytesOnFile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StgGetIFillLockBytesOnFile", pwcsName, ppflb);
            }
            return (int)mh$.invokeExact(pwcsName, ppflb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StgOpenLayoutDocfile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("StgOpenLayoutDocfile"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT StgOpenLayoutDocfile(const OLECHAR *pwcsDfName, DWORD grfMode, DWORD reserved, IStorage **ppstgOpen)
     * }
     */
    public static FunctionDescriptor StgOpenLayoutDocfile$descriptor() {
        return StgOpenLayoutDocfile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT StgOpenLayoutDocfile(const OLECHAR *pwcsDfName, DWORD grfMode, DWORD reserved, IStorage **ppstgOpen)
     * }
     */
    public static MethodHandle StgOpenLayoutDocfile$handle() {
        return StgOpenLayoutDocfile.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT StgOpenLayoutDocfile(const OLECHAR *pwcsDfName, DWORD grfMode, DWORD reserved, IStorage **ppstgOpen)
     * }
     */
    public static int StgOpenLayoutDocfile(MemorySegment pwcsDfName, int grfMode, int reserved, MemorySegment ppstgOpen) {
        var mh$ = StgOpenLayoutDocfile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StgOpenLayoutDocfile", pwcsDfName, grfMode, reserved, ppstgOpen);
            }
            return (int)mh$.invokeExact(pwcsDfName, grfMode, reserved, ppstgOpen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoInstall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CoInstall"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInstall(IBindCtx *pbc, DWORD dwFlags, uCLSSPEC *pClassSpec, QUERYCONTEXT *pQuery, LPWSTR pszCodeBase)
     * }
     */
    public static FunctionDescriptor CoInstall$descriptor() {
        return CoInstall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInstall(IBindCtx *pbc, DWORD dwFlags, uCLSSPEC *pClassSpec, QUERYCONTEXT *pQuery, LPWSTR pszCodeBase)
     * }
     */
    public static MethodHandle CoInstall$handle() {
        return CoInstall.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CoInstall(IBindCtx *pbc, DWORD dwFlags, uCLSSPEC *pClassSpec, QUERYCONTEXT *pQuery, LPWSTR pszCodeBase)
     * }
     */
    public static int CoInstall(MemorySegment pbc, int dwFlags, MemorySegment pClassSpec, MemorySegment pQuery, MemorySegment pszCodeBase) {
        var mh$ = CoInstall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInstall", pbc, dwFlags, pClassSpec, pQuery, pszCodeBase);
            }
            return (int)mh$.invokeExact(pbc, dwFlags, pClassSpec, pQuery, pszCodeBase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BindMoniker {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("BindMoniker"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT BindMoniker(LPMONIKER pmk, DWORD grfOpt, const IID *const iidResult, LPVOID *ppvResult)
     * }
     */
    public static FunctionDescriptor BindMoniker$descriptor() {
        return BindMoniker.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT BindMoniker(LPMONIKER pmk, DWORD grfOpt, const IID *const iidResult, LPVOID *ppvResult)
     * }
     */
    public static MethodHandle BindMoniker$handle() {
        return BindMoniker.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT BindMoniker(LPMONIKER pmk, DWORD grfOpt, const IID *const iidResult, LPVOID *ppvResult)
     * }
     */
    public static int BindMoniker(MemorySegment pmk, int grfOpt, MemorySegment iidResult, MemorySegment ppvResult) {
        var mh$ = BindMoniker.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BindMoniker", pmk, grfOpt, iidResult, ppvResult);
            }
            return (int)mh$.invokeExact(pmk, grfOpt, iidResult, ppvResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoGetObject {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CoGetObject"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoGetObject(LPCWSTR pszName, BIND_OPTS *pBindOptions, const IID *const riid, void **ppv)
     * }
     */
    public static FunctionDescriptor CoGetObject$descriptor() {
        return CoGetObject.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoGetObject(LPCWSTR pszName, BIND_OPTS *pBindOptions, const IID *const riid, void **ppv)
     * }
     */
    public static MethodHandle CoGetObject$handle() {
        return CoGetObject.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CoGetObject(LPCWSTR pszName, BIND_OPTS *pBindOptions, const IID *const riid, void **ppv)
     * }
     */
    public static int CoGetObject(MemorySegment pszName, MemorySegment pBindOptions, MemorySegment riid, MemorySegment ppv) {
        var mh$ = CoGetObject.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoGetObject", pszName, pBindOptions, riid, ppv);
            }
            return (int)mh$.invokeExact(pszName, pBindOptions, riid, ppv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MkParseDisplayName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("MkParseDisplayName"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT MkParseDisplayName(LPBC pbc, LPCOLESTR szUserName, ULONG *pchEaten, LPMONIKER *ppmk)
     * }
     */
    public static FunctionDescriptor MkParseDisplayName$descriptor() {
        return MkParseDisplayName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT MkParseDisplayName(LPBC pbc, LPCOLESTR szUserName, ULONG *pchEaten, LPMONIKER *ppmk)
     * }
     */
    public static MethodHandle MkParseDisplayName$handle() {
        return MkParseDisplayName.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT MkParseDisplayName(LPBC pbc, LPCOLESTR szUserName, ULONG *pchEaten, LPMONIKER *ppmk)
     * }
     */
    public static int MkParseDisplayName(MemorySegment pbc, MemorySegment szUserName, MemorySegment pchEaten, MemorySegment ppmk) {
        var mh$ = MkParseDisplayName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MkParseDisplayName", pbc, szUserName, pchEaten, ppmk);
            }
            return (int)mh$.invokeExact(pbc, szUserName, pchEaten, ppmk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MonikerRelativePathTo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("MonikerRelativePathTo"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT MonikerRelativePathTo(LPMONIKER pmkSrc, LPMONIKER pmkDest, LPMONIKER *ppmkRelPath, BOOL dwReserved)
     * }
     */
    public static FunctionDescriptor MonikerRelativePathTo$descriptor() {
        return MonikerRelativePathTo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT MonikerRelativePathTo(LPMONIKER pmkSrc, LPMONIKER pmkDest, LPMONIKER *ppmkRelPath, BOOL dwReserved)
     * }
     */
    public static MethodHandle MonikerRelativePathTo$handle() {
        return MonikerRelativePathTo.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT MonikerRelativePathTo(LPMONIKER pmkSrc, LPMONIKER pmkDest, LPMONIKER *ppmkRelPath, BOOL dwReserved)
     * }
     */
    public static int MonikerRelativePathTo(MemorySegment pmkSrc, MemorySegment pmkDest, MemorySegment ppmkRelPath, int dwReserved) {
        var mh$ = MonikerRelativePathTo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MonikerRelativePathTo", pmkSrc, pmkDest, ppmkRelPath, dwReserved);
            }
            return (int)mh$.invokeExact(pmkSrc, pmkDest, ppmkRelPath, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MonikerCommonPrefixWith {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("MonikerCommonPrefixWith"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT MonikerCommonPrefixWith(LPMONIKER pmkThis, LPMONIKER pmkOther, LPMONIKER *ppmkCommon)
     * }
     */
    public static FunctionDescriptor MonikerCommonPrefixWith$descriptor() {
        return MonikerCommonPrefixWith.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT MonikerCommonPrefixWith(LPMONIKER pmkThis, LPMONIKER pmkOther, LPMONIKER *ppmkCommon)
     * }
     */
    public static MethodHandle MonikerCommonPrefixWith$handle() {
        return MonikerCommonPrefixWith.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT MonikerCommonPrefixWith(LPMONIKER pmkThis, LPMONIKER pmkOther, LPMONIKER *ppmkCommon)
     * }
     */
    public static int MonikerCommonPrefixWith(MemorySegment pmkThis, MemorySegment pmkOther, MemorySegment ppmkCommon) {
        var mh$ = MonikerCommonPrefixWith.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MonikerCommonPrefixWith", pmkThis, pmkOther, ppmkCommon);
            }
            return (int)mh$.invokeExact(pmkThis, pmkOther, ppmkCommon);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateBindCtx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CreateBindCtx"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateBindCtx(DWORD reserved, LPBC *ppbc)
     * }
     */
    public static FunctionDescriptor CreateBindCtx$descriptor() {
        return CreateBindCtx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateBindCtx(DWORD reserved, LPBC *ppbc)
     * }
     */
    public static MethodHandle CreateBindCtx$handle() {
        return CreateBindCtx.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CreateBindCtx(DWORD reserved, LPBC *ppbc)
     * }
     */
    public static int CreateBindCtx(int reserved, MemorySegment ppbc) {
        var mh$ = CreateBindCtx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateBindCtx", reserved, ppbc);
            }
            return (int)mh$.invokeExact(reserved, ppbc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateGenericComposite {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CreateGenericComposite"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateGenericComposite(LPMONIKER pmkFirst, LPMONIKER pmkRest, LPMONIKER *ppmkComposite)
     * }
     */
    public static FunctionDescriptor CreateGenericComposite$descriptor() {
        return CreateGenericComposite.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateGenericComposite(LPMONIKER pmkFirst, LPMONIKER pmkRest, LPMONIKER *ppmkComposite)
     * }
     */
    public static MethodHandle CreateGenericComposite$handle() {
        return CreateGenericComposite.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CreateGenericComposite(LPMONIKER pmkFirst, LPMONIKER pmkRest, LPMONIKER *ppmkComposite)
     * }
     */
    public static int CreateGenericComposite(MemorySegment pmkFirst, MemorySegment pmkRest, MemorySegment ppmkComposite) {
        var mh$ = CreateGenericComposite.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateGenericComposite", pmkFirst, pmkRest, ppmkComposite);
            }
            return (int)mh$.invokeExact(pmkFirst, pmkRest, ppmkComposite);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetClassFile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("GetClassFile"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT GetClassFile(LPCOLESTR szFilename, CLSID *pclsid)
     * }
     */
    public static FunctionDescriptor GetClassFile$descriptor() {
        return GetClassFile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT GetClassFile(LPCOLESTR szFilename, CLSID *pclsid)
     * }
     */
    public static MethodHandle GetClassFile$handle() {
        return GetClassFile.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT GetClassFile(LPCOLESTR szFilename, CLSID *pclsid)
     * }
     */
    public static int GetClassFile(MemorySegment szFilename, MemorySegment pclsid) {
        var mh$ = GetClassFile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetClassFile", szFilename, pclsid);
            }
            return (int)mh$.invokeExact(szFilename, pclsid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateClassMoniker {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CreateClassMoniker"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateClassMoniker(const IID *const rclsid, LPMONIKER *ppmk)
     * }
     */
    public static FunctionDescriptor CreateClassMoniker$descriptor() {
        return CreateClassMoniker.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateClassMoniker(const IID *const rclsid, LPMONIKER *ppmk)
     * }
     */
    public static MethodHandle CreateClassMoniker$handle() {
        return CreateClassMoniker.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CreateClassMoniker(const IID *const rclsid, LPMONIKER *ppmk)
     * }
     */
    public static int CreateClassMoniker(MemorySegment rclsid, MemorySegment ppmk) {
        var mh$ = CreateClassMoniker.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateClassMoniker", rclsid, ppmk);
            }
            return (int)mh$.invokeExact(rclsid, ppmk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateFileMoniker {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CreateFileMoniker"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateFileMoniker(LPCOLESTR lpszPathName, LPMONIKER *ppmk)
     * }
     */
    public static FunctionDescriptor CreateFileMoniker$descriptor() {
        return CreateFileMoniker.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateFileMoniker(LPCOLESTR lpszPathName, LPMONIKER *ppmk)
     * }
     */
    public static MethodHandle CreateFileMoniker$handle() {
        return CreateFileMoniker.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CreateFileMoniker(LPCOLESTR lpszPathName, LPMONIKER *ppmk)
     * }
     */
    public static int CreateFileMoniker(MemorySegment lpszPathName, MemorySegment ppmk) {
        var mh$ = CreateFileMoniker.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateFileMoniker", lpszPathName, ppmk);
            }
            return (int)mh$.invokeExact(lpszPathName, ppmk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateItemMoniker {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CreateItemMoniker"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateItemMoniker(LPCOLESTR lpszDelim, LPCOLESTR lpszItem, LPMONIKER *ppmk)
     * }
     */
    public static FunctionDescriptor CreateItemMoniker$descriptor() {
        return CreateItemMoniker.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateItemMoniker(LPCOLESTR lpszDelim, LPCOLESTR lpszItem, LPMONIKER *ppmk)
     * }
     */
    public static MethodHandle CreateItemMoniker$handle() {
        return CreateItemMoniker.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CreateItemMoniker(LPCOLESTR lpszDelim, LPCOLESTR lpszItem, LPMONIKER *ppmk)
     * }
     */
    public static int CreateItemMoniker(MemorySegment lpszDelim, MemorySegment lpszItem, MemorySegment ppmk) {
        var mh$ = CreateItemMoniker.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateItemMoniker", lpszDelim, lpszItem, ppmk);
            }
            return (int)mh$.invokeExact(lpszDelim, lpszItem, ppmk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateAntiMoniker {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CreateAntiMoniker"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateAntiMoniker(LPMONIKER *ppmk)
     * }
     */
    public static FunctionDescriptor CreateAntiMoniker$descriptor() {
        return CreateAntiMoniker.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateAntiMoniker(LPMONIKER *ppmk)
     * }
     */
    public static MethodHandle CreateAntiMoniker$handle() {
        return CreateAntiMoniker.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CreateAntiMoniker(LPMONIKER *ppmk)
     * }
     */
    public static int CreateAntiMoniker(MemorySegment ppmk) {
        var mh$ = CreateAntiMoniker.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateAntiMoniker", ppmk);
            }
            return (int)mh$.invokeExact(ppmk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreatePointerMoniker {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CreatePointerMoniker"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreatePointerMoniker(LPUNKNOWN punk, LPMONIKER *ppmk)
     * }
     */
    public static FunctionDescriptor CreatePointerMoniker$descriptor() {
        return CreatePointerMoniker.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreatePointerMoniker(LPUNKNOWN punk, LPMONIKER *ppmk)
     * }
     */
    public static MethodHandle CreatePointerMoniker$handle() {
        return CreatePointerMoniker.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CreatePointerMoniker(LPUNKNOWN punk, LPMONIKER *ppmk)
     * }
     */
    public static int CreatePointerMoniker(MemorySegment punk, MemorySegment ppmk) {
        var mh$ = CreatePointerMoniker.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreatePointerMoniker", punk, ppmk);
            }
            return (int)mh$.invokeExact(punk, ppmk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateObjrefMoniker {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CreateObjrefMoniker"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateObjrefMoniker(LPUNKNOWN punk, LPMONIKER *ppmk)
     * }
     */
    public static FunctionDescriptor CreateObjrefMoniker$descriptor() {
        return CreateObjrefMoniker.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateObjrefMoniker(LPUNKNOWN punk, LPMONIKER *ppmk)
     * }
     */
    public static MethodHandle CreateObjrefMoniker$handle() {
        return CreateObjrefMoniker.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CreateObjrefMoniker(LPUNKNOWN punk, LPMONIKER *ppmk)
     * }
     */
    public static int CreateObjrefMoniker(MemorySegment punk, MemorySegment ppmk) {
        var mh$ = CreateObjrefMoniker.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateObjrefMoniker", punk, ppmk);
            }
            return (int)mh$.invokeExact(punk, ppmk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetRunningObjectTable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("GetRunningObjectTable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT GetRunningObjectTable(DWORD reserved, LPRUNNINGOBJECTTABLE *pprot)
     * }
     */
    public static FunctionDescriptor GetRunningObjectTable$descriptor() {
        return GetRunningObjectTable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT GetRunningObjectTable(DWORD reserved, LPRUNNINGOBJECTTABLE *pprot)
     * }
     */
    public static MethodHandle GetRunningObjectTable$handle() {
        return GetRunningObjectTable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT GetRunningObjectTable(DWORD reserved, LPRUNNINGOBJECTTABLE *pprot)
     * }
     */
    public static int GetRunningObjectTable(int reserved, MemorySegment pprot) {
        var mh$ = GetRunningObjectTable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetRunningObjectTable", reserved, pprot);
            }
            return (int)mh$.invokeExact(reserved, pprot);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec$layout() {
        return __MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec$segment() {
        return __MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec() {
        return __MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec$layout() {
        return __MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec$segment() {
        return __MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec() {
        return __MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IOleAdviseHolder *LPOLEADVISEHOLDER
     * }
     */
    public static final AddressLayout LPOLEADVISEHOLDER = C_POINTER;

    private static class IID_IOleAdviseHolder$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IOleAdviseHolder").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleAdviseHolder
     * }
     */
    public static GroupLayout IID_IOleAdviseHolder$layout() {
        return IID_IOleAdviseHolder$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleAdviseHolder
     * }
     */
    public static MemorySegment IID_IOleAdviseHolder() {
        return IID_IOleAdviseHolder$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleAdviseHolder
     * }
     */
    public static void IID_IOleAdviseHolder(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IOleAdviseHolder$constants.SEGMENT, 0L, IID_IOleAdviseHolder$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_oleidl_0000_0001_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_oleidl_0000_0001_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0001_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_oleidl_0000_0001_v0_0_c_ifspec$layout() {
        return __MIDL_itf_oleidl_0000_0001_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0001_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oleidl_0000_0001_v0_0_c_ifspec$segment() {
        return __MIDL_itf_oleidl_0000_0001_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0001_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oleidl_0000_0001_v0_0_c_ifspec() {
        return __MIDL_itf_oleidl_0000_0001_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_oleidl_0000_0001_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0001_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_oleidl_0000_0001_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_oleidl_0000_0001_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_oleidl_0000_0001_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_oleidl_0000_0001_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_oleidl_0000_0001_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0001_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_oleidl_0000_0001_v0_0_s_ifspec$layout() {
        return __MIDL_itf_oleidl_0000_0001_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0001_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oleidl_0000_0001_v0_0_s_ifspec$segment() {
        return __MIDL_itf_oleidl_0000_0001_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0001_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oleidl_0000_0001_v0_0_s_ifspec() {
        return __MIDL_itf_oleidl_0000_0001_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_oleidl_0000_0001_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0001_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_oleidl_0000_0001_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_oleidl_0000_0001_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_oleidl_0000_0001_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IOleCache *LPOLECACHE
     * }
     */
    public static final AddressLayout LPOLECACHE = C_POINTER;

    private static class IID_IOleCache$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IOleCache").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleCache
     * }
     */
    public static GroupLayout IID_IOleCache$layout() {
        return IID_IOleCache$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleCache
     * }
     */
    public static MemorySegment IID_IOleCache() {
        return IID_IOleCache$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleCache
     * }
     */
    public static void IID_IOleCache(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IOleCache$constants.SEGMENT, 0L, IID_IOleCache$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IOleCache2 *LPOLECACHE2
     * }
     */
    public static final AddressLayout LPOLECACHE2 = C_POINTER;
    private static final int DISCARDCACHE_SAVEIFDIRTY = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagDISCARDCACHE.DISCARDCACHE_SAVEIFDIRTY = 0
     * }
     */
    public static int DISCARDCACHE_SAVEIFDIRTY() {
        return DISCARDCACHE_SAVEIFDIRTY;
    }
    private static final int DISCARDCACHE_NOSAVE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagDISCARDCACHE.DISCARDCACHE_NOSAVE = 1
     * }
     */
    public static int DISCARDCACHE_NOSAVE() {
        return DISCARDCACHE_NOSAVE;
    }

    private static class IID_IOleCache2$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IOleCache2").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleCache2
     * }
     */
    public static GroupLayout IID_IOleCache2$layout() {
        return IID_IOleCache2$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleCache2
     * }
     */
    public static MemorySegment IID_IOleCache2() {
        return IID_IOleCache2$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleCache2
     * }
     */
    public static void IID_IOleCache2(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IOleCache2$constants.SEGMENT, 0L, IID_IOleCache2$constants.LAYOUT.byteSize());
    }

    private static class IOleCache2_RemoteUpdateCache_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IOleCache2_RemoteUpdateCache_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IOleCache2_RemoteUpdateCache_Proxy(IOleCache2 *This, LPDATAOBJECT pDataObject, DWORD grfUpdf, LONG_PTR pReserved)
     * }
     */
    public static FunctionDescriptor IOleCache2_RemoteUpdateCache_Proxy$descriptor() {
        return IOleCache2_RemoteUpdateCache_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IOleCache2_RemoteUpdateCache_Proxy(IOleCache2 *This, LPDATAOBJECT pDataObject, DWORD grfUpdf, LONG_PTR pReserved)
     * }
     */
    public static MethodHandle IOleCache2_RemoteUpdateCache_Proxy$handle() {
        return IOleCache2_RemoteUpdateCache_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IOleCache2_RemoteUpdateCache_Proxy(IOleCache2 *This, LPDATAOBJECT pDataObject, DWORD grfUpdf, LONG_PTR pReserved)
     * }
     */
    public static int IOleCache2_RemoteUpdateCache_Proxy(MemorySegment This, MemorySegment pDataObject, int grfUpdf, long pReserved) {
        var mh$ = IOleCache2_RemoteUpdateCache_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IOleCache2_RemoteUpdateCache_Proxy", This, pDataObject, grfUpdf, pReserved);
            }
            return (int)mh$.invokeExact(This, pDataObject, grfUpdf, pReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IOleCache2_RemoteUpdateCache_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IOleCache2_RemoteUpdateCache_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IOleCache2_RemoteUpdateCache_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IOleCache2_RemoteUpdateCache_Stub$descriptor() {
        return IOleCache2_RemoteUpdateCache_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IOleCache2_RemoteUpdateCache_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IOleCache2_RemoteUpdateCache_Stub$handle() {
        return IOleCache2_RemoteUpdateCache_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void IOleCache2_RemoteUpdateCache_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IOleCache2_RemoteUpdateCache_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IOleCache2_RemoteUpdateCache_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IOleCache2_RemoteUpdateCache_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_oleidl_0000_0003_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_oleidl_0000_0003_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0003_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_oleidl_0000_0003_v0_0_c_ifspec$layout() {
        return __MIDL_itf_oleidl_0000_0003_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0003_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oleidl_0000_0003_v0_0_c_ifspec$segment() {
        return __MIDL_itf_oleidl_0000_0003_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0003_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oleidl_0000_0003_v0_0_c_ifspec() {
        return __MIDL_itf_oleidl_0000_0003_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_oleidl_0000_0003_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0003_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_oleidl_0000_0003_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_oleidl_0000_0003_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_oleidl_0000_0003_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_oleidl_0000_0003_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_oleidl_0000_0003_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0003_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_oleidl_0000_0003_v0_0_s_ifspec$layout() {
        return __MIDL_itf_oleidl_0000_0003_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0003_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oleidl_0000_0003_v0_0_s_ifspec$segment() {
        return __MIDL_itf_oleidl_0000_0003_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0003_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oleidl_0000_0003_v0_0_s_ifspec() {
        return __MIDL_itf_oleidl_0000_0003_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_oleidl_0000_0003_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0003_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_oleidl_0000_0003_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_oleidl_0000_0003_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_oleidl_0000_0003_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IOleCacheControl *LPOLECACHECONTROL
     * }
     */
    public static final AddressLayout LPOLECACHECONTROL = C_POINTER;

    private static class IID_IOleCacheControl$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IOleCacheControl").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleCacheControl
     * }
     */
    public static GroupLayout IID_IOleCacheControl$layout() {
        return IID_IOleCacheControl$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleCacheControl
     * }
     */
    public static MemorySegment IID_IOleCacheControl() {
        return IID_IOleCacheControl$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleCacheControl
     * }
     */
    public static void IID_IOleCacheControl(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IOleCacheControl$constants.SEGMENT, 0L, IID_IOleCacheControl$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IParseDisplayName *LPPARSEDISPLAYNAME
     * }
     */
    public static final AddressLayout LPPARSEDISPLAYNAME = C_POINTER;

    private static class IID_IParseDisplayName$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IParseDisplayName").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IParseDisplayName
     * }
     */
    public static GroupLayout IID_IParseDisplayName$layout() {
        return IID_IParseDisplayName$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IParseDisplayName
     * }
     */
    public static MemorySegment IID_IParseDisplayName() {
        return IID_IParseDisplayName$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IParseDisplayName
     * }
     */
    public static void IID_IParseDisplayName(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IParseDisplayName$constants.SEGMENT, 0L, IID_IParseDisplayName$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IOleContainer *LPOLECONTAINER
     * }
     */
    public static final AddressLayout LPOLECONTAINER = C_POINTER;

    private static class IID_IOleContainer$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IOleContainer").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleContainer
     * }
     */
    public static GroupLayout IID_IOleContainer$layout() {
        return IID_IOleContainer$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleContainer
     * }
     */
    public static MemorySegment IID_IOleContainer() {
        return IID_IOleContainer$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleContainer
     * }
     */
    public static void IID_IOleContainer(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IOleContainer$constants.SEGMENT, 0L, IID_IOleContainer$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IOleClientSite *LPOLECLIENTSITE
     * }
     */
    public static final AddressLayout LPOLECLIENTSITE = C_POINTER;

    private static class IID_IOleClientSite$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IOleClientSite").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleClientSite
     * }
     */
    public static GroupLayout IID_IOleClientSite$layout() {
        return IID_IOleClientSite$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleClientSite
     * }
     */
    public static MemorySegment IID_IOleClientSite() {
        return IID_IOleClientSite$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleClientSite
     * }
     */
    public static void IID_IOleClientSite(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IOleClientSite$constants.SEGMENT, 0L, IID_IOleClientSite$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IOleObject *LPOLEOBJECT
     * }
     */
    public static final AddressLayout LPOLEOBJECT = C_POINTER;
    private static final int OLEGETMONIKER_ONLYIFTHERE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagOLEGETMONIKER.OLEGETMONIKER_ONLYIFTHERE = 1
     * }
     */
    public static int OLEGETMONIKER_ONLYIFTHERE() {
        return OLEGETMONIKER_ONLYIFTHERE;
    }
    private static final int OLEGETMONIKER_FORCEASSIGN = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagOLEGETMONIKER.OLEGETMONIKER_FORCEASSIGN = 2
     * }
     */
    public static int OLEGETMONIKER_FORCEASSIGN() {
        return OLEGETMONIKER_FORCEASSIGN;
    }
    private static final int OLEGETMONIKER_UNASSIGN = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagOLEGETMONIKER.OLEGETMONIKER_UNASSIGN = 3
     * }
     */
    public static int OLEGETMONIKER_UNASSIGN() {
        return OLEGETMONIKER_UNASSIGN;
    }
    private static final int OLEGETMONIKER_TEMPFORUSER = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagOLEGETMONIKER.OLEGETMONIKER_TEMPFORUSER = 4
     * }
     */
    public static int OLEGETMONIKER_TEMPFORUSER() {
        return OLEGETMONIKER_TEMPFORUSER;
    }
    private static final int OLEWHICHMK_CONTAINER = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagOLEWHICHMK.OLEWHICHMK_CONTAINER = 1
     * }
     */
    public static int OLEWHICHMK_CONTAINER() {
        return OLEWHICHMK_CONTAINER;
    }
    private static final int OLEWHICHMK_OBJREL = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagOLEWHICHMK.OLEWHICHMK_OBJREL = 2
     * }
     */
    public static int OLEWHICHMK_OBJREL() {
        return OLEWHICHMK_OBJREL;
    }
    private static final int OLEWHICHMK_OBJFULL = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagOLEWHICHMK.OLEWHICHMK_OBJFULL = 3
     * }
     */
    public static int OLEWHICHMK_OBJFULL() {
        return OLEWHICHMK_OBJFULL;
    }
    private static final int USERCLASSTYPE_FULL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagUSERCLASSTYPE.USERCLASSTYPE_FULL = 1
     * }
     */
    public static int USERCLASSTYPE_FULL() {
        return USERCLASSTYPE_FULL;
    }
    private static final int USERCLASSTYPE_SHORT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagUSERCLASSTYPE.USERCLASSTYPE_SHORT = 2
     * }
     */
    public static int USERCLASSTYPE_SHORT() {
        return USERCLASSTYPE_SHORT;
    }
    private static final int USERCLASSTYPE_APPNAME = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagUSERCLASSTYPE.USERCLASSTYPE_APPNAME = 3
     * }
     */
    public static int USERCLASSTYPE_APPNAME() {
        return USERCLASSTYPE_APPNAME;
    }
    private static final int OLEMISC_RECOMPOSEONRESIZE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagOLEMISC.OLEMISC_RECOMPOSEONRESIZE = 1
     * }
     */
    public static int OLEMISC_RECOMPOSEONRESIZE() {
        return OLEMISC_RECOMPOSEONRESIZE;
    }
    private static final int OLEMISC_ONLYICONIC = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagOLEMISC.OLEMISC_ONLYICONIC = 2
     * }
     */
    public static int OLEMISC_ONLYICONIC() {
        return OLEMISC_ONLYICONIC;
    }
    private static final int OLEMISC_INSERTNOTREPLACE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagOLEMISC.OLEMISC_INSERTNOTREPLACE = 4
     * }
     */
    public static int OLEMISC_INSERTNOTREPLACE() {
        return OLEMISC_INSERTNOTREPLACE;
    }
    private static final int OLEMISC_STATIC = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagOLEMISC.OLEMISC_STATIC = 8
     * }
     */
    public static int OLEMISC_STATIC() {
        return OLEMISC_STATIC;
    }
    private static final int OLEMISC_CANTLINKINSIDE = (int)16L;
    /**
     * {@snippet lang=c :
     * enum tagOLEMISC.OLEMISC_CANTLINKINSIDE = 16
     * }
     */
    public static int OLEMISC_CANTLINKINSIDE() {
        return OLEMISC_CANTLINKINSIDE;
    }
    private static final int OLEMISC_CANLINKBYOLE1 = (int)32L;
    /**
     * {@snippet lang=c :
     * enum tagOLEMISC.OLEMISC_CANLINKBYOLE1 = 32
     * }
     */
    public static int OLEMISC_CANLINKBYOLE1() {
        return OLEMISC_CANLINKBYOLE1;
    }
    private static final int OLEMISC_ISLINKOBJECT = (int)64L;
    /**
     * {@snippet lang=c :
     * enum tagOLEMISC.OLEMISC_ISLINKOBJECT = 64
     * }
     */
    public static int OLEMISC_ISLINKOBJECT() {
        return OLEMISC_ISLINKOBJECT;
    }
    private static final int OLEMISC_INSIDEOUT = (int)128L;
    /**
     * {@snippet lang=c :
     * enum tagOLEMISC.OLEMISC_INSIDEOUT = 128
     * }
     */
    public static int OLEMISC_INSIDEOUT() {
        return OLEMISC_INSIDEOUT;
    }
    private static final int OLEMISC_ACTIVATEWHENVISIBLE = (int)256L;
    /**
     * {@snippet lang=c :
     * enum tagOLEMISC.OLEMISC_ACTIVATEWHENVISIBLE = 256
     * }
     */
    public static int OLEMISC_ACTIVATEWHENVISIBLE() {
        return OLEMISC_ACTIVATEWHENVISIBLE;
    }
    private static final int OLEMISC_RENDERINGISDEVICEINDEPENDENT = (int)512L;
    /**
     * {@snippet lang=c :
     * enum tagOLEMISC.OLEMISC_RENDERINGISDEVICEINDEPENDENT = 512
     * }
     */
    public static int OLEMISC_RENDERINGISDEVICEINDEPENDENT() {
        return OLEMISC_RENDERINGISDEVICEINDEPENDENT;
    }
    private static final int OLEMISC_INVISIBLEATRUNTIME = (int)1024L;
    /**
     * {@snippet lang=c :
     * enum tagOLEMISC.OLEMISC_INVISIBLEATRUNTIME = 1024
     * }
     */
    public static int OLEMISC_INVISIBLEATRUNTIME() {
        return OLEMISC_INVISIBLEATRUNTIME;
    }
    private static final int OLEMISC_ALWAYSRUN = (int)2048L;
    /**
     * {@snippet lang=c :
     * enum tagOLEMISC.OLEMISC_ALWAYSRUN = 2048
     * }
     */
    public static int OLEMISC_ALWAYSRUN() {
        return OLEMISC_ALWAYSRUN;
    }
    private static final int OLEMISC_ACTSLIKEBUTTON = (int)4096L;
    /**
     * {@snippet lang=c :
     * enum tagOLEMISC.OLEMISC_ACTSLIKEBUTTON = 4096
     * }
     */
    public static int OLEMISC_ACTSLIKEBUTTON() {
        return OLEMISC_ACTSLIKEBUTTON;
    }
    private static final int OLEMISC_ACTSLIKELABEL = (int)8192L;
    /**
     * {@snippet lang=c :
     * enum tagOLEMISC.OLEMISC_ACTSLIKELABEL = 8192
     * }
     */
    public static int OLEMISC_ACTSLIKELABEL() {
        return OLEMISC_ACTSLIKELABEL;
    }
    private static final int OLEMISC_NOUIACTIVATE = (int)16384L;
    /**
     * {@snippet lang=c :
     * enum tagOLEMISC.OLEMISC_NOUIACTIVATE = 16384
     * }
     */
    public static int OLEMISC_NOUIACTIVATE() {
        return OLEMISC_NOUIACTIVATE;
    }
    private static final int OLEMISC_ALIGNABLE = (int)32768L;
    /**
     * {@snippet lang=c :
     * enum tagOLEMISC.OLEMISC_ALIGNABLE = 32768
     * }
     */
    public static int OLEMISC_ALIGNABLE() {
        return OLEMISC_ALIGNABLE;
    }
    private static final int OLEMISC_SIMPLEFRAME = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum tagOLEMISC.OLEMISC_SIMPLEFRAME = 65536
     * }
     */
    public static int OLEMISC_SIMPLEFRAME() {
        return OLEMISC_SIMPLEFRAME;
    }
    private static final int OLEMISC_SETCLIENTSITEFIRST = (int)131072L;
    /**
     * {@snippet lang=c :
     * enum tagOLEMISC.OLEMISC_SETCLIENTSITEFIRST = 131072
     * }
     */
    public static int OLEMISC_SETCLIENTSITEFIRST() {
        return OLEMISC_SETCLIENTSITEFIRST;
    }
    private static final int OLEMISC_IMEMODE = (int)262144L;
    /**
     * {@snippet lang=c :
     * enum tagOLEMISC.OLEMISC_IMEMODE = 262144
     * }
     */
    public static int OLEMISC_IMEMODE() {
        return OLEMISC_IMEMODE;
    }
    private static final int OLEMISC_IGNOREACTIVATEWHENVISIBLE = (int)524288L;
    /**
     * {@snippet lang=c :
     * enum tagOLEMISC.OLEMISC_IGNOREACTIVATEWHENVISIBLE = 524288
     * }
     */
    public static int OLEMISC_IGNOREACTIVATEWHENVISIBLE() {
        return OLEMISC_IGNOREACTIVATEWHENVISIBLE;
    }
    private static final int OLEMISC_WANTSTOMENUMERGE = (int)1048576L;
    /**
     * {@snippet lang=c :
     * enum tagOLEMISC.OLEMISC_WANTSTOMENUMERGE = 1048576
     * }
     */
    public static int OLEMISC_WANTSTOMENUMERGE() {
        return OLEMISC_WANTSTOMENUMERGE;
    }
    private static final int OLEMISC_SUPPORTSMULTILEVELUNDO = (int)2097152L;
    /**
     * {@snippet lang=c :
     * enum tagOLEMISC.OLEMISC_SUPPORTSMULTILEVELUNDO = 2097152
     * }
     */
    public static int OLEMISC_SUPPORTSMULTILEVELUNDO() {
        return OLEMISC_SUPPORTSMULTILEVELUNDO;
    }
    private static final int OLECLOSE_SAVEIFDIRTY = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagOLECLOSE.OLECLOSE_SAVEIFDIRTY = 0
     * }
     */
    public static int OLECLOSE_SAVEIFDIRTY() {
        return OLECLOSE_SAVEIFDIRTY;
    }
    private static final int OLECLOSE_NOSAVE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagOLECLOSE.OLECLOSE_NOSAVE = 1
     * }
     */
    public static int OLECLOSE_NOSAVE() {
        return OLECLOSE_NOSAVE;
    }
    private static final int OLECLOSE_PROMPTSAVE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagOLECLOSE.OLECLOSE_PROMPTSAVE = 2
     * }
     */
    public static int OLECLOSE_PROMPTSAVE() {
        return OLECLOSE_PROMPTSAVE;
    }

    private static class IID_IOleObject$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IOleObject").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleObject
     * }
     */
    public static GroupLayout IID_IOleObject$layout() {
        return IID_IOleObject$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleObject
     * }
     */
    public static MemorySegment IID_IOleObject() {
        return IID_IOleObject$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleObject
     * }
     */
    public static void IID_IOleObject(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IOleObject$constants.SEGMENT, 0L, IID_IOleObject$constants.LAYOUT.byteSize());
    }
    private static final int OLERENDER_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagOLERENDER.OLERENDER_NONE = 0
     * }
     */
    public static int OLERENDER_NONE() {
        return OLERENDER_NONE;
    }
    private static final int OLERENDER_DRAW = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagOLERENDER.OLERENDER_DRAW = 1
     * }
     */
    public static int OLERENDER_DRAW() {
        return OLERENDER_DRAW;
    }
    private static final int OLERENDER_FORMAT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagOLERENDER.OLERENDER_FORMAT = 2
     * }
     */
    public static int OLERENDER_FORMAT() {
        return OLERENDER_FORMAT;
    }
    private static final int OLERENDER_ASIS = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagOLERENDER.OLERENDER_ASIS = 3
     * }
     */
    public static int OLERENDER_ASIS() {
        return OLERENDER_ASIS;
    }
    /**
     * {@snippet lang=c :
     * typedef OLERENDER *LPOLERENDER
     * }
     */
    public static final AddressLayout LPOLERENDER = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagOBJECTDESCRIPTOR {
     *     ULONG cbSize;
     *     CLSID clsid;
     *     DWORD dwDrawAspect;
     *     SIZEL sizel;
     *     POINTL pointl;
     *     DWORD dwStatus;
     *     DWORD dwFullUserTypeName;
     *     DWORD dwSrcOfCopy;
     * } *POBJECTDESCRIPTOR
     * }
     */
    public static final AddressLayout POBJECTDESCRIPTOR = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagOBJECTDESCRIPTOR {
     *     ULONG cbSize;
     *     CLSID clsid;
     *     DWORD dwDrawAspect;
     *     SIZEL sizel;
     *     POINTL pointl;
     *     DWORD dwStatus;
     *     DWORD dwFullUserTypeName;
     *     DWORD dwSrcOfCopy;
     * } *LPOBJECTDESCRIPTOR
     * }
     */
    public static final AddressLayout LPOBJECTDESCRIPTOR = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagOBJECTDESCRIPTOR {
     *     ULONG cbSize;
     *     CLSID clsid;
     *     DWORD dwDrawAspect;
     *     SIZEL sizel;
     *     POINTL pointl;
     *     DWORD dwStatus;
     *     DWORD dwFullUserTypeName;
     *     DWORD dwSrcOfCopy;
     * } *PLINKSRCDESCRIPTOR
     * }
     */
    public static final AddressLayout PLINKSRCDESCRIPTOR = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagOBJECTDESCRIPTOR {
     *     ULONG cbSize;
     *     CLSID clsid;
     *     DWORD dwDrawAspect;
     *     SIZEL sizel;
     *     POINTL pointl;
     *     DWORD dwStatus;
     *     DWORD dwFullUserTypeName;
     *     DWORD dwSrcOfCopy;
     * } *LPLINKSRCDESCRIPTOR
     * }
     */
    public static final AddressLayout LPLINKSRCDESCRIPTOR = C_POINTER;

    private static class IOLETypes_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("IOLETypes_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE IOLETypes_v0_0_c_ifspec
     * }
     */
    public static AddressLayout IOLETypes_v0_0_c_ifspec$layout() {
        return IOLETypes_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE IOLETypes_v0_0_c_ifspec
     * }
     */
    public static MemorySegment IOLETypes_v0_0_c_ifspec$segment() {
        return IOLETypes_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE IOLETypes_v0_0_c_ifspec
     * }
     */
    public static MemorySegment IOLETypes_v0_0_c_ifspec() {
        return IOLETypes_v0_0_c_ifspec$constants.SEGMENT.get(IOLETypes_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE IOLETypes_v0_0_c_ifspec
     * }
     */
    public static void IOLETypes_v0_0_c_ifspec(MemorySegment varValue) {
        IOLETypes_v0_0_c_ifspec$constants.SEGMENT.set(IOLETypes_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IOLETypes_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("IOLETypes_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE IOLETypes_v0_0_s_ifspec
     * }
     */
    public static AddressLayout IOLETypes_v0_0_s_ifspec$layout() {
        return IOLETypes_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE IOLETypes_v0_0_s_ifspec
     * }
     */
    public static MemorySegment IOLETypes_v0_0_s_ifspec$segment() {
        return IOLETypes_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE IOLETypes_v0_0_s_ifspec
     * }
     */
    public static MemorySegment IOLETypes_v0_0_s_ifspec() {
        return IOLETypes_v0_0_s_ifspec$constants.SEGMENT.get(IOLETypes_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE IOLETypes_v0_0_s_ifspec
     * }
     */
    public static void IOLETypes_v0_0_s_ifspec(MemorySegment varValue) {
        IOLETypes_v0_0_s_ifspec$constants.SEGMENT.set(IOLETypes_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IOleWindow *LPOLEWINDOW
     * }
     */
    public static final AddressLayout LPOLEWINDOW = C_POINTER;

    private static class IID_IOleWindow$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IOleWindow").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleWindow
     * }
     */
    public static GroupLayout IID_IOleWindow$layout() {
        return IID_IOleWindow$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleWindow
     * }
     */
    public static MemorySegment IID_IOleWindow() {
        return IID_IOleWindow$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleWindow
     * }
     */
    public static void IID_IOleWindow(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IOleWindow$constants.SEGMENT, 0L, IID_IOleWindow$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IOleLink *LPOLELINK
     * }
     */
    public static final AddressLayout LPOLELINK = C_POINTER;
    private static final int OLEUPDATE_ALWAYS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagOLEUPDATE.OLEUPDATE_ALWAYS = 1
     * }
     */
    public static int OLEUPDATE_ALWAYS() {
        return OLEUPDATE_ALWAYS;
    }
    private static final int OLEUPDATE_ONCALL = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagOLEUPDATE.OLEUPDATE_ONCALL = 3
     * }
     */
    public static int OLEUPDATE_ONCALL() {
        return OLEUPDATE_ONCALL;
    }
    /**
     * {@snippet lang=c :
     * typedef OLEUPDATE *LPOLEUPDATE
     * }
     */
    public static final AddressLayout LPOLEUPDATE = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef OLEUPDATE *POLEUPDATE
     * }
     */
    public static final AddressLayout POLEUPDATE = C_POINTER;
    private static final int OLELINKBIND_EVENIFCLASSDIFF = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagOLELINKBIND.OLELINKBIND_EVENIFCLASSDIFF = 1
     * }
     */
    public static int OLELINKBIND_EVENIFCLASSDIFF() {
        return OLELINKBIND_EVENIFCLASSDIFF;
    }

    private static class IID_IOleLink$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IOleLink").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleLink
     * }
     */
    public static GroupLayout IID_IOleLink$layout() {
        return IID_IOleLink$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleLink
     * }
     */
    public static MemorySegment IID_IOleLink() {
        return IID_IOleLink$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleLink
     * }
     */
    public static void IID_IOleLink(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IOleLink$constants.SEGMENT, 0L, IID_IOleLink$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IOleItemContainer *LPOLEITEMCONTAINER
     * }
     */
    public static final AddressLayout LPOLEITEMCONTAINER = C_POINTER;
    private static final int BINDSPEED_INDEFINITE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSPEED.BINDSPEED_INDEFINITE = 1
     * }
     */
    public static int BINDSPEED_INDEFINITE() {
        return BINDSPEED_INDEFINITE;
    }
    private static final int BINDSPEED_MODERATE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSPEED.BINDSPEED_MODERATE = 2
     * }
     */
    public static int BINDSPEED_MODERATE() {
        return BINDSPEED_MODERATE;
    }
    private static final int BINDSPEED_IMMEDIATE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSPEED.BINDSPEED_IMMEDIATE = 3
     * }
     */
    public static int BINDSPEED_IMMEDIATE() {
        return BINDSPEED_IMMEDIATE;
    }
    private static final int OLECONTF_EMBEDDINGS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagOLECONTF.OLECONTF_EMBEDDINGS = 1
     * }
     */
    public static int OLECONTF_EMBEDDINGS() {
        return OLECONTF_EMBEDDINGS;
    }
    private static final int OLECONTF_LINKS = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagOLECONTF.OLECONTF_LINKS = 2
     * }
     */
    public static int OLECONTF_LINKS() {
        return OLECONTF_LINKS;
    }
    private static final int OLECONTF_OTHERS = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagOLECONTF.OLECONTF_OTHERS = 4
     * }
     */
    public static int OLECONTF_OTHERS() {
        return OLECONTF_OTHERS;
    }
    private static final int OLECONTF_ONLYUSER = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagOLECONTF.OLECONTF_ONLYUSER = 8
     * }
     */
    public static int OLECONTF_ONLYUSER() {
        return OLECONTF_ONLYUSER;
    }
    private static final int OLECONTF_ONLYIFRUNNING = (int)16L;
    /**
     * {@snippet lang=c :
     * enum tagOLECONTF.OLECONTF_ONLYIFRUNNING = 16
     * }
     */
    public static int OLECONTF_ONLYIFRUNNING() {
        return OLECONTF_ONLYIFRUNNING;
    }

    private static class IID_IOleItemContainer$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IOleItemContainer").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleItemContainer
     * }
     */
    public static GroupLayout IID_IOleItemContainer$layout() {
        return IID_IOleItemContainer$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleItemContainer
     * }
     */
    public static MemorySegment IID_IOleItemContainer() {
        return IID_IOleItemContainer$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleItemContainer
     * }
     */
    public static void IID_IOleItemContainer(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IOleItemContainer$constants.SEGMENT, 0L, IID_IOleItemContainer$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IOleInPlaceUIWindow *LPOLEINPLACEUIWINDOW
     * }
     */
    public static final AddressLayout LPOLEINPLACEUIWINDOW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPRECT LPBORDERWIDTHS
     * }
     */
    public static final AddressLayout LPBORDERWIDTHS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPCRECT LPCBORDERWIDTHS
     * }
     */
    public static final AddressLayout LPCBORDERWIDTHS = C_POINTER;

    private static class IID_IOleInPlaceUIWindow$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IOleInPlaceUIWindow").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleInPlaceUIWindow
     * }
     */
    public static GroupLayout IID_IOleInPlaceUIWindow$layout() {
        return IID_IOleInPlaceUIWindow$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleInPlaceUIWindow
     * }
     */
    public static MemorySegment IID_IOleInPlaceUIWindow() {
        return IID_IOleInPlaceUIWindow$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleInPlaceUIWindow
     * }
     */
    public static void IID_IOleInPlaceUIWindow(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IOleInPlaceUIWindow$constants.SEGMENT, 0L, IID_IOleInPlaceUIWindow$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IOleInPlaceActiveObject *LPOLEINPLACEACTIVEOBJECT
     * }
     */
    public static final AddressLayout LPOLEINPLACEACTIVEOBJECT = C_POINTER;

    private static class IID_IOleInPlaceActiveObject$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IOleInPlaceActiveObject").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleInPlaceActiveObject
     * }
     */
    public static GroupLayout IID_IOleInPlaceActiveObject$layout() {
        return IID_IOleInPlaceActiveObject$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleInPlaceActiveObject
     * }
     */
    public static MemorySegment IID_IOleInPlaceActiveObject() {
        return IID_IOleInPlaceActiveObject$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleInPlaceActiveObject
     * }
     */
    public static void IID_IOleInPlaceActiveObject(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IOleInPlaceActiveObject$constants.SEGMENT, 0L, IID_IOleInPlaceActiveObject$constants.LAYOUT.byteSize());
    }

    private static class IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy(IOleInPlaceActiveObject *This)
     * }
     */
    public static FunctionDescriptor IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy$descriptor() {
        return IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy(IOleInPlaceActiveObject *This)
     * }
     */
    public static MethodHandle IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy$handle() {
        return IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy(IOleInPlaceActiveObject *This)
     * }
     */
    public static int IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy(MemorySegment This) {
        var mh$ = IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub$descriptor() {
        return IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub$handle() {
        return IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IOleInPlaceActiveObject_RemoteResizeBorder_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IOleInPlaceActiveObject_RemoteResizeBorder_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IOleInPlaceActiveObject_RemoteResizeBorder_Proxy(IOleInPlaceActiveObject *This, LPCRECT prcBorder, const IID *const riid, IOleInPlaceUIWindow *pUIWindow, BOOL fFrameWindow)
     * }
     */
    public static FunctionDescriptor IOleInPlaceActiveObject_RemoteResizeBorder_Proxy$descriptor() {
        return IOleInPlaceActiveObject_RemoteResizeBorder_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IOleInPlaceActiveObject_RemoteResizeBorder_Proxy(IOleInPlaceActiveObject *This, LPCRECT prcBorder, const IID *const riid, IOleInPlaceUIWindow *pUIWindow, BOOL fFrameWindow)
     * }
     */
    public static MethodHandle IOleInPlaceActiveObject_RemoteResizeBorder_Proxy$handle() {
        return IOleInPlaceActiveObject_RemoteResizeBorder_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IOleInPlaceActiveObject_RemoteResizeBorder_Proxy(IOleInPlaceActiveObject *This, LPCRECT prcBorder, const IID *const riid, IOleInPlaceUIWindow *pUIWindow, BOOL fFrameWindow)
     * }
     */
    public static int IOleInPlaceActiveObject_RemoteResizeBorder_Proxy(MemorySegment This, MemorySegment prcBorder, MemorySegment riid, MemorySegment pUIWindow, int fFrameWindow) {
        var mh$ = IOleInPlaceActiveObject_RemoteResizeBorder_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IOleInPlaceActiveObject_RemoteResizeBorder_Proxy", This, prcBorder, riid, pUIWindow, fFrameWindow);
            }
            return (int)mh$.invokeExact(This, prcBorder, riid, pUIWindow, fFrameWindow);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IOleInPlaceActiveObject_RemoteResizeBorder_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IOleInPlaceActiveObject_RemoteResizeBorder_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IOleInPlaceActiveObject_RemoteResizeBorder_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IOleInPlaceActiveObject_RemoteResizeBorder_Stub$descriptor() {
        return IOleInPlaceActiveObject_RemoteResizeBorder_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IOleInPlaceActiveObject_RemoteResizeBorder_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IOleInPlaceActiveObject_RemoteResizeBorder_Stub$handle() {
        return IOleInPlaceActiveObject_RemoteResizeBorder_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void IOleInPlaceActiveObject_RemoteResizeBorder_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IOleInPlaceActiveObject_RemoteResizeBorder_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IOleInPlaceActiveObject_RemoteResizeBorder_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IOleInPlaceActiveObject_RemoteResizeBorder_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef IOleInPlaceFrame *LPOLEINPLACEFRAME
     * }
     */
    public static final AddressLayout LPOLEINPLACEFRAME = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagOIFI {
     *     UINT cb;
     *     BOOL fMDIApp;
     *     HWND hwndFrame;
     *     HACCEL haccel;
     *     UINT cAccelEntries;
     * } *LPOLEINPLACEFRAMEINFO
     * }
     */
    public static final AddressLayout LPOLEINPLACEFRAMEINFO = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagOleMenuGroupWidths {
     *     LONG width[6];
     * } *LPOLEMENUGROUPWIDTHS
     * }
     */
    public static final AddressLayout LPOLEMENUGROUPWIDTHS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef HGLOBAL HOLEMENU
     * }
     */
    public static final AddressLayout HOLEMENU = C_POINTER;

    private static class IID_IOleInPlaceFrame$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IOleInPlaceFrame").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleInPlaceFrame
     * }
     */
    public static GroupLayout IID_IOleInPlaceFrame$layout() {
        return IID_IOleInPlaceFrame$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleInPlaceFrame
     * }
     */
    public static MemorySegment IID_IOleInPlaceFrame() {
        return IID_IOleInPlaceFrame$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleInPlaceFrame
     * }
     */
    public static void IID_IOleInPlaceFrame(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IOleInPlaceFrame$constants.SEGMENT, 0L, IID_IOleInPlaceFrame$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IOleInPlaceObject *LPOLEINPLACEOBJECT
     * }
     */
    public static final AddressLayout LPOLEINPLACEOBJECT = C_POINTER;

    private static class IID_IOleInPlaceObject$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IOleInPlaceObject").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleInPlaceObject
     * }
     */
    public static GroupLayout IID_IOleInPlaceObject$layout() {
        return IID_IOleInPlaceObject$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleInPlaceObject
     * }
     */
    public static MemorySegment IID_IOleInPlaceObject() {
        return IID_IOleInPlaceObject$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleInPlaceObject
     * }
     */
    public static void IID_IOleInPlaceObject(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IOleInPlaceObject$constants.SEGMENT, 0L, IID_IOleInPlaceObject$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IOleInPlaceSite *LPOLEINPLACESITE
     * }
     */
    public static final AddressLayout LPOLEINPLACESITE = C_POINTER;

    private static class IID_IOleInPlaceSite$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IOleInPlaceSite").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleInPlaceSite
     * }
     */
    public static GroupLayout IID_IOleInPlaceSite$layout() {
        return IID_IOleInPlaceSite$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleInPlaceSite
     * }
     */
    public static MemorySegment IID_IOleInPlaceSite() {
        return IID_IOleInPlaceSite$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleInPlaceSite
     * }
     */
    public static void IID_IOleInPlaceSite(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IOleInPlaceSite$constants.SEGMENT, 0L, IID_IOleInPlaceSite$constants.LAYOUT.byteSize());
    }

    private static class IID_IContinue$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IContinue").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IContinue
     * }
     */
    public static GroupLayout IID_IContinue$layout() {
        return IID_IContinue$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IContinue
     * }
     */
    public static MemorySegment IID_IContinue() {
        return IID_IContinue$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IContinue
     * }
     */
    public static void IID_IContinue(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IContinue$constants.SEGMENT, 0L, IID_IContinue$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IViewObject *LPVIEWOBJECT
     * }
     */
    public static final AddressLayout LPVIEWOBJECT = C_POINTER;

    private static class IID_IViewObject$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IViewObject").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IViewObject
     * }
     */
    public static GroupLayout IID_IViewObject$layout() {
        return IID_IViewObject$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IViewObject
     * }
     */
    public static MemorySegment IID_IViewObject() {
        return IID_IViewObject$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IViewObject
     * }
     */
    public static void IID_IViewObject(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IViewObject$constants.SEGMENT, 0L, IID_IViewObject$constants.LAYOUT.byteSize());
    }

    private static class IViewObject_RemoteDraw_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_LONG_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IViewObject_RemoteDraw_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IViewObject_RemoteDraw_Proxy(IViewObject *This, DWORD dwDrawAspect, LONG lindex, ULONG_PTR pvAspect, DVTARGETDEVICE *ptd, HDC hdcTargetDev, HDC hdcDraw, LPCRECTL lprcBounds, LPCRECTL lprcWBounds, IContinue *pContinue)
     * }
     */
    public static FunctionDescriptor IViewObject_RemoteDraw_Proxy$descriptor() {
        return IViewObject_RemoteDraw_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IViewObject_RemoteDraw_Proxy(IViewObject *This, DWORD dwDrawAspect, LONG lindex, ULONG_PTR pvAspect, DVTARGETDEVICE *ptd, HDC hdcTargetDev, HDC hdcDraw, LPCRECTL lprcBounds, LPCRECTL lprcWBounds, IContinue *pContinue)
     * }
     */
    public static MethodHandle IViewObject_RemoteDraw_Proxy$handle() {
        return IViewObject_RemoteDraw_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IViewObject_RemoteDraw_Proxy(IViewObject *This, DWORD dwDrawAspect, LONG lindex, ULONG_PTR pvAspect, DVTARGETDEVICE *ptd, HDC hdcTargetDev, HDC hdcDraw, LPCRECTL lprcBounds, LPCRECTL lprcWBounds, IContinue *pContinue)
     * }
     */
    public static int IViewObject_RemoteDraw_Proxy(MemorySegment This, int dwDrawAspect, int lindex, long pvAspect, MemorySegment ptd, MemorySegment hdcTargetDev, MemorySegment hdcDraw, MemorySegment lprcBounds, MemorySegment lprcWBounds, MemorySegment pContinue) {
        var mh$ = IViewObject_RemoteDraw_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IViewObject_RemoteDraw_Proxy", This, dwDrawAspect, lindex, pvAspect, ptd, hdcTargetDev, hdcDraw, lprcBounds, lprcWBounds, pContinue);
            }
            return (int)mh$.invokeExact(This, dwDrawAspect, lindex, pvAspect, ptd, hdcTargetDev, hdcDraw, lprcBounds, lprcWBounds, pContinue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IViewObject_RemoteDraw_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IViewObject_RemoteDraw_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IViewObject_RemoteDraw_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IViewObject_RemoteDraw_Stub$descriptor() {
        return IViewObject_RemoteDraw_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IViewObject_RemoteDraw_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IViewObject_RemoteDraw_Stub$handle() {
        return IViewObject_RemoteDraw_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void IViewObject_RemoteDraw_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IViewObject_RemoteDraw_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IViewObject_RemoteDraw_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IViewObject_RemoteDraw_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IViewObject_RemoteGetColorSet_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_LONG_LONG,
            C_POINTER,
            C_LONG_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IViewObject_RemoteGetColorSet_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IViewObject_RemoteGetColorSet_Proxy(IViewObject *This, DWORD dwDrawAspect, LONG lindex, ULONG_PTR pvAspect, DVTARGETDEVICE *ptd, ULONG_PTR hicTargetDev, LOGPALETTE **ppColorSet)
     * }
     */
    public static FunctionDescriptor IViewObject_RemoteGetColorSet_Proxy$descriptor() {
        return IViewObject_RemoteGetColorSet_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IViewObject_RemoteGetColorSet_Proxy(IViewObject *This, DWORD dwDrawAspect, LONG lindex, ULONG_PTR pvAspect, DVTARGETDEVICE *ptd, ULONG_PTR hicTargetDev, LOGPALETTE **ppColorSet)
     * }
     */
    public static MethodHandle IViewObject_RemoteGetColorSet_Proxy$handle() {
        return IViewObject_RemoteGetColorSet_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IViewObject_RemoteGetColorSet_Proxy(IViewObject *This, DWORD dwDrawAspect, LONG lindex, ULONG_PTR pvAspect, DVTARGETDEVICE *ptd, ULONG_PTR hicTargetDev, LOGPALETTE **ppColorSet)
     * }
     */
    public static int IViewObject_RemoteGetColorSet_Proxy(MemorySegment This, int dwDrawAspect, int lindex, long pvAspect, MemorySegment ptd, long hicTargetDev, MemorySegment ppColorSet) {
        var mh$ = IViewObject_RemoteGetColorSet_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IViewObject_RemoteGetColorSet_Proxy", This, dwDrawAspect, lindex, pvAspect, ptd, hicTargetDev, ppColorSet);
            }
            return (int)mh$.invokeExact(This, dwDrawAspect, lindex, pvAspect, ptd, hicTargetDev, ppColorSet);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IViewObject_RemoteGetColorSet_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IViewObject_RemoteGetColorSet_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IViewObject_RemoteGetColorSet_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IViewObject_RemoteGetColorSet_Stub$descriptor() {
        return IViewObject_RemoteGetColorSet_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IViewObject_RemoteGetColorSet_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IViewObject_RemoteGetColorSet_Stub$handle() {
        return IViewObject_RemoteGetColorSet_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void IViewObject_RemoteGetColorSet_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IViewObject_RemoteGetColorSet_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IViewObject_RemoteGetColorSet_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IViewObject_RemoteGetColorSet_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IViewObject_RemoteFreeze_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_LONG_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IViewObject_RemoteFreeze_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IViewObject_RemoteFreeze_Proxy(IViewObject *This, DWORD dwDrawAspect, LONG lindex, ULONG_PTR pvAspect, DWORD *pdwFreeze)
     * }
     */
    public static FunctionDescriptor IViewObject_RemoteFreeze_Proxy$descriptor() {
        return IViewObject_RemoteFreeze_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IViewObject_RemoteFreeze_Proxy(IViewObject *This, DWORD dwDrawAspect, LONG lindex, ULONG_PTR pvAspect, DWORD *pdwFreeze)
     * }
     */
    public static MethodHandle IViewObject_RemoteFreeze_Proxy$handle() {
        return IViewObject_RemoteFreeze_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IViewObject_RemoteFreeze_Proxy(IViewObject *This, DWORD dwDrawAspect, LONG lindex, ULONG_PTR pvAspect, DWORD *pdwFreeze)
     * }
     */
    public static int IViewObject_RemoteFreeze_Proxy(MemorySegment This, int dwDrawAspect, int lindex, long pvAspect, MemorySegment pdwFreeze) {
        var mh$ = IViewObject_RemoteFreeze_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IViewObject_RemoteFreeze_Proxy", This, dwDrawAspect, lindex, pvAspect, pdwFreeze);
            }
            return (int)mh$.invokeExact(This, dwDrawAspect, lindex, pvAspect, pdwFreeze);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IViewObject_RemoteFreeze_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IViewObject_RemoteFreeze_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IViewObject_RemoteFreeze_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IViewObject_RemoteFreeze_Stub$descriptor() {
        return IViewObject_RemoteFreeze_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IViewObject_RemoteFreeze_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IViewObject_RemoteFreeze_Stub$handle() {
        return IViewObject_RemoteFreeze_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void IViewObject_RemoteFreeze_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IViewObject_RemoteFreeze_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IViewObject_RemoteFreeze_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IViewObject_RemoteFreeze_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IViewObject_RemoteGetAdvise_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IViewObject_RemoteGetAdvise_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IViewObject_RemoteGetAdvise_Proxy(IViewObject *This, DWORD *pAspects, DWORD *pAdvf, IAdviseSink **ppAdvSink)
     * }
     */
    public static FunctionDescriptor IViewObject_RemoteGetAdvise_Proxy$descriptor() {
        return IViewObject_RemoteGetAdvise_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IViewObject_RemoteGetAdvise_Proxy(IViewObject *This, DWORD *pAspects, DWORD *pAdvf, IAdviseSink **ppAdvSink)
     * }
     */
    public static MethodHandle IViewObject_RemoteGetAdvise_Proxy$handle() {
        return IViewObject_RemoteGetAdvise_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IViewObject_RemoteGetAdvise_Proxy(IViewObject *This, DWORD *pAspects, DWORD *pAdvf, IAdviseSink **ppAdvSink)
     * }
     */
    public static int IViewObject_RemoteGetAdvise_Proxy(MemorySegment This, MemorySegment pAspects, MemorySegment pAdvf, MemorySegment ppAdvSink) {
        var mh$ = IViewObject_RemoteGetAdvise_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IViewObject_RemoteGetAdvise_Proxy", This, pAspects, pAdvf, ppAdvSink);
            }
            return (int)mh$.invokeExact(This, pAspects, pAdvf, ppAdvSink);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IViewObject_RemoteGetAdvise_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IViewObject_RemoteGetAdvise_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IViewObject_RemoteGetAdvise_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IViewObject_RemoteGetAdvise_Stub$descriptor() {
        return IViewObject_RemoteGetAdvise_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IViewObject_RemoteGetAdvise_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IViewObject_RemoteGetAdvise_Stub$handle() {
        return IViewObject_RemoteGetAdvise_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void IViewObject_RemoteGetAdvise_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IViewObject_RemoteGetAdvise_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IViewObject_RemoteGetAdvise_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IViewObject_RemoteGetAdvise_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef IViewObject2 *LPVIEWOBJECT2
     * }
     */
    public static final AddressLayout LPVIEWOBJECT2 = C_POINTER;

    private static class IID_IViewObject2$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IViewObject2").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IViewObject2
     * }
     */
    public static GroupLayout IID_IViewObject2$layout() {
        return IID_IViewObject2$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IViewObject2
     * }
     */
    public static MemorySegment IID_IViewObject2() {
        return IID_IViewObject2$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IViewObject2
     * }
     */
    public static void IID_IViewObject2(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IViewObject2$constants.SEGMENT, 0L, IID_IViewObject2$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IDropSource *LPDROPSOURCE
     * }
     */
    public static final AddressLayout LPDROPSOURCE = C_POINTER;

    private static class IID_IDropSource$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IDropSource").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDropSource
     * }
     */
    public static GroupLayout IID_IDropSource$layout() {
        return IID_IDropSource$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDropSource
     * }
     */
    public static MemorySegment IID_IDropSource() {
        return IID_IDropSource$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDropSource
     * }
     */
    public static void IID_IDropSource(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IDropSource$constants.SEGMENT, 0L, IID_IDropSource$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IDropTarget *LPDROPTARGET
     * }
     */
    public static final AddressLayout LPDROPTARGET = C_POINTER;

    private static class IID_IDropTarget$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IDropTarget").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDropTarget
     * }
     */
    public static GroupLayout IID_IDropTarget$layout() {
        return IID_IDropTarget$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDropTarget
     * }
     */
    public static MemorySegment IID_IDropTarget() {
        return IID_IDropTarget$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDropTarget
     * }
     */
    public static void IID_IDropTarget(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IDropTarget$constants.SEGMENT, 0L, IID_IDropTarget$constants.LAYOUT.byteSize());
    }

    private static class IID_IDropSourceNotify$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IDropSourceNotify").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDropSourceNotify
     * }
     */
    public static GroupLayout IID_IDropSourceNotify$layout() {
        return IID_IDropSourceNotify$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDropSourceNotify
     * }
     */
    public static MemorySegment IID_IDropSourceNotify() {
        return IID_IDropSourceNotify$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDropSourceNotify
     * }
     */
    public static void IID_IDropSourceNotify(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IDropSourceNotify$constants.SEGMENT, 0L, IID_IDropSourceNotify$constants.LAYOUT.byteSize());
    }

    private static class IID_IEnterpriseDropTarget$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IEnterpriseDropTarget").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnterpriseDropTarget
     * }
     */
    public static GroupLayout IID_IEnterpriseDropTarget$layout() {
        return IID_IEnterpriseDropTarget$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnterpriseDropTarget
     * }
     */
    public static MemorySegment IID_IEnterpriseDropTarget() {
        return IID_IEnterpriseDropTarget$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnterpriseDropTarget
     * }
     */
    public static void IID_IEnterpriseDropTarget(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IEnterpriseDropTarget$constants.SEGMENT, 0L, IID_IEnterpriseDropTarget$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_oleidl_0000_0024_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_oleidl_0000_0024_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0024_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_oleidl_0000_0024_v0_0_c_ifspec$layout() {
        return __MIDL_itf_oleidl_0000_0024_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0024_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oleidl_0000_0024_v0_0_c_ifspec$segment() {
        return __MIDL_itf_oleidl_0000_0024_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0024_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oleidl_0000_0024_v0_0_c_ifspec() {
        return __MIDL_itf_oleidl_0000_0024_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_oleidl_0000_0024_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0024_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_oleidl_0000_0024_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_oleidl_0000_0024_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_oleidl_0000_0024_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_oleidl_0000_0024_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = C_POINTER;
        public static final MemorySegment SEGMENT = findOrThrow("__MIDL_itf_oleidl_0000_0024_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0024_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_oleidl_0000_0024_v0_0_s_ifspec$layout() {
        return __MIDL_itf_oleidl_0000_0024_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0024_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oleidl_0000_0024_v0_0_s_ifspec$segment() {
        return __MIDL_itf_oleidl_0000_0024_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0024_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oleidl_0000_0024_v0_0_s_ifspec() {
        return __MIDL_itf_oleidl_0000_0024_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_oleidl_0000_0024_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0024_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_oleidl_0000_0024_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_oleidl_0000_0024_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_oleidl_0000_0024_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IEnumOLEVERB *LPENUMOLEVERB
     * }
     */
    public static final AddressLayout LPENUMOLEVERB = C_POINTER;
}


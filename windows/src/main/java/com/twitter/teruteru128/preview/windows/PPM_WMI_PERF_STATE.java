// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct {
 *     DWORD Frequency;
 *     DWORD Power;
 *     BYTE PercentFrequency;
 *     BYTE IncreaseLevel;
 *     BYTE DecreaseLevel;
 *     BYTE Type;
 *     DWORD IncreaseTime;
 *     DWORD DecreaseTime;
 *     DWORD64 Control;
 *     DWORD64 Status;
 *     DWORD HitCount;
 *     DWORD Reserved1;
 *     DWORD64 Reserved2;
 *     DWORD64 Reserved3;
 * };
 * }
 */
public class PPM_WMI_PERF_STATE {

    public static MemoryLayout $LAYOUT() {
        return constants$312.const$0;
    }
    public static VarHandle Frequency$VH() {
        return constants$312.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Frequency;
     * }
     */
    public static int Frequency$get(MemorySegment seg) {
        return (int)constants$312.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Frequency;
     * }
     */
    public static void Frequency$set(MemorySegment seg, int x) {
        constants$312.const$1.set(seg, x);
    }
    public static int Frequency$get(MemorySegment seg, long index) {
        return (int)constants$312.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void Frequency$set(MemorySegment seg, long index, int x) {
        constants$312.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Power$VH() {
        return constants$312.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Power;
     * }
     */
    public static int Power$get(MemorySegment seg) {
        return (int)constants$312.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Power;
     * }
     */
    public static void Power$set(MemorySegment seg, int x) {
        constants$312.const$2.set(seg, x);
    }
    public static int Power$get(MemorySegment seg, long index) {
        return (int)constants$312.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void Power$set(MemorySegment seg, long index, int x) {
        constants$312.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle PercentFrequency$VH() {
        return constants$312.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE PercentFrequency;
     * }
     */
    public static byte PercentFrequency$get(MemorySegment seg) {
        return (byte)constants$312.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE PercentFrequency;
     * }
     */
    public static void PercentFrequency$set(MemorySegment seg, byte x) {
        constants$312.const$3.set(seg, x);
    }
    public static byte PercentFrequency$get(MemorySegment seg, long index) {
        return (byte)constants$312.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void PercentFrequency$set(MemorySegment seg, long index, byte x) {
        constants$312.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle IncreaseLevel$VH() {
        return constants$312.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE IncreaseLevel;
     * }
     */
    public static byte IncreaseLevel$get(MemorySegment seg) {
        return (byte)constants$312.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE IncreaseLevel;
     * }
     */
    public static void IncreaseLevel$set(MemorySegment seg, byte x) {
        constants$312.const$4.set(seg, x);
    }
    public static byte IncreaseLevel$get(MemorySegment seg, long index) {
        return (byte)constants$312.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void IncreaseLevel$set(MemorySegment seg, long index, byte x) {
        constants$312.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle DecreaseLevel$VH() {
        return constants$312.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE DecreaseLevel;
     * }
     */
    public static byte DecreaseLevel$get(MemorySegment seg) {
        return (byte)constants$312.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE DecreaseLevel;
     * }
     */
    public static void DecreaseLevel$set(MemorySegment seg, byte x) {
        constants$312.const$5.set(seg, x);
    }
    public static byte DecreaseLevel$get(MemorySegment seg, long index) {
        return (byte)constants$312.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void DecreaseLevel$set(MemorySegment seg, long index, byte x) {
        constants$312.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Type$VH() {
        return constants$313.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE Type;
     * }
     */
    public static byte Type$get(MemorySegment seg) {
        return (byte)constants$313.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE Type;
     * }
     */
    public static void Type$set(MemorySegment seg, byte x) {
        constants$313.const$0.set(seg, x);
    }
    public static byte Type$get(MemorySegment seg, long index) {
        return (byte)constants$313.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Type$set(MemorySegment seg, long index, byte x) {
        constants$313.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle IncreaseTime$VH() {
        return constants$313.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD IncreaseTime;
     * }
     */
    public static int IncreaseTime$get(MemorySegment seg) {
        return (int)constants$313.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD IncreaseTime;
     * }
     */
    public static void IncreaseTime$set(MemorySegment seg, int x) {
        constants$313.const$1.set(seg, x);
    }
    public static int IncreaseTime$get(MemorySegment seg, long index) {
        return (int)constants$313.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void IncreaseTime$set(MemorySegment seg, long index, int x) {
        constants$313.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle DecreaseTime$VH() {
        return constants$313.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD DecreaseTime;
     * }
     */
    public static int DecreaseTime$get(MemorySegment seg) {
        return (int)constants$313.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD DecreaseTime;
     * }
     */
    public static void DecreaseTime$set(MemorySegment seg, int x) {
        constants$313.const$2.set(seg, x);
    }
    public static int DecreaseTime$get(MemorySegment seg, long index) {
        return (int)constants$313.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void DecreaseTime$set(MemorySegment seg, long index, int x) {
        constants$313.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Control$VH() {
        return constants$313.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 Control;
     * }
     */
    public static long Control$get(MemorySegment seg) {
        return (long)constants$313.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 Control;
     * }
     */
    public static void Control$set(MemorySegment seg, long x) {
        constants$313.const$3.set(seg, x);
    }
    public static long Control$get(MemorySegment seg, long index) {
        return (long)constants$313.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void Control$set(MemorySegment seg, long index, long x) {
        constants$313.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Status$VH() {
        return constants$313.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 Status;
     * }
     */
    public static long Status$get(MemorySegment seg) {
        return (long)constants$313.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 Status;
     * }
     */
    public static void Status$set(MemorySegment seg, long x) {
        constants$313.const$4.set(seg, x);
    }
    public static long Status$get(MemorySegment seg, long index) {
        return (long)constants$313.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void Status$set(MemorySegment seg, long index, long x) {
        constants$313.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle HitCount$VH() {
        return constants$313.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD HitCount;
     * }
     */
    public static int HitCount$get(MemorySegment seg) {
        return (int)constants$313.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD HitCount;
     * }
     */
    public static void HitCount$set(MemorySegment seg, int x) {
        constants$313.const$5.set(seg, x);
    }
    public static int HitCount$get(MemorySegment seg, long index) {
        return (int)constants$313.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void HitCount$set(MemorySegment seg, long index, int x) {
        constants$313.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Reserved1$VH() {
        return constants$314.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Reserved1;
     * }
     */
    public static int Reserved1$get(MemorySegment seg) {
        return (int)constants$314.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Reserved1;
     * }
     */
    public static void Reserved1$set(MemorySegment seg, int x) {
        constants$314.const$0.set(seg, x);
    }
    public static int Reserved1$get(MemorySegment seg, long index) {
        return (int)constants$314.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Reserved1$set(MemorySegment seg, long index, int x) {
        constants$314.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Reserved2$VH() {
        return constants$314.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 Reserved2;
     * }
     */
    public static long Reserved2$get(MemorySegment seg) {
        return (long)constants$314.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 Reserved2;
     * }
     */
    public static void Reserved2$set(MemorySegment seg, long x) {
        constants$314.const$1.set(seg, x);
    }
    public static long Reserved2$get(MemorySegment seg, long index) {
        return (long)constants$314.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void Reserved2$set(MemorySegment seg, long index, long x) {
        constants$314.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Reserved3$VH() {
        return constants$314.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 Reserved3;
     * }
     */
    public static long Reserved3$get(MemorySegment seg) {
        return (long)constants$314.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 Reserved3;
     * }
     */
    public static void Reserved3$set(MemorySegment seg, long x) {
        constants$314.const$2.set(seg, x);
    }
    public static long Reserved3$get(MemorySegment seg, long index) {
        return (long)constants$314.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void Reserved3$set(MemorySegment seg, long index, long x) {
        constants$314.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



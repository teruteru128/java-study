// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _FSCTL_GET_INTEGRITY_INFORMATION_BUFFER {
 *     WORD ChecksumAlgorithm;
 *     WORD Reserved;
 *     DWORD Flags;
 *     DWORD ChecksumChunkSizeInBytes;
 *     DWORD ClusterSizeInBytes;
 * };
 * }
 */
public class _FSCTL_GET_INTEGRITY_INFORMATION_BUFFER {

    public static MemoryLayout $LAYOUT() {
        return constants$2698.const$0;
    }
    public static VarHandle ChecksumAlgorithm$VH() {
        return constants$2698.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD ChecksumAlgorithm;
     * }
     */
    public static short ChecksumAlgorithm$get(MemorySegment seg) {
        return (short)constants$2698.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD ChecksumAlgorithm;
     * }
     */
    public static void ChecksumAlgorithm$set(MemorySegment seg, short x) {
        constants$2698.const$1.set(seg, x);
    }
    public static short ChecksumAlgorithm$get(MemorySegment seg, long index) {
        return (short)constants$2698.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void ChecksumAlgorithm$set(MemorySegment seg, long index, short x) {
        constants$2698.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Reserved$VH() {
        return constants$2698.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD Reserved;
     * }
     */
    public static short Reserved$get(MemorySegment seg) {
        return (short)constants$2698.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD Reserved;
     * }
     */
    public static void Reserved$set(MemorySegment seg, short x) {
        constants$2698.const$2.set(seg, x);
    }
    public static short Reserved$get(MemorySegment seg, long index) {
        return (short)constants$2698.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void Reserved$set(MemorySegment seg, long index, short x) {
        constants$2698.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Flags$VH() {
        return constants$2698.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Flags;
     * }
     */
    public static int Flags$get(MemorySegment seg) {
        return (int)constants$2698.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Flags;
     * }
     */
    public static void Flags$set(MemorySegment seg, int x) {
        constants$2698.const$3.set(seg, x);
    }
    public static int Flags$get(MemorySegment seg, long index) {
        return (int)constants$2698.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, int x) {
        constants$2698.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ChecksumChunkSizeInBytes$VH() {
        return constants$2698.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD ChecksumChunkSizeInBytes;
     * }
     */
    public static int ChecksumChunkSizeInBytes$get(MemorySegment seg) {
        return (int)constants$2698.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD ChecksumChunkSizeInBytes;
     * }
     */
    public static void ChecksumChunkSizeInBytes$set(MemorySegment seg, int x) {
        constants$2698.const$4.set(seg, x);
    }
    public static int ChecksumChunkSizeInBytes$get(MemorySegment seg, long index) {
        return (int)constants$2698.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void ChecksumChunkSizeInBytes$set(MemorySegment seg, long index, int x) {
        constants$2698.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ClusterSizeInBytes$VH() {
        return constants$2698.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD ClusterSizeInBytes;
     * }
     */
    public static int ClusterSizeInBytes$get(MemorySegment seg) {
        return (int)constants$2698.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD ClusterSizeInBytes;
     * }
     */
    public static void ClusterSizeInBytes$set(MemorySegment seg, int x) {
        constants$2698.const$5.set(seg, x);
    }
    public static int ClusterSizeInBytes$get(MemorySegment seg, long index) {
        return (int)constants$2698.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void ClusterSizeInBytes$set(MemorySegment seg, long index, int x) {
        constants$2698.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _REASON_CONTEXT {
 *     ULONG Version;
 *     DWORD Flags;
 *     union  Reason;
 * };
 * }
 */
public class _REASON_CONTEXT {

    public static MemoryLayout $LAYOUT() {
        return constants$559.const$3;
    }
    public static VarHandle Version$VH() {
        return constants$559.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG Version;
     * }
     */
    public static int Version$get(MemorySegment seg) {
        return (int)constants$559.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG Version;
     * }
     */
    public static void Version$set(MemorySegment seg, int x) {
        constants$559.const$4.set(seg, x);
    }
    public static int Version$get(MemorySegment seg, long index) {
        return (int)constants$559.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, int x) {
        constants$559.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Flags$VH() {
        return constants$559.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Flags;
     * }
     */
    public static int Flags$get(MemorySegment seg) {
        return (int)constants$559.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Flags;
     * }
     */
    public static void Flags$set(MemorySegment seg, int x) {
        constants$559.const$5.set(seg, x);
    }
    public static int Flags$get(MemorySegment seg, long index) {
        return (int)constants$559.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, int x) {
        constants$559.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
     * union {
     *     struct  Detailed;
     *     LPWSTR SimpleReasonString;
     * };
     * }
     */
    public static final class Reason {

        // Suppresses default constructor, ensuring non-instantiability.
        private Reason() {}
        public static MemoryLayout $LAYOUT() {
            return constants$560.const$0;
        }
        /**
         * {@snippet :
         * struct {
         *     HMODULE LocalizedReasonModule;
         *     ULONG LocalizedReasonId;
         *     ULONG ReasonStringCount;
         *     LPWSTR* ReasonStrings;
         * };
         * }
         */
        public static final class Detailed {

            // Suppresses default constructor, ensuring non-instantiability.
            private Detailed() {}
            public static MemoryLayout $LAYOUT() {
                return constants$560.const$1;
            }
            public static VarHandle LocalizedReasonModule$VH() {
                return constants$560.const$2;
            }
            /**
             * Getter for field:
             * {@snippet :
             * HMODULE LocalizedReasonModule;
             * }
             */
            public static MemorySegment LocalizedReasonModule$get(MemorySegment seg) {
                return (java.lang.foreign.MemorySegment)constants$560.const$2.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * HMODULE LocalizedReasonModule;
             * }
             */
            public static void LocalizedReasonModule$set(MemorySegment seg, MemorySegment x) {
                constants$560.const$2.set(seg, x);
            }
            public static MemorySegment LocalizedReasonModule$get(MemorySegment seg, long index) {
                return (java.lang.foreign.MemorySegment)constants$560.const$2.get(seg.asSlice(index*sizeof()));
            }
            public static void LocalizedReasonModule$set(MemorySegment seg, long index, MemorySegment x) {
                constants$560.const$2.set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle LocalizedReasonId$VH() {
                return constants$560.const$3;
            }
            /**
             * Getter for field:
             * {@snippet :
             * ULONG LocalizedReasonId;
             * }
             */
            public static int LocalizedReasonId$get(MemorySegment seg) {
                return (int)constants$560.const$3.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * ULONG LocalizedReasonId;
             * }
             */
            public static void LocalizedReasonId$set(MemorySegment seg, int x) {
                constants$560.const$3.set(seg, x);
            }
            public static int LocalizedReasonId$get(MemorySegment seg, long index) {
                return (int)constants$560.const$3.get(seg.asSlice(index*sizeof()));
            }
            public static void LocalizedReasonId$set(MemorySegment seg, long index, int x) {
                constants$560.const$3.set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle ReasonStringCount$VH() {
                return constants$560.const$4;
            }
            /**
             * Getter for field:
             * {@snippet :
             * ULONG ReasonStringCount;
             * }
             */
            public static int ReasonStringCount$get(MemorySegment seg) {
                return (int)constants$560.const$4.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * ULONG ReasonStringCount;
             * }
             */
            public static void ReasonStringCount$set(MemorySegment seg, int x) {
                constants$560.const$4.set(seg, x);
            }
            public static int ReasonStringCount$get(MemorySegment seg, long index) {
                return (int)constants$560.const$4.get(seg.asSlice(index*sizeof()));
            }
            public static void ReasonStringCount$set(MemorySegment seg, long index, int x) {
                constants$560.const$4.set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle ReasonStrings$VH() {
                return constants$560.const$5;
            }
            /**
             * Getter for field:
             * {@snippet :
             * LPWSTR* ReasonStrings;
             * }
             */
            public static MemorySegment ReasonStrings$get(MemorySegment seg) {
                return (java.lang.foreign.MemorySegment)constants$560.const$5.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * LPWSTR* ReasonStrings;
             * }
             */
            public static void ReasonStrings$set(MemorySegment seg, MemorySegment x) {
                constants$560.const$5.set(seg, x);
            }
            public static MemorySegment ReasonStrings$get(MemorySegment seg, long index) {
                return (java.lang.foreign.MemorySegment)constants$560.const$5.get(seg.asSlice(index*sizeof()));
            }
            public static void ReasonStrings$set(MemorySegment seg, long index, MemorySegment x) {
                constants$560.const$5.set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
        }

        public static MemorySegment Detailed$slice(MemorySegment seg) {
            return seg.asSlice(0, 24);
        }
        public static VarHandle SimpleReasonString$VH() {
            return constants$561.const$0;
        }
        /**
         * Getter for field:
         * {@snippet :
         * LPWSTR SimpleReasonString;
         * }
         */
        public static MemorySegment SimpleReasonString$get(MemorySegment seg) {
            return (java.lang.foreign.MemorySegment)constants$561.const$0.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * LPWSTR SimpleReasonString;
         * }
         */
        public static void SimpleReasonString$set(MemorySegment seg, MemorySegment x) {
            constants$561.const$0.set(seg, x);
        }
        public static MemorySegment SimpleReasonString$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemorySegment)constants$561.const$0.get(seg.asSlice(index*sizeof()));
        }
        public static void SimpleReasonString$set(MemorySegment seg, long index, MemorySegment x) {
            constants$561.const$0.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment Reason$slice(MemorySegment seg) {
        return seg.asSlice(8, 24);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



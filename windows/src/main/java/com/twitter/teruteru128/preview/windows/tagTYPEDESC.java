// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tagTYPEDESC {
 *     union {
 *         struct tagTYPEDESC* lptdesc;
 *         struct tagARRAYDESC* lpadesc;
 *         HREFTYPE hreftype;
 *     };
 *     VARTYPE vt;
 * };
 * }
 */
public class tagTYPEDESC {

    public static MemoryLayout $LAYOUT() {
        return constants$3432.const$3;
    }
    public static VarHandle lptdesc$VH() {
        return constants$3432.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct tagTYPEDESC* lptdesc;
     * }
     */
    public static MemorySegment lptdesc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3432.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct tagTYPEDESC* lptdesc;
     * }
     */
    public static void lptdesc$set(MemorySegment seg, MemorySegment x) {
        constants$3432.const$4.set(seg, x);
    }
    public static MemorySegment lptdesc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3432.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void lptdesc$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3432.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lpadesc$VH() {
        return constants$3432.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct tagARRAYDESC* lpadesc;
     * }
     */
    public static MemorySegment lpadesc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3432.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct tagARRAYDESC* lpadesc;
     * }
     */
    public static void lpadesc$set(MemorySegment seg, MemorySegment x) {
        constants$3432.const$5.set(seg, x);
    }
    public static MemorySegment lpadesc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3432.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void lpadesc$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3432.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hreftype$VH() {
        return constants$3433.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HREFTYPE hreftype;
     * }
     */
    public static int hreftype$get(MemorySegment seg) {
        return (int)constants$3433.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HREFTYPE hreftype;
     * }
     */
    public static void hreftype$set(MemorySegment seg, int x) {
        constants$3433.const$0.set(seg, x);
    }
    public static int hreftype$get(MemorySegment seg, long index) {
        return (int)constants$3433.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void hreftype$set(MemorySegment seg, long index, int x) {
        constants$3433.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle vt$VH() {
        return constants$3433.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VARTYPE vt;
     * }
     */
    public static short vt$get(MemorySegment seg) {
        return (short)constants$3433.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VARTYPE vt;
     * }
     */
    public static void vt$set(MemorySegment seg, short x) {
        constants$3433.const$1.set(seg, x);
    }
    public static short vt$get(MemorySegment seg, long index) {
        return (short)constants$3433.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void vt$set(MemorySegment seg, long index, short x) {
        constants$3433.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IUriVtbl {
 *     HRESULT (*QueryInterface)(IUri*,const IID*,void**);
 *     ULONG (*AddRef)(IUri*);
 *     ULONG (*Release)(IUri*);
 *     HRESULT (*GetPropertyBSTR)(IUri*,Uri_PROPERTY,BSTR*,DWORD);
 *     HRESULT (*GetPropertyLength)(IUri*,Uri_PROPERTY,DWORD*,DWORD);
 *     HRESULT (*GetPropertyDWORD)(IUri*,Uri_PROPERTY,DWORD*,DWORD);
 *     HRESULT (*HasProperty)(IUri*,Uri_PROPERTY,BOOL*);
 *     HRESULT (*GetAbsoluteUri)(IUri*,BSTR*);
 *     HRESULT (*GetAuthority)(IUri*,BSTR*);
 *     HRESULT (*GetDisplayUri)(IUri*,BSTR*);
 *     HRESULT (*GetDomain)(IUri*,BSTR*);
 *     HRESULT (*GetExtension)(IUri*,BSTR*);
 *     HRESULT (*GetFragment)(IUri*,BSTR*);
 *     HRESULT (*GetHost)(IUri*,BSTR*);
 *     HRESULT (*GetPassword)(IUri*,BSTR*);
 *     HRESULT (*GetPath)(IUri*,BSTR*);
 *     HRESULT (*GetPathAndQuery)(IUri*,BSTR*);
 *     HRESULT (*GetQuery)(IUri*,BSTR*);
 *     HRESULT (*GetRawUri)(IUri*,BSTR*);
 *     HRESULT (*GetSchemeName)(IUri*,BSTR*);
 *     HRESULT (*GetUserInfo)(IUri*,BSTR*);
 *     HRESULT (*GetUserNameA)(IUri*,BSTR*);
 *     HRESULT (*GetHostType)(IUri*,DWORD*);
 *     HRESULT (*GetPort)(IUri*,DWORD*);
 *     HRESULT (*GetScheme)(IUri*,DWORD*);
 *     HRESULT (*GetZone)(IUri*,DWORD*);
 *     HRESULT (*GetProperties)(IUri*,LPDWORD);
 *     HRESULT (*IsEqual)(IUri*,IUri*,BOOL*);
 * };
 * }
 */
public class IUriVtbl {

    public static MemoryLayout $LAYOUT() {
        return constants$4146.const$1;
    }
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IUri*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4146.const$2, fi, constants$37.const$3, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle QueryInterface$VH() {
        return constants$4146.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IUri*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4146.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IUri*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        constants$4146.const$3.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4146.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4146.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, Arena scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*AddRef)(IUri*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4146.const$4, fi, constants$18.const$5, scope);
        }
        static AddRef ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle AddRef$VH() {
        return constants$4146.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IUri*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4146.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IUri*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        constants$4146.const$5.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4146.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4146.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, Arena scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*Release)(IUri*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4147.const$0, fi, constants$18.const$5, scope);
        }
        static Release ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Release$VH() {
        return constants$4147.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IUri*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4147.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IUri*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        constants$4147.const$1.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4147.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4147.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, Arena scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetPropertyBSTR)(IUri*,Uri_PROPERTY,BSTR*,DWORD);
     * }
     */
    public interface GetPropertyBSTR {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, int _x3);
        static MemorySegment allocate(GetPropertyBSTR fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4147.const$2, fi, constants$590.const$0, scope);
        }
        static GetPropertyBSTR ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, int __x3) -> {
                try {
                    return (int)constants$3451.const$3.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetPropertyBSTR$VH() {
        return constants$4147.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetPropertyBSTR)(IUri*,Uri_PROPERTY,BSTR*,DWORD);
     * }
     */
    public static MemorySegment GetPropertyBSTR$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4147.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetPropertyBSTR)(IUri*,Uri_PROPERTY,BSTR*,DWORD);
     * }
     */
    public static void GetPropertyBSTR$set(MemorySegment seg, MemorySegment x) {
        constants$4147.const$3.set(seg, x);
    }
    public static MemorySegment GetPropertyBSTR$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4147.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void GetPropertyBSTR$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4147.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetPropertyBSTR GetPropertyBSTR(MemorySegment segment, Arena scope) {
        return GetPropertyBSTR.ofAddress(GetPropertyBSTR$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetPropertyLength)(IUri*,Uri_PROPERTY,DWORD*,DWORD);
     * }
     */
    public interface GetPropertyLength {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, int _x3);
        static MemorySegment allocate(GetPropertyLength fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4147.const$4, fi, constants$590.const$0, scope);
        }
        static GetPropertyLength ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, int __x3) -> {
                try {
                    return (int)constants$3451.const$3.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetPropertyLength$VH() {
        return constants$4147.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetPropertyLength)(IUri*,Uri_PROPERTY,DWORD*,DWORD);
     * }
     */
    public static MemorySegment GetPropertyLength$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4147.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetPropertyLength)(IUri*,Uri_PROPERTY,DWORD*,DWORD);
     * }
     */
    public static void GetPropertyLength$set(MemorySegment seg, MemorySegment x) {
        constants$4147.const$5.set(seg, x);
    }
    public static MemorySegment GetPropertyLength$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4147.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GetPropertyLength$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4147.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetPropertyLength GetPropertyLength(MemorySegment segment, Arena scope) {
        return GetPropertyLength.ofAddress(GetPropertyLength$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetPropertyDWORD)(IUri*,Uri_PROPERTY,DWORD*,DWORD);
     * }
     */
    public interface GetPropertyDWORD {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, int _x3);
        static MemorySegment allocate(GetPropertyDWORD fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4148.const$0, fi, constants$590.const$0, scope);
        }
        static GetPropertyDWORD ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, int __x3) -> {
                try {
                    return (int)constants$3451.const$3.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetPropertyDWORD$VH() {
        return constants$4148.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetPropertyDWORD)(IUri*,Uri_PROPERTY,DWORD*,DWORD);
     * }
     */
    public static MemorySegment GetPropertyDWORD$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4148.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetPropertyDWORD)(IUri*,Uri_PROPERTY,DWORD*,DWORD);
     * }
     */
    public static void GetPropertyDWORD$set(MemorySegment seg, MemorySegment x) {
        constants$4148.const$1.set(seg, x);
    }
    public static MemorySegment GetPropertyDWORD$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4148.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void GetPropertyDWORD$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4148.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetPropertyDWORD GetPropertyDWORD(MemorySegment segment, Arena scope) {
        return GetPropertyDWORD.ofAddress(GetPropertyDWORD$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*HasProperty)(IUri*,Uri_PROPERTY,BOOL*);
     * }
     */
    public interface HasProperty {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(HasProperty fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4148.const$2, fi, constants$485.const$5, scope);
        }
        static HasProperty ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$1770.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle HasProperty$VH() {
        return constants$4148.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*HasProperty)(IUri*,Uri_PROPERTY,BOOL*);
     * }
     */
    public static MemorySegment HasProperty$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4148.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*HasProperty)(IUri*,Uri_PROPERTY,BOOL*);
     * }
     */
    public static void HasProperty$set(MemorySegment seg, MemorySegment x) {
        constants$4148.const$3.set(seg, x);
    }
    public static MemorySegment HasProperty$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4148.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void HasProperty$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4148.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static HasProperty HasProperty(MemorySegment segment, Arena scope) {
        return HasProperty.ofAddress(HasProperty$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetAbsoluteUri)(IUri*,BSTR*);
     * }
     */
    public interface GetAbsoluteUri {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetAbsoluteUri fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4148.const$4, fi, constants$34.const$0, scope);
        }
        static GetAbsoluteUri ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetAbsoluteUri$VH() {
        return constants$4148.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetAbsoluteUri)(IUri*,BSTR*);
     * }
     */
    public static MemorySegment GetAbsoluteUri$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4148.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetAbsoluteUri)(IUri*,BSTR*);
     * }
     */
    public static void GetAbsoluteUri$set(MemorySegment seg, MemorySegment x) {
        constants$4148.const$5.set(seg, x);
    }
    public static MemorySegment GetAbsoluteUri$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4148.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GetAbsoluteUri$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4148.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetAbsoluteUri GetAbsoluteUri(MemorySegment segment, Arena scope) {
        return GetAbsoluteUri.ofAddress(GetAbsoluteUri$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetAuthority)(IUri*,BSTR*);
     * }
     */
    public interface GetAuthority {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetAuthority fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4149.const$0, fi, constants$34.const$0, scope);
        }
        static GetAuthority ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetAuthority$VH() {
        return constants$4149.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetAuthority)(IUri*,BSTR*);
     * }
     */
    public static MemorySegment GetAuthority$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4149.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetAuthority)(IUri*,BSTR*);
     * }
     */
    public static void GetAuthority$set(MemorySegment seg, MemorySegment x) {
        constants$4149.const$1.set(seg, x);
    }
    public static MemorySegment GetAuthority$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4149.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void GetAuthority$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4149.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetAuthority GetAuthority(MemorySegment segment, Arena scope) {
        return GetAuthority.ofAddress(GetAuthority$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetDisplayUri)(IUri*,BSTR*);
     * }
     */
    public interface GetDisplayUri {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetDisplayUri fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4149.const$2, fi, constants$34.const$0, scope);
        }
        static GetDisplayUri ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetDisplayUri$VH() {
        return constants$4149.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetDisplayUri)(IUri*,BSTR*);
     * }
     */
    public static MemorySegment GetDisplayUri$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4149.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetDisplayUri)(IUri*,BSTR*);
     * }
     */
    public static void GetDisplayUri$set(MemorySegment seg, MemorySegment x) {
        constants$4149.const$3.set(seg, x);
    }
    public static MemorySegment GetDisplayUri$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4149.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDisplayUri$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4149.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDisplayUri GetDisplayUri(MemorySegment segment, Arena scope) {
        return GetDisplayUri.ofAddress(GetDisplayUri$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetDomain)(IUri*,BSTR*);
     * }
     */
    public interface GetDomain {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetDomain fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4149.const$4, fi, constants$34.const$0, scope);
        }
        static GetDomain ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetDomain$VH() {
        return constants$4149.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetDomain)(IUri*,BSTR*);
     * }
     */
    public static MemorySegment GetDomain$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4149.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetDomain)(IUri*,BSTR*);
     * }
     */
    public static void GetDomain$set(MemorySegment seg, MemorySegment x) {
        constants$4149.const$5.set(seg, x);
    }
    public static MemorySegment GetDomain$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4149.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDomain$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4149.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDomain GetDomain(MemorySegment segment, Arena scope) {
        return GetDomain.ofAddress(GetDomain$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetExtension)(IUri*,BSTR*);
     * }
     */
    public interface GetExtension {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetExtension fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4150.const$0, fi, constants$34.const$0, scope);
        }
        static GetExtension ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetExtension$VH() {
        return constants$4150.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetExtension)(IUri*,BSTR*);
     * }
     */
    public static MemorySegment GetExtension$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4150.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetExtension)(IUri*,BSTR*);
     * }
     */
    public static void GetExtension$set(MemorySegment seg, MemorySegment x) {
        constants$4150.const$1.set(seg, x);
    }
    public static MemorySegment GetExtension$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4150.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void GetExtension$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4150.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetExtension GetExtension(MemorySegment segment, Arena scope) {
        return GetExtension.ofAddress(GetExtension$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetFragment)(IUri*,BSTR*);
     * }
     */
    public interface GetFragment {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetFragment fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4150.const$2, fi, constants$34.const$0, scope);
        }
        static GetFragment ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetFragment$VH() {
        return constants$4150.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetFragment)(IUri*,BSTR*);
     * }
     */
    public static MemorySegment GetFragment$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4150.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetFragment)(IUri*,BSTR*);
     * }
     */
    public static void GetFragment$set(MemorySegment seg, MemorySegment x) {
        constants$4150.const$3.set(seg, x);
    }
    public static MemorySegment GetFragment$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4150.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void GetFragment$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4150.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetFragment GetFragment(MemorySegment segment, Arena scope) {
        return GetFragment.ofAddress(GetFragment$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetHost)(IUri*,BSTR*);
     * }
     */
    public interface GetHost {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetHost fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4150.const$4, fi, constants$34.const$0, scope);
        }
        static GetHost ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetHost$VH() {
        return constants$4150.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetHost)(IUri*,BSTR*);
     * }
     */
    public static MemorySegment GetHost$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4150.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetHost)(IUri*,BSTR*);
     * }
     */
    public static void GetHost$set(MemorySegment seg, MemorySegment x) {
        constants$4150.const$5.set(seg, x);
    }
    public static MemorySegment GetHost$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4150.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GetHost$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4150.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetHost GetHost(MemorySegment segment, Arena scope) {
        return GetHost.ofAddress(GetHost$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetPassword)(IUri*,BSTR*);
     * }
     */
    public interface GetPassword {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetPassword fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4151.const$0, fi, constants$34.const$0, scope);
        }
        static GetPassword ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetPassword$VH() {
        return constants$4151.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetPassword)(IUri*,BSTR*);
     * }
     */
    public static MemorySegment GetPassword$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4151.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetPassword)(IUri*,BSTR*);
     * }
     */
    public static void GetPassword$set(MemorySegment seg, MemorySegment x) {
        constants$4151.const$1.set(seg, x);
    }
    public static MemorySegment GetPassword$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4151.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void GetPassword$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4151.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetPassword GetPassword(MemorySegment segment, Arena scope) {
        return GetPassword.ofAddress(GetPassword$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetPath)(IUri*,BSTR*);
     * }
     */
    public interface GetPath {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetPath fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4151.const$2, fi, constants$34.const$0, scope);
        }
        static GetPath ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetPath$VH() {
        return constants$4151.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetPath)(IUri*,BSTR*);
     * }
     */
    public static MemorySegment GetPath$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4151.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetPath)(IUri*,BSTR*);
     * }
     */
    public static void GetPath$set(MemorySegment seg, MemorySegment x) {
        constants$4151.const$3.set(seg, x);
    }
    public static MemorySegment GetPath$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4151.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void GetPath$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4151.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetPath GetPath(MemorySegment segment, Arena scope) {
        return GetPath.ofAddress(GetPath$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetPathAndQuery)(IUri*,BSTR*);
     * }
     */
    public interface GetPathAndQuery {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetPathAndQuery fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4151.const$4, fi, constants$34.const$0, scope);
        }
        static GetPathAndQuery ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetPathAndQuery$VH() {
        return constants$4151.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetPathAndQuery)(IUri*,BSTR*);
     * }
     */
    public static MemorySegment GetPathAndQuery$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4151.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetPathAndQuery)(IUri*,BSTR*);
     * }
     */
    public static void GetPathAndQuery$set(MemorySegment seg, MemorySegment x) {
        constants$4151.const$5.set(seg, x);
    }
    public static MemorySegment GetPathAndQuery$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4151.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GetPathAndQuery$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4151.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetPathAndQuery GetPathAndQuery(MemorySegment segment, Arena scope) {
        return GetPathAndQuery.ofAddress(GetPathAndQuery$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetQuery)(IUri*,BSTR*);
     * }
     */
    public interface GetQuery {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetQuery fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4152.const$0, fi, constants$34.const$0, scope);
        }
        static GetQuery ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetQuery$VH() {
        return constants$4152.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetQuery)(IUri*,BSTR*);
     * }
     */
    public static MemorySegment GetQuery$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4152.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetQuery)(IUri*,BSTR*);
     * }
     */
    public static void GetQuery$set(MemorySegment seg, MemorySegment x) {
        constants$4152.const$1.set(seg, x);
    }
    public static MemorySegment GetQuery$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4152.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void GetQuery$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4152.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetQuery GetQuery(MemorySegment segment, Arena scope) {
        return GetQuery.ofAddress(GetQuery$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetRawUri)(IUri*,BSTR*);
     * }
     */
    public interface GetRawUri {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetRawUri fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4152.const$2, fi, constants$34.const$0, scope);
        }
        static GetRawUri ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetRawUri$VH() {
        return constants$4152.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetRawUri)(IUri*,BSTR*);
     * }
     */
    public static MemorySegment GetRawUri$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4152.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetRawUri)(IUri*,BSTR*);
     * }
     */
    public static void GetRawUri$set(MemorySegment seg, MemorySegment x) {
        constants$4152.const$3.set(seg, x);
    }
    public static MemorySegment GetRawUri$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4152.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void GetRawUri$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4152.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetRawUri GetRawUri(MemorySegment segment, Arena scope) {
        return GetRawUri.ofAddress(GetRawUri$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetSchemeName)(IUri*,BSTR*);
     * }
     */
    public interface GetSchemeName {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetSchemeName fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4152.const$4, fi, constants$34.const$0, scope);
        }
        static GetSchemeName ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetSchemeName$VH() {
        return constants$4152.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetSchemeName)(IUri*,BSTR*);
     * }
     */
    public static MemorySegment GetSchemeName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4152.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetSchemeName)(IUri*,BSTR*);
     * }
     */
    public static void GetSchemeName$set(MemorySegment seg, MemorySegment x) {
        constants$4152.const$5.set(seg, x);
    }
    public static MemorySegment GetSchemeName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4152.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GetSchemeName$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4152.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetSchemeName GetSchemeName(MemorySegment segment, Arena scope) {
        return GetSchemeName.ofAddress(GetSchemeName$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetUserInfo)(IUri*,BSTR*);
     * }
     */
    public interface GetUserInfo {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetUserInfo fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4153.const$0, fi, constants$34.const$0, scope);
        }
        static GetUserInfo ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetUserInfo$VH() {
        return constants$4153.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetUserInfo)(IUri*,BSTR*);
     * }
     */
    public static MemorySegment GetUserInfo$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4153.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetUserInfo)(IUri*,BSTR*);
     * }
     */
    public static void GetUserInfo$set(MemorySegment seg, MemorySegment x) {
        constants$4153.const$1.set(seg, x);
    }
    public static MemorySegment GetUserInfo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4153.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void GetUserInfo$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4153.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetUserInfo GetUserInfo(MemorySegment segment, Arena scope) {
        return GetUserInfo.ofAddress(GetUserInfo$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetUserNameA)(IUri*,BSTR*);
     * }
     */
    public interface GetUserNameA {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetUserNameA fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4153.const$2, fi, constants$34.const$0, scope);
        }
        static GetUserNameA ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetUserNameA$VH() {
        return constants$4153.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetUserNameA)(IUri*,BSTR*);
     * }
     */
    public static MemorySegment GetUserNameA$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4153.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetUserNameA)(IUri*,BSTR*);
     * }
     */
    public static void GetUserNameA$set(MemorySegment seg, MemorySegment x) {
        constants$4153.const$3.set(seg, x);
    }
    public static MemorySegment GetUserNameA$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4153.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void GetUserNameA$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4153.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetUserNameA GetUserNameA(MemorySegment segment, Arena scope) {
        return GetUserNameA.ofAddress(GetUserNameA$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetHostType)(IUri*,DWORD*);
     * }
     */
    public interface GetHostType {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetHostType fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4153.const$4, fi, constants$34.const$0, scope);
        }
        static GetHostType ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetHostType$VH() {
        return constants$4153.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetHostType)(IUri*,DWORD*);
     * }
     */
    public static MemorySegment GetHostType$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4153.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetHostType)(IUri*,DWORD*);
     * }
     */
    public static void GetHostType$set(MemorySegment seg, MemorySegment x) {
        constants$4153.const$5.set(seg, x);
    }
    public static MemorySegment GetHostType$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4153.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GetHostType$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4153.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetHostType GetHostType(MemorySegment segment, Arena scope) {
        return GetHostType.ofAddress(GetHostType$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetPort)(IUri*,DWORD*);
     * }
     */
    public interface GetPort {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetPort fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4154.const$0, fi, constants$34.const$0, scope);
        }
        static GetPort ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetPort$VH() {
        return constants$4154.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetPort)(IUri*,DWORD*);
     * }
     */
    public static MemorySegment GetPort$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4154.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetPort)(IUri*,DWORD*);
     * }
     */
    public static void GetPort$set(MemorySegment seg, MemorySegment x) {
        constants$4154.const$1.set(seg, x);
    }
    public static MemorySegment GetPort$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4154.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void GetPort$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4154.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetPort GetPort(MemorySegment segment, Arena scope) {
        return GetPort.ofAddress(GetPort$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetScheme)(IUri*,DWORD*);
     * }
     */
    public interface GetScheme {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetScheme fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4154.const$2, fi, constants$34.const$0, scope);
        }
        static GetScheme ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetScheme$VH() {
        return constants$4154.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetScheme)(IUri*,DWORD*);
     * }
     */
    public static MemorySegment GetScheme$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4154.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetScheme)(IUri*,DWORD*);
     * }
     */
    public static void GetScheme$set(MemorySegment seg, MemorySegment x) {
        constants$4154.const$3.set(seg, x);
    }
    public static MemorySegment GetScheme$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4154.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void GetScheme$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4154.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetScheme GetScheme(MemorySegment segment, Arena scope) {
        return GetScheme.ofAddress(GetScheme$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetZone)(IUri*,DWORD*);
     * }
     */
    public interface GetZone {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetZone fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4154.const$4, fi, constants$34.const$0, scope);
        }
        static GetZone ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetZone$VH() {
        return constants$4154.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetZone)(IUri*,DWORD*);
     * }
     */
    public static MemorySegment GetZone$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4154.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetZone)(IUri*,DWORD*);
     * }
     */
    public static void GetZone$set(MemorySegment seg, MemorySegment x) {
        constants$4154.const$5.set(seg, x);
    }
    public static MemorySegment GetZone$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4154.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GetZone$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4154.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetZone GetZone(MemorySegment segment, Arena scope) {
        return GetZone.ofAddress(GetZone$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetProperties)(IUri*,LPDWORD);
     * }
     */
    public interface GetProperties {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetProperties fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4155.const$0, fi, constants$34.const$0, scope);
        }
        static GetProperties ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetProperties$VH() {
        return constants$4155.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetProperties)(IUri*,LPDWORD);
     * }
     */
    public static MemorySegment GetProperties$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4155.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetProperties)(IUri*,LPDWORD);
     * }
     */
    public static void GetProperties$set(MemorySegment seg, MemorySegment x) {
        constants$4155.const$1.set(seg, x);
    }
    public static MemorySegment GetProperties$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4155.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void GetProperties$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4155.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetProperties GetProperties(MemorySegment segment, Arena scope) {
        return GetProperties.ofAddress(GetProperties$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*IsEqual)(IUri*,IUri*,BOOL*);
     * }
     */
    public interface IsEqual {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(IsEqual fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4155.const$2, fi, constants$37.const$3, scope);
        }
        static IsEqual ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle IsEqual$VH() {
        return constants$4155.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*IsEqual)(IUri*,IUri*,BOOL*);
     * }
     */
    public static MemorySegment IsEqual$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4155.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*IsEqual)(IUri*,IUri*,BOOL*);
     * }
     */
    public static void IsEqual$set(MemorySegment seg, MemorySegment x) {
        constants$4155.const$3.set(seg, x);
    }
    public static MemorySegment IsEqual$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4155.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void IsEqual$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4155.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static IsEqual IsEqual(MemorySegment segment, Arena scope) {
        return IsEqual.ofAddress(IsEqual$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



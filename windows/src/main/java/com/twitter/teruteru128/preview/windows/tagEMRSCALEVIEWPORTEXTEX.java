// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tagEMRSCALEVIEWPORTEXTEX {
 *     EMR emr;
 *     LONG xNum;
 *     LONG xDenom;
 *     LONG yNum;
 *     LONG yDenom;
 * };
 * }
 */
public class tagEMRSCALEVIEWPORTEXTEX {

    public static MemoryLayout $LAYOUT() {
        return constants$1079.const$4;
    }
    public static MemorySegment emr$slice(MemorySegment seg) {
        return seg.asSlice(0, 8);
    }
    public static VarHandle xNum$VH() {
        return constants$1079.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LONG xNum;
     * }
     */
    public static int xNum$get(MemorySegment seg) {
        return (int)constants$1079.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LONG xNum;
     * }
     */
    public static void xNum$set(MemorySegment seg, int x) {
        constants$1079.const$5.set(seg, x);
    }
    public static int xNum$get(MemorySegment seg, long index) {
        return (int)constants$1079.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void xNum$set(MemorySegment seg, long index, int x) {
        constants$1079.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle xDenom$VH() {
        return constants$1080.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LONG xDenom;
     * }
     */
    public static int xDenom$get(MemorySegment seg) {
        return (int)constants$1080.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LONG xDenom;
     * }
     */
    public static void xDenom$set(MemorySegment seg, int x) {
        constants$1080.const$0.set(seg, x);
    }
    public static int xDenom$get(MemorySegment seg, long index) {
        return (int)constants$1080.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void xDenom$set(MemorySegment seg, long index, int x) {
        constants$1080.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle yNum$VH() {
        return constants$1080.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LONG yNum;
     * }
     */
    public static int yNum$get(MemorySegment seg) {
        return (int)constants$1080.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LONG yNum;
     * }
     */
    public static void yNum$set(MemorySegment seg, int x) {
        constants$1080.const$1.set(seg, x);
    }
    public static int yNum$get(MemorySegment seg, long index) {
        return (int)constants$1080.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void yNum$set(MemorySegment seg, long index, int x) {
        constants$1080.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle yDenom$VH() {
        return constants$1080.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LONG yDenom;
     * }
     */
    public static int yDenom$get(MemorySegment seg) {
        return (int)constants$1080.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LONG yDenom;
     * }
     */
    public static void yDenom$set(MemorySegment seg, int x) {
        constants$1080.const$2.set(seg, x);
    }
    public static int yDenom$get(MemorySegment seg, long index) {
        return (int)constants$1080.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void yDenom$set(MemorySegment seg, long index, int x) {
        constants$1080.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



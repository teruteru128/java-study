// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IPersistMonikerVtbl {
 *     HRESULT (*QueryInterface)(IPersistMoniker*,const IID*,void**);
 *     ULONG (*AddRef)(IPersistMoniker*);
 *     ULONG (*Release)(IPersistMoniker*);
 *     HRESULT (*GetClassID)(IPersistMoniker*,CLSID*);
 *     HRESULT (*IsDirty)(IPersistMoniker*);
 *     HRESULT (*Load)(IPersistMoniker*,BOOL,IMoniker*,LPBC,DWORD);
 *     HRESULT (*Save)(IPersistMoniker*,IMoniker*,LPBC,BOOL);
 *     HRESULT (*SaveCompleted)(IPersistMoniker*,IMoniker*,LPBC);
 *     HRESULT (*GetCurMoniker)(IPersistMoniker*,IMoniker**);
 * };
 * }
 */
public class IPersistMonikerVtbl {

    public static MemoryLayout $LAYOUT() {
        return constants$4094.const$2;
    }
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IPersistMoniker*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4094.const$3, fi, constants$37.const$3, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle QueryInterface$VH() {
        return constants$4094.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IPersistMoniker*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4094.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IPersistMoniker*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        constants$4094.const$4.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4094.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4094.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, Arena scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*AddRef)(IPersistMoniker*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4094.const$5, fi, constants$18.const$5, scope);
        }
        static AddRef ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle AddRef$VH() {
        return constants$4095.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IPersistMoniker*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4095.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IPersistMoniker*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        constants$4095.const$0.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4095.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4095.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, Arena scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*Release)(IPersistMoniker*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4095.const$1, fi, constants$18.const$5, scope);
        }
        static Release ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Release$VH() {
        return constants$4095.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IPersistMoniker*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4095.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IPersistMoniker*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        constants$4095.const$2.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4095.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4095.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, Arena scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetClassID)(IPersistMoniker*,CLSID*);
     * }
     */
    public interface GetClassID {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetClassID fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4095.const$3, fi, constants$34.const$0, scope);
        }
        static GetClassID ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetClassID$VH() {
        return constants$4095.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetClassID)(IPersistMoniker*,CLSID*);
     * }
     */
    public static MemorySegment GetClassID$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4095.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetClassID)(IPersistMoniker*,CLSID*);
     * }
     */
    public static void GetClassID$set(MemorySegment seg, MemorySegment x) {
        constants$4095.const$4.set(seg, x);
    }
    public static MemorySegment GetClassID$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4095.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void GetClassID$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4095.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetClassID GetClassID(MemorySegment segment, Arena scope) {
        return GetClassID.ofAddress(GetClassID$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*IsDirty)(IPersistMoniker*);
     * }
     */
    public interface IsDirty {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(IsDirty fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4095.const$5, fi, constants$18.const$5, scope);
        }
        static IsDirty ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle IsDirty$VH() {
        return constants$4096.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*IsDirty)(IPersistMoniker*);
     * }
     */
    public static MemorySegment IsDirty$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4096.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*IsDirty)(IPersistMoniker*);
     * }
     */
    public static void IsDirty$set(MemorySegment seg, MemorySegment x) {
        constants$4096.const$0.set(seg, x);
    }
    public static MemorySegment IsDirty$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4096.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void IsDirty$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4096.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static IsDirty IsDirty(MemorySegment segment, Arena scope) {
        return IsDirty.ofAddress(IsDirty$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*Load)(IPersistMoniker*,BOOL,IMoniker*,LPBC,DWORD);
     * }
     */
    public interface Load {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, int _x4);
        static MemorySegment allocate(Load fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4096.const$1, fi, constants$657.const$2, scope);
        }
        static Load ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, int __x4) -> {
                try {
                    return (int)constants$3607.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Load$VH() {
        return constants$4096.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Load)(IPersistMoniker*,BOOL,IMoniker*,LPBC,DWORD);
     * }
     */
    public static MemorySegment Load$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4096.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Load)(IPersistMoniker*,BOOL,IMoniker*,LPBC,DWORD);
     * }
     */
    public static void Load$set(MemorySegment seg, MemorySegment x) {
        constants$4096.const$2.set(seg, x);
    }
    public static MemorySegment Load$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4096.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void Load$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4096.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static Load Load(MemorySegment segment, Arena scope) {
        return Load.ofAddress(Load$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*Save)(IPersistMoniker*,IMoniker*,LPBC,BOOL);
     * }
     */
    public interface Save {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3);
        static MemorySegment allocate(Save fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4096.const$3, fi, constants$607.const$3, scope);
        }
        static Save ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3) -> {
                try {
                    return (int)constants$2133.const$3.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Save$VH() {
        return constants$4096.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Save)(IPersistMoniker*,IMoniker*,LPBC,BOOL);
     * }
     */
    public static MemorySegment Save$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4096.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Save)(IPersistMoniker*,IMoniker*,LPBC,BOOL);
     * }
     */
    public static void Save$set(MemorySegment seg, MemorySegment x) {
        constants$4096.const$4.set(seg, x);
    }
    public static MemorySegment Save$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4096.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void Save$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4096.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static Save Save(MemorySegment segment, Arena scope) {
        return Save.ofAddress(Save$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SaveCompleted)(IPersistMoniker*,IMoniker*,LPBC);
     * }
     */
    public interface SaveCompleted {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(SaveCompleted fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4096.const$5, fi, constants$37.const$3, scope);
        }
        static SaveCompleted ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SaveCompleted$VH() {
        return constants$4097.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SaveCompleted)(IPersistMoniker*,IMoniker*,LPBC);
     * }
     */
    public static MemorySegment SaveCompleted$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4097.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SaveCompleted)(IPersistMoniker*,IMoniker*,LPBC);
     * }
     */
    public static void SaveCompleted$set(MemorySegment seg, MemorySegment x) {
        constants$4097.const$0.set(seg, x);
    }
    public static MemorySegment SaveCompleted$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4097.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void SaveCompleted$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4097.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static SaveCompleted SaveCompleted(MemorySegment segment, Arena scope) {
        return SaveCompleted.ofAddress(SaveCompleted$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetCurMoniker)(IPersistMoniker*,IMoniker**);
     * }
     */
    public interface GetCurMoniker {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetCurMoniker fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4097.const$1, fi, constants$34.const$0, scope);
        }
        static GetCurMoniker ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetCurMoniker$VH() {
        return constants$4097.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetCurMoniker)(IPersistMoniker*,IMoniker**);
     * }
     */
    public static MemorySegment GetCurMoniker$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4097.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetCurMoniker)(IPersistMoniker*,IMoniker**);
     * }
     */
    public static void GetCurMoniker$set(MemorySegment seg, MemorySegment x) {
        constants$4097.const$2.set(seg, x);
    }
    public static MemorySegment GetCurMoniker$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4097.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void GetCurMoniker$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4097.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetCurMoniker GetCurMoniker(MemorySegment segment, Arena scope) {
        return GetCurMoniker.ofAddress(GetCurMoniker$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _STORAGE_WRITE_CACHE_PROPERTY {
 *     DWORD Version;
 *     DWORD Size;
 *     WRITE_CACHE_TYPE WriteCacheType;
 *     WRITE_CACHE_ENABLE WriteCacheEnabled;
 *     WRITE_CACHE_CHANGE WriteCacheChangeable;
 *     WRITE_THROUGH WriteThroughSupported;
 *     BOOLEAN FlushCacheSupported;
 *     BOOLEAN UserDefinedPowerProtection;
 *     BOOLEAN NVCacheEnabled;
 * };
 * }
 */
public class _STORAGE_WRITE_CACHE_PROPERTY {

    public static MemoryLayout $LAYOUT() {
        return constants$2478.const$5;
    }
    public static VarHandle Version$VH() {
        return constants$2479.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Version;
     * }
     */
    public static int Version$get(MemorySegment seg) {
        return (int)constants$2479.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Version;
     * }
     */
    public static void Version$set(MemorySegment seg, int x) {
        constants$2479.const$0.set(seg, x);
    }
    public static int Version$get(MemorySegment seg, long index) {
        return (int)constants$2479.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, int x) {
        constants$2479.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Size$VH() {
        return constants$2479.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Size;
     * }
     */
    public static int Size$get(MemorySegment seg) {
        return (int)constants$2479.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Size;
     * }
     */
    public static void Size$set(MemorySegment seg, int x) {
        constants$2479.const$1.set(seg, x);
    }
    public static int Size$get(MemorySegment seg, long index) {
        return (int)constants$2479.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void Size$set(MemorySegment seg, long index, int x) {
        constants$2479.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle WriteCacheType$VH() {
        return constants$2479.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WRITE_CACHE_TYPE WriteCacheType;
     * }
     */
    public static int WriteCacheType$get(MemorySegment seg) {
        return (int)constants$2479.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WRITE_CACHE_TYPE WriteCacheType;
     * }
     */
    public static void WriteCacheType$set(MemorySegment seg, int x) {
        constants$2479.const$2.set(seg, x);
    }
    public static int WriteCacheType$get(MemorySegment seg, long index) {
        return (int)constants$2479.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void WriteCacheType$set(MemorySegment seg, long index, int x) {
        constants$2479.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle WriteCacheEnabled$VH() {
        return constants$2479.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WRITE_CACHE_ENABLE WriteCacheEnabled;
     * }
     */
    public static int WriteCacheEnabled$get(MemorySegment seg) {
        return (int)constants$2479.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WRITE_CACHE_ENABLE WriteCacheEnabled;
     * }
     */
    public static void WriteCacheEnabled$set(MemorySegment seg, int x) {
        constants$2479.const$3.set(seg, x);
    }
    public static int WriteCacheEnabled$get(MemorySegment seg, long index) {
        return (int)constants$2479.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void WriteCacheEnabled$set(MemorySegment seg, long index, int x) {
        constants$2479.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle WriteCacheChangeable$VH() {
        return constants$2479.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WRITE_CACHE_CHANGE WriteCacheChangeable;
     * }
     */
    public static int WriteCacheChangeable$get(MemorySegment seg) {
        return (int)constants$2479.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WRITE_CACHE_CHANGE WriteCacheChangeable;
     * }
     */
    public static void WriteCacheChangeable$set(MemorySegment seg, int x) {
        constants$2479.const$4.set(seg, x);
    }
    public static int WriteCacheChangeable$get(MemorySegment seg, long index) {
        return (int)constants$2479.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void WriteCacheChangeable$set(MemorySegment seg, long index, int x) {
        constants$2479.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle WriteThroughSupported$VH() {
        return constants$2479.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WRITE_THROUGH WriteThroughSupported;
     * }
     */
    public static int WriteThroughSupported$get(MemorySegment seg) {
        return (int)constants$2479.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WRITE_THROUGH WriteThroughSupported;
     * }
     */
    public static void WriteThroughSupported$set(MemorySegment seg, int x) {
        constants$2479.const$5.set(seg, x);
    }
    public static int WriteThroughSupported$get(MemorySegment seg, long index) {
        return (int)constants$2479.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void WriteThroughSupported$set(MemorySegment seg, long index, int x) {
        constants$2479.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle FlushCacheSupported$VH() {
        return constants$2480.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BOOLEAN FlushCacheSupported;
     * }
     */
    public static byte FlushCacheSupported$get(MemorySegment seg) {
        return (byte)constants$2480.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BOOLEAN FlushCacheSupported;
     * }
     */
    public static void FlushCacheSupported$set(MemorySegment seg, byte x) {
        constants$2480.const$0.set(seg, x);
    }
    public static byte FlushCacheSupported$get(MemorySegment seg, long index) {
        return (byte)constants$2480.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void FlushCacheSupported$set(MemorySegment seg, long index, byte x) {
        constants$2480.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle UserDefinedPowerProtection$VH() {
        return constants$2480.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BOOLEAN UserDefinedPowerProtection;
     * }
     */
    public static byte UserDefinedPowerProtection$get(MemorySegment seg) {
        return (byte)constants$2480.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BOOLEAN UserDefinedPowerProtection;
     * }
     */
    public static void UserDefinedPowerProtection$set(MemorySegment seg, byte x) {
        constants$2480.const$1.set(seg, x);
    }
    public static byte UserDefinedPowerProtection$get(MemorySegment seg, long index) {
        return (byte)constants$2480.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void UserDefinedPowerProtection$set(MemorySegment seg, long index, byte x) {
        constants$2480.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle NVCacheEnabled$VH() {
        return constants$2480.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BOOLEAN NVCacheEnabled;
     * }
     */
    public static byte NVCacheEnabled$get(MemorySegment seg) {
        return (byte)constants$2480.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BOOLEAN NVCacheEnabled;
     * }
     */
    public static void NVCacheEnabled$set(MemorySegment seg, byte x) {
        constants$2480.const$2.set(seg, x);
    }
    public static byte NVCacheEnabled$get(MemorySegment seg, long index) {
        return (byte)constants$2480.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void NVCacheEnabled$set(MemorySegment seg, long index, byte x) {
        constants$2480.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



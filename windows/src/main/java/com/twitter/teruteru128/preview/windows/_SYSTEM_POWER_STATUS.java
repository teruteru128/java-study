// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _SYSTEM_POWER_STATUS {
 *     BYTE ACLineStatus;
 *     BYTE BatteryFlag;
 *     BYTE BatteryLifePercent;
 *     BYTE SystemStatusFlag;
 *     DWORD BatteryLifeTime;
 *     DWORD BatteryFullLifeTime;
 * };
 * }
 */
public class _SYSTEM_POWER_STATUS {

    public static MemoryLayout $LAYOUT() {
        return constants$845.const$2;
    }
    public static VarHandle ACLineStatus$VH() {
        return constants$845.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE ACLineStatus;
     * }
     */
    public static byte ACLineStatus$get(MemorySegment seg) {
        return (byte)constants$845.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE ACLineStatus;
     * }
     */
    public static void ACLineStatus$set(MemorySegment seg, byte x) {
        constants$845.const$3.set(seg, x);
    }
    public static byte ACLineStatus$get(MemorySegment seg, long index) {
        return (byte)constants$845.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void ACLineStatus$set(MemorySegment seg, long index, byte x) {
        constants$845.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle BatteryFlag$VH() {
        return constants$845.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE BatteryFlag;
     * }
     */
    public static byte BatteryFlag$get(MemorySegment seg) {
        return (byte)constants$845.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE BatteryFlag;
     * }
     */
    public static void BatteryFlag$set(MemorySegment seg, byte x) {
        constants$845.const$4.set(seg, x);
    }
    public static byte BatteryFlag$get(MemorySegment seg, long index) {
        return (byte)constants$845.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void BatteryFlag$set(MemorySegment seg, long index, byte x) {
        constants$845.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle BatteryLifePercent$VH() {
        return constants$845.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE BatteryLifePercent;
     * }
     */
    public static byte BatteryLifePercent$get(MemorySegment seg) {
        return (byte)constants$845.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE BatteryLifePercent;
     * }
     */
    public static void BatteryLifePercent$set(MemorySegment seg, byte x) {
        constants$845.const$5.set(seg, x);
    }
    public static byte BatteryLifePercent$get(MemorySegment seg, long index) {
        return (byte)constants$845.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void BatteryLifePercent$set(MemorySegment seg, long index, byte x) {
        constants$845.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle SystemStatusFlag$VH() {
        return constants$846.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE SystemStatusFlag;
     * }
     */
    public static byte SystemStatusFlag$get(MemorySegment seg) {
        return (byte)constants$846.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE SystemStatusFlag;
     * }
     */
    public static void SystemStatusFlag$set(MemorySegment seg, byte x) {
        constants$846.const$0.set(seg, x);
    }
    public static byte SystemStatusFlag$get(MemorySegment seg, long index) {
        return (byte)constants$846.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void SystemStatusFlag$set(MemorySegment seg, long index, byte x) {
        constants$846.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle BatteryLifeTime$VH() {
        return constants$846.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD BatteryLifeTime;
     * }
     */
    public static int BatteryLifeTime$get(MemorySegment seg) {
        return (int)constants$846.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD BatteryLifeTime;
     * }
     */
    public static void BatteryLifeTime$set(MemorySegment seg, int x) {
        constants$846.const$1.set(seg, x);
    }
    public static int BatteryLifeTime$get(MemorySegment seg, long index) {
        return (int)constants$846.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void BatteryLifeTime$set(MemorySegment seg, long index, int x) {
        constants$846.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle BatteryFullLifeTime$VH() {
        return constants$846.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD BatteryFullLifeTime;
     * }
     */
    public static int BatteryFullLifeTime$get(MemorySegment seg) {
        return (int)constants$846.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD BatteryFullLifeTime;
     * }
     */
    public static void BatteryFullLifeTime$set(MemorySegment seg, int x) {
        constants$846.const$2.set(seg, x);
    }
    public static int BatteryFullLifeTime$get(MemorySegment seg, long index) {
        return (int)constants$846.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void BatteryFullLifeTime$set(MemorySegment seg, long index, int x) {
        constants$846.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



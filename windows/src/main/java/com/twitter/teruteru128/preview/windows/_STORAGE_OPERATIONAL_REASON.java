// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _STORAGE_OPERATIONAL_REASON {
 *     DWORD Version;
 *     DWORD Size;
 *     STORAGE_OPERATIONAL_STATUS_REASON Reason;
 *     union  RawBytes;
 * };
 * }
 */
public class _STORAGE_OPERATIONAL_REASON {

    public static MemoryLayout $LAYOUT() {
        return constants$2426.const$4;
    }
    public static VarHandle Version$VH() {
        return constants$2426.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Version;
     * }
     */
    public static int Version$get(MemorySegment seg) {
        return (int)constants$2426.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Version;
     * }
     */
    public static void Version$set(MemorySegment seg, int x) {
        constants$2426.const$5.set(seg, x);
    }
    public static int Version$get(MemorySegment seg, long index) {
        return (int)constants$2426.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, int x) {
        constants$2426.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Size$VH() {
        return constants$2427.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Size;
     * }
     */
    public static int Size$get(MemorySegment seg) {
        return (int)constants$2427.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Size;
     * }
     */
    public static void Size$set(MemorySegment seg, int x) {
        constants$2427.const$0.set(seg, x);
    }
    public static int Size$get(MemorySegment seg, long index) {
        return (int)constants$2427.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Size$set(MemorySegment seg, long index, int x) {
        constants$2427.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Reason$VH() {
        return constants$2427.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * STORAGE_OPERATIONAL_STATUS_REASON Reason;
     * }
     */
    public static int Reason$get(MemorySegment seg) {
        return (int)constants$2427.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * STORAGE_OPERATIONAL_STATUS_REASON Reason;
     * }
     */
    public static void Reason$set(MemorySegment seg, int x) {
        constants$2427.const$1.set(seg, x);
    }
    public static int Reason$get(MemorySegment seg, long index) {
        return (int)constants$2427.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void Reason$set(MemorySegment seg, long index, int x) {
        constants$2427.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
     * union {
     *     struct  ScsiSenseKey;
     *     struct  NVDIMM_N;
     *     DWORD AsUlong;
     * };
     * }
     */
    public static final class RawBytes {

        // Suppresses default constructor, ensuring non-instantiability.
        private RawBytes() {}
        public static MemoryLayout $LAYOUT() {
            return constants$2427.const$2;
        }
        /**
         * {@snippet :
         * struct {
         *     BYTE SenseKey;
         *     BYTE ASC;
         *     BYTE ASCQ;
         *     BYTE Reserved;
         * };
         * }
         */
        public static final class ScsiSenseKey {

            // Suppresses default constructor, ensuring non-instantiability.
            private ScsiSenseKey() {}
            public static MemoryLayout $LAYOUT() {
                return constants$2427.const$3;
            }
            public static VarHandle SenseKey$VH() {
                return constants$2427.const$4;
            }
            /**
             * Getter for field:
             * {@snippet :
             * BYTE SenseKey;
             * }
             */
            public static byte SenseKey$get(MemorySegment seg) {
                return (byte)constants$2427.const$4.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * BYTE SenseKey;
             * }
             */
            public static void SenseKey$set(MemorySegment seg, byte x) {
                constants$2427.const$4.set(seg, x);
            }
            public static byte SenseKey$get(MemorySegment seg, long index) {
                return (byte)constants$2427.const$4.get(seg.asSlice(index*sizeof()));
            }
            public static void SenseKey$set(MemorySegment seg, long index, byte x) {
                constants$2427.const$4.set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle ASC$VH() {
                return constants$2427.const$5;
            }
            /**
             * Getter for field:
             * {@snippet :
             * BYTE ASC;
             * }
             */
            public static byte ASC$get(MemorySegment seg) {
                return (byte)constants$2427.const$5.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * BYTE ASC;
             * }
             */
            public static void ASC$set(MemorySegment seg, byte x) {
                constants$2427.const$5.set(seg, x);
            }
            public static byte ASC$get(MemorySegment seg, long index) {
                return (byte)constants$2427.const$5.get(seg.asSlice(index*sizeof()));
            }
            public static void ASC$set(MemorySegment seg, long index, byte x) {
                constants$2427.const$5.set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle ASCQ$VH() {
                return constants$2428.const$0;
            }
            /**
             * Getter for field:
             * {@snippet :
             * BYTE ASCQ;
             * }
             */
            public static byte ASCQ$get(MemorySegment seg) {
                return (byte)constants$2428.const$0.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * BYTE ASCQ;
             * }
             */
            public static void ASCQ$set(MemorySegment seg, byte x) {
                constants$2428.const$0.set(seg, x);
            }
            public static byte ASCQ$get(MemorySegment seg, long index) {
                return (byte)constants$2428.const$0.get(seg.asSlice(index*sizeof()));
            }
            public static void ASCQ$set(MemorySegment seg, long index, byte x) {
                constants$2428.const$0.set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle Reserved$VH() {
                return constants$2428.const$1;
            }
            /**
             * Getter for field:
             * {@snippet :
             * BYTE Reserved;
             * }
             */
            public static byte Reserved$get(MemorySegment seg) {
                return (byte)constants$2428.const$1.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * BYTE Reserved;
             * }
             */
            public static void Reserved$set(MemorySegment seg, byte x) {
                constants$2428.const$1.set(seg, x);
            }
            public static byte Reserved$get(MemorySegment seg, long index) {
                return (byte)constants$2428.const$1.get(seg.asSlice(index*sizeof()));
            }
            public static void Reserved$set(MemorySegment seg, long index, byte x) {
                constants$2428.const$1.set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
        }

        public static MemorySegment ScsiSenseKey$slice(MemorySegment seg) {
            return seg.asSlice(0, 4);
        }
        /**
         * {@snippet :
         * struct {
         *     BYTE CriticalHealth;
         *     BYTE ModuleHealth[2];
         *     BYTE ErrorThresholdStatus;
         * };
         * }
         */
        public static final class NVDIMM_N {

            // Suppresses default constructor, ensuring non-instantiability.
            private NVDIMM_N() {}
            public static MemoryLayout $LAYOUT() {
                return constants$2428.const$2;
            }
            public static VarHandle CriticalHealth$VH() {
                return constants$2428.const$3;
            }
            /**
             * Getter for field:
             * {@snippet :
             * BYTE CriticalHealth;
             * }
             */
            public static byte CriticalHealth$get(MemorySegment seg) {
                return (byte)constants$2428.const$3.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * BYTE CriticalHealth;
             * }
             */
            public static void CriticalHealth$set(MemorySegment seg, byte x) {
                constants$2428.const$3.set(seg, x);
            }
            public static byte CriticalHealth$get(MemorySegment seg, long index) {
                return (byte)constants$2428.const$3.get(seg.asSlice(index*sizeof()));
            }
            public static void CriticalHealth$set(MemorySegment seg, long index, byte x) {
                constants$2428.const$3.set(seg.asSlice(index*sizeof()), x);
            }
            public static MemorySegment ModuleHealth$slice(MemorySegment seg) {
                return seg.asSlice(1, 2);
            }
            public static VarHandle ErrorThresholdStatus$VH() {
                return constants$2428.const$4;
            }
            /**
             * Getter for field:
             * {@snippet :
             * BYTE ErrorThresholdStatus;
             * }
             */
            public static byte ErrorThresholdStatus$get(MemorySegment seg) {
                return (byte)constants$2428.const$4.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * BYTE ErrorThresholdStatus;
             * }
             */
            public static void ErrorThresholdStatus$set(MemorySegment seg, byte x) {
                constants$2428.const$4.set(seg, x);
            }
            public static byte ErrorThresholdStatus$get(MemorySegment seg, long index) {
                return (byte)constants$2428.const$4.get(seg.asSlice(index*sizeof()));
            }
            public static void ErrorThresholdStatus$set(MemorySegment seg, long index, byte x) {
                constants$2428.const$4.set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
        }

        public static MemorySegment NVDIMM_N$slice(MemorySegment seg) {
            return seg.asSlice(0, 4);
        }
        public static VarHandle AsUlong$VH() {
            return constants$2428.const$5;
        }
        /**
         * Getter for field:
         * {@snippet :
         * DWORD AsUlong;
         * }
         */
        public static int AsUlong$get(MemorySegment seg) {
            return (int)constants$2428.const$5.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * DWORD AsUlong;
         * }
         */
        public static void AsUlong$set(MemorySegment seg, int x) {
            constants$2428.const$5.set(seg, x);
        }
        public static int AsUlong$get(MemorySegment seg, long index) {
            return (int)constants$2428.const$5.get(seg.asSlice(index*sizeof()));
        }
        public static void AsUlong$set(MemorySegment seg, long index, int x) {
            constants$2428.const$5.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment RawBytes$slice(MemorySegment seg) {
        return seg.asSlice(12, 4);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct {
 *     DWORD ByteCount;
 *     WORD MajorVersion;
 *     WORD MinorVersion;
 *     DWORD BytesPerPhysicalSector;
 *     WORD LfsMajorVersion;
 *     WORD LfsMinorVersion;
 *     DWORD MaxDeviceTrimExtentCount;
 *     DWORD MaxDeviceTrimByteCount;
 *     DWORD MaxVolumeTrimExtentCount;
 *     DWORD MaxVolumeTrimByteCount;
 * };
 * }
 */
public class NTFS_EXTENDED_VOLUME_DATA {

    public static MemoryLayout $LAYOUT() {
        return constants$2573.const$2;
    }
    public static VarHandle ByteCount$VH() {
        return constants$2573.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD ByteCount;
     * }
     */
    public static int ByteCount$get(MemorySegment seg) {
        return (int)constants$2573.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD ByteCount;
     * }
     */
    public static void ByteCount$set(MemorySegment seg, int x) {
        constants$2573.const$3.set(seg, x);
    }
    public static int ByteCount$get(MemorySegment seg, long index) {
        return (int)constants$2573.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void ByteCount$set(MemorySegment seg, long index, int x) {
        constants$2573.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MajorVersion$VH() {
        return constants$2573.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD MajorVersion;
     * }
     */
    public static short MajorVersion$get(MemorySegment seg) {
        return (short)constants$2573.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD MajorVersion;
     * }
     */
    public static void MajorVersion$set(MemorySegment seg, short x) {
        constants$2573.const$4.set(seg, x);
    }
    public static short MajorVersion$get(MemorySegment seg, long index) {
        return (short)constants$2573.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void MajorVersion$set(MemorySegment seg, long index, short x) {
        constants$2573.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MinorVersion$VH() {
        return constants$2573.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD MinorVersion;
     * }
     */
    public static short MinorVersion$get(MemorySegment seg) {
        return (short)constants$2573.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD MinorVersion;
     * }
     */
    public static void MinorVersion$set(MemorySegment seg, short x) {
        constants$2573.const$5.set(seg, x);
    }
    public static short MinorVersion$get(MemorySegment seg, long index) {
        return (short)constants$2573.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void MinorVersion$set(MemorySegment seg, long index, short x) {
        constants$2573.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle BytesPerPhysicalSector$VH() {
        return constants$2574.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD BytesPerPhysicalSector;
     * }
     */
    public static int BytesPerPhysicalSector$get(MemorySegment seg) {
        return (int)constants$2574.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD BytesPerPhysicalSector;
     * }
     */
    public static void BytesPerPhysicalSector$set(MemorySegment seg, int x) {
        constants$2574.const$0.set(seg, x);
    }
    public static int BytesPerPhysicalSector$get(MemorySegment seg, long index) {
        return (int)constants$2574.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void BytesPerPhysicalSector$set(MemorySegment seg, long index, int x) {
        constants$2574.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle LfsMajorVersion$VH() {
        return constants$2574.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD LfsMajorVersion;
     * }
     */
    public static short LfsMajorVersion$get(MemorySegment seg) {
        return (short)constants$2574.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD LfsMajorVersion;
     * }
     */
    public static void LfsMajorVersion$set(MemorySegment seg, short x) {
        constants$2574.const$1.set(seg, x);
    }
    public static short LfsMajorVersion$get(MemorySegment seg, long index) {
        return (short)constants$2574.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void LfsMajorVersion$set(MemorySegment seg, long index, short x) {
        constants$2574.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle LfsMinorVersion$VH() {
        return constants$2574.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD LfsMinorVersion;
     * }
     */
    public static short LfsMinorVersion$get(MemorySegment seg) {
        return (short)constants$2574.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD LfsMinorVersion;
     * }
     */
    public static void LfsMinorVersion$set(MemorySegment seg, short x) {
        constants$2574.const$2.set(seg, x);
    }
    public static short LfsMinorVersion$get(MemorySegment seg, long index) {
        return (short)constants$2574.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void LfsMinorVersion$set(MemorySegment seg, long index, short x) {
        constants$2574.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MaxDeviceTrimExtentCount$VH() {
        return constants$2574.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD MaxDeviceTrimExtentCount;
     * }
     */
    public static int MaxDeviceTrimExtentCount$get(MemorySegment seg) {
        return (int)constants$2574.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD MaxDeviceTrimExtentCount;
     * }
     */
    public static void MaxDeviceTrimExtentCount$set(MemorySegment seg, int x) {
        constants$2574.const$3.set(seg, x);
    }
    public static int MaxDeviceTrimExtentCount$get(MemorySegment seg, long index) {
        return (int)constants$2574.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void MaxDeviceTrimExtentCount$set(MemorySegment seg, long index, int x) {
        constants$2574.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MaxDeviceTrimByteCount$VH() {
        return constants$2574.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD MaxDeviceTrimByteCount;
     * }
     */
    public static int MaxDeviceTrimByteCount$get(MemorySegment seg) {
        return (int)constants$2574.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD MaxDeviceTrimByteCount;
     * }
     */
    public static void MaxDeviceTrimByteCount$set(MemorySegment seg, int x) {
        constants$2574.const$4.set(seg, x);
    }
    public static int MaxDeviceTrimByteCount$get(MemorySegment seg, long index) {
        return (int)constants$2574.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void MaxDeviceTrimByteCount$set(MemorySegment seg, long index, int x) {
        constants$2574.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MaxVolumeTrimExtentCount$VH() {
        return constants$2574.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD MaxVolumeTrimExtentCount;
     * }
     */
    public static int MaxVolumeTrimExtentCount$get(MemorySegment seg) {
        return (int)constants$2574.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD MaxVolumeTrimExtentCount;
     * }
     */
    public static void MaxVolumeTrimExtentCount$set(MemorySegment seg, int x) {
        constants$2574.const$5.set(seg, x);
    }
    public static int MaxVolumeTrimExtentCount$get(MemorySegment seg, long index) {
        return (int)constants$2574.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void MaxVolumeTrimExtentCount$set(MemorySegment seg, long index, int x) {
        constants$2574.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MaxVolumeTrimByteCount$VH() {
        return constants$2575.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD MaxVolumeTrimByteCount;
     * }
     */
    public static int MaxVolumeTrimByteCount$get(MemorySegment seg) {
        return (int)constants$2575.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD MaxVolumeTrimByteCount;
     * }
     */
    public static void MaxVolumeTrimByteCount$set(MemorySegment seg, int x) {
        constants$2575.const$0.set(seg, x);
    }
    public static int MaxVolumeTrimByteCount$get(MemorySegment seg, long index) {
        return (int)constants$2575.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void MaxVolumeTrimByteCount$set(MemorySegment seg, long index, int x) {
        constants$2575.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



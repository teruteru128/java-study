// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _CONSOLE_HISTORY_INFO {
 *     UINT cbSize;
 *     UINT HistoryBufferSize;
 *     UINT NumberOfHistoryBuffers;
 *     DWORD dwFlags;
 * };
 * }
 */
public class _CONSOLE_HISTORY_INFO {

    public static MemoryLayout $LAYOUT() {
        return constants$1469.const$4;
    }
    public static VarHandle cbSize$VH() {
        return constants$1469.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * UINT cbSize;
     * }
     */
    public static int cbSize$get(MemorySegment seg) {
        return (int)constants$1469.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * UINT cbSize;
     * }
     */
    public static void cbSize$set(MemorySegment seg, int x) {
        constants$1469.const$5.set(seg, x);
    }
    public static int cbSize$get(MemorySegment seg, long index) {
        return (int)constants$1469.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void cbSize$set(MemorySegment seg, long index, int x) {
        constants$1469.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle HistoryBufferSize$VH() {
        return constants$1470.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * UINT HistoryBufferSize;
     * }
     */
    public static int HistoryBufferSize$get(MemorySegment seg) {
        return (int)constants$1470.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * UINT HistoryBufferSize;
     * }
     */
    public static void HistoryBufferSize$set(MemorySegment seg, int x) {
        constants$1470.const$0.set(seg, x);
    }
    public static int HistoryBufferSize$get(MemorySegment seg, long index) {
        return (int)constants$1470.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void HistoryBufferSize$set(MemorySegment seg, long index, int x) {
        constants$1470.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle NumberOfHistoryBuffers$VH() {
        return constants$1470.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * UINT NumberOfHistoryBuffers;
     * }
     */
    public static int NumberOfHistoryBuffers$get(MemorySegment seg) {
        return (int)constants$1470.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * UINT NumberOfHistoryBuffers;
     * }
     */
    public static void NumberOfHistoryBuffers$set(MemorySegment seg, int x) {
        constants$1470.const$1.set(seg, x);
    }
    public static int NumberOfHistoryBuffers$get(MemorySegment seg, long index) {
        return (int)constants$1470.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void NumberOfHistoryBuffers$set(MemorySegment seg, long index, int x) {
        constants$1470.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwFlags$VH() {
        return constants$1470.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwFlags;
     * }
     */
    public static int dwFlags$get(MemorySegment seg) {
        return (int)constants$1470.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwFlags;
     * }
     */
    public static void dwFlags$set(MemorySegment seg, int x) {
        constants$1470.const$2.set(seg, x);
    }
    public static int dwFlags$get(MemorySegment seg, long index) {
        return (int)constants$1470.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void dwFlags$set(MemorySegment seg, long index, int x) {
        constants$1470.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



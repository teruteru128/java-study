// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tagXFORM {
 *     FLOAT eM11;
 *     FLOAT eM12;
 *     FLOAT eM21;
 *     FLOAT eM22;
 *     FLOAT eDx;
 *     FLOAT eDy;
 * };
 * }
 */
public class tagXFORM {

    public static MemoryLayout $LAYOUT() {
        return constants$887.const$0;
    }
    public static VarHandle eM11$VH() {
        return constants$887.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * FLOAT eM11;
     * }
     */
    public static float eM11$get(MemorySegment seg) {
        return (float)constants$887.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * FLOAT eM11;
     * }
     */
    public static void eM11$set(MemorySegment seg, float x) {
        constants$887.const$1.set(seg, x);
    }
    public static float eM11$get(MemorySegment seg, long index) {
        return (float)constants$887.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void eM11$set(MemorySegment seg, long index, float x) {
        constants$887.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle eM12$VH() {
        return constants$887.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * FLOAT eM12;
     * }
     */
    public static float eM12$get(MemorySegment seg) {
        return (float)constants$887.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * FLOAT eM12;
     * }
     */
    public static void eM12$set(MemorySegment seg, float x) {
        constants$887.const$2.set(seg, x);
    }
    public static float eM12$get(MemorySegment seg, long index) {
        return (float)constants$887.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void eM12$set(MemorySegment seg, long index, float x) {
        constants$887.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle eM21$VH() {
        return constants$887.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * FLOAT eM21;
     * }
     */
    public static float eM21$get(MemorySegment seg) {
        return (float)constants$887.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * FLOAT eM21;
     * }
     */
    public static void eM21$set(MemorySegment seg, float x) {
        constants$887.const$3.set(seg, x);
    }
    public static float eM21$get(MemorySegment seg, long index) {
        return (float)constants$887.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void eM21$set(MemorySegment seg, long index, float x) {
        constants$887.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle eM22$VH() {
        return constants$887.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * FLOAT eM22;
     * }
     */
    public static float eM22$get(MemorySegment seg) {
        return (float)constants$887.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * FLOAT eM22;
     * }
     */
    public static void eM22$set(MemorySegment seg, float x) {
        constants$887.const$4.set(seg, x);
    }
    public static float eM22$get(MemorySegment seg, long index) {
        return (float)constants$887.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void eM22$set(MemorySegment seg, long index, float x) {
        constants$887.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle eDx$VH() {
        return constants$887.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * FLOAT eDx;
     * }
     */
    public static float eDx$get(MemorySegment seg) {
        return (float)constants$887.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * FLOAT eDx;
     * }
     */
    public static void eDx$set(MemorySegment seg, float x) {
        constants$887.const$5.set(seg, x);
    }
    public static float eDx$get(MemorySegment seg, long index) {
        return (float)constants$887.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void eDx$set(MemorySegment seg, long index, float x) {
        constants$887.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle eDy$VH() {
        return constants$888.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * FLOAT eDy;
     * }
     */
    public static float eDy$get(MemorySegment seg) {
        return (float)constants$888.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * FLOAT eDy;
     * }
     */
    public static void eDy$set(MemorySegment seg, float x) {
        constants$888.const$0.set(seg, x);
    }
    public static float eDy$get(MemorySegment seg, long index) {
        return (float)constants$888.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void eDy$set(MemorySegment seg, long index, float x) {
        constants$888.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



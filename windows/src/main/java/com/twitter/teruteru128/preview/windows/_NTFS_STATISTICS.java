// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _NTFS_STATISTICS {
 *     DWORD LogFileFullExceptions;
 *     DWORD OtherExceptions;
 *     DWORD MftReads;
 *     DWORD MftReadBytes;
 *     DWORD MftWrites;
 *     DWORD MftWriteBytes;
 *     struct  MftWritesUserLevel;
 *     WORD MftWritesFlushForLogFileFull;
 *     WORD MftWritesLazyWriter;
 *     WORD MftWritesUserRequest;
 *     DWORD Mft2Writes;
 *     DWORD Mft2WriteBytes;
 *     struct  Mft2WritesUserLevel;
 *     WORD Mft2WritesFlushForLogFileFull;
 *     WORD Mft2WritesLazyWriter;
 *     WORD Mft2WritesUserRequest;
 *     DWORD RootIndexReads;
 *     DWORD RootIndexReadBytes;
 *     DWORD RootIndexWrites;
 *     DWORD RootIndexWriteBytes;
 *     DWORD BitmapReads;
 *     DWORD BitmapReadBytes;
 *     DWORD BitmapWrites;
 *     DWORD BitmapWriteBytes;
 *     WORD BitmapWritesFlushForLogFileFull;
 *     WORD BitmapWritesLazyWriter;
 *     WORD BitmapWritesUserRequest;
 *     struct  BitmapWritesUserLevel;
 *     DWORD MftBitmapReads;
 *     DWORD MftBitmapReadBytes;
 *     DWORD MftBitmapWrites;
 *     DWORD MftBitmapWriteBytes;
 *     WORD MftBitmapWritesFlushForLogFileFull;
 *     WORD MftBitmapWritesLazyWriter;
 *     WORD MftBitmapWritesUserRequest;
 *     struct  MftBitmapWritesUserLevel;
 *     DWORD UserIndexReads;
 *     DWORD UserIndexReadBytes;
 *     DWORD UserIndexWrites;
 *     DWORD UserIndexWriteBytes;
 *     DWORD LogFileReads;
 *     DWORD LogFileReadBytes;
 *     DWORD LogFileWrites;
 *     DWORD LogFileWriteBytes;
 *     struct  Allocate;
 *     DWORD DiskResourcesExhausted;
 * };
 * }
 */
public class _NTFS_STATISTICS {

    public static MemoryLayout $LAYOUT() {
        return constants$2609.const$2;
    }
    public static VarHandle LogFileFullExceptions$VH() {
        return constants$2609.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD LogFileFullExceptions;
     * }
     */
    public static int LogFileFullExceptions$get(MemorySegment seg) {
        return (int)constants$2609.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD LogFileFullExceptions;
     * }
     */
    public static void LogFileFullExceptions$set(MemorySegment seg, int x) {
        constants$2609.const$3.set(seg, x);
    }
    public static int LogFileFullExceptions$get(MemorySegment seg, long index) {
        return (int)constants$2609.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void LogFileFullExceptions$set(MemorySegment seg, long index, int x) {
        constants$2609.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle OtherExceptions$VH() {
        return constants$2609.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD OtherExceptions;
     * }
     */
    public static int OtherExceptions$get(MemorySegment seg) {
        return (int)constants$2609.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD OtherExceptions;
     * }
     */
    public static void OtherExceptions$set(MemorySegment seg, int x) {
        constants$2609.const$4.set(seg, x);
    }
    public static int OtherExceptions$get(MemorySegment seg, long index) {
        return (int)constants$2609.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void OtherExceptions$set(MemorySegment seg, long index, int x) {
        constants$2609.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MftReads$VH() {
        return constants$2609.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD MftReads;
     * }
     */
    public static int MftReads$get(MemorySegment seg) {
        return (int)constants$2609.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD MftReads;
     * }
     */
    public static void MftReads$set(MemorySegment seg, int x) {
        constants$2609.const$5.set(seg, x);
    }
    public static int MftReads$get(MemorySegment seg, long index) {
        return (int)constants$2609.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void MftReads$set(MemorySegment seg, long index, int x) {
        constants$2609.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MftReadBytes$VH() {
        return constants$2610.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD MftReadBytes;
     * }
     */
    public static int MftReadBytes$get(MemorySegment seg) {
        return (int)constants$2610.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD MftReadBytes;
     * }
     */
    public static void MftReadBytes$set(MemorySegment seg, int x) {
        constants$2610.const$0.set(seg, x);
    }
    public static int MftReadBytes$get(MemorySegment seg, long index) {
        return (int)constants$2610.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void MftReadBytes$set(MemorySegment seg, long index, int x) {
        constants$2610.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MftWrites$VH() {
        return constants$2610.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD MftWrites;
     * }
     */
    public static int MftWrites$get(MemorySegment seg) {
        return (int)constants$2610.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD MftWrites;
     * }
     */
    public static void MftWrites$set(MemorySegment seg, int x) {
        constants$2610.const$1.set(seg, x);
    }
    public static int MftWrites$get(MemorySegment seg, long index) {
        return (int)constants$2610.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void MftWrites$set(MemorySegment seg, long index, int x) {
        constants$2610.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MftWriteBytes$VH() {
        return constants$2610.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD MftWriteBytes;
     * }
     */
    public static int MftWriteBytes$get(MemorySegment seg) {
        return (int)constants$2610.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD MftWriteBytes;
     * }
     */
    public static void MftWriteBytes$set(MemorySegment seg, int x) {
        constants$2610.const$2.set(seg, x);
    }
    public static int MftWriteBytes$get(MemorySegment seg, long index) {
        return (int)constants$2610.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void MftWriteBytes$set(MemorySegment seg, long index, int x) {
        constants$2610.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
     * struct {
     *     WORD Write;
     *     WORD Create;
     *     WORD SetInfo;
     *     WORD Flush;
     * };
     * }
     */
    public static final class MftWritesUserLevel {

        // Suppresses default constructor, ensuring non-instantiability.
        private MftWritesUserLevel() {}
        public static MemoryLayout $LAYOUT() {
            return constants$2610.const$3;
        }
        public static VarHandle Write$VH() {
            return constants$2610.const$4;
        }
        /**
         * Getter for field:
         * {@snippet :
         * WORD Write;
         * }
         */
        public static short Write$get(MemorySegment seg) {
            return (short)constants$2610.const$4.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * WORD Write;
         * }
         */
        public static void Write$set(MemorySegment seg, short x) {
            constants$2610.const$4.set(seg, x);
        }
        public static short Write$get(MemorySegment seg, long index) {
            return (short)constants$2610.const$4.get(seg.asSlice(index*sizeof()));
        }
        public static void Write$set(MemorySegment seg, long index, short x) {
            constants$2610.const$4.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Create$VH() {
            return constants$2610.const$5;
        }
        /**
         * Getter for field:
         * {@snippet :
         * WORD Create;
         * }
         */
        public static short Create$get(MemorySegment seg) {
            return (short)constants$2610.const$5.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * WORD Create;
         * }
         */
        public static void Create$set(MemorySegment seg, short x) {
            constants$2610.const$5.set(seg, x);
        }
        public static short Create$get(MemorySegment seg, long index) {
            return (short)constants$2610.const$5.get(seg.asSlice(index*sizeof()));
        }
        public static void Create$set(MemorySegment seg, long index, short x) {
            constants$2610.const$5.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SetInfo$VH() {
            return constants$2611.const$0;
        }
        /**
         * Getter for field:
         * {@snippet :
         * WORD SetInfo;
         * }
         */
        public static short SetInfo$get(MemorySegment seg) {
            return (short)constants$2611.const$0.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * WORD SetInfo;
         * }
         */
        public static void SetInfo$set(MemorySegment seg, short x) {
            constants$2611.const$0.set(seg, x);
        }
        public static short SetInfo$get(MemorySegment seg, long index) {
            return (short)constants$2611.const$0.get(seg.asSlice(index*sizeof()));
        }
        public static void SetInfo$set(MemorySegment seg, long index, short x) {
            constants$2611.const$0.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Flush$VH() {
            return constants$2611.const$1;
        }
        /**
         * Getter for field:
         * {@snippet :
         * WORD Flush;
         * }
         */
        public static short Flush$get(MemorySegment seg) {
            return (short)constants$2611.const$1.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * WORD Flush;
         * }
         */
        public static void Flush$set(MemorySegment seg, short x) {
            constants$2611.const$1.set(seg, x);
        }
        public static short Flush$get(MemorySegment seg, long index) {
            return (short)constants$2611.const$1.get(seg.asSlice(index*sizeof()));
        }
        public static void Flush$set(MemorySegment seg, long index, short x) {
            constants$2611.const$1.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment MftWritesUserLevel$slice(MemorySegment seg) {
        return seg.asSlice(24, 8);
    }
    public static VarHandle MftWritesFlushForLogFileFull$VH() {
        return constants$2611.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD MftWritesFlushForLogFileFull;
     * }
     */
    public static short MftWritesFlushForLogFileFull$get(MemorySegment seg) {
        return (short)constants$2611.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD MftWritesFlushForLogFileFull;
     * }
     */
    public static void MftWritesFlushForLogFileFull$set(MemorySegment seg, short x) {
        constants$2611.const$2.set(seg, x);
    }
    public static short MftWritesFlushForLogFileFull$get(MemorySegment seg, long index) {
        return (short)constants$2611.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void MftWritesFlushForLogFileFull$set(MemorySegment seg, long index, short x) {
        constants$2611.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MftWritesLazyWriter$VH() {
        return constants$2611.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD MftWritesLazyWriter;
     * }
     */
    public static short MftWritesLazyWriter$get(MemorySegment seg) {
        return (short)constants$2611.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD MftWritesLazyWriter;
     * }
     */
    public static void MftWritesLazyWriter$set(MemorySegment seg, short x) {
        constants$2611.const$3.set(seg, x);
    }
    public static short MftWritesLazyWriter$get(MemorySegment seg, long index) {
        return (short)constants$2611.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void MftWritesLazyWriter$set(MemorySegment seg, long index, short x) {
        constants$2611.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MftWritesUserRequest$VH() {
        return constants$2611.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD MftWritesUserRequest;
     * }
     */
    public static short MftWritesUserRequest$get(MemorySegment seg) {
        return (short)constants$2611.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD MftWritesUserRequest;
     * }
     */
    public static void MftWritesUserRequest$set(MemorySegment seg, short x) {
        constants$2611.const$4.set(seg, x);
    }
    public static short MftWritesUserRequest$get(MemorySegment seg, long index) {
        return (short)constants$2611.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void MftWritesUserRequest$set(MemorySegment seg, long index, short x) {
        constants$2611.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Mft2Writes$VH() {
        return constants$2611.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Mft2Writes;
     * }
     */
    public static int Mft2Writes$get(MemorySegment seg) {
        return (int)constants$2611.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Mft2Writes;
     * }
     */
    public static void Mft2Writes$set(MemorySegment seg, int x) {
        constants$2611.const$5.set(seg, x);
    }
    public static int Mft2Writes$get(MemorySegment seg, long index) {
        return (int)constants$2611.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void Mft2Writes$set(MemorySegment seg, long index, int x) {
        constants$2611.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Mft2WriteBytes$VH() {
        return constants$2612.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Mft2WriteBytes;
     * }
     */
    public static int Mft2WriteBytes$get(MemorySegment seg) {
        return (int)constants$2612.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Mft2WriteBytes;
     * }
     */
    public static void Mft2WriteBytes$set(MemorySegment seg, int x) {
        constants$2612.const$0.set(seg, x);
    }
    public static int Mft2WriteBytes$get(MemorySegment seg, long index) {
        return (int)constants$2612.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Mft2WriteBytes$set(MemorySegment seg, long index, int x) {
        constants$2612.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
     * struct {
     *     WORD Write;
     *     WORD Create;
     *     WORD SetInfo;
     *     WORD Flush;
     * };
     * }
     */
    public static final class Mft2WritesUserLevel {

        // Suppresses default constructor, ensuring non-instantiability.
        private Mft2WritesUserLevel() {}
        public static MemoryLayout $LAYOUT() {
            return constants$2610.const$3;
        }
        public static VarHandle Write$VH() {
            return constants$2612.const$1;
        }
        /**
         * Getter for field:
         * {@snippet :
         * WORD Write;
         * }
         */
        public static short Write$get(MemorySegment seg) {
            return (short)constants$2612.const$1.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * WORD Write;
         * }
         */
        public static void Write$set(MemorySegment seg, short x) {
            constants$2612.const$1.set(seg, x);
        }
        public static short Write$get(MemorySegment seg, long index) {
            return (short)constants$2612.const$1.get(seg.asSlice(index*sizeof()));
        }
        public static void Write$set(MemorySegment seg, long index, short x) {
            constants$2612.const$1.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Create$VH() {
            return constants$2612.const$2;
        }
        /**
         * Getter for field:
         * {@snippet :
         * WORD Create;
         * }
         */
        public static short Create$get(MemorySegment seg) {
            return (short)constants$2612.const$2.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * WORD Create;
         * }
         */
        public static void Create$set(MemorySegment seg, short x) {
            constants$2612.const$2.set(seg, x);
        }
        public static short Create$get(MemorySegment seg, long index) {
            return (short)constants$2612.const$2.get(seg.asSlice(index*sizeof()));
        }
        public static void Create$set(MemorySegment seg, long index, short x) {
            constants$2612.const$2.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SetInfo$VH() {
            return constants$2612.const$3;
        }
        /**
         * Getter for field:
         * {@snippet :
         * WORD SetInfo;
         * }
         */
        public static short SetInfo$get(MemorySegment seg) {
            return (short)constants$2612.const$3.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * WORD SetInfo;
         * }
         */
        public static void SetInfo$set(MemorySegment seg, short x) {
            constants$2612.const$3.set(seg, x);
        }
        public static short SetInfo$get(MemorySegment seg, long index) {
            return (short)constants$2612.const$3.get(seg.asSlice(index*sizeof()));
        }
        public static void SetInfo$set(MemorySegment seg, long index, short x) {
            constants$2612.const$3.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Flush$VH() {
            return constants$2612.const$4;
        }
        /**
         * Getter for field:
         * {@snippet :
         * WORD Flush;
         * }
         */
        public static short Flush$get(MemorySegment seg) {
            return (short)constants$2612.const$4.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * WORD Flush;
         * }
         */
        public static void Flush$set(MemorySegment seg, short x) {
            constants$2612.const$4.set(seg, x);
        }
        public static short Flush$get(MemorySegment seg, long index) {
            return (short)constants$2612.const$4.get(seg.asSlice(index*sizeof()));
        }
        public static void Flush$set(MemorySegment seg, long index, short x) {
            constants$2612.const$4.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment Mft2WritesUserLevel$slice(MemorySegment seg) {
        return seg.asSlice(48, 8);
    }
    public static VarHandle Mft2WritesFlushForLogFileFull$VH() {
        return constants$2612.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD Mft2WritesFlushForLogFileFull;
     * }
     */
    public static short Mft2WritesFlushForLogFileFull$get(MemorySegment seg) {
        return (short)constants$2612.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD Mft2WritesFlushForLogFileFull;
     * }
     */
    public static void Mft2WritesFlushForLogFileFull$set(MemorySegment seg, short x) {
        constants$2612.const$5.set(seg, x);
    }
    public static short Mft2WritesFlushForLogFileFull$get(MemorySegment seg, long index) {
        return (short)constants$2612.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void Mft2WritesFlushForLogFileFull$set(MemorySegment seg, long index, short x) {
        constants$2612.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Mft2WritesLazyWriter$VH() {
        return constants$2613.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD Mft2WritesLazyWriter;
     * }
     */
    public static short Mft2WritesLazyWriter$get(MemorySegment seg) {
        return (short)constants$2613.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD Mft2WritesLazyWriter;
     * }
     */
    public static void Mft2WritesLazyWriter$set(MemorySegment seg, short x) {
        constants$2613.const$0.set(seg, x);
    }
    public static short Mft2WritesLazyWriter$get(MemorySegment seg, long index) {
        return (short)constants$2613.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Mft2WritesLazyWriter$set(MemorySegment seg, long index, short x) {
        constants$2613.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Mft2WritesUserRequest$VH() {
        return constants$2613.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD Mft2WritesUserRequest;
     * }
     */
    public static short Mft2WritesUserRequest$get(MemorySegment seg) {
        return (short)constants$2613.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD Mft2WritesUserRequest;
     * }
     */
    public static void Mft2WritesUserRequest$set(MemorySegment seg, short x) {
        constants$2613.const$1.set(seg, x);
    }
    public static short Mft2WritesUserRequest$get(MemorySegment seg, long index) {
        return (short)constants$2613.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void Mft2WritesUserRequest$set(MemorySegment seg, long index, short x) {
        constants$2613.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle RootIndexReads$VH() {
        return constants$2613.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD RootIndexReads;
     * }
     */
    public static int RootIndexReads$get(MemorySegment seg) {
        return (int)constants$2613.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD RootIndexReads;
     * }
     */
    public static void RootIndexReads$set(MemorySegment seg, int x) {
        constants$2613.const$2.set(seg, x);
    }
    public static int RootIndexReads$get(MemorySegment seg, long index) {
        return (int)constants$2613.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void RootIndexReads$set(MemorySegment seg, long index, int x) {
        constants$2613.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle RootIndexReadBytes$VH() {
        return constants$2613.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD RootIndexReadBytes;
     * }
     */
    public static int RootIndexReadBytes$get(MemorySegment seg) {
        return (int)constants$2613.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD RootIndexReadBytes;
     * }
     */
    public static void RootIndexReadBytes$set(MemorySegment seg, int x) {
        constants$2613.const$3.set(seg, x);
    }
    public static int RootIndexReadBytes$get(MemorySegment seg, long index) {
        return (int)constants$2613.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void RootIndexReadBytes$set(MemorySegment seg, long index, int x) {
        constants$2613.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle RootIndexWrites$VH() {
        return constants$2613.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD RootIndexWrites;
     * }
     */
    public static int RootIndexWrites$get(MemorySegment seg) {
        return (int)constants$2613.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD RootIndexWrites;
     * }
     */
    public static void RootIndexWrites$set(MemorySegment seg, int x) {
        constants$2613.const$4.set(seg, x);
    }
    public static int RootIndexWrites$get(MemorySegment seg, long index) {
        return (int)constants$2613.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void RootIndexWrites$set(MemorySegment seg, long index, int x) {
        constants$2613.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle RootIndexWriteBytes$VH() {
        return constants$2613.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD RootIndexWriteBytes;
     * }
     */
    public static int RootIndexWriteBytes$get(MemorySegment seg) {
        return (int)constants$2613.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD RootIndexWriteBytes;
     * }
     */
    public static void RootIndexWriteBytes$set(MemorySegment seg, int x) {
        constants$2613.const$5.set(seg, x);
    }
    public static int RootIndexWriteBytes$get(MemorySegment seg, long index) {
        return (int)constants$2613.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void RootIndexWriteBytes$set(MemorySegment seg, long index, int x) {
        constants$2613.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle BitmapReads$VH() {
        return constants$2614.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD BitmapReads;
     * }
     */
    public static int BitmapReads$get(MemorySegment seg) {
        return (int)constants$2614.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD BitmapReads;
     * }
     */
    public static void BitmapReads$set(MemorySegment seg, int x) {
        constants$2614.const$0.set(seg, x);
    }
    public static int BitmapReads$get(MemorySegment seg, long index) {
        return (int)constants$2614.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void BitmapReads$set(MemorySegment seg, long index, int x) {
        constants$2614.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle BitmapReadBytes$VH() {
        return constants$2614.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD BitmapReadBytes;
     * }
     */
    public static int BitmapReadBytes$get(MemorySegment seg) {
        return (int)constants$2614.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD BitmapReadBytes;
     * }
     */
    public static void BitmapReadBytes$set(MemorySegment seg, int x) {
        constants$2614.const$1.set(seg, x);
    }
    public static int BitmapReadBytes$get(MemorySegment seg, long index) {
        return (int)constants$2614.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void BitmapReadBytes$set(MemorySegment seg, long index, int x) {
        constants$2614.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle BitmapWrites$VH() {
        return constants$2614.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD BitmapWrites;
     * }
     */
    public static int BitmapWrites$get(MemorySegment seg) {
        return (int)constants$2614.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD BitmapWrites;
     * }
     */
    public static void BitmapWrites$set(MemorySegment seg, int x) {
        constants$2614.const$2.set(seg, x);
    }
    public static int BitmapWrites$get(MemorySegment seg, long index) {
        return (int)constants$2614.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void BitmapWrites$set(MemorySegment seg, long index, int x) {
        constants$2614.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle BitmapWriteBytes$VH() {
        return constants$2614.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD BitmapWriteBytes;
     * }
     */
    public static int BitmapWriteBytes$get(MemorySegment seg) {
        return (int)constants$2614.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD BitmapWriteBytes;
     * }
     */
    public static void BitmapWriteBytes$set(MemorySegment seg, int x) {
        constants$2614.const$3.set(seg, x);
    }
    public static int BitmapWriteBytes$get(MemorySegment seg, long index) {
        return (int)constants$2614.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void BitmapWriteBytes$set(MemorySegment seg, long index, int x) {
        constants$2614.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle BitmapWritesFlushForLogFileFull$VH() {
        return constants$2614.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD BitmapWritesFlushForLogFileFull;
     * }
     */
    public static short BitmapWritesFlushForLogFileFull$get(MemorySegment seg) {
        return (short)constants$2614.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD BitmapWritesFlushForLogFileFull;
     * }
     */
    public static void BitmapWritesFlushForLogFileFull$set(MemorySegment seg, short x) {
        constants$2614.const$4.set(seg, x);
    }
    public static short BitmapWritesFlushForLogFileFull$get(MemorySegment seg, long index) {
        return (short)constants$2614.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void BitmapWritesFlushForLogFileFull$set(MemorySegment seg, long index, short x) {
        constants$2614.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle BitmapWritesLazyWriter$VH() {
        return constants$2614.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD BitmapWritesLazyWriter;
     * }
     */
    public static short BitmapWritesLazyWriter$get(MemorySegment seg) {
        return (short)constants$2614.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD BitmapWritesLazyWriter;
     * }
     */
    public static void BitmapWritesLazyWriter$set(MemorySegment seg, short x) {
        constants$2614.const$5.set(seg, x);
    }
    public static short BitmapWritesLazyWriter$get(MemorySegment seg, long index) {
        return (short)constants$2614.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void BitmapWritesLazyWriter$set(MemorySegment seg, long index, short x) {
        constants$2614.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle BitmapWritesUserRequest$VH() {
        return constants$2615.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD BitmapWritesUserRequest;
     * }
     */
    public static short BitmapWritesUserRequest$get(MemorySegment seg) {
        return (short)constants$2615.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD BitmapWritesUserRequest;
     * }
     */
    public static void BitmapWritesUserRequest$set(MemorySegment seg, short x) {
        constants$2615.const$0.set(seg, x);
    }
    public static short BitmapWritesUserRequest$get(MemorySegment seg, long index) {
        return (short)constants$2615.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void BitmapWritesUserRequest$set(MemorySegment seg, long index, short x) {
        constants$2615.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
     * struct {
     *     WORD Write;
     *     WORD Create;
     *     WORD SetInfo;
     * };
     * }
     */
    public static final class BitmapWritesUserLevel {

        // Suppresses default constructor, ensuring non-instantiability.
        private BitmapWritesUserLevel() {}
        public static MemoryLayout $LAYOUT() {
            return constants$2615.const$1;
        }
        public static VarHandle Write$VH() {
            return constants$2615.const$2;
        }
        /**
         * Getter for field:
         * {@snippet :
         * WORD Write;
         * }
         */
        public static short Write$get(MemorySegment seg) {
            return (short)constants$2615.const$2.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * WORD Write;
         * }
         */
        public static void Write$set(MemorySegment seg, short x) {
            constants$2615.const$2.set(seg, x);
        }
        public static short Write$get(MemorySegment seg, long index) {
            return (short)constants$2615.const$2.get(seg.asSlice(index*sizeof()));
        }
        public static void Write$set(MemorySegment seg, long index, short x) {
            constants$2615.const$2.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Create$VH() {
            return constants$2615.const$3;
        }
        /**
         * Getter for field:
         * {@snippet :
         * WORD Create;
         * }
         */
        public static short Create$get(MemorySegment seg) {
            return (short)constants$2615.const$3.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * WORD Create;
         * }
         */
        public static void Create$set(MemorySegment seg, short x) {
            constants$2615.const$3.set(seg, x);
        }
        public static short Create$get(MemorySegment seg, long index) {
            return (short)constants$2615.const$3.get(seg.asSlice(index*sizeof()));
        }
        public static void Create$set(MemorySegment seg, long index, short x) {
            constants$2615.const$3.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SetInfo$VH() {
            return constants$2615.const$4;
        }
        /**
         * Getter for field:
         * {@snippet :
         * WORD SetInfo;
         * }
         */
        public static short SetInfo$get(MemorySegment seg) {
            return (short)constants$2615.const$4.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * WORD SetInfo;
         * }
         */
        public static void SetInfo$set(MemorySegment seg, short x) {
            constants$2615.const$4.set(seg, x);
        }
        public static short SetInfo$get(MemorySegment seg, long index) {
            return (short)constants$2615.const$4.get(seg.asSlice(index*sizeof()));
        }
        public static void SetInfo$set(MemorySegment seg, long index, short x) {
            constants$2615.const$4.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment BitmapWritesUserLevel$slice(MemorySegment seg) {
        return seg.asSlice(102, 6);
    }
    public static VarHandle MftBitmapReads$VH() {
        return constants$2615.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD MftBitmapReads;
     * }
     */
    public static int MftBitmapReads$get(MemorySegment seg) {
        return (int)constants$2615.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD MftBitmapReads;
     * }
     */
    public static void MftBitmapReads$set(MemorySegment seg, int x) {
        constants$2615.const$5.set(seg, x);
    }
    public static int MftBitmapReads$get(MemorySegment seg, long index) {
        return (int)constants$2615.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void MftBitmapReads$set(MemorySegment seg, long index, int x) {
        constants$2615.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MftBitmapReadBytes$VH() {
        return constants$2616.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD MftBitmapReadBytes;
     * }
     */
    public static int MftBitmapReadBytes$get(MemorySegment seg) {
        return (int)constants$2616.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD MftBitmapReadBytes;
     * }
     */
    public static void MftBitmapReadBytes$set(MemorySegment seg, int x) {
        constants$2616.const$0.set(seg, x);
    }
    public static int MftBitmapReadBytes$get(MemorySegment seg, long index) {
        return (int)constants$2616.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void MftBitmapReadBytes$set(MemorySegment seg, long index, int x) {
        constants$2616.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MftBitmapWrites$VH() {
        return constants$2616.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD MftBitmapWrites;
     * }
     */
    public static int MftBitmapWrites$get(MemorySegment seg) {
        return (int)constants$2616.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD MftBitmapWrites;
     * }
     */
    public static void MftBitmapWrites$set(MemorySegment seg, int x) {
        constants$2616.const$1.set(seg, x);
    }
    public static int MftBitmapWrites$get(MemorySegment seg, long index) {
        return (int)constants$2616.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void MftBitmapWrites$set(MemorySegment seg, long index, int x) {
        constants$2616.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MftBitmapWriteBytes$VH() {
        return constants$2616.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD MftBitmapWriteBytes;
     * }
     */
    public static int MftBitmapWriteBytes$get(MemorySegment seg) {
        return (int)constants$2616.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD MftBitmapWriteBytes;
     * }
     */
    public static void MftBitmapWriteBytes$set(MemorySegment seg, int x) {
        constants$2616.const$2.set(seg, x);
    }
    public static int MftBitmapWriteBytes$get(MemorySegment seg, long index) {
        return (int)constants$2616.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void MftBitmapWriteBytes$set(MemorySegment seg, long index, int x) {
        constants$2616.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MftBitmapWritesFlushForLogFileFull$VH() {
        return constants$2616.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD MftBitmapWritesFlushForLogFileFull;
     * }
     */
    public static short MftBitmapWritesFlushForLogFileFull$get(MemorySegment seg) {
        return (short)constants$2616.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD MftBitmapWritesFlushForLogFileFull;
     * }
     */
    public static void MftBitmapWritesFlushForLogFileFull$set(MemorySegment seg, short x) {
        constants$2616.const$3.set(seg, x);
    }
    public static short MftBitmapWritesFlushForLogFileFull$get(MemorySegment seg, long index) {
        return (short)constants$2616.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void MftBitmapWritesFlushForLogFileFull$set(MemorySegment seg, long index, short x) {
        constants$2616.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MftBitmapWritesLazyWriter$VH() {
        return constants$2616.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD MftBitmapWritesLazyWriter;
     * }
     */
    public static short MftBitmapWritesLazyWriter$get(MemorySegment seg) {
        return (short)constants$2616.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD MftBitmapWritesLazyWriter;
     * }
     */
    public static void MftBitmapWritesLazyWriter$set(MemorySegment seg, short x) {
        constants$2616.const$4.set(seg, x);
    }
    public static short MftBitmapWritesLazyWriter$get(MemorySegment seg, long index) {
        return (short)constants$2616.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void MftBitmapWritesLazyWriter$set(MemorySegment seg, long index, short x) {
        constants$2616.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MftBitmapWritesUserRequest$VH() {
        return constants$2616.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD MftBitmapWritesUserRequest;
     * }
     */
    public static short MftBitmapWritesUserRequest$get(MemorySegment seg) {
        return (short)constants$2616.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD MftBitmapWritesUserRequest;
     * }
     */
    public static void MftBitmapWritesUserRequest$set(MemorySegment seg, short x) {
        constants$2616.const$5.set(seg, x);
    }
    public static short MftBitmapWritesUserRequest$get(MemorySegment seg, long index) {
        return (short)constants$2616.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void MftBitmapWritesUserRequest$set(MemorySegment seg, long index, short x) {
        constants$2616.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
     * struct {
     *     WORD Write;
     *     WORD Create;
     *     WORD SetInfo;
     *     WORD Flush;
     * };
     * }
     */
    public static final class MftBitmapWritesUserLevel {

        // Suppresses default constructor, ensuring non-instantiability.
        private MftBitmapWritesUserLevel() {}
        public static MemoryLayout $LAYOUT() {
            return constants$2610.const$3;
        }
        public static VarHandle Write$VH() {
            return constants$2617.const$0;
        }
        /**
         * Getter for field:
         * {@snippet :
         * WORD Write;
         * }
         */
        public static short Write$get(MemorySegment seg) {
            return (short)constants$2617.const$0.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * WORD Write;
         * }
         */
        public static void Write$set(MemorySegment seg, short x) {
            constants$2617.const$0.set(seg, x);
        }
        public static short Write$get(MemorySegment seg, long index) {
            return (short)constants$2617.const$0.get(seg.asSlice(index*sizeof()));
        }
        public static void Write$set(MemorySegment seg, long index, short x) {
            constants$2617.const$0.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Create$VH() {
            return constants$2617.const$1;
        }
        /**
         * Getter for field:
         * {@snippet :
         * WORD Create;
         * }
         */
        public static short Create$get(MemorySegment seg) {
            return (short)constants$2617.const$1.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * WORD Create;
         * }
         */
        public static void Create$set(MemorySegment seg, short x) {
            constants$2617.const$1.set(seg, x);
        }
        public static short Create$get(MemorySegment seg, long index) {
            return (short)constants$2617.const$1.get(seg.asSlice(index*sizeof()));
        }
        public static void Create$set(MemorySegment seg, long index, short x) {
            constants$2617.const$1.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SetInfo$VH() {
            return constants$2617.const$2;
        }
        /**
         * Getter for field:
         * {@snippet :
         * WORD SetInfo;
         * }
         */
        public static short SetInfo$get(MemorySegment seg) {
            return (short)constants$2617.const$2.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * WORD SetInfo;
         * }
         */
        public static void SetInfo$set(MemorySegment seg, short x) {
            constants$2617.const$2.set(seg, x);
        }
        public static short SetInfo$get(MemorySegment seg, long index) {
            return (short)constants$2617.const$2.get(seg.asSlice(index*sizeof()));
        }
        public static void SetInfo$set(MemorySegment seg, long index, short x) {
            constants$2617.const$2.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Flush$VH() {
            return constants$2617.const$3;
        }
        /**
         * Getter for field:
         * {@snippet :
         * WORD Flush;
         * }
         */
        public static short Flush$get(MemorySegment seg) {
            return (short)constants$2617.const$3.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * WORD Flush;
         * }
         */
        public static void Flush$set(MemorySegment seg, short x) {
            constants$2617.const$3.set(seg, x);
        }
        public static short Flush$get(MemorySegment seg, long index) {
            return (short)constants$2617.const$3.get(seg.asSlice(index*sizeof()));
        }
        public static void Flush$set(MemorySegment seg, long index, short x) {
            constants$2617.const$3.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment MftBitmapWritesUserLevel$slice(MemorySegment seg) {
        return seg.asSlice(130, 8);
    }
    public static VarHandle UserIndexReads$VH() {
        return constants$2617.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD UserIndexReads;
     * }
     */
    public static int UserIndexReads$get(MemorySegment seg) {
        return (int)constants$2617.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD UserIndexReads;
     * }
     */
    public static void UserIndexReads$set(MemorySegment seg, int x) {
        constants$2617.const$4.set(seg, x);
    }
    public static int UserIndexReads$get(MemorySegment seg, long index) {
        return (int)constants$2617.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void UserIndexReads$set(MemorySegment seg, long index, int x) {
        constants$2617.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle UserIndexReadBytes$VH() {
        return constants$2617.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD UserIndexReadBytes;
     * }
     */
    public static int UserIndexReadBytes$get(MemorySegment seg) {
        return (int)constants$2617.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD UserIndexReadBytes;
     * }
     */
    public static void UserIndexReadBytes$set(MemorySegment seg, int x) {
        constants$2617.const$5.set(seg, x);
    }
    public static int UserIndexReadBytes$get(MemorySegment seg, long index) {
        return (int)constants$2617.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void UserIndexReadBytes$set(MemorySegment seg, long index, int x) {
        constants$2617.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle UserIndexWrites$VH() {
        return constants$2618.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD UserIndexWrites;
     * }
     */
    public static int UserIndexWrites$get(MemorySegment seg) {
        return (int)constants$2618.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD UserIndexWrites;
     * }
     */
    public static void UserIndexWrites$set(MemorySegment seg, int x) {
        constants$2618.const$0.set(seg, x);
    }
    public static int UserIndexWrites$get(MemorySegment seg, long index) {
        return (int)constants$2618.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void UserIndexWrites$set(MemorySegment seg, long index, int x) {
        constants$2618.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle UserIndexWriteBytes$VH() {
        return constants$2618.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD UserIndexWriteBytes;
     * }
     */
    public static int UserIndexWriteBytes$get(MemorySegment seg) {
        return (int)constants$2618.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD UserIndexWriteBytes;
     * }
     */
    public static void UserIndexWriteBytes$set(MemorySegment seg, int x) {
        constants$2618.const$1.set(seg, x);
    }
    public static int UserIndexWriteBytes$get(MemorySegment seg, long index) {
        return (int)constants$2618.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void UserIndexWriteBytes$set(MemorySegment seg, long index, int x) {
        constants$2618.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle LogFileReads$VH() {
        return constants$2618.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD LogFileReads;
     * }
     */
    public static int LogFileReads$get(MemorySegment seg) {
        return (int)constants$2618.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD LogFileReads;
     * }
     */
    public static void LogFileReads$set(MemorySegment seg, int x) {
        constants$2618.const$2.set(seg, x);
    }
    public static int LogFileReads$get(MemorySegment seg, long index) {
        return (int)constants$2618.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void LogFileReads$set(MemorySegment seg, long index, int x) {
        constants$2618.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle LogFileReadBytes$VH() {
        return constants$2618.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD LogFileReadBytes;
     * }
     */
    public static int LogFileReadBytes$get(MemorySegment seg) {
        return (int)constants$2618.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD LogFileReadBytes;
     * }
     */
    public static void LogFileReadBytes$set(MemorySegment seg, int x) {
        constants$2618.const$3.set(seg, x);
    }
    public static int LogFileReadBytes$get(MemorySegment seg, long index) {
        return (int)constants$2618.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void LogFileReadBytes$set(MemorySegment seg, long index, int x) {
        constants$2618.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle LogFileWrites$VH() {
        return constants$2618.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD LogFileWrites;
     * }
     */
    public static int LogFileWrites$get(MemorySegment seg) {
        return (int)constants$2618.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD LogFileWrites;
     * }
     */
    public static void LogFileWrites$set(MemorySegment seg, int x) {
        constants$2618.const$4.set(seg, x);
    }
    public static int LogFileWrites$get(MemorySegment seg, long index) {
        return (int)constants$2618.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void LogFileWrites$set(MemorySegment seg, long index, int x) {
        constants$2618.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle LogFileWriteBytes$VH() {
        return constants$2618.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD LogFileWriteBytes;
     * }
     */
    public static int LogFileWriteBytes$get(MemorySegment seg) {
        return (int)constants$2618.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD LogFileWriteBytes;
     * }
     */
    public static void LogFileWriteBytes$set(MemorySegment seg, int x) {
        constants$2618.const$5.set(seg, x);
    }
    public static int LogFileWriteBytes$get(MemorySegment seg, long index) {
        return (int)constants$2618.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void LogFileWriteBytes$set(MemorySegment seg, long index, int x) {
        constants$2618.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
     * struct {
     *     DWORD Calls;
     *     DWORD Clusters;
     *     DWORD Hints;
     *     DWORD RunsReturned;
     *     DWORD HintsHonored;
     *     DWORD HintsClusters;
     *     DWORD Cache;
     *     DWORD CacheClusters;
     *     DWORD CacheMiss;
     *     DWORD CacheMissClusters;
     * };
     * }
     */
    public static final class Allocate {

        // Suppresses default constructor, ensuring non-instantiability.
        private Allocate() {}
        public static MemoryLayout $LAYOUT() {
            return constants$2619.const$0;
        }
        public static VarHandle Calls$VH() {
            return constants$2619.const$1;
        }
        /**
         * Getter for field:
         * {@snippet :
         * DWORD Calls;
         * }
         */
        public static int Calls$get(MemorySegment seg) {
            return (int)constants$2619.const$1.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * DWORD Calls;
         * }
         */
        public static void Calls$set(MemorySegment seg, int x) {
            constants$2619.const$1.set(seg, x);
        }
        public static int Calls$get(MemorySegment seg, long index) {
            return (int)constants$2619.const$1.get(seg.asSlice(index*sizeof()));
        }
        public static void Calls$set(MemorySegment seg, long index, int x) {
            constants$2619.const$1.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Clusters$VH() {
            return constants$2619.const$2;
        }
        /**
         * Getter for field:
         * {@snippet :
         * DWORD Clusters;
         * }
         */
        public static int Clusters$get(MemorySegment seg) {
            return (int)constants$2619.const$2.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * DWORD Clusters;
         * }
         */
        public static void Clusters$set(MemorySegment seg, int x) {
            constants$2619.const$2.set(seg, x);
        }
        public static int Clusters$get(MemorySegment seg, long index) {
            return (int)constants$2619.const$2.get(seg.asSlice(index*sizeof()));
        }
        public static void Clusters$set(MemorySegment seg, long index, int x) {
            constants$2619.const$2.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Hints$VH() {
            return constants$2619.const$3;
        }
        /**
         * Getter for field:
         * {@snippet :
         * DWORD Hints;
         * }
         */
        public static int Hints$get(MemorySegment seg) {
            return (int)constants$2619.const$3.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * DWORD Hints;
         * }
         */
        public static void Hints$set(MemorySegment seg, int x) {
            constants$2619.const$3.set(seg, x);
        }
        public static int Hints$get(MemorySegment seg, long index) {
            return (int)constants$2619.const$3.get(seg.asSlice(index*sizeof()));
        }
        public static void Hints$set(MemorySegment seg, long index, int x) {
            constants$2619.const$3.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle RunsReturned$VH() {
            return constants$2619.const$4;
        }
        /**
         * Getter for field:
         * {@snippet :
         * DWORD RunsReturned;
         * }
         */
        public static int RunsReturned$get(MemorySegment seg) {
            return (int)constants$2619.const$4.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * DWORD RunsReturned;
         * }
         */
        public static void RunsReturned$set(MemorySegment seg, int x) {
            constants$2619.const$4.set(seg, x);
        }
        public static int RunsReturned$get(MemorySegment seg, long index) {
            return (int)constants$2619.const$4.get(seg.asSlice(index*sizeof()));
        }
        public static void RunsReturned$set(MemorySegment seg, long index, int x) {
            constants$2619.const$4.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle HintsHonored$VH() {
            return constants$2619.const$5;
        }
        /**
         * Getter for field:
         * {@snippet :
         * DWORD HintsHonored;
         * }
         */
        public static int HintsHonored$get(MemorySegment seg) {
            return (int)constants$2619.const$5.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * DWORD HintsHonored;
         * }
         */
        public static void HintsHonored$set(MemorySegment seg, int x) {
            constants$2619.const$5.set(seg, x);
        }
        public static int HintsHonored$get(MemorySegment seg, long index) {
            return (int)constants$2619.const$5.get(seg.asSlice(index*sizeof()));
        }
        public static void HintsHonored$set(MemorySegment seg, long index, int x) {
            constants$2619.const$5.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle HintsClusters$VH() {
            return constants$2620.const$0;
        }
        /**
         * Getter for field:
         * {@snippet :
         * DWORD HintsClusters;
         * }
         */
        public static int HintsClusters$get(MemorySegment seg) {
            return (int)constants$2620.const$0.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * DWORD HintsClusters;
         * }
         */
        public static void HintsClusters$set(MemorySegment seg, int x) {
            constants$2620.const$0.set(seg, x);
        }
        public static int HintsClusters$get(MemorySegment seg, long index) {
            return (int)constants$2620.const$0.get(seg.asSlice(index*sizeof()));
        }
        public static void HintsClusters$set(MemorySegment seg, long index, int x) {
            constants$2620.const$0.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Cache$VH() {
            return constants$2620.const$1;
        }
        /**
         * Getter for field:
         * {@snippet :
         * DWORD Cache;
         * }
         */
        public static int Cache$get(MemorySegment seg) {
            return (int)constants$2620.const$1.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * DWORD Cache;
         * }
         */
        public static void Cache$set(MemorySegment seg, int x) {
            constants$2620.const$1.set(seg, x);
        }
        public static int Cache$get(MemorySegment seg, long index) {
            return (int)constants$2620.const$1.get(seg.asSlice(index*sizeof()));
        }
        public static void Cache$set(MemorySegment seg, long index, int x) {
            constants$2620.const$1.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CacheClusters$VH() {
            return constants$2620.const$2;
        }
        /**
         * Getter for field:
         * {@snippet :
         * DWORD CacheClusters;
         * }
         */
        public static int CacheClusters$get(MemorySegment seg) {
            return (int)constants$2620.const$2.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * DWORD CacheClusters;
         * }
         */
        public static void CacheClusters$set(MemorySegment seg, int x) {
            constants$2620.const$2.set(seg, x);
        }
        public static int CacheClusters$get(MemorySegment seg, long index) {
            return (int)constants$2620.const$2.get(seg.asSlice(index*sizeof()));
        }
        public static void CacheClusters$set(MemorySegment seg, long index, int x) {
            constants$2620.const$2.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CacheMiss$VH() {
            return constants$2620.const$3;
        }
        /**
         * Getter for field:
         * {@snippet :
         * DWORD CacheMiss;
         * }
         */
        public static int CacheMiss$get(MemorySegment seg) {
            return (int)constants$2620.const$3.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * DWORD CacheMiss;
         * }
         */
        public static void CacheMiss$set(MemorySegment seg, int x) {
            constants$2620.const$3.set(seg, x);
        }
        public static int CacheMiss$get(MemorySegment seg, long index) {
            return (int)constants$2620.const$3.get(seg.asSlice(index*sizeof()));
        }
        public static void CacheMiss$set(MemorySegment seg, long index, int x) {
            constants$2620.const$3.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CacheMissClusters$VH() {
            return constants$2620.const$4;
        }
        /**
         * Getter for field:
         * {@snippet :
         * DWORD CacheMissClusters;
         * }
         */
        public static int CacheMissClusters$get(MemorySegment seg) {
            return (int)constants$2620.const$4.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * DWORD CacheMissClusters;
         * }
         */
        public static void CacheMissClusters$set(MemorySegment seg, int x) {
            constants$2620.const$4.set(seg, x);
        }
        public static int CacheMissClusters$get(MemorySegment seg, long index) {
            return (int)constants$2620.const$4.get(seg.asSlice(index*sizeof()));
        }
        public static void CacheMissClusters$set(MemorySegment seg, long index, int x) {
            constants$2620.const$4.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment Allocate$slice(MemorySegment seg) {
        return seg.asSlice(172, 40);
    }
    public static VarHandle DiskResourcesExhausted$VH() {
        return constants$2620.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD DiskResourcesExhausted;
     * }
     */
    public static int DiskResourcesExhausted$get(MemorySegment seg) {
        return (int)constants$2620.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD DiskResourcesExhausted;
     * }
     */
    public static void DiskResourcesExhausted$set(MemorySegment seg, int x) {
        constants$2620.const$5.set(seg, x);
    }
    public static int DiskResourcesExhausted$get(MemorySegment seg, long index) {
        return (int)constants$2620.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void DiskResourcesExhausted$set(MemorySegment seg, long index, int x) {
        constants$2620.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



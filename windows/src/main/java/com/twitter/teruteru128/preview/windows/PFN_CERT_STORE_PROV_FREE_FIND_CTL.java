// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * int (*PFN_CERT_STORE_PROV_FREE_FIND_CTL)(void* hStoreProv,struct _CTL_CONTEXT* pCtlContext,void* pvStoreProvFindInfo,unsigned long dwFlags);
 * }
 */
public interface PFN_CERT_STORE_PROV_FREE_FIND_CTL {

    int apply(java.lang.foreign.MemorySegment hStoreProv, java.lang.foreign.MemorySegment pCtlContext, java.lang.foreign.MemorySegment pvStoreProvFindInfo, int dwFlags);
    static MemorySegment allocate(PFN_CERT_STORE_PROV_FREE_FIND_CTL fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$2134.const$4, fi, constants$607.const$3, scope);
    }
    static PFN_CERT_STORE_PROV_FREE_FIND_CTL ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (java.lang.foreign.MemorySegment _hStoreProv, java.lang.foreign.MemorySegment _pCtlContext, java.lang.foreign.MemorySegment _pvStoreProvFindInfo, int _dwFlags) -> {
            try {
                return (int)constants$2133.const$3.invokeExact(symbol, _hStoreProv, _pCtlContext, _pvStoreProvFindInfo, _dwFlags);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}



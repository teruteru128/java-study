// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tagRAWINPUT {
 *     RAWINPUTHEADER header;
 *     union  data;
 * };
 * }
 */
public class tagRAWINPUT {

    public static MemoryLayout $LAYOUT() {
        return constants$1389.const$1;
    }
    public static MemorySegment header$slice(MemorySegment seg) {
        return seg.asSlice(0, 24);
    }
    /**
     * {@snippet :
     * union {
     *     RAWMOUSE mouse;
     *     RAWKEYBOARD keyboard;
     *     RAWHID hid;
     * };
     * }
     */
    public static final class data {

        // Suppresses default constructor, ensuring non-instantiability.
        private data() {}
        public static MemoryLayout $LAYOUT() {
            return constants$1389.const$2;
        }
        public static MemorySegment mouse$slice(MemorySegment seg) {
            return seg.asSlice(0, 24);
        }
        public static MemorySegment keyboard$slice(MemorySegment seg) {
            return seg.asSlice(0, 16);
        }
        public static MemorySegment hid$slice(MemorySegment seg) {
            return seg.asSlice(0, 12);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment data$slice(MemorySegment seg) {
        return seg.asSlice(24, 24);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



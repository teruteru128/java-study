// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _SE_ACCESS_REPLY {
 *     DWORD Size;
 *     DWORD ResultListCount;
 *     PACCESS_MASK GrantedAccess;
 *     PDWORD AccessStatus;
 *     PACCESS_REASONS AccessReason;
 *     PPRIVILEGE_SET* Privileges;
 * };
 * }
 */
public class _SE_ACCESS_REPLY {

    public static MemoryLayout $LAYOUT() {
        return constants$163.const$3;
    }
    public static VarHandle Size$VH() {
        return constants$163.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Size;
     * }
     */
    public static int Size$get(MemorySegment seg) {
        return (int)constants$163.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Size;
     * }
     */
    public static void Size$set(MemorySegment seg, int x) {
        constants$163.const$4.set(seg, x);
    }
    public static int Size$get(MemorySegment seg, long index) {
        return (int)constants$163.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void Size$set(MemorySegment seg, long index, int x) {
        constants$163.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ResultListCount$VH() {
        return constants$163.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD ResultListCount;
     * }
     */
    public static int ResultListCount$get(MemorySegment seg) {
        return (int)constants$163.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD ResultListCount;
     * }
     */
    public static void ResultListCount$set(MemorySegment seg, int x) {
        constants$163.const$5.set(seg, x);
    }
    public static int ResultListCount$get(MemorySegment seg, long index) {
        return (int)constants$163.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void ResultListCount$set(MemorySegment seg, long index, int x) {
        constants$163.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle GrantedAccess$VH() {
        return constants$164.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PACCESS_MASK GrantedAccess;
     * }
     */
    public static MemorySegment GrantedAccess$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$164.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PACCESS_MASK GrantedAccess;
     * }
     */
    public static void GrantedAccess$set(MemorySegment seg, MemorySegment x) {
        constants$164.const$0.set(seg, x);
    }
    public static MemorySegment GrantedAccess$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$164.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void GrantedAccess$set(MemorySegment seg, long index, MemorySegment x) {
        constants$164.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle AccessStatus$VH() {
        return constants$164.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PDWORD AccessStatus;
     * }
     */
    public static MemorySegment AccessStatus$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$164.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PDWORD AccessStatus;
     * }
     */
    public static void AccessStatus$set(MemorySegment seg, MemorySegment x) {
        constants$164.const$1.set(seg, x);
    }
    public static MemorySegment AccessStatus$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$164.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void AccessStatus$set(MemorySegment seg, long index, MemorySegment x) {
        constants$164.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle AccessReason$VH() {
        return constants$164.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PACCESS_REASONS AccessReason;
     * }
     */
    public static MemorySegment AccessReason$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$164.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PACCESS_REASONS AccessReason;
     * }
     */
    public static void AccessReason$set(MemorySegment seg, MemorySegment x) {
        constants$164.const$2.set(seg, x);
    }
    public static MemorySegment AccessReason$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$164.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void AccessReason$set(MemorySegment seg, long index, MemorySegment x) {
        constants$164.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Privileges$VH() {
        return constants$164.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PPRIVILEGE_SET* Privileges;
     * }
     */
    public static MemorySegment Privileges$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$164.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PPRIVILEGE_SET* Privileges;
     * }
     */
    public static void Privileges$set(MemorySegment seg, MemorySegment x) {
        constants$164.const$3.set(seg, x);
    }
    public static MemorySegment Privileges$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$164.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void Privileges$set(MemorySegment seg, long index, MemorySegment x) {
        constants$164.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



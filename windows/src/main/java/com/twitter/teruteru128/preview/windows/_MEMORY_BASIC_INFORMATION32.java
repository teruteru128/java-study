// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _MEMORY_BASIC_INFORMATION32 {
 *     DWORD BaseAddress;
 *     DWORD AllocationBase;
 *     DWORD AllocationProtect;
 *     DWORD RegionSize;
 *     DWORD State;
 *     DWORD Protect;
 *     DWORD Type;
 * };
 * }
 */
public class _MEMORY_BASIC_INFORMATION32 {

    public static MemoryLayout $LAYOUT() {
        return constants$242.const$2;
    }
    public static VarHandle BaseAddress$VH() {
        return constants$242.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD BaseAddress;
     * }
     */
    public static int BaseAddress$get(MemorySegment seg) {
        return (int)constants$242.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD BaseAddress;
     * }
     */
    public static void BaseAddress$set(MemorySegment seg, int x) {
        constants$242.const$3.set(seg, x);
    }
    public static int BaseAddress$get(MemorySegment seg, long index) {
        return (int)constants$242.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void BaseAddress$set(MemorySegment seg, long index, int x) {
        constants$242.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle AllocationBase$VH() {
        return constants$242.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD AllocationBase;
     * }
     */
    public static int AllocationBase$get(MemorySegment seg) {
        return (int)constants$242.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD AllocationBase;
     * }
     */
    public static void AllocationBase$set(MemorySegment seg, int x) {
        constants$242.const$4.set(seg, x);
    }
    public static int AllocationBase$get(MemorySegment seg, long index) {
        return (int)constants$242.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void AllocationBase$set(MemorySegment seg, long index, int x) {
        constants$242.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle AllocationProtect$VH() {
        return constants$242.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD AllocationProtect;
     * }
     */
    public static int AllocationProtect$get(MemorySegment seg) {
        return (int)constants$242.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD AllocationProtect;
     * }
     */
    public static void AllocationProtect$set(MemorySegment seg, int x) {
        constants$242.const$5.set(seg, x);
    }
    public static int AllocationProtect$get(MemorySegment seg, long index) {
        return (int)constants$242.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void AllocationProtect$set(MemorySegment seg, long index, int x) {
        constants$242.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle RegionSize$VH() {
        return constants$243.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD RegionSize;
     * }
     */
    public static int RegionSize$get(MemorySegment seg) {
        return (int)constants$243.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD RegionSize;
     * }
     */
    public static void RegionSize$set(MemorySegment seg, int x) {
        constants$243.const$0.set(seg, x);
    }
    public static int RegionSize$get(MemorySegment seg, long index) {
        return (int)constants$243.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void RegionSize$set(MemorySegment seg, long index, int x) {
        constants$243.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle State$VH() {
        return constants$243.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD State;
     * }
     */
    public static int State$get(MemorySegment seg) {
        return (int)constants$243.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD State;
     * }
     */
    public static void State$set(MemorySegment seg, int x) {
        constants$243.const$1.set(seg, x);
    }
    public static int State$get(MemorySegment seg, long index) {
        return (int)constants$243.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void State$set(MemorySegment seg, long index, int x) {
        constants$243.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Protect$VH() {
        return constants$243.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Protect;
     * }
     */
    public static int Protect$get(MemorySegment seg) {
        return (int)constants$243.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Protect;
     * }
     */
    public static void Protect$set(MemorySegment seg, int x) {
        constants$243.const$2.set(seg, x);
    }
    public static int Protect$get(MemorySegment seg, long index) {
        return (int)constants$243.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void Protect$set(MemorySegment seg, long index, int x) {
        constants$243.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Type$VH() {
        return constants$243.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Type;
     * }
     */
    public static int Type$get(MemorySegment seg) {
        return (int)constants$243.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Type;
     * }
     */
    public static void Type$set(MemorySegment seg, int x) {
        constants$243.const$3.set(seg, x);
    }
    public static int Type$get(MemorySegment seg, long index) {
        return (int)constants$243.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void Type$set(MemorySegment seg, long index, int x) {
        constants$243.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



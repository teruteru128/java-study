// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IBindingVtbl {
 *     HRESULT (*QueryInterface)(IBinding*,const IID*,void**);
 *     ULONG (*AddRef)(IBinding*);
 *     ULONG (*Release)(IBinding*);
 *     HRESULT (*Abort)(IBinding*);
 *     HRESULT (*Suspend)(IBinding*);
 *     HRESULT (*Resume)(IBinding*);
 *     HRESULT (*SetPriority)(IBinding*,LONG);
 *     HRESULT (*GetPriority)(IBinding*,LONG*);
 *     HRESULT (*GetBindResult)(IBinding*,CLSID*,DWORD*,LPOLESTR*,DWORD*);
 * };
 * }
 */
public class IBindingVtbl {

    public static MemoryLayout $LAYOUT() {
        return constants$4103.const$0;
    }
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IBinding*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4103.const$1, fi, constants$37.const$3, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle QueryInterface$VH() {
        return constants$4103.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IBinding*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4103.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IBinding*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        constants$4103.const$2.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4103.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4103.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, Arena scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*AddRef)(IBinding*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4103.const$3, fi, constants$18.const$5, scope);
        }
        static AddRef ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle AddRef$VH() {
        return constants$4103.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IBinding*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4103.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IBinding*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        constants$4103.const$4.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4103.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4103.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, Arena scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*Release)(IBinding*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4103.const$5, fi, constants$18.const$5, scope);
        }
        static Release ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Release$VH() {
        return constants$4104.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IBinding*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4104.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IBinding*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        constants$4104.const$0.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4104.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4104.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, Arena scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*Abort)(IBinding*);
     * }
     */
    public interface Abort {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Abort fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4104.const$1, fi, constants$18.const$5, scope);
        }
        static Abort ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Abort$VH() {
        return constants$4104.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Abort)(IBinding*);
     * }
     */
    public static MemorySegment Abort$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4104.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Abort)(IBinding*);
     * }
     */
    public static void Abort$set(MemorySegment seg, MemorySegment x) {
        constants$4104.const$2.set(seg, x);
    }
    public static MemorySegment Abort$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4104.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void Abort$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4104.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static Abort Abort(MemorySegment segment, Arena scope) {
        return Abort.ofAddress(Abort$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*Suspend)(IBinding*);
     * }
     */
    public interface Suspend {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Suspend fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4104.const$3, fi, constants$18.const$5, scope);
        }
        static Suspend ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Suspend$VH() {
        return constants$4104.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Suspend)(IBinding*);
     * }
     */
    public static MemorySegment Suspend$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4104.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Suspend)(IBinding*);
     * }
     */
    public static void Suspend$set(MemorySegment seg, MemorySegment x) {
        constants$4104.const$4.set(seg, x);
    }
    public static MemorySegment Suspend$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4104.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void Suspend$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4104.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static Suspend Suspend(MemorySegment segment, Arena scope) {
        return Suspend.ofAddress(Suspend$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*Resume)(IBinding*);
     * }
     */
    public interface Resume {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Resume fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4104.const$5, fi, constants$18.const$5, scope);
        }
        static Resume ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Resume$VH() {
        return constants$4105.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Resume)(IBinding*);
     * }
     */
    public static MemorySegment Resume$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4105.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Resume)(IBinding*);
     * }
     */
    public static void Resume$set(MemorySegment seg, MemorySegment x) {
        constants$4105.const$0.set(seg, x);
    }
    public static MemorySegment Resume$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4105.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Resume$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4105.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static Resume Resume(MemorySegment segment, Arena scope) {
        return Resume.ofAddress(Resume$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetPriority)(IBinding*,LONG);
     * }
     */
    public interface SetPriority {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(SetPriority fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4105.const$1, fi, constants$65.const$2, scope);
        }
        static SetPriority ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)constants$800.const$4.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetPriority$VH() {
        return constants$4105.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetPriority)(IBinding*,LONG);
     * }
     */
    public static MemorySegment SetPriority$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4105.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetPriority)(IBinding*,LONG);
     * }
     */
    public static void SetPriority$set(MemorySegment seg, MemorySegment x) {
        constants$4105.const$2.set(seg, x);
    }
    public static MemorySegment SetPriority$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4105.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void SetPriority$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4105.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetPriority SetPriority(MemorySegment segment, Arena scope) {
        return SetPriority.ofAddress(SetPriority$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetPriority)(IBinding*,LONG*);
     * }
     */
    public interface GetPriority {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetPriority fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4105.const$3, fi, constants$34.const$0, scope);
        }
        static GetPriority ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetPriority$VH() {
        return constants$4105.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetPriority)(IBinding*,LONG*);
     * }
     */
    public static MemorySegment GetPriority$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4105.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetPriority)(IBinding*,LONG*);
     * }
     */
    public static void GetPriority$set(MemorySegment seg, MemorySegment x) {
        constants$4105.const$4.set(seg, x);
    }
    public static MemorySegment GetPriority$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4105.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void GetPriority$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4105.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetPriority GetPriority(MemorySegment segment, Arena scope) {
        return GetPriority.ofAddress(GetPriority$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetBindResult)(IBinding*,CLSID*,DWORD*,LPOLESTR*,DWORD*);
     * }
     */
    public interface GetBindResult {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(GetBindResult fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4105.const$5, fi, constants$577.const$5, scope);
        }
        static GetBindResult ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)constants$1781.const$5.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetBindResult$VH() {
        return constants$4106.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetBindResult)(IBinding*,CLSID*,DWORD*,LPOLESTR*,DWORD*);
     * }
     */
    public static MemorySegment GetBindResult$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4106.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetBindResult)(IBinding*,CLSID*,DWORD*,LPOLESTR*,DWORD*);
     * }
     */
    public static void GetBindResult$set(MemorySegment seg, MemorySegment x) {
        constants$4106.const$0.set(seg, x);
    }
    public static MemorySegment GetBindResult$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4106.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void GetBindResult$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4106.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetBindResult GetBindResult(MemorySegment segment, Arena scope) {
        return GetBindResult.ofAddress(GetBindResult$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



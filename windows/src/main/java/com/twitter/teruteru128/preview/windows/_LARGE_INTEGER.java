// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * union _LARGE_INTEGER {
 *     struct {
 *         DWORD LowPart;
 *         LONG HighPart;
 *     };
 *     struct  u;
 *     LONGLONG QuadPart;
 * };
 * }
 */
public class _LARGE_INTEGER {

    public static MemoryLayout $LAYOUT() {
        return constants$20.const$4;
    }
    public static VarHandle LowPart$VH() {
        return constants$20.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD LowPart;
     * }
     */
    public static int LowPart$get(MemorySegment seg) {
        return (int)constants$20.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD LowPart;
     * }
     */
    public static void LowPart$set(MemorySegment seg, int x) {
        constants$20.const$5.set(seg, x);
    }
    public static int LowPart$get(MemorySegment seg, long index) {
        return (int)constants$20.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void LowPart$set(MemorySegment seg, long index, int x) {
        constants$20.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle HighPart$VH() {
        return constants$21.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LONG HighPart;
     * }
     */
    public static int HighPart$get(MemorySegment seg) {
        return (int)constants$21.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LONG HighPart;
     * }
     */
    public static void HighPart$set(MemorySegment seg, int x) {
        constants$21.const$0.set(seg, x);
    }
    public static int HighPart$get(MemorySegment seg, long index) {
        return (int)constants$21.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void HighPart$set(MemorySegment seg, long index, int x) {
        constants$21.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
     * struct {
     *     DWORD LowPart;
     *     LONG HighPart;
     * };
     * }
     */
    public static final class u {

        // Suppresses default constructor, ensuring non-instantiability.
        private u() {}
        public static MemoryLayout $LAYOUT() {
            return constants$21.const$1;
        }
        public static VarHandle LowPart$VH() {
            return constants$21.const$2;
        }
        /**
         * Getter for field:
         * {@snippet :
         * DWORD LowPart;
         * }
         */
        public static int LowPart$get(MemorySegment seg) {
            return (int)constants$21.const$2.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * DWORD LowPart;
         * }
         */
        public static void LowPart$set(MemorySegment seg, int x) {
            constants$21.const$2.set(seg, x);
        }
        public static int LowPart$get(MemorySegment seg, long index) {
            return (int)constants$21.const$2.get(seg.asSlice(index*sizeof()));
        }
        public static void LowPart$set(MemorySegment seg, long index, int x) {
            constants$21.const$2.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle HighPart$VH() {
            return constants$21.const$3;
        }
        /**
         * Getter for field:
         * {@snippet :
         * LONG HighPart;
         * }
         */
        public static int HighPart$get(MemorySegment seg) {
            return (int)constants$21.const$3.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * LONG HighPart;
         * }
         */
        public static void HighPart$set(MemorySegment seg, int x) {
            constants$21.const$3.set(seg, x);
        }
        public static int HighPart$get(MemorySegment seg, long index) {
            return (int)constants$21.const$3.get(seg.asSlice(index*sizeof()));
        }
        public static void HighPart$set(MemorySegment seg, long index, int x) {
            constants$21.const$3.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment u$slice(MemorySegment seg) {
        return seg.asSlice(0, 8);
    }
    public static VarHandle QuadPart$VH() {
        return constants$21.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LONGLONG QuadPart;
     * }
     */
    public static long QuadPart$get(MemorySegment seg) {
        return (long)constants$21.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LONGLONG QuadPart;
     * }
     */
    public static void QuadPart$set(MemorySegment seg, long x) {
        constants$21.const$4.set(seg, x);
    }
    public static long QuadPart$get(MemorySegment seg, long index) {
        return (long)constants$21.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void QuadPart$set(MemorySegment seg, long index, long x) {
        constants$21.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



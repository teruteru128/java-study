// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tagRECONVERTSTRING {
 *     DWORD dwSize;
 *     DWORD dwVersion;
 *     DWORD dwStrLen;
 *     DWORD dwStrOffset;
 *     DWORD dwCompStrLen;
 *     DWORD dwCompStrOffset;
 *     DWORD dwTargetStrLen;
 *     DWORD dwTargetStrOffset;
 * };
 * }
 */
public class tagRECONVERTSTRING {

    public static MemoryLayout $LAYOUT() {
        return constants$4524.const$0;
    }
    public static VarHandle dwSize$VH() {
        return constants$4524.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwSize;
     * }
     */
    public static int dwSize$get(MemorySegment seg) {
        return (int)constants$4524.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwSize;
     * }
     */
    public static void dwSize$set(MemorySegment seg, int x) {
        constants$4524.const$1.set(seg, x);
    }
    public static int dwSize$get(MemorySegment seg, long index) {
        return (int)constants$4524.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void dwSize$set(MemorySegment seg, long index, int x) {
        constants$4524.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwVersion$VH() {
        return constants$4524.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwVersion;
     * }
     */
    public static int dwVersion$get(MemorySegment seg) {
        return (int)constants$4524.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwVersion;
     * }
     */
    public static void dwVersion$set(MemorySegment seg, int x) {
        constants$4524.const$2.set(seg, x);
    }
    public static int dwVersion$get(MemorySegment seg, long index) {
        return (int)constants$4524.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void dwVersion$set(MemorySegment seg, long index, int x) {
        constants$4524.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwStrLen$VH() {
        return constants$4524.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwStrLen;
     * }
     */
    public static int dwStrLen$get(MemorySegment seg) {
        return (int)constants$4524.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwStrLen;
     * }
     */
    public static void dwStrLen$set(MemorySegment seg, int x) {
        constants$4524.const$3.set(seg, x);
    }
    public static int dwStrLen$get(MemorySegment seg, long index) {
        return (int)constants$4524.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void dwStrLen$set(MemorySegment seg, long index, int x) {
        constants$4524.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwStrOffset$VH() {
        return constants$4524.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwStrOffset;
     * }
     */
    public static int dwStrOffset$get(MemorySegment seg) {
        return (int)constants$4524.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwStrOffset;
     * }
     */
    public static void dwStrOffset$set(MemorySegment seg, int x) {
        constants$4524.const$4.set(seg, x);
    }
    public static int dwStrOffset$get(MemorySegment seg, long index) {
        return (int)constants$4524.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void dwStrOffset$set(MemorySegment seg, long index, int x) {
        constants$4524.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwCompStrLen$VH() {
        return constants$4524.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwCompStrLen;
     * }
     */
    public static int dwCompStrLen$get(MemorySegment seg) {
        return (int)constants$4524.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwCompStrLen;
     * }
     */
    public static void dwCompStrLen$set(MemorySegment seg, int x) {
        constants$4524.const$5.set(seg, x);
    }
    public static int dwCompStrLen$get(MemorySegment seg, long index) {
        return (int)constants$4524.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void dwCompStrLen$set(MemorySegment seg, long index, int x) {
        constants$4524.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwCompStrOffset$VH() {
        return constants$4525.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwCompStrOffset;
     * }
     */
    public static int dwCompStrOffset$get(MemorySegment seg) {
        return (int)constants$4525.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwCompStrOffset;
     * }
     */
    public static void dwCompStrOffset$set(MemorySegment seg, int x) {
        constants$4525.const$0.set(seg, x);
    }
    public static int dwCompStrOffset$get(MemorySegment seg, long index) {
        return (int)constants$4525.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void dwCompStrOffset$set(MemorySegment seg, long index, int x) {
        constants$4525.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwTargetStrLen$VH() {
        return constants$4525.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwTargetStrLen;
     * }
     */
    public static int dwTargetStrLen$get(MemorySegment seg) {
        return (int)constants$4525.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwTargetStrLen;
     * }
     */
    public static void dwTargetStrLen$set(MemorySegment seg, int x) {
        constants$4525.const$1.set(seg, x);
    }
    public static int dwTargetStrLen$get(MemorySegment seg, long index) {
        return (int)constants$4525.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void dwTargetStrLen$set(MemorySegment seg, long index, int x) {
        constants$4525.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwTargetStrOffset$VH() {
        return constants$4525.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwTargetStrOffset;
     * }
     */
    public static int dwTargetStrOffset$get(MemorySegment seg) {
        return (int)constants$4525.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwTargetStrOffset;
     * }
     */
    public static void dwTargetStrOffset$set(MemorySegment seg, int x) {
        constants$4525.const$2.set(seg, x);
    }
    public static int dwTargetStrOffset$get(MemorySegment seg, long index) {
        return (int)constants$4525.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void dwTargetStrOffset$set(MemorySegment seg, long index, int x) {
        constants$4525.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



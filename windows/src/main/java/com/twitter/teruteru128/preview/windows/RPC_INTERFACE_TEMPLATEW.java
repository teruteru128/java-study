// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct {
 *     unsigned long Version;
 *     RPC_IF_HANDLE IfSpec;
 *     UUID* MgrTypeUuid;
 *     void* MgrEpv;
 *     unsigned int Flags;
 *     unsigned int MaxCalls;
 *     unsigned int MaxRpcSize;
 *     RPC_STATUS (*IfCallback)(RPC_IF_HANDLE,void*);
 *     UUID_VECTOR* UuidVector;
 *     RPC_WSTR Annotation;
 *     void* SecurityDescriptor;
 * };
 * }
 */
public class RPC_INTERFACE_TEMPLATEW {

    public static MemoryLayout $LAYOUT() {
        return constants$1773.const$1;
    }
    public static VarHandle Version$VH() {
        return constants$1775.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long Version;
     * }
     */
    public static int Version$get(MemorySegment seg) {
        return (int)constants$1775.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long Version;
     * }
     */
    public static void Version$set(MemorySegment seg, int x) {
        constants$1775.const$2.set(seg, x);
    }
    public static int Version$get(MemorySegment seg, long index) {
        return (int)constants$1775.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, int x) {
        constants$1775.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle IfSpec$VH() {
        return constants$1775.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * RPC_IF_HANDLE IfSpec;
     * }
     */
    public static MemorySegment IfSpec$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1775.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * RPC_IF_HANDLE IfSpec;
     * }
     */
    public static void IfSpec$set(MemorySegment seg, MemorySegment x) {
        constants$1775.const$3.set(seg, x);
    }
    public static MemorySegment IfSpec$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1775.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void IfSpec$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1775.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MgrTypeUuid$VH() {
        return constants$1775.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * UUID* MgrTypeUuid;
     * }
     */
    public static MemorySegment MgrTypeUuid$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1775.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * UUID* MgrTypeUuid;
     * }
     */
    public static void MgrTypeUuid$set(MemorySegment seg, MemorySegment x) {
        constants$1775.const$4.set(seg, x);
    }
    public static MemorySegment MgrTypeUuid$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1775.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void MgrTypeUuid$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1775.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MgrEpv$VH() {
        return constants$1775.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* MgrEpv;
     * }
     */
    public static MemorySegment MgrEpv$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1775.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* MgrEpv;
     * }
     */
    public static void MgrEpv$set(MemorySegment seg, MemorySegment x) {
        constants$1775.const$5.set(seg, x);
    }
    public static MemorySegment MgrEpv$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1775.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void MgrEpv$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1775.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Flags$VH() {
        return constants$1776.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int Flags;
     * }
     */
    public static int Flags$get(MemorySegment seg) {
        return (int)constants$1776.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int Flags;
     * }
     */
    public static void Flags$set(MemorySegment seg, int x) {
        constants$1776.const$0.set(seg, x);
    }
    public static int Flags$get(MemorySegment seg, long index) {
        return (int)constants$1776.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, int x) {
        constants$1776.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MaxCalls$VH() {
        return constants$1776.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int MaxCalls;
     * }
     */
    public static int MaxCalls$get(MemorySegment seg) {
        return (int)constants$1776.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int MaxCalls;
     * }
     */
    public static void MaxCalls$set(MemorySegment seg, int x) {
        constants$1776.const$1.set(seg, x);
    }
    public static int MaxCalls$get(MemorySegment seg, long index) {
        return (int)constants$1776.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void MaxCalls$set(MemorySegment seg, long index, int x) {
        constants$1776.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MaxRpcSize$VH() {
        return constants$1776.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int MaxRpcSize;
     * }
     */
    public static int MaxRpcSize$get(MemorySegment seg) {
        return (int)constants$1776.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int MaxRpcSize;
     * }
     */
    public static void MaxRpcSize$set(MemorySegment seg, int x) {
        constants$1776.const$2.set(seg, x);
    }
    public static int MaxRpcSize$get(MemorySegment seg, long index) {
        return (int)constants$1776.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void MaxRpcSize$set(MemorySegment seg, long index, int x) {
        constants$1776.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * RPC_STATUS (*IfCallback)(RPC_IF_HANDLE,void*);
     * }
     */
    public interface IfCallback {

        int apply(java.lang.foreign.MemorySegment InterfaceUuid, java.lang.foreign.MemorySegment Context);
        static MemorySegment allocate(IfCallback fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1776.const$3, fi, constants$34.const$0, scope);
        }
        static IfCallback ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _InterfaceUuid, java.lang.foreign.MemorySegment _Context) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, _InterfaceUuid, _Context);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle IfCallback$VH() {
        return constants$1776.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * RPC_STATUS (*IfCallback)(RPC_IF_HANDLE,void*);
     * }
     */
    public static MemorySegment IfCallback$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1776.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * RPC_STATUS (*IfCallback)(RPC_IF_HANDLE,void*);
     * }
     */
    public static void IfCallback$set(MemorySegment seg, MemorySegment x) {
        constants$1776.const$4.set(seg, x);
    }
    public static MemorySegment IfCallback$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1776.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void IfCallback$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1776.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static IfCallback IfCallback(MemorySegment segment, Arena scope) {
        return IfCallback.ofAddress(IfCallback$get(segment), scope);
    }
    public static VarHandle UuidVector$VH() {
        return constants$1776.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * UUID_VECTOR* UuidVector;
     * }
     */
    public static MemorySegment UuidVector$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1776.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * UUID_VECTOR* UuidVector;
     * }
     */
    public static void UuidVector$set(MemorySegment seg, MemorySegment x) {
        constants$1776.const$5.set(seg, x);
    }
    public static MemorySegment UuidVector$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1776.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void UuidVector$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1776.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Annotation$VH() {
        return constants$1777.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * RPC_WSTR Annotation;
     * }
     */
    public static MemorySegment Annotation$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1777.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * RPC_WSTR Annotation;
     * }
     */
    public static void Annotation$set(MemorySegment seg, MemorySegment x) {
        constants$1777.const$0.set(seg, x);
    }
    public static MemorySegment Annotation$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1777.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Annotation$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1777.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle SecurityDescriptor$VH() {
        return constants$1777.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* SecurityDescriptor;
     * }
     */
    public static MemorySegment SecurityDescriptor$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1777.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* SecurityDescriptor;
     * }
     */
    public static void SecurityDescriptor$set(MemorySegment seg, MemorySegment x) {
        constants$1777.const$1.set(seg, x);
    }
    public static MemorySegment SecurityDescriptor$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1777.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void SecurityDescriptor$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1777.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _DISK_PERFORMANCE {
 *     LARGE_INTEGER BytesRead;
 *     LARGE_INTEGER BytesWritten;
 *     LARGE_INTEGER ReadTime;
 *     LARGE_INTEGER WriteTime;
 *     LARGE_INTEGER IdleTime;
 *     DWORD ReadCount;
 *     DWORD WriteCount;
 *     DWORD QueueDepth;
 *     DWORD SplitCount;
 *     LARGE_INTEGER QueryTime;
 *     DWORD StorageDeviceNumber;
 *     WCHAR StorageManagerName[8];
 * };
 * }
 */
public class _DISK_PERFORMANCE {

    public static MemoryLayout $LAYOUT() {
        return constants$2552.const$2;
    }
    public static MemorySegment BytesRead$slice(MemorySegment seg) {
        return seg.asSlice(0, 8);
    }
    public static MemorySegment BytesWritten$slice(MemorySegment seg) {
        return seg.asSlice(8, 8);
    }
    public static MemorySegment ReadTime$slice(MemorySegment seg) {
        return seg.asSlice(16, 8);
    }
    public static MemorySegment WriteTime$slice(MemorySegment seg) {
        return seg.asSlice(24, 8);
    }
    public static MemorySegment IdleTime$slice(MemorySegment seg) {
        return seg.asSlice(32, 8);
    }
    public static VarHandle ReadCount$VH() {
        return constants$2552.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD ReadCount;
     * }
     */
    public static int ReadCount$get(MemorySegment seg) {
        return (int)constants$2552.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD ReadCount;
     * }
     */
    public static void ReadCount$set(MemorySegment seg, int x) {
        constants$2552.const$3.set(seg, x);
    }
    public static int ReadCount$get(MemorySegment seg, long index) {
        return (int)constants$2552.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void ReadCount$set(MemorySegment seg, long index, int x) {
        constants$2552.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle WriteCount$VH() {
        return constants$2552.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD WriteCount;
     * }
     */
    public static int WriteCount$get(MemorySegment seg) {
        return (int)constants$2552.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD WriteCount;
     * }
     */
    public static void WriteCount$set(MemorySegment seg, int x) {
        constants$2552.const$4.set(seg, x);
    }
    public static int WriteCount$get(MemorySegment seg, long index) {
        return (int)constants$2552.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void WriteCount$set(MemorySegment seg, long index, int x) {
        constants$2552.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle QueueDepth$VH() {
        return constants$2552.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD QueueDepth;
     * }
     */
    public static int QueueDepth$get(MemorySegment seg) {
        return (int)constants$2552.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD QueueDepth;
     * }
     */
    public static void QueueDepth$set(MemorySegment seg, int x) {
        constants$2552.const$5.set(seg, x);
    }
    public static int QueueDepth$get(MemorySegment seg, long index) {
        return (int)constants$2552.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void QueueDepth$set(MemorySegment seg, long index, int x) {
        constants$2552.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle SplitCount$VH() {
        return constants$2553.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD SplitCount;
     * }
     */
    public static int SplitCount$get(MemorySegment seg) {
        return (int)constants$2553.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD SplitCount;
     * }
     */
    public static void SplitCount$set(MemorySegment seg, int x) {
        constants$2553.const$0.set(seg, x);
    }
    public static int SplitCount$get(MemorySegment seg, long index) {
        return (int)constants$2553.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void SplitCount$set(MemorySegment seg, long index, int x) {
        constants$2553.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment QueryTime$slice(MemorySegment seg) {
        return seg.asSlice(56, 8);
    }
    public static VarHandle StorageDeviceNumber$VH() {
        return constants$2553.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD StorageDeviceNumber;
     * }
     */
    public static int StorageDeviceNumber$get(MemorySegment seg) {
        return (int)constants$2553.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD StorageDeviceNumber;
     * }
     */
    public static void StorageDeviceNumber$set(MemorySegment seg, int x) {
        constants$2553.const$1.set(seg, x);
    }
    public static int StorageDeviceNumber$get(MemorySegment seg, long index) {
        return (int)constants$2553.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void StorageDeviceNumber$set(MemorySegment seg, long index, int x) {
        constants$2553.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment StorageManagerName$slice(MemorySegment seg) {
        return seg.asSlice(68, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



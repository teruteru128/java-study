// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tagWINDOWPLACEMENT {
 *     UINT length;
 *     UINT flags;
 *     UINT showCmd;
 *     POINT ptMinPosition;
 *     POINT ptMaxPosition;
 *     RECT rcNormalPosition;
 * };
 * }
 */
public class tagWINDOWPLACEMENT {

    public static MemoryLayout $LAYOUT() {
        return constants$1177.const$3;
    }
    public static VarHandle length$VH() {
        return constants$1177.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * UINT length;
     * }
     */
    public static int length$get(MemorySegment seg) {
        return (int)constants$1177.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * UINT length;
     * }
     */
    public static void length$set(MemorySegment seg, int x) {
        constants$1177.const$4.set(seg, x);
    }
    public static int length$get(MemorySegment seg, long index) {
        return (int)constants$1177.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void length$set(MemorySegment seg, long index, int x) {
        constants$1177.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle flags$VH() {
        return constants$1177.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * UINT flags;
     * }
     */
    public static int flags$get(MemorySegment seg) {
        return (int)constants$1177.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * UINT flags;
     * }
     */
    public static void flags$set(MemorySegment seg, int x) {
        constants$1177.const$5.set(seg, x);
    }
    public static int flags$get(MemorySegment seg, long index) {
        return (int)constants$1177.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void flags$set(MemorySegment seg, long index, int x) {
        constants$1177.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle showCmd$VH() {
        return constants$1178.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * UINT showCmd;
     * }
     */
    public static int showCmd$get(MemorySegment seg) {
        return (int)constants$1178.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * UINT showCmd;
     * }
     */
    public static void showCmd$set(MemorySegment seg, int x) {
        constants$1178.const$0.set(seg, x);
    }
    public static int showCmd$get(MemorySegment seg, long index) {
        return (int)constants$1178.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void showCmd$set(MemorySegment seg, long index, int x) {
        constants$1178.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment ptMinPosition$slice(MemorySegment seg) {
        return seg.asSlice(12, 8);
    }
    public static MemorySegment ptMaxPosition$slice(MemorySegment seg) {
        return seg.asSlice(20, 8);
    }
    public static MemorySegment rcNormalPosition$slice(MemorySegment seg) {
        return seg.asSlice(28, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



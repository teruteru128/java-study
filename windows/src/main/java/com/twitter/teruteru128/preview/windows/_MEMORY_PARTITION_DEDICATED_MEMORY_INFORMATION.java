// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION {
 *     DWORD NextEntryOffset;
 *     DWORD SizeOfInformation;
 *     DWORD Flags;
 *     DWORD AttributesOffset;
 *     DWORD AttributeCount;
 *     DWORD Reserved;
 *     DWORD64 TypeId;
 * }
 * }
 */
public class _MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION {

    _MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        Windows_h.C_LONG.withName("NextEntryOffset"),
        Windows_h.C_LONG.withName("SizeOfInformation"),
        Windows_h.C_LONG.withName("Flags"),
        Windows_h.C_LONG.withName("AttributesOffset"),
        Windows_h.C_LONG.withName("AttributeCount"),
        Windows_h.C_LONG.withName("Reserved"),
        Windows_h.C_LONG_LONG.withName("TypeId")
    ).withName("_MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt NextEntryOffset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("NextEntryOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD NextEntryOffset
     * }
     */
    public static final OfInt NextEntryOffset$layout() {
        return NextEntryOffset$LAYOUT;
    }

    private static final long NextEntryOffset$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD NextEntryOffset
     * }
     */
    public static final long NextEntryOffset$offset() {
        return NextEntryOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD NextEntryOffset
     * }
     */
    public static int NextEntryOffset(MemorySegment struct) {
        return struct.get(NextEntryOffset$LAYOUT, NextEntryOffset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD NextEntryOffset
     * }
     */
    public static void NextEntryOffset(MemorySegment struct, int fieldValue) {
        struct.set(NextEntryOffset$LAYOUT, NextEntryOffset$OFFSET, fieldValue);
    }

    private static final OfInt SizeOfInformation$LAYOUT = (OfInt)$LAYOUT.select(groupElement("SizeOfInformation"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD SizeOfInformation
     * }
     */
    public static final OfInt SizeOfInformation$layout() {
        return SizeOfInformation$LAYOUT;
    }

    private static final long SizeOfInformation$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD SizeOfInformation
     * }
     */
    public static final long SizeOfInformation$offset() {
        return SizeOfInformation$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD SizeOfInformation
     * }
     */
    public static int SizeOfInformation(MemorySegment struct) {
        return struct.get(SizeOfInformation$LAYOUT, SizeOfInformation$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD SizeOfInformation
     * }
     */
    public static void SizeOfInformation(MemorySegment struct, int fieldValue) {
        struct.set(SizeOfInformation$LAYOUT, SizeOfInformation$OFFSET, fieldValue);
    }

    private static final OfInt Flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD Flags
     * }
     */
    public static final OfInt Flags$layout() {
        return Flags$LAYOUT;
    }

    private static final long Flags$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD Flags
     * }
     */
    public static final long Flags$offset() {
        return Flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD Flags
     * }
     */
    public static int Flags(MemorySegment struct) {
        return struct.get(Flags$LAYOUT, Flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD Flags
     * }
     */
    public static void Flags(MemorySegment struct, int fieldValue) {
        struct.set(Flags$LAYOUT, Flags$OFFSET, fieldValue);
    }

    private static final OfInt AttributesOffset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("AttributesOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD AttributesOffset
     * }
     */
    public static final OfInt AttributesOffset$layout() {
        return AttributesOffset$LAYOUT;
    }

    private static final long AttributesOffset$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD AttributesOffset
     * }
     */
    public static final long AttributesOffset$offset() {
        return AttributesOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD AttributesOffset
     * }
     */
    public static int AttributesOffset(MemorySegment struct) {
        return struct.get(AttributesOffset$LAYOUT, AttributesOffset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD AttributesOffset
     * }
     */
    public static void AttributesOffset(MemorySegment struct, int fieldValue) {
        struct.set(AttributesOffset$LAYOUT, AttributesOffset$OFFSET, fieldValue);
    }

    private static final OfInt AttributeCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("AttributeCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD AttributeCount
     * }
     */
    public static final OfInt AttributeCount$layout() {
        return AttributeCount$LAYOUT;
    }

    private static final long AttributeCount$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD AttributeCount
     * }
     */
    public static final long AttributeCount$offset() {
        return AttributeCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD AttributeCount
     * }
     */
    public static int AttributeCount(MemorySegment struct) {
        return struct.get(AttributeCount$LAYOUT, AttributeCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD AttributeCount
     * }
     */
    public static void AttributeCount(MemorySegment struct, int fieldValue) {
        struct.set(AttributeCount$LAYOUT, AttributeCount$OFFSET, fieldValue);
    }

    private static final OfInt Reserved$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Reserved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD Reserved
     * }
     */
    public static final OfInt Reserved$layout() {
        return Reserved$LAYOUT;
    }

    private static final long Reserved$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD Reserved
     * }
     */
    public static final long Reserved$offset() {
        return Reserved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD Reserved
     * }
     */
    public static int Reserved(MemorySegment struct) {
        return struct.get(Reserved$LAYOUT, Reserved$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD Reserved
     * }
     */
    public static void Reserved(MemorySegment struct, int fieldValue) {
        struct.set(Reserved$LAYOUT, Reserved$OFFSET, fieldValue);
    }

    private static final OfLong TypeId$LAYOUT = (OfLong)$LAYOUT.select(groupElement("TypeId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD64 TypeId
     * }
     */
    public static final OfLong TypeId$layout() {
        return TypeId$LAYOUT;
    }

    private static final long TypeId$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD64 TypeId
     * }
     */
    public static final long TypeId$offset() {
        return TypeId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD64 TypeId
     * }
     */
    public static long TypeId(MemorySegment struct) {
        return struct.get(TypeId$LAYOUT, TypeId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD64 TypeId
     * }
     */
    public static void TypeId(MemorySegment struct, long fieldValue) {
        struct.set(TypeId$LAYOUT, TypeId$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


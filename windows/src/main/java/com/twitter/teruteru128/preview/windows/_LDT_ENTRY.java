// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _LDT_ENTRY {
 *     WORD LimitLow;
 *     WORD BaseLow;
 *     union  HighWord;
 * };
 * }
 */
public class _LDT_ENTRY {

    public static MemoryLayout $LAYOUT() {
        return constants$127.const$0;
    }
    public static VarHandle LimitLow$VH() {
        return constants$127.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD LimitLow;
     * }
     */
    public static short LimitLow$get(MemorySegment seg) {
        return (short)constants$127.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD LimitLow;
     * }
     */
    public static void LimitLow$set(MemorySegment seg, short x) {
        constants$127.const$1.set(seg, x);
    }
    public static short LimitLow$get(MemorySegment seg, long index) {
        return (short)constants$127.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void LimitLow$set(MemorySegment seg, long index, short x) {
        constants$127.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle BaseLow$VH() {
        return constants$127.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD BaseLow;
     * }
     */
    public static short BaseLow$get(MemorySegment seg) {
        return (short)constants$127.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD BaseLow;
     * }
     */
    public static void BaseLow$set(MemorySegment seg, short x) {
        constants$127.const$2.set(seg, x);
    }
    public static short BaseLow$get(MemorySegment seg, long index) {
        return (short)constants$127.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void BaseLow$set(MemorySegment seg, long index, short x) {
        constants$127.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
     * union {
     *     struct  Bytes;
     *     struct  Bits;
     * };
     * }
     */
    public static final class HighWord {

        // Suppresses default constructor, ensuring non-instantiability.
        private HighWord() {}
        public static MemoryLayout $LAYOUT() {
            return constants$127.const$3;
        }
        /**
         * {@snippet :
         * struct {
         *     BYTE BaseMid;
         *     BYTE Flags1;
         *     BYTE Flags2;
         *     BYTE BaseHi;
         * };
         * }
         */
        public static final class Bytes {

            // Suppresses default constructor, ensuring non-instantiability.
            private Bytes() {}
            public static MemoryLayout $LAYOUT() {
                return constants$127.const$4;
            }
            public static VarHandle BaseMid$VH() {
                return constants$127.const$5;
            }
            /**
             * Getter for field:
             * {@snippet :
             * BYTE BaseMid;
             * }
             */
            public static byte BaseMid$get(MemorySegment seg) {
                return (byte)constants$127.const$5.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * BYTE BaseMid;
             * }
             */
            public static void BaseMid$set(MemorySegment seg, byte x) {
                constants$127.const$5.set(seg, x);
            }
            public static byte BaseMid$get(MemorySegment seg, long index) {
                return (byte)constants$127.const$5.get(seg.asSlice(index*sizeof()));
            }
            public static void BaseMid$set(MemorySegment seg, long index, byte x) {
                constants$127.const$5.set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle Flags1$VH() {
                return constants$128.const$0;
            }
            /**
             * Getter for field:
             * {@snippet :
             * BYTE Flags1;
             * }
             */
            public static byte Flags1$get(MemorySegment seg) {
                return (byte)constants$128.const$0.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * BYTE Flags1;
             * }
             */
            public static void Flags1$set(MemorySegment seg, byte x) {
                constants$128.const$0.set(seg, x);
            }
            public static byte Flags1$get(MemorySegment seg, long index) {
                return (byte)constants$128.const$0.get(seg.asSlice(index*sizeof()));
            }
            public static void Flags1$set(MemorySegment seg, long index, byte x) {
                constants$128.const$0.set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle Flags2$VH() {
                return constants$128.const$1;
            }
            /**
             * Getter for field:
             * {@snippet :
             * BYTE Flags2;
             * }
             */
            public static byte Flags2$get(MemorySegment seg) {
                return (byte)constants$128.const$1.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * BYTE Flags2;
             * }
             */
            public static void Flags2$set(MemorySegment seg, byte x) {
                constants$128.const$1.set(seg, x);
            }
            public static byte Flags2$get(MemorySegment seg, long index) {
                return (byte)constants$128.const$1.get(seg.asSlice(index*sizeof()));
            }
            public static void Flags2$set(MemorySegment seg, long index, byte x) {
                constants$128.const$1.set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle BaseHi$VH() {
                return constants$128.const$2;
            }
            /**
             * Getter for field:
             * {@snippet :
             * BYTE BaseHi;
             * }
             */
            public static byte BaseHi$get(MemorySegment seg) {
                return (byte)constants$128.const$2.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * BYTE BaseHi;
             * }
             */
            public static void BaseHi$set(MemorySegment seg, byte x) {
                constants$128.const$2.set(seg, x);
            }
            public static byte BaseHi$get(MemorySegment seg, long index) {
                return (byte)constants$128.const$2.get(seg.asSlice(index*sizeof()));
            }
            public static void BaseHi$set(MemorySegment seg, long index, byte x) {
                constants$128.const$2.set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
        }

        public static MemorySegment Bytes$slice(MemorySegment seg) {
            return seg.asSlice(0, 4);
        }
        /**
         * {@snippet :
         * struct {
         *              *     DWORD BaseMid;
         *     DWORD Type;
         *     DWORD Dpl;
         *     DWORD Pres;
         *     DWORD LimitHi;
         *     DWORD Sys;
         *     DWORD Reserved_0;
         *     DWORD Default_Big;
         *     DWORD Granularity;
         *     DWORD BaseHi;
         * };
         * }
         */
        public static final class Bits {

            // Suppresses default constructor, ensuring non-instantiability.
            private Bits() {}
            public static MemoryLayout $LAYOUT() {
                return constants$128.const$3;
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
        }

        public static MemorySegment Bits$slice(MemorySegment seg) {
            return seg.asSlice(0, 4);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment HighWord$slice(MemorySegment seg) {
        return seg.asSlice(4, 4);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



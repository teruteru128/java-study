// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tagOFNA {
 *     DWORD lStructSize;
 *     HWND hwndOwner;
 *     HINSTANCE hInstance;
 *     LPCSTR lpstrFilter;
 *     LPSTR lpstrCustomFilter;
 *     DWORD nMaxCustFilter;
 *     DWORD nFilterIndex;
 *     LPSTR lpstrFile;
 *     DWORD nMaxFile;
 *     LPSTR lpstrFileTitle;
 *     DWORD nMaxFileTitle;
 *     LPCSTR lpstrInitialDir;
 *     LPCSTR lpstrTitle;
 *     DWORD Flags;
 *     WORD nFileOffset;
 *     WORD nFileExtension;
 *     LPCSTR lpstrDefExt;
 *     LPARAM lCustData;
 *     LPOFNHOOKPROC lpfnHook;
 *     LPCSTR lpTemplateName;
 *     void* pvReserved;
 *     DWORD dwReserved;
 *     DWORD FlagsEx;
 * };
 * }
 */
public class tagOFNA {

    public static MemoryLayout $LAYOUT() {
        return constants$4421.const$4;
    }
    public static VarHandle lStructSize$VH() {
        return constants$4421.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD lStructSize;
     * }
     */
    public static int lStructSize$get(MemorySegment seg) {
        return (int)constants$4421.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD lStructSize;
     * }
     */
    public static void lStructSize$set(MemorySegment seg, int x) {
        constants$4421.const$5.set(seg, x);
    }
    public static int lStructSize$get(MemorySegment seg, long index) {
        return (int)constants$4421.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void lStructSize$set(MemorySegment seg, long index, int x) {
        constants$4421.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hwndOwner$VH() {
        return constants$4422.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HWND hwndOwner;
     * }
     */
    public static MemorySegment hwndOwner$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4422.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HWND hwndOwner;
     * }
     */
    public static void hwndOwner$set(MemorySegment seg, MemorySegment x) {
        constants$4422.const$0.set(seg, x);
    }
    public static MemorySegment hwndOwner$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4422.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void hwndOwner$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4422.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hInstance$VH() {
        return constants$4422.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HINSTANCE hInstance;
     * }
     */
    public static MemorySegment hInstance$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4422.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HINSTANCE hInstance;
     * }
     */
    public static void hInstance$set(MemorySegment seg, MemorySegment x) {
        constants$4422.const$1.set(seg, x);
    }
    public static MemorySegment hInstance$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4422.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void hInstance$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4422.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lpstrFilter$VH() {
        return constants$4422.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPCSTR lpstrFilter;
     * }
     */
    public static MemorySegment lpstrFilter$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4422.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPCSTR lpstrFilter;
     * }
     */
    public static void lpstrFilter$set(MemorySegment seg, MemorySegment x) {
        constants$4422.const$2.set(seg, x);
    }
    public static MemorySegment lpstrFilter$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4422.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void lpstrFilter$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4422.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lpstrCustomFilter$VH() {
        return constants$4422.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPSTR lpstrCustomFilter;
     * }
     */
    public static MemorySegment lpstrCustomFilter$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4422.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPSTR lpstrCustomFilter;
     * }
     */
    public static void lpstrCustomFilter$set(MemorySegment seg, MemorySegment x) {
        constants$4422.const$3.set(seg, x);
    }
    public static MemorySegment lpstrCustomFilter$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4422.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void lpstrCustomFilter$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4422.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nMaxCustFilter$VH() {
        return constants$4422.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD nMaxCustFilter;
     * }
     */
    public static int nMaxCustFilter$get(MemorySegment seg) {
        return (int)constants$4422.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD nMaxCustFilter;
     * }
     */
    public static void nMaxCustFilter$set(MemorySegment seg, int x) {
        constants$4422.const$4.set(seg, x);
    }
    public static int nMaxCustFilter$get(MemorySegment seg, long index) {
        return (int)constants$4422.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void nMaxCustFilter$set(MemorySegment seg, long index, int x) {
        constants$4422.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nFilterIndex$VH() {
        return constants$4422.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD nFilterIndex;
     * }
     */
    public static int nFilterIndex$get(MemorySegment seg) {
        return (int)constants$4422.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD nFilterIndex;
     * }
     */
    public static void nFilterIndex$set(MemorySegment seg, int x) {
        constants$4422.const$5.set(seg, x);
    }
    public static int nFilterIndex$get(MemorySegment seg, long index) {
        return (int)constants$4422.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void nFilterIndex$set(MemorySegment seg, long index, int x) {
        constants$4422.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lpstrFile$VH() {
        return constants$4423.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPSTR lpstrFile;
     * }
     */
    public static MemorySegment lpstrFile$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4423.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPSTR lpstrFile;
     * }
     */
    public static void lpstrFile$set(MemorySegment seg, MemorySegment x) {
        constants$4423.const$0.set(seg, x);
    }
    public static MemorySegment lpstrFile$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4423.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void lpstrFile$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4423.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nMaxFile$VH() {
        return constants$4423.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD nMaxFile;
     * }
     */
    public static int nMaxFile$get(MemorySegment seg) {
        return (int)constants$4423.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD nMaxFile;
     * }
     */
    public static void nMaxFile$set(MemorySegment seg, int x) {
        constants$4423.const$1.set(seg, x);
    }
    public static int nMaxFile$get(MemorySegment seg, long index) {
        return (int)constants$4423.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void nMaxFile$set(MemorySegment seg, long index, int x) {
        constants$4423.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lpstrFileTitle$VH() {
        return constants$4423.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPSTR lpstrFileTitle;
     * }
     */
    public static MemorySegment lpstrFileTitle$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4423.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPSTR lpstrFileTitle;
     * }
     */
    public static void lpstrFileTitle$set(MemorySegment seg, MemorySegment x) {
        constants$4423.const$2.set(seg, x);
    }
    public static MemorySegment lpstrFileTitle$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4423.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void lpstrFileTitle$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4423.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nMaxFileTitle$VH() {
        return constants$4423.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD nMaxFileTitle;
     * }
     */
    public static int nMaxFileTitle$get(MemorySegment seg) {
        return (int)constants$4423.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD nMaxFileTitle;
     * }
     */
    public static void nMaxFileTitle$set(MemorySegment seg, int x) {
        constants$4423.const$3.set(seg, x);
    }
    public static int nMaxFileTitle$get(MemorySegment seg, long index) {
        return (int)constants$4423.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void nMaxFileTitle$set(MemorySegment seg, long index, int x) {
        constants$4423.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lpstrInitialDir$VH() {
        return constants$4423.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPCSTR lpstrInitialDir;
     * }
     */
    public static MemorySegment lpstrInitialDir$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4423.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPCSTR lpstrInitialDir;
     * }
     */
    public static void lpstrInitialDir$set(MemorySegment seg, MemorySegment x) {
        constants$4423.const$4.set(seg, x);
    }
    public static MemorySegment lpstrInitialDir$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4423.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void lpstrInitialDir$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4423.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lpstrTitle$VH() {
        return constants$4423.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPCSTR lpstrTitle;
     * }
     */
    public static MemorySegment lpstrTitle$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4423.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPCSTR lpstrTitle;
     * }
     */
    public static void lpstrTitle$set(MemorySegment seg, MemorySegment x) {
        constants$4423.const$5.set(seg, x);
    }
    public static MemorySegment lpstrTitle$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4423.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void lpstrTitle$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4423.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Flags$VH() {
        return constants$4424.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Flags;
     * }
     */
    public static int Flags$get(MemorySegment seg) {
        return (int)constants$4424.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Flags;
     * }
     */
    public static void Flags$set(MemorySegment seg, int x) {
        constants$4424.const$0.set(seg, x);
    }
    public static int Flags$get(MemorySegment seg, long index) {
        return (int)constants$4424.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, int x) {
        constants$4424.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nFileOffset$VH() {
        return constants$4424.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD nFileOffset;
     * }
     */
    public static short nFileOffset$get(MemorySegment seg) {
        return (short)constants$4424.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD nFileOffset;
     * }
     */
    public static void nFileOffset$set(MemorySegment seg, short x) {
        constants$4424.const$1.set(seg, x);
    }
    public static short nFileOffset$get(MemorySegment seg, long index) {
        return (short)constants$4424.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void nFileOffset$set(MemorySegment seg, long index, short x) {
        constants$4424.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nFileExtension$VH() {
        return constants$4424.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD nFileExtension;
     * }
     */
    public static short nFileExtension$get(MemorySegment seg) {
        return (short)constants$4424.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD nFileExtension;
     * }
     */
    public static void nFileExtension$set(MemorySegment seg, short x) {
        constants$4424.const$2.set(seg, x);
    }
    public static short nFileExtension$get(MemorySegment seg, long index) {
        return (short)constants$4424.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void nFileExtension$set(MemorySegment seg, long index, short x) {
        constants$4424.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lpstrDefExt$VH() {
        return constants$4424.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPCSTR lpstrDefExt;
     * }
     */
    public static MemorySegment lpstrDefExt$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4424.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPCSTR lpstrDefExt;
     * }
     */
    public static void lpstrDefExt$set(MemorySegment seg, MemorySegment x) {
        constants$4424.const$3.set(seg, x);
    }
    public static MemorySegment lpstrDefExt$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4424.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void lpstrDefExt$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4424.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lCustData$VH() {
        return constants$4424.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPARAM lCustData;
     * }
     */
    public static long lCustData$get(MemorySegment seg) {
        return (long)constants$4424.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPARAM lCustData;
     * }
     */
    public static void lCustData$set(MemorySegment seg, long x) {
        constants$4424.const$4.set(seg, x);
    }
    public static long lCustData$get(MemorySegment seg, long index) {
        return (long)constants$4424.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void lCustData$set(MemorySegment seg, long index, long x) {
        constants$4424.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lpfnHook$VH() {
        return constants$4424.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPOFNHOOKPROC lpfnHook;
     * }
     */
    public static MemorySegment lpfnHook$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4424.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPOFNHOOKPROC lpfnHook;
     * }
     */
    public static void lpfnHook$set(MemorySegment seg, MemorySegment x) {
        constants$4424.const$5.set(seg, x);
    }
    public static MemorySegment lpfnHook$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4424.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void lpfnHook$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4424.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static LPOFNHOOKPROC lpfnHook(MemorySegment segment, Arena scope) {
        return LPOFNHOOKPROC.ofAddress(lpfnHook$get(segment), scope);
    }
    public static VarHandle lpTemplateName$VH() {
        return constants$4425.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPCSTR lpTemplateName;
     * }
     */
    public static MemorySegment lpTemplateName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4425.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPCSTR lpTemplateName;
     * }
     */
    public static void lpTemplateName$set(MemorySegment seg, MemorySegment x) {
        constants$4425.const$0.set(seg, x);
    }
    public static MemorySegment lpTemplateName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4425.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void lpTemplateName$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4425.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pvReserved$VH() {
        return constants$4425.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* pvReserved;
     * }
     */
    public static MemorySegment pvReserved$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4425.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* pvReserved;
     * }
     */
    public static void pvReserved$set(MemorySegment seg, MemorySegment x) {
        constants$4425.const$1.set(seg, x);
    }
    public static MemorySegment pvReserved$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4425.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void pvReserved$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4425.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwReserved$VH() {
        return constants$4425.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwReserved;
     * }
     */
    public static int dwReserved$get(MemorySegment seg) {
        return (int)constants$4425.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwReserved;
     * }
     */
    public static void dwReserved$set(MemorySegment seg, int x) {
        constants$4425.const$2.set(seg, x);
    }
    public static int dwReserved$get(MemorySegment seg, long index) {
        return (int)constants$4425.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void dwReserved$set(MemorySegment seg, long index, int x) {
        constants$4425.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle FlagsEx$VH() {
        return constants$4425.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD FlagsEx;
     * }
     */
    public static int FlagsEx$get(MemorySegment seg) {
        return (int)constants$4425.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD FlagsEx;
     * }
     */
    public static void FlagsEx$set(MemorySegment seg, int x) {
        constants$4425.const$3.set(seg, x);
    }
    public static int FlagsEx$get(MemorySegment seg, long index) {
        return (int)constants$4425.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void FlagsEx$set(MemorySegment seg, long index, int x) {
        constants$4425.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



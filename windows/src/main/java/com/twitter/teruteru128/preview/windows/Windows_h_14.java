// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class Windows_h_14 extends Windows_h_13 {

    /**
     * {@snippet :
     * typedef struct _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG* PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG;
     * }
     */
    public static final AddressLayout PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG = RuntimeHelper.POINTER;
    public static MethodHandle RtlRaiseCustomSystemEventTrigger$MH() {
        return RuntimeHelper.requireNonNull(constants$487.const$0,"RtlRaiseCustomSystemEventTrigger");
    }
    /**
     * {@snippet :
     * DWORD RtlRaiseCustomSystemEventTrigger(PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG TriggerConfig);
     * }
     */
    public static int RtlRaiseCustomSystemEventTrigger(MemorySegment TriggerConfig) {
        var mh$ = RtlRaiseCustomSystemEventTrigger$MH();
        try {
            return (int)mh$.invokeExact(TriggerConfig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum _IMAGE_POLICY_ENTRY_TYPE.ImagePolicyEntryTypeNone = 0;
     * }
     */
    public static int ImagePolicyEntryTypeNone() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum _IMAGE_POLICY_ENTRY_TYPE.ImagePolicyEntryTypeBool = 1;
     * }
     */
    public static int ImagePolicyEntryTypeBool() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum _IMAGE_POLICY_ENTRY_TYPE.ImagePolicyEntryTypeInt8 = 2;
     * }
     */
    public static int ImagePolicyEntryTypeInt8() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum _IMAGE_POLICY_ENTRY_TYPE.ImagePolicyEntryTypeUInt8 = 3;
     * }
     */
    public static int ImagePolicyEntryTypeUInt8() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum _IMAGE_POLICY_ENTRY_TYPE.ImagePolicyEntryTypeInt16 = 4;
     * }
     */
    public static int ImagePolicyEntryTypeInt16() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum _IMAGE_POLICY_ENTRY_TYPE.ImagePolicyEntryTypeUInt16 = 5;
     * }
     */
    public static int ImagePolicyEntryTypeUInt16() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum _IMAGE_POLICY_ENTRY_TYPE.ImagePolicyEntryTypeInt32 = 6;
     * }
     */
    public static int ImagePolicyEntryTypeInt32() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum _IMAGE_POLICY_ENTRY_TYPE.ImagePolicyEntryTypeUInt32 = 7;
     * }
     */
    public static int ImagePolicyEntryTypeUInt32() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum _IMAGE_POLICY_ENTRY_TYPE.ImagePolicyEntryTypeInt64 = 8;
     * }
     */
    public static int ImagePolicyEntryTypeInt64() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum _IMAGE_POLICY_ENTRY_TYPE.ImagePolicyEntryTypeUInt64 = 9;
     * }
     */
    public static int ImagePolicyEntryTypeUInt64() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum _IMAGE_POLICY_ENTRY_TYPE.ImagePolicyEntryTypeAnsiString = 10;
     * }
     */
    public static int ImagePolicyEntryTypeAnsiString() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum _IMAGE_POLICY_ENTRY_TYPE.ImagePolicyEntryTypeUnicodeString = 11;
     * }
     */
    public static int ImagePolicyEntryTypeUnicodeString() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum _IMAGE_POLICY_ENTRY_TYPE.ImagePolicyEntryTypeOverride = 12;
     * }
     */
    public static int ImagePolicyEntryTypeOverride() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum _IMAGE_POLICY_ENTRY_TYPE.ImagePolicyEntryTypeMaximum = 13;
     * }
     */
    public static int ImagePolicyEntryTypeMaximum() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum _IMAGE_POLICY_ID.ImagePolicyIdNone = 0;
     * }
     */
    public static int ImagePolicyIdNone() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum _IMAGE_POLICY_ID.ImagePolicyIdEtw = 1;
     * }
     */
    public static int ImagePolicyIdEtw() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum _IMAGE_POLICY_ID.ImagePolicyIdDebug = 2;
     * }
     */
    public static int ImagePolicyIdDebug() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum _IMAGE_POLICY_ID.ImagePolicyIdCrashDump = 3;
     * }
     */
    public static int ImagePolicyIdCrashDump() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum _IMAGE_POLICY_ID.ImagePolicyIdCrashDumpKey = 4;
     * }
     */
    public static int ImagePolicyIdCrashDumpKey() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum _IMAGE_POLICY_ID.ImagePolicyIdCrashDumpKeyGuid = 5;
     * }
     */
    public static int ImagePolicyIdCrashDumpKeyGuid() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum _IMAGE_POLICY_ID.ImagePolicyIdParentSd = 6;
     * }
     */
    public static int ImagePolicyIdParentSd() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum _IMAGE_POLICY_ID.ImagePolicyIdParentSdRev = 7;
     * }
     */
    public static int ImagePolicyIdParentSdRev() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum _IMAGE_POLICY_ID.ImagePolicyIdSvn = 8;
     * }
     */
    public static int ImagePolicyIdSvn() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum _IMAGE_POLICY_ID.ImagePolicyIdDeviceId = 9;
     * }
     */
    public static int ImagePolicyIdDeviceId() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum _IMAGE_POLICY_ID.ImagePolicyIdCapability = 10;
     * }
     */
    public static int ImagePolicyIdCapability() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum _IMAGE_POLICY_ID.ImagePolicyIdScenarioId = 11;
     * }
     */
    public static int ImagePolicyIdScenarioId() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum _IMAGE_POLICY_ID.ImagePolicyIdMaximum = 12;
     * }
     */
    public static int ImagePolicyIdMaximum() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * typedef struct _IMAGE_POLICY_ENTRY* PCIMAGE_POLICY_ENTRY;
     * }
     */
    public static final AddressLayout PCIMAGE_POLICY_ENTRY = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _IMAGE_POLICY_METADATA* PCIMAGE_POLICY_METADATA;
     * }
     */
    public static final AddressLayout PCIMAGE_POLICY_METADATA = RuntimeHelper.POINTER;
    public static MethodHandle RtlIsZeroMemory$MH() {
        return RuntimeHelper.requireNonNull(constants$490.const$2,"RtlIsZeroMemory");
    }
    /**
     * {@snippet :
     * BOOLEAN RtlIsZeroMemory(PVOID Buffer, SIZE_T Length);
     * }
     */
    public static byte RtlIsZeroMemory(MemorySegment Buffer, long Length) {
        var mh$ = RtlIsZeroMemory$MH();
        try {
            return (byte)mh$.invokeExact(Buffer, Length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlNormalizeSecurityDescriptor$MH() {
        return RuntimeHelper.requireNonNull(constants$490.const$4,"RtlNormalizeSecurityDescriptor");
    }
    /**
     * {@snippet :
     * BOOLEAN RtlNormalizeSecurityDescriptor(PSECURITY_DESCRIPTOR* SecurityDescriptor, DWORD SecurityDescriptorLength, PSECURITY_DESCRIPTOR* NewSecurityDescriptor, PDWORD NewSecurityDescriptorLength, BOOLEAN CheckOnly);
     * }
     */
    public static byte RtlNormalizeSecurityDescriptor(MemorySegment SecurityDescriptor, int SecurityDescriptorLength, MemorySegment NewSecurityDescriptor, MemorySegment NewSecurityDescriptorLength, byte CheckOnly) {
        var mh$ = RtlNormalizeSecurityDescriptor$MH();
        try {
            return (byte)mh$.invokeExact(SecurityDescriptor, SecurityDescriptorLength, NewSecurityDescriptor, NewSecurityDescriptorLength, CheckOnly);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum _RTL_SYSTEM_GLOBAL_DATA_ID.GlobalDataIdUnknown = 0;
     * }
     */
    public static int GlobalDataIdUnknown() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum _RTL_SYSTEM_GLOBAL_DATA_ID.GlobalDataIdRngSeedVersion = 1;
     * }
     */
    public static int GlobalDataIdRngSeedVersion() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum _RTL_SYSTEM_GLOBAL_DATA_ID.GlobalDataIdInterruptTime = 2;
     * }
     */
    public static int GlobalDataIdInterruptTime() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum _RTL_SYSTEM_GLOBAL_DATA_ID.GlobalDataIdTimeZoneBias = 3;
     * }
     */
    public static int GlobalDataIdTimeZoneBias() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum _RTL_SYSTEM_GLOBAL_DATA_ID.GlobalDataIdImageNumberLow = 4;
     * }
     */
    public static int GlobalDataIdImageNumberLow() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum _RTL_SYSTEM_GLOBAL_DATA_ID.GlobalDataIdImageNumberHigh = 5;
     * }
     */
    public static int GlobalDataIdImageNumberHigh() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum _RTL_SYSTEM_GLOBAL_DATA_ID.GlobalDataIdTimeZoneId = 6;
     * }
     */
    public static int GlobalDataIdTimeZoneId() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum _RTL_SYSTEM_GLOBAL_DATA_ID.GlobalDataIdNtMajorVersion = 7;
     * }
     */
    public static int GlobalDataIdNtMajorVersion() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum _RTL_SYSTEM_GLOBAL_DATA_ID.GlobalDataIdNtMinorVersion = 8;
     * }
     */
    public static int GlobalDataIdNtMinorVersion() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum _RTL_SYSTEM_GLOBAL_DATA_ID.GlobalDataIdSystemExpirationDate = 9;
     * }
     */
    public static int GlobalDataIdSystemExpirationDate() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum _RTL_SYSTEM_GLOBAL_DATA_ID.GlobalDataIdKdDebuggerEnabled = 10;
     * }
     */
    public static int GlobalDataIdKdDebuggerEnabled() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum _RTL_SYSTEM_GLOBAL_DATA_ID.GlobalDataIdCyclesPerYield = 11;
     * }
     */
    public static int GlobalDataIdCyclesPerYield() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum _RTL_SYSTEM_GLOBAL_DATA_ID.GlobalDataIdSafeBootMode = 12;
     * }
     */
    public static int GlobalDataIdSafeBootMode() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum _RTL_SYSTEM_GLOBAL_DATA_ID.GlobalDataIdLastSystemRITEventTickCount = 13;
     * }
     */
    public static int GlobalDataIdLastSystemRITEventTickCount() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * typedef enum _RTL_SYSTEM_GLOBAL_DATA_ID* PRTL_SYSTEM_GLOBAL_DATA_ID;
     * }
     */
    public static final AddressLayout PRTL_SYSTEM_GLOBAL_DATA_ID = RuntimeHelper.POINTER;
    public static MethodHandle RtlGetSystemGlobalData$MH() {
        return RuntimeHelper.requireNonNull(constants$490.const$6,"RtlGetSystemGlobalData");
    }
    /**
     * {@snippet :
     * DWORD RtlGetSystemGlobalData(RTL_SYSTEM_GLOBAL_DATA_ID DataId, PVOID Buffer, DWORD Size);
     * }
     */
    public static int RtlGetSystemGlobalData(int DataId, MemorySegment Buffer, int Size) {
        var mh$ = RtlGetSystemGlobalData$MH();
        try {
            return (int)mh$.invokeExact(DataId, Buffer, Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlSetSystemGlobalData$MH() {
        return RuntimeHelper.requireNonNull(constants$491.const$0,"RtlSetSystemGlobalData");
    }
    /**
     * {@snippet :
     * DWORD RtlSetSystemGlobalData(RTL_SYSTEM_GLOBAL_DATA_ID DataId, PVOID Buffer, DWORD Size);
     * }
     */
    public static int RtlSetSystemGlobalData(int DataId, MemorySegment Buffer, int Size) {
        var mh$ = RtlSetSystemGlobalData$MH();
        try {
            return (int)mh$.invokeExact(DataId, Buffer, Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _RTL_CRITICAL_SECTION_DEBUG* PRTL_CRITICAL_SECTION_DEBUG;
     * }
     */
    public static final AddressLayout PRTL_CRITICAL_SECTION_DEBUG = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _RTL_CRITICAL_SECTION_DEBUG* PRTL_RESOURCE_DEBUG;
     * }
     */
    public static final AddressLayout PRTL_RESOURCE_DEBUG = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _RTL_CRITICAL_SECTION* PRTL_CRITICAL_SECTION;
     * }
     */
    public static final AddressLayout PRTL_CRITICAL_SECTION = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _RTL_SRWLOCK* PRTL_SRWLOCK;
     * }
     */
    public static final AddressLayout PRTL_SRWLOCK = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _RTL_CONDITION_VARIABLE* PRTL_CONDITION_VARIABLE;
     * }
     */
    public static final AddressLayout PRTL_CONDITION_VARIABLE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * enum _HEAP_INFORMATION_CLASS.HeapCompatibilityInformation = 0;
     * }
     */
    public static int HeapCompatibilityInformation() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum _HEAP_INFORMATION_CLASS.HeapEnableTerminationOnCorruption = 1;
     * }
     */
    public static int HeapEnableTerminationOnCorruption() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum _HEAP_INFORMATION_CLASS.HeapOptimizeResources = 3;
     * }
     */
    public static int HeapOptimizeResources() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum _HEAP_INFORMATION_CLASS.HeapTag = 7;
     * }
     */
    public static int HeapTag() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * typedef struct _HEAP_OPTIMIZE_RESOURCES_INFORMATION* PHEAP_OPTIMIZE_RESOURCES_INFORMATION;
     * }
     */
    public static final AddressLayout PHEAP_OPTIMIZE_RESOURCES_INFORMATION = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * enum _ACTIVATION_CONTEXT_INFO_CLASS.ActivationContextBasicInformation = 1;
     * }
     */
    public static int ActivationContextBasicInformation() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum _ACTIVATION_CONTEXT_INFO_CLASS.ActivationContextDetailedInformation = 2;
     * }
     */
    public static int ActivationContextDetailedInformation() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum _ACTIVATION_CONTEXT_INFO_CLASS.AssemblyDetailedInformationInActivationContext = 3;
     * }
     */
    public static int AssemblyDetailedInformationInActivationContext() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum _ACTIVATION_CONTEXT_INFO_CLASS.FileInformationInAssemblyOfAssemblyInActivationContext = 4;
     * }
     */
    public static int FileInformationInAssemblyOfAssemblyInActivationContext() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum _ACTIVATION_CONTEXT_INFO_CLASS.RunlevelInformationInActivationContext = 5;
     * }
     */
    public static int RunlevelInformationInActivationContext() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum _ACTIVATION_CONTEXT_INFO_CLASS.CompatibilityInformationInActivationContext = 6;
     * }
     */
    public static int CompatibilityInformationInActivationContext() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum _ACTIVATION_CONTEXT_INFO_CLASS.ActivationContextManifestResourceName = 7;
     * }
     */
    public static int ActivationContextManifestResourceName() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum _ACTIVATION_CONTEXT_INFO_CLASS.MaxActivationContextInfoClass = 8;
     * }
     */
    public static int MaxActivationContextInfoClass() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum _ACTIVATION_CONTEXT_INFO_CLASS.AssemblyDetailedInformationInActivationContxt = 3;
     * }
     */
    public static int AssemblyDetailedInformationInActivationContxt() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum _ACTIVATION_CONTEXT_INFO_CLASS.FileInformationInAssemblyOfAssemblyInActivationContxt = 4;
     * }
     */
    public static int FileInformationInAssemblyOfAssemblyInActivationContxt() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * typedef struct _ACTIVATION_CONTEXT_QUERY_INDEX* PACTIVATION_CONTEXT_QUERY_INDEX;
     * }
     */
    public static final AddressLayout PACTIVATION_CONTEXT_QUERY_INDEX = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _ACTIVATION_CONTEXT_QUERY_INDEX* PCACTIVATION_CONTEXT_QUERY_INDEX;
     * }
     */
    public static final AddressLayout PCACTIVATION_CONTEXT_QUERY_INDEX = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _ASSEMBLY_FILE_DETAILED_INFORMATION* PASSEMBLY_FILE_DETAILED_INFORMATION;
     * }
     */
    public static final AddressLayout PASSEMBLY_FILE_DETAILED_INFORMATION = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _ASSEMBLY_FILE_DETAILED_INFORMATION* PCASSEMBLY_FILE_DETAILED_INFORMATION;
     * }
     */
    public static final AddressLayout PCASSEMBLY_FILE_DETAILED_INFORMATION = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION* PACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;
     * }
     */
    public static final AddressLayout PACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION* PCACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;
     * }
     */
    public static final AddressLayout PCACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * enum .ACTCTX_RUN_LEVEL_UNSPECIFIED = 0;
     * }
     */
    public static int ACTCTX_RUN_LEVEL_UNSPECIFIED() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .ACTCTX_RUN_LEVEL_AS_INVOKER = 1;
     * }
     */
    public static int ACTCTX_RUN_LEVEL_AS_INVOKER() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE = 2;
     * }
     */
    public static int ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .ACTCTX_RUN_LEVEL_REQUIRE_ADMIN = 3;
     * }
     */
    public static int ACTCTX_RUN_LEVEL_REQUIRE_ADMIN() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .ACTCTX_RUN_LEVEL_NUMBERS = 4;
     * }
     */
    public static int ACTCTX_RUN_LEVEL_NUMBERS() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * typedef struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION* PACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION;
     * }
     */
    public static final AddressLayout PACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION* PCACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION;
     * }
     */
    public static final AddressLayout PCACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * enum .ACTCTX_COMPATIBILITY_ELEMENT_TYPE_UNKNOWN = 0;
     * }
     */
    public static int ACTCTX_COMPATIBILITY_ELEMENT_TYPE_UNKNOWN() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .ACTCTX_COMPATIBILITY_ELEMENT_TYPE_OS = 1;
     * }
     */
    public static int ACTCTX_COMPATIBILITY_ELEMENT_TYPE_OS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MITIGATION = 2;
     * }
     */
    public static int ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MITIGATION() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MAXVERSIONTESTED = 3;
     * }
     */
    public static int ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MAXVERSIONTESTED() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * typedef struct _COMPATIBILITY_CONTEXT_ELEMENT* PCOMPATIBILITY_CONTEXT_ELEMENT;
     * }
     */
    public static final AddressLayout PCOMPATIBILITY_CONTEXT_ELEMENT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _COMPATIBILITY_CONTEXT_ELEMENT* PCCOMPATIBILITY_CONTEXT_ELEMENT;
     * }
     */
    public static final AddressLayout PCCOMPATIBILITY_CONTEXT_ELEMENT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION* PACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION;
     * }
     */
    public static final AddressLayout PACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION* PCACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION;
     * }
     */
    public static final AddressLayout PCACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _SUPPORTED_OS_INFO* PSUPPORTED_OS_INFO;
     * }
     */
    public static final AddressLayout PSUPPORTED_OS_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _MAXVERSIONTESTED_INFO* PMAXVERSIONTESTED_INFO;
     * }
     */
    public static final AddressLayout PMAXVERSIONTESTED_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION* PACTIVATION_CONTEXT_DETAILED_INFORMATION;
     * }
     */
    public static final AddressLayout PACTIVATION_CONTEXT_DETAILED_INFORMATION = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION* PCACTIVATION_CONTEXT_DETAILED_INFORMATION;
     * }
     */
    public static final AddressLayout PCACTIVATION_CONTEXT_DETAILED_INFORMATION = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _HARDWARE_COUNTER_DATA* PHARDWARE_COUNTER_DATA;
     * }
     */
    public static final AddressLayout PHARDWARE_COUNTER_DATA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _PERFORMANCE_DATA* PPERFORMANCE_DATA;
     * }
     */
    public static final AddressLayout PPERFORMANCE_DATA = RuntimeHelper.POINTER;
    public static MethodHandle RtlGetDeviceFamilyInfoEnum$MH() {
        return RuntimeHelper.requireNonNull(constants$508.const$6,"RtlGetDeviceFamilyInfoEnum");
    }
    /**
     * {@snippet :
     * void RtlGetDeviceFamilyInfoEnum(ULONGLONG* pullUAPInfo, DWORD* pulDeviceFamily, DWORD* pulDeviceForm);
     * }
     */
    public static void RtlGetDeviceFamilyInfoEnum(MemorySegment pullUAPInfo, MemorySegment pulDeviceFamily, MemorySegment pulDeviceForm) {
        var mh$ = RtlGetDeviceFamilyInfoEnum$MH();
        try {
            mh$.invokeExact(pullUAPInfo, pulDeviceFamily, pulDeviceForm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlConvertDeviceFamilyInfoToString$MH() {
        return RuntimeHelper.requireNonNull(constants$509.const$0,"RtlConvertDeviceFamilyInfoToString");
    }
    /**
     * {@snippet :
     * DWORD RtlConvertDeviceFamilyInfoToString(PDWORD pulDeviceFamilyBufferSize, PDWORD pulDeviceFormBufferSize, PWSTR DeviceFamily, PWSTR DeviceForm);
     * }
     */
    public static int RtlConvertDeviceFamilyInfoToString(MemorySegment pulDeviceFamilyBufferSize, MemorySegment pulDeviceFormBufferSize, MemorySegment DeviceFamily, MemorySegment DeviceForm) {
        var mh$ = RtlConvertDeviceFamilyInfoToString$MH();
        try {
            return (int)mh$.invokeExact(pulDeviceFamilyBufferSize, pulDeviceFormBufferSize, DeviceFamily, DeviceForm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlSwitchedVVI$MH() {
        return RuntimeHelper.requireNonNull(constants$509.const$2,"RtlSwitchedVVI");
    }
    /**
     * {@snippet :
     * DWORD RtlSwitchedVVI(PRTL_OSVERSIONINFOEXW VersionInfo, DWORD TypeMask, ULONGLONG ConditionMask);
     * }
     */
    public static int RtlSwitchedVVI(MemorySegment VersionInfo, int TypeMask, long ConditionMask) {
        var mh$ = RtlSwitchedVVI$MH();
        try {
            return (int)mh$.invokeExact(VersionInfo, TypeMask, ConditionMask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _EVENTLOGRECORD* PEVENTLOGRECORD;
     * }
     */
    public static final AddressLayout PEVENTLOGRECORD = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _EVENTSFORLOGFILE* PEVENTSFORLOGFILE;
     * }
     */
    public static final AddressLayout PEVENTSFORLOGFILE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _PACKEDEVENTINFO* PPACKEDEVENTINFO;
     * }
     */
    public static final AddressLayout PPACKEDEVENTINFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * enum _CM_SERVICE_NODE_TYPE.DriverType = 1;
     * }
     */
    public static int DriverType() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum _CM_SERVICE_NODE_TYPE.FileSystemType = 2;
     * }
     */
    public static int FileSystemType() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum _CM_SERVICE_NODE_TYPE.Win32ServiceOwnProcess = 16;
     * }
     */
    public static int Win32ServiceOwnProcess() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum _CM_SERVICE_NODE_TYPE.Win32ServiceShareProcess = 32;
     * }
     */
    public static int Win32ServiceShareProcess() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum _CM_SERVICE_NODE_TYPE.AdapterType = 4;
     * }
     */
    public static int AdapterType() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum _CM_SERVICE_NODE_TYPE.RecognizerType = 8;
     * }
     */
    public static int RecognizerType() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum _CM_SERVICE_LOAD_TYPE.BootLoad = 0;
     * }
     */
    public static int BootLoad() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum _CM_SERVICE_LOAD_TYPE.SystemLoad = 1;
     * }
     */
    public static int SystemLoad() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum _CM_SERVICE_LOAD_TYPE.AutoLoad = 2;
     * }
     */
    public static int AutoLoad() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum _CM_SERVICE_LOAD_TYPE.DemandLoad = 3;
     * }
     */
    public static int DemandLoad() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum _CM_SERVICE_LOAD_TYPE.DisableLoad = 4;
     * }
     */
    public static int DisableLoad() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum _CM_ERROR_CONTROL_TYPE.IgnoreError = 0;
     * }
     */
    public static int IgnoreError() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum _CM_ERROR_CONTROL_TYPE.NormalError = 1;
     * }
     */
    public static int NormalError() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum _CM_ERROR_CONTROL_TYPE.SevereError = 2;
     * }
     */
    public static int SevereError() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum _CM_ERROR_CONTROL_TYPE.CriticalError = 3;
     * }
     */
    public static int CriticalError() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * typedef struct _TAPE_ERASE* PTAPE_ERASE;
     * }
     */
    public static final AddressLayout PTAPE_ERASE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _TAPE_PREPARE* PTAPE_PREPARE;
     * }
     */
    public static final AddressLayout PTAPE_PREPARE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _TAPE_WRITE_MARKS* PTAPE_WRITE_MARKS;
     * }
     */
    public static final AddressLayout PTAPE_WRITE_MARKS = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _TAPE_GET_POSITION* PTAPE_GET_POSITION;
     * }
     */
    public static final AddressLayout PTAPE_GET_POSITION = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _TAPE_SET_POSITION* PTAPE_SET_POSITION;
     * }
     */
    public static final AddressLayout PTAPE_SET_POSITION = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _TAPE_GET_DRIVE_PARAMETERS* PTAPE_GET_DRIVE_PARAMETERS;
     * }
     */
    public static final AddressLayout PTAPE_GET_DRIVE_PARAMETERS = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _TAPE_SET_DRIVE_PARAMETERS* PTAPE_SET_DRIVE_PARAMETERS;
     * }
     */
    public static final AddressLayout PTAPE_SET_DRIVE_PARAMETERS = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _TAPE_GET_MEDIA_PARAMETERS* PTAPE_GET_MEDIA_PARAMETERS;
     * }
     */
    public static final AddressLayout PTAPE_GET_MEDIA_PARAMETERS = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _TAPE_SET_MEDIA_PARAMETERS* PTAPE_SET_MEDIA_PARAMETERS;
     * }
     */
    public static final AddressLayout PTAPE_SET_MEDIA_PARAMETERS = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _TAPE_CREATE_PARTITION* PTAPE_CREATE_PARTITION;
     * }
     */
    public static final AddressLayout PTAPE_CREATE_PARTITION = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _TAPE_WMI_OPERATIONS* PTAPE_WMI_OPERATIONS;
     * }
     */
    public static final AddressLayout PTAPE_WMI_OPERATIONS = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * enum _TAPE_DRIVE_PROBLEM_TYPE.TapeDriveProblemNone = 0;
     * }
     */
    public static int TapeDriveProblemNone() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum _TAPE_DRIVE_PROBLEM_TYPE.TapeDriveReadWriteWarning = 1;
     * }
     */
    public static int TapeDriveReadWriteWarning() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum _TAPE_DRIVE_PROBLEM_TYPE.TapeDriveReadWriteError = 2;
     * }
     */
    public static int TapeDriveReadWriteError() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum _TAPE_DRIVE_PROBLEM_TYPE.TapeDriveReadWarning = 3;
     * }
     */
    public static int TapeDriveReadWarning() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum _TAPE_DRIVE_PROBLEM_TYPE.TapeDriveWriteWarning = 4;
     * }
     */
    public static int TapeDriveWriteWarning() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum _TAPE_DRIVE_PROBLEM_TYPE.TapeDriveReadError = 5;
     * }
     */
    public static int TapeDriveReadError() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum _TAPE_DRIVE_PROBLEM_TYPE.TapeDriveWriteError = 6;
     * }
     */
    public static int TapeDriveWriteError() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum _TAPE_DRIVE_PROBLEM_TYPE.TapeDriveHardwareError = 7;
     * }
     */
    public static int TapeDriveHardwareError() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum _TAPE_DRIVE_PROBLEM_TYPE.TapeDriveUnsupportedMedia = 8;
     * }
     */
    public static int TapeDriveUnsupportedMedia() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum _TAPE_DRIVE_PROBLEM_TYPE.TapeDriveScsiConnectionError = 9;
     * }
     */
    public static int TapeDriveScsiConnectionError() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum _TAPE_DRIVE_PROBLEM_TYPE.TapeDriveTimetoClean = 10;
     * }
     */
    public static int TapeDriveTimetoClean() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum _TAPE_DRIVE_PROBLEM_TYPE.TapeDriveCleanDriveNow = 11;
     * }
     */
    public static int TapeDriveCleanDriveNow() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum _TAPE_DRIVE_PROBLEM_TYPE.TapeDriveMediaLifeExpired = 12;
     * }
     */
    public static int TapeDriveMediaLifeExpired() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum _TAPE_DRIVE_PROBLEM_TYPE.TapeDriveSnappedTape = 13;
     * }
     */
    public static int TapeDriveSnappedTape() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * typedef struct _GUID* PUOW;
     * }
     */
    public static final AddressLayout PUOW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GUID* PCRM_PROTOCOL_ID;
     * }
     */
    public static final AddressLayout PCRM_PROTOCOL_ID = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef unsigned long NOTIFICATION_MASK;
     * }
     */
    public static final OfInt NOTIFICATION_MASK = JAVA_INT;
    /**
     * {@snippet :
     * typedef struct _TRANSACTION_NOTIFICATION* PTRANSACTION_NOTIFICATION;
     * }
     */
    public static final AddressLayout PTRANSACTION_NOTIFICATION = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT* PTRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT;
     * }
     */
    public static final AddressLayout PTRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT* PTRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT;
     * }
     */
    public static final AddressLayout PTRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef unsigned long SAVEPOINT_ID;
     * }
     */
    public static final OfInt SAVEPOINT_ID = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long* PSAVEPOINT_ID;
     * }
     */
    public static final AddressLayout PSAVEPOINT_ID = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT* PTRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT;
     * }
     */
    public static final AddressLayout PTRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT* PTRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT;
     * }
     */
    public static final AddressLayout PTRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT* PTRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT;
     * }
     */
    public static final AddressLayout PTRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT* PTRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT;
     * }
     */
    public static final AddressLayout PTRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _KCRM_MARSHAL_HEADER* PKCRM_MARSHAL_HEADER;
     * }
     */
    public static final AddressLayout PKCRM_MARSHAL_HEADER = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _KCRM_MARSHAL_HEADER* PRKCRM_MARSHAL_HEADER;
     * }
     */
    public static final AddressLayout PRKCRM_MARSHAL_HEADER = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _KCRM_TRANSACTION_BLOB* PKCRM_TRANSACTION_BLOB;
     * }
     */
    public static final AddressLayout PKCRM_TRANSACTION_BLOB = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _KCRM_TRANSACTION_BLOB* PRKCRM_TRANSACTION_BLOB;
     * }
     */
    public static final AddressLayout PRKCRM_TRANSACTION_BLOB = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _KCRM_PROTOCOL_BLOB* PKCRM_PROTOCOL_BLOB;
     * }
     */
    public static final AddressLayout PKCRM_PROTOCOL_BLOB = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _KCRM_PROTOCOL_BLOB* PRKCRM_PROTOCOL_BLOB;
     * }
     */
    public static final AddressLayout PRKCRM_PROTOCOL_BLOB = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * enum _TRANSACTION_OUTCOME.TransactionOutcomeUndetermined = 1;
     * }
     */
    public static int TransactionOutcomeUndetermined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum _TRANSACTION_OUTCOME.TransactionOutcomeCommitted = 2;
     * }
     */
    public static int TransactionOutcomeCommitted() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum _TRANSACTION_OUTCOME.TransactionOutcomeAborted = 3;
     * }
     */
    public static int TransactionOutcomeAborted() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum _TRANSACTION_STATE.TransactionStateNormal = 1;
     * }
     */
    public static int TransactionStateNormal() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum _TRANSACTION_STATE.TransactionStateIndoubt = 2;
     * }
     */
    public static int TransactionStateIndoubt() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum _TRANSACTION_STATE.TransactionStateCommittedNotify = 3;
     * }
     */
    public static int TransactionStateCommittedNotify() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * typedef struct _TRANSACTION_BASIC_INFORMATION* PTRANSACTION_BASIC_INFORMATION;
     * }
     */
    public static final AddressLayout PTRANSACTION_BASIC_INFORMATION = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _TRANSACTIONMANAGER_BASIC_INFORMATION* PTRANSACTIONMANAGER_BASIC_INFORMATION;
     * }
     */
    public static final AddressLayout PTRANSACTIONMANAGER_BASIC_INFORMATION = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _TRANSACTIONMANAGER_LOG_INFORMATION* PTRANSACTIONMANAGER_LOG_INFORMATION;
     * }
     */
    public static final AddressLayout PTRANSACTIONMANAGER_LOG_INFORMATION = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _TRANSACTIONMANAGER_LOGPATH_INFORMATION* PTRANSACTIONMANAGER_LOGPATH_INFORMATION;
     * }
     */
    public static final AddressLayout PTRANSACTIONMANAGER_LOGPATH_INFORMATION = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _TRANSACTIONMANAGER_RECOVERY_INFORMATION* PTRANSACTIONMANAGER_RECOVERY_INFORMATION;
     * }
     */
    public static final AddressLayout PTRANSACTIONMANAGER_RECOVERY_INFORMATION = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _TRANSACTIONMANAGER_OLDEST_INFORMATION* PTRANSACTIONMANAGER_OLDEST_INFORMATION;
     * }
     */
    public static final AddressLayout PTRANSACTIONMANAGER_OLDEST_INFORMATION = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _TRANSACTION_PROPERTIES_INFORMATION* PTRANSACTION_PROPERTIES_INFORMATION;
     * }
     */
    public static final AddressLayout PTRANSACTION_PROPERTIES_INFORMATION = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _TRANSACTION_BIND_INFORMATION* PTRANSACTION_BIND_INFORMATION;
     * }
     */
    public static final AddressLayout PTRANSACTION_BIND_INFORMATION = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _TRANSACTION_ENLISTMENT_PAIR* PTRANSACTION_ENLISTMENT_PAIR;
     * }
     */
    public static final AddressLayout PTRANSACTION_ENLISTMENT_PAIR = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _TRANSACTION_ENLISTMENTS_INFORMATION* PTRANSACTION_ENLISTMENTS_INFORMATION;
     * }
     */
    public static final AddressLayout PTRANSACTION_ENLISTMENTS_INFORMATION = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION* PTRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION;
     * }
     */
    public static final AddressLayout PTRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _RESOURCEMANAGER_BASIC_INFORMATION* PRESOURCEMANAGER_BASIC_INFORMATION;
     * }
     */
    public static final AddressLayout PRESOURCEMANAGER_BASIC_INFORMATION = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _RESOURCEMANAGER_COMPLETION_INFORMATION* PRESOURCEMANAGER_COMPLETION_INFORMATION;
     * }
     */
    public static final AddressLayout PRESOURCEMANAGER_COMPLETION_INFORMATION = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * enum _TRANSACTION_INFORMATION_CLASS.TransactionBasicInformation = 0;
     * }
     */
    public static int TransactionBasicInformation() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum _TRANSACTION_INFORMATION_CLASS.TransactionPropertiesInformation = 1;
     * }
     */
    public static int TransactionPropertiesInformation() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum _TRANSACTION_INFORMATION_CLASS.TransactionEnlistmentInformation = 2;
     * }
     */
    public static int TransactionEnlistmentInformation() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum _TRANSACTION_INFORMATION_CLASS.TransactionSuperiorEnlistmentInformation = 3;
     * }
     */
    public static int TransactionSuperiorEnlistmentInformation() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum _TRANSACTION_INFORMATION_CLASS.TransactionBindInformation = 4;
     * }
     */
    public static int TransactionBindInformation() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum _TRANSACTION_INFORMATION_CLASS.TransactionDTCPrivateInformation = 5;
     * }
     */
    public static int TransactionDTCPrivateInformation() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum _TRANSACTIONMANAGER_INFORMATION_CLASS.TransactionManagerBasicInformation = 0;
     * }
     */
    public static int TransactionManagerBasicInformation() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum _TRANSACTIONMANAGER_INFORMATION_CLASS.TransactionManagerLogInformation = 1;
     * }
     */
    public static int TransactionManagerLogInformation() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum _TRANSACTIONMANAGER_INFORMATION_CLASS.TransactionManagerLogPathInformation = 2;
     * }
     */
    public static int TransactionManagerLogPathInformation() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum _TRANSACTIONMANAGER_INFORMATION_CLASS.TransactionManagerRecoveryInformation = 4;
     * }
     */
    public static int TransactionManagerRecoveryInformation() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum _TRANSACTIONMANAGER_INFORMATION_CLASS.TransactionManagerOnlineProbeInformation = 3;
     * }
     */
    public static int TransactionManagerOnlineProbeInformation() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum _TRANSACTIONMANAGER_INFORMATION_CLASS.TransactionManagerOldestTransactionInformation = 5;
     * }
     */
    public static int TransactionManagerOldestTransactionInformation() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum _RESOURCEMANAGER_INFORMATION_CLASS.ResourceManagerBasicInformation = 0;
     * }
     */
    public static int ResourceManagerBasicInformation() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum _RESOURCEMANAGER_INFORMATION_CLASS.ResourceManagerCompletionInformation = 1;
     * }
     */
    public static int ResourceManagerCompletionInformation() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * typedef struct _ENLISTMENT_BASIC_INFORMATION* PENLISTMENT_BASIC_INFORMATION;
     * }
     */
    public static final AddressLayout PENLISTMENT_BASIC_INFORMATION = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _ENLISTMENT_CRM_INFORMATION* PENLISTMENT_CRM_INFORMATION;
     * }
     */
    public static final AddressLayout PENLISTMENT_CRM_INFORMATION = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * enum _ENLISTMENT_INFORMATION_CLASS.EnlistmentBasicInformation = 0;
     * }
     */
    public static int EnlistmentBasicInformation() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum _ENLISTMENT_INFORMATION_CLASS.EnlistmentRecoveryInformation = 1;
     * }
     */
    public static int EnlistmentRecoveryInformation() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum _ENLISTMENT_INFORMATION_CLASS.EnlistmentCrmInformation = 2;
     * }
     */
    public static int EnlistmentCrmInformation() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * typedef struct _TRANSACTION_LIST_ENTRY* PTRANSACTION_LIST_ENTRY;
     * }
     */
    public static final AddressLayout PTRANSACTION_LIST_ENTRY = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _TRANSACTION_LIST_INFORMATION* PTRANSACTION_LIST_INFORMATION;
     * }
     */
    public static final AddressLayout PTRANSACTION_LIST_INFORMATION = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * enum _KTMOBJECT_TYPE.KTMOBJECT_TRANSACTION = 0;
     * }
     */
    public static int KTMOBJECT_TRANSACTION() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum _KTMOBJECT_TYPE.KTMOBJECT_TRANSACTION_MANAGER = 1;
     * }
     */
    public static int KTMOBJECT_TRANSACTION_MANAGER() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum _KTMOBJECT_TYPE.KTMOBJECT_RESOURCE_MANAGER = 2;
     * }
     */
    public static int KTMOBJECT_RESOURCE_MANAGER() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum _KTMOBJECT_TYPE.KTMOBJECT_ENLISTMENT = 3;
     * }
     */
    public static int KTMOBJECT_ENLISTMENT() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum _KTMOBJECT_TYPE.KTMOBJECT_INVALID = 4;
     * }
     */
    public static int KTMOBJECT_INVALID() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * typedef enum _KTMOBJECT_TYPE* PKTMOBJECT_TYPE;
     * }
     */
    public static final AddressLayout PKTMOBJECT_TYPE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _KTMOBJECT_CURSOR* PKTMOBJECT_CURSOR;
     * }
     */
    public static final AddressLayout PKTMOBJECT_CURSOR = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef unsigned long TP_VERSION;
     * }
     */
    public static final OfInt TP_VERSION = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long* PTP_VERSION;
     * }
     */
    public static final AddressLayout PTP_VERSION = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _TP_CALLBACK_INSTANCE* PTP_CALLBACK_INSTANCE;
     * }
     */
    public static final AddressLayout PTP_CALLBACK_INSTANCE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _TP_POOL* PTP_POOL;
     * }
     */
    public static final AddressLayout PTP_POOL = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * enum _TP_CALLBACK_PRIORITY.TP_CALLBACK_PRIORITY_HIGH = 0;
     * }
     */
    public static int TP_CALLBACK_PRIORITY_HIGH() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum _TP_CALLBACK_PRIORITY.TP_CALLBACK_PRIORITY_NORMAL = 1;
     * }
     */
    public static int TP_CALLBACK_PRIORITY_NORMAL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum _TP_CALLBACK_PRIORITY.TP_CALLBACK_PRIORITY_LOW = 2;
     * }
     */
    public static int TP_CALLBACK_PRIORITY_LOW() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum _TP_CALLBACK_PRIORITY.TP_CALLBACK_PRIORITY_INVALID = 3;
     * }
     */
    public static int TP_CALLBACK_PRIORITY_INVALID() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum _TP_CALLBACK_PRIORITY.TP_CALLBACK_PRIORITY_COUNT = 3;
     * }
     */
    public static int TP_CALLBACK_PRIORITY_COUNT() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * typedef struct _TP_POOL_STACK_INFORMATION* PTP_POOL_STACK_INFORMATION;
     * }
     */
    public static final AddressLayout PTP_POOL_STACK_INFORMATION = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _TP_CLEANUP_GROUP* PTP_CLEANUP_GROUP;
     * }
     */
    public static final AddressLayout PTP_CLEANUP_GROUP = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _TP_CALLBACK_ENVIRON_V3* PTP_CALLBACK_ENVIRON;
     * }
     */
    public static final AddressLayout PTP_CALLBACK_ENVIRON = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _TP_WORK* PTP_WORK;
     * }
     */
    public static final AddressLayout PTP_WORK = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _TP_TIMER* PTP_TIMER;
     * }
     */
    public static final AddressLayout PTP_TIMER = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef unsigned long TP_WAIT_RESULT;
     * }
     */
    public static final OfInt TP_WAIT_RESULT = JAVA_INT;
    /**
     * {@snippet :
     * typedef struct _TP_WAIT* PTP_WAIT;
     * }
     */
    public static final AddressLayout PTP_WAIT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _TP_IO* PTP_IO;
     * }
     */
    public static final AddressLayout PTP_IO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef unsigned long long WPARAM;
     * }
     */
    public static final OfLong WPARAM = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long long LPARAM;
     * }
     */
    public static final OfLong LPARAM = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long long LRESULT;
     * }
     */
    public static final OfLong LRESULT = JAVA_LONG;
    /**
     * {@snippet :
     * typedef void** SPHANDLE;
     * }
     */
    public static final AddressLayout SPHANDLE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef void** LPHANDLE;
     * }
     */
    public static final AddressLayout LPHANDLE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef void* HGLOBAL;
     * }
     */
    public static final AddressLayout HGLOBAL = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef void* HLOCAL;
     * }
     */
    public static final AddressLayout HLOCAL = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef void* GLOBALHANDLE;
     * }
     */
    public static final AddressLayout GLOBALHANDLE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef void* LOCALHANDLE;
     * }
     */
    public static final AddressLayout LOCALHANDLE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef unsigned short ATOM;
     * }
     */
    public static final OfShort ATOM = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef struct HKEY__* HKEY;
     * }
     */
    public static final AddressLayout HKEY = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct HKEY__** PHKEY;
     * }
     */
    public static final AddressLayout PHKEY = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct HMETAFILE__* HMETAFILE;
     * }
     */
    public static final AddressLayout HMETAFILE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct HINSTANCE__* HINSTANCE;
     * }
     */
    public static final AddressLayout HINSTANCE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct HINSTANCE__* HMODULE;
     * }
     */
    public static final AddressLayout HMODULE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct HRGN__* HRGN;
     * }
     */
    public static final AddressLayout HRGN = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct HRSRC__* HRSRC;
     * }
     */
    public static final AddressLayout HRSRC = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct HSPRITE__* HSPRITE;
     * }
     */
    public static final AddressLayout HSPRITE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct HLSURF__* HLSURF;
     * }
     */
    public static final AddressLayout HLSURF = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct HSTR__* HSTR;
     * }
     */
    public static final AddressLayout HSTR = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct HTASK__* HTASK;
     * }
     */
    public static final AddressLayout HTASK = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct HWINSTA__* HWINSTA;
     * }
     */
    public static final AddressLayout HWINSTA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct HKL__* HKL;
     * }
     */
    public static final AddressLayout HKL = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef int HFILE;
     * }
     */
    public static final OfInt HFILE = JAVA_INT;
    /**
     * {@snippet :
     * typedef struct _FILETIME* PFILETIME;
     * }
     */
    public static final AddressLayout PFILETIME = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _FILETIME* LPFILETIME;
     * }
     */
    public static final AddressLayout LPFILETIME = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct HWND__* HWND;
     * }
     */
    public static final AddressLayout HWND = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct HHOOK__* HHOOK;
     * }
     */
    public static final AddressLayout HHOOK = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef void* HGDIOBJ;
     * }
     */
    public static final AddressLayout HGDIOBJ = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct HACCEL__* HACCEL;
     * }
     */
    public static final AddressLayout HACCEL = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct HBITMAP__* HBITMAP;
     * }
     */
    public static final AddressLayout HBITMAP = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct HBRUSH__* HBRUSH;
     * }
     */
    public static final AddressLayout HBRUSH = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct HCOLORSPACE__* HCOLORSPACE;
     * }
     */
    public static final AddressLayout HCOLORSPACE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct HDC__* HDC;
     * }
     */
    public static final AddressLayout HDC = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct HGLRC__* HGLRC;
     * }
     */
    public static final AddressLayout HGLRC = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct HDESK__* HDESK;
     * }
     */
    public static final AddressLayout HDESK = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct HENHMETAFILE__* HENHMETAFILE;
     * }
     */
    public static final AddressLayout HENHMETAFILE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct HFONT__* HFONT;
     * }
     */
    public static final AddressLayout HFONT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct HICON__* HICON;
     * }
     */
    public static final AddressLayout HICON = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct HMENU__* HMENU;
     * }
     */
    public static final AddressLayout HMENU = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct HPALETTE__* HPALETTE;
     * }
     */
    public static final AddressLayout HPALETTE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct HPEN__* HPEN;
     * }
     */
    public static final AddressLayout HPEN = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct HWINEVENTHOOK__* HWINEVENTHOOK;
     * }
     */
    public static final AddressLayout HWINEVENTHOOK = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct HMONITOR__* HMONITOR;
     * }
     */
    public static final AddressLayout HMONITOR = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct HUMPD__* HUMPD;
     * }
     */
    public static final AddressLayout HUMPD = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct HICON__* HCURSOR;
     * }
     */
    public static final AddressLayout HCURSOR = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef unsigned long COLORREF;
     * }
     */
    public static final OfInt COLORREF = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long* LPCOLORREF;
     * }
     */
    public static final AddressLayout LPCOLORREF = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagRECT* PRECT;
     * }
     */
    public static final AddressLayout PRECT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagRECT* NPRECT;
     * }
     */
    public static final AddressLayout NPRECT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagRECT* LPRECT;
     * }
     */
    public static final AddressLayout LPRECT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagRECT* LPCRECT;
     * }
     */
    public static final AddressLayout LPCRECT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _RECTL* PRECTL;
     * }
     */
    public static final AddressLayout PRECTL = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _RECTL* LPRECTL;
     * }
     */
    public static final AddressLayout LPRECTL = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _RECTL* LPCRECTL;
     * }
     */
    public static final AddressLayout LPCRECTL = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagPOINT* PPOINT;
     * }
     */
    public static final AddressLayout PPOINT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagPOINT* NPPOINT;
     * }
     */
    public static final AddressLayout NPPOINT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagPOINT* LPPOINT;
     * }
     */
    public static final AddressLayout LPPOINT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _POINTL* PPOINTL;
     * }
     */
    public static final AddressLayout PPOINTL = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagSIZE* PSIZE;
     * }
     */
    public static final AddressLayout PSIZE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagSIZE* LPSIZE;
     * }
     */
    public static final AddressLayout LPSIZE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagSIZE* PSIZEL;
     * }
     */
    public static final AddressLayout PSIZEL = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagSIZE* LPSIZEL;
     * }
     */
    public static final AddressLayout LPSIZEL = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagPOINTS* PPOINTS;
     * }
     */
    public static final AddressLayout PPOINTS = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagPOINTS* LPPOINTS;
     * }
     */
    public static final AddressLayout LPPOINTS = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct DPI_AWARENESS_CONTEXT__* DPI_AWARENESS_CONTEXT;
     * }
     */
    public static final AddressLayout DPI_AWARENESS_CONTEXT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * enum DPI_AWARENESS.DPI_AWARENESS_INVALID = -1;
     * }
     */
    public static int DPI_AWARENESS_INVALID() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * enum DPI_AWARENESS.DPI_AWARENESS_UNAWARE = 0;
     * }
     */
    public static int DPI_AWARENESS_UNAWARE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum DPI_AWARENESS.DPI_AWARENESS_SYSTEM_AWARE = 1;
     * }
     */
    public static int DPI_AWARENESS_SYSTEM_AWARE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum DPI_AWARENESS.DPI_AWARENESS_PER_MONITOR_AWARE = 2;
     * }
     */
    public static int DPI_AWARENESS_PER_MONITOR_AWARE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum DPI_HOSTING_BEHAVIOR.DPI_HOSTING_BEHAVIOR_INVALID = -1;
     * }
     */
    public static int DPI_HOSTING_BEHAVIOR_INVALID() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * enum DPI_HOSTING_BEHAVIOR.DPI_HOSTING_BEHAVIOR_DEFAULT = 0;
     * }
     */
    public static int DPI_HOSTING_BEHAVIOR_DEFAULT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum DPI_HOSTING_BEHAVIOR.DPI_HOSTING_BEHAVIOR_MIXED = 1;
     * }
     */
    public static int DPI_HOSTING_BEHAVIOR_MIXED() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * typedef struct _SECURITY_ATTRIBUTES* PSECURITY_ATTRIBUTES;
     * }
     */
    public static final AddressLayout PSECURITY_ATTRIBUTES = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _SECURITY_ATTRIBUTES* LPSECURITY_ATTRIBUTES;
     * }
     */
    public static final AddressLayout LPSECURITY_ATTRIBUTES = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _OVERLAPPED* LPOVERLAPPED;
     * }
     */
    public static final AddressLayout LPOVERLAPPED = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _OVERLAPPED_ENTRY* LPOVERLAPPED_ENTRY;
     * }
     */
    public static final AddressLayout LPOVERLAPPED_ENTRY = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _SYSTEMTIME* PSYSTEMTIME;
     * }
     */
    public static final AddressLayout PSYSTEMTIME = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _SYSTEMTIME* LPSYSTEMTIME;
     * }
     */
    public static final AddressLayout LPSYSTEMTIME = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _WIN32_FIND_DATAA* PWIN32_FIND_DATAA;
     * }
     */
    public static final AddressLayout PWIN32_FIND_DATAA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _WIN32_FIND_DATAA* LPWIN32_FIND_DATAA;
     * }
     */
    public static final AddressLayout LPWIN32_FIND_DATAA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _WIN32_FIND_DATAW* PWIN32_FIND_DATAW;
     * }
     */
    public static final AddressLayout PWIN32_FIND_DATAW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _WIN32_FIND_DATAW* LPWIN32_FIND_DATAW;
     * }
     */
    public static final AddressLayout LPWIN32_FIND_DATAW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _WIN32_FIND_DATAA* PWIN32_FIND_DATA;
     * }
     */
    public static final AddressLayout PWIN32_FIND_DATA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _WIN32_FIND_DATAA* LPWIN32_FIND_DATA;
     * }
     */
    public static final AddressLayout LPWIN32_FIND_DATA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * enum _FINDEX_INFO_LEVELS.FindExInfoStandard = 0;
     * }
     */
    public static int FindExInfoStandard() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum _FINDEX_INFO_LEVELS.FindExInfoBasic = 1;
     * }
     */
    public static int FindExInfoBasic() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum _FINDEX_INFO_LEVELS.FindExInfoMaxInfoLevel = 2;
     * }
     */
    public static int FindExInfoMaxInfoLevel() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum _FINDEX_SEARCH_OPS.FindExSearchNameMatch = 0;
     * }
     */
    public static int FindExSearchNameMatch() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum _FINDEX_SEARCH_OPS.FindExSearchLimitToDirectories = 1;
     * }
     */
    public static int FindExSearchLimitToDirectories() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum _FINDEX_SEARCH_OPS.FindExSearchLimitToDevices = 2;
     * }
     */
    public static int FindExSearchLimitToDevices() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum _FINDEX_SEARCH_OPS.FindExSearchMaxSearchOp = 3;
     * }
     */
    public static int FindExSearchMaxSearchOp() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum _READ_DIRECTORY_NOTIFY_INFORMATION_CLASS.ReadDirectoryNotifyInformation = 1;
     * }
     */
    public static int ReadDirectoryNotifyInformation() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum _READ_DIRECTORY_NOTIFY_INFORMATION_CLASS.ReadDirectoryNotifyExtendedInformation = 2;
     * }
     */
    public static int ReadDirectoryNotifyExtendedInformation() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * typedef enum _READ_DIRECTORY_NOTIFY_INFORMATION_CLASS* PREAD_DIRECTORY_NOTIFY_INFORMATION_CLASS;
     * }
     */
    public static final AddressLayout PREAD_DIRECTORY_NOTIFY_INFORMATION_CLASS = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * enum _GET_FILEEX_INFO_LEVELS.GetFileExInfoStandard = 0;
     * }
     */
    public static int GetFileExInfoStandard() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum _GET_FILEEX_INFO_LEVELS.GetFileExMaxInfoLevel = 1;
     * }
     */
    public static int GetFileExMaxInfoLevel() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum _FILE_INFO_BY_HANDLE_CLASS.FileBasicInfo = 0;
     * }
     */
    public static int FileBasicInfo() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum _FILE_INFO_BY_HANDLE_CLASS.FileStandardInfo = 1;
     * }
     */
    public static int FileStandardInfo() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum _FILE_INFO_BY_HANDLE_CLASS.FileNameInfo = 2;
     * }
     */
    public static int FileNameInfo() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum _FILE_INFO_BY_HANDLE_CLASS.FileRenameInfo = 3;
     * }
     */
    public static int FileRenameInfo() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum _FILE_INFO_BY_HANDLE_CLASS.FileDispositionInfo = 4;
     * }
     */
    public static int FileDispositionInfo() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum _FILE_INFO_BY_HANDLE_CLASS.FileAllocationInfo = 5;
     * }
     */
    public static int FileAllocationInfo() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum _FILE_INFO_BY_HANDLE_CLASS.FileEndOfFileInfo = 6;
     * }
     */
    public static int FileEndOfFileInfo() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum _FILE_INFO_BY_HANDLE_CLASS.FileStreamInfo = 7;
     * }
     */
    public static int FileStreamInfo() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum _FILE_INFO_BY_HANDLE_CLASS.FileCompressionInfo = 8;
     * }
     */
    public static int FileCompressionInfo() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum _FILE_INFO_BY_HANDLE_CLASS.FileAttributeTagInfo = 9;
     * }
     */
    public static int FileAttributeTagInfo() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum _FILE_INFO_BY_HANDLE_CLASS.FileIdBothDirectoryInfo = 10;
     * }
     */
    public static int FileIdBothDirectoryInfo() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum _FILE_INFO_BY_HANDLE_CLASS.FileIdBothDirectoryRestartInfo = 11;
     * }
     */
    public static int FileIdBothDirectoryRestartInfo() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum _FILE_INFO_BY_HANDLE_CLASS.FileIoPriorityHintInfo = 12;
     * }
     */
    public static int FileIoPriorityHintInfo() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum _FILE_INFO_BY_HANDLE_CLASS.FileRemoteProtocolInfo = 13;
     * }
     */
    public static int FileRemoteProtocolInfo() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum _FILE_INFO_BY_HANDLE_CLASS.FileFullDirectoryInfo = 14;
     * }
     */
    public static int FileFullDirectoryInfo() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * enum _FILE_INFO_BY_HANDLE_CLASS.FileFullDirectoryRestartInfo = 15;
     * }
     */
    public static int FileFullDirectoryRestartInfo() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum _FILE_INFO_BY_HANDLE_CLASS.FileStorageInfo = 16;
     * }
     */
    public static int FileStorageInfo() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum _FILE_INFO_BY_HANDLE_CLASS.FileAlignmentInfo = 17;
     * }
     */
    public static int FileAlignmentInfo() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * enum _FILE_INFO_BY_HANDLE_CLASS.FileIdInfo = 18;
     * }
     */
    public static int FileIdInfo() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * enum _FILE_INFO_BY_HANDLE_CLASS.FileIdExtdDirectoryInfo = 19;
     * }
     */
    public static int FileIdExtdDirectoryInfo() {
        return (int)19L;
    }
    /**
     * {@snippet :
     * enum _FILE_INFO_BY_HANDLE_CLASS.FileIdExtdDirectoryRestartInfo = 20;
     * }
     */
    public static int FileIdExtdDirectoryRestartInfo() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * enum _FILE_INFO_BY_HANDLE_CLASS.FileDispositionInfoEx = 21;
     * }
     */
    public static int FileDispositionInfoEx() {
        return (int)21L;
    }
    /**
     * {@snippet :
     * enum _FILE_INFO_BY_HANDLE_CLASS.FileRenameInfoEx = 22;
     * }
     */
    public static int FileRenameInfoEx() {
        return (int)22L;
    }
    /**
     * {@snippet :
     * enum _FILE_INFO_BY_HANDLE_CLASS.FileCaseSensitiveInfo = 23;
     * }
     */
    public static int FileCaseSensitiveInfo() {
        return (int)23L;
    }
    /**
     * {@snippet :
     * enum _FILE_INFO_BY_HANDLE_CLASS.FileNormalizedNameInfo = 24;
     * }
     */
    public static int FileNormalizedNameInfo() {
        return (int)24L;
    }
    /**
     * {@snippet :
     * enum _FILE_INFO_BY_HANDLE_CLASS.MaximumFileInfoByHandleClass = 25;
     * }
     */
    public static int MaximumFileInfoByHandleClass() {
        return (int)25L;
    }
    /**
     * {@snippet :
     * typedef enum _FILE_INFO_BY_HANDLE_CLASS* PFILE_INFO_BY_HANDLE_CLASS;
     * }
     */
    public static final AddressLayout PFILE_INFO_BY_HANDLE_CLASS = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _RTL_CRITICAL_SECTION* PCRITICAL_SECTION;
     * }
     */
    public static final AddressLayout PCRITICAL_SECTION = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _RTL_CRITICAL_SECTION* LPCRITICAL_SECTION;
     * }
     */
    public static final AddressLayout LPCRITICAL_SECTION = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _RTL_CRITICAL_SECTION_DEBUG* PCRITICAL_SECTION_DEBUG;
     * }
     */
    public static final AddressLayout PCRITICAL_SECTION_DEBUG = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _RTL_CRITICAL_SECTION_DEBUG* LPCRITICAL_SECTION_DEBUG;
     * }
     */
    public static final AddressLayout LPCRITICAL_SECTION_DEBUG = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _PROCESS_HEAP_ENTRY* LPPROCESS_HEAP_ENTRY;
     * }
     */
    public static final AddressLayout LPPROCESS_HEAP_ENTRY = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _PROCESS_HEAP_ENTRY* PPROCESS_HEAP_ENTRY;
     * }
     */
    public static final AddressLayout PPROCESS_HEAP_ENTRY = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _REASON_CONTEXT* PREASON_CONTEXT;
     * }
     */
    public static final AddressLayout PREASON_CONTEXT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _EXCEPTION_DEBUG_INFO* LPEXCEPTION_DEBUG_INFO;
     * }
     */
    public static final AddressLayout LPEXCEPTION_DEBUG_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CREATE_THREAD_DEBUG_INFO* LPCREATE_THREAD_DEBUG_INFO;
     * }
     */
    public static final AddressLayout LPCREATE_THREAD_DEBUG_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CREATE_PROCESS_DEBUG_INFO* LPCREATE_PROCESS_DEBUG_INFO;
     * }
     */
    public static final AddressLayout LPCREATE_PROCESS_DEBUG_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _EXIT_THREAD_DEBUG_INFO* LPEXIT_THREAD_DEBUG_INFO;
     * }
     */
    public static final AddressLayout LPEXIT_THREAD_DEBUG_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _EXIT_PROCESS_DEBUG_INFO* LPEXIT_PROCESS_DEBUG_INFO;
     * }
     */
    public static final AddressLayout LPEXIT_PROCESS_DEBUG_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _LOAD_DLL_DEBUG_INFO* LPLOAD_DLL_DEBUG_INFO;
     * }
     */
    public static final AddressLayout LPLOAD_DLL_DEBUG_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _UNLOAD_DLL_DEBUG_INFO* LPUNLOAD_DLL_DEBUG_INFO;
     * }
     */
    public static final AddressLayout LPUNLOAD_DLL_DEBUG_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _OUTPUT_DEBUG_STRING_INFO* LPOUTPUT_DEBUG_STRING_INFO;
     * }
     */
    public static final AddressLayout LPOUTPUT_DEBUG_STRING_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _RIP_INFO* LPRIP_INFO;
     * }
     */
    public static final AddressLayout LPRIP_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _DEBUG_EVENT* LPDEBUG_EVENT;
     * }
     */
    public static final AddressLayout LPDEBUG_EVENT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CONTEXT* LPCONTEXT;
     * }
     */
    public static final AddressLayout LPCONTEXT = RuntimeHelper.POINTER;
    public static MethodHandle IsApiSetImplemented$MH() {
        return RuntimeHelper.requireNonNull(constants$568.const$5,"IsApiSetImplemented");
    }
    /**
     * {@snippet :
     * BOOL IsApiSetImplemented(PCSTR Contract);
     * }
     */
    public static int IsApiSetImplemented(MemorySegment Contract) {
        var mh$ = IsApiSetImplemented$MH();
        try {
            return (int)mh$.invokeExact(Contract);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetEnvironmentStringsW$MH() {
        return RuntimeHelper.requireNonNull(constants$569.const$0,"SetEnvironmentStringsW");
    }
    /**
     * {@snippet :
     * BOOL SetEnvironmentStringsW(LPWCH NewEnvironment);
     * }
     */
    public static int SetEnvironmentStringsW(MemorySegment NewEnvironment) {
        var mh$ = SetEnvironmentStringsW$MH();
        try {
            return (int)mh$.invokeExact(NewEnvironment);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetStdHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$569.const$1,"GetStdHandle");
    }
    /**
     * {@snippet :
     * HANDLE GetStdHandle(DWORD nStdHandle);
     * }
     */
    public static MemorySegment GetStdHandle(int nStdHandle) {
        var mh$ = GetStdHandle$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(nStdHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetStdHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$569.const$2,"SetStdHandle");
    }
    /**
     * {@snippet :
     * BOOL SetStdHandle(DWORD nStdHandle, HANDLE hHandle);
     * }
     */
    public static int SetStdHandle(int nStdHandle, MemorySegment hHandle) {
        var mh$ = SetStdHandle$MH();
        try {
            return (int)mh$.invokeExact(nStdHandle, hHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetStdHandleEx$MH() {
        return RuntimeHelper.requireNonNull(constants$569.const$4,"SetStdHandleEx");
    }
    /**
     * {@snippet :
     * BOOL SetStdHandleEx(DWORD nStdHandle, HANDLE hHandle, PHANDLE phPrevValue);
     * }
     */
    public static int SetStdHandleEx(int nStdHandle, MemorySegment hHandle, MemorySegment phPrevValue) {
        var mh$ = SetStdHandleEx$MH();
        try {
            return (int)mh$.invokeExact(nStdHandle, hHandle, phPrevValue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCommandLineA$MH() {
        return RuntimeHelper.requireNonNull(constants$569.const$5,"GetCommandLineA");
    }
    /**
     * {@snippet :
     * LPSTR GetCommandLineA();
     * }
     */
    public static MemorySegment GetCommandLineA() {
        var mh$ = GetCommandLineA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCommandLineW$MH() {
        return RuntimeHelper.requireNonNull(constants$570.const$0,"GetCommandLineW");
    }
    /**
     * {@snippet :
     * LPWSTR GetCommandLineW();
     * }
     */
    public static MemorySegment GetCommandLineW() {
        var mh$ = GetCommandLineW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetEnvironmentStrings$MH() {
        return RuntimeHelper.requireNonNull(constants$570.const$1,"GetEnvironmentStrings");
    }
    /**
     * {@snippet :
     * LPCH GetEnvironmentStrings();
     * }
     */
    public static MemorySegment GetEnvironmentStrings() {
        var mh$ = GetEnvironmentStrings$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetEnvironmentStringsW$MH() {
        return RuntimeHelper.requireNonNull(constants$570.const$2,"GetEnvironmentStringsW");
    }
    /**
     * {@snippet :
     * LPWCH GetEnvironmentStringsW();
     * }
     */
    public static MemorySegment GetEnvironmentStringsW() {
        var mh$ = GetEnvironmentStringsW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FreeEnvironmentStringsA$MH() {
        return RuntimeHelper.requireNonNull(constants$570.const$3,"FreeEnvironmentStringsA");
    }
    /**
     * {@snippet :
     * BOOL FreeEnvironmentStringsA(LPCH penv);
     * }
     */
    public static int FreeEnvironmentStringsA(MemorySegment penv) {
        var mh$ = FreeEnvironmentStringsA$MH();
        try {
            return (int)mh$.invokeExact(penv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FreeEnvironmentStringsW$MH() {
        return RuntimeHelper.requireNonNull(constants$570.const$4,"FreeEnvironmentStringsW");
    }
    /**
     * {@snippet :
     * BOOL FreeEnvironmentStringsW(LPWCH penv);
     * }
     */
    public static int FreeEnvironmentStringsW(MemorySegment penv) {
        var mh$ = FreeEnvironmentStringsW$MH();
        try {
            return (int)mh$.invokeExact(penv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetEnvironmentVariableA$MH() {
        return RuntimeHelper.requireNonNull(constants$570.const$6,"GetEnvironmentVariableA");
    }
    /**
     * {@snippet :
     * DWORD GetEnvironmentVariableA(LPCSTR lpName, LPSTR lpBuffer, DWORD nSize);
     * }
     */
    public static int GetEnvironmentVariableA(MemorySegment lpName, MemorySegment lpBuffer, int nSize) {
        var mh$ = GetEnvironmentVariableA$MH();
        try {
            return (int)mh$.invokeExact(lpName, lpBuffer, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetEnvironmentVariableW$MH() {
        return RuntimeHelper.requireNonNull(constants$571.const$0,"GetEnvironmentVariableW");
    }
    /**
     * {@snippet :
     * DWORD GetEnvironmentVariableW(LPCWSTR lpName, LPWSTR lpBuffer, DWORD nSize);
     * }
     */
    public static int GetEnvironmentVariableW(MemorySegment lpName, MemorySegment lpBuffer, int nSize) {
        var mh$ = GetEnvironmentVariableW$MH();
        try {
            return (int)mh$.invokeExact(lpName, lpBuffer, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetEnvironmentVariableA$MH() {
        return RuntimeHelper.requireNonNull(constants$571.const$1,"SetEnvironmentVariableA");
    }
    /**
     * {@snippet :
     * BOOL SetEnvironmentVariableA(LPCSTR lpName, LPCSTR lpValue);
     * }
     */
    public static int SetEnvironmentVariableA(MemorySegment lpName, MemorySegment lpValue) {
        var mh$ = SetEnvironmentVariableA$MH();
        try {
            return (int)mh$.invokeExact(lpName, lpValue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetEnvironmentVariableW$MH() {
        return RuntimeHelper.requireNonNull(constants$571.const$2,"SetEnvironmentVariableW");
    }
    /**
     * {@snippet :
     * BOOL SetEnvironmentVariableW(LPCWSTR lpName, LPCWSTR lpValue);
     * }
     */
    public static int SetEnvironmentVariableW(MemorySegment lpName, MemorySegment lpValue) {
        var mh$ = SetEnvironmentVariableW$MH();
        try {
            return (int)mh$.invokeExact(lpName, lpValue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExpandEnvironmentStringsA$MH() {
        return RuntimeHelper.requireNonNull(constants$571.const$3,"ExpandEnvironmentStringsA");
    }
    /**
     * {@snippet :
     * DWORD ExpandEnvironmentStringsA(LPCSTR lpSrc, LPSTR lpDst, DWORD nSize);
     * }
     */
    public static int ExpandEnvironmentStringsA(MemorySegment lpSrc, MemorySegment lpDst, int nSize) {
        var mh$ = ExpandEnvironmentStringsA$MH();
        try {
            return (int)mh$.invokeExact(lpSrc, lpDst, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExpandEnvironmentStringsW$MH() {
        return RuntimeHelper.requireNonNull(constants$571.const$4,"ExpandEnvironmentStringsW");
    }
    /**
     * {@snippet :
     * DWORD ExpandEnvironmentStringsW(LPCWSTR lpSrc, LPWSTR lpDst, DWORD nSize);
     * }
     */
    public static int ExpandEnvironmentStringsW(MemorySegment lpSrc, MemorySegment lpDst, int nSize) {
        var mh$ = ExpandEnvironmentStringsW$MH();
        try {
            return (int)mh$.invokeExact(lpSrc, lpDst, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetCurrentDirectoryA$MH() {
        return RuntimeHelper.requireNonNull(constants$571.const$5,"SetCurrentDirectoryA");
    }
    /**
     * {@snippet :
     * BOOL SetCurrentDirectoryA(LPCSTR lpPathName);
     * }
     */
    public static int SetCurrentDirectoryA(MemorySegment lpPathName) {
        var mh$ = SetCurrentDirectoryA$MH();
        try {
            return (int)mh$.invokeExact(lpPathName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetCurrentDirectoryW$MH() {
        return RuntimeHelper.requireNonNull(constants$572.const$0,"SetCurrentDirectoryW");
    }
    /**
     * {@snippet :
     * BOOL SetCurrentDirectoryW(LPCWSTR lpPathName);
     * }
     */
    public static int SetCurrentDirectoryW(MemorySegment lpPathName) {
        var mh$ = SetCurrentDirectoryW$MH();
        try {
            return (int)mh$.invokeExact(lpPathName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrentDirectoryA$MH() {
        return RuntimeHelper.requireNonNull(constants$572.const$1,"GetCurrentDirectoryA");
    }
    /**
     * {@snippet :
     * DWORD GetCurrentDirectoryA(DWORD nBufferLength, LPSTR lpBuffer);
     * }
     */
    public static int GetCurrentDirectoryA(int nBufferLength, MemorySegment lpBuffer) {
        var mh$ = GetCurrentDirectoryA$MH();
        try {
            return (int)mh$.invokeExact(nBufferLength, lpBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrentDirectoryW$MH() {
        return RuntimeHelper.requireNonNull(constants$572.const$2,"GetCurrentDirectoryW");
    }
    /**
     * {@snippet :
     * DWORD GetCurrentDirectoryW(DWORD nBufferLength, LPWSTR lpBuffer);
     * }
     */
    public static int GetCurrentDirectoryW(int nBufferLength, MemorySegment lpBuffer) {
        var mh$ = GetCurrentDirectoryW$MH();
        try {
            return (int)mh$.invokeExact(nBufferLength, lpBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SearchPathW$MH() {
        return RuntimeHelper.requireNonNull(constants$572.const$4,"SearchPathW");
    }
    /**
     * {@snippet :
     * DWORD SearchPathW(LPCWSTR lpPath, LPCWSTR lpFileName, LPCWSTR lpExtension, DWORD nBufferLength, LPWSTR lpBuffer, LPWSTR* lpFilePart);
     * }
     */
    public static int SearchPathW(MemorySegment lpPath, MemorySegment lpFileName, MemorySegment lpExtension, int nBufferLength, MemorySegment lpBuffer, MemorySegment lpFilePart) {
        var mh$ = SearchPathW$MH();
        try {
            return (int)mh$.invokeExact(lpPath, lpFileName, lpExtension, nBufferLength, lpBuffer, lpFilePart);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SearchPathA$MH() {
        return RuntimeHelper.requireNonNull(constants$572.const$5,"SearchPathA");
    }
    /**
     * {@snippet :
     * DWORD SearchPathA(LPCSTR lpPath, LPCSTR lpFileName, LPCSTR lpExtension, DWORD nBufferLength, LPSTR lpBuffer, LPSTR* lpFilePart);
     * }
     */
    public static int SearchPathA(MemorySegment lpPath, MemorySegment lpFileName, MemorySegment lpExtension, int nBufferLength, MemorySegment lpBuffer, MemorySegment lpFilePart) {
        var mh$ = SearchPathA$MH();
        try {
            return (int)mh$.invokeExact(lpPath, lpFileName, lpExtension, nBufferLength, lpBuffer, lpFilePart);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NeedCurrentDirectoryForExePathA$MH() {
        return RuntimeHelper.requireNonNull(constants$573.const$0,"NeedCurrentDirectoryForExePathA");
    }
    /**
     * {@snippet :
     * BOOL NeedCurrentDirectoryForExePathA(LPCSTR ExeName);
     * }
     */
    public static int NeedCurrentDirectoryForExePathA(MemorySegment ExeName) {
        var mh$ = NeedCurrentDirectoryForExePathA$MH();
        try {
            return (int)mh$.invokeExact(ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NeedCurrentDirectoryForExePathW$MH() {
        return RuntimeHelper.requireNonNull(constants$573.const$1,"NeedCurrentDirectoryForExePathW");
    }
    /**
     * {@snippet :
     * BOOL NeedCurrentDirectoryForExePathW(LPCWSTR ExeName);
     * }
     */
    public static int NeedCurrentDirectoryForExePathW(MemorySegment ExeName) {
        var mh$ = NeedCurrentDirectoryForExePathW$MH();
        try {
            return (int)mh$.invokeExact(ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CompareFileTime$MH() {
        return RuntimeHelper.requireNonNull(constants$573.const$2,"CompareFileTime");
    }
    /**
     * {@snippet :
     * LONG CompareFileTime(const FILETIME* lpFileTime1, const FILETIME* lpFileTime2);
     * }
     */
    public static int CompareFileTime(MemorySegment lpFileTime1, MemorySegment lpFileTime2) {
        var mh$ = CompareFileTime$MH();
        try {
            return (int)mh$.invokeExact(lpFileTime1, lpFileTime2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDirectoryA$MH() {
        return RuntimeHelper.requireNonNull(constants$573.const$3,"CreateDirectoryA");
    }
    /**
     * {@snippet :
     * BOOL CreateDirectoryA(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
     * }
     */
    public static int CreateDirectoryA(MemorySegment lpPathName, MemorySegment lpSecurityAttributes) {
        var mh$ = CreateDirectoryA$MH();
        try {
            return (int)mh$.invokeExact(lpPathName, lpSecurityAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDirectoryW$MH() {
        return RuntimeHelper.requireNonNull(constants$573.const$4,"CreateDirectoryW");
    }
    /**
     * {@snippet :
     * BOOL CreateDirectoryW(LPCWSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
     * }
     */
    public static int CreateDirectoryW(MemorySegment lpPathName, MemorySegment lpSecurityAttributes) {
        var mh$ = CreateDirectoryW$MH();
        try {
            return (int)mh$.invokeExact(lpPathName, lpSecurityAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateFileA$MH() {
        return RuntimeHelper.requireNonNull(constants$573.const$6,"CreateFileA");
    }
    /**
     * {@snippet :
     * HANDLE CreateFileA(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile);
     * }
     */
    public static MemorySegment CreateFileA(MemorySegment lpFileName, int dwDesiredAccess, int dwShareMode, MemorySegment lpSecurityAttributes, int dwCreationDisposition, int dwFlagsAndAttributes, MemorySegment hTemplateFile) {
        var mh$ = CreateFileA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpFileName, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateFileW$MH() {
        return RuntimeHelper.requireNonNull(constants$574.const$0,"CreateFileW");
    }
    /**
     * {@snippet :
     * HANDLE CreateFileW(LPCWSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile);
     * }
     */
    public static MemorySegment CreateFileW(MemorySegment lpFileName, int dwDesiredAccess, int dwShareMode, MemorySegment lpSecurityAttributes, int dwCreationDisposition, int dwFlagsAndAttributes, MemorySegment hTemplateFile) {
        var mh$ = CreateFileW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpFileName, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DefineDosDeviceW$MH() {
        return RuntimeHelper.requireNonNull(constants$574.const$1,"DefineDosDeviceW");
    }
    /**
     * {@snippet :
     * BOOL DefineDosDeviceW(DWORD dwFlags, LPCWSTR lpDeviceName, LPCWSTR lpTargetPath);
     * }
     */
    public static int DefineDosDeviceW(int dwFlags, MemorySegment lpDeviceName, MemorySegment lpTargetPath) {
        var mh$ = DefineDosDeviceW$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, lpDeviceName, lpTargetPath);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteFileA$MH() {
        return RuntimeHelper.requireNonNull(constants$574.const$2,"DeleteFileA");
    }
    /**
     * {@snippet :
     * BOOL DeleteFileA(LPCSTR lpFileName);
     * }
     */
    public static int DeleteFileA(MemorySegment lpFileName) {
        var mh$ = DeleteFileA$MH();
        try {
            return (int)mh$.invokeExact(lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteFileW$MH() {
        return RuntimeHelper.requireNonNull(constants$574.const$3,"DeleteFileW");
    }
    /**
     * {@snippet :
     * BOOL DeleteFileW(LPCWSTR lpFileName);
     * }
     */
    public static int DeleteFileW(MemorySegment lpFileName) {
        var mh$ = DeleteFileW$MH();
        try {
            return (int)mh$.invokeExact(lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteVolumeMountPointW$MH() {
        return RuntimeHelper.requireNonNull(constants$574.const$4,"DeleteVolumeMountPointW");
    }
    /**
     * {@snippet :
     * BOOL DeleteVolumeMountPointW(LPCWSTR lpszVolumeMountPoint);
     * }
     */
    public static int DeleteVolumeMountPointW(MemorySegment lpszVolumeMountPoint) {
        var mh$ = DeleteVolumeMountPointW$MH();
        try {
            return (int)mh$.invokeExact(lpszVolumeMountPoint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FileTimeToLocalFileTime$MH() {
        return RuntimeHelper.requireNonNull(constants$574.const$5,"FileTimeToLocalFileTime");
    }
    /**
     * {@snippet :
     * BOOL FileTimeToLocalFileTime(const FILETIME* lpFileTime, LPFILETIME lpLocalFileTime);
     * }
     */
    public static int FileTimeToLocalFileTime(MemorySegment lpFileTime, MemorySegment lpLocalFileTime) {
        var mh$ = FileTimeToLocalFileTime$MH();
        try {
            return (int)mh$.invokeExact(lpFileTime, lpLocalFileTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindClose$MH() {
        return RuntimeHelper.requireNonNull(constants$575.const$0,"FindClose");
    }
    /**
     * {@snippet :
     * BOOL FindClose(HANDLE hFindFile);
     * }
     */
    public static int FindClose(MemorySegment hFindFile) {
        var mh$ = FindClose$MH();
        try {
            return (int)mh$.invokeExact(hFindFile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindCloseChangeNotification$MH() {
        return RuntimeHelper.requireNonNull(constants$575.const$1,"FindCloseChangeNotification");
    }
    /**
     * {@snippet :
     * BOOL FindCloseChangeNotification(HANDLE hChangeHandle);
     * }
     */
    public static int FindCloseChangeNotification(MemorySegment hChangeHandle) {
        var mh$ = FindCloseChangeNotification$MH();
        try {
            return (int)mh$.invokeExact(hChangeHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindFirstChangeNotificationA$MH() {
        return RuntimeHelper.requireNonNull(constants$575.const$3,"FindFirstChangeNotificationA");
    }
    /**
     * {@snippet :
     * HANDLE FindFirstChangeNotificationA(LPCSTR lpPathName, BOOL bWatchSubtree, DWORD dwNotifyFilter);
     * }
     */
    public static MemorySegment FindFirstChangeNotificationA(MemorySegment lpPathName, int bWatchSubtree, int dwNotifyFilter) {
        var mh$ = FindFirstChangeNotificationA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpPathName, bWatchSubtree, dwNotifyFilter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindFirstChangeNotificationW$MH() {
        return RuntimeHelper.requireNonNull(constants$575.const$4,"FindFirstChangeNotificationW");
    }
    /**
     * {@snippet :
     * HANDLE FindFirstChangeNotificationW(LPCWSTR lpPathName, BOOL bWatchSubtree, DWORD dwNotifyFilter);
     * }
     */
    public static MemorySegment FindFirstChangeNotificationW(MemorySegment lpPathName, int bWatchSubtree, int dwNotifyFilter) {
        var mh$ = FindFirstChangeNotificationW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpPathName, bWatchSubtree, dwNotifyFilter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindFirstFileA$MH() {
        return RuntimeHelper.requireNonNull(constants$575.const$5,"FindFirstFileA");
    }
    /**
     * {@snippet :
     * HANDLE FindFirstFileA(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData);
     * }
     */
    public static MemorySegment FindFirstFileA(MemorySegment lpFileName, MemorySegment lpFindFileData) {
        var mh$ = FindFirstFileA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpFileName, lpFindFileData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindFirstFileW$MH() {
        return RuntimeHelper.requireNonNull(constants$576.const$0,"FindFirstFileW");
    }
    /**
     * {@snippet :
     * HANDLE FindFirstFileW(LPCWSTR lpFileName, LPWIN32_FIND_DATAW lpFindFileData);
     * }
     */
    public static MemorySegment FindFirstFileW(MemorySegment lpFileName, MemorySegment lpFindFileData) {
        var mh$ = FindFirstFileW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpFileName, lpFindFileData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindFirstFileExA$MH() {
        return RuntimeHelper.requireNonNull(constants$576.const$2,"FindFirstFileExA");
    }
    /**
     * {@snippet :
     * HANDLE FindFirstFileExA(LPCSTR lpFileName, FINDEX_INFO_LEVELS fInfoLevelId, LPVOID lpFindFileData, FINDEX_SEARCH_OPS fSearchOp, LPVOID lpSearchFilter, DWORD dwAdditionalFlags);
     * }
     */
    public static MemorySegment FindFirstFileExA(MemorySegment lpFileName, int fInfoLevelId, MemorySegment lpFindFileData, int fSearchOp, MemorySegment lpSearchFilter, int dwAdditionalFlags) {
        var mh$ = FindFirstFileExA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpFileName, fInfoLevelId, lpFindFileData, fSearchOp, lpSearchFilter, dwAdditionalFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindFirstFileExW$MH() {
        return RuntimeHelper.requireNonNull(constants$576.const$3,"FindFirstFileExW");
    }
    /**
     * {@snippet :
     * HANDLE FindFirstFileExW(LPCWSTR lpFileName, FINDEX_INFO_LEVELS fInfoLevelId, LPVOID lpFindFileData, FINDEX_SEARCH_OPS fSearchOp, LPVOID lpSearchFilter, DWORD dwAdditionalFlags);
     * }
     */
    public static MemorySegment FindFirstFileExW(MemorySegment lpFileName, int fInfoLevelId, MemorySegment lpFindFileData, int fSearchOp, MemorySegment lpSearchFilter, int dwAdditionalFlags) {
        var mh$ = FindFirstFileExW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpFileName, fInfoLevelId, lpFindFileData, fSearchOp, lpSearchFilter, dwAdditionalFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindFirstVolumeW$MH() {
        return RuntimeHelper.requireNonNull(constants$576.const$4,"FindFirstVolumeW");
    }
    /**
     * {@snippet :
     * HANDLE FindFirstVolumeW(LPWSTR lpszVolumeName, DWORD cchBufferLength);
     * }
     */
    public static MemorySegment FindFirstVolumeW(MemorySegment lpszVolumeName, int cchBufferLength) {
        var mh$ = FindFirstVolumeW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpszVolumeName, cchBufferLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindNextChangeNotification$MH() {
        return RuntimeHelper.requireNonNull(constants$576.const$5,"FindNextChangeNotification");
    }
    /**
     * {@snippet :
     * BOOL FindNextChangeNotification(HANDLE hChangeHandle);
     * }
     */
    public static int FindNextChangeNotification(MemorySegment hChangeHandle) {
        var mh$ = FindNextChangeNotification$MH();
        try {
            return (int)mh$.invokeExact(hChangeHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindNextFileA$MH() {
        return RuntimeHelper.requireNonNull(constants$577.const$0,"FindNextFileA");
    }
    /**
     * {@snippet :
     * BOOL FindNextFileA(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData);
     * }
     */
    public static int FindNextFileA(MemorySegment hFindFile, MemorySegment lpFindFileData) {
        var mh$ = FindNextFileA$MH();
        try {
            return (int)mh$.invokeExact(hFindFile, lpFindFileData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindNextFileW$MH() {
        return RuntimeHelper.requireNonNull(constants$577.const$1,"FindNextFileW");
    }
    /**
     * {@snippet :
     * BOOL FindNextFileW(HANDLE hFindFile, LPWIN32_FIND_DATAW lpFindFileData);
     * }
     */
    public static int FindNextFileW(MemorySegment hFindFile, MemorySegment lpFindFileData) {
        var mh$ = FindNextFileW$MH();
        try {
            return (int)mh$.invokeExact(hFindFile, lpFindFileData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindNextVolumeW$MH() {
        return RuntimeHelper.requireNonNull(constants$577.const$2,"FindNextVolumeW");
    }
    /**
     * {@snippet :
     * BOOL FindNextVolumeW(HANDLE hFindVolume, LPWSTR lpszVolumeName, DWORD cchBufferLength);
     * }
     */
    public static int FindNextVolumeW(MemorySegment hFindVolume, MemorySegment lpszVolumeName, int cchBufferLength) {
        var mh$ = FindNextVolumeW$MH();
        try {
            return (int)mh$.invokeExact(hFindVolume, lpszVolumeName, cchBufferLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindVolumeClose$MH() {
        return RuntimeHelper.requireNonNull(constants$577.const$3,"FindVolumeClose");
    }
    /**
     * {@snippet :
     * BOOL FindVolumeClose(HANDLE hFindVolume);
     * }
     */
    public static int FindVolumeClose(MemorySegment hFindVolume) {
        var mh$ = FindVolumeClose$MH();
        try {
            return (int)mh$.invokeExact(hFindVolume);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FlushFileBuffers$MH() {
        return RuntimeHelper.requireNonNull(constants$577.const$4,"FlushFileBuffers");
    }
    /**
     * {@snippet :
     * BOOL FlushFileBuffers(HANDLE hFile);
     * }
     */
    public static int FlushFileBuffers(MemorySegment hFile) {
        var mh$ = FlushFileBuffers$MH();
        try {
            return (int)mh$.invokeExact(hFile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDiskFreeSpaceA$MH() {
        return RuntimeHelper.requireNonNull(constants$577.const$6,"GetDiskFreeSpaceA");
    }
    /**
     * {@snippet :
     * BOOL GetDiskFreeSpaceA(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters);
     * }
     */
    public static int GetDiskFreeSpaceA(MemorySegment lpRootPathName, MemorySegment lpSectorsPerCluster, MemorySegment lpBytesPerSector, MemorySegment lpNumberOfFreeClusters, MemorySegment lpTotalNumberOfClusters) {
        var mh$ = GetDiskFreeSpaceA$MH();
        try {
            return (int)mh$.invokeExact(lpRootPathName, lpSectorsPerCluster, lpBytesPerSector, lpNumberOfFreeClusters, lpTotalNumberOfClusters);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDiskFreeSpaceW$MH() {
        return RuntimeHelper.requireNonNull(constants$578.const$0,"GetDiskFreeSpaceW");
    }
    /**
     * {@snippet :
     * BOOL GetDiskFreeSpaceW(LPCWSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters);
     * }
     */
    public static int GetDiskFreeSpaceW(MemorySegment lpRootPathName, MemorySegment lpSectorsPerCluster, MemorySegment lpBytesPerSector, MemorySegment lpNumberOfFreeClusters, MemorySegment lpTotalNumberOfClusters) {
        var mh$ = GetDiskFreeSpaceW$MH();
        try {
            return (int)mh$.invokeExact(lpRootPathName, lpSectorsPerCluster, lpBytesPerSector, lpNumberOfFreeClusters, lpTotalNumberOfClusters);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDiskFreeSpaceExA$MH() {
        return RuntimeHelper.requireNonNull(constants$578.const$1,"GetDiskFreeSpaceExA");
    }
    /**
     * {@snippet :
     * BOOL GetDiskFreeSpaceExA(LPCSTR lpDirectoryName, PULARGE_INTEGER lpFreeBytesAvailableToCaller, PULARGE_INTEGER lpTotalNumberOfBytes, PULARGE_INTEGER lpTotalNumberOfFreeBytes);
     * }
     */
    public static int GetDiskFreeSpaceExA(MemorySegment lpDirectoryName, MemorySegment lpFreeBytesAvailableToCaller, MemorySegment lpTotalNumberOfBytes, MemorySegment lpTotalNumberOfFreeBytes) {
        var mh$ = GetDiskFreeSpaceExA$MH();
        try {
            return (int)mh$.invokeExact(lpDirectoryName, lpFreeBytesAvailableToCaller, lpTotalNumberOfBytes, lpTotalNumberOfFreeBytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDiskFreeSpaceExW$MH() {
        return RuntimeHelper.requireNonNull(constants$578.const$2,"GetDiskFreeSpaceExW");
    }
    /**
     * {@snippet :
     * BOOL GetDiskFreeSpaceExW(LPCWSTR lpDirectoryName, PULARGE_INTEGER lpFreeBytesAvailableToCaller, PULARGE_INTEGER lpTotalNumberOfBytes, PULARGE_INTEGER lpTotalNumberOfFreeBytes);
     * }
     */
    public static int GetDiskFreeSpaceExW(MemorySegment lpDirectoryName, MemorySegment lpFreeBytesAvailableToCaller, MemorySegment lpTotalNumberOfBytes, MemorySegment lpTotalNumberOfFreeBytes) {
        var mh$ = GetDiskFreeSpaceExW$MH();
        try {
            return (int)mh$.invokeExact(lpDirectoryName, lpFreeBytesAvailableToCaller, lpTotalNumberOfBytes, lpTotalNumberOfFreeBytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDiskSpaceInformationA$MH() {
        return RuntimeHelper.requireNonNull(constants$580.const$5,"GetDiskSpaceInformationA");
    }
    /**
     * {@snippet :
     * HRESULT GetDiskSpaceInformationA(LPCSTR rootPath, DISK_SPACE_INFORMATION* diskSpaceInfo);
     * }
     */
    public static int GetDiskSpaceInformationA(MemorySegment rootPath, MemorySegment diskSpaceInfo) {
        var mh$ = GetDiskSpaceInformationA$MH();
        try {
            return (int)mh$.invokeExact(rootPath, diskSpaceInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDiskSpaceInformationW$MH() {
        return RuntimeHelper.requireNonNull(constants$581.const$0,"GetDiskSpaceInformationW");
    }
    /**
     * {@snippet :
     * HRESULT GetDiskSpaceInformationW(LPCWSTR rootPath, DISK_SPACE_INFORMATION* diskSpaceInfo);
     * }
     */
    public static int GetDiskSpaceInformationW(MemorySegment rootPath, MemorySegment diskSpaceInfo) {
        var mh$ = GetDiskSpaceInformationW$MH();
        try {
            return (int)mh$.invokeExact(rootPath, diskSpaceInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDriveTypeA$MH() {
        return RuntimeHelper.requireNonNull(constants$581.const$1,"GetDriveTypeA");
    }
    /**
     * {@snippet :
     * UINT GetDriveTypeA(LPCSTR lpRootPathName);
     * }
     */
    public static int GetDriveTypeA(MemorySegment lpRootPathName) {
        var mh$ = GetDriveTypeA$MH();
        try {
            return (int)mh$.invokeExact(lpRootPathName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDriveTypeW$MH() {
        return RuntimeHelper.requireNonNull(constants$581.const$2,"GetDriveTypeW");
    }
    /**
     * {@snippet :
     * UINT GetDriveTypeW(LPCWSTR lpRootPathName);
     * }
     */
    public static int GetDriveTypeW(MemorySegment lpRootPathName) {
        var mh$ = GetDriveTypeW$MH();
        try {
            return (int)mh$.invokeExact(lpRootPathName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _WIN32_FILE_ATTRIBUTE_DATA* LPWIN32_FILE_ATTRIBUTE_DATA;
     * }
     */
    public static final AddressLayout LPWIN32_FILE_ATTRIBUTE_DATA = RuntimeHelper.POINTER;
    public static MethodHandle GetFileAttributesA$MH() {
        return RuntimeHelper.requireNonNull(constants$582.const$1,"GetFileAttributesA");
    }
    /**
     * {@snippet :
     * DWORD GetFileAttributesA(LPCSTR lpFileName);
     * }
     */
    public static int GetFileAttributesA(MemorySegment lpFileName) {
        var mh$ = GetFileAttributesA$MH();
        try {
            return (int)mh$.invokeExact(lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileAttributesW$MH() {
        return RuntimeHelper.requireNonNull(constants$582.const$2,"GetFileAttributesW");
    }
    /**
     * {@snippet :
     * DWORD GetFileAttributesW(LPCWSTR lpFileName);
     * }
     */
    public static int GetFileAttributesW(MemorySegment lpFileName) {
        var mh$ = GetFileAttributesW$MH();
        try {
            return (int)mh$.invokeExact(lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileAttributesExA$MH() {
        return RuntimeHelper.requireNonNull(constants$582.const$3,"GetFileAttributesExA");
    }
    /**
     * {@snippet :
     * BOOL GetFileAttributesExA(LPCSTR lpFileName, GET_FILEEX_INFO_LEVELS fInfoLevelId, LPVOID lpFileInformation);
     * }
     */
    public static int GetFileAttributesExA(MemorySegment lpFileName, int fInfoLevelId, MemorySegment lpFileInformation) {
        var mh$ = GetFileAttributesExA$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, fInfoLevelId, lpFileInformation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileAttributesExW$MH() {
        return RuntimeHelper.requireNonNull(constants$582.const$4,"GetFileAttributesExW");
    }
    /**
     * {@snippet :
     * BOOL GetFileAttributesExW(LPCWSTR lpFileName, GET_FILEEX_INFO_LEVELS fInfoLevelId, LPVOID lpFileInformation);
     * }
     */
    public static int GetFileAttributesExW(MemorySegment lpFileName, int fInfoLevelId, MemorySegment lpFileInformation) {
        var mh$ = GetFileAttributesExW$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, fInfoLevelId, lpFileInformation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _BY_HANDLE_FILE_INFORMATION* PBY_HANDLE_FILE_INFORMATION;
     * }
     */
    public static final AddressLayout PBY_HANDLE_FILE_INFORMATION = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _BY_HANDLE_FILE_INFORMATION* LPBY_HANDLE_FILE_INFORMATION;
     * }
     */
    public static final AddressLayout LPBY_HANDLE_FILE_INFORMATION = RuntimeHelper.POINTER;
    public static MethodHandle GetFileInformationByHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$584.const$1,"GetFileInformationByHandle");
    }
    /**
     * {@snippet :
     * BOOL GetFileInformationByHandle(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation);
     * }
     */
    public static int GetFileInformationByHandle(MemorySegment hFile, MemorySegment lpFileInformation) {
        var mh$ = GetFileInformationByHandle$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpFileInformation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileSize$MH() {
        return RuntimeHelper.requireNonNull(constants$584.const$2,"GetFileSize");
    }
    /**
     * {@snippet :
     * DWORD GetFileSize(HANDLE hFile, LPDWORD lpFileSizeHigh);
     * }
     */
    public static int GetFileSize(MemorySegment hFile, MemorySegment lpFileSizeHigh) {
        var mh$ = GetFileSize$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpFileSizeHigh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileSizeEx$MH() {
        return RuntimeHelper.requireNonNull(constants$584.const$3,"GetFileSizeEx");
    }
    /**
     * {@snippet :
     * BOOL GetFileSizeEx(HANDLE hFile, PLARGE_INTEGER lpFileSize);
     * }
     */
    public static int GetFileSizeEx(MemorySegment hFile, MemorySegment lpFileSize) {
        var mh$ = GetFileSizeEx$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpFileSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileType$MH() {
        return RuntimeHelper.requireNonNull(constants$584.const$4,"GetFileType");
    }
    /**
     * {@snippet :
     * DWORD GetFileType(HANDLE hFile);
     * }
     */
    public static int GetFileType(MemorySegment hFile) {
        var mh$ = GetFileType$MH();
        try {
            return (int)mh$.invokeExact(hFile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFinalPathNameByHandleA$MH() {
        return RuntimeHelper.requireNonNull(constants$584.const$6,"GetFinalPathNameByHandleA");
    }
    /**
     * {@snippet :
     * DWORD GetFinalPathNameByHandleA(HANDLE hFile, LPSTR lpszFilePath, DWORD cchFilePath, DWORD dwFlags);
     * }
     */
    public static int GetFinalPathNameByHandleA(MemorySegment hFile, MemorySegment lpszFilePath, int cchFilePath, int dwFlags) {
        var mh$ = GetFinalPathNameByHandleA$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpszFilePath, cchFilePath, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFinalPathNameByHandleW$MH() {
        return RuntimeHelper.requireNonNull(constants$585.const$0,"GetFinalPathNameByHandleW");
    }
    /**
     * {@snippet :
     * DWORD GetFinalPathNameByHandleW(HANDLE hFile, LPWSTR lpszFilePath, DWORD cchFilePath, DWORD dwFlags);
     * }
     */
    public static int GetFinalPathNameByHandleW(MemorySegment hFile, MemorySegment lpszFilePath, int cchFilePath, int dwFlags) {
        var mh$ = GetFinalPathNameByHandleW$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpszFilePath, cchFilePath, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileTime$MH() {
        return RuntimeHelper.requireNonNull(constants$585.const$1,"GetFileTime");
    }
    /**
     * {@snippet :
     * BOOL GetFileTime(HANDLE hFile, LPFILETIME lpCreationTime, LPFILETIME lpLastAccessTime, LPFILETIME lpLastWriteTime);
     * }
     */
    public static int GetFileTime(MemorySegment hFile, MemorySegment lpCreationTime, MemorySegment lpLastAccessTime, MemorySegment lpLastWriteTime) {
        var mh$ = GetFileTime$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpCreationTime, lpLastAccessTime, lpLastWriteTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFullPathNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$585.const$3,"GetFullPathNameW");
    }
    /**
     * {@snippet :
     * DWORD GetFullPathNameW(LPCWSTR lpFileName, DWORD nBufferLength, LPWSTR lpBuffer, LPWSTR* lpFilePart);
     * }
     */
    public static int GetFullPathNameW(MemorySegment lpFileName, int nBufferLength, MemorySegment lpBuffer, MemorySegment lpFilePart) {
        var mh$ = GetFullPathNameW$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, nBufferLength, lpBuffer, lpFilePart);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFullPathNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$585.const$4,"GetFullPathNameA");
    }
    /**
     * {@snippet :
     * DWORD GetFullPathNameA(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR* lpFilePart);
     * }
     */
    public static int GetFullPathNameA(MemorySegment lpFileName, int nBufferLength, MemorySegment lpBuffer, MemorySegment lpFilePart) {
        var mh$ = GetFullPathNameA$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, nBufferLength, lpBuffer, lpFilePart);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLogicalDrives$MH() {
        return RuntimeHelper.requireNonNull(constants$585.const$5,"GetLogicalDrives");
    }
    /**
     * {@snippet :
     * DWORD GetLogicalDrives();
     * }
     */
    public static int GetLogicalDrives() {
        var mh$ = GetLogicalDrives$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLogicalDriveStringsW$MH() {
        return RuntimeHelper.requireNonNull(constants$586.const$0,"GetLogicalDriveStringsW");
    }
    /**
     * {@snippet :
     * DWORD GetLogicalDriveStringsW(DWORD nBufferLength, LPWSTR lpBuffer);
     * }
     */
    public static int GetLogicalDriveStringsW(int nBufferLength, MemorySegment lpBuffer) {
        var mh$ = GetLogicalDriveStringsW$MH();
        try {
            return (int)mh$.invokeExact(nBufferLength, lpBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLongPathNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$586.const$1,"GetLongPathNameA");
    }
    /**
     * {@snippet :
     * DWORD GetLongPathNameA(LPCSTR lpszShortPath, LPSTR lpszLongPath, DWORD cchBuffer);
     * }
     */
    public static int GetLongPathNameA(MemorySegment lpszShortPath, MemorySegment lpszLongPath, int cchBuffer) {
        var mh$ = GetLongPathNameA$MH();
        try {
            return (int)mh$.invokeExact(lpszShortPath, lpszLongPath, cchBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLongPathNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$586.const$2,"GetLongPathNameW");
    }
    /**
     * {@snippet :
     * DWORD GetLongPathNameW(LPCWSTR lpszShortPath, LPWSTR lpszLongPath, DWORD cchBuffer);
     * }
     */
    public static int GetLongPathNameW(MemorySegment lpszShortPath, MemorySegment lpszLongPath, int cchBuffer) {
        var mh$ = GetLongPathNameW$MH();
        try {
            return (int)mh$.invokeExact(lpszShortPath, lpszLongPath, cchBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AreShortNamesEnabled$MH() {
        return RuntimeHelper.requireNonNull(constants$586.const$3,"AreShortNamesEnabled");
    }
    /**
     * {@snippet :
     * BOOL AreShortNamesEnabled(HANDLE Handle, BOOL* Enabled);
     * }
     */
    public static int AreShortNamesEnabled(MemorySegment Handle, MemorySegment Enabled) {
        var mh$ = AreShortNamesEnabled$MH();
        try {
            return (int)mh$.invokeExact(Handle, Enabled);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetShortPathNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$586.const$4,"GetShortPathNameW");
    }
    /**
     * {@snippet :
     * DWORD GetShortPathNameW(LPCWSTR lpszLongPath, LPWSTR lpszShortPath, DWORD cchBuffer);
     * }
     */
    public static int GetShortPathNameW(MemorySegment lpszLongPath, MemorySegment lpszShortPath, int cchBuffer) {
        var mh$ = GetShortPathNameW$MH();
        try {
            return (int)mh$.invokeExact(lpszLongPath, lpszShortPath, cchBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTempFileNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$586.const$6,"GetTempFileNameW");
    }
    /**
     * {@snippet :
     * UINT GetTempFileNameW(LPCWSTR lpPathName, LPCWSTR lpPrefixString, UINT uUnique, LPWSTR lpTempFileName);
     * }
     */
    public static int GetTempFileNameW(MemorySegment lpPathName, MemorySegment lpPrefixString, int uUnique, MemorySegment lpTempFileName) {
        var mh$ = GetTempFileNameW$MH();
        try {
            return (int)mh$.invokeExact(lpPathName, lpPrefixString, uUnique, lpTempFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetVolumeInformationByHandleW$MH() {
        return RuntimeHelper.requireNonNull(constants$587.const$1,"GetVolumeInformationByHandleW");
    }
    /**
     * {@snippet :
     * BOOL GetVolumeInformationByHandleW(HANDLE hFile, LPWSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPWSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize);
     * }
     */
    public static int GetVolumeInformationByHandleW(MemorySegment hFile, MemorySegment lpVolumeNameBuffer, int nVolumeNameSize, MemorySegment lpVolumeSerialNumber, MemorySegment lpMaximumComponentLength, MemorySegment lpFileSystemFlags, MemorySegment lpFileSystemNameBuffer, int nFileSystemNameSize) {
        var mh$ = GetVolumeInformationByHandleW$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpVolumeNameBuffer, nVolumeNameSize, lpVolumeSerialNumber, lpMaximumComponentLength, lpFileSystemFlags, lpFileSystemNameBuffer, nFileSystemNameSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetVolumeInformationW$MH() {
        return RuntimeHelper.requireNonNull(constants$587.const$2,"GetVolumeInformationW");
    }
    /**
     * {@snippet :
     * BOOL GetVolumeInformationW(LPCWSTR lpRootPathName, LPWSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPWSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize);
     * }
     */
    public static int GetVolumeInformationW(MemorySegment lpRootPathName, MemorySegment lpVolumeNameBuffer, int nVolumeNameSize, MemorySegment lpVolumeSerialNumber, MemorySegment lpMaximumComponentLength, MemorySegment lpFileSystemFlags, MemorySegment lpFileSystemNameBuffer, int nFileSystemNameSize) {
        var mh$ = GetVolumeInformationW$MH();
        try {
            return (int)mh$.invokeExact(lpRootPathName, lpVolumeNameBuffer, nVolumeNameSize, lpVolumeSerialNumber, lpMaximumComponentLength, lpFileSystemFlags, lpFileSystemNameBuffer, nFileSystemNameSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetVolumePathNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$587.const$3,"GetVolumePathNameW");
    }
    /**
     * {@snippet :
     * BOOL GetVolumePathNameW(LPCWSTR lpszFileName, LPWSTR lpszVolumePathName, DWORD cchBufferLength);
     * }
     */
    public static int GetVolumePathNameW(MemorySegment lpszFileName, MemorySegment lpszVolumePathName, int cchBufferLength) {
        var mh$ = GetVolumePathNameW$MH();
        try {
            return (int)mh$.invokeExact(lpszFileName, lpszVolumePathName, cchBufferLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LocalFileTimeToFileTime$MH() {
        return RuntimeHelper.requireNonNull(constants$587.const$4,"LocalFileTimeToFileTime");
    }
    /**
     * {@snippet :
     * BOOL LocalFileTimeToFileTime(const FILETIME* lpLocalFileTime, LPFILETIME lpFileTime);
     * }
     */
    public static int LocalFileTimeToFileTime(MemorySegment lpLocalFileTime, MemorySegment lpFileTime) {
        var mh$ = LocalFileTimeToFileTime$MH();
        try {
            return (int)mh$.invokeExact(lpLocalFileTime, lpFileTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LockFile$MH() {
        return RuntimeHelper.requireNonNull(constants$587.const$6,"LockFile");
    }
    /**
     * {@snippet :
     * BOOL LockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToLockLow, DWORD nNumberOfBytesToLockHigh);
     * }
     */
    public static int LockFile(MemorySegment hFile, int dwFileOffsetLow, int dwFileOffsetHigh, int nNumberOfBytesToLockLow, int nNumberOfBytesToLockHigh) {
        var mh$ = LockFile$MH();
        try {
            return (int)mh$.invokeExact(hFile, dwFileOffsetLow, dwFileOffsetHigh, nNumberOfBytesToLockLow, nNumberOfBytesToLockHigh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LockFileEx$MH() {
        return RuntimeHelper.requireNonNull(constants$588.const$1,"LockFileEx");
    }
    /**
     * {@snippet :
     * BOOL LockFileEx(HANDLE hFile, DWORD dwFlags, DWORD dwReserved, DWORD nNumberOfBytesToLockLow, DWORD nNumberOfBytesToLockHigh, LPOVERLAPPED lpOverlapped);
     * }
     */
    public static int LockFileEx(MemorySegment hFile, int dwFlags, int dwReserved, int nNumberOfBytesToLockLow, int nNumberOfBytesToLockHigh, MemorySegment lpOverlapped) {
        var mh$ = LockFileEx$MH();
        try {
            return (int)mh$.invokeExact(hFile, dwFlags, dwReserved, nNumberOfBytesToLockLow, nNumberOfBytesToLockHigh, lpOverlapped);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryDosDeviceW$MH() {
        return RuntimeHelper.requireNonNull(constants$588.const$2,"QueryDosDeviceW");
    }
    /**
     * {@snippet :
     * DWORD QueryDosDeviceW(LPCWSTR lpDeviceName, LPWSTR lpTargetPath, DWORD ucchMax);
     * }
     */
    public static int QueryDosDeviceW(MemorySegment lpDeviceName, MemorySegment lpTargetPath, int ucchMax) {
        var mh$ = QueryDosDeviceW$MH();
        try {
            return (int)mh$.invokeExact(lpDeviceName, lpTargetPath, ucchMax);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadFile$MH() {
        return RuntimeHelper.requireNonNull(constants$588.const$4,"ReadFile");
    }
    /**
     * {@snippet :
     * BOOL ReadFile(HANDLE hFile, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, LPDWORD lpNumberOfBytesRead, LPOVERLAPPED lpOverlapped);
     * }
     */
    public static int ReadFile(MemorySegment hFile, MemorySegment lpBuffer, int nNumberOfBytesToRead, MemorySegment lpNumberOfBytesRead, MemorySegment lpOverlapped) {
        var mh$ = ReadFile$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpBuffer, nNumberOfBytesToRead, lpNumberOfBytesRead, lpOverlapped);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadFileEx$MH() {
        return RuntimeHelper.requireNonNull(constants$588.const$5,"ReadFileEx");
    }
    /**
     * {@snippet :
     * BOOL ReadFileEx(HANDLE hFile, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, LPOVERLAPPED lpOverlapped, LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine);
     * }
     */
    public static int ReadFileEx(MemorySegment hFile, MemorySegment lpBuffer, int nNumberOfBytesToRead, MemorySegment lpOverlapped, MemorySegment lpCompletionRoutine) {
        var mh$ = ReadFileEx$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpBuffer, nNumberOfBytesToRead, lpOverlapped, lpCompletionRoutine);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadFileScatter$MH() {
        return RuntimeHelper.requireNonNull(constants$589.const$0,"ReadFileScatter");
    }
    /**
     * {@snippet :
     * BOOL ReadFileScatter(HANDLE hFile, FILE_SEGMENT_ELEMENT aSegmentArray[], DWORD nNumberOfBytesToRead, LPDWORD lpReserved, LPOVERLAPPED lpOverlapped);
     * }
     */
    public static int ReadFileScatter(MemorySegment hFile, MemorySegment aSegmentArray, int nNumberOfBytesToRead, MemorySegment lpReserved, MemorySegment lpOverlapped) {
        var mh$ = ReadFileScatter$MH();
        try {
            return (int)mh$.invokeExact(hFile, aSegmentArray, nNumberOfBytesToRead, lpReserved, lpOverlapped);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RemoveDirectoryA$MH() {
        return RuntimeHelper.requireNonNull(constants$589.const$1,"RemoveDirectoryA");
    }
    /**
     * {@snippet :
     * BOOL RemoveDirectoryA(LPCSTR lpPathName);
     * }
     */
    public static int RemoveDirectoryA(MemorySegment lpPathName) {
        var mh$ = RemoveDirectoryA$MH();
        try {
            return (int)mh$.invokeExact(lpPathName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RemoveDirectoryW$MH() {
        return RuntimeHelper.requireNonNull(constants$589.const$2,"RemoveDirectoryW");
    }
    /**
     * {@snippet :
     * BOOL RemoveDirectoryW(LPCWSTR lpPathName);
     * }
     */
    public static int RemoveDirectoryW(MemorySegment lpPathName) {
        var mh$ = RemoveDirectoryW$MH();
        try {
            return (int)mh$.invokeExact(lpPathName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetEndOfFile$MH() {
        return RuntimeHelper.requireNonNull(constants$589.const$3,"SetEndOfFile");
    }
    /**
     * {@snippet :
     * BOOL SetEndOfFile(HANDLE hFile);
     * }
     */
    public static int SetEndOfFile(MemorySegment hFile) {
        var mh$ = SetEndOfFile$MH();
        try {
            return (int)mh$.invokeExact(hFile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFileAttributesA$MH() {
        return RuntimeHelper.requireNonNull(constants$589.const$4,"SetFileAttributesA");
    }
    /**
     * {@snippet :
     * BOOL SetFileAttributesA(LPCSTR lpFileName, DWORD dwFileAttributes);
     * }
     */
    public static int SetFileAttributesA(MemorySegment lpFileName, int dwFileAttributes) {
        var mh$ = SetFileAttributesA$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, dwFileAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFileAttributesW$MH() {
        return RuntimeHelper.requireNonNull(constants$589.const$5,"SetFileAttributesW");
    }
    /**
     * {@snippet :
     * BOOL SetFileAttributesW(LPCWSTR lpFileName, DWORD dwFileAttributes);
     * }
     */
    public static int SetFileAttributesW(MemorySegment lpFileName, int dwFileAttributes) {
        var mh$ = SetFileAttributesW$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, dwFileAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFileInformationByHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$590.const$1,"SetFileInformationByHandle");
    }
    /**
     * {@snippet :
     * BOOL SetFileInformationByHandle(HANDLE hFile, FILE_INFO_BY_HANDLE_CLASS FileInformationClass, LPVOID lpFileInformation, DWORD dwBufferSize);
     * }
     */
    public static int SetFileInformationByHandle(MemorySegment hFile, int FileInformationClass, MemorySegment lpFileInformation, int dwBufferSize) {
        var mh$ = SetFileInformationByHandle$MH();
        try {
            return (int)mh$.invokeExact(hFile, FileInformationClass, lpFileInformation, dwBufferSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFilePointer$MH() {
        return RuntimeHelper.requireNonNull(constants$590.const$2,"SetFilePointer");
    }
    /**
     * {@snippet :
     * DWORD SetFilePointer(HANDLE hFile, LONG lDistanceToMove, PLONG lpDistanceToMoveHigh, DWORD dwMoveMethod);
     * }
     */
    public static int SetFilePointer(MemorySegment hFile, int lDistanceToMove, MemorySegment lpDistanceToMoveHigh, int dwMoveMethod) {
        var mh$ = SetFilePointer$MH();
        try {
            return (int)mh$.invokeExact(hFile, lDistanceToMove, lpDistanceToMoveHigh, dwMoveMethod);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFilePointerEx$MH() {
        return RuntimeHelper.requireNonNull(constants$590.const$4,"SetFilePointerEx");
    }
    /**
     * {@snippet :
     * BOOL SetFilePointerEx(HANDLE hFile, LARGE_INTEGER liDistanceToMove, PLARGE_INTEGER lpNewFilePointer, DWORD dwMoveMethod);
     * }
     */
    public static int SetFilePointerEx(MemorySegment hFile, MemorySegment liDistanceToMove, MemorySegment lpNewFilePointer, int dwMoveMethod) {
        var mh$ = SetFilePointerEx$MH();
        try {
            return (int)mh$.invokeExact(hFile, liDistanceToMove, lpNewFilePointer, dwMoveMethod);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFileTime$MH() {
        return RuntimeHelper.requireNonNull(constants$590.const$5,"SetFileTime");
    }
    /**
     * {@snippet :
     * BOOL SetFileTime(HANDLE hFile, const FILETIME* lpCreationTime, const FILETIME* lpLastAccessTime, const FILETIME* lpLastWriteTime);
     * }
     */
    public static int SetFileTime(MemorySegment hFile, MemorySegment lpCreationTime, MemorySegment lpLastAccessTime, MemorySegment lpLastWriteTime) {
        var mh$ = SetFileTime$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpCreationTime, lpLastAccessTime, lpLastWriteTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFileValidData$MH() {
        return RuntimeHelper.requireNonNull(constants$591.const$0,"SetFileValidData");
    }
    /**
     * {@snippet :
     * BOOL SetFileValidData(HANDLE hFile, LONGLONG ValidDataLength);
     * }
     */
    public static int SetFileValidData(MemorySegment hFile, long ValidDataLength) {
        var mh$ = SetFileValidData$MH();
        try {
            return (int)mh$.invokeExact(hFile, ValidDataLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnlockFile$MH() {
        return RuntimeHelper.requireNonNull(constants$591.const$1,"UnlockFile");
    }
    /**
     * {@snippet :
     * BOOL UnlockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh);
     * }
     */
    public static int UnlockFile(MemorySegment hFile, int dwFileOffsetLow, int dwFileOffsetHigh, int nNumberOfBytesToUnlockLow, int nNumberOfBytesToUnlockHigh) {
        var mh$ = UnlockFile$MH();
        try {
            return (int)mh$.invokeExact(hFile, dwFileOffsetLow, dwFileOffsetHigh, nNumberOfBytesToUnlockLow, nNumberOfBytesToUnlockHigh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnlockFileEx$MH() {
        return RuntimeHelper.requireNonNull(constants$591.const$3,"UnlockFileEx");
    }
    /**
     * {@snippet :
     * BOOL UnlockFileEx(HANDLE hFile, DWORD dwReserved, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh, LPOVERLAPPED lpOverlapped);
     * }
     */
    public static int UnlockFileEx(MemorySegment hFile, int dwReserved, int nNumberOfBytesToUnlockLow, int nNumberOfBytesToUnlockHigh, MemorySegment lpOverlapped) {
        var mh$ = UnlockFileEx$MH();
        try {
            return (int)mh$.invokeExact(hFile, dwReserved, nNumberOfBytesToUnlockLow, nNumberOfBytesToUnlockHigh, lpOverlapped);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteFile$MH() {
        return RuntimeHelper.requireNonNull(constants$591.const$4,"WriteFile");
    }
    /**
     * {@snippet :
     * BOOL WriteFile(HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, LPOVERLAPPED lpOverlapped);
     * }
     */
    public static int WriteFile(MemorySegment hFile, MemorySegment lpBuffer, int nNumberOfBytesToWrite, MemorySegment lpNumberOfBytesWritten, MemorySegment lpOverlapped) {
        var mh$ = WriteFile$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpBuffer, nNumberOfBytesToWrite, lpNumberOfBytesWritten, lpOverlapped);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteFileEx$MH() {
        return RuntimeHelper.requireNonNull(constants$591.const$5,"WriteFileEx");
    }
    /**
     * {@snippet :
     * BOOL WriteFileEx(HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, LPOVERLAPPED lpOverlapped, LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine);
     * }
     */
    public static int WriteFileEx(MemorySegment hFile, MemorySegment lpBuffer, int nNumberOfBytesToWrite, MemorySegment lpOverlapped, MemorySegment lpCompletionRoutine) {
        var mh$ = WriteFileEx$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpBuffer, nNumberOfBytesToWrite, lpOverlapped, lpCompletionRoutine);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteFileGather$MH() {
        return RuntimeHelper.requireNonNull(constants$592.const$0,"WriteFileGather");
    }
    /**
     * {@snippet :
     * BOOL WriteFileGather(HANDLE hFile, FILE_SEGMENT_ELEMENT aSegmentArray[], DWORD nNumberOfBytesToWrite, LPDWORD lpReserved, LPOVERLAPPED lpOverlapped);
     * }
     */
    public static int WriteFileGather(MemorySegment hFile, MemorySegment aSegmentArray, int nNumberOfBytesToWrite, MemorySegment lpReserved, MemorySegment lpOverlapped) {
        var mh$ = WriteFileGather$MH();
        try {
            return (int)mh$.invokeExact(hFile, aSegmentArray, nNumberOfBytesToWrite, lpReserved, lpOverlapped);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTempPathW$MH() {
        return RuntimeHelper.requireNonNull(constants$592.const$1,"GetTempPathW");
    }
    /**
     * {@snippet :
     * DWORD GetTempPathW(DWORD nBufferLength, LPWSTR lpBuffer);
     * }
     */
    public static int GetTempPathW(int nBufferLength, MemorySegment lpBuffer) {
        var mh$ = GetTempPathW$MH();
        try {
            return (int)mh$.invokeExact(nBufferLength, lpBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetVolumeNameForVolumeMountPointW$MH() {
        return RuntimeHelper.requireNonNull(constants$592.const$2,"GetVolumeNameForVolumeMountPointW");
    }
    /**
     * {@snippet :
     * BOOL GetVolumeNameForVolumeMountPointW(LPCWSTR lpszVolumeMountPoint, LPWSTR lpszVolumeName, DWORD cchBufferLength);
     * }
     */
    public static int GetVolumeNameForVolumeMountPointW(MemorySegment lpszVolumeMountPoint, MemorySegment lpszVolumeName, int cchBufferLength) {
        var mh$ = GetVolumeNameForVolumeMountPointW$MH();
        try {
            return (int)mh$.invokeExact(lpszVolumeMountPoint, lpszVolumeName, cchBufferLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetVolumePathNamesForVolumeNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$592.const$3,"GetVolumePathNamesForVolumeNameW");
    }
    /**
     * {@snippet :
     * BOOL GetVolumePathNamesForVolumeNameW(LPCWSTR lpszVolumeName, LPWCH lpszVolumePathNames, DWORD cchBufferLength, PDWORD lpcchReturnLength);
     * }
     */
    public static int GetVolumePathNamesForVolumeNameW(MemorySegment lpszVolumeName, MemorySegment lpszVolumePathNames, int cchBufferLength, MemorySegment lpcchReturnLength) {
        var mh$ = GetVolumePathNamesForVolumeNameW$MH();
        try {
            return (int)mh$.invokeExact(lpszVolumeName, lpszVolumePathNames, cchBufferLength, lpcchReturnLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _CREATEFILE2_EXTENDED_PARAMETERS* PCREATEFILE2_EXTENDED_PARAMETERS;
     * }
     */
    public static final AddressLayout PCREATEFILE2_EXTENDED_PARAMETERS = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CREATEFILE2_EXTENDED_PARAMETERS* LPCREATEFILE2_EXTENDED_PARAMETERS;
     * }
     */
    public static final AddressLayout LPCREATEFILE2_EXTENDED_PARAMETERS = RuntimeHelper.POINTER;
    public static MethodHandle CreateFile2$MH() {
        return RuntimeHelper.requireNonNull(constants$593.const$6,"CreateFile2");
    }
    /**
     * {@snippet :
     * HANDLE CreateFile2(LPCWSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, DWORD dwCreationDisposition, LPCREATEFILE2_EXTENDED_PARAMETERS pCreateExParams);
     * }
     */
    public static MemorySegment CreateFile2(MemorySegment lpFileName, int dwDesiredAccess, int dwShareMode, int dwCreationDisposition, MemorySegment pCreateExParams) {
        var mh$ = CreateFile2$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpFileName, dwDesiredAccess, dwShareMode, dwCreationDisposition, pCreateExParams);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFileIoOverlappedRange$MH() {
        return RuntimeHelper.requireNonNull(constants$594.const$0,"SetFileIoOverlappedRange");
    }
    /**
     * {@snippet :
     * BOOL SetFileIoOverlappedRange(HANDLE FileHandle, PUCHAR OverlappedRangeStart, ULONG Length);
     * }
     */
    public static int SetFileIoOverlappedRange(MemorySegment FileHandle, MemorySegment OverlappedRangeStart, int Length) {
        var mh$ = SetFileIoOverlappedRange$MH();
        try {
            return (int)mh$.invokeExact(FileHandle, OverlappedRangeStart, Length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCompressedFileSizeA$MH() {
        return RuntimeHelper.requireNonNull(constants$594.const$1,"GetCompressedFileSizeA");
    }
    /**
     * {@snippet :
     * DWORD GetCompressedFileSizeA(LPCSTR lpFileName, LPDWORD lpFileSizeHigh);
     * }
     */
    public static int GetCompressedFileSizeA(MemorySegment lpFileName, MemorySegment lpFileSizeHigh) {
        var mh$ = GetCompressedFileSizeA$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, lpFileSizeHigh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCompressedFileSizeW$MH() {
        return RuntimeHelper.requireNonNull(constants$594.const$2,"GetCompressedFileSizeW");
    }
    /**
     * {@snippet :
     * DWORD GetCompressedFileSizeW(LPCWSTR lpFileName, LPDWORD lpFileSizeHigh);
     * }
     */
    public static int GetCompressedFileSizeW(MemorySegment lpFileName, MemorySegment lpFileSizeHigh) {
        var mh$ = GetCompressedFileSizeW$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, lpFileSizeHigh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum _STREAM_INFO_LEVELS.FindStreamInfoStandard = 0;
     * }
     */
    public static int FindStreamInfoStandard() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum _STREAM_INFO_LEVELS.FindStreamInfoMaxInfoLevel = 1;
     * }
     */
    public static int FindStreamInfoMaxInfoLevel() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * typedef struct _WIN32_FIND_STREAM_DATA* PWIN32_FIND_STREAM_DATA;
     * }
     */
    public static final AddressLayout PWIN32_FIND_STREAM_DATA = RuntimeHelper.POINTER;
    public static MethodHandle FindFirstStreamW$MH() {
        return RuntimeHelper.requireNonNull(constants$594.const$5,"FindFirstStreamW");
    }
    /**
     * {@snippet :
     * HANDLE FindFirstStreamW(LPCWSTR lpFileName, STREAM_INFO_LEVELS InfoLevel, LPVOID lpFindStreamData, DWORD dwFlags);
     * }
     */
    public static MemorySegment FindFirstStreamW(MemorySegment lpFileName, int InfoLevel, MemorySegment lpFindStreamData, int dwFlags) {
        var mh$ = FindFirstStreamW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpFileName, InfoLevel, lpFindStreamData, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindNextStreamW$MH() {
        return RuntimeHelper.requireNonNull(constants$595.const$0,"FindNextStreamW");
    }
    /**
     * {@snippet :
     * BOOL FindNextStreamW(HANDLE hFindStream, LPVOID lpFindStreamData);
     * }
     */
    public static int FindNextStreamW(MemorySegment hFindStream, MemorySegment lpFindStreamData) {
        var mh$ = FindNextStreamW$MH();
        try {
            return (int)mh$.invokeExact(hFindStream, lpFindStreamData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AreFileApisANSI$MH() {
        return RuntimeHelper.requireNonNull(constants$595.const$1,"AreFileApisANSI");
    }
    /**
     * {@snippet :
     * BOOL AreFileApisANSI();
     * }
     */
    public static int AreFileApisANSI() {
        var mh$ = AreFileApisANSI$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTempPathA$MH() {
        return RuntimeHelper.requireNonNull(constants$595.const$2,"GetTempPathA");
    }
    /**
     * {@snippet :
     * DWORD GetTempPathA(DWORD nBufferLength, LPSTR lpBuffer);
     * }
     */
    public static int GetTempPathA(int nBufferLength, MemorySegment lpBuffer) {
        var mh$ = GetTempPathA$MH();
        try {
            return (int)mh$.invokeExact(nBufferLength, lpBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindFirstFileNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$595.const$4,"FindFirstFileNameW");
    }
    /**
     * {@snippet :
     * HANDLE FindFirstFileNameW(LPCWSTR lpFileName, DWORD dwFlags, LPDWORD StringLength, PWSTR LinkName);
     * }
     */
    public static MemorySegment FindFirstFileNameW(MemorySegment lpFileName, int dwFlags, MemorySegment StringLength, MemorySegment LinkName) {
        var mh$ = FindFirstFileNameW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpFileName, dwFlags, StringLength, LinkName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindNextFileNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$595.const$5,"FindNextFileNameW");
    }
    /**
     * {@snippet :
     * BOOL FindNextFileNameW(HANDLE hFindStream, LPDWORD StringLength, PWSTR LinkName);
     * }
     */
    public static int FindNextFileNameW(MemorySegment hFindStream, MemorySegment StringLength, MemorySegment LinkName) {
        var mh$ = FindNextFileNameW$MH();
        try {
            return (int)mh$.invokeExact(hFindStream, StringLength, LinkName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetVolumeInformationA$MH() {
        return RuntimeHelper.requireNonNull(constants$596.const$0,"GetVolumeInformationA");
    }
    /**
     * {@snippet :
     * BOOL GetVolumeInformationA(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize);
     * }
     */
    public static int GetVolumeInformationA(MemorySegment lpRootPathName, MemorySegment lpVolumeNameBuffer, int nVolumeNameSize, MemorySegment lpVolumeSerialNumber, MemorySegment lpMaximumComponentLength, MemorySegment lpFileSystemFlags, MemorySegment lpFileSystemNameBuffer, int nFileSystemNameSize) {
        var mh$ = GetVolumeInformationA$MH();
        try {
            return (int)mh$.invokeExact(lpRootPathName, lpVolumeNameBuffer, nVolumeNameSize, lpVolumeSerialNumber, lpMaximumComponentLength, lpFileSystemFlags, lpFileSystemNameBuffer, nFileSystemNameSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTempFileNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$596.const$1,"GetTempFileNameA");
    }
    /**
     * {@snippet :
     * UINT GetTempFileNameA(LPCSTR lpPathName, LPCSTR lpPrefixString, UINT uUnique, LPSTR lpTempFileName);
     * }
     */
    public static int GetTempFileNameA(MemorySegment lpPathName, MemorySegment lpPrefixString, int uUnique, MemorySegment lpTempFileName) {
        var mh$ = GetTempFileNameA$MH();
        try {
            return (int)mh$.invokeExact(lpPathName, lpPrefixString, uUnique, lpTempFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFileApisToOEM$MH() {
        return RuntimeHelper.requireNonNull(constants$596.const$2,"SetFileApisToOEM");
    }
    /**
     * {@snippet :
     * void SetFileApisToOEM();
     * }
     */
    public static void SetFileApisToOEM() {
        var mh$ = SetFileApisToOEM$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFileApisToANSI$MH() {
        return RuntimeHelper.requireNonNull(constants$596.const$3,"SetFileApisToANSI");
    }
    /**
     * {@snippet :
     * void SetFileApisToANSI();
     * }
     */
    public static void SetFileApisToANSI() {
        var mh$ = SetFileApisToANSI$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTempPath2W$MH() {
        return RuntimeHelper.requireNonNull(constants$596.const$4,"GetTempPath2W");
    }
    /**
     * {@snippet :
     * DWORD GetTempPath2W(DWORD BufferLength, LPWSTR Buffer);
     * }
     */
    public static int GetTempPath2W(int BufferLength, MemorySegment Buffer) {
        var mh$ = GetTempPath2W$MH();
        try {
            return (int)mh$.invokeExact(BufferLength, Buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTempPath2A$MH() {
        return RuntimeHelper.requireNonNull(constants$596.const$5,"GetTempPath2A");
    }
    /**
     * {@snippet :
     * DWORD GetTempPath2A(DWORD BufferLength, LPSTR Buffer);
     * }
     */
    public static int GetTempPath2A(int BufferLength, MemorySegment Buffer) {
        var mh$ = GetTempPath2A$MH();
        try {
            return (int)mh$.invokeExact(BufferLength, Buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CopyFileFromAppW$MH() {
        return RuntimeHelper.requireNonNull(constants$597.const$0,"CopyFileFromAppW");
    }
    /**
     * {@snippet :
     * BOOL CopyFileFromAppW(LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, BOOL bFailIfExists);
     * }
     */
    public static int CopyFileFromAppW(MemorySegment lpExistingFileName, MemorySegment lpNewFileName, int bFailIfExists) {
        var mh$ = CopyFileFromAppW$MH();
        try {
            return (int)mh$.invokeExact(lpExistingFileName, lpNewFileName, bFailIfExists);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDirectoryFromAppW$MH() {
        return RuntimeHelper.requireNonNull(constants$597.const$1,"CreateDirectoryFromAppW");
    }
    /**
     * {@snippet :
     * BOOL CreateDirectoryFromAppW(LPCWSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
     * }
     */
    public static int CreateDirectoryFromAppW(MemorySegment lpPathName, MemorySegment lpSecurityAttributes) {
        var mh$ = CreateDirectoryFromAppW$MH();
        try {
            return (int)mh$.invokeExact(lpPathName, lpSecurityAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateFileFromAppW$MH() {
        return RuntimeHelper.requireNonNull(constants$597.const$2,"CreateFileFromAppW");
    }
    /**
     * {@snippet :
     * HANDLE CreateFileFromAppW(LPCWSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile);
     * }
     */
    public static MemorySegment CreateFileFromAppW(MemorySegment lpFileName, int dwDesiredAccess, int dwShareMode, MemorySegment lpSecurityAttributes, int dwCreationDisposition, int dwFlagsAndAttributes, MemorySegment hTemplateFile) {
        var mh$ = CreateFileFromAppW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpFileName, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateFile2FromAppW$MH() {
        return RuntimeHelper.requireNonNull(constants$597.const$3,"CreateFile2FromAppW");
    }
    /**
     * {@snippet :
     * HANDLE CreateFile2FromAppW(LPCWSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, DWORD dwCreationDisposition, LPCREATEFILE2_EXTENDED_PARAMETERS pCreateExParams);
     * }
     */
    public static MemorySegment CreateFile2FromAppW(MemorySegment lpFileName, int dwDesiredAccess, int dwShareMode, int dwCreationDisposition, MemorySegment pCreateExParams) {
        var mh$ = CreateFile2FromAppW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpFileName, dwDesiredAccess, dwShareMode, dwCreationDisposition, pCreateExParams);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteFileFromAppW$MH() {
        return RuntimeHelper.requireNonNull(constants$597.const$4,"DeleteFileFromAppW");
    }
    /**
     * {@snippet :
     * BOOL DeleteFileFromAppW(LPCWSTR lpFileName);
     * }
     */
    public static int DeleteFileFromAppW(MemorySegment lpFileName) {
        var mh$ = DeleteFileFromAppW$MH();
        try {
            return (int)mh$.invokeExact(lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindFirstFileExFromAppW$MH() {
        return RuntimeHelper.requireNonNull(constants$597.const$5,"FindFirstFileExFromAppW");
    }
    /**
     * {@snippet :
     * HANDLE FindFirstFileExFromAppW(LPCWSTR lpFileName, FINDEX_INFO_LEVELS fInfoLevelId, LPVOID lpFindFileData, FINDEX_SEARCH_OPS fSearchOp, LPVOID lpSearchFilter, DWORD dwAdditionalFlags);
     * }
     */
    public static MemorySegment FindFirstFileExFromAppW(MemorySegment lpFileName, int fInfoLevelId, MemorySegment lpFindFileData, int fSearchOp, MemorySegment lpSearchFilter, int dwAdditionalFlags) {
        var mh$ = FindFirstFileExFromAppW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpFileName, fInfoLevelId, lpFindFileData, fSearchOp, lpSearchFilter, dwAdditionalFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileAttributesExFromAppW$MH() {
        return RuntimeHelper.requireNonNull(constants$598.const$0,"GetFileAttributesExFromAppW");
    }
    /**
     * {@snippet :
     * BOOL GetFileAttributesExFromAppW(LPCWSTR lpFileName, GET_FILEEX_INFO_LEVELS fInfoLevelId, LPVOID lpFileInformation);
     * }
     */
    public static int GetFileAttributesExFromAppW(MemorySegment lpFileName, int fInfoLevelId, MemorySegment lpFileInformation) {
        var mh$ = GetFileAttributesExFromAppW$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, fInfoLevelId, lpFileInformation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MoveFileFromAppW$MH() {
        return RuntimeHelper.requireNonNull(constants$598.const$1,"MoveFileFromAppW");
    }
    /**
     * {@snippet :
     * BOOL MoveFileFromAppW(LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName);
     * }
     */
    public static int MoveFileFromAppW(MemorySegment lpExistingFileName, MemorySegment lpNewFileName) {
        var mh$ = MoveFileFromAppW$MH();
        try {
            return (int)mh$.invokeExact(lpExistingFileName, lpNewFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RemoveDirectoryFromAppW$MH() {
        return RuntimeHelper.requireNonNull(constants$598.const$2,"RemoveDirectoryFromAppW");
    }
    /**
     * {@snippet :
     * BOOL RemoveDirectoryFromAppW(LPCWSTR lpPathName);
     * }
     */
    public static int RemoveDirectoryFromAppW(MemorySegment lpPathName) {
        var mh$ = RemoveDirectoryFromAppW$MH();
        try {
            return (int)mh$.invokeExact(lpPathName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReplaceFileFromAppW$MH() {
        return RuntimeHelper.requireNonNull(constants$598.const$3,"ReplaceFileFromAppW");
    }
    /**
     * {@snippet :
     * BOOL ReplaceFileFromAppW(LPCWSTR lpReplacedFileName, LPCWSTR lpReplacementFileName, LPCWSTR lpBackupFileName, DWORD dwReplaceFlags, LPVOID lpExclude, LPVOID lpReserved);
     * }
     */
    public static int ReplaceFileFromAppW(MemorySegment lpReplacedFileName, MemorySegment lpReplacementFileName, MemorySegment lpBackupFileName, int dwReplaceFlags, MemorySegment lpExclude, MemorySegment lpReserved) {
        var mh$ = ReplaceFileFromAppW$MH();
        try {
            return (int)mh$.invokeExact(lpReplacedFileName, lpReplacementFileName, lpBackupFileName, dwReplaceFlags, lpExclude, lpReserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFileAttributesFromAppW$MH() {
        return RuntimeHelper.requireNonNull(constants$598.const$4,"SetFileAttributesFromAppW");
    }
    /**
     * {@snippet :
     * BOOL SetFileAttributesFromAppW(LPCWSTR lpFileName, DWORD dwFileAttributes);
     * }
     */
    public static int SetFileAttributesFromAppW(MemorySegment lpFileName, int dwFileAttributes) {
        var mh$ = SetFileAttributesFromAppW$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, dwFileAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsDebuggerPresent$MH() {
        return RuntimeHelper.requireNonNull(constants$598.const$5,"IsDebuggerPresent");
    }
    /**
     * {@snippet :
     * BOOL IsDebuggerPresent();
     * }
     */
    public static int IsDebuggerPresent() {
        var mh$ = IsDebuggerPresent$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DebugBreak$MH() {
        return RuntimeHelper.requireNonNull(constants$599.const$0,"DebugBreak");
    }
    /**
     * {@snippet :
     * void DebugBreak();
     * }
     */
    public static void DebugBreak() {
        var mh$ = DebugBreak$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OutputDebugStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$599.const$1,"OutputDebugStringA");
    }
    /**
     * {@snippet :
     * void OutputDebugStringA(LPCSTR lpOutputString);
     * }
     */
    public static void OutputDebugStringA(MemorySegment lpOutputString) {
        var mh$ = OutputDebugStringA$MH();
        try {
            mh$.invokeExact(lpOutputString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OutputDebugStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$599.const$2,"OutputDebugStringW");
    }
    /**
     * {@snippet :
     * void OutputDebugStringW(LPCWSTR lpOutputString);
     * }
     */
    public static void OutputDebugStringW(MemorySegment lpOutputString) {
        var mh$ = OutputDebugStringW$MH();
        try {
            mh$.invokeExact(lpOutputString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ContinueDebugEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$599.const$4,"ContinueDebugEvent");
    }
    /**
     * {@snippet :
     * BOOL ContinueDebugEvent(DWORD dwProcessId, DWORD dwThreadId, DWORD dwContinueStatus);
     * }
     */
    public static int ContinueDebugEvent(int dwProcessId, int dwThreadId, int dwContinueStatus) {
        var mh$ = ContinueDebugEvent$MH();
        try {
            return (int)mh$.invokeExact(dwProcessId, dwThreadId, dwContinueStatus);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WaitForDebugEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$599.const$5,"WaitForDebugEvent");
    }
    /**
     * {@snippet :
     * BOOL WaitForDebugEvent(LPDEBUG_EVENT lpDebugEvent, DWORD dwMilliseconds);
     * }
     */
    public static int WaitForDebugEvent(MemorySegment lpDebugEvent, int dwMilliseconds) {
        var mh$ = WaitForDebugEvent$MH();
        try {
            return (int)mh$.invokeExact(lpDebugEvent, dwMilliseconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DebugActiveProcess$MH() {
        return RuntimeHelper.requireNonNull(constants$600.const$0,"DebugActiveProcess");
    }
    /**
     * {@snippet :
     * BOOL DebugActiveProcess(DWORD dwProcessId);
     * }
     */
    public static int DebugActiveProcess(int dwProcessId) {
        var mh$ = DebugActiveProcess$MH();
        try {
            return (int)mh$.invokeExact(dwProcessId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DebugActiveProcessStop$MH() {
        return RuntimeHelper.requireNonNull(constants$600.const$1,"DebugActiveProcessStop");
    }
    /**
     * {@snippet :
     * BOOL DebugActiveProcessStop(DWORD dwProcessId);
     * }
     */
    public static int DebugActiveProcessStop(int dwProcessId) {
        var mh$ = DebugActiveProcessStop$MH();
        try {
            return (int)mh$.invokeExact(dwProcessId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CheckRemoteDebuggerPresent$MH() {
        return RuntimeHelper.requireNonNull(constants$600.const$2,"CheckRemoteDebuggerPresent");
    }
    /**
     * {@snippet :
     * BOOL CheckRemoteDebuggerPresent(HANDLE hProcess, PBOOL pbDebuggerPresent);
     * }
     */
    public static int CheckRemoteDebuggerPresent(MemorySegment hProcess, MemorySegment pbDebuggerPresent) {
        var mh$ = CheckRemoteDebuggerPresent$MH();
        try {
            return (int)mh$.invokeExact(hProcess, pbDebuggerPresent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WaitForDebugEventEx$MH() {
        return RuntimeHelper.requireNonNull(constants$600.const$3,"WaitForDebugEventEx");
    }
    /**
     * {@snippet :
     * BOOL WaitForDebugEventEx(LPDEBUG_EVENT lpDebugEvent, DWORD dwMilliseconds);
     * }
     */
    public static int WaitForDebugEventEx(MemorySegment lpDebugEvent, int dwMilliseconds) {
        var mh$ = WaitForDebugEventEx$MH();
        try {
            return (int)mh$.invokeExact(lpDebugEvent, dwMilliseconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EncodePointer$MH() {
        return RuntimeHelper.requireNonNull(constants$600.const$4,"EncodePointer");
    }
    /**
     * {@snippet :
     * PVOID EncodePointer(PVOID Ptr);
     * }
     */
    public static MemorySegment EncodePointer(MemorySegment Ptr) {
        var mh$ = EncodePointer$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(Ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DecodePointer$MH() {
        return RuntimeHelper.requireNonNull(constants$600.const$5,"DecodePointer");
    }
    /**
     * {@snippet :
     * PVOID DecodePointer(PVOID Ptr);
     * }
     */
    public static MemorySegment DecodePointer(MemorySegment Ptr) {
        var mh$ = DecodePointer$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(Ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EncodeSystemPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$601.const$0,"EncodeSystemPointer");
    }
    /**
     * {@snippet :
     * PVOID EncodeSystemPointer(PVOID Ptr);
     * }
     */
    public static MemorySegment EncodeSystemPointer(MemorySegment Ptr) {
        var mh$ = EncodeSystemPointer$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(Ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DecodeSystemPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$601.const$1,"DecodeSystemPointer");
    }
    /**
     * {@snippet :
     * PVOID DecodeSystemPointer(PVOID Ptr);
     * }
     */
    public static MemorySegment DecodeSystemPointer(MemorySegment Ptr) {
        var mh$ = DecodeSystemPointer$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(Ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EncodeRemotePointer$MH() {
        return RuntimeHelper.requireNonNull(constants$601.const$2,"EncodeRemotePointer");
    }
    /**
     * {@snippet :
     * HRESULT EncodeRemotePointer(HANDLE ProcessHandle, PVOID Ptr, PVOID* EncodedPtr);
     * }
     */
    public static int EncodeRemotePointer(MemorySegment ProcessHandle, MemorySegment Ptr, MemorySegment EncodedPtr) {
        var mh$ = EncodeRemotePointer$MH();
        try {
            return (int)mh$.invokeExact(ProcessHandle, Ptr, EncodedPtr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DecodeRemotePointer$MH() {
        return RuntimeHelper.requireNonNull(constants$601.const$3,"DecodeRemotePointer");
    }
    /**
     * {@snippet :
     * HRESULT DecodeRemotePointer(HANDLE ProcessHandle, PVOID Ptr, PVOID* DecodedPtr);
     * }
     */
    public static int DecodeRemotePointer(MemorySegment ProcessHandle, MemorySegment Ptr, MemorySegment DecodedPtr) {
        var mh$ = DecodeRemotePointer$MH();
        try {
            return (int)mh$.invokeExact(ProcessHandle, Ptr, DecodedPtr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Beep$MH() {
        return RuntimeHelper.requireNonNull(constants$601.const$4,"Beep");
    }
    /**
     * {@snippet :
     * BOOL Beep(DWORD dwFreq, DWORD dwDuration);
     * }
     */
    public static int Beep(int dwFreq, int dwDuration) {
        var mh$ = Beep$MH();
        try {
            return (int)mh$.invokeExact(dwFreq, dwDuration);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CloseHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$601.const$5,"CloseHandle");
    }
    /**
     * {@snippet :
     * BOOL CloseHandle(HANDLE hObject);
     * }
     */
    public static int CloseHandle(MemorySegment hObject) {
        var mh$ = CloseHandle$MH();
        try {
            return (int)mh$.invokeExact(hObject);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DuplicateHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$602.const$1,"DuplicateHandle");
    }
    /**
     * {@snippet :
     * BOOL DuplicateHandle(HANDLE hSourceProcessHandle, HANDLE hSourceHandle, HANDLE hTargetProcessHandle, LPHANDLE lpTargetHandle, DWORD dwDesiredAccess, BOOL bInheritHandle, DWORD dwOptions);
     * }
     */
    public static int DuplicateHandle(MemorySegment hSourceProcessHandle, MemorySegment hSourceHandle, MemorySegment hTargetProcessHandle, MemorySegment lpTargetHandle, int dwDesiredAccess, int bInheritHandle, int dwOptions) {
        var mh$ = DuplicateHandle$MH();
        try {
            return (int)mh$.invokeExact(hSourceProcessHandle, hSourceHandle, hTargetProcessHandle, lpTargetHandle, dwDesiredAccess, bInheritHandle, dwOptions);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CompareObjectHandles$MH() {
        return RuntimeHelper.requireNonNull(constants$602.const$2,"CompareObjectHandles");
    }
    /**
     * {@snippet :
     * BOOL CompareObjectHandles(HANDLE hFirstObjectHandle, HANDLE hSecondObjectHandle);
     * }
     */
    public static int CompareObjectHandles(MemorySegment hFirstObjectHandle, MemorySegment hSecondObjectHandle) {
        var mh$ = CompareObjectHandles$MH();
        try {
            return (int)mh$.invokeExact(hFirstObjectHandle, hSecondObjectHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetHandleInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$602.const$3,"GetHandleInformation");
    }
    /**
     * {@snippet :
     * BOOL GetHandleInformation(HANDLE hObject, LPDWORD lpdwFlags);
     * }
     */
    public static int GetHandleInformation(MemorySegment hObject, MemorySegment lpdwFlags) {
        var mh$ = GetHandleInformation$MH();
        try {
            return (int)mh$.invokeExact(hObject, lpdwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetHandleInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$602.const$4,"SetHandleInformation");
    }
    /**
     * {@snippet :
     * BOOL SetHandleInformation(HANDLE hObject, DWORD dwMask, DWORD dwFlags);
     * }
     */
    public static int SetHandleInformation(MemorySegment hObject, int dwMask, int dwFlags) {
        var mh$ = SetHandleInformation$MH();
        try {
            return (int)mh$.invokeExact(hObject, dwMask, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RaiseException$MH() {
        return RuntimeHelper.requireNonNull(constants$603.const$2,"RaiseException");
    }
    /**
     * {@snippet :
     * void RaiseException(DWORD dwExceptionCode, DWORD dwExceptionFlags, DWORD nNumberOfArguments, const ULONG_PTR* lpArguments);
     * }
     */
    public static void RaiseException(int dwExceptionCode, int dwExceptionFlags, int nNumberOfArguments, MemorySegment lpArguments) {
        var mh$ = RaiseException$MH();
        try {
            mh$.invokeExact(dwExceptionCode, dwExceptionFlags, nNumberOfArguments, lpArguments);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnhandledExceptionFilter$MH() {
        return RuntimeHelper.requireNonNull(constants$603.const$3,"UnhandledExceptionFilter");
    }
    /**
     * {@snippet :
     * LONG UnhandledExceptionFilter(struct _EXCEPTION_POINTERS* ExceptionInfo);
     * }
     */
    public static int UnhandledExceptionFilter(MemorySegment ExceptionInfo) {
        var mh$ = UnhandledExceptionFilter$MH();
        try {
            return (int)mh$.invokeExact(ExceptionInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetUnhandledExceptionFilter$MH() {
        return RuntimeHelper.requireNonNull(constants$603.const$4,"SetUnhandledExceptionFilter");
    }
    /**
     * {@snippet :
     * LPTOP_LEVEL_EXCEPTION_FILTER SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter);
     * }
     */
    public static MemorySegment SetUnhandledExceptionFilter(MemorySegment lpTopLevelExceptionFilter) {
        var mh$ = SetUnhandledExceptionFilter$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpTopLevelExceptionFilter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLastError$MH() {
        return RuntimeHelper.requireNonNull(constants$603.const$5,"GetLastError");
    }
    /**
     * {@snippet :
     * DWORD GetLastError();
     * }
     */
    public static int GetLastError() {
        var mh$ = GetLastError$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetLastError$MH() {
        return RuntimeHelper.requireNonNull(constants$604.const$0,"SetLastError");
    }
    /**
     * {@snippet :
     * void SetLastError(DWORD dwErrCode);
     * }
     */
    public static void SetLastError(int dwErrCode) {
        var mh$ = SetLastError$MH();
        try {
            mh$.invokeExact(dwErrCode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetErrorMode$MH() {
        return RuntimeHelper.requireNonNull(constants$604.const$1,"GetErrorMode");
    }
    /**
     * {@snippet :
     * UINT GetErrorMode();
     * }
     */
    public static int GetErrorMode() {
        var mh$ = GetErrorMode$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetErrorMode$MH() {
        return RuntimeHelper.requireNonNull(constants$604.const$2,"SetErrorMode");
    }
    /**
     * {@snippet :
     * UINT SetErrorMode(UINT uMode);
     * }
     */
    public static int SetErrorMode(int uMode) {
        var mh$ = SetErrorMode$MH();
        try {
            return (int)mh$.invokeExact(uMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddVectoredExceptionHandler$MH() {
        return RuntimeHelper.requireNonNull(constants$604.const$4,"AddVectoredExceptionHandler");
    }
    /**
     * {@snippet :
     * PVOID AddVectoredExceptionHandler(ULONG First, PVECTORED_EXCEPTION_HANDLER Handler);
     * }
     */
    public static MemorySegment AddVectoredExceptionHandler(int First, MemorySegment Handler) {
        var mh$ = AddVectoredExceptionHandler$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(First, Handler);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RemoveVectoredExceptionHandler$MH() {
        return RuntimeHelper.requireNonNull(constants$604.const$5,"RemoveVectoredExceptionHandler");
    }
    /**
     * {@snippet :
     * ULONG RemoveVectoredExceptionHandler(PVOID Handle);
     * }
     */
    public static int RemoveVectoredExceptionHandler(MemorySegment Handle) {
        var mh$ = RemoveVectoredExceptionHandler$MH();
        try {
            return (int)mh$.invokeExact(Handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddVectoredContinueHandler$MH() {
        return RuntimeHelper.requireNonNull(constants$605.const$0,"AddVectoredContinueHandler");
    }
    /**
     * {@snippet :
     * PVOID AddVectoredContinueHandler(ULONG First, PVECTORED_EXCEPTION_HANDLER Handler);
     * }
     */
    public static MemorySegment AddVectoredContinueHandler(int First, MemorySegment Handler) {
        var mh$ = AddVectoredContinueHandler$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(First, Handler);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RemoveVectoredContinueHandler$MH() {
        return RuntimeHelper.requireNonNull(constants$605.const$1,"RemoveVectoredContinueHandler");
    }
    /**
     * {@snippet :
     * ULONG RemoveVectoredContinueHandler(PVOID Handle);
     * }
     */
    public static int RemoveVectoredContinueHandler(MemorySegment Handle) {
        var mh$ = RemoveVectoredContinueHandler$MH();
        try {
            return (int)mh$.invokeExact(Handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RaiseFailFastException$MH() {
        return RuntimeHelper.requireNonNull(constants$605.const$3,"RaiseFailFastException");
    }
    /**
     * {@snippet :
     * void RaiseFailFastException(PEXCEPTION_RECORD pExceptionRecord, PCONTEXT pContextRecord, DWORD dwFlags);
     * }
     */
    public static void RaiseFailFastException(MemorySegment pExceptionRecord, MemorySegment pContextRecord, int dwFlags) {
        var mh$ = RaiseFailFastException$MH();
        try {
            mh$.invokeExact(pExceptionRecord, pContextRecord, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FatalAppExitA$MH() {
        return RuntimeHelper.requireNonNull(constants$605.const$5,"FatalAppExitA");
    }
    /**
     * {@snippet :
     * void FatalAppExitA(UINT uAction, LPCSTR lpMessageText);
     * }
     */
    public static void FatalAppExitA(int uAction, MemorySegment lpMessageText) {
        var mh$ = FatalAppExitA$MH();
        try {
            mh$.invokeExact(uAction, lpMessageText);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FatalAppExitW$MH() {
        return RuntimeHelper.requireNonNull(constants$606.const$0,"FatalAppExitW");
    }
    /**
     * {@snippet :
     * void FatalAppExitW(UINT uAction, LPCWSTR lpMessageText);
     * }
     */
    public static void FatalAppExitW(int uAction, MemorySegment lpMessageText) {
        var mh$ = FatalAppExitW$MH();
        try {
            mh$.invokeExact(uAction, lpMessageText);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetThreadErrorMode$MH() {
        return RuntimeHelper.requireNonNull(constants$606.const$1,"GetThreadErrorMode");
    }
    /**
     * {@snippet :
     * DWORD GetThreadErrorMode();
     * }
     */
    public static int GetThreadErrorMode() {
        var mh$ = GetThreadErrorMode$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadErrorMode$MH() {
        return RuntimeHelper.requireNonNull(constants$606.const$2,"SetThreadErrorMode");
    }
    /**
     * {@snippet :
     * BOOL SetThreadErrorMode(DWORD dwNewMode, LPDWORD lpOldMode);
     * }
     */
    public static int SetThreadErrorMode(int dwNewMode, MemorySegment lpOldMode) {
        var mh$ = SetThreadErrorMode$MH();
        try {
            return (int)mh$.invokeExact(dwNewMode, lpOldMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TerminateProcessOnMemoryExhaustion$MH() {
        return RuntimeHelper.requireNonNull(constants$606.const$3,"TerminateProcessOnMemoryExhaustion");
    }
    /**
     * {@snippet :
     * void TerminateProcessOnMemoryExhaustion(SIZE_T FailedAllocationSize);
     * }
     */
    public static void TerminateProcessOnMemoryExhaustion(long FailedAllocationSize) {
        var mh$ = TerminateProcessOnMemoryExhaustion$MH();
        try {
            mh$.invokeExact(FailedAllocationSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FlsAlloc$MH() {
        return RuntimeHelper.requireNonNull(constants$606.const$4,"FlsAlloc");
    }
    /**
     * {@snippet :
     * DWORD FlsAlloc(PFLS_CALLBACK_FUNCTION lpCallback);
     * }
     */
    public static int FlsAlloc(MemorySegment lpCallback) {
        var mh$ = FlsAlloc$MH();
        try {
            return (int)mh$.invokeExact(lpCallback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FlsGetValue$MH() {
        return RuntimeHelper.requireNonNull(constants$606.const$5,"FlsGetValue");
    }
    /**
     * {@snippet :
     * PVOID FlsGetValue(DWORD dwFlsIndex);
     * }
     */
    public static MemorySegment FlsGetValue(int dwFlsIndex) {
        var mh$ = FlsGetValue$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(dwFlsIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FlsSetValue$MH() {
        return RuntimeHelper.requireNonNull(constants$607.const$0,"FlsSetValue");
    }
    /**
     * {@snippet :
     * BOOL FlsSetValue(DWORD dwFlsIndex, PVOID lpFlsData);
     * }
     */
    public static int FlsSetValue(int dwFlsIndex, MemorySegment lpFlsData) {
        var mh$ = FlsSetValue$MH();
        try {
            return (int)mh$.invokeExact(dwFlsIndex, lpFlsData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FlsFree$MH() {
        return RuntimeHelper.requireNonNull(constants$607.const$1,"FlsFree");
    }
    /**
     * {@snippet :
     * BOOL FlsFree(DWORD dwFlsIndex);
     * }
     */
    public static int FlsFree(int dwFlsIndex) {
        var mh$ = FlsFree$MH();
        try {
            return (int)mh$.invokeExact(dwFlsIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsThreadAFiber$MH() {
        return RuntimeHelper.requireNonNull(constants$607.const$2,"IsThreadAFiber");
    }
    /**
     * {@snippet :
     * BOOL IsThreadAFiber();
     * }
     */
    public static int IsThreadAFiber() {
        var mh$ = IsThreadAFiber$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreatePipe$MH() {
        return RuntimeHelper.requireNonNull(constants$607.const$4,"CreatePipe");
    }
    /**
     * {@snippet :
     * BOOL CreatePipe(PHANDLE hReadPipe, PHANDLE hWritePipe, LPSECURITY_ATTRIBUTES lpPipeAttributes, DWORD nSize);
     * }
     */
    public static int CreatePipe(MemorySegment hReadPipe, MemorySegment hWritePipe, MemorySegment lpPipeAttributes, int nSize) {
        var mh$ = CreatePipe$MH();
        try {
            return (int)mh$.invokeExact(hReadPipe, hWritePipe, lpPipeAttributes, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ConnectNamedPipe$MH() {
        return RuntimeHelper.requireNonNull(constants$607.const$5,"ConnectNamedPipe");
    }
    /**
     * {@snippet :
     * BOOL ConnectNamedPipe(HANDLE hNamedPipe, LPOVERLAPPED lpOverlapped);
     * }
     */
    public static int ConnectNamedPipe(MemorySegment hNamedPipe, MemorySegment lpOverlapped) {
        var mh$ = ConnectNamedPipe$MH();
        try {
            return (int)mh$.invokeExact(hNamedPipe, lpOverlapped);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DisconnectNamedPipe$MH() {
        return RuntimeHelper.requireNonNull(constants$608.const$0,"DisconnectNamedPipe");
    }
    /**
     * {@snippet :
     * BOOL DisconnectNamedPipe(HANDLE hNamedPipe);
     * }
     */
    public static int DisconnectNamedPipe(MemorySegment hNamedPipe) {
        var mh$ = DisconnectNamedPipe$MH();
        try {
            return (int)mh$.invokeExact(hNamedPipe);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetNamedPipeHandleState$MH() {
        return RuntimeHelper.requireNonNull(constants$608.const$1,"SetNamedPipeHandleState");
    }
    /**
     * {@snippet :
     * BOOL SetNamedPipeHandleState(HANDLE hNamedPipe, LPDWORD lpMode, LPDWORD lpMaxCollectionCount, LPDWORD lpCollectDataTimeout);
     * }
     */
    public static int SetNamedPipeHandleState(MemorySegment hNamedPipe, MemorySegment lpMode, MemorySegment lpMaxCollectionCount, MemorySegment lpCollectDataTimeout) {
        var mh$ = SetNamedPipeHandleState$MH();
        try {
            return (int)mh$.invokeExact(hNamedPipe, lpMode, lpMaxCollectionCount, lpCollectDataTimeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PeekNamedPipe$MH() {
        return RuntimeHelper.requireNonNull(constants$608.const$3,"PeekNamedPipe");
    }
    /**
     * {@snippet :
     * BOOL PeekNamedPipe(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage);
     * }
     */
    public static int PeekNamedPipe(MemorySegment hNamedPipe, MemorySegment lpBuffer, int nBufferSize, MemorySegment lpBytesRead, MemorySegment lpTotalBytesAvail, MemorySegment lpBytesLeftThisMessage) {
        var mh$ = PeekNamedPipe$MH();
        try {
            return (int)mh$.invokeExact(hNamedPipe, lpBuffer, nBufferSize, lpBytesRead, lpTotalBytesAvail, lpBytesLeftThisMessage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TransactNamedPipe$MH() {
        return RuntimeHelper.requireNonNull(constants$608.const$5,"TransactNamedPipe");
    }
    /**
     * {@snippet :
     * BOOL TransactNamedPipe(HANDLE hNamedPipe, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesRead, LPOVERLAPPED lpOverlapped);
     * }
     */
    public static int TransactNamedPipe(MemorySegment hNamedPipe, MemorySegment lpInBuffer, int nInBufferSize, MemorySegment lpOutBuffer, int nOutBufferSize, MemorySegment lpBytesRead, MemorySegment lpOverlapped) {
        var mh$ = TransactNamedPipe$MH();
        try {
            return (int)mh$.invokeExact(hNamedPipe, lpInBuffer, nInBufferSize, lpOutBuffer, nOutBufferSize, lpBytesRead, lpOverlapped);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateNamedPipeW$MH() {
        return RuntimeHelper.requireNonNull(constants$609.const$1,"CreateNamedPipeW");
    }
    /**
     * {@snippet :
     * HANDLE CreateNamedPipeW(LPCWSTR lpName, DWORD dwOpenMode, DWORD dwPipeMode, DWORD nMaxInstances, DWORD nOutBufferSize, DWORD nInBufferSize, DWORD nDefaultTimeOut, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
     * }
     */
    public static MemorySegment CreateNamedPipeW(MemorySegment lpName, int dwOpenMode, int dwPipeMode, int nMaxInstances, int nOutBufferSize, int nInBufferSize, int nDefaultTimeOut, MemorySegment lpSecurityAttributes) {
        var mh$ = CreateNamedPipeW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpName, dwOpenMode, dwPipeMode, nMaxInstances, nOutBufferSize, nInBufferSize, nDefaultTimeOut, lpSecurityAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WaitNamedPipeW$MH() {
        return RuntimeHelper.requireNonNull(constants$609.const$2,"WaitNamedPipeW");
    }
    /**
     * {@snippet :
     * BOOL WaitNamedPipeW(LPCWSTR lpNamedPipeName, DWORD nTimeOut);
     * }
     */
    public static int WaitNamedPipeW(MemorySegment lpNamedPipeName, int nTimeOut) {
        var mh$ = WaitNamedPipeW$MH();
        try {
            return (int)mh$.invokeExact(lpNamedPipeName, nTimeOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNamedPipeClientComputerNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$609.const$3,"GetNamedPipeClientComputerNameW");
    }
    /**
     * {@snippet :
     * BOOL GetNamedPipeClientComputerNameW(HANDLE Pipe, LPWSTR ClientComputerName, ULONG ClientComputerNameLength);
     * }
     */
    public static int GetNamedPipeClientComputerNameW(MemorySegment Pipe, MemorySegment ClientComputerName, int ClientComputerNameLength) {
        var mh$ = GetNamedPipeClientComputerNameW$MH();
        try {
            return (int)mh$.invokeExact(Pipe, ClientComputerName, ClientComputerNameLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImpersonateNamedPipeClient$MH() {
        return RuntimeHelper.requireNonNull(constants$609.const$4,"ImpersonateNamedPipeClient");
    }
    /**
     * {@snippet :
     * BOOL ImpersonateNamedPipeClient(HANDLE hNamedPipe);
     * }
     */
    public static int ImpersonateNamedPipeClient(MemorySegment hNamedPipe) {
        var mh$ = ImpersonateNamedPipeClient$MH();
        try {
            return (int)mh$.invokeExact(hNamedPipe);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNamedPipeInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$609.const$5,"GetNamedPipeInfo");
    }
    /**
     * {@snippet :
     * BOOL GetNamedPipeInfo(HANDLE hNamedPipe, LPDWORD lpFlags, LPDWORD lpOutBufferSize, LPDWORD lpInBufferSize, LPDWORD lpMaxInstances);
     * }
     */
    public static int GetNamedPipeInfo(MemorySegment hNamedPipe, MemorySegment lpFlags, MemorySegment lpOutBufferSize, MemorySegment lpInBufferSize, MemorySegment lpMaxInstances) {
        var mh$ = GetNamedPipeInfo$MH();
        try {
            return (int)mh$.invokeExact(hNamedPipe, lpFlags, lpOutBufferSize, lpInBufferSize, lpMaxInstances);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNamedPipeHandleStateW$MH() {
        return RuntimeHelper.requireNonNull(constants$610.const$1,"GetNamedPipeHandleStateW");
    }
    /**
     * {@snippet :
     * BOOL GetNamedPipeHandleStateW(HANDLE hNamedPipe, LPDWORD lpState, LPDWORD lpCurInstances, LPDWORD lpMaxCollectionCount, LPDWORD lpCollectDataTimeout, LPWSTR lpUserName, DWORD nMaxUserNameSize);
     * }
     */
    public static int GetNamedPipeHandleStateW(MemorySegment hNamedPipe, MemorySegment lpState, MemorySegment lpCurInstances, MemorySegment lpMaxCollectionCount, MemorySegment lpCollectDataTimeout, MemorySegment lpUserName, int nMaxUserNameSize) {
        var mh$ = GetNamedPipeHandleStateW$MH();
        try {
            return (int)mh$.invokeExact(hNamedPipe, lpState, lpCurInstances, lpMaxCollectionCount, lpCollectDataTimeout, lpUserName, nMaxUserNameSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CallNamedPipeW$MH() {
        return RuntimeHelper.requireNonNull(constants$610.const$3,"CallNamedPipeW");
    }
    /**
     * {@snippet :
     * BOOL CallNamedPipeW(LPCWSTR lpNamedPipeName, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesRead, DWORD nTimeOut);
     * }
     */
    public static int CallNamedPipeW(MemorySegment lpNamedPipeName, MemorySegment lpInBuffer, int nInBufferSize, MemorySegment lpOutBuffer, int nOutBufferSize, MemorySegment lpBytesRead, int nTimeOut) {
        var mh$ = CallNamedPipeW$MH();
        try {
            return (int)mh$.invokeExact(lpNamedPipeName, lpInBuffer, nInBufferSize, lpOutBuffer, nOutBufferSize, lpBytesRead, nTimeOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryPerformanceCounter$MH() {
        return RuntimeHelper.requireNonNull(constants$610.const$4,"QueryPerformanceCounter");
    }
    /**
     * {@snippet :
     * BOOL QueryPerformanceCounter(LARGE_INTEGER* lpPerformanceCount);
     * }
     */
    public static int QueryPerformanceCounter(MemorySegment lpPerformanceCount) {
        var mh$ = QueryPerformanceCounter$MH();
        try {
            return (int)mh$.invokeExact(lpPerformanceCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryPerformanceFrequency$MH() {
        return RuntimeHelper.requireNonNull(constants$610.const$5,"QueryPerformanceFrequency");
    }
    /**
     * {@snippet :
     * BOOL QueryPerformanceFrequency(LARGE_INTEGER* lpFrequency);
     * }
     */
    public static int QueryPerformanceFrequency(MemorySegment lpFrequency) {
        var mh$ = QueryPerformanceFrequency$MH();
        try {
            return (int)mh$.invokeExact(lpFrequency);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _HEAP_SUMMARY* PHEAP_SUMMARY;
     * }
     */
    public static final AddressLayout PHEAP_SUMMARY = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _HEAP_SUMMARY* LPHEAP_SUMMARY;
     * }
     */
    public static final AddressLayout LPHEAP_SUMMARY = RuntimeHelper.POINTER;
    public static MethodHandle HeapCreate$MH() {
        return RuntimeHelper.requireNonNull(constants$612.const$1,"HeapCreate");
    }
    /**
     * {@snippet :
     * HANDLE HeapCreate(DWORD flOptions, SIZE_T dwInitialSize, SIZE_T dwMaximumSize);
     * }
     */
    public static MemorySegment HeapCreate(int flOptions, long dwInitialSize, long dwMaximumSize) {
        var mh$ = HeapCreate$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(flOptions, dwInitialSize, dwMaximumSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HeapDestroy$MH() {
        return RuntimeHelper.requireNonNull(constants$612.const$2,"HeapDestroy");
    }
    /**
     * {@snippet :
     * BOOL HeapDestroy(HANDLE hHeap);
     * }
     */
    public static int HeapDestroy(MemorySegment hHeap) {
        var mh$ = HeapDestroy$MH();
        try {
            return (int)mh$.invokeExact(hHeap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HeapAlloc$MH() {
        return RuntimeHelper.requireNonNull(constants$612.const$3,"HeapAlloc");
    }
    /**
     * {@snippet :
     * LPVOID HeapAlloc(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes);
     * }
     */
    public static MemorySegment HeapAlloc(MemorySegment hHeap, int dwFlags, long dwBytes) {
        var mh$ = HeapAlloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hHeap, dwFlags, dwBytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HeapReAlloc$MH() {
        return RuntimeHelper.requireNonNull(constants$612.const$5,"HeapReAlloc");
    }
    /**
     * {@snippet :
     * LPVOID HeapReAlloc(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem, SIZE_T dwBytes);
     * }
     */
    public static MemorySegment HeapReAlloc(MemorySegment hHeap, int dwFlags, MemorySegment lpMem, long dwBytes) {
        var mh$ = HeapReAlloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hHeap, dwFlags, lpMem, dwBytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HeapFree$MH() {
        return RuntimeHelper.requireNonNull(constants$613.const$0,"HeapFree");
    }
    /**
     * {@snippet :
     * BOOL HeapFree(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem);
     * }
     */
    public static int HeapFree(MemorySegment hHeap, int dwFlags, MemorySegment lpMem) {
        var mh$ = HeapFree$MH();
        try {
            return (int)mh$.invokeExact(hHeap, dwFlags, lpMem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HeapSize$MH() {
        return RuntimeHelper.requireNonNull(constants$613.const$2,"HeapSize");
    }
    /**
     * {@snippet :
     * SIZE_T HeapSize(HANDLE hHeap, DWORD dwFlags, LPCVOID lpMem);
     * }
     */
    public static long HeapSize(MemorySegment hHeap, int dwFlags, MemorySegment lpMem) {
        var mh$ = HeapSize$MH();
        try {
            return (long)mh$.invokeExact(hHeap, dwFlags, lpMem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcessHeap$MH() {
        return RuntimeHelper.requireNonNull(constants$613.const$3,"GetProcessHeap");
    }
    /**
     * {@snippet :
     * HANDLE GetProcessHeap();
     * }
     */
    public static MemorySegment GetProcessHeap() {
        var mh$ = GetProcessHeap$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HeapCompact$MH() {
        return RuntimeHelper.requireNonNull(constants$613.const$5,"HeapCompact");
    }
    /**
     * {@snippet :
     * SIZE_T HeapCompact(HANDLE hHeap, DWORD dwFlags);
     * }
     */
    public static long HeapCompact(MemorySegment hHeap, int dwFlags) {
        var mh$ = HeapCompact$MH();
        try {
            return (long)mh$.invokeExact(hHeap, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HeapSetInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$614.const$1,"HeapSetInformation");
    }
    /**
     * {@snippet :
     * BOOL HeapSetInformation(HANDLE HeapHandle, HEAP_INFORMATION_CLASS HeapInformationClass, PVOID HeapInformation, SIZE_T HeapInformationLength);
     * }
     */
    public static int HeapSetInformation(MemorySegment HeapHandle, int HeapInformationClass, MemorySegment HeapInformation, long HeapInformationLength) {
        var mh$ = HeapSetInformation$MH();
        try {
            return (int)mh$.invokeExact(HeapHandle, HeapInformationClass, HeapInformation, HeapInformationLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HeapValidate$MH() {
        return RuntimeHelper.requireNonNull(constants$614.const$2,"HeapValidate");
    }
    /**
     * {@snippet :
     * BOOL HeapValidate(HANDLE hHeap, DWORD dwFlags, LPCVOID lpMem);
     * }
     */
    public static int HeapValidate(MemorySegment hHeap, int dwFlags, MemorySegment lpMem) {
        var mh$ = HeapValidate$MH();
        try {
            return (int)mh$.invokeExact(hHeap, dwFlags, lpMem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HeapSummary$MH() {
        return RuntimeHelper.requireNonNull(constants$614.const$3,"HeapSummary");
    }
    /**
     * {@snippet :
     * BOOL HeapSummary(HANDLE hHeap, DWORD dwFlags, LPHEAP_SUMMARY lpSummary);
     * }
     */
    public static int HeapSummary(MemorySegment hHeap, int dwFlags, MemorySegment lpSummary) {
        var mh$ = HeapSummary$MH();
        try {
            return (int)mh$.invokeExact(hHeap, dwFlags, lpSummary);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcessHeaps$MH() {
        return RuntimeHelper.requireNonNull(constants$614.const$4,"GetProcessHeaps");
    }
    /**
     * {@snippet :
     * DWORD GetProcessHeaps(DWORD NumberOfHeaps, PHANDLE ProcessHeaps);
     * }
     */
    public static int GetProcessHeaps(int NumberOfHeaps, MemorySegment ProcessHeaps) {
        var mh$ = GetProcessHeaps$MH();
        try {
            return (int)mh$.invokeExact(NumberOfHeaps, ProcessHeaps);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HeapLock$MH() {
        return RuntimeHelper.requireNonNull(constants$614.const$5,"HeapLock");
    }
    /**
     * {@snippet :
     * BOOL HeapLock(HANDLE hHeap);
     * }
     */
    public static int HeapLock(MemorySegment hHeap) {
        var mh$ = HeapLock$MH();
        try {
            return (int)mh$.invokeExact(hHeap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HeapUnlock$MH() {
        return RuntimeHelper.requireNonNull(constants$615.const$0,"HeapUnlock");
    }
    /**
     * {@snippet :
     * BOOL HeapUnlock(HANDLE hHeap);
     * }
     */
    public static int HeapUnlock(MemorySegment hHeap) {
        var mh$ = HeapUnlock$MH();
        try {
            return (int)mh$.invokeExact(hHeap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HeapWalk$MH() {
        return RuntimeHelper.requireNonNull(constants$615.const$1,"HeapWalk");
    }
    /**
     * {@snippet :
     * BOOL HeapWalk(HANDLE hHeap, LPPROCESS_HEAP_ENTRY lpEntry);
     * }
     */
    public static int HeapWalk(MemorySegment hHeap, MemorySegment lpEntry) {
        var mh$ = HeapWalk$MH();
        try {
            return (int)mh$.invokeExact(hHeap, lpEntry);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HeapQueryInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$615.const$3,"HeapQueryInformation");
    }
    /**
     * {@snippet :
     * BOOL HeapQueryInformation(HANDLE HeapHandle, HEAP_INFORMATION_CLASS HeapInformationClass, PVOID HeapInformation, SIZE_T HeapInformationLength, PSIZE_T ReturnLength);
     * }
     */
    public static int HeapQueryInformation(MemorySegment HeapHandle, int HeapInformationClass, MemorySegment HeapInformation, long HeapInformationLength, MemorySegment ReturnLength) {
        var mh$ = HeapQueryInformation$MH();
        try {
            return (int)mh$.invokeExact(HeapHandle, HeapInformationClass, HeapInformation, HeapInformationLength, ReturnLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateIoCompletionPort$MH() {
        return RuntimeHelper.requireNonNull(constants$615.const$5,"CreateIoCompletionPort");
    }
    /**
     * {@snippet :
     * HANDLE CreateIoCompletionPort(HANDLE FileHandle, HANDLE ExistingCompletionPort, ULONG_PTR CompletionKey, DWORD NumberOfConcurrentThreads);
     * }
     */
    public static MemorySegment CreateIoCompletionPort(MemorySegment FileHandle, MemorySegment ExistingCompletionPort, long CompletionKey, int NumberOfConcurrentThreads) {
        var mh$ = CreateIoCompletionPort$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(FileHandle, ExistingCompletionPort, CompletionKey, NumberOfConcurrentThreads);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetQueuedCompletionStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$616.const$1,"GetQueuedCompletionStatus");
    }
    /**
     * {@snippet :
     * BOOL GetQueuedCompletionStatus(HANDLE CompletionPort, LPDWORD lpNumberOfBytesTransferred, PULONG_PTR lpCompletionKey, LPOVERLAPPED* lpOverlapped, DWORD dwMilliseconds);
     * }
     */
    public static int GetQueuedCompletionStatus(MemorySegment CompletionPort, MemorySegment lpNumberOfBytesTransferred, MemorySegment lpCompletionKey, MemorySegment lpOverlapped, int dwMilliseconds) {
        var mh$ = GetQueuedCompletionStatus$MH();
        try {
            return (int)mh$.invokeExact(CompletionPort, lpNumberOfBytesTransferred, lpCompletionKey, lpOverlapped, dwMilliseconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetQueuedCompletionStatusEx$MH() {
        return RuntimeHelper.requireNonNull(constants$616.const$3,"GetQueuedCompletionStatusEx");
    }
    /**
     * {@snippet :
     * BOOL GetQueuedCompletionStatusEx(HANDLE CompletionPort, LPOVERLAPPED_ENTRY lpCompletionPortEntries, ULONG ulCount, PULONG ulNumEntriesRemoved, DWORD dwMilliseconds, BOOL fAlertable);
     * }
     */
    public static int GetQueuedCompletionStatusEx(MemorySegment CompletionPort, MemorySegment lpCompletionPortEntries, int ulCount, MemorySegment ulNumEntriesRemoved, int dwMilliseconds, int fAlertable) {
        var mh$ = GetQueuedCompletionStatusEx$MH();
        try {
            return (int)mh$.invokeExact(CompletionPort, lpCompletionPortEntries, ulCount, ulNumEntriesRemoved, dwMilliseconds, fAlertable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PostQueuedCompletionStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$616.const$5,"PostQueuedCompletionStatus");
    }
    /**
     * {@snippet :
     * BOOL PostQueuedCompletionStatus(HANDLE CompletionPort, DWORD dwNumberOfBytesTransferred, ULONG_PTR dwCompletionKey, LPOVERLAPPED lpOverlapped);
     * }
     */
    public static int PostQueuedCompletionStatus(MemorySegment CompletionPort, int dwNumberOfBytesTransferred, long dwCompletionKey, MemorySegment lpOverlapped) {
        var mh$ = PostQueuedCompletionStatus$MH();
        try {
            return (int)mh$.invokeExact(CompletionPort, dwNumberOfBytesTransferred, dwCompletionKey, lpOverlapped);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeviceIoControl$MH() {
        return RuntimeHelper.requireNonNull(constants$617.const$1,"DeviceIoControl");
    }
    /**
     * {@snippet :
     * BOOL DeviceIoControl(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped);
     * }
     */
    public static int DeviceIoControl(MemorySegment hDevice, int dwIoControlCode, MemorySegment lpInBuffer, int nInBufferSize, MemorySegment lpOutBuffer, int nOutBufferSize, MemorySegment lpBytesReturned, MemorySegment lpOverlapped) {
        var mh$ = DeviceIoControl$MH();
        try {
            return (int)mh$.invokeExact(hDevice, dwIoControlCode, lpInBuffer, nInBufferSize, lpOutBuffer, nOutBufferSize, lpBytesReturned, lpOverlapped);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetOverlappedResult$MH() {
        return RuntimeHelper.requireNonNull(constants$617.const$2,"GetOverlappedResult");
    }
    /**
     * {@snippet :
     * BOOL GetOverlappedResult(HANDLE hFile, LPOVERLAPPED lpOverlapped, LPDWORD lpNumberOfBytesTransferred, BOOL bWait);
     * }
     */
    public static int GetOverlappedResult(MemorySegment hFile, MemorySegment lpOverlapped, MemorySegment lpNumberOfBytesTransferred, int bWait) {
        var mh$ = GetOverlappedResult$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpOverlapped, lpNumberOfBytesTransferred, bWait);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CancelIoEx$MH() {
        return RuntimeHelper.requireNonNull(constants$617.const$3,"CancelIoEx");
    }
    /**
     * {@snippet :
     * BOOL CancelIoEx(HANDLE hFile, LPOVERLAPPED lpOverlapped);
     * }
     */
    public static int CancelIoEx(MemorySegment hFile, MemorySegment lpOverlapped) {
        var mh$ = CancelIoEx$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpOverlapped);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CancelIo$MH() {
        return RuntimeHelper.requireNonNull(constants$617.const$4,"CancelIo");
    }
    /**
     * {@snippet :
     * BOOL CancelIo(HANDLE hFile);
     * }
     */
    public static int CancelIo(MemorySegment hFile) {
        var mh$ = CancelIo$MH();
        try {
            return (int)mh$.invokeExact(hFile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetOverlappedResultEx$MH() {
        return RuntimeHelper.requireNonNull(constants$617.const$6,"GetOverlappedResultEx");
    }
    /**
     * {@snippet :
     * BOOL GetOverlappedResultEx(HANDLE hFile, LPOVERLAPPED lpOverlapped, LPDWORD lpNumberOfBytesTransferred, DWORD dwMilliseconds, BOOL bAlertable);
     * }
     */
    public static int GetOverlappedResultEx(MemorySegment hFile, MemorySegment lpOverlapped, MemorySegment lpNumberOfBytesTransferred, int dwMilliseconds, int bAlertable) {
        var mh$ = GetOverlappedResultEx$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpOverlapped, lpNumberOfBytesTransferred, dwMilliseconds, bAlertable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CancelSynchronousIo$MH() {
        return RuntimeHelper.requireNonNull(constants$618.const$0,"CancelSynchronousIo");
    }
    /**
     * {@snippet :
     * BOOL CancelSynchronousIo(HANDLE hThread);
     * }
     */
    public static int CancelSynchronousIo(MemorySegment hThread) {
        var mh$ = CancelSynchronousIo$MH();
        try {
            return (int)mh$.invokeExact(hThread);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _RTL_SRWLOCK* PSRWLOCK;
     * }
     */
    public static final AddressLayout PSRWLOCK = RuntimeHelper.POINTER;
    public static MethodHandle InitializeSRWLock$MH() {
        return RuntimeHelper.requireNonNull(constants$618.const$1,"InitializeSRWLock");
    }
    /**
     * {@snippet :
     * void InitializeSRWLock(PSRWLOCK SRWLock);
     * }
     */
    public static void InitializeSRWLock(MemorySegment SRWLock) {
        var mh$ = InitializeSRWLock$MH();
        try {
            mh$.invokeExact(SRWLock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReleaseSRWLockExclusive$MH() {
        return RuntimeHelper.requireNonNull(constants$618.const$2,"ReleaseSRWLockExclusive");
    }
    /**
     * {@snippet :
     * void ReleaseSRWLockExclusive(PSRWLOCK SRWLock);
     * }
     */
    public static void ReleaseSRWLockExclusive(MemorySegment SRWLock) {
        var mh$ = ReleaseSRWLockExclusive$MH();
        try {
            mh$.invokeExact(SRWLock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReleaseSRWLockShared$MH() {
        return RuntimeHelper.requireNonNull(constants$618.const$3,"ReleaseSRWLockShared");
    }
    /**
     * {@snippet :
     * void ReleaseSRWLockShared(PSRWLOCK SRWLock);
     * }
     */
    public static void ReleaseSRWLockShared(MemorySegment SRWLock) {
        var mh$ = ReleaseSRWLockShared$MH();
        try {
            mh$.invokeExact(SRWLock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AcquireSRWLockExclusive$MH() {
        return RuntimeHelper.requireNonNull(constants$618.const$4,"AcquireSRWLockExclusive");
    }
    /**
     * {@snippet :
     * void AcquireSRWLockExclusive(PSRWLOCK SRWLock);
     * }
     */
    public static void AcquireSRWLockExclusive(MemorySegment SRWLock) {
        var mh$ = AcquireSRWLockExclusive$MH();
        try {
            mh$.invokeExact(SRWLock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AcquireSRWLockShared$MH() {
        return RuntimeHelper.requireNonNull(constants$618.const$5,"AcquireSRWLockShared");
    }
    /**
     * {@snippet :
     * void AcquireSRWLockShared(PSRWLOCK SRWLock);
     * }
     */
    public static void AcquireSRWLockShared(MemorySegment SRWLock) {
        var mh$ = AcquireSRWLockShared$MH();
        try {
            mh$.invokeExact(SRWLock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TryAcquireSRWLockExclusive$MH() {
        return RuntimeHelper.requireNonNull(constants$619.const$0,"TryAcquireSRWLockExclusive");
    }
    /**
     * {@snippet :
     * BOOLEAN TryAcquireSRWLockExclusive(PSRWLOCK SRWLock);
     * }
     */
    public static byte TryAcquireSRWLockExclusive(MemorySegment SRWLock) {
        var mh$ = TryAcquireSRWLockExclusive$MH();
        try {
            return (byte)mh$.invokeExact(SRWLock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TryAcquireSRWLockShared$MH() {
        return RuntimeHelper.requireNonNull(constants$619.const$1,"TryAcquireSRWLockShared");
    }
    /**
     * {@snippet :
     * BOOLEAN TryAcquireSRWLockShared(PSRWLOCK SRWLock);
     * }
     */
    public static byte TryAcquireSRWLockShared(MemorySegment SRWLock) {
        var mh$ = TryAcquireSRWLockShared$MH();
        try {
            return (byte)mh$.invokeExact(SRWLock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitializeCriticalSection$MH() {
        return RuntimeHelper.requireNonNull(constants$619.const$2,"InitializeCriticalSection");
    }
    /**
     * {@snippet :
     * void InitializeCriticalSection(LPCRITICAL_SECTION lpCriticalSection);
     * }
     */
    public static void InitializeCriticalSection(MemorySegment lpCriticalSection) {
        var mh$ = InitializeCriticalSection$MH();
        try {
            mh$.invokeExact(lpCriticalSection);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnterCriticalSection$MH() {
        return RuntimeHelper.requireNonNull(constants$619.const$3,"EnterCriticalSection");
    }
    /**
     * {@snippet :
     * void EnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection);
     * }
     */
    public static void EnterCriticalSection(MemorySegment lpCriticalSection) {
        var mh$ = EnterCriticalSection$MH();
        try {
            mh$.invokeExact(lpCriticalSection);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LeaveCriticalSection$MH() {
        return RuntimeHelper.requireNonNull(constants$619.const$4,"LeaveCriticalSection");
    }
    /**
     * {@snippet :
     * void LeaveCriticalSection(LPCRITICAL_SECTION lpCriticalSection);
     * }
     */
    public static void LeaveCriticalSection(MemorySegment lpCriticalSection) {
        var mh$ = LeaveCriticalSection$MH();
        try {
            mh$.invokeExact(lpCriticalSection);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitializeCriticalSectionAndSpinCount$MH() {
        return RuntimeHelper.requireNonNull(constants$619.const$5,"InitializeCriticalSectionAndSpinCount");
    }
    /**
     * {@snippet :
     * BOOL InitializeCriticalSectionAndSpinCount(LPCRITICAL_SECTION lpCriticalSection, DWORD dwSpinCount);
     * }
     */
    public static int InitializeCriticalSectionAndSpinCount(MemorySegment lpCriticalSection, int dwSpinCount) {
        var mh$ = InitializeCriticalSectionAndSpinCount$MH();
        try {
            return (int)mh$.invokeExact(lpCriticalSection, dwSpinCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitializeCriticalSectionEx$MH() {
        return RuntimeHelper.requireNonNull(constants$620.const$0,"InitializeCriticalSectionEx");
    }
    /**
     * {@snippet :
     * BOOL InitializeCriticalSectionEx(LPCRITICAL_SECTION lpCriticalSection, DWORD dwSpinCount, DWORD Flags);
     * }
     */
    public static int InitializeCriticalSectionEx(MemorySegment lpCriticalSection, int dwSpinCount, int Flags) {
        var mh$ = InitializeCriticalSectionEx$MH();
        try {
            return (int)mh$.invokeExact(lpCriticalSection, dwSpinCount, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetCriticalSectionSpinCount$MH() {
        return RuntimeHelper.requireNonNull(constants$620.const$1,"SetCriticalSectionSpinCount");
    }
    /**
     * {@snippet :
     * DWORD SetCriticalSectionSpinCount(LPCRITICAL_SECTION lpCriticalSection, DWORD dwSpinCount);
     * }
     */
    public static int SetCriticalSectionSpinCount(MemorySegment lpCriticalSection, int dwSpinCount) {
        var mh$ = SetCriticalSectionSpinCount$MH();
        try {
            return (int)mh$.invokeExact(lpCriticalSection, dwSpinCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TryEnterCriticalSection$MH() {
        return RuntimeHelper.requireNonNull(constants$620.const$2,"TryEnterCriticalSection");
    }
    /**
     * {@snippet :
     * BOOL TryEnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection);
     * }
     */
    public static int TryEnterCriticalSection(MemorySegment lpCriticalSection) {
        var mh$ = TryEnterCriticalSection$MH();
        try {
            return (int)mh$.invokeExact(lpCriticalSection);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteCriticalSection$MH() {
        return RuntimeHelper.requireNonNull(constants$620.const$3,"DeleteCriticalSection");
    }
    /**
     * {@snippet :
     * void DeleteCriticalSection(LPCRITICAL_SECTION lpCriticalSection);
     * }
     */
    public static void DeleteCriticalSection(MemorySegment lpCriticalSection) {
        var mh$ = DeleteCriticalSection$MH();
        try {
            mh$.invokeExact(lpCriticalSection);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef union _RTL_RUN_ONCE* PINIT_ONCE;
     * }
     */
    public static final AddressLayout PINIT_ONCE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef union _RTL_RUN_ONCE* LPINIT_ONCE;
     * }
     */
    public static final AddressLayout LPINIT_ONCE = RuntimeHelper.POINTER;
    public static MethodHandle InitOnceInitialize$MH() {
        return RuntimeHelper.requireNonNull(constants$621.const$0,"InitOnceInitialize");
    }
    /**
     * {@snippet :
     * void InitOnceInitialize(PINIT_ONCE InitOnce);
     * }
     */
    public static void InitOnceInitialize(MemorySegment InitOnce) {
        var mh$ = InitOnceInitialize$MH();
        try {
            mh$.invokeExact(InitOnce);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitOnceExecuteOnce$MH() {
        return RuntimeHelper.requireNonNull(constants$621.const$1,"InitOnceExecuteOnce");
    }
    /**
     * {@snippet :
     * BOOL InitOnceExecuteOnce(PINIT_ONCE InitOnce, PINIT_ONCE_FN InitFn, PVOID Parameter, LPVOID* Context);
     * }
     */
    public static int InitOnceExecuteOnce(MemorySegment InitOnce, MemorySegment InitFn, MemorySegment Parameter, MemorySegment Context) {
        var mh$ = InitOnceExecuteOnce$MH();
        try {
            return (int)mh$.invokeExact(InitOnce, InitFn, Parameter, Context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitOnceBeginInitialize$MH() {
        return RuntimeHelper.requireNonNull(constants$621.const$2,"InitOnceBeginInitialize");
    }
    /**
     * {@snippet :
     * BOOL InitOnceBeginInitialize(LPINIT_ONCE lpInitOnce, DWORD dwFlags, PBOOL fPending, LPVOID* lpContext);
     * }
     */
    public static int InitOnceBeginInitialize(MemorySegment lpInitOnce, int dwFlags, MemorySegment fPending, MemorySegment lpContext) {
        var mh$ = InitOnceBeginInitialize$MH();
        try {
            return (int)mh$.invokeExact(lpInitOnce, dwFlags, fPending, lpContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitOnceComplete$MH() {
        return RuntimeHelper.requireNonNull(constants$621.const$3,"InitOnceComplete");
    }
    /**
     * {@snippet :
     * BOOL InitOnceComplete(LPINIT_ONCE lpInitOnce, DWORD dwFlags, LPVOID lpContext);
     * }
     */
    public static int InitOnceComplete(MemorySegment lpInitOnce, int dwFlags, MemorySegment lpContext) {
        var mh$ = InitOnceComplete$MH();
        try {
            return (int)mh$.invokeExact(lpInitOnce, dwFlags, lpContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _RTL_CONDITION_VARIABLE* PCONDITION_VARIABLE;
     * }
     */
    public static final AddressLayout PCONDITION_VARIABLE = RuntimeHelper.POINTER;
    public static MethodHandle InitializeConditionVariable$MH() {
        return RuntimeHelper.requireNonNull(constants$621.const$4,"InitializeConditionVariable");
    }
    /**
     * {@snippet :
     * void InitializeConditionVariable(PCONDITION_VARIABLE ConditionVariable);
     * }
     */
    public static void InitializeConditionVariable(MemorySegment ConditionVariable) {
        var mh$ = InitializeConditionVariable$MH();
        try {
            mh$.invokeExact(ConditionVariable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WakeConditionVariable$MH() {
        return RuntimeHelper.requireNonNull(constants$621.const$5,"WakeConditionVariable");
    }
    /**
     * {@snippet :
     * void WakeConditionVariable(PCONDITION_VARIABLE ConditionVariable);
     * }
     */
    public static void WakeConditionVariable(MemorySegment ConditionVariable) {
        var mh$ = WakeConditionVariable$MH();
        try {
            mh$.invokeExact(ConditionVariable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WakeAllConditionVariable$MH() {
        return RuntimeHelper.requireNonNull(constants$622.const$0,"WakeAllConditionVariable");
    }
    /**
     * {@snippet :
     * void WakeAllConditionVariable(PCONDITION_VARIABLE ConditionVariable);
     * }
     */
    public static void WakeAllConditionVariable(MemorySegment ConditionVariable) {
        var mh$ = WakeAllConditionVariable$MH();
        try {
            mh$.invokeExact(ConditionVariable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SleepConditionVariableCS$MH() {
        return RuntimeHelper.requireNonNull(constants$622.const$1,"SleepConditionVariableCS");
    }
    /**
     * {@snippet :
     * BOOL SleepConditionVariableCS(PCONDITION_VARIABLE ConditionVariable, PCRITICAL_SECTION CriticalSection, DWORD dwMilliseconds);
     * }
     */
    public static int SleepConditionVariableCS(MemorySegment ConditionVariable, MemorySegment CriticalSection, int dwMilliseconds) {
        var mh$ = SleepConditionVariableCS$MH();
        try {
            return (int)mh$.invokeExact(ConditionVariable, CriticalSection, dwMilliseconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SleepConditionVariableSRW$MH() {
        return RuntimeHelper.requireNonNull(constants$622.const$2,"SleepConditionVariableSRW");
    }
    /**
     * {@snippet :
     * BOOL SleepConditionVariableSRW(PCONDITION_VARIABLE ConditionVariable, PSRWLOCK SRWLock, DWORD dwMilliseconds, ULONG Flags);
     * }
     */
    public static int SleepConditionVariableSRW(MemorySegment ConditionVariable, MemorySegment SRWLock, int dwMilliseconds, int Flags) {
        var mh$ = SleepConditionVariableSRW$MH();
        try {
            return (int)mh$.invokeExact(ConditionVariable, SRWLock, dwMilliseconds, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$622.const$3,"SetEvent");
    }
    /**
     * {@snippet :
     * BOOL SetEvent(HANDLE hEvent);
     * }
     */
    public static int SetEvent(MemorySegment hEvent) {
        var mh$ = SetEvent$MH();
        try {
            return (int)mh$.invokeExact(hEvent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ResetEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$622.const$4,"ResetEvent");
    }
    /**
     * {@snippet :
     * BOOL ResetEvent(HANDLE hEvent);
     * }
     */
    public static int ResetEvent(MemorySegment hEvent) {
        var mh$ = ResetEvent$MH();
        try {
            return (int)mh$.invokeExact(hEvent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReleaseSemaphore$MH() {
        return RuntimeHelper.requireNonNull(constants$622.const$5,"ReleaseSemaphore");
    }
    /**
     * {@snippet :
     * BOOL ReleaseSemaphore(HANDLE hSemaphore, LONG lReleaseCount, LPLONG lpPreviousCount);
     * }
     */
    public static int ReleaseSemaphore(MemorySegment hSemaphore, int lReleaseCount, MemorySegment lpPreviousCount) {
        var mh$ = ReleaseSemaphore$MH();
        try {
            return (int)mh$.invokeExact(hSemaphore, lReleaseCount, lpPreviousCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReleaseMutex$MH() {
        return RuntimeHelper.requireNonNull(constants$623.const$0,"ReleaseMutex");
    }
    /**
     * {@snippet :
     * BOOL ReleaseMutex(HANDLE hMutex);
     * }
     */
    public static int ReleaseMutex(MemorySegment hMutex) {
        var mh$ = ReleaseMutex$MH();
        try {
            return (int)mh$.invokeExact(hMutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WaitForSingleObject$MH() {
        return RuntimeHelper.requireNonNull(constants$623.const$1,"WaitForSingleObject");
    }
    /**
     * {@snippet :
     * DWORD WaitForSingleObject(HANDLE hHandle, DWORD dwMilliseconds);
     * }
     */
    public static int WaitForSingleObject(MemorySegment hHandle, int dwMilliseconds) {
        var mh$ = WaitForSingleObject$MH();
        try {
            return (int)mh$.invokeExact(hHandle, dwMilliseconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SleepEx$MH() {
        return RuntimeHelper.requireNonNull(constants$623.const$2,"SleepEx");
    }
    /**
     * {@snippet :
     * DWORD SleepEx(DWORD dwMilliseconds, BOOL bAlertable);
     * }
     */
    public static int SleepEx(int dwMilliseconds, int bAlertable) {
        var mh$ = SleepEx$MH();
        try {
            return (int)mh$.invokeExact(dwMilliseconds, bAlertable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WaitForSingleObjectEx$MH() {
        return RuntimeHelper.requireNonNull(constants$623.const$3,"WaitForSingleObjectEx");
    }
    /**
     * {@snippet :
     * DWORD WaitForSingleObjectEx(HANDLE hHandle, DWORD dwMilliseconds, BOOL bAlertable);
     * }
     */
    public static int WaitForSingleObjectEx(MemorySegment hHandle, int dwMilliseconds, int bAlertable) {
        var mh$ = WaitForSingleObjectEx$MH();
        try {
            return (int)mh$.invokeExact(hHandle, dwMilliseconds, bAlertable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WaitForMultipleObjectsEx$MH() {
        return RuntimeHelper.requireNonNull(constants$623.const$5,"WaitForMultipleObjectsEx");
    }
    /**
     * {@snippet :
     * DWORD WaitForMultipleObjectsEx(DWORD nCount, const HANDLE* lpHandles, BOOL bWaitAll, DWORD dwMilliseconds, BOOL bAlertable);
     * }
     */
    public static int WaitForMultipleObjectsEx(int nCount, MemorySegment lpHandles, int bWaitAll, int dwMilliseconds, int bAlertable) {
        var mh$ = WaitForMultipleObjectsEx$MH();
        try {
            return (int)mh$.invokeExact(nCount, lpHandles, bWaitAll, dwMilliseconds, bAlertable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateMutexA$MH() {
        return RuntimeHelper.requireNonNull(constants$624.const$1,"CreateMutexA");
    }
    /**
     * {@snippet :
     * HANDLE CreateMutexA(LPSECURITY_ATTRIBUTES lpMutexAttributes, BOOL bInitialOwner, LPCSTR lpName);
     * }
     */
    public static MemorySegment CreateMutexA(MemorySegment lpMutexAttributes, int bInitialOwner, MemorySegment lpName) {
        var mh$ = CreateMutexA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpMutexAttributes, bInitialOwner, lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateMutexW$MH() {
        return RuntimeHelper.requireNonNull(constants$624.const$2,"CreateMutexW");
    }
    /**
     * {@snippet :
     * HANDLE CreateMutexW(LPSECURITY_ATTRIBUTES lpMutexAttributes, BOOL bInitialOwner, LPCWSTR lpName);
     * }
     */
    public static MemorySegment CreateMutexW(MemorySegment lpMutexAttributes, int bInitialOwner, MemorySegment lpName) {
        var mh$ = CreateMutexW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpMutexAttributes, bInitialOwner, lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenMutexW$MH() {
        return RuntimeHelper.requireNonNull(constants$624.const$4,"OpenMutexW");
    }
    /**
     * {@snippet :
     * HANDLE OpenMutexW(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCWSTR lpName);
     * }
     */
    public static MemorySegment OpenMutexW(int dwDesiredAccess, int bInheritHandle, MemorySegment lpName) {
        var mh$ = OpenMutexW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(dwDesiredAccess, bInheritHandle, lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateEventA$MH() {
        return RuntimeHelper.requireNonNull(constants$624.const$6,"CreateEventA");
    }
    /**
     * {@snippet :
     * HANDLE CreateEventA(LPSECURITY_ATTRIBUTES lpEventAttributes, BOOL bManualReset, BOOL bInitialState, LPCSTR lpName);
     * }
     */
    public static MemorySegment CreateEventA(MemorySegment lpEventAttributes, int bManualReset, int bInitialState, MemorySegment lpName) {
        var mh$ = CreateEventA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpEventAttributes, bManualReset, bInitialState, lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateEventW$MH() {
        return RuntimeHelper.requireNonNull(constants$625.const$0,"CreateEventW");
    }
    /**
     * {@snippet :
     * HANDLE CreateEventW(LPSECURITY_ATTRIBUTES lpEventAttributes, BOOL bManualReset, BOOL bInitialState, LPCWSTR lpName);
     * }
     */
    public static MemorySegment CreateEventW(MemorySegment lpEventAttributes, int bManualReset, int bInitialState, MemorySegment lpName) {
        var mh$ = CreateEventW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpEventAttributes, bManualReset, bInitialState, lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenEventA$MH() {
        return RuntimeHelper.requireNonNull(constants$625.const$1,"OpenEventA");
    }
    /**
     * {@snippet :
     * HANDLE OpenEventA(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCSTR lpName);
     * }
     */
    public static MemorySegment OpenEventA(int dwDesiredAccess, int bInheritHandle, MemorySegment lpName) {
        var mh$ = OpenEventA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(dwDesiredAccess, bInheritHandle, lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenEventW$MH() {
        return RuntimeHelper.requireNonNull(constants$625.const$2,"OpenEventW");
    }
    /**
     * {@snippet :
     * HANDLE OpenEventW(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCWSTR lpName);
     * }
     */
    public static MemorySegment OpenEventW(int dwDesiredAccess, int bInheritHandle, MemorySegment lpName) {
        var mh$ = OpenEventW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(dwDesiredAccess, bInheritHandle, lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenSemaphoreW$MH() {
        return RuntimeHelper.requireNonNull(constants$625.const$3,"OpenSemaphoreW");
    }
    /**
     * {@snippet :
     * HANDLE OpenSemaphoreW(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCWSTR lpName);
     * }
     */
    public static MemorySegment OpenSemaphoreW(int dwDesiredAccess, int bInheritHandle, MemorySegment lpName) {
        var mh$ = OpenSemaphoreW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(dwDesiredAccess, bInheritHandle, lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenWaitableTimerW$MH() {
        return RuntimeHelper.requireNonNull(constants$626.const$0,"OpenWaitableTimerW");
    }
    /**
     * {@snippet :
     * HANDLE OpenWaitableTimerW(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCWSTR lpTimerName);
     * }
     */
    public static MemorySegment OpenWaitableTimerW(int dwDesiredAccess, int bInheritHandle, MemorySegment lpTimerName) {
        var mh$ = OpenWaitableTimerW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(dwDesiredAccess, bInheritHandle, lpTimerName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWaitableTimerEx$MH() {
        return RuntimeHelper.requireNonNull(constants$626.const$2,"SetWaitableTimerEx");
    }
    /**
     * {@snippet :
     * BOOL SetWaitableTimerEx(HANDLE hTimer, const LARGE_INTEGER* lpDueTime, LONG lPeriod, PTIMERAPCROUTINE pfnCompletionRoutine, LPVOID lpArgToCompletionRoutine, PREASON_CONTEXT WakeContext, ULONG TolerableDelay);
     * }
     */
    public static int SetWaitableTimerEx(MemorySegment hTimer, MemorySegment lpDueTime, int lPeriod, MemorySegment pfnCompletionRoutine, MemorySegment lpArgToCompletionRoutine, MemorySegment WakeContext, int TolerableDelay) {
        var mh$ = SetWaitableTimerEx$MH();
        try {
            return (int)mh$.invokeExact(hTimer, lpDueTime, lPeriod, pfnCompletionRoutine, lpArgToCompletionRoutine, WakeContext, TolerableDelay);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWaitableTimer$MH() {
        return RuntimeHelper.requireNonNull(constants$626.const$4,"SetWaitableTimer");
    }
    /**
     * {@snippet :
     * BOOL SetWaitableTimer(HANDLE hTimer, const LARGE_INTEGER* lpDueTime, LONG lPeriod, PTIMERAPCROUTINE pfnCompletionRoutine, LPVOID lpArgToCompletionRoutine, BOOL fResume);
     * }
     */
    public static int SetWaitableTimer(MemorySegment hTimer, MemorySegment lpDueTime, int lPeriod, MemorySegment pfnCompletionRoutine, MemorySegment lpArgToCompletionRoutine, int fResume) {
        var mh$ = SetWaitableTimer$MH();
        try {
            return (int)mh$.invokeExact(hTimer, lpDueTime, lPeriod, pfnCompletionRoutine, lpArgToCompletionRoutine, fResume);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CancelWaitableTimer$MH() {
        return RuntimeHelper.requireNonNull(constants$626.const$5,"CancelWaitableTimer");
    }
    /**
     * {@snippet :
     * BOOL CancelWaitableTimer(HANDLE hTimer);
     * }
     */
    public static int CancelWaitableTimer(MemorySegment hTimer) {
        var mh$ = CancelWaitableTimer$MH();
        try {
            return (int)mh$.invokeExact(hTimer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateMutexExA$MH() {
        return RuntimeHelper.requireNonNull(constants$627.const$1,"CreateMutexExA");
    }
    /**
     * {@snippet :
     * HANDLE CreateMutexExA(LPSECURITY_ATTRIBUTES lpMutexAttributes, LPCSTR lpName, DWORD dwFlags, DWORD dwDesiredAccess);
     * }
     */
    public static MemorySegment CreateMutexExA(MemorySegment lpMutexAttributes, MemorySegment lpName, int dwFlags, int dwDesiredAccess) {
        var mh$ = CreateMutexExA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpMutexAttributes, lpName, dwFlags, dwDesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateMutexExW$MH() {
        return RuntimeHelper.requireNonNull(constants$627.const$2,"CreateMutexExW");
    }
    /**
     * {@snippet :
     * HANDLE CreateMutexExW(LPSECURITY_ATTRIBUTES lpMutexAttributes, LPCWSTR lpName, DWORD dwFlags, DWORD dwDesiredAccess);
     * }
     */
    public static MemorySegment CreateMutexExW(MemorySegment lpMutexAttributes, MemorySegment lpName, int dwFlags, int dwDesiredAccess) {
        var mh$ = CreateMutexExW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpMutexAttributes, lpName, dwFlags, dwDesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateEventExA$MH() {
        return RuntimeHelper.requireNonNull(constants$627.const$3,"CreateEventExA");
    }
    /**
     * {@snippet :
     * HANDLE CreateEventExA(LPSECURITY_ATTRIBUTES lpEventAttributes, LPCSTR lpName, DWORD dwFlags, DWORD dwDesiredAccess);
     * }
     */
    public static MemorySegment CreateEventExA(MemorySegment lpEventAttributes, MemorySegment lpName, int dwFlags, int dwDesiredAccess) {
        var mh$ = CreateEventExA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpEventAttributes, lpName, dwFlags, dwDesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateEventExW$MH() {
        return RuntimeHelper.requireNonNull(constants$627.const$4,"CreateEventExW");
    }
    /**
     * {@snippet :
     * HANDLE CreateEventExW(LPSECURITY_ATTRIBUTES lpEventAttributes, LPCWSTR lpName, DWORD dwFlags, DWORD dwDesiredAccess);
     * }
     */
    public static MemorySegment CreateEventExW(MemorySegment lpEventAttributes, MemorySegment lpName, int dwFlags, int dwDesiredAccess) {
        var mh$ = CreateEventExW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpEventAttributes, lpName, dwFlags, dwDesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateSemaphoreExW$MH() {
        return RuntimeHelper.requireNonNull(constants$627.const$6,"CreateSemaphoreExW");
    }
    /**
     * {@snippet :
     * HANDLE CreateSemaphoreExW(LPSECURITY_ATTRIBUTES lpSemaphoreAttributes, LONG lInitialCount, LONG lMaximumCount, LPCWSTR lpName, DWORD dwFlags, DWORD dwDesiredAccess);
     * }
     */
    public static MemorySegment CreateSemaphoreExW(MemorySegment lpSemaphoreAttributes, int lInitialCount, int lMaximumCount, MemorySegment lpName, int dwFlags, int dwDesiredAccess) {
        var mh$ = CreateSemaphoreExW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpSemaphoreAttributes, lInitialCount, lMaximumCount, lpName, dwFlags, dwDesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateWaitableTimerExW$MH() {
        return RuntimeHelper.requireNonNull(constants$628.const$0,"CreateWaitableTimerExW");
    }
    /**
     * {@snippet :
     * HANDLE CreateWaitableTimerExW(LPSECURITY_ATTRIBUTES lpTimerAttributes, LPCWSTR lpTimerName, DWORD dwFlags, DWORD dwDesiredAccess);
     * }
     */
    public static MemorySegment CreateWaitableTimerExW(MemorySegment lpTimerAttributes, MemorySegment lpTimerName, int dwFlags, int dwDesiredAccess) {
        var mh$ = CreateWaitableTimerExW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpTimerAttributes, lpTimerName, dwFlags, dwDesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _RTL_BARRIER* PSYNCHRONIZATION_BARRIER;
     * }
     */
    public static final AddressLayout PSYNCHRONIZATION_BARRIER = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _RTL_BARRIER* LPSYNCHRONIZATION_BARRIER;
     * }
     */
    public static final AddressLayout LPSYNCHRONIZATION_BARRIER = RuntimeHelper.POINTER;
    public static MethodHandle EnterSynchronizationBarrier$MH() {
        return RuntimeHelper.requireNonNull(constants$628.const$1,"EnterSynchronizationBarrier");
    }
    /**
     * {@snippet :
     * BOOL EnterSynchronizationBarrier(LPSYNCHRONIZATION_BARRIER lpBarrier, DWORD dwFlags);
     * }
     */
    public static int EnterSynchronizationBarrier(MemorySegment lpBarrier, int dwFlags) {
        var mh$ = EnterSynchronizationBarrier$MH();
        try {
            return (int)mh$.invokeExact(lpBarrier, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitializeSynchronizationBarrier$MH() {
        return RuntimeHelper.requireNonNull(constants$628.const$2,"InitializeSynchronizationBarrier");
    }
    /**
     * {@snippet :
     * BOOL InitializeSynchronizationBarrier(LPSYNCHRONIZATION_BARRIER lpBarrier, LONG lTotalThreads, LONG lSpinCount);
     * }
     */
    public static int InitializeSynchronizationBarrier(MemorySegment lpBarrier, int lTotalThreads, int lSpinCount) {
        var mh$ = InitializeSynchronizationBarrier$MH();
        try {
            return (int)mh$.invokeExact(lpBarrier, lTotalThreads, lSpinCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteSynchronizationBarrier$MH() {
        return RuntimeHelper.requireNonNull(constants$628.const$3,"DeleteSynchronizationBarrier");
    }
    /**
     * {@snippet :
     * BOOL DeleteSynchronizationBarrier(LPSYNCHRONIZATION_BARRIER lpBarrier);
     * }
     */
    public static int DeleteSynchronizationBarrier(MemorySegment lpBarrier) {
        var mh$ = DeleteSynchronizationBarrier$MH();
        try {
            return (int)mh$.invokeExact(lpBarrier);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Sleep$MH() {
        return RuntimeHelper.requireNonNull(constants$628.const$4,"Sleep");
    }
    /**
     * {@snippet :
     * void Sleep(DWORD dwMilliseconds);
     * }
     */
    public static void Sleep(int dwMilliseconds) {
        var mh$ = Sleep$MH();
        try {
            mh$.invokeExact(dwMilliseconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WaitOnAddress$MH() {
        return RuntimeHelper.requireNonNull(constants$628.const$5,"WaitOnAddress");
    }
    /**
     * {@snippet :
     * BOOL WaitOnAddress(void* Address, PVOID CompareAddress, SIZE_T AddressSize, DWORD dwMilliseconds);
     * }
     */
    public static int WaitOnAddress(MemorySegment Address, MemorySegment CompareAddress, long AddressSize, int dwMilliseconds) {
        var mh$ = WaitOnAddress$MH();
        try {
            return (int)mh$.invokeExact(Address, CompareAddress, AddressSize, dwMilliseconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WakeByAddressSingle$MH() {
        return RuntimeHelper.requireNonNull(constants$629.const$0,"WakeByAddressSingle");
    }
    /**
     * {@snippet :
     * void WakeByAddressSingle(PVOID Address);
     * }
     */
    public static void WakeByAddressSingle(MemorySegment Address) {
        var mh$ = WakeByAddressSingle$MH();
        try {
            mh$.invokeExact(Address);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WakeByAddressAll$MH() {
        return RuntimeHelper.requireNonNull(constants$629.const$1,"WakeByAddressAll");
    }
    /**
     * {@snippet :
     * void WakeByAddressAll(PVOID Address);
     * }
     */
    public static void WakeByAddressAll(MemorySegment Address) {
        var mh$ = WakeByAddressAll$MH();
        try {
            mh$.invokeExact(Address);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SignalObjectAndWait$MH() {
        return RuntimeHelper.requireNonNull(constants$629.const$2,"SignalObjectAndWait");
    }
    /**
     * {@snippet :
     * DWORD SignalObjectAndWait(HANDLE hObjectToSignal, HANDLE hObjectToWaitOn, DWORD dwMilliseconds, BOOL bAlertable);
     * }
     */
    public static int SignalObjectAndWait(MemorySegment hObjectToSignal, MemorySegment hObjectToWaitOn, int dwMilliseconds, int bAlertable) {
        var mh$ = SignalObjectAndWait$MH();
        try {
            return (int)mh$.invokeExact(hObjectToSignal, hObjectToWaitOn, dwMilliseconds, bAlertable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WaitForMultipleObjects$MH() {
        return RuntimeHelper.requireNonNull(constants$629.const$4,"WaitForMultipleObjects");
    }
    /**
     * {@snippet :
     * DWORD WaitForMultipleObjects(DWORD nCount, const HANDLE* lpHandles, BOOL bWaitAll, DWORD dwMilliseconds);
     * }
     */
    public static int WaitForMultipleObjects(int nCount, MemorySegment lpHandles, int bWaitAll, int dwMilliseconds) {
        var mh$ = WaitForMultipleObjects$MH();
        try {
            return (int)mh$.invokeExact(nCount, lpHandles, bWaitAll, dwMilliseconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateSemaphoreW$MH() {
        return RuntimeHelper.requireNonNull(constants$629.const$5,"CreateSemaphoreW");
    }
    /**
     * {@snippet :
     * HANDLE CreateSemaphoreW(LPSECURITY_ATTRIBUTES lpSemaphoreAttributes, LONG lInitialCount, LONG lMaximumCount, LPCWSTR lpName);
     * }
     */
    public static MemorySegment CreateSemaphoreW(MemorySegment lpSemaphoreAttributes, int lInitialCount, int lMaximumCount, MemorySegment lpName) {
        var mh$ = CreateSemaphoreW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpSemaphoreAttributes, lInitialCount, lMaximumCount, lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateWaitableTimerW$MH() {
        return RuntimeHelper.requireNonNull(constants$630.const$0,"CreateWaitableTimerW");
    }
    /**
     * {@snippet :
     * HANDLE CreateWaitableTimerW(LPSECURITY_ATTRIBUTES lpTimerAttributes, BOOL bManualReset, LPCWSTR lpTimerName);
     * }
     */
    public static MemorySegment CreateWaitableTimerW(MemorySegment lpTimerAttributes, int bManualReset, MemorySegment lpTimerName) {
        var mh$ = CreateWaitableTimerW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpTimerAttributes, bManualReset, lpTimerName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitializeSListHead$MH() {
        return RuntimeHelper.requireNonNull(constants$630.const$1,"InitializeSListHead");
    }
    /**
     * {@snippet :
     * void InitializeSListHead(PSLIST_HEADER ListHead);
     * }
     */
    public static void InitializeSListHead(MemorySegment ListHead) {
        var mh$ = InitializeSListHead$MH();
        try {
            mh$.invokeExact(ListHead);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InterlockedPopEntrySList$MH() {
        return RuntimeHelper.requireNonNull(constants$630.const$2,"InterlockedPopEntrySList");
    }
    /**
     * {@snippet :
     * PSLIST_ENTRY InterlockedPopEntrySList(PSLIST_HEADER ListHead);
     * }
     */
    public static MemorySegment InterlockedPopEntrySList(MemorySegment ListHead) {
        var mh$ = InterlockedPopEntrySList$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ListHead);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InterlockedPushEntrySList$MH() {
        return RuntimeHelper.requireNonNull(constants$630.const$3,"InterlockedPushEntrySList");
    }
    /**
     * {@snippet :
     * PSLIST_ENTRY InterlockedPushEntrySList(PSLIST_HEADER ListHead, PSLIST_ENTRY ListEntry);
     * }
     */
    public static MemorySegment InterlockedPushEntrySList(MemorySegment ListHead, MemorySegment ListEntry) {
        var mh$ = InterlockedPushEntrySList$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ListHead, ListEntry);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InterlockedPushListSListEx$MH() {
        return RuntimeHelper.requireNonNull(constants$630.const$4,"InterlockedPushListSListEx");
    }
    /**
     * {@snippet :
     * PSLIST_ENTRY InterlockedPushListSListEx(PSLIST_HEADER ListHead, PSLIST_ENTRY List, PSLIST_ENTRY ListEnd, ULONG Count);
     * }
     */
    public static MemorySegment InterlockedPushListSListEx(MemorySegment ListHead, MemorySegment List, MemorySegment ListEnd, int Count) {
        var mh$ = InterlockedPushListSListEx$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ListHead, List, ListEnd, Count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InterlockedFlushSList$MH() {
        return RuntimeHelper.requireNonNull(constants$630.const$5,"InterlockedFlushSList");
    }
    /**
     * {@snippet :
     * PSLIST_ENTRY InterlockedFlushSList(PSLIST_HEADER ListHead);
     * }
     */
    public static MemorySegment InterlockedFlushSList(MemorySegment ListHead) {
        var mh$ = InterlockedFlushSList$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ListHead);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryDepthSList$MH() {
        return RuntimeHelper.requireNonNull(constants$631.const$0,"QueryDepthSList");
    }
    /**
     * {@snippet :
     * USHORT QueryDepthSList(PSLIST_HEADER ListHead);
     * }
     */
    public static short QueryDepthSList(MemorySegment ListHead) {
        var mh$ = QueryDepthSList$MH();
        try {
            return (short)mh$.invokeExact(ListHead);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _PROCESS_INFORMATION* PPROCESS_INFORMATION;
     * }
     */
    public static final AddressLayout PPROCESS_INFORMATION = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _PROCESS_INFORMATION* LPPROCESS_INFORMATION;
     * }
     */
    public static final AddressLayout LPPROCESS_INFORMATION = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _STARTUPINFOA* LPSTARTUPINFOA;
     * }
     */
    public static final AddressLayout LPSTARTUPINFOA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _STARTUPINFOW* LPSTARTUPINFOW;
     * }
     */
    public static final AddressLayout LPSTARTUPINFOW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _STARTUPINFOA* LPSTARTUPINFO;
     * }
     */
    public static final AddressLayout LPSTARTUPINFO = RuntimeHelper.POINTER;
    public static MethodHandle QueueUserAPC$MH() {
        return RuntimeHelper.requireNonNull(constants$638.const$2,"QueueUserAPC");
    }
    /**
     * {@snippet :
     * DWORD QueueUserAPC(PAPCFUNC pfnAPC, HANDLE hThread, ULONG_PTR dwData);
     * }
     */
    public static int QueueUserAPC(MemorySegment pfnAPC, MemorySegment hThread, long dwData) {
        var mh$ = QueueUserAPC$MH();
        try {
            return (int)mh$.invokeExact(pfnAPC, hThread, dwData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum _QUEUE_USER_APC_FLAGS.QUEUE_USER_APC_FLAGS_NONE = 0;
     * }
     */
    public static int QUEUE_USER_APC_FLAGS_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum _QUEUE_USER_APC_FLAGS.QUEUE_USER_APC_FLAGS_SPECIAL_USER_APC = 1;
     * }
     */
    public static int QUEUE_USER_APC_FLAGS_SPECIAL_USER_APC() {
        return (int)1L;
    }
    public static MethodHandle QueueUserAPC2$MH() {
        return RuntimeHelper.requireNonNull(constants$638.const$3,"QueueUserAPC2");
    }
    /**
     * {@snippet :
     * BOOL QueueUserAPC2(PAPCFUNC ApcRoutine, HANDLE Thread, ULONG_PTR Data, QUEUE_USER_APC_FLAGS Flags);
     * }
     */
    public static int QueueUserAPC2(MemorySegment ApcRoutine, MemorySegment Thread, long Data, int Flags) {
        var mh$ = QueueUserAPC2$MH();
        try {
            return (int)mh$.invokeExact(ApcRoutine, Thread, Data, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcessTimes$MH() {
        return RuntimeHelper.requireNonNull(constants$638.const$4,"GetProcessTimes");
    }
    /**
     * {@snippet :
     * BOOL GetProcessTimes(HANDLE hProcess, LPFILETIME lpCreationTime, LPFILETIME lpExitTime, LPFILETIME lpKernelTime, LPFILETIME lpUserTime);
     * }
     */
    public static int GetProcessTimes(MemorySegment hProcess, MemorySegment lpCreationTime, MemorySegment lpExitTime, MemorySegment lpKernelTime, MemorySegment lpUserTime) {
        var mh$ = GetProcessTimes$MH();
        try {
            return (int)mh$.invokeExact(hProcess, lpCreationTime, lpExitTime, lpKernelTime, lpUserTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrentProcess$MH() {
        return RuntimeHelper.requireNonNull(constants$638.const$5,"GetCurrentProcess");
    }
    /**
     * {@snippet :
     * HANDLE GetCurrentProcess();
     * }
     */
    public static MemorySegment GetCurrentProcess() {
        var mh$ = GetCurrentProcess$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrentProcessId$MH() {
        return RuntimeHelper.requireNonNull(constants$639.const$0,"GetCurrentProcessId");
    }
    /**
     * {@snippet :
     * DWORD GetCurrentProcessId();
     * }
     */
    public static int GetCurrentProcessId() {
        var mh$ = GetCurrentProcessId$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExitProcess$MH() {
        return RuntimeHelper.requireNonNull(constants$639.const$1,"ExitProcess");
    }
    /**
     * {@snippet :
     * void ExitProcess(UINT uExitCode);
     * }
     */
    public static void ExitProcess(int uExitCode) {
        var mh$ = ExitProcess$MH();
        try {
            mh$.invokeExact(uExitCode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TerminateProcess$MH() {
        return RuntimeHelper.requireNonNull(constants$639.const$2,"TerminateProcess");
    }
    /**
     * {@snippet :
     * BOOL TerminateProcess(HANDLE hProcess, UINT uExitCode);
     * }
     */
    public static int TerminateProcess(MemorySegment hProcess, int uExitCode) {
        var mh$ = TerminateProcess$MH();
        try {
            return (int)mh$.invokeExact(hProcess, uExitCode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetExitCodeProcess$MH() {
        return RuntimeHelper.requireNonNull(constants$639.const$3,"GetExitCodeProcess");
    }
    /**
     * {@snippet :
     * BOOL GetExitCodeProcess(HANDLE hProcess, LPDWORD lpExitCode);
     * }
     */
    public static int GetExitCodeProcess(MemorySegment hProcess, MemorySegment lpExitCode) {
        var mh$ = GetExitCodeProcess$MH();
        try {
            return (int)mh$.invokeExact(hProcess, lpExitCode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SwitchToThread$MH() {
        return RuntimeHelper.requireNonNull(constants$639.const$4,"SwitchToThread");
    }
    /**
     * {@snippet :
     * BOOL SwitchToThread();
     * }
     */
    public static int SwitchToThread() {
        var mh$ = SwitchToThread$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateThread$MH() {
        return RuntimeHelper.requireNonNull(constants$639.const$6,"CreateThread");
    }
    /**
     * {@snippet :
     * HANDLE CreateThread(LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, LPTHREAD_START_ROUTINE lpStartAddress, LPVOID lpParameter, DWORD dwCreationFlags, LPDWORD lpThreadId);
     * }
     */
    public static MemorySegment CreateThread(MemorySegment lpThreadAttributes, long dwStackSize, MemorySegment lpStartAddress, MemorySegment lpParameter, int dwCreationFlags, MemorySegment lpThreadId) {
        var mh$ = CreateThread$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpThreadAttributes, dwStackSize, lpStartAddress, lpParameter, dwCreationFlags, lpThreadId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateRemoteThread$MH() {
        return RuntimeHelper.requireNonNull(constants$640.const$1,"CreateRemoteThread");
    }
    /**
     * {@snippet :
     * HANDLE CreateRemoteThread(HANDLE hProcess, LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, LPTHREAD_START_ROUTINE lpStartAddress, LPVOID lpParameter, DWORD dwCreationFlags, LPDWORD lpThreadId);
     * }
     */
    public static MemorySegment CreateRemoteThread(MemorySegment hProcess, MemorySegment lpThreadAttributes, long dwStackSize, MemorySegment lpStartAddress, MemorySegment lpParameter, int dwCreationFlags, MemorySegment lpThreadId) {
        var mh$ = CreateRemoteThread$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hProcess, lpThreadAttributes, dwStackSize, lpStartAddress, lpParameter, dwCreationFlags, lpThreadId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrentThread$MH() {
        return RuntimeHelper.requireNonNull(constants$640.const$2,"GetCurrentThread");
    }
    /**
     * {@snippet :
     * HANDLE GetCurrentThread();
     * }
     */
    public static MemorySegment GetCurrentThread() {
        var mh$ = GetCurrentThread$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrentThreadId$MH() {
        return RuntimeHelper.requireNonNull(constants$640.const$3,"GetCurrentThreadId");
    }
    /**
     * {@snippet :
     * DWORD GetCurrentThreadId();
     * }
     */
    public static int GetCurrentThreadId() {
        var mh$ = GetCurrentThreadId$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenThread$MH() {
        return RuntimeHelper.requireNonNull(constants$640.const$5,"OpenThread");
    }
    /**
     * {@snippet :
     * HANDLE OpenThread(DWORD dwDesiredAccess, BOOL bInheritHandle, DWORD dwThreadId);
     * }
     */
    public static MemorySegment OpenThread(int dwDesiredAccess, int bInheritHandle, int dwThreadId) {
        var mh$ = OpenThread$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(dwDesiredAccess, bInheritHandle, dwThreadId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadPriority$MH() {
        return RuntimeHelper.requireNonNull(constants$641.const$0,"SetThreadPriority");
    }
    /**
     * {@snippet :
     * BOOL SetThreadPriority(HANDLE hThread, int nPriority);
     * }
     */
    public static int SetThreadPriority(MemorySegment hThread, int nPriority) {
        var mh$ = SetThreadPriority$MH();
        try {
            return (int)mh$.invokeExact(hThread, nPriority);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadPriorityBoost$MH() {
        return RuntimeHelper.requireNonNull(constants$641.const$1,"SetThreadPriorityBoost");
    }
    /**
     * {@snippet :
     * BOOL SetThreadPriorityBoost(HANDLE hThread, BOOL bDisablePriorityBoost);
     * }
     */
    public static int SetThreadPriorityBoost(MemorySegment hThread, int bDisablePriorityBoost) {
        var mh$ = SetThreadPriorityBoost$MH();
        try {
            return (int)mh$.invokeExact(hThread, bDisablePriorityBoost);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetThreadPriorityBoost$MH() {
        return RuntimeHelper.requireNonNull(constants$641.const$2,"GetThreadPriorityBoost");
    }
    /**
     * {@snippet :
     * BOOL GetThreadPriorityBoost(HANDLE hThread, PBOOL pDisablePriorityBoost);
     * }
     */
    public static int GetThreadPriorityBoost(MemorySegment hThread, MemorySegment pDisablePriorityBoost) {
        var mh$ = GetThreadPriorityBoost$MH();
        try {
            return (int)mh$.invokeExact(hThread, pDisablePriorityBoost);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetThreadPriority$MH() {
        return RuntimeHelper.requireNonNull(constants$641.const$3,"GetThreadPriority");
    }
    /**
     * {@snippet :
     * int GetThreadPriority(HANDLE hThread);
     * }
     */
    public static int GetThreadPriority(MemorySegment hThread) {
        var mh$ = GetThreadPriority$MH();
        try {
            return (int)mh$.invokeExact(hThread);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExitThread$MH() {
        return RuntimeHelper.requireNonNull(constants$641.const$4,"ExitThread");
    }
    /**
     * {@snippet :
     * void ExitThread(DWORD dwExitCode);
     * }
     */
    public static void ExitThread(int dwExitCode) {
        var mh$ = ExitThread$MH();
        try {
            mh$.invokeExact(dwExitCode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TerminateThread$MH() {
        return RuntimeHelper.requireNonNull(constants$641.const$5,"TerminateThread");
    }
    /**
     * {@snippet :
     * BOOL TerminateThread(HANDLE hThread, DWORD dwExitCode);
     * }
     */
    public static int TerminateThread(MemorySegment hThread, int dwExitCode) {
        var mh$ = TerminateThread$MH();
        try {
            return (int)mh$.invokeExact(hThread, dwExitCode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetExitCodeThread$MH() {
        return RuntimeHelper.requireNonNull(constants$642.const$0,"GetExitCodeThread");
    }
    /**
     * {@snippet :
     * BOOL GetExitCodeThread(HANDLE hThread, LPDWORD lpExitCode);
     * }
     */
    public static int GetExitCodeThread(MemorySegment hThread, MemorySegment lpExitCode) {
        var mh$ = GetExitCodeThread$MH();
        try {
            return (int)mh$.invokeExact(hThread, lpExitCode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SuspendThread$MH() {
        return RuntimeHelper.requireNonNull(constants$642.const$1,"SuspendThread");
    }
    /**
     * {@snippet :
     * DWORD SuspendThread(HANDLE hThread);
     * }
     */
    public static int SuspendThread(MemorySegment hThread) {
        var mh$ = SuspendThread$MH();
        try {
            return (int)mh$.invokeExact(hThread);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ResumeThread$MH() {
        return RuntimeHelper.requireNonNull(constants$642.const$2,"ResumeThread");
    }
    /**
     * {@snippet :
     * DWORD ResumeThread(HANDLE hThread);
     * }
     */
    public static int ResumeThread(MemorySegment hThread) {
        var mh$ = ResumeThread$MH();
        try {
            return (int)mh$.invokeExact(hThread);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TlsAlloc$MH() {
        return RuntimeHelper.requireNonNull(constants$642.const$3,"TlsAlloc");
    }
    /**
     * {@snippet :
     * DWORD TlsAlloc();
     * }
     */
    public static int TlsAlloc() {
        var mh$ = TlsAlloc$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TlsGetValue$MH() {
        return RuntimeHelper.requireNonNull(constants$642.const$4,"TlsGetValue");
    }
    /**
     * {@snippet :
     * LPVOID TlsGetValue(DWORD dwTlsIndex);
     * }
     */
    public static MemorySegment TlsGetValue(int dwTlsIndex) {
        var mh$ = TlsGetValue$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(dwTlsIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TlsSetValue$MH() {
        return RuntimeHelper.requireNonNull(constants$642.const$5,"TlsSetValue");
    }
    /**
     * {@snippet :
     * BOOL TlsSetValue(DWORD dwTlsIndex, LPVOID lpTlsValue);
     * }
     */
    public static int TlsSetValue(int dwTlsIndex, MemorySegment lpTlsValue) {
        var mh$ = TlsSetValue$MH();
        try {
            return (int)mh$.invokeExact(dwTlsIndex, lpTlsValue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TlsFree$MH() {
        return RuntimeHelper.requireNonNull(constants$643.const$0,"TlsFree");
    }
    /**
     * {@snippet :
     * BOOL TlsFree(DWORD dwTlsIndex);
     * }
     */
    public static int TlsFree(int dwTlsIndex) {
        var mh$ = TlsFree$MH();
        try {
            return (int)mh$.invokeExact(dwTlsIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateProcessA$MH() {
        return RuntimeHelper.requireNonNull(constants$643.const$2,"CreateProcessA");
    }
    /**
     * {@snippet :
     * BOOL CreateProcessA(LPCSTR lpApplicationName, LPSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, BOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCSTR lpCurrentDirectory, LPSTARTUPINFOA lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);
     * }
     */
    public static int CreateProcessA(MemorySegment lpApplicationName, MemorySegment lpCommandLine, MemorySegment lpProcessAttributes, MemorySegment lpThreadAttributes, int bInheritHandles, int dwCreationFlags, MemorySegment lpEnvironment, MemorySegment lpCurrentDirectory, MemorySegment lpStartupInfo, MemorySegment lpProcessInformation) {
        var mh$ = CreateProcessA$MH();
        try {
            return (int)mh$.invokeExact(lpApplicationName, lpCommandLine, lpProcessAttributes, lpThreadAttributes, bInheritHandles, dwCreationFlags, lpEnvironment, lpCurrentDirectory, lpStartupInfo, lpProcessInformation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateProcessW$MH() {
        return RuntimeHelper.requireNonNull(constants$643.const$3,"CreateProcessW");
    }
    /**
     * {@snippet :
     * BOOL CreateProcessW(LPCWSTR lpApplicationName, LPWSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, BOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);
     * }
     */
    public static int CreateProcessW(MemorySegment lpApplicationName, MemorySegment lpCommandLine, MemorySegment lpProcessAttributes, MemorySegment lpThreadAttributes, int bInheritHandles, int dwCreationFlags, MemorySegment lpEnvironment, MemorySegment lpCurrentDirectory, MemorySegment lpStartupInfo, MemorySegment lpProcessInformation) {
        var mh$ = CreateProcessW$MH();
        try {
            return (int)mh$.invokeExact(lpApplicationName, lpCommandLine, lpProcessAttributes, lpThreadAttributes, bInheritHandles, dwCreationFlags, lpEnvironment, lpCurrentDirectory, lpStartupInfo, lpProcessInformation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetProcessShutdownParameters$MH() {
        return RuntimeHelper.requireNonNull(constants$643.const$4,"SetProcessShutdownParameters");
    }
    /**
     * {@snippet :
     * BOOL SetProcessShutdownParameters(DWORD dwLevel, DWORD dwFlags);
     * }
     */
    public static int SetProcessShutdownParameters(int dwLevel, int dwFlags) {
        var mh$ = SetProcessShutdownParameters$MH();
        try {
            return (int)mh$.invokeExact(dwLevel, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcessVersion$MH() {
        return RuntimeHelper.requireNonNull(constants$643.const$5,"GetProcessVersion");
    }
    /**
     * {@snippet :
     * DWORD GetProcessVersion(DWORD ProcessId);
     * }
     */
    public static int GetProcessVersion(int ProcessId) {
        var mh$ = GetProcessVersion$MH();
        try {
            return (int)mh$.invokeExact(ProcessId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetStartupInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$644.const$0,"GetStartupInfoW");
    }
    /**
     * {@snippet :
     * void GetStartupInfoW(LPSTARTUPINFOW lpStartupInfo);
     * }
     */
    public static void GetStartupInfoW(MemorySegment lpStartupInfo) {
        var mh$ = GetStartupInfoW$MH();
        try {
            mh$.invokeExact(lpStartupInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateProcessAsUserW$MH() {
        return RuntimeHelper.requireNonNull(constants$644.const$2,"CreateProcessAsUserW");
    }
    /**
     * {@snippet :
     * BOOL CreateProcessAsUserW(HANDLE hToken, LPCWSTR lpApplicationName, LPWSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, BOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);
     * }
     */
    public static int CreateProcessAsUserW(MemorySegment hToken, MemorySegment lpApplicationName, MemorySegment lpCommandLine, MemorySegment lpProcessAttributes, MemorySegment lpThreadAttributes, int bInheritHandles, int dwCreationFlags, MemorySegment lpEnvironment, MemorySegment lpCurrentDirectory, MemorySegment lpStartupInfo, MemorySegment lpProcessInformation) {
        var mh$ = CreateProcessAsUserW$MH();
        try {
            return (int)mh$.invokeExact(hToken, lpApplicationName, lpCommandLine, lpProcessAttributes, lpThreadAttributes, bInheritHandles, dwCreationFlags, lpEnvironment, lpCurrentDirectory, lpStartupInfo, lpProcessInformation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadToken$MH() {
        return RuntimeHelper.requireNonNull(constants$644.const$3,"SetThreadToken");
    }
    /**
     * {@snippet :
     * BOOL SetThreadToken(PHANDLE Thread, HANDLE Token);
     * }
     */
    public static int SetThreadToken(MemorySegment Thread, MemorySegment Token) {
        var mh$ = SetThreadToken$MH();
        try {
            return (int)mh$.invokeExact(Thread, Token);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenProcessToken$MH() {
        return RuntimeHelper.requireNonNull(constants$644.const$4,"OpenProcessToken");
    }
    /**
     * {@snippet :
     * BOOL OpenProcessToken(HANDLE ProcessHandle, DWORD DesiredAccess, PHANDLE TokenHandle);
     * }
     */
    public static int OpenProcessToken(MemorySegment ProcessHandle, int DesiredAccess, MemorySegment TokenHandle) {
        var mh$ = OpenProcessToken$MH();
        try {
            return (int)mh$.invokeExact(ProcessHandle, DesiredAccess, TokenHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenThreadToken$MH() {
        return RuntimeHelper.requireNonNull(constants$644.const$6,"OpenThreadToken");
    }
    /**
     * {@snippet :
     * BOOL OpenThreadToken(HANDLE ThreadHandle, DWORD DesiredAccess, BOOL OpenAsSelf, PHANDLE TokenHandle);
     * }
     */
    public static int OpenThreadToken(MemorySegment ThreadHandle, int DesiredAccess, int OpenAsSelf, MemorySegment TokenHandle) {
        var mh$ = OpenThreadToken$MH();
        try {
            return (int)mh$.invokeExact(ThreadHandle, DesiredAccess, OpenAsSelf, TokenHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetPriorityClass$MH() {
        return RuntimeHelper.requireNonNull(constants$645.const$0,"SetPriorityClass");
    }
    /**
     * {@snippet :
     * BOOL SetPriorityClass(HANDLE hProcess, DWORD dwPriorityClass);
     * }
     */
    public static int SetPriorityClass(MemorySegment hProcess, int dwPriorityClass) {
        var mh$ = SetPriorityClass$MH();
        try {
            return (int)mh$.invokeExact(hProcess, dwPriorityClass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPriorityClass$MH() {
        return RuntimeHelper.requireNonNull(constants$645.const$1,"GetPriorityClass");
    }
    /**
     * {@snippet :
     * DWORD GetPriorityClass(HANDLE hProcess);
     * }
     */
    public static int GetPriorityClass(MemorySegment hProcess) {
        var mh$ = GetPriorityClass$MH();
        try {
            return (int)mh$.invokeExact(hProcess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadStackGuarantee$MH() {
        return RuntimeHelper.requireNonNull(constants$645.const$2,"SetThreadStackGuarantee");
    }
    /**
     * {@snippet :
     * BOOL SetThreadStackGuarantee(PULONG StackSizeInBytes);
     * }
     */
    public static int SetThreadStackGuarantee(MemorySegment StackSizeInBytes) {
        var mh$ = SetThreadStackGuarantee$MH();
        try {
            return (int)mh$.invokeExact(StackSizeInBytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ProcessIdToSessionId$MH() {
        return RuntimeHelper.requireNonNull(constants$645.const$3,"ProcessIdToSessionId");
    }
    /**
     * {@snippet :
     * BOOL ProcessIdToSessionId(DWORD dwProcessId, DWORD* pSessionId);
     * }
     */
    public static int ProcessIdToSessionId(int dwProcessId, MemorySegment pSessionId) {
        var mh$ = ProcessIdToSessionId$MH();
        try {
            return (int)mh$.invokeExact(dwProcessId, pSessionId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _PROC_THREAD_ATTRIBUTE_LIST* PPROC_THREAD_ATTRIBUTE_LIST;
     * }
     */
    public static final AddressLayout PPROC_THREAD_ATTRIBUTE_LIST = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _PROC_THREAD_ATTRIBUTE_LIST* LPPROC_THREAD_ATTRIBUTE_LIST;
     * }
     */
    public static final AddressLayout LPPROC_THREAD_ATTRIBUTE_LIST = RuntimeHelper.POINTER;
    public static MethodHandle GetProcessId$MH() {
        return RuntimeHelper.requireNonNull(constants$645.const$4,"GetProcessId");
    }
    /**
     * {@snippet :
     * DWORD GetProcessId(HANDLE Process);
     * }
     */
    public static int GetProcessId(MemorySegment Process) {
        var mh$ = GetProcessId$MH();
        try {
            return (int)mh$.invokeExact(Process);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetThreadId$MH() {
        return RuntimeHelper.requireNonNull(constants$645.const$5,"GetThreadId");
    }
    /**
     * {@snippet :
     * DWORD GetThreadId(HANDLE Thread);
     * }
     */
    public static int GetThreadId(MemorySegment Thread) {
        var mh$ = GetThreadId$MH();
        try {
            return (int)mh$.invokeExact(Thread);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FlushProcessWriteBuffers$MH() {
        return RuntimeHelper.requireNonNull(constants$646.const$0,"FlushProcessWriteBuffers");
    }
    /**
     * {@snippet :
     * void FlushProcessWriteBuffers();
     * }
     */
    public static void FlushProcessWriteBuffers() {
        var mh$ = FlushProcessWriteBuffers$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcessIdOfThread$MH() {
        return RuntimeHelper.requireNonNull(constants$646.const$1,"GetProcessIdOfThread");
    }
    /**
     * {@snippet :
     * DWORD GetProcessIdOfThread(HANDLE Thread);
     * }
     */
    public static int GetProcessIdOfThread(MemorySegment Thread) {
        var mh$ = GetProcessIdOfThread$MH();
        try {
            return (int)mh$.invokeExact(Thread);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitializeProcThreadAttributeList$MH() {
        return RuntimeHelper.requireNonNull(constants$646.const$2,"InitializeProcThreadAttributeList");
    }
    /**
     * {@snippet :
     * BOOL InitializeProcThreadAttributeList(LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList, DWORD dwAttributeCount, DWORD dwFlags, PSIZE_T lpSize);
     * }
     */
    public static int InitializeProcThreadAttributeList(MemorySegment lpAttributeList, int dwAttributeCount, int dwFlags, MemorySegment lpSize) {
        var mh$ = InitializeProcThreadAttributeList$MH();
        try {
            return (int)mh$.invokeExact(lpAttributeList, dwAttributeCount, dwFlags, lpSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteProcThreadAttributeList$MH() {
        return RuntimeHelper.requireNonNull(constants$646.const$3,"DeleteProcThreadAttributeList");
    }
    /**
     * {@snippet :
     * void DeleteProcThreadAttributeList(LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList);
     * }
     */
    public static void DeleteProcThreadAttributeList(MemorySegment lpAttributeList) {
        var mh$ = DeleteProcThreadAttributeList$MH();
        try {
            mh$.invokeExact(lpAttributeList);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UpdateProcThreadAttribute$MH() {
        return RuntimeHelper.requireNonNull(constants$646.const$5,"UpdateProcThreadAttribute");
    }
    /**
     * {@snippet :
     * BOOL UpdateProcThreadAttribute(LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList, DWORD dwFlags, DWORD_PTR Attribute, PVOID lpValue, SIZE_T cbSize, PVOID lpPreviousValue, PSIZE_T lpReturnSize);
     * }
     */
    public static int UpdateProcThreadAttribute(MemorySegment lpAttributeList, int dwFlags, long Attribute, MemorySegment lpValue, long cbSize, MemorySegment lpPreviousValue, MemorySegment lpReturnSize) {
        var mh$ = UpdateProcThreadAttribute$MH();
        try {
            return (int)mh$.invokeExact(lpAttributeList, dwFlags, Attribute, lpValue, cbSize, lpPreviousValue, lpReturnSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetProcessDynamicEHContinuationTargets$MH() {
        return RuntimeHelper.requireNonNull(constants$647.const$1,"SetProcessDynamicEHContinuationTargets");
    }
    /**
     * {@snippet :
     * BOOL SetProcessDynamicEHContinuationTargets(HANDLE Process, USHORT NumberOfTargets, PPROCESS_DYNAMIC_EH_CONTINUATION_TARGET Targets);
     * }
     */
    public static int SetProcessDynamicEHContinuationTargets(MemorySegment Process, short NumberOfTargets, MemorySegment Targets) {
        var mh$ = SetProcessDynamicEHContinuationTargets$MH();
        try {
            return (int)mh$.invokeExact(Process, NumberOfTargets, Targets);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetProcessDynamicEnforcedCetCompatibleRanges$MH() {
        return RuntimeHelper.requireNonNull(constants$647.const$2,"SetProcessDynamicEnforcedCetCompatibleRanges");
    }
    /**
     * {@snippet :
     * BOOL SetProcessDynamicEnforcedCetCompatibleRanges(HANDLE Process, USHORT NumberOfRanges, PPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE Ranges);
     * }
     */
    public static int SetProcessDynamicEnforcedCetCompatibleRanges(MemorySegment Process, short NumberOfRanges, MemorySegment Ranges) {
        var mh$ = SetProcessDynamicEnforcedCetCompatibleRanges$MH();
        try {
            return (int)mh$.invokeExact(Process, NumberOfRanges, Ranges);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetProcessAffinityUpdateMode$MH() {
        return RuntimeHelper.requireNonNull(constants$647.const$3,"SetProcessAffinityUpdateMode");
    }
    /**
     * {@snippet :
     * BOOL SetProcessAffinityUpdateMode(HANDLE hProcess, DWORD dwFlags);
     * }
     */
    public static int SetProcessAffinityUpdateMode(MemorySegment hProcess, int dwFlags) {
        var mh$ = SetProcessAffinityUpdateMode$MH();
        try {
            return (int)mh$.invokeExact(hProcess, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryProcessAffinityUpdateMode$MH() {
        return RuntimeHelper.requireNonNull(constants$647.const$4,"QueryProcessAffinityUpdateMode");
    }
    /**
     * {@snippet :
     * BOOL QueryProcessAffinityUpdateMode(HANDLE hProcess, LPDWORD lpdwFlags);
     * }
     */
    public static int QueryProcessAffinityUpdateMode(MemorySegment hProcess, MemorySegment lpdwFlags) {
        var mh$ = QueryProcessAffinityUpdateMode$MH();
        try {
            return (int)mh$.invokeExact(hProcess, lpdwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateRemoteThreadEx$MH() {
        return RuntimeHelper.requireNonNull(constants$647.const$6,"CreateRemoteThreadEx");
    }
    /**
     * {@snippet :
     * HANDLE CreateRemoteThreadEx(HANDLE hProcess, LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, LPTHREAD_START_ROUTINE lpStartAddress, LPVOID lpParameter, DWORD dwCreationFlags, LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList, LPDWORD lpThreadId);
     * }
     */
    public static MemorySegment CreateRemoteThreadEx(MemorySegment hProcess, MemorySegment lpThreadAttributes, long dwStackSize, MemorySegment lpStartAddress, MemorySegment lpParameter, int dwCreationFlags, MemorySegment lpAttributeList, MemorySegment lpThreadId) {
        var mh$ = CreateRemoteThreadEx$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hProcess, lpThreadAttributes, dwStackSize, lpStartAddress, lpParameter, dwCreationFlags, lpAttributeList, lpThreadId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrentThreadStackLimits$MH() {
        return RuntimeHelper.requireNonNull(constants$648.const$0,"GetCurrentThreadStackLimits");
    }
    /**
     * {@snippet :
     * void GetCurrentThreadStackLimits(PULONG_PTR LowLimit, PULONG_PTR HighLimit);
     * }
     */
    public static void GetCurrentThreadStackLimits(MemorySegment LowLimit, MemorySegment HighLimit) {
        var mh$ = GetCurrentThreadStackLimits$MH();
        try {
            mh$.invokeExact(LowLimit, HighLimit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetThreadContext$MH() {
        return RuntimeHelper.requireNonNull(constants$648.const$1,"GetThreadContext");
    }
    /**
     * {@snippet :
     * BOOL GetThreadContext(HANDLE hThread, LPCONTEXT lpContext);
     * }
     */
    public static int GetThreadContext(MemorySegment hThread, MemorySegment lpContext) {
        var mh$ = GetThreadContext$MH();
        try {
            return (int)mh$.invokeExact(hThread, lpContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcessMitigationPolicy$MH() {
        return RuntimeHelper.requireNonNull(constants$648.const$2,"GetProcessMitigationPolicy");
    }
    /**
     * {@snippet :
     * BOOL GetProcessMitigationPolicy(HANDLE hProcess, PROCESS_MITIGATION_POLICY MitigationPolicy, PVOID lpBuffer, SIZE_T dwLength);
     * }
     */
    public static int GetProcessMitigationPolicy(MemorySegment hProcess, int MitigationPolicy, MemorySegment lpBuffer, long dwLength) {
        var mh$ = GetProcessMitigationPolicy$MH();
        try {
            return (int)mh$.invokeExact(hProcess, MitigationPolicy, lpBuffer, dwLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadContext$MH() {
        return RuntimeHelper.requireNonNull(constants$648.const$3,"SetThreadContext");
    }
    /**
     * {@snippet :
     * BOOL SetThreadContext(HANDLE hThread, const CONTEXT* lpContext);
     * }
     */
    public static int SetThreadContext(MemorySegment hThread, MemorySegment lpContext) {
        var mh$ = SetThreadContext$MH();
        try {
            return (int)mh$.invokeExact(hThread, lpContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetProcessMitigationPolicy$MH() {
        return RuntimeHelper.requireNonNull(constants$648.const$5,"SetProcessMitigationPolicy");
    }
    /**
     * {@snippet :
     * BOOL SetProcessMitigationPolicy(PROCESS_MITIGATION_POLICY MitigationPolicy, PVOID lpBuffer, SIZE_T dwLength);
     * }
     */
    public static int SetProcessMitigationPolicy(int MitigationPolicy, MemorySegment lpBuffer, long dwLength) {
        var mh$ = SetProcessMitigationPolicy$MH();
        try {
            return (int)mh$.invokeExact(MitigationPolicy, lpBuffer, dwLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FlushInstructionCache$MH() {
        return RuntimeHelper.requireNonNull(constants$649.const$0,"FlushInstructionCache");
    }
    /**
     * {@snippet :
     * BOOL FlushInstructionCache(HANDLE hProcess, LPCVOID lpBaseAddress, SIZE_T dwSize);
     * }
     */
    public static int FlushInstructionCache(MemorySegment hProcess, MemorySegment lpBaseAddress, long dwSize) {
        var mh$ = FlushInstructionCache$MH();
        try {
            return (int)mh$.invokeExact(hProcess, lpBaseAddress, dwSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetThreadTimes$MH() {
        return RuntimeHelper.requireNonNull(constants$649.const$1,"GetThreadTimes");
    }
    /**
     * {@snippet :
     * BOOL GetThreadTimes(HANDLE hThread, LPFILETIME lpCreationTime, LPFILETIME lpExitTime, LPFILETIME lpKernelTime, LPFILETIME lpUserTime);
     * }
     */
    public static int GetThreadTimes(MemorySegment hThread, MemorySegment lpCreationTime, MemorySegment lpExitTime, MemorySegment lpKernelTime, MemorySegment lpUserTime) {
        var mh$ = GetThreadTimes$MH();
        try {
            return (int)mh$.invokeExact(hThread, lpCreationTime, lpExitTime, lpKernelTime, lpUserTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenProcess$MH() {
        return RuntimeHelper.requireNonNull(constants$649.const$2,"OpenProcess");
    }
    /**
     * {@snippet :
     * HANDLE OpenProcess(DWORD dwDesiredAccess, BOOL bInheritHandle, DWORD dwProcessId);
     * }
     */
    public static MemorySegment OpenProcess(int dwDesiredAccess, int bInheritHandle, int dwProcessId) {
        var mh$ = OpenProcess$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(dwDesiredAccess, bInheritHandle, dwProcessId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsProcessorFeaturePresent$MH() {
        return RuntimeHelper.requireNonNull(constants$649.const$3,"IsProcessorFeaturePresent");
    }
    /**
     * {@snippet :
     * BOOL IsProcessorFeaturePresent(DWORD ProcessorFeature);
     * }
     */
    public static int IsProcessorFeaturePresent(int ProcessorFeature) {
        var mh$ = IsProcessorFeaturePresent$MH();
        try {
            return (int)mh$.invokeExact(ProcessorFeature);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcessHandleCount$MH() {
        return RuntimeHelper.requireNonNull(constants$649.const$4,"GetProcessHandleCount");
    }
    /**
     * {@snippet :
     * BOOL GetProcessHandleCount(HANDLE hProcess, PDWORD pdwHandleCount);
     * }
     */
    public static int GetProcessHandleCount(MemorySegment hProcess, MemorySegment pdwHandleCount) {
        var mh$ = GetProcessHandleCount$MH();
        try {
            return (int)mh$.invokeExact(hProcess, pdwHandleCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrentProcessorNumber$MH() {
        return RuntimeHelper.requireNonNull(constants$649.const$5,"GetCurrentProcessorNumber");
    }
    /**
     * {@snippet :
     * DWORD GetCurrentProcessorNumber();
     * }
     */
    public static int GetCurrentProcessorNumber() {
        var mh$ = GetCurrentProcessorNumber$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadIdealProcessorEx$MH() {
        return RuntimeHelper.requireNonNull(constants$650.const$0,"SetThreadIdealProcessorEx");
    }
    /**
     * {@snippet :
     * BOOL SetThreadIdealProcessorEx(HANDLE hThread, PPROCESSOR_NUMBER lpIdealProcessor, PPROCESSOR_NUMBER lpPreviousIdealProcessor);
     * }
     */
    public static int SetThreadIdealProcessorEx(MemorySegment hThread, MemorySegment lpIdealProcessor, MemorySegment lpPreviousIdealProcessor) {
        var mh$ = SetThreadIdealProcessorEx$MH();
        try {
            return (int)mh$.invokeExact(hThread, lpIdealProcessor, lpPreviousIdealProcessor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetThreadIdealProcessorEx$MH() {
        return RuntimeHelper.requireNonNull(constants$650.const$1,"GetThreadIdealProcessorEx");
    }
    /**
     * {@snippet :
     * BOOL GetThreadIdealProcessorEx(HANDLE hThread, PPROCESSOR_NUMBER lpIdealProcessor);
     * }
     */
    public static int GetThreadIdealProcessorEx(MemorySegment hThread, MemorySegment lpIdealProcessor) {
        var mh$ = GetThreadIdealProcessorEx$MH();
        try {
            return (int)mh$.invokeExact(hThread, lpIdealProcessor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrentProcessorNumberEx$MH() {
        return RuntimeHelper.requireNonNull(constants$650.const$2,"GetCurrentProcessorNumberEx");
    }
    /**
     * {@snippet :
     * void GetCurrentProcessorNumberEx(PPROCESSOR_NUMBER ProcNumber);
     * }
     */
    public static void GetCurrentProcessorNumberEx(MemorySegment ProcNumber) {
        var mh$ = GetCurrentProcessorNumberEx$MH();
        try {
            mh$.invokeExact(ProcNumber);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcessPriorityBoost$MH() {
        return RuntimeHelper.requireNonNull(constants$650.const$3,"GetProcessPriorityBoost");
    }
    /**
     * {@snippet :
     * BOOL GetProcessPriorityBoost(HANDLE hProcess, PBOOL pDisablePriorityBoost);
     * }
     */
    public static int GetProcessPriorityBoost(MemorySegment hProcess, MemorySegment pDisablePriorityBoost) {
        var mh$ = GetProcessPriorityBoost$MH();
        try {
            return (int)mh$.invokeExact(hProcess, pDisablePriorityBoost);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetProcessPriorityBoost$MH() {
        return RuntimeHelper.requireNonNull(constants$650.const$4,"SetProcessPriorityBoost");
    }
    /**
     * {@snippet :
     * BOOL SetProcessPriorityBoost(HANDLE hProcess, BOOL bDisablePriorityBoost);
     * }
     */
    public static int SetProcessPriorityBoost(MemorySegment hProcess, int bDisablePriorityBoost) {
        var mh$ = SetProcessPriorityBoost$MH();
        try {
            return (int)mh$.invokeExact(hProcess, bDisablePriorityBoost);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetThreadIOPendingFlag$MH() {
        return RuntimeHelper.requireNonNull(constants$650.const$5,"GetThreadIOPendingFlag");
    }
    /**
     * {@snippet :
     * BOOL GetThreadIOPendingFlag(HANDLE hThread, PBOOL lpIOIsPending);
     * }
     */
    public static int GetThreadIOPendingFlag(MemorySegment hThread, MemorySegment lpIOIsPending) {
        var mh$ = GetThreadIOPendingFlag$MH();
        try {
            return (int)mh$.invokeExact(hThread, lpIOIsPending);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemTimes$MH() {
        return RuntimeHelper.requireNonNull(constants$651.const$0,"GetSystemTimes");
    }
    /**
     * {@snippet :
     * BOOL GetSystemTimes(PFILETIME lpIdleTime, PFILETIME lpKernelTime, PFILETIME lpUserTime);
     * }
     */
    public static int GetSystemTimes(MemorySegment lpIdleTime, MemorySegment lpKernelTime, MemorySegment lpUserTime) {
        var mh$ = GetSystemTimes$MH();
        try {
            return (int)mh$.invokeExact(lpIdleTime, lpKernelTime, lpUserTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum _THREAD_INFORMATION_CLASS.ThreadMemoryPriority = 0;
     * }
     */
    public static int ThreadMemoryPriority() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum _THREAD_INFORMATION_CLASS.ThreadAbsoluteCpuPriority = 1;
     * }
     */
    public static int ThreadAbsoluteCpuPriority() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum _THREAD_INFORMATION_CLASS.ThreadDynamicCodePolicy = 2;
     * }
     */
    public static int ThreadDynamicCodePolicy() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum _THREAD_INFORMATION_CLASS.ThreadPowerThrottling = 3;
     * }
     */
    public static int ThreadPowerThrottling() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum _THREAD_INFORMATION_CLASS.ThreadInformationClassMax = 4;
     * }
     */
    public static int ThreadInformationClassMax() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * typedef struct _MEMORY_PRIORITY_INFORMATION* PMEMORY_PRIORITY_INFORMATION;
     * }
     */
    public static final AddressLayout PMEMORY_PRIORITY_INFORMATION = RuntimeHelper.POINTER;
    public static MethodHandle GetThreadInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$651.const$3,"GetThreadInformation");
    }
    /**
     * {@snippet :
     * BOOL GetThreadInformation(HANDLE hThread, THREAD_INFORMATION_CLASS ThreadInformationClass, LPVOID ThreadInformation, DWORD ThreadInformationSize);
     * }
     */
    public static int GetThreadInformation(MemorySegment hThread, int ThreadInformationClass, MemorySegment ThreadInformation, int ThreadInformationSize) {
        var mh$ = GetThreadInformation$MH();
        try {
            return (int)mh$.invokeExact(hThread, ThreadInformationClass, ThreadInformation, ThreadInformationSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$651.const$4,"SetThreadInformation");
    }
    /**
     * {@snippet :
     * BOOL SetThreadInformation(HANDLE hThread, THREAD_INFORMATION_CLASS ThreadInformationClass, LPVOID ThreadInformation, DWORD ThreadInformationSize);
     * }
     */
    public static int SetThreadInformation(MemorySegment hThread, int ThreadInformationClass, MemorySegment ThreadInformation, int ThreadInformationSize) {
        var mh$ = SetThreadInformation$MH();
        try {
            return (int)mh$.invokeExact(hThread, ThreadInformationClass, ThreadInformation, ThreadInformationSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsProcessCritical$MH() {
        return RuntimeHelper.requireNonNull(constants$652.const$3,"IsProcessCritical");
    }
    /**
     * {@snippet :
     * BOOL IsProcessCritical(HANDLE hProcess, PBOOL Critical);
     * }
     */
    public static int IsProcessCritical(MemorySegment hProcess, MemorySegment Critical) {
        var mh$ = IsProcessCritical$MH();
        try {
            return (int)mh$.invokeExact(hProcess, Critical);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetProtectedPolicy$MH() {
        return RuntimeHelper.requireNonNull(constants$652.const$4,"SetProtectedPolicy");
    }
    /**
     * {@snippet :
     * BOOL SetProtectedPolicy(LPCGUID PolicyGuid, ULONG_PTR PolicyValue, PULONG_PTR OldPolicyValue);
     * }
     */
    public static int SetProtectedPolicy(MemorySegment PolicyGuid, long PolicyValue, MemorySegment OldPolicyValue) {
        var mh$ = SetProtectedPolicy$MH();
        try {
            return (int)mh$.invokeExact(PolicyGuid, PolicyValue, OldPolicyValue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryProtectedPolicy$MH() {
        return RuntimeHelper.requireNonNull(constants$652.const$5,"QueryProtectedPolicy");
    }
    /**
     * {@snippet :
     * BOOL QueryProtectedPolicy(LPCGUID PolicyGuid, PULONG_PTR PolicyValue);
     * }
     */
    public static int QueryProtectedPolicy(MemorySegment PolicyGuid, MemorySegment PolicyValue) {
        var mh$ = QueryProtectedPolicy$MH();
        try {
            return (int)mh$.invokeExact(PolicyGuid, PolicyValue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadIdealProcessor$MH() {
        return RuntimeHelper.requireNonNull(constants$653.const$0,"SetThreadIdealProcessor");
    }
    /**
     * {@snippet :
     * DWORD SetThreadIdealProcessor(HANDLE hThread, DWORD dwIdealProcessor);
     * }
     */
    public static int SetThreadIdealProcessor(MemorySegment hThread, int dwIdealProcessor) {
        var mh$ = SetThreadIdealProcessor$MH();
        try {
            return (int)mh$.invokeExact(hThread, dwIdealProcessor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum _PROCESS_INFORMATION_CLASS.ProcessMemoryPriority = 0;
     * }
     */
    public static int ProcessMemoryPriority() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum _PROCESS_INFORMATION_CLASS.ProcessMemoryExhaustionInfo = 1;
     * }
     */
    public static int ProcessMemoryExhaustionInfo() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum _PROCESS_INFORMATION_CLASS.ProcessAppMemoryInfo = 2;
     * }
     */
    public static int ProcessAppMemoryInfo() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum _PROCESS_INFORMATION_CLASS.ProcessInPrivateInfo = 3;
     * }
     */
    public static int ProcessInPrivateInfo() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum _PROCESS_INFORMATION_CLASS.ProcessPowerThrottling = 4;
     * }
     */
    public static int ProcessPowerThrottling() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum _PROCESS_INFORMATION_CLASS.ProcessReservedValue1 = 5;
     * }
     */
    public static int ProcessReservedValue1() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum _PROCESS_INFORMATION_CLASS.ProcessTelemetryCoverageInfo = 6;
     * }
     */
    public static int ProcessTelemetryCoverageInfo() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum _PROCESS_INFORMATION_CLASS.ProcessProtectionLevelInfo = 7;
     * }
     */
    public static int ProcessProtectionLevelInfo() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum _PROCESS_INFORMATION_CLASS.ProcessLeapSecondInfo = 8;
     * }
     */
    public static int ProcessLeapSecondInfo() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum _PROCESS_INFORMATION_CLASS.ProcessMachineTypeInfo = 9;
     * }
     */
    public static int ProcessMachineTypeInfo() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum _PROCESS_INFORMATION_CLASS.ProcessInformationClassMax = 10;
     * }
     */
    public static int ProcessInformationClassMax() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * typedef struct _APP_MEMORY_INFORMATION* PAPP_MEMORY_INFORMATION;
     * }
     */
    public static final AddressLayout PAPP_MEMORY_INFORMATION = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * enum _MACHINE_ATTRIBUTES.UserEnabled = 1;
     * }
     */
    public static int UserEnabled() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum _MACHINE_ATTRIBUTES.KernelEnabled = 2;
     * }
     */
    public static int KernelEnabled() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum _MACHINE_ATTRIBUTES.Wow64Container = 4;
     * }
     */
    public static int Wow64Container() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum _PROCESS_MEMORY_EXHAUSTION_TYPE.PMETypeFailFastOnCommitFailure = 0;
     * }
     */
    public static int PMETypeFailFastOnCommitFailure() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum _PROCESS_MEMORY_EXHAUSTION_TYPE.PMETypeMax = 1;
     * }
     */
    public static int PMETypeMax() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * typedef enum _PROCESS_MEMORY_EXHAUSTION_TYPE* PPROCESS_MEMORY_EXHAUSTION_TYPE;
     * }
     */
    public static final AddressLayout PPROCESS_MEMORY_EXHAUSTION_TYPE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _PROCESS_MEMORY_EXHAUSTION_INFO* PPROCESS_MEMORY_EXHAUSTION_INFO;
     * }
     */
    public static final AddressLayout PPROCESS_MEMORY_EXHAUSTION_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _PROCESS_POWER_THROTTLING_STATE* PPROCESS_POWER_THROTTLING_STATE;
     * }
     */
    public static final AddressLayout PPROCESS_POWER_THROTTLING_STATE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _PROCESS_LEAP_SECOND_INFO* PPROCESS_LEAP_SECOND_INFO;
     * }
     */
    public static final AddressLayout PPROCESS_LEAP_SECOND_INFO = RuntimeHelper.POINTER;
    public static MethodHandle SetProcessInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$657.const$0,"SetProcessInformation");
    }
    /**
     * {@snippet :
     * BOOL SetProcessInformation(HANDLE hProcess, PROCESS_INFORMATION_CLASS ProcessInformationClass, LPVOID ProcessInformation, DWORD ProcessInformationSize);
     * }
     */
    public static int SetProcessInformation(MemorySegment hProcess, int ProcessInformationClass, MemorySegment ProcessInformation, int ProcessInformationSize) {
        var mh$ = SetProcessInformation$MH();
        try {
            return (int)mh$.invokeExact(hProcess, ProcessInformationClass, ProcessInformation, ProcessInformationSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcessInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$657.const$1,"GetProcessInformation");
    }
    /**
     * {@snippet :
     * BOOL GetProcessInformation(HANDLE hProcess, PROCESS_INFORMATION_CLASS ProcessInformationClass, LPVOID ProcessInformation, DWORD ProcessInformationSize);
     * }
     */
    public static int GetProcessInformation(MemorySegment hProcess, int ProcessInformationClass, MemorySegment ProcessInformation, int ProcessInformationSize) {
        var mh$ = GetProcessInformation$MH();
        try {
            return (int)mh$.invokeExact(hProcess, ProcessInformationClass, ProcessInformation, ProcessInformationSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemCpuSetInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$657.const$3,"GetSystemCpuSetInformation");
    }
    /**
     * {@snippet :
     * BOOL GetSystemCpuSetInformation(PSYSTEM_CPU_SET_INFORMATION Information, ULONG BufferLength, PULONG ReturnedLength, HANDLE Process, ULONG Flags);
     * }
     */
    public static int GetSystemCpuSetInformation(MemorySegment Information, int BufferLength, MemorySegment ReturnedLength, MemorySegment Process, int Flags) {
        var mh$ = GetSystemCpuSetInformation$MH();
        try {
            return (int)mh$.invokeExact(Information, BufferLength, ReturnedLength, Process, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcessDefaultCpuSets$MH() {
        return RuntimeHelper.requireNonNull(constants$657.const$4,"GetProcessDefaultCpuSets");
    }
    /**
     * {@snippet :
     * BOOL GetProcessDefaultCpuSets(HANDLE Process, PULONG CpuSetIds, ULONG CpuSetIdCount, PULONG RequiredIdCount);
     * }
     */
    public static int GetProcessDefaultCpuSets(MemorySegment Process, MemorySegment CpuSetIds, int CpuSetIdCount, MemorySegment RequiredIdCount) {
        var mh$ = GetProcessDefaultCpuSets$MH();
        try {
            return (int)mh$.invokeExact(Process, CpuSetIds, CpuSetIdCount, RequiredIdCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetProcessDefaultCpuSets$MH() {
        return RuntimeHelper.requireNonNull(constants$657.const$5,"SetProcessDefaultCpuSets");
    }
    /**
     * {@snippet :
     * BOOL SetProcessDefaultCpuSets(HANDLE Process, const ULONG* CpuSetIds, ULONG CpuSetIdCount);
     * }
     */
    public static int SetProcessDefaultCpuSets(MemorySegment Process, MemorySegment CpuSetIds, int CpuSetIdCount) {
        var mh$ = SetProcessDefaultCpuSets$MH();
        try {
            return (int)mh$.invokeExact(Process, CpuSetIds, CpuSetIdCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetThreadSelectedCpuSets$MH() {
        return RuntimeHelper.requireNonNull(constants$658.const$0,"GetThreadSelectedCpuSets");
    }
    /**
     * {@snippet :
     * BOOL GetThreadSelectedCpuSets(HANDLE Thread, PULONG CpuSetIds, ULONG CpuSetIdCount, PULONG RequiredIdCount);
     * }
     */
    public static int GetThreadSelectedCpuSets(MemorySegment Thread, MemorySegment CpuSetIds, int CpuSetIdCount, MemorySegment RequiredIdCount) {
        var mh$ = GetThreadSelectedCpuSets$MH();
        try {
            return (int)mh$.invokeExact(Thread, CpuSetIds, CpuSetIdCount, RequiredIdCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadSelectedCpuSets$MH() {
        return RuntimeHelper.requireNonNull(constants$658.const$1,"SetThreadSelectedCpuSets");
    }
    /**
     * {@snippet :
     * BOOL SetThreadSelectedCpuSets(HANDLE Thread, const ULONG* CpuSetIds, ULONG CpuSetIdCount);
     * }
     */
    public static int SetThreadSelectedCpuSets(MemorySegment Thread, MemorySegment CpuSetIds, int CpuSetIdCount) {
        var mh$ = SetThreadSelectedCpuSets$MH();
        try {
            return (int)mh$.invokeExact(Thread, CpuSetIds, CpuSetIdCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateProcessAsUserA$MH() {
        return RuntimeHelper.requireNonNull(constants$658.const$2,"CreateProcessAsUserA");
    }
    /**
     * {@snippet :
     * BOOL CreateProcessAsUserA(HANDLE hToken, LPCSTR lpApplicationName, LPSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, BOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCSTR lpCurrentDirectory, LPSTARTUPINFOA lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);
     * }
     */
    public static int CreateProcessAsUserA(MemorySegment hToken, MemorySegment lpApplicationName, MemorySegment lpCommandLine, MemorySegment lpProcessAttributes, MemorySegment lpThreadAttributes, int bInheritHandles, int dwCreationFlags, MemorySegment lpEnvironment, MemorySegment lpCurrentDirectory, MemorySegment lpStartupInfo, MemorySegment lpProcessInformation) {
        var mh$ = CreateProcessAsUserA$MH();
        try {
            return (int)mh$.invokeExact(hToken, lpApplicationName, lpCommandLine, lpProcessAttributes, lpThreadAttributes, bInheritHandles, dwCreationFlags, lpEnvironment, lpCurrentDirectory, lpStartupInfo, lpProcessInformation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcessShutdownParameters$MH() {
        return RuntimeHelper.requireNonNull(constants$658.const$3,"GetProcessShutdownParameters");
    }
    /**
     * {@snippet :
     * BOOL GetProcessShutdownParameters(LPDWORD lpdwLevel, LPDWORD lpdwFlags);
     * }
     */
    public static int GetProcessShutdownParameters(MemorySegment lpdwLevel, MemorySegment lpdwFlags) {
        var mh$ = GetProcessShutdownParameters$MH();
        try {
            return (int)mh$.invokeExact(lpdwLevel, lpdwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcessDefaultCpuSetMasks$MH() {
        return RuntimeHelper.requireNonNull(constants$658.const$5,"GetProcessDefaultCpuSetMasks");
    }
    /**
     * {@snippet :
     * BOOL GetProcessDefaultCpuSetMasks(HANDLE Process, PGROUP_AFFINITY CpuSetMasks, USHORT CpuSetMaskCount, PUSHORT RequiredMaskCount);
     * }
     */
    public static int GetProcessDefaultCpuSetMasks(MemorySegment Process, MemorySegment CpuSetMasks, short CpuSetMaskCount, MemorySegment RequiredMaskCount) {
        var mh$ = GetProcessDefaultCpuSetMasks$MH();
        try {
            return (int)mh$.invokeExact(Process, CpuSetMasks, CpuSetMaskCount, RequiredMaskCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetProcessDefaultCpuSetMasks$MH() {
        return RuntimeHelper.requireNonNull(constants$659.const$1,"SetProcessDefaultCpuSetMasks");
    }
    /**
     * {@snippet :
     * BOOL SetProcessDefaultCpuSetMasks(HANDLE Process, PGROUP_AFFINITY CpuSetMasks, USHORT CpuSetMaskCount);
     * }
     */
    public static int SetProcessDefaultCpuSetMasks(MemorySegment Process, MemorySegment CpuSetMasks, short CpuSetMaskCount) {
        var mh$ = SetProcessDefaultCpuSetMasks$MH();
        try {
            return (int)mh$.invokeExact(Process, CpuSetMasks, CpuSetMaskCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetThreadSelectedCpuSetMasks$MH() {
        return RuntimeHelper.requireNonNull(constants$659.const$2,"GetThreadSelectedCpuSetMasks");
    }
    /**
     * {@snippet :
     * BOOL GetThreadSelectedCpuSetMasks(HANDLE Thread, PGROUP_AFFINITY CpuSetMasks, USHORT CpuSetMaskCount, PUSHORT RequiredMaskCount);
     * }
     */
    public static int GetThreadSelectedCpuSetMasks(MemorySegment Thread, MemorySegment CpuSetMasks, short CpuSetMaskCount, MemorySegment RequiredMaskCount) {
        var mh$ = GetThreadSelectedCpuSetMasks$MH();
        try {
            return (int)mh$.invokeExact(Thread, CpuSetMasks, CpuSetMaskCount, RequiredMaskCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadSelectedCpuSetMasks$MH() {
        return RuntimeHelper.requireNonNull(constants$659.const$3,"SetThreadSelectedCpuSetMasks");
    }
    /**
     * {@snippet :
     * BOOL SetThreadSelectedCpuSetMasks(HANDLE Thread, PGROUP_AFFINITY CpuSetMasks, USHORT CpuSetMaskCount);
     * }
     */
    public static int SetThreadSelectedCpuSetMasks(MemorySegment Thread, MemorySegment CpuSetMasks, short CpuSetMaskCount) {
        var mh$ = SetThreadSelectedCpuSetMasks$MH();
        try {
            return (int)mh$.invokeExact(Thread, CpuSetMasks, CpuSetMaskCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMachineTypeAttributes$MH() {
        return RuntimeHelper.requireNonNull(constants$659.const$4,"GetMachineTypeAttributes");
    }
    /**
     * {@snippet :
     * HRESULT GetMachineTypeAttributes(USHORT Machine, MACHINE_ATTRIBUTES* MachineTypeAttributes);
     * }
     */
    public static int GetMachineTypeAttributes(short Machine, MemorySegment MachineTypeAttributes) {
        var mh$ = GetMachineTypeAttributes$MH();
        try {
            return (int)mh$.invokeExact(Machine, MachineTypeAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadDescription$MH() {
        return RuntimeHelper.requireNonNull(constants$659.const$5,"SetThreadDescription");
    }
    /**
     * {@snippet :
     * HRESULT SetThreadDescription(HANDLE hThread, PCWSTR lpThreadDescription);
     * }
     */
    public static int SetThreadDescription(MemorySegment hThread, MemorySegment lpThreadDescription) {
        var mh$ = SetThreadDescription$MH();
        try {
            return (int)mh$.invokeExact(hThread, lpThreadDescription);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetThreadDescription$MH() {
        return RuntimeHelper.requireNonNull(constants$660.const$0,"GetThreadDescription");
    }
    /**
     * {@snippet :
     * HRESULT GetThreadDescription(HANDLE hThread, PWSTR* ppszThreadDescription);
     * }
     */
    public static int GetThreadDescription(MemorySegment hThread, MemorySegment ppszThreadDescription) {
        var mh$ = GetThreadDescription$MH();
        try {
            return (int)mh$.invokeExact(hThread, ppszThreadDescription);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _SYSTEM_INFO* LPSYSTEM_INFO;
     * }
     */
    public static final AddressLayout LPSYSTEM_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _MEMORYSTATUSEX* LPMEMORYSTATUSEX;
     * }
     */
    public static final AddressLayout LPMEMORYSTATUSEX = RuntimeHelper.POINTER;
    public static MethodHandle GlobalMemoryStatusEx$MH() {
        return RuntimeHelper.requireNonNull(constants$664.const$0,"GlobalMemoryStatusEx");
    }
    /**
     * {@snippet :
     * BOOL GlobalMemoryStatusEx(LPMEMORYSTATUSEX lpBuffer);
     * }
     */
    public static int GlobalMemoryStatusEx(MemorySegment lpBuffer) {
        var mh$ = GlobalMemoryStatusEx$MH();
        try {
            return (int)mh$.invokeExact(lpBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$664.const$1,"GetSystemInfo");
    }
    /**
     * {@snippet :
     * void GetSystemInfo(LPSYSTEM_INFO lpSystemInfo);
     * }
     */
    public static void GetSystemInfo(MemorySegment lpSystemInfo) {
        var mh$ = GetSystemInfo$MH();
        try {
            mh$.invokeExact(lpSystemInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemTime$MH() {
        return RuntimeHelper.requireNonNull(constants$664.const$2,"GetSystemTime");
    }
    /**
     * {@snippet :
     * void GetSystemTime(LPSYSTEMTIME lpSystemTime);
     * }
     */
    public static void GetSystemTime(MemorySegment lpSystemTime) {
        var mh$ = GetSystemTime$MH();
        try {
            mh$.invokeExact(lpSystemTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemTimeAsFileTime$MH() {
        return RuntimeHelper.requireNonNull(constants$664.const$3,"GetSystemTimeAsFileTime");
    }
    /**
     * {@snippet :
     * void GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime);
     * }
     */
    public static void GetSystemTimeAsFileTime(MemorySegment lpSystemTimeAsFileTime) {
        var mh$ = GetSystemTimeAsFileTime$MH();
        try {
            mh$.invokeExact(lpSystemTimeAsFileTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLocalTime$MH() {
        return RuntimeHelper.requireNonNull(constants$664.const$4,"GetLocalTime");
    }
    /**
     * {@snippet :
     * void GetLocalTime(LPSYSTEMTIME lpSystemTime);
     * }
     */
    public static void GetLocalTime(MemorySegment lpSystemTime) {
        var mh$ = GetLocalTime$MH();
        try {
            mh$.invokeExact(lpSystemTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsUserCetAvailableInEnvironment$MH() {
        return RuntimeHelper.requireNonNull(constants$664.const$5,"IsUserCetAvailableInEnvironment");
    }
    /**
     * {@snippet :
     * BOOL IsUserCetAvailableInEnvironment(DWORD UserCetEnvironment);
     * }
     */
    public static int IsUserCetAvailableInEnvironment(int UserCetEnvironment) {
        var mh$ = IsUserCetAvailableInEnvironment$MH();
        try {
            return (int)mh$.invokeExact(UserCetEnvironment);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemLeapSecondInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$665.const$0,"GetSystemLeapSecondInformation");
    }
    /**
     * {@snippet :
     * BOOL GetSystemLeapSecondInformation(PBOOL Enabled, PDWORD Flags);
     * }
     */
    public static int GetSystemLeapSecondInformation(MemorySegment Enabled, MemorySegment Flags) {
        var mh$ = GetSystemLeapSecondInformation$MH();
        try {
            return (int)mh$.invokeExact(Enabled, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetVersion$MH() {
        return RuntimeHelper.requireNonNull(constants$665.const$1,"GetVersion");
    }
    /**
     * {@snippet :
     * DWORD GetVersion();
     * }
     */
    public static int GetVersion() {
        var mh$ = GetVersion$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetLocalTime$MH() {
        return RuntimeHelper.requireNonNull(constants$665.const$2,"SetLocalTime");
    }
    /**
     * {@snippet :
     * BOOL SetLocalTime(const SYSTEMTIME* lpSystemTime);
     * }
     */
    public static int SetLocalTime(MemorySegment lpSystemTime) {
        var mh$ = SetLocalTime$MH();
        try {
            return (int)mh$.invokeExact(lpSystemTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTickCount$MH() {
        return RuntimeHelper.requireNonNull(constants$665.const$3,"GetTickCount");
    }
    /**
     * {@snippet :
     * DWORD GetTickCount();
     * }
     */
    public static int GetTickCount() {
        var mh$ = GetTickCount$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTickCount64$MH() {
        return RuntimeHelper.requireNonNull(constants$665.const$4,"GetTickCount64");
    }
    /**
     * {@snippet :
     * ULONGLONG GetTickCount64();
     * }
     */
    public static long GetTickCount64() {
        var mh$ = GetTickCount64$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemTimeAdjustment$MH() {
        return RuntimeHelper.requireNonNull(constants$665.const$5,"GetSystemTimeAdjustment");
    }
    /**
     * {@snippet :
     * BOOL GetSystemTimeAdjustment(PDWORD lpTimeAdjustment, PDWORD lpTimeIncrement, PBOOL lpTimeAdjustmentDisabled);
     * }
     */
    public static int GetSystemTimeAdjustment(MemorySegment lpTimeAdjustment, MemorySegment lpTimeIncrement, MemorySegment lpTimeAdjustmentDisabled) {
        var mh$ = GetSystemTimeAdjustment$MH();
        try {
            return (int)mh$.invokeExact(lpTimeAdjustment, lpTimeIncrement, lpTimeAdjustmentDisabled);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemTimeAdjustmentPrecise$MH() {
        return RuntimeHelper.requireNonNull(constants$666.const$0,"GetSystemTimeAdjustmentPrecise");
    }
    /**
     * {@snippet :
     * BOOL GetSystemTimeAdjustmentPrecise(PDWORD64 lpTimeAdjustment, PDWORD64 lpTimeIncrement, PBOOL lpTimeAdjustmentDisabled);
     * }
     */
    public static int GetSystemTimeAdjustmentPrecise(MemorySegment lpTimeAdjustment, MemorySegment lpTimeIncrement, MemorySegment lpTimeAdjustmentDisabled) {
        var mh$ = GetSystemTimeAdjustmentPrecise$MH();
        try {
            return (int)mh$.invokeExact(lpTimeAdjustment, lpTimeIncrement, lpTimeAdjustmentDisabled);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemDirectoryA$MH() {
        return RuntimeHelper.requireNonNull(constants$666.const$1,"GetSystemDirectoryA");
    }
    /**
     * {@snippet :
     * UINT GetSystemDirectoryA(LPSTR lpBuffer, UINT uSize);
     * }
     */
    public static int GetSystemDirectoryA(MemorySegment lpBuffer, int uSize) {
        var mh$ = GetSystemDirectoryA$MH();
        try {
            return (int)mh$.invokeExact(lpBuffer, uSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemDirectoryW$MH() {
        return RuntimeHelper.requireNonNull(constants$666.const$2,"GetSystemDirectoryW");
    }
    /**
     * {@snippet :
     * UINT GetSystemDirectoryW(LPWSTR lpBuffer, UINT uSize);
     * }
     */
    public static int GetSystemDirectoryW(MemorySegment lpBuffer, int uSize) {
        var mh$ = GetSystemDirectoryW$MH();
        try {
            return (int)mh$.invokeExact(lpBuffer, uSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowsDirectoryA$MH() {
        return RuntimeHelper.requireNonNull(constants$666.const$3,"GetWindowsDirectoryA");
    }
    /**
     * {@snippet :
     * UINT GetWindowsDirectoryA(LPSTR lpBuffer, UINT uSize);
     * }
     */
    public static int GetWindowsDirectoryA(MemorySegment lpBuffer, int uSize) {
        var mh$ = GetWindowsDirectoryA$MH();
        try {
            return (int)mh$.invokeExact(lpBuffer, uSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowsDirectoryW$MH() {
        return RuntimeHelper.requireNonNull(constants$666.const$4,"GetWindowsDirectoryW");
    }
    /**
     * {@snippet :
     * UINT GetWindowsDirectoryW(LPWSTR lpBuffer, UINT uSize);
     * }
     */
    public static int GetWindowsDirectoryW(MemorySegment lpBuffer, int uSize) {
        var mh$ = GetWindowsDirectoryW$MH();
        try {
            return (int)mh$.invokeExact(lpBuffer, uSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemWindowsDirectoryA$MH() {
        return RuntimeHelper.requireNonNull(constants$666.const$5,"GetSystemWindowsDirectoryA");
    }
    /**
     * {@snippet :
     * UINT GetSystemWindowsDirectoryA(LPSTR lpBuffer, UINT uSize);
     * }
     */
    public static int GetSystemWindowsDirectoryA(MemorySegment lpBuffer, int uSize) {
        var mh$ = GetSystemWindowsDirectoryA$MH();
        try {
            return (int)mh$.invokeExact(lpBuffer, uSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemWindowsDirectoryW$MH() {
        return RuntimeHelper.requireNonNull(constants$667.const$0,"GetSystemWindowsDirectoryW");
    }
    /**
     * {@snippet :
     * UINT GetSystemWindowsDirectoryW(LPWSTR lpBuffer, UINT uSize);
     * }
     */
    public static int GetSystemWindowsDirectoryW(MemorySegment lpBuffer, int uSize) {
        var mh$ = GetSystemWindowsDirectoryW$MH();
        try {
            return (int)mh$.invokeExact(lpBuffer, uSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum _COMPUTER_NAME_FORMAT.ComputerNameNetBIOS = 0;
     * }
     */
    public static int ComputerNameNetBIOS() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum _COMPUTER_NAME_FORMAT.ComputerNameDnsHostname = 1;
     * }
     */
    public static int ComputerNameDnsHostname() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum _COMPUTER_NAME_FORMAT.ComputerNameDnsDomain = 2;
     * }
     */
    public static int ComputerNameDnsDomain() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum _COMPUTER_NAME_FORMAT.ComputerNameDnsFullyQualified = 3;
     * }
     */
    public static int ComputerNameDnsFullyQualified() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum _COMPUTER_NAME_FORMAT.ComputerNamePhysicalNetBIOS = 4;
     * }
     */
    public static int ComputerNamePhysicalNetBIOS() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum _COMPUTER_NAME_FORMAT.ComputerNamePhysicalDnsHostname = 5;
     * }
     */
    public static int ComputerNamePhysicalDnsHostname() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum _COMPUTER_NAME_FORMAT.ComputerNamePhysicalDnsDomain = 6;
     * }
     */
    public static int ComputerNamePhysicalDnsDomain() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum _COMPUTER_NAME_FORMAT.ComputerNamePhysicalDnsFullyQualified = 7;
     * }
     */
    public static int ComputerNamePhysicalDnsFullyQualified() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum _COMPUTER_NAME_FORMAT.ComputerNameMax = 8;
     * }
     */
    public static int ComputerNameMax() {
        return (int)8L;
    }
    public static MethodHandle GetComputerNameExA$MH() {
        return RuntimeHelper.requireNonNull(constants$667.const$1,"GetComputerNameExA");
    }
    /**
     * {@snippet :
     * BOOL GetComputerNameExA(COMPUTER_NAME_FORMAT NameType, LPSTR lpBuffer, LPDWORD nSize);
     * }
     */
    public static int GetComputerNameExA(int NameType, MemorySegment lpBuffer, MemorySegment nSize) {
        var mh$ = GetComputerNameExA$MH();
        try {
            return (int)mh$.invokeExact(NameType, lpBuffer, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetComputerNameExW$MH() {
        return RuntimeHelper.requireNonNull(constants$667.const$2,"GetComputerNameExW");
    }
    /**
     * {@snippet :
     * BOOL GetComputerNameExW(COMPUTER_NAME_FORMAT NameType, LPWSTR lpBuffer, LPDWORD nSize);
     * }
     */
    public static int GetComputerNameExW(int NameType, MemorySegment lpBuffer, MemorySegment nSize) {
        var mh$ = GetComputerNameExW$MH();
        try {
            return (int)mh$.invokeExact(NameType, lpBuffer, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetComputerNameExW$MH() {
        return RuntimeHelper.requireNonNull(constants$667.const$3,"SetComputerNameExW");
    }
    /**
     * {@snippet :
     * BOOL SetComputerNameExW(COMPUTER_NAME_FORMAT NameType, LPCWSTR lpBuffer);
     * }
     */
    public static int SetComputerNameExW(int NameType, MemorySegment lpBuffer) {
        var mh$ = SetComputerNameExW$MH();
        try {
            return (int)mh$.invokeExact(NameType, lpBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetSystemTime$MH() {
        return RuntimeHelper.requireNonNull(constants$667.const$4,"SetSystemTime");
    }
    /**
     * {@snippet :
     * BOOL SetSystemTime(const SYSTEMTIME* lpSystemTime);
     * }
     */
    public static int SetSystemTime(MemorySegment lpSystemTime) {
        var mh$ = SetSystemTime$MH();
        try {
            return (int)mh$.invokeExact(lpSystemTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetVersionExA$MH() {
        return RuntimeHelper.requireNonNull(constants$667.const$5,"GetVersionExA");
    }
    /**
     * {@snippet :
     * BOOL GetVersionExA(LPOSVERSIONINFOA lpVersionInformation);
     * }
     */
    public static int GetVersionExA(MemorySegment lpVersionInformation) {
        var mh$ = GetVersionExA$MH();
        try {
            return (int)mh$.invokeExact(lpVersionInformation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetVersionExW$MH() {
        return RuntimeHelper.requireNonNull(constants$668.const$0,"GetVersionExW");
    }
    /**
     * {@snippet :
     * BOOL GetVersionExW(LPOSVERSIONINFOW lpVersionInformation);
     * }
     */
    public static int GetVersionExW(MemorySegment lpVersionInformation) {
        var mh$ = GetVersionExW$MH();
        try {
            return (int)mh$.invokeExact(lpVersionInformation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLogicalProcessorInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$668.const$1,"GetLogicalProcessorInformation");
    }
    /**
     * {@snippet :
     * BOOL GetLogicalProcessorInformation(PSYSTEM_LOGICAL_PROCESSOR_INFORMATION Buffer, PDWORD ReturnedLength);
     * }
     */
    public static int GetLogicalProcessorInformation(MemorySegment Buffer, MemorySegment ReturnedLength) {
        var mh$ = GetLogicalProcessorInformation$MH();
        try {
            return (int)mh$.invokeExact(Buffer, ReturnedLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLogicalProcessorInformationEx$MH() {
        return RuntimeHelper.requireNonNull(constants$668.const$2,"GetLogicalProcessorInformationEx");
    }
    /**
     * {@snippet :
     * BOOL GetLogicalProcessorInformationEx(LOGICAL_PROCESSOR_RELATIONSHIP RelationshipType, PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX Buffer, PDWORD ReturnedLength);
     * }
     */
    public static int GetLogicalProcessorInformationEx(int RelationshipType, MemorySegment Buffer, MemorySegment ReturnedLength) {
        var mh$ = GetLogicalProcessorInformationEx$MH();
        try {
            return (int)mh$.invokeExact(RelationshipType, Buffer, ReturnedLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNativeSystemInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$668.const$3,"GetNativeSystemInfo");
    }
    /**
     * {@snippet :
     * void GetNativeSystemInfo(LPSYSTEM_INFO lpSystemInfo);
     * }
     */
    public static void GetNativeSystemInfo(MemorySegment lpSystemInfo) {
        var mh$ = GetNativeSystemInfo$MH();
        try {
            mh$.invokeExact(lpSystemInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemTimePreciseAsFileTime$MH() {
        return RuntimeHelper.requireNonNull(constants$668.const$4,"GetSystemTimePreciseAsFileTime");
    }
    /**
     * {@snippet :
     * void GetSystemTimePreciseAsFileTime(LPFILETIME lpSystemTimeAsFileTime);
     * }
     */
    public static void GetSystemTimePreciseAsFileTime(MemorySegment lpSystemTimeAsFileTime) {
        var mh$ = GetSystemTimePreciseAsFileTime$MH();
        try {
            mh$.invokeExact(lpSystemTimeAsFileTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProductInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$668.const$6,"GetProductInfo");
    }
    /**
     * {@snippet :
     * BOOL GetProductInfo(DWORD dwOSMajorVersion, DWORD dwOSMinorVersion, DWORD dwSpMajorVersion, DWORD dwSpMinorVersion, PDWORD pdwReturnedProductType);
     * }
     */
    public static int GetProductInfo(int dwOSMajorVersion, int dwOSMinorVersion, int dwSpMajorVersion, int dwSpMinorVersion, MemorySegment pdwReturnedProductType) {
        var mh$ = GetProductInfo$MH();
        try {
            return (int)mh$.invokeExact(dwOSMajorVersion, dwOSMinorVersion, dwSpMajorVersion, dwSpMinorVersion, pdwReturnedProductType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetOsSafeBootMode$MH() {
        return RuntimeHelper.requireNonNull(constants$669.const$0,"GetOsSafeBootMode");
    }
    /**
     * {@snippet :
     * BOOL GetOsSafeBootMode(PDWORD Flags);
     * }
     */
    public static int GetOsSafeBootMode(MemorySegment Flags) {
        var mh$ = GetOsSafeBootMode$MH();
        try {
            return (int)mh$.invokeExact(Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumSystemFirmwareTables$MH() {
        return RuntimeHelper.requireNonNull(constants$669.const$1,"EnumSystemFirmwareTables");
    }
    /**
     * {@snippet :
     * UINT EnumSystemFirmwareTables(DWORD FirmwareTableProviderSignature, PVOID pFirmwareTableEnumBuffer, DWORD BufferSize);
     * }
     */
    public static int EnumSystemFirmwareTables(int FirmwareTableProviderSignature, MemorySegment pFirmwareTableEnumBuffer, int BufferSize) {
        var mh$ = EnumSystemFirmwareTables$MH();
        try {
            return (int)mh$.invokeExact(FirmwareTableProviderSignature, pFirmwareTableEnumBuffer, BufferSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemFirmwareTable$MH() {
        return RuntimeHelper.requireNonNull(constants$669.const$3,"GetSystemFirmwareTable");
    }
    /**
     * {@snippet :
     * UINT GetSystemFirmwareTable(DWORD FirmwareTableProviderSignature, DWORD FirmwareTableID, PVOID pFirmwareTableBuffer, DWORD BufferSize);
     * }
     */
    public static int GetSystemFirmwareTable(int FirmwareTableProviderSignature, int FirmwareTableID, MemorySegment pFirmwareTableBuffer, int BufferSize) {
        var mh$ = GetSystemFirmwareTable$MH();
        try {
            return (int)mh$.invokeExact(FirmwareTableProviderSignature, FirmwareTableID, pFirmwareTableBuffer, BufferSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DnsHostnameToComputerNameExW$MH() {
        return RuntimeHelper.requireNonNull(constants$669.const$4,"DnsHostnameToComputerNameExW");
    }
    /**
     * {@snippet :
     * BOOL DnsHostnameToComputerNameExW(LPCWSTR Hostname, LPWSTR ComputerName, LPDWORD nSize);
     * }
     */
    public static int DnsHostnameToComputerNameExW(MemorySegment Hostname, MemorySegment ComputerName, MemorySegment nSize) {
        var mh$ = DnsHostnameToComputerNameExW$MH();
        try {
            return (int)mh$.invokeExact(Hostname, ComputerName, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPhysicallyInstalledSystemMemory$MH() {
        return RuntimeHelper.requireNonNull(constants$669.const$5,"GetPhysicallyInstalledSystemMemory");
    }
    /**
     * {@snippet :
     * BOOL GetPhysicallyInstalledSystemMemory(PULONGLONG TotalMemoryInKilobytes);
     * }
     */
    public static int GetPhysicallyInstalledSystemMemory(MemorySegment TotalMemoryInKilobytes) {
        var mh$ = GetPhysicallyInstalledSystemMemory$MH();
        try {
            return (int)mh$.invokeExact(TotalMemoryInKilobytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetComputerNameEx2W$MH() {
        return RuntimeHelper.requireNonNull(constants$670.const$0,"SetComputerNameEx2W");
    }
    /**
     * {@snippet :
     * BOOL SetComputerNameEx2W(COMPUTER_NAME_FORMAT NameType, DWORD Flags, LPCWSTR lpBuffer);
     * }
     */
    public static int SetComputerNameEx2W(int NameType, int Flags, MemorySegment lpBuffer) {
        var mh$ = SetComputerNameEx2W$MH();
        try {
            return (int)mh$.invokeExact(NameType, Flags, lpBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetSystemTimeAdjustment$MH() {
        return RuntimeHelper.requireNonNull(constants$670.const$1,"SetSystemTimeAdjustment");
    }
    /**
     * {@snippet :
     * BOOL SetSystemTimeAdjustment(DWORD dwTimeAdjustment, BOOL bTimeAdjustmentDisabled);
     * }
     */
    public static int SetSystemTimeAdjustment(int dwTimeAdjustment, int bTimeAdjustmentDisabled) {
        var mh$ = SetSystemTimeAdjustment$MH();
        try {
            return (int)mh$.invokeExact(dwTimeAdjustment, bTimeAdjustmentDisabled);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetSystemTimeAdjustmentPrecise$MH() {
        return RuntimeHelper.requireNonNull(constants$670.const$3,"SetSystemTimeAdjustmentPrecise");
    }
    /**
     * {@snippet :
     * BOOL SetSystemTimeAdjustmentPrecise(DWORD64 dwTimeAdjustment, BOOL bTimeAdjustmentDisabled);
     * }
     */
    public static int SetSystemTimeAdjustmentPrecise(long dwTimeAdjustment, int bTimeAdjustmentDisabled) {
        var mh$ = SetSystemTimeAdjustmentPrecise$MH();
        try {
            return (int)mh$.invokeExact(dwTimeAdjustment, bTimeAdjustmentDisabled);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InstallELAMCertificateInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$670.const$4,"InstallELAMCertificateInfo");
    }
    /**
     * {@snippet :
     * BOOL InstallELAMCertificateInfo(HANDLE ELAMFile);
     * }
     */
    public static int InstallELAMCertificateInfo(MemorySegment ELAMFile) {
        var mh$ = InstallELAMCertificateInfo$MH();
        try {
            return (int)mh$.invokeExact(ELAMFile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcessorSystemCycleTime$MH() {
        return RuntimeHelper.requireNonNull(constants$670.const$6,"GetProcessorSystemCycleTime");
    }
    /**
     * {@snippet :
     * BOOL GetProcessorSystemCycleTime(USHORT Group, PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION Buffer, PDWORD ReturnedLength);
     * }
     */
    public static int GetProcessorSystemCycleTime(short Group, MemorySegment Buffer, MemorySegment ReturnedLength) {
        var mh$ = GetProcessorSystemCycleTime$MH();
        try {
            return (int)mh$.invokeExact(Group, Buffer, ReturnedLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetOsManufacturingMode$MH() {
        return RuntimeHelper.requireNonNull(constants$671.const$0,"GetOsManufacturingMode");
    }
    /**
     * {@snippet :
     * BOOL GetOsManufacturingMode(PBOOL pbEnabled);
     * }
     */
    public static int GetOsManufacturingMode(MemorySegment pbEnabled) {
        var mh$ = GetOsManufacturingMode$MH();
        try {
            return (int)mh$.invokeExact(pbEnabled);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetIntegratedDisplaySize$MH() {
        return RuntimeHelper.requireNonNull(constants$671.const$1,"GetIntegratedDisplaySize");
    }
    /**
     * {@snippet :
     * HRESULT GetIntegratedDisplaySize(double* sizeInInches);
     * }
     */
    public static int GetIntegratedDisplaySize(MemorySegment sizeInInches) {
        var mh$ = GetIntegratedDisplaySize$MH();
        try {
            return (int)mh$.invokeExact(sizeInInches);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetComputerNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$671.const$2,"SetComputerNameA");
    }
    /**
     * {@snippet :
     * BOOL SetComputerNameA(LPCSTR lpComputerName);
     * }
     */
    public static int SetComputerNameA(MemorySegment lpComputerName) {
        var mh$ = SetComputerNameA$MH();
        try {
            return (int)mh$.invokeExact(lpComputerName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetComputerNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$671.const$3,"SetComputerNameW");
    }
    /**
     * {@snippet :
     * BOOL SetComputerNameW(LPCWSTR lpComputerName);
     * }
     */
    public static int SetComputerNameW(MemorySegment lpComputerName) {
        var mh$ = SetComputerNameW$MH();
        try {
            return (int)mh$.invokeExact(lpComputerName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetComputerNameExA$MH() {
        return RuntimeHelper.requireNonNull(constants$671.const$4,"SetComputerNameExA");
    }
    /**
     * {@snippet :
     * BOOL SetComputerNameExA(COMPUTER_NAME_FORMAT NameType, LPCSTR lpBuffer);
     * }
     */
    public static int SetComputerNameExA(int NameType, MemorySegment lpBuffer) {
        var mh$ = SetComputerNameExA$MH();
        try {
            return (int)mh$.invokeExact(NameType, lpBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VirtualAlloc$MH() {
        return RuntimeHelper.requireNonNull(constants$671.const$6,"VirtualAlloc");
    }
    /**
     * {@snippet :
     * LPVOID VirtualAlloc(LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect);
     * }
     */
    public static MemorySegment VirtualAlloc(MemorySegment lpAddress, long dwSize, int flAllocationType, int flProtect) {
        var mh$ = VirtualAlloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpAddress, dwSize, flAllocationType, flProtect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VirtualProtect$MH() {
        return RuntimeHelper.requireNonNull(constants$672.const$1,"VirtualProtect");
    }
    /**
     * {@snippet :
     * BOOL VirtualProtect(LPVOID lpAddress, SIZE_T dwSize, DWORD flNewProtect, PDWORD lpflOldProtect);
     * }
     */
    public static int VirtualProtect(MemorySegment lpAddress, long dwSize, int flNewProtect, MemorySegment lpflOldProtect) {
        var mh$ = VirtualProtect$MH();
        try {
            return (int)mh$.invokeExact(lpAddress, dwSize, flNewProtect, lpflOldProtect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VirtualFree$MH() {
        return RuntimeHelper.requireNonNull(constants$672.const$2,"VirtualFree");
    }
    /**
     * {@snippet :
     * BOOL VirtualFree(LPVOID lpAddress, SIZE_T dwSize, DWORD dwFreeType);
     * }
     */
    public static int VirtualFree(MemorySegment lpAddress, long dwSize, int dwFreeType) {
        var mh$ = VirtualFree$MH();
        try {
            return (int)mh$.invokeExact(lpAddress, dwSize, dwFreeType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VirtualQuery$MH() {
        return RuntimeHelper.requireNonNull(constants$672.const$3,"VirtualQuery");
    }
    /**
     * {@snippet :
     * SIZE_T VirtualQuery(LPCVOID lpAddress, PMEMORY_BASIC_INFORMATION lpBuffer, SIZE_T dwLength);
     * }
     */
    public static long VirtualQuery(MemorySegment lpAddress, MemorySegment lpBuffer, long dwLength) {
        var mh$ = VirtualQuery$MH();
        try {
            return (long)mh$.invokeExact(lpAddress, lpBuffer, dwLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VirtualAllocEx$MH() {
        return RuntimeHelper.requireNonNull(constants$672.const$5,"VirtualAllocEx");
    }
    /**
     * {@snippet :
     * LPVOID VirtualAllocEx(HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect);
     * }
     */
    public static MemorySegment VirtualAllocEx(MemorySegment hProcess, MemorySegment lpAddress, long dwSize, int flAllocationType, int flProtect) {
        var mh$ = VirtualAllocEx$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hProcess, lpAddress, dwSize, flAllocationType, flProtect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VirtualProtectEx$MH() {
        return RuntimeHelper.requireNonNull(constants$673.const$1,"VirtualProtectEx");
    }
    /**
     * {@snippet :
     * BOOL VirtualProtectEx(HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD flNewProtect, PDWORD lpflOldProtect);
     * }
     */
    public static int VirtualProtectEx(MemorySegment hProcess, MemorySegment lpAddress, long dwSize, int flNewProtect, MemorySegment lpflOldProtect) {
        var mh$ = VirtualProtectEx$MH();
        try {
            return (int)mh$.invokeExact(hProcess, lpAddress, dwSize, flNewProtect, lpflOldProtect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VirtualQueryEx$MH() {
        return RuntimeHelper.requireNonNull(constants$673.const$3,"VirtualQueryEx");
    }
    /**
     * {@snippet :
     * SIZE_T VirtualQueryEx(HANDLE hProcess, LPCVOID lpAddress, PMEMORY_BASIC_INFORMATION lpBuffer, SIZE_T dwLength);
     * }
     */
    public static long VirtualQueryEx(MemorySegment hProcess, MemorySegment lpAddress, MemorySegment lpBuffer, long dwLength) {
        var mh$ = VirtualQueryEx$MH();
        try {
            return (long)mh$.invokeExact(hProcess, lpAddress, lpBuffer, dwLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadProcessMemory$MH() {
        return RuntimeHelper.requireNonNull(constants$673.const$5,"ReadProcessMemory");
    }
    /**
     * {@snippet :
     * BOOL ReadProcessMemory(HANDLE hProcess, LPCVOID lpBaseAddress, LPVOID lpBuffer, SIZE_T nSize, SIZE_T* lpNumberOfBytesRead);
     * }
     */
    public static int ReadProcessMemory(MemorySegment hProcess, MemorySegment lpBaseAddress, MemorySegment lpBuffer, long nSize, MemorySegment lpNumberOfBytesRead) {
        var mh$ = ReadProcessMemory$MH();
        try {
            return (int)mh$.invokeExact(hProcess, lpBaseAddress, lpBuffer, nSize, lpNumberOfBytesRead);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteProcessMemory$MH() {
        return RuntimeHelper.requireNonNull(constants$674.const$0,"WriteProcessMemory");
    }
    /**
     * {@snippet :
     * BOOL WriteProcessMemory(HANDLE hProcess, LPVOID lpBaseAddress, LPCVOID lpBuffer, SIZE_T nSize, SIZE_T* lpNumberOfBytesWritten);
     * }
     */
    public static int WriteProcessMemory(MemorySegment hProcess, MemorySegment lpBaseAddress, MemorySegment lpBuffer, long nSize, MemorySegment lpNumberOfBytesWritten) {
        var mh$ = WriteProcessMemory$MH();
        try {
            return (int)mh$.invokeExact(hProcess, lpBaseAddress, lpBuffer, nSize, lpNumberOfBytesWritten);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateFileMappingW$MH() {
        return RuntimeHelper.requireNonNull(constants$674.const$2,"CreateFileMappingW");
    }
    /**
     * {@snippet :
     * HANDLE CreateFileMappingW(HANDLE hFile, LPSECURITY_ATTRIBUTES lpFileMappingAttributes, DWORD flProtect, DWORD dwMaximumSizeHigh, DWORD dwMaximumSizeLow, LPCWSTR lpName);
     * }
     */
    public static MemorySegment CreateFileMappingW(MemorySegment hFile, MemorySegment lpFileMappingAttributes, int flProtect, int dwMaximumSizeHigh, int dwMaximumSizeLow, MemorySegment lpName) {
        var mh$ = CreateFileMappingW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hFile, lpFileMappingAttributes, flProtect, dwMaximumSizeHigh, dwMaximumSizeLow, lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenFileMappingW$MH() {
        return RuntimeHelper.requireNonNull(constants$674.const$3,"OpenFileMappingW");
    }
    /**
     * {@snippet :
     * HANDLE OpenFileMappingW(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCWSTR lpName);
     * }
     */
    public static MemorySegment OpenFileMappingW(int dwDesiredAccess, int bInheritHandle, MemorySegment lpName) {
        var mh$ = OpenFileMappingW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(dwDesiredAccess, bInheritHandle, lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MapViewOfFile$MH() {
        return RuntimeHelper.requireNonNull(constants$674.const$5,"MapViewOfFile");
    }
    /**
     * {@snippet :
     * LPVOID MapViewOfFile(HANDLE hFileMappingObject, DWORD dwDesiredAccess, DWORD dwFileOffsetHigh, DWORD dwFileOffsetLow, SIZE_T dwNumberOfBytesToMap);
     * }
     */
    public static MemorySegment MapViewOfFile(MemorySegment hFileMappingObject, int dwDesiredAccess, int dwFileOffsetHigh, int dwFileOffsetLow, long dwNumberOfBytesToMap) {
        var mh$ = MapViewOfFile$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hFileMappingObject, dwDesiredAccess, dwFileOffsetHigh, dwFileOffsetLow, dwNumberOfBytesToMap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MapViewOfFileEx$MH() {
        return RuntimeHelper.requireNonNull(constants$675.const$1,"MapViewOfFileEx");
    }
    /**
     * {@snippet :
     * LPVOID MapViewOfFileEx(HANDLE hFileMappingObject, DWORD dwDesiredAccess, DWORD dwFileOffsetHigh, DWORD dwFileOffsetLow, SIZE_T dwNumberOfBytesToMap, LPVOID lpBaseAddress);
     * }
     */
    public static MemorySegment MapViewOfFileEx(MemorySegment hFileMappingObject, int dwDesiredAccess, int dwFileOffsetHigh, int dwFileOffsetLow, long dwNumberOfBytesToMap, MemorySegment lpBaseAddress) {
        var mh$ = MapViewOfFileEx$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hFileMappingObject, dwDesiredAccess, dwFileOffsetHigh, dwFileOffsetLow, dwNumberOfBytesToMap, lpBaseAddress);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VirtualFreeEx$MH() {
        return RuntimeHelper.requireNonNull(constants$675.const$2,"VirtualFreeEx");
    }
    /**
     * {@snippet :
     * BOOL VirtualFreeEx(HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD dwFreeType);
     * }
     */
    public static int VirtualFreeEx(MemorySegment hProcess, MemorySegment lpAddress, long dwSize, int dwFreeType) {
        var mh$ = VirtualFreeEx$MH();
        try {
            return (int)mh$.invokeExact(hProcess, lpAddress, dwSize, dwFreeType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FlushViewOfFile$MH() {
        return RuntimeHelper.requireNonNull(constants$675.const$3,"FlushViewOfFile");
    }
    /**
     * {@snippet :
     * BOOL FlushViewOfFile(LPCVOID lpBaseAddress, SIZE_T dwNumberOfBytesToFlush);
     * }
     */
    public static int FlushViewOfFile(MemorySegment lpBaseAddress, long dwNumberOfBytesToFlush) {
        var mh$ = FlushViewOfFile$MH();
        try {
            return (int)mh$.invokeExact(lpBaseAddress, dwNumberOfBytesToFlush);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnmapViewOfFile$MH() {
        return RuntimeHelper.requireNonNull(constants$675.const$4,"UnmapViewOfFile");
    }
    /**
     * {@snippet :
     * BOOL UnmapViewOfFile(LPCVOID lpBaseAddress);
     * }
     */
    public static int UnmapViewOfFile(MemorySegment lpBaseAddress) {
        var mh$ = UnmapViewOfFile$MH();
        try {
            return (int)mh$.invokeExact(lpBaseAddress);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLargePageMinimum$MH() {
        return RuntimeHelper.requireNonNull(constants$675.const$5,"GetLargePageMinimum");
    }
    /**
     * {@snippet :
     * SIZE_T GetLargePageMinimum();
     * }
     */
    public static long GetLargePageMinimum() {
        var mh$ = GetLargePageMinimum$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcessWorkingSetSize$MH() {
        return RuntimeHelper.requireNonNull(constants$676.const$0,"GetProcessWorkingSetSize");
    }
    /**
     * {@snippet :
     * BOOL GetProcessWorkingSetSize(HANDLE hProcess, PSIZE_T lpMinimumWorkingSetSize, PSIZE_T lpMaximumWorkingSetSize);
     * }
     */
    public static int GetProcessWorkingSetSize(MemorySegment hProcess, MemorySegment lpMinimumWorkingSetSize, MemorySegment lpMaximumWorkingSetSize) {
        var mh$ = GetProcessWorkingSetSize$MH();
        try {
            return (int)mh$.invokeExact(hProcess, lpMinimumWorkingSetSize, lpMaximumWorkingSetSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcessWorkingSetSizeEx$MH() {
        return RuntimeHelper.requireNonNull(constants$676.const$1,"GetProcessWorkingSetSizeEx");
    }
    /**
     * {@snippet :
     * BOOL GetProcessWorkingSetSizeEx(HANDLE hProcess, PSIZE_T lpMinimumWorkingSetSize, PSIZE_T lpMaximumWorkingSetSize, PDWORD Flags);
     * }
     */
    public static int GetProcessWorkingSetSizeEx(MemorySegment hProcess, MemorySegment lpMinimumWorkingSetSize, MemorySegment lpMaximumWorkingSetSize, MemorySegment Flags) {
        var mh$ = GetProcessWorkingSetSizeEx$MH();
        try {
            return (int)mh$.invokeExact(hProcess, lpMinimumWorkingSetSize, lpMaximumWorkingSetSize, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetProcessWorkingSetSize$MH() {
        return RuntimeHelper.requireNonNull(constants$676.const$3,"SetProcessWorkingSetSize");
    }
    /**
     * {@snippet :
     * BOOL SetProcessWorkingSetSize(HANDLE hProcess, SIZE_T dwMinimumWorkingSetSize, SIZE_T dwMaximumWorkingSetSize);
     * }
     */
    public static int SetProcessWorkingSetSize(MemorySegment hProcess, long dwMinimumWorkingSetSize, long dwMaximumWorkingSetSize) {
        var mh$ = SetProcessWorkingSetSize$MH();
        try {
            return (int)mh$.invokeExact(hProcess, dwMinimumWorkingSetSize, dwMaximumWorkingSetSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetProcessWorkingSetSizeEx$MH() {
        return RuntimeHelper.requireNonNull(constants$676.const$5,"SetProcessWorkingSetSizeEx");
    }
    /**
     * {@snippet :
     * BOOL SetProcessWorkingSetSizeEx(HANDLE hProcess, SIZE_T dwMinimumWorkingSetSize, SIZE_T dwMaximumWorkingSetSize, DWORD Flags);
     * }
     */
    public static int SetProcessWorkingSetSizeEx(MemorySegment hProcess, long dwMinimumWorkingSetSize, long dwMaximumWorkingSetSize, int Flags) {
        var mh$ = SetProcessWorkingSetSizeEx$MH();
        try {
            return (int)mh$.invokeExact(hProcess, dwMinimumWorkingSetSize, dwMaximumWorkingSetSize, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VirtualLock$MH() {
        return RuntimeHelper.requireNonNull(constants$677.const$0,"VirtualLock");
    }
    /**
     * {@snippet :
     * BOOL VirtualLock(LPVOID lpAddress, SIZE_T dwSize);
     * }
     */
    public static int VirtualLock(MemorySegment lpAddress, long dwSize) {
        var mh$ = VirtualLock$MH();
        try {
            return (int)mh$.invokeExact(lpAddress, dwSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VirtualUnlock$MH() {
        return RuntimeHelper.requireNonNull(constants$677.const$1,"VirtualUnlock");
    }
    /**
     * {@snippet :
     * BOOL VirtualUnlock(LPVOID lpAddress, SIZE_T dwSize);
     * }
     */
    public static int VirtualUnlock(MemorySegment lpAddress, long dwSize) {
        var mh$ = VirtualUnlock$MH();
        try {
            return (int)mh$.invokeExact(lpAddress, dwSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWriteWatch$MH() {
        return RuntimeHelper.requireNonNull(constants$677.const$3,"GetWriteWatch");
    }
    /**
     * {@snippet :
     * UINT GetWriteWatch(DWORD dwFlags, PVOID lpBaseAddress, SIZE_T dwRegionSize, PVOID* lpAddresses, ULONG_PTR* lpdwCount, LPDWORD lpdwGranularity);
     * }
     */
    public static int GetWriteWatch(int dwFlags, MemorySegment lpBaseAddress, long dwRegionSize, MemorySegment lpAddresses, MemorySegment lpdwCount, MemorySegment lpdwGranularity) {
        var mh$ = GetWriteWatch$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, lpBaseAddress, dwRegionSize, lpAddresses, lpdwCount, lpdwGranularity);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ResetWriteWatch$MH() {
        return RuntimeHelper.requireNonNull(constants$677.const$4,"ResetWriteWatch");
    }
    /**
     * {@snippet :
     * UINT ResetWriteWatch(LPVOID lpBaseAddress, SIZE_T dwRegionSize);
     * }
     */
    public static int ResetWriteWatch(MemorySegment lpBaseAddress, long dwRegionSize) {
        var mh$ = ResetWriteWatch$MH();
        try {
            return (int)mh$.invokeExact(lpBaseAddress, dwRegionSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum _MEMORY_RESOURCE_NOTIFICATION_TYPE.LowMemoryResourceNotification = 0;
     * }
     */
    public static int LowMemoryResourceNotification() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum _MEMORY_RESOURCE_NOTIFICATION_TYPE.HighMemoryResourceNotification = 1;
     * }
     */
    public static int HighMemoryResourceNotification() {
        return (int)1L;
    }
    public static MethodHandle CreateMemoryResourceNotification$MH() {
        return RuntimeHelper.requireNonNull(constants$677.const$5,"CreateMemoryResourceNotification");
    }
    /**
     * {@snippet :
     * HANDLE CreateMemoryResourceNotification(MEMORY_RESOURCE_NOTIFICATION_TYPE NotificationType);
     * }
     */
    public static MemorySegment CreateMemoryResourceNotification(int NotificationType) {
        var mh$ = CreateMemoryResourceNotification$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(NotificationType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryMemoryResourceNotification$MH() {
        return RuntimeHelper.requireNonNull(constants$678.const$0,"QueryMemoryResourceNotification");
    }
    /**
     * {@snippet :
     * BOOL QueryMemoryResourceNotification(HANDLE ResourceNotificationHandle, PBOOL ResourceState);
     * }
     */
    public static int QueryMemoryResourceNotification(MemorySegment ResourceNotificationHandle, MemorySegment ResourceState) {
        var mh$ = QueryMemoryResourceNotification$MH();
        try {
            return (int)mh$.invokeExact(ResourceNotificationHandle, ResourceState);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemFileCacheSize$MH() {
        return RuntimeHelper.requireNonNull(constants$678.const$1,"GetSystemFileCacheSize");
    }
    /**
     * {@snippet :
     * BOOL GetSystemFileCacheSize(PSIZE_T lpMinimumFileCacheSize, PSIZE_T lpMaximumFileCacheSize, PDWORD lpFlags);
     * }
     */
    public static int GetSystemFileCacheSize(MemorySegment lpMinimumFileCacheSize, MemorySegment lpMaximumFileCacheSize, MemorySegment lpFlags) {
        var mh$ = GetSystemFileCacheSize$MH();
        try {
            return (int)mh$.invokeExact(lpMinimumFileCacheSize, lpMaximumFileCacheSize, lpFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetSystemFileCacheSize$MH() {
        return RuntimeHelper.requireNonNull(constants$678.const$3,"SetSystemFileCacheSize");
    }
    /**
     * {@snippet :
     * BOOL SetSystemFileCacheSize(SIZE_T MinimumFileCacheSize, SIZE_T MaximumFileCacheSize, DWORD Flags);
     * }
     */
    public static int SetSystemFileCacheSize(long MinimumFileCacheSize, long MaximumFileCacheSize, int Flags) {
        var mh$ = SetSystemFileCacheSize$MH();
        try {
            return (int)mh$.invokeExact(MinimumFileCacheSize, MaximumFileCacheSize, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateFileMappingNumaW$MH() {
        return RuntimeHelper.requireNonNull(constants$678.const$5,"CreateFileMappingNumaW");
    }
    /**
     * {@snippet :
     * HANDLE CreateFileMappingNumaW(HANDLE hFile, LPSECURITY_ATTRIBUTES lpFileMappingAttributes, DWORD flProtect, DWORD dwMaximumSizeHigh, DWORD dwMaximumSizeLow, LPCWSTR lpName, DWORD nndPreferred);
     * }
     */
    public static MemorySegment CreateFileMappingNumaW(MemorySegment hFile, MemorySegment lpFileMappingAttributes, int flProtect, int dwMaximumSizeHigh, int dwMaximumSizeLow, MemorySegment lpName, int nndPreferred) {
        var mh$ = CreateFileMappingNumaW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hFile, lpFileMappingAttributes, flProtect, dwMaximumSizeHigh, dwMaximumSizeLow, lpName, nndPreferred);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _WIN32_MEMORY_RANGE_ENTRY* PWIN32_MEMORY_RANGE_ENTRY;
     * }
     */
    public static final AddressLayout PWIN32_MEMORY_RANGE_ENTRY = RuntimeHelper.POINTER;
    public static MethodHandle PrefetchVirtualMemory$MH() {
        return RuntimeHelper.requireNonNull(constants$679.const$4,"PrefetchVirtualMemory");
    }
    /**
     * {@snippet :
     * BOOL PrefetchVirtualMemory(HANDLE hProcess, ULONG_PTR NumberOfEntries, PWIN32_MEMORY_RANGE_ENTRY VirtualAddresses, ULONG Flags);
     * }
     */
    public static int PrefetchVirtualMemory(MemorySegment hProcess, long NumberOfEntries, MemorySegment VirtualAddresses, int Flags) {
        var mh$ = PrefetchVirtualMemory$MH();
        try {
            return (int)mh$.invokeExact(hProcess, NumberOfEntries, VirtualAddresses, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateFileMappingFromApp$MH() {
        return RuntimeHelper.requireNonNull(constants$679.const$6,"CreateFileMappingFromApp");
    }
    /**
     * {@snippet :
     * HANDLE CreateFileMappingFromApp(HANDLE hFile, PSECURITY_ATTRIBUTES SecurityAttributes, ULONG PageProtection, ULONG64 MaximumSize, PCWSTR Name);
     * }
     */
    public static MemorySegment CreateFileMappingFromApp(MemorySegment hFile, MemorySegment SecurityAttributes, int PageProtection, long MaximumSize, MemorySegment Name) {
        var mh$ = CreateFileMappingFromApp$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hFile, SecurityAttributes, PageProtection, MaximumSize, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MapViewOfFileFromApp$MH() {
        return RuntimeHelper.requireNonNull(constants$680.const$1,"MapViewOfFileFromApp");
    }
    /**
     * {@snippet :
     * PVOID MapViewOfFileFromApp(HANDLE hFileMappingObject, ULONG DesiredAccess, ULONG64 FileOffset, SIZE_T NumberOfBytesToMap);
     * }
     */
    public static MemorySegment MapViewOfFileFromApp(MemorySegment hFileMappingObject, int DesiredAccess, long FileOffset, long NumberOfBytesToMap) {
        var mh$ = MapViewOfFileFromApp$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hFileMappingObject, DesiredAccess, FileOffset, NumberOfBytesToMap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnmapViewOfFileEx$MH() {
        return RuntimeHelper.requireNonNull(constants$680.const$2,"UnmapViewOfFileEx");
    }
    /**
     * {@snippet :
     * BOOL UnmapViewOfFileEx(PVOID BaseAddress, ULONG UnmapFlags);
     * }
     */
    public static int UnmapViewOfFileEx(MemorySegment BaseAddress, int UnmapFlags) {
        var mh$ = UnmapViewOfFileEx$MH();
        try {
            return (int)mh$.invokeExact(BaseAddress, UnmapFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AllocateUserPhysicalPages$MH() {
        return RuntimeHelper.requireNonNull(constants$680.const$3,"AllocateUserPhysicalPages");
    }
    /**
     * {@snippet :
     * BOOL AllocateUserPhysicalPages(HANDLE hProcess, PULONG_PTR NumberOfPages, PULONG_PTR PageArray);
     * }
     */
    public static int AllocateUserPhysicalPages(MemorySegment hProcess, MemorySegment NumberOfPages, MemorySegment PageArray) {
        var mh$ = AllocateUserPhysicalPages$MH();
        try {
            return (int)mh$.invokeExact(hProcess, NumberOfPages, PageArray);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FreeUserPhysicalPages$MH() {
        return RuntimeHelper.requireNonNull(constants$680.const$4,"FreeUserPhysicalPages");
    }
    /**
     * {@snippet :
     * BOOL FreeUserPhysicalPages(HANDLE hProcess, PULONG_PTR NumberOfPages, PULONG_PTR PageArray);
     * }
     */
    public static int FreeUserPhysicalPages(MemorySegment hProcess, MemorySegment NumberOfPages, MemorySegment PageArray) {
        var mh$ = FreeUserPhysicalPages$MH();
        try {
            return (int)mh$.invokeExact(hProcess, NumberOfPages, PageArray);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MapUserPhysicalPages$MH() {
        return RuntimeHelper.requireNonNull(constants$680.const$5,"MapUserPhysicalPages");
    }
    /**
     * {@snippet :
     * BOOL MapUserPhysicalPages(PVOID VirtualAddress, ULONG_PTR NumberOfPages, PULONG_PTR PageArray);
     * }
     */
    public static int MapUserPhysicalPages(MemorySegment VirtualAddress, long NumberOfPages, MemorySegment PageArray) {
        var mh$ = MapUserPhysicalPages$MH();
        try {
            return (int)mh$.invokeExact(VirtualAddress, NumberOfPages, PageArray);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AllocateUserPhysicalPagesNuma$MH() {
        return RuntimeHelper.requireNonNull(constants$681.const$0,"AllocateUserPhysicalPagesNuma");
    }
    /**
     * {@snippet :
     * BOOL AllocateUserPhysicalPagesNuma(HANDLE hProcess, PULONG_PTR NumberOfPages, PULONG_PTR PageArray, DWORD nndPreferred);
     * }
     */
    public static int AllocateUserPhysicalPagesNuma(MemorySegment hProcess, MemorySegment NumberOfPages, MemorySegment PageArray, int nndPreferred) {
        var mh$ = AllocateUserPhysicalPagesNuma$MH();
        try {
            return (int)mh$.invokeExact(hProcess, NumberOfPages, PageArray, nndPreferred);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VirtualAllocExNuma$MH() {
        return RuntimeHelper.requireNonNull(constants$681.const$2,"VirtualAllocExNuma");
    }
    /**
     * {@snippet :
     * LPVOID VirtualAllocExNuma(HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect, DWORD nndPreferred);
     * }
     */
    public static MemorySegment VirtualAllocExNuma(MemorySegment hProcess, MemorySegment lpAddress, long dwSize, int flAllocationType, int flProtect, int nndPreferred) {
        var mh$ = VirtualAllocExNuma$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hProcess, lpAddress, dwSize, flAllocationType, flProtect, nndPreferred);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMemoryErrorHandlingCapabilities$MH() {
        return RuntimeHelper.requireNonNull(constants$681.const$3,"GetMemoryErrorHandlingCapabilities");
    }
    /**
     * {@snippet :
     * BOOL GetMemoryErrorHandlingCapabilities(PULONG Capabilities);
     * }
     */
    public static int GetMemoryErrorHandlingCapabilities(MemorySegment Capabilities) {
        var mh$ = GetMemoryErrorHandlingCapabilities$MH();
        try {
            return (int)mh$.invokeExact(Capabilities);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterBadMemoryNotification$MH() {
        return RuntimeHelper.requireNonNull(constants$682.const$1,"RegisterBadMemoryNotification");
    }
    /**
     * {@snippet :
     * PVOID RegisterBadMemoryNotification(PBAD_MEMORY_CALLBACK_ROUTINE Callback);
     * }
     */
    public static MemorySegment RegisterBadMemoryNotification(MemorySegment Callback) {
        var mh$ = RegisterBadMemoryNotification$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(Callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnregisterBadMemoryNotification$MH() {
        return RuntimeHelper.requireNonNull(constants$682.const$2,"UnregisterBadMemoryNotification");
    }
    /**
     * {@snippet :
     * BOOL UnregisterBadMemoryNotification(PVOID RegistrationHandle);
     * }
     */
    public static int UnregisterBadMemoryNotification(MemorySegment RegistrationHandle) {
        var mh$ = UnregisterBadMemoryNotification$MH();
        try {
            return (int)mh$.invokeExact(RegistrationHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum OFFER_PRIORITY.VmOfferPriorityVeryLow = 1;
     * }
     */
    public static int VmOfferPriorityVeryLow() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum OFFER_PRIORITY.VmOfferPriorityLow = 2;
     * }
     */
    public static int VmOfferPriorityLow() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum OFFER_PRIORITY.VmOfferPriorityBelowNormal = 3;
     * }
     */
    public static int VmOfferPriorityBelowNormal() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum OFFER_PRIORITY.VmOfferPriorityNormal = 4;
     * }
     */
    public static int VmOfferPriorityNormal() {
        return (int)4L;
    }
    public static MethodHandle OfferVirtualMemory$MH() {
        return RuntimeHelper.requireNonNull(constants$682.const$3,"OfferVirtualMemory");
    }
    /**
     * {@snippet :
     * DWORD OfferVirtualMemory(PVOID VirtualAddress, SIZE_T Size, OFFER_PRIORITY Priority);
     * }
     */
    public static int OfferVirtualMemory(MemorySegment VirtualAddress, long Size, int Priority) {
        var mh$ = OfferVirtualMemory$MH();
        try {
            return (int)mh$.invokeExact(VirtualAddress, Size, Priority);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReclaimVirtualMemory$MH() {
        return RuntimeHelper.requireNonNull(constants$682.const$4,"ReclaimVirtualMemory");
    }
    /**
     * {@snippet :
     * DWORD ReclaimVirtualMemory(void* VirtualAddress, SIZE_T Size);
     * }
     */
    public static int ReclaimVirtualMemory(MemorySegment VirtualAddress, long Size) {
        var mh$ = ReclaimVirtualMemory$MH();
        try {
            return (int)mh$.invokeExact(VirtualAddress, Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DiscardVirtualMemory$MH() {
        return RuntimeHelper.requireNonNull(constants$682.const$5,"DiscardVirtualMemory");
    }
    /**
     * {@snippet :
     * DWORD DiscardVirtualMemory(PVOID VirtualAddress, SIZE_T Size);
     * }
     */
    public static int DiscardVirtualMemory(MemorySegment VirtualAddress, long Size) {
        var mh$ = DiscardVirtualMemory$MH();
        try {
            return (int)mh$.invokeExact(VirtualAddress, Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetProcessValidCallTargets$MH() {
        return RuntimeHelper.requireNonNull(constants$683.const$0,"SetProcessValidCallTargets");
    }
    /**
     * {@snippet :
     * BOOL SetProcessValidCallTargets(HANDLE hProcess, PVOID VirtualAddress, SIZE_T RegionSize, ULONG NumberOfOffsets, PCFG_CALL_TARGET_INFO OffsetInformation);
     * }
     */
    public static int SetProcessValidCallTargets(MemorySegment hProcess, MemorySegment VirtualAddress, long RegionSize, int NumberOfOffsets, MemorySegment OffsetInformation) {
        var mh$ = SetProcessValidCallTargets$MH();
        try {
            return (int)mh$.invokeExact(hProcess, VirtualAddress, RegionSize, NumberOfOffsets, OffsetInformation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetProcessValidCallTargetsForMappedView$MH() {
        return RuntimeHelper.requireNonNull(constants$683.const$2,"SetProcessValidCallTargetsForMappedView");
    }
    /**
     * {@snippet :
     * BOOL SetProcessValidCallTargetsForMappedView(HANDLE Process, PVOID VirtualAddress, SIZE_T RegionSize, ULONG NumberOfOffsets, PCFG_CALL_TARGET_INFO OffsetInformation, HANDLE Section, ULONG64 ExpectedFileOffset);
     * }
     */
    public static int SetProcessValidCallTargetsForMappedView(MemorySegment Process, MemorySegment VirtualAddress, long RegionSize, int NumberOfOffsets, MemorySegment OffsetInformation, MemorySegment Section, long ExpectedFileOffset) {
        var mh$ = SetProcessValidCallTargetsForMappedView$MH();
        try {
            return (int)mh$.invokeExact(Process, VirtualAddress, RegionSize, NumberOfOffsets, OffsetInformation, Section, ExpectedFileOffset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VirtualAllocFromApp$MH() {
        return RuntimeHelper.requireNonNull(constants$683.const$3,"VirtualAllocFromApp");
    }
    /**
     * {@snippet :
     * PVOID VirtualAllocFromApp(PVOID BaseAddress, SIZE_T Size, ULONG AllocationType, ULONG Protection);
     * }
     */
    public static MemorySegment VirtualAllocFromApp(MemorySegment BaseAddress, long Size, int AllocationType, int Protection) {
        var mh$ = VirtualAllocFromApp$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(BaseAddress, Size, AllocationType, Protection);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VirtualProtectFromApp$MH() {
        return RuntimeHelper.requireNonNull(constants$683.const$4,"VirtualProtectFromApp");
    }
    /**
     * {@snippet :
     * BOOL VirtualProtectFromApp(PVOID Address, SIZE_T Size, ULONG NewProtection, PULONG OldProtection);
     * }
     */
    public static int VirtualProtectFromApp(MemorySegment Address, long Size, int NewProtection, MemorySegment OldProtection) {
        var mh$ = VirtualProtectFromApp$MH();
        try {
            return (int)mh$.invokeExact(Address, Size, NewProtection, OldProtection);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenFileMappingFromApp$MH() {
        return RuntimeHelper.requireNonNull(constants$683.const$5,"OpenFileMappingFromApp");
    }
    /**
     * {@snippet :
     * HANDLE OpenFileMappingFromApp(ULONG DesiredAccess, BOOL InheritHandle, PCWSTR Name);
     * }
     */
    public static MemorySegment OpenFileMappingFromApp(int DesiredAccess, int InheritHandle, MemorySegment Name) {
        var mh$ = OpenFileMappingFromApp$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(DesiredAccess, InheritHandle, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum WIN32_MEMORY_INFORMATION_CLASS.MemoryRegionInfo = 0;
     * }
     */
    public static int MemoryRegionInfo() {
        return (int)0L;
    }
    public static MethodHandle QueryVirtualMemoryInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$685.const$1,"QueryVirtualMemoryInformation");
    }
    /**
     * {@snippet :
     * BOOL QueryVirtualMemoryInformation(HANDLE Process, void* VirtualAddress, WIN32_MEMORY_INFORMATION_CLASS MemoryInformationClass, PVOID MemoryInformation, SIZE_T MemoryInformationSize, PSIZE_T ReturnSize);
     * }
     */
    public static int QueryVirtualMemoryInformation(MemorySegment Process, MemorySegment VirtualAddress, int MemoryInformationClass, MemorySegment MemoryInformation, long MemoryInformationSize, MemorySegment ReturnSize) {
        var mh$ = QueryVirtualMemoryInformation$MH();
        try {
            return (int)mh$.invokeExact(Process, VirtualAddress, MemoryInformationClass, MemoryInformation, MemoryInformationSize, ReturnSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MapViewOfFileNuma2$MH() {
        return RuntimeHelper.requireNonNull(constants$685.const$3,"MapViewOfFileNuma2");
    }
    /**
     * {@snippet :
     * PVOID MapViewOfFileNuma2(HANDLE FileMappingHandle, HANDLE ProcessHandle, ULONG64 Offset, PVOID BaseAddress, SIZE_T ViewSize, ULONG AllocationType, ULONG PageProtection, ULONG PreferredNode);
     * }
     */
    public static MemorySegment MapViewOfFileNuma2(MemorySegment FileMappingHandle, MemorySegment ProcessHandle, long Offset, MemorySegment BaseAddress, long ViewSize, int AllocationType, int PageProtection, int PreferredNode) {
        var mh$ = MapViewOfFileNuma2$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(FileMappingHandle, ProcessHandle, Offset, BaseAddress, ViewSize, AllocationType, PageProtection, PreferredNode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnmapViewOfFile2$MH() {
        return RuntimeHelper.requireNonNull(constants$685.const$4,"UnmapViewOfFile2");
    }
    /**
     * {@snippet :
     * BOOL UnmapViewOfFile2(HANDLE Process, PVOID BaseAddress, ULONG UnmapFlags);
     * }
     */
    public static int UnmapViewOfFile2(MemorySegment Process, MemorySegment BaseAddress, int UnmapFlags) {
        var mh$ = UnmapViewOfFile2$MH();
        try {
            return (int)mh$.invokeExact(Process, BaseAddress, UnmapFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VirtualUnlockEx$MH() {
        return RuntimeHelper.requireNonNull(constants$685.const$5,"VirtualUnlockEx");
    }
    /**
     * {@snippet :
     * BOOL VirtualUnlockEx(HANDLE Process, LPVOID Address, SIZE_T Size);
     * }
     */
    public static int VirtualUnlockEx(MemorySegment Process, MemorySegment Address, long Size) {
        var mh$ = VirtualUnlockEx$MH();
        try {
            return (int)mh$.invokeExact(Process, Address, Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VirtualAlloc2$MH() {
        return RuntimeHelper.requireNonNull(constants$686.const$1,"VirtualAlloc2");
    }
    /**
     * {@snippet :
     * PVOID VirtualAlloc2(HANDLE Process, PVOID BaseAddress, SIZE_T Size, ULONG AllocationType, ULONG PageProtection, MEM_EXTENDED_PARAMETER* ExtendedParameters, ULONG ParameterCount);
     * }
     */
    public static MemorySegment VirtualAlloc2(MemorySegment Process, MemorySegment BaseAddress, long Size, int AllocationType, int PageProtection, MemorySegment ExtendedParameters, int ParameterCount) {
        var mh$ = VirtualAlloc2$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(Process, BaseAddress, Size, AllocationType, PageProtection, ExtendedParameters, ParameterCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MapViewOfFile3$MH() {
        return RuntimeHelper.requireNonNull(constants$686.const$3,"MapViewOfFile3");
    }
    /**
     * {@snippet :
     * PVOID MapViewOfFile3(HANDLE FileMapping, HANDLE Process, PVOID BaseAddress, ULONG64 Offset, SIZE_T ViewSize, ULONG AllocationType, ULONG PageProtection, MEM_EXTENDED_PARAMETER* ExtendedParameters, ULONG ParameterCount);
     * }
     */
    public static MemorySegment MapViewOfFile3(MemorySegment FileMapping, MemorySegment Process, MemorySegment BaseAddress, long Offset, long ViewSize, int AllocationType, int PageProtection, MemorySegment ExtendedParameters, int ParameterCount) {
        var mh$ = MapViewOfFile3$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(FileMapping, Process, BaseAddress, Offset, ViewSize, AllocationType, PageProtection, ExtendedParameters, ParameterCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VirtualAlloc2FromApp$MH() {
        return RuntimeHelper.requireNonNull(constants$686.const$4,"VirtualAlloc2FromApp");
    }
    /**
     * {@snippet :
     * PVOID VirtualAlloc2FromApp(HANDLE Process, PVOID BaseAddress, SIZE_T Size, ULONG AllocationType, ULONG PageProtection, MEM_EXTENDED_PARAMETER* ExtendedParameters, ULONG ParameterCount);
     * }
     */
    public static MemorySegment VirtualAlloc2FromApp(MemorySegment Process, MemorySegment BaseAddress, long Size, int AllocationType, int PageProtection, MemorySegment ExtendedParameters, int ParameterCount) {
        var mh$ = VirtualAlloc2FromApp$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(Process, BaseAddress, Size, AllocationType, PageProtection, ExtendedParameters, ParameterCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MapViewOfFile3FromApp$MH() {
        return RuntimeHelper.requireNonNull(constants$686.const$5,"MapViewOfFile3FromApp");
    }
    /**
     * {@snippet :
     * PVOID MapViewOfFile3FromApp(HANDLE FileMapping, HANDLE Process, PVOID BaseAddress, ULONG64 Offset, SIZE_T ViewSize, ULONG AllocationType, ULONG PageProtection, MEM_EXTENDED_PARAMETER* ExtendedParameters, ULONG ParameterCount);
     * }
     */
    public static MemorySegment MapViewOfFile3FromApp(MemorySegment FileMapping, MemorySegment Process, MemorySegment BaseAddress, long Offset, long ViewSize, int AllocationType, int PageProtection, MemorySegment ExtendedParameters, int ParameterCount) {
        var mh$ = MapViewOfFile3FromApp$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(FileMapping, Process, BaseAddress, Offset, ViewSize, AllocationType, PageProtection, ExtendedParameters, ParameterCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateFileMapping2$MH() {
        return RuntimeHelper.requireNonNull(constants$687.const$1,"CreateFileMapping2");
    }
    /**
     * {@snippet :
     * HANDLE CreateFileMapping2(HANDLE File, SECURITY_ATTRIBUTES* SecurityAttributes, ULONG DesiredAccess, ULONG PageProtection, ULONG AllocationAttributes, ULONG64 MaximumSize, PCWSTR Name, MEM_EXTENDED_PARAMETER* ExtendedParameters, ULONG ParameterCount);
     * }
     */
    public static MemorySegment CreateFileMapping2(MemorySegment File, MemorySegment SecurityAttributes, int DesiredAccess, int PageProtection, int AllocationAttributes, long MaximumSize, MemorySegment Name, MemorySegment ExtendedParameters, int ParameterCount) {
        var mh$ = CreateFileMapping2$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(File, SecurityAttributes, DesiredAccess, PageProtection, AllocationAttributes, MaximumSize, Name, ExtendedParameters, ParameterCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AllocateUserPhysicalPages2$MH() {
        return RuntimeHelper.requireNonNull(constants$687.const$2,"AllocateUserPhysicalPages2");
    }
    /**
     * {@snippet :
     * BOOL AllocateUserPhysicalPages2(HANDLE ObjectHandle, PULONG_PTR NumberOfPages, PULONG_PTR PageArray, PMEM_EXTENDED_PARAMETER ExtendedParameters, ULONG ExtendedParameterCount);
     * }
     */
    public static int AllocateUserPhysicalPages2(MemorySegment ObjectHandle, MemorySegment NumberOfPages, MemorySegment PageArray, MemorySegment ExtendedParameters, int ExtendedParameterCount) {
        var mh$ = AllocateUserPhysicalPages2$MH();
        try {
            return (int)mh$.invokeExact(ObjectHandle, NumberOfPages, PageArray, ExtendedParameters, ExtendedParameterCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum WIN32_MEMORY_PARTITION_INFORMATION_CLASS.MemoryPartitionInfo = 0;
     * }
     */
    public static int MemoryPartitionInfo() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum WIN32_MEMORY_PARTITION_INFORMATION_CLASS.MemoryPartitionDedicatedMemoryInfo = 1;
     * }
     */
    public static int MemoryPartitionDedicatedMemoryInfo() {
        return (int)1L;
    }
    public static MethodHandle OpenDedicatedMemoryPartition$MH() {
        return RuntimeHelper.requireNonNull(constants$690.const$2,"OpenDedicatedMemoryPartition");
    }
    /**
     * {@snippet :
     * HANDLE OpenDedicatedMemoryPartition(HANDLE Partition, ULONG64 DedicatedMemoryTypeId, ACCESS_MASK DesiredAccess, BOOL InheritHandle);
     * }
     */
    public static MemorySegment OpenDedicatedMemoryPartition(MemorySegment Partition, long DedicatedMemoryTypeId, int DesiredAccess, int InheritHandle) {
        var mh$ = OpenDedicatedMemoryPartition$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(Partition, DedicatedMemoryTypeId, DesiredAccess, InheritHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryPartitionInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$690.const$3,"QueryPartitionInformation");
    }
    /**
     * {@snippet :
     * BOOL QueryPartitionInformation(HANDLE Partition, WIN32_MEMORY_PARTITION_INFORMATION_CLASS PartitionInformationClass, PVOID PartitionInformation, ULONG PartitionInformationLength);
     * }
     */
    public static int QueryPartitionInformation(MemorySegment Partition, int PartitionInformationClass, MemorySegment PartitionInformation, int PartitionInformationLength) {
        var mh$ = QueryPartitionInformation$MH();
        try {
            return (int)mh$.invokeExact(Partition, PartitionInformationClass, PartitionInformation, PartitionInformationLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsEnclaveTypeSupported$MH() {
        return RuntimeHelper.requireNonNull(constants$690.const$4,"IsEnclaveTypeSupported");
    }
    /**
     * {@snippet :
     * BOOL IsEnclaveTypeSupported(DWORD flEnclaveType);
     * }
     */
    public static int IsEnclaveTypeSupported(int flEnclaveType) {
        var mh$ = IsEnclaveTypeSupported$MH();
        try {
            return (int)mh$.invokeExact(flEnclaveType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateEnclave$MH() {
        return RuntimeHelper.requireNonNull(constants$690.const$6,"CreateEnclave");
    }
    /**
     * {@snippet :
     * LPVOID CreateEnclave(HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, SIZE_T dwInitialCommitment, DWORD flEnclaveType, LPCVOID lpEnclaveInformation, DWORD dwInfoLength, LPDWORD lpEnclaveError);
     * }
     */
    public static MemorySegment CreateEnclave(MemorySegment hProcess, MemorySegment lpAddress, long dwSize, long dwInitialCommitment, int flEnclaveType, MemorySegment lpEnclaveInformation, int dwInfoLength, MemorySegment lpEnclaveError) {
        var mh$ = CreateEnclave$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hProcess, lpAddress, dwSize, dwInitialCommitment, flEnclaveType, lpEnclaveInformation, dwInfoLength, lpEnclaveError);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadEnclaveData$MH() {
        return RuntimeHelper.requireNonNull(constants$691.const$1,"LoadEnclaveData");
    }
    /**
     * {@snippet :
     * BOOL LoadEnclaveData(HANDLE hProcess, LPVOID lpAddress, LPCVOID lpBuffer, SIZE_T nSize, DWORD flProtect, LPCVOID lpPageInformation, DWORD dwInfoLength, PSIZE_T lpNumberOfBytesWritten, LPDWORD lpEnclaveError);
     * }
     */
    public static int LoadEnclaveData(MemorySegment hProcess, MemorySegment lpAddress, MemorySegment lpBuffer, long nSize, int flProtect, MemorySegment lpPageInformation, int dwInfoLength, MemorySegment lpNumberOfBytesWritten, MemorySegment lpEnclaveError) {
        var mh$ = LoadEnclaveData$MH();
        try {
            return (int)mh$.invokeExact(hProcess, lpAddress, lpBuffer, nSize, flProtect, lpPageInformation, dwInfoLength, lpNumberOfBytesWritten, lpEnclaveError);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitializeEnclave$MH() {
        return RuntimeHelper.requireNonNull(constants$691.const$3,"InitializeEnclave");
    }
    /**
     * {@snippet :
     * BOOL InitializeEnclave(HANDLE hProcess, LPVOID lpAddress, LPCVOID lpEnclaveInformation, DWORD dwInfoLength, LPDWORD lpEnclaveError);
     * }
     */
    public static int InitializeEnclave(MemorySegment hProcess, MemorySegment lpAddress, MemorySegment lpEnclaveInformation, int dwInfoLength, MemorySegment lpEnclaveError) {
        var mh$ = InitializeEnclave$MH();
        try {
            return (int)mh$.invokeExact(hProcess, lpAddress, lpEnclaveInformation, dwInfoLength, lpEnclaveError);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadEnclaveImageA$MH() {
        return RuntimeHelper.requireNonNull(constants$691.const$4,"LoadEnclaveImageA");
    }
    /**
     * {@snippet :
     * BOOL LoadEnclaveImageA(LPVOID lpEnclaveAddress, LPCSTR lpImageName);
     * }
     */
    public static int LoadEnclaveImageA(MemorySegment lpEnclaveAddress, MemorySegment lpImageName) {
        var mh$ = LoadEnclaveImageA$MH();
        try {
            return (int)mh$.invokeExact(lpEnclaveAddress, lpImageName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadEnclaveImageW$MH() {
        return RuntimeHelper.requireNonNull(constants$691.const$5,"LoadEnclaveImageW");
    }
    /**
     * {@snippet :
     * BOOL LoadEnclaveImageW(LPVOID lpEnclaveAddress, LPCWSTR lpImageName);
     * }
     */
    public static int LoadEnclaveImageW(MemorySegment lpEnclaveAddress, MemorySegment lpImageName) {
        var mh$ = LoadEnclaveImageW$MH();
        try {
            return (int)mh$.invokeExact(lpEnclaveAddress, lpImageName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CallEnclave$MH() {
        return RuntimeHelper.requireNonNull(constants$692.const$0,"CallEnclave");
    }
    /**
     * {@snippet :
     * BOOL CallEnclave(LPENCLAVE_ROUTINE lpRoutine, LPVOID lpParameter, BOOL fWaitForThread, LPVOID* lpReturnValue);
     * }
     */
    public static int CallEnclave(MemorySegment lpRoutine, MemorySegment lpParameter, int fWaitForThread, MemorySegment lpReturnValue) {
        var mh$ = CallEnclave$MH();
        try {
            return (int)mh$.invokeExact(lpRoutine, lpParameter, fWaitForThread, lpReturnValue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TerminateEnclave$MH() {
        return RuntimeHelper.requireNonNull(constants$692.const$1,"TerminateEnclave");
    }
    /**
     * {@snippet :
     * BOOL TerminateEnclave(LPVOID lpAddress, BOOL fWait);
     * }
     */
    public static int TerminateEnclave(MemorySegment lpAddress, int fWait) {
        var mh$ = TerminateEnclave$MH();
        try {
            return (int)mh$.invokeExact(lpAddress, fWait);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteEnclave$MH() {
        return RuntimeHelper.requireNonNull(constants$692.const$2,"DeleteEnclave");
    }
    /**
     * {@snippet :
     * BOOL DeleteEnclave(LPVOID lpAddress);
     * }
     */
    public static int DeleteEnclave(MemorySegment lpAddress) {
        var mh$ = DeleteEnclave$MH();
        try {
            return (int)mh$.invokeExact(lpAddress);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueueUserWorkItem$MH() {
        return RuntimeHelper.requireNonNull(constants$692.const$3,"QueueUserWorkItem");
    }
    /**
     * {@snippet :
     * BOOL QueueUserWorkItem(LPTHREAD_START_ROUTINE Function, PVOID Context, ULONG Flags);
     * }
     */
    public static int QueueUserWorkItem(MemorySegment Function, MemorySegment Context, int Flags) {
        var mh$ = QueueUserWorkItem$MH();
        try {
            return (int)mh$.invokeExact(Function, Context, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnregisterWaitEx$MH() {
        return RuntimeHelper.requireNonNull(constants$692.const$4,"UnregisterWaitEx");
    }
    /**
     * {@snippet :
     * BOOL UnregisterWaitEx(HANDLE WaitHandle, HANDLE CompletionEvent);
     * }
     */
    public static int UnregisterWaitEx(MemorySegment WaitHandle, MemorySegment CompletionEvent) {
        var mh$ = UnregisterWaitEx$MH();
        try {
            return (int)mh$.invokeExact(WaitHandle, CompletionEvent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateTimerQueue$MH() {
        return RuntimeHelper.requireNonNull(constants$692.const$5,"CreateTimerQueue");
    }
    /**
     * {@snippet :
     * HANDLE CreateTimerQueue();
     * }
     */
    public static MemorySegment CreateTimerQueue() {
        var mh$ = CreateTimerQueue$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateTimerQueueTimer$MH() {
        return RuntimeHelper.requireNonNull(constants$693.const$0,"CreateTimerQueueTimer");
    }
    /**
     * {@snippet :
     * BOOL CreateTimerQueueTimer(PHANDLE phNewTimer, HANDLE TimerQueue, WAITORTIMERCALLBACK Callback, PVOID Parameter, DWORD DueTime, DWORD Period, ULONG Flags);
     * }
     */
    public static int CreateTimerQueueTimer(MemorySegment phNewTimer, MemorySegment TimerQueue, MemorySegment Callback, MemorySegment Parameter, int DueTime, int Period, int Flags) {
        var mh$ = CreateTimerQueueTimer$MH();
        try {
            return (int)mh$.invokeExact(phNewTimer, TimerQueue, Callback, Parameter, DueTime, Period, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ChangeTimerQueueTimer$MH() {
        return RuntimeHelper.requireNonNull(constants$693.const$1,"ChangeTimerQueueTimer");
    }
    /**
     * {@snippet :
     * BOOL ChangeTimerQueueTimer(HANDLE TimerQueue, HANDLE Timer, ULONG DueTime, ULONG Period);
     * }
     */
    public static int ChangeTimerQueueTimer(MemorySegment TimerQueue, MemorySegment Timer, int DueTime, int Period) {
        var mh$ = ChangeTimerQueueTimer$MH();
        try {
            return (int)mh$.invokeExact(TimerQueue, Timer, DueTime, Period);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteTimerQueueTimer$MH() {
        return RuntimeHelper.requireNonNull(constants$693.const$2,"DeleteTimerQueueTimer");
    }
    /**
     * {@snippet :
     * BOOL DeleteTimerQueueTimer(HANDLE TimerQueue, HANDLE Timer, HANDLE CompletionEvent);
     * }
     */
    public static int DeleteTimerQueueTimer(MemorySegment TimerQueue, MemorySegment Timer, MemorySegment CompletionEvent) {
        var mh$ = DeleteTimerQueueTimer$MH();
        try {
            return (int)mh$.invokeExact(TimerQueue, Timer, CompletionEvent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteTimerQueue$MH() {
        return RuntimeHelper.requireNonNull(constants$693.const$3,"DeleteTimerQueue");
    }
    /**
     * {@snippet :
     * BOOL DeleteTimerQueue(HANDLE TimerQueue);
     * }
     */
    public static int DeleteTimerQueue(MemorySegment TimerQueue) {
        var mh$ = DeleteTimerQueue$MH();
        try {
            return (int)mh$.invokeExact(TimerQueue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteTimerQueueEx$MH() {
        return RuntimeHelper.requireNonNull(constants$693.const$4,"DeleteTimerQueueEx");
    }
    /**
     * {@snippet :
     * BOOL DeleteTimerQueueEx(HANDLE TimerQueue, HANDLE CompletionEvent);
     * }
     */
    public static int DeleteTimerQueueEx(MemorySegment TimerQueue, MemorySegment CompletionEvent) {
        var mh$ = DeleteTimerQueueEx$MH();
        try {
            return (int)mh$.invokeExact(TimerQueue, CompletionEvent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateThreadpool$MH() {
        return RuntimeHelper.requireNonNull(constants$694.const$2,"CreateThreadpool");
    }
    /**
     * {@snippet :
     * PTP_POOL CreateThreadpool(PVOID reserved);
     * }
     */
    public static MemorySegment CreateThreadpool(MemorySegment reserved) {
        var mh$ = CreateThreadpool$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(reserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadpoolThreadMaximum$MH() {
        return RuntimeHelper.requireNonNull(constants$694.const$3,"SetThreadpoolThreadMaximum");
    }
    /**
     * {@snippet :
     * void SetThreadpoolThreadMaximum(PTP_POOL ptpp, DWORD cthrdMost);
     * }
     */
    public static void SetThreadpoolThreadMaximum(MemorySegment ptpp, int cthrdMost) {
        var mh$ = SetThreadpoolThreadMaximum$MH();
        try {
            mh$.invokeExact(ptpp, cthrdMost);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadpoolThreadMinimum$MH() {
        return RuntimeHelper.requireNonNull(constants$694.const$4,"SetThreadpoolThreadMinimum");
    }
    /**
     * {@snippet :
     * BOOL SetThreadpoolThreadMinimum(PTP_POOL ptpp, DWORD cthrdMic);
     * }
     */
    public static int SetThreadpoolThreadMinimum(MemorySegment ptpp, int cthrdMic) {
        var mh$ = SetThreadpoolThreadMinimum$MH();
        try {
            return (int)mh$.invokeExact(ptpp, cthrdMic);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadpoolStackInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$694.const$5,"SetThreadpoolStackInformation");
    }
    /**
     * {@snippet :
     * BOOL SetThreadpoolStackInformation(PTP_POOL ptpp, PTP_POOL_STACK_INFORMATION ptpsi);
     * }
     */
    public static int SetThreadpoolStackInformation(MemorySegment ptpp, MemorySegment ptpsi) {
        var mh$ = SetThreadpoolStackInformation$MH();
        try {
            return (int)mh$.invokeExact(ptpp, ptpsi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryThreadpoolStackInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$695.const$0,"QueryThreadpoolStackInformation");
    }
    /**
     * {@snippet :
     * BOOL QueryThreadpoolStackInformation(PTP_POOL ptpp, PTP_POOL_STACK_INFORMATION ptpsi);
     * }
     */
    public static int QueryThreadpoolStackInformation(MemorySegment ptpp, MemorySegment ptpsi) {
        var mh$ = QueryThreadpoolStackInformation$MH();
        try {
            return (int)mh$.invokeExact(ptpp, ptpsi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CloseThreadpool$MH() {
        return RuntimeHelper.requireNonNull(constants$695.const$1,"CloseThreadpool");
    }
    /**
     * {@snippet :
     * void CloseThreadpool(PTP_POOL ptpp);
     * }
     */
    public static void CloseThreadpool(MemorySegment ptpp) {
        var mh$ = CloseThreadpool$MH();
        try {
            mh$.invokeExact(ptpp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateThreadpoolCleanupGroup$MH() {
        return RuntimeHelper.requireNonNull(constants$695.const$2,"CreateThreadpoolCleanupGroup");
    }
    /**
     * {@snippet :
     * PTP_CLEANUP_GROUP CreateThreadpoolCleanupGroup();
     * }
     */
    public static MemorySegment CreateThreadpoolCleanupGroup() {
        var mh$ = CreateThreadpoolCleanupGroup$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CloseThreadpoolCleanupGroupMembers$MH() {
        return RuntimeHelper.requireNonNull(constants$695.const$3,"CloseThreadpoolCleanupGroupMembers");
    }
    /**
     * {@snippet :
     * void CloseThreadpoolCleanupGroupMembers(PTP_CLEANUP_GROUP ptpcg, BOOL fCancelPendingCallbacks, PVOID pvCleanupContext);
     * }
     */
    public static void CloseThreadpoolCleanupGroupMembers(MemorySegment ptpcg, int fCancelPendingCallbacks, MemorySegment pvCleanupContext) {
        var mh$ = CloseThreadpoolCleanupGroupMembers$MH();
        try {
            mh$.invokeExact(ptpcg, fCancelPendingCallbacks, pvCleanupContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CloseThreadpoolCleanupGroup$MH() {
        return RuntimeHelper.requireNonNull(constants$695.const$4,"CloseThreadpoolCleanupGroup");
    }
    /**
     * {@snippet :
     * void CloseThreadpoolCleanupGroup(PTP_CLEANUP_GROUP ptpcg);
     * }
     */
    public static void CloseThreadpoolCleanupGroup(MemorySegment ptpcg) {
        var mh$ = CloseThreadpoolCleanupGroup$MH();
        try {
            mh$.invokeExact(ptpcg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetEventWhenCallbackReturns$MH() {
        return RuntimeHelper.requireNonNull(constants$695.const$5,"SetEventWhenCallbackReturns");
    }
    /**
     * {@snippet :
     * void SetEventWhenCallbackReturns(PTP_CALLBACK_INSTANCE pci, HANDLE evt);
     * }
     */
    public static void SetEventWhenCallbackReturns(MemorySegment pci, MemorySegment evt) {
        var mh$ = SetEventWhenCallbackReturns$MH();
        try {
            mh$.invokeExact(pci, evt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReleaseSemaphoreWhenCallbackReturns$MH() {
        return RuntimeHelper.requireNonNull(constants$696.const$0,"ReleaseSemaphoreWhenCallbackReturns");
    }
    /**
     * {@snippet :
     * void ReleaseSemaphoreWhenCallbackReturns(PTP_CALLBACK_INSTANCE pci, HANDLE sem, DWORD crel);
     * }
     */
    public static void ReleaseSemaphoreWhenCallbackReturns(MemorySegment pci, MemorySegment sem, int crel) {
        var mh$ = ReleaseSemaphoreWhenCallbackReturns$MH();
        try {
            mh$.invokeExact(pci, sem, crel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReleaseMutexWhenCallbackReturns$MH() {
        return RuntimeHelper.requireNonNull(constants$696.const$1,"ReleaseMutexWhenCallbackReturns");
    }
    /**
     * {@snippet :
     * void ReleaseMutexWhenCallbackReturns(PTP_CALLBACK_INSTANCE pci, HANDLE mut);
     * }
     */
    public static void ReleaseMutexWhenCallbackReturns(MemorySegment pci, MemorySegment mut) {
        var mh$ = ReleaseMutexWhenCallbackReturns$MH();
        try {
            mh$.invokeExact(pci, mut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LeaveCriticalSectionWhenCallbackReturns$MH() {
        return RuntimeHelper.requireNonNull(constants$696.const$2,"LeaveCriticalSectionWhenCallbackReturns");
    }
    /**
     * {@snippet :
     * void LeaveCriticalSectionWhenCallbackReturns(PTP_CALLBACK_INSTANCE pci, PCRITICAL_SECTION pcs);
     * }
     */
    public static void LeaveCriticalSectionWhenCallbackReturns(MemorySegment pci, MemorySegment pcs) {
        var mh$ = LeaveCriticalSectionWhenCallbackReturns$MH();
        try {
            mh$.invokeExact(pci, pcs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FreeLibraryWhenCallbackReturns$MH() {
        return RuntimeHelper.requireNonNull(constants$696.const$3,"FreeLibraryWhenCallbackReturns");
    }
    /**
     * {@snippet :
     * void FreeLibraryWhenCallbackReturns(PTP_CALLBACK_INSTANCE pci, HMODULE mod);
     * }
     */
    public static void FreeLibraryWhenCallbackReturns(MemorySegment pci, MemorySegment mod) {
        var mh$ = FreeLibraryWhenCallbackReturns$MH();
        try {
            mh$.invokeExact(pci, mod);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CallbackMayRunLong$MH() {
        return RuntimeHelper.requireNonNull(constants$696.const$4,"CallbackMayRunLong");
    }
    /**
     * {@snippet :
     * BOOL CallbackMayRunLong(PTP_CALLBACK_INSTANCE pci);
     * }
     */
    public static int CallbackMayRunLong(MemorySegment pci) {
        var mh$ = CallbackMayRunLong$MH();
        try {
            return (int)mh$.invokeExact(pci);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DisassociateCurrentThreadFromCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$696.const$5,"DisassociateCurrentThreadFromCallback");
    }
    /**
     * {@snippet :
     * void DisassociateCurrentThreadFromCallback(PTP_CALLBACK_INSTANCE pci);
     * }
     */
    public static void DisassociateCurrentThreadFromCallback(MemorySegment pci) {
        var mh$ = DisassociateCurrentThreadFromCallback$MH();
        try {
            mh$.invokeExact(pci);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TrySubmitThreadpoolCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$697.const$0,"TrySubmitThreadpoolCallback");
    }
    /**
     * {@snippet :
     * BOOL TrySubmitThreadpoolCallback(PTP_SIMPLE_CALLBACK pfns, PVOID pv, PTP_CALLBACK_ENVIRON pcbe);
     * }
     */
    public static int TrySubmitThreadpoolCallback(MemorySegment pfns, MemorySegment pv, MemorySegment pcbe) {
        var mh$ = TrySubmitThreadpoolCallback$MH();
        try {
            return (int)mh$.invokeExact(pfns, pv, pcbe);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateThreadpoolWork$MH() {
        return RuntimeHelper.requireNonNull(constants$697.const$1,"CreateThreadpoolWork");
    }
    /**
     * {@snippet :
     * PTP_WORK CreateThreadpoolWork(PTP_WORK_CALLBACK pfnwk, PVOID pv, PTP_CALLBACK_ENVIRON pcbe);
     * }
     */
    public static MemorySegment CreateThreadpoolWork(MemorySegment pfnwk, MemorySegment pv, MemorySegment pcbe) {
        var mh$ = CreateThreadpoolWork$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(pfnwk, pv, pcbe);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SubmitThreadpoolWork$MH() {
        return RuntimeHelper.requireNonNull(constants$697.const$2,"SubmitThreadpoolWork");
    }
    /**
     * {@snippet :
     * void SubmitThreadpoolWork(PTP_WORK pwk);
     * }
     */
    public static void SubmitThreadpoolWork(MemorySegment pwk) {
        var mh$ = SubmitThreadpoolWork$MH();
        try {
            mh$.invokeExact(pwk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WaitForThreadpoolWorkCallbacks$MH() {
        return RuntimeHelper.requireNonNull(constants$697.const$3,"WaitForThreadpoolWorkCallbacks");
    }
    /**
     * {@snippet :
     * void WaitForThreadpoolWorkCallbacks(PTP_WORK pwk, BOOL fCancelPendingCallbacks);
     * }
     */
    public static void WaitForThreadpoolWorkCallbacks(MemorySegment pwk, int fCancelPendingCallbacks) {
        var mh$ = WaitForThreadpoolWorkCallbacks$MH();
        try {
            mh$.invokeExact(pwk, fCancelPendingCallbacks);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CloseThreadpoolWork$MH() {
        return RuntimeHelper.requireNonNull(constants$697.const$4,"CloseThreadpoolWork");
    }
    /**
     * {@snippet :
     * void CloseThreadpoolWork(PTP_WORK pwk);
     * }
     */
    public static void CloseThreadpoolWork(MemorySegment pwk) {
        var mh$ = CloseThreadpoolWork$MH();
        try {
            mh$.invokeExact(pwk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateThreadpoolTimer$MH() {
        return RuntimeHelper.requireNonNull(constants$697.const$5,"CreateThreadpoolTimer");
    }
    /**
     * {@snippet :
     * PTP_TIMER CreateThreadpoolTimer(PTP_TIMER_CALLBACK pfnti, PVOID pv, PTP_CALLBACK_ENVIRON pcbe);
     * }
     */
    public static MemorySegment CreateThreadpoolTimer(MemorySegment pfnti, MemorySegment pv, MemorySegment pcbe) {
        var mh$ = CreateThreadpoolTimer$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(pfnti, pv, pcbe);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadpoolTimer$MH() {
        return RuntimeHelper.requireNonNull(constants$698.const$1,"SetThreadpoolTimer");
    }
    /**
     * {@snippet :
     * void SetThreadpoolTimer(PTP_TIMER pti, PFILETIME pftDueTime, DWORD msPeriod, DWORD msWindowLength);
     * }
     */
    public static void SetThreadpoolTimer(MemorySegment pti, MemorySegment pftDueTime, int msPeriod, int msWindowLength) {
        var mh$ = SetThreadpoolTimer$MH();
        try {
            mh$.invokeExact(pti, pftDueTime, msPeriod, msWindowLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsThreadpoolTimerSet$MH() {
        return RuntimeHelper.requireNonNull(constants$698.const$2,"IsThreadpoolTimerSet");
    }
    /**
     * {@snippet :
     * BOOL IsThreadpoolTimerSet(PTP_TIMER pti);
     * }
     */
    public static int IsThreadpoolTimerSet(MemorySegment pti) {
        var mh$ = IsThreadpoolTimerSet$MH();
        try {
            return (int)mh$.invokeExact(pti);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WaitForThreadpoolTimerCallbacks$MH() {
        return RuntimeHelper.requireNonNull(constants$698.const$3,"WaitForThreadpoolTimerCallbacks");
    }
    /**
     * {@snippet :
     * void WaitForThreadpoolTimerCallbacks(PTP_TIMER pti, BOOL fCancelPendingCallbacks);
     * }
     */
    public static void WaitForThreadpoolTimerCallbacks(MemorySegment pti, int fCancelPendingCallbacks) {
        var mh$ = WaitForThreadpoolTimerCallbacks$MH();
        try {
            mh$.invokeExact(pti, fCancelPendingCallbacks);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CloseThreadpoolTimer$MH() {
        return RuntimeHelper.requireNonNull(constants$698.const$4,"CloseThreadpoolTimer");
    }
    /**
     * {@snippet :
     * void CloseThreadpoolTimer(PTP_TIMER pti);
     * }
     */
    public static void CloseThreadpoolTimer(MemorySegment pti) {
        var mh$ = CloseThreadpoolTimer$MH();
        try {
            mh$.invokeExact(pti);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateThreadpoolWait$MH() {
        return RuntimeHelper.requireNonNull(constants$698.const$5,"CreateThreadpoolWait");
    }
    /**
     * {@snippet :
     * PTP_WAIT CreateThreadpoolWait(PTP_WAIT_CALLBACK pfnwa, PVOID pv, PTP_CALLBACK_ENVIRON pcbe);
     * }
     */
    public static MemorySegment CreateThreadpoolWait(MemorySegment pfnwa, MemorySegment pv, MemorySegment pcbe) {
        var mh$ = CreateThreadpoolWait$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(pfnwa, pv, pcbe);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadpoolWait$MH() {
        return RuntimeHelper.requireNonNull(constants$699.const$0,"SetThreadpoolWait");
    }
    /**
     * {@snippet :
     * void SetThreadpoolWait(PTP_WAIT pwa, HANDLE h, PFILETIME pftTimeout);
     * }
     */
    public static void SetThreadpoolWait(MemorySegment pwa, MemorySegment h, MemorySegment pftTimeout) {
        var mh$ = SetThreadpoolWait$MH();
        try {
            mh$.invokeExact(pwa, h, pftTimeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WaitForThreadpoolWaitCallbacks$MH() {
        return RuntimeHelper.requireNonNull(constants$699.const$1,"WaitForThreadpoolWaitCallbacks");
    }
    /**
     * {@snippet :
     * void WaitForThreadpoolWaitCallbacks(PTP_WAIT pwa, BOOL fCancelPendingCallbacks);
     * }
     */
    public static void WaitForThreadpoolWaitCallbacks(MemorySegment pwa, int fCancelPendingCallbacks) {
        var mh$ = WaitForThreadpoolWaitCallbacks$MH();
        try {
            mh$.invokeExact(pwa, fCancelPendingCallbacks);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CloseThreadpoolWait$MH() {
        return RuntimeHelper.requireNonNull(constants$699.const$2,"CloseThreadpoolWait");
    }
    /**
     * {@snippet :
     * void CloseThreadpoolWait(PTP_WAIT pwa);
     * }
     */
    public static void CloseThreadpoolWait(MemorySegment pwa) {
        var mh$ = CloseThreadpoolWait$MH();
        try {
            mh$.invokeExact(pwa);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateThreadpoolIo$MH() {
        return RuntimeHelper.requireNonNull(constants$699.const$4,"CreateThreadpoolIo");
    }
    /**
     * {@snippet :
     * PTP_IO CreateThreadpoolIo(HANDLE fl, PTP_WIN32_IO_CALLBACK pfnio, PVOID pv, PTP_CALLBACK_ENVIRON pcbe);
     * }
     */
    public static MemorySegment CreateThreadpoolIo(MemorySegment fl, MemorySegment pfnio, MemorySegment pv, MemorySegment pcbe) {
        var mh$ = CreateThreadpoolIo$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(fl, pfnio, pv, pcbe);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle StartThreadpoolIo$MH() {
        return RuntimeHelper.requireNonNull(constants$699.const$5,"StartThreadpoolIo");
    }
    /**
     * {@snippet :
     * void StartThreadpoolIo(PTP_IO pio);
     * }
     */
    public static void StartThreadpoolIo(MemorySegment pio) {
        var mh$ = StartThreadpoolIo$MH();
        try {
            mh$.invokeExact(pio);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CancelThreadpoolIo$MH() {
        return RuntimeHelper.requireNonNull(constants$700.const$0,"CancelThreadpoolIo");
    }
    /**
     * {@snippet :
     * void CancelThreadpoolIo(PTP_IO pio);
     * }
     */
    public static void CancelThreadpoolIo(MemorySegment pio) {
        var mh$ = CancelThreadpoolIo$MH();
        try {
            mh$.invokeExact(pio);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WaitForThreadpoolIoCallbacks$MH() {
        return RuntimeHelper.requireNonNull(constants$700.const$1,"WaitForThreadpoolIoCallbacks");
    }
    /**
     * {@snippet :
     * void WaitForThreadpoolIoCallbacks(PTP_IO pio, BOOL fCancelPendingCallbacks);
     * }
     */
    public static void WaitForThreadpoolIoCallbacks(MemorySegment pio, int fCancelPendingCallbacks) {
        var mh$ = WaitForThreadpoolIoCallbacks$MH();
        try {
            mh$.invokeExact(pio, fCancelPendingCallbacks);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CloseThreadpoolIo$MH() {
        return RuntimeHelper.requireNonNull(constants$700.const$2,"CloseThreadpoolIo");
    }
    /**
     * {@snippet :
     * void CloseThreadpoolIo(PTP_IO pio);
     * }
     */
    public static void CloseThreadpoolIo(MemorySegment pio) {
        var mh$ = CloseThreadpoolIo$MH();
        try {
            mh$.invokeExact(pio);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadpoolTimerEx$MH() {
        return RuntimeHelper.requireNonNull(constants$700.const$3,"SetThreadpoolTimerEx");
    }
    /**
     * {@snippet :
     * BOOL SetThreadpoolTimerEx(PTP_TIMER pti, PFILETIME pftDueTime, DWORD msPeriod, DWORD msWindowLength);
     * }
     */
    public static int SetThreadpoolTimerEx(MemorySegment pti, MemorySegment pftDueTime, int msPeriod, int msWindowLength) {
        var mh$ = SetThreadpoolTimerEx$MH();
        try {
            return (int)mh$.invokeExact(pti, pftDueTime, msPeriod, msWindowLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadpoolWaitEx$MH() {
        return RuntimeHelper.requireNonNull(constants$700.const$4,"SetThreadpoolWaitEx");
    }
    /**
     * {@snippet :
     * BOOL SetThreadpoolWaitEx(PTP_WAIT pwa, HANDLE h, PFILETIME pftTimeout, PVOID Reserved);
     * }
     */
    public static int SetThreadpoolWaitEx(MemorySegment pwa, MemorySegment h, MemorySegment pftTimeout, MemorySegment Reserved) {
        var mh$ = SetThreadpoolWaitEx$MH();
        try {
            return (int)mh$.invokeExact(pwa, h, pftTimeout, Reserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsProcessInJob$MH() {
        return RuntimeHelper.requireNonNull(constants$700.const$5,"IsProcessInJob");
    }
    /**
     * {@snippet :
     * BOOL IsProcessInJob(HANDLE ProcessHandle, HANDLE JobHandle, PBOOL Result);
     * }
     */
    public static int IsProcessInJob(MemorySegment ProcessHandle, MemorySegment JobHandle, MemorySegment Result) {
        var mh$ = IsProcessInJob$MH();
        try {
            return (int)mh$.invokeExact(ProcessHandle, JobHandle, Result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateJobObjectW$MH() {
        return RuntimeHelper.requireNonNull(constants$702.const$1,"CreateJobObjectW");
    }
    /**
     * {@snippet :
     * HANDLE CreateJobObjectW(LPSECURITY_ATTRIBUTES lpJobAttributes, LPCWSTR lpName);
     * }
     */
    public static MemorySegment CreateJobObjectW(MemorySegment lpJobAttributes, MemorySegment lpName) {
        var mh$ = CreateJobObjectW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpJobAttributes, lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FreeMemoryJobObject$MH() {
        return RuntimeHelper.requireNonNull(constants$702.const$2,"FreeMemoryJobObject");
    }
    /**
     * {@snippet :
     * void FreeMemoryJobObject(void* Buffer);
     * }
     */
    public static void FreeMemoryJobObject(MemorySegment Buffer) {
        var mh$ = FreeMemoryJobObject$MH();
        try {
            mh$.invokeExact(Buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenJobObjectW$MH() {
        return RuntimeHelper.requireNonNull(constants$702.const$3,"OpenJobObjectW");
    }
    /**
     * {@snippet :
     * HANDLE OpenJobObjectW(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCWSTR lpName);
     * }
     */
    public static MemorySegment OpenJobObjectW(int dwDesiredAccess, int bInheritHandle, MemorySegment lpName) {
        var mh$ = OpenJobObjectW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(dwDesiredAccess, bInheritHandle, lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AssignProcessToJobObject$MH() {
        return RuntimeHelper.requireNonNull(constants$702.const$4,"AssignProcessToJobObject");
    }
    /**
     * {@snippet :
     * BOOL AssignProcessToJobObject(HANDLE hJob, HANDLE hProcess);
     * }
     */
    public static int AssignProcessToJobObject(MemorySegment hJob, MemorySegment hProcess) {
        var mh$ = AssignProcessToJobObject$MH();
        try {
            return (int)mh$.invokeExact(hJob, hProcess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TerminateJobObject$MH() {
        return RuntimeHelper.requireNonNull(constants$702.const$5,"TerminateJobObject");
    }
    /**
     * {@snippet :
     * BOOL TerminateJobObject(HANDLE hJob, UINT uExitCode);
     * }
     */
    public static int TerminateJobObject(MemorySegment hJob, int uExitCode) {
        var mh$ = TerminateJobObject$MH();
        try {
            return (int)mh$.invokeExact(hJob, uExitCode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetInformationJobObject$MH() {
        return RuntimeHelper.requireNonNull(constants$703.const$0,"SetInformationJobObject");
    }
    /**
     * {@snippet :
     * BOOL SetInformationJobObject(HANDLE hJob, JOBOBJECTINFOCLASS JobObjectInformationClass, LPVOID lpJobObjectInformation, DWORD cbJobObjectInformationLength);
     * }
     */
    public static int SetInformationJobObject(MemorySegment hJob, int JobObjectInformationClass, MemorySegment lpJobObjectInformation, int cbJobObjectInformationLength) {
        var mh$ = SetInformationJobObject$MH();
        try {
            return (int)mh$.invokeExact(hJob, JobObjectInformationClass, lpJobObjectInformation, cbJobObjectInformationLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetIoRateControlInformationJobObject$MH() {
        return RuntimeHelper.requireNonNull(constants$703.const$1,"SetIoRateControlInformationJobObject");
    }
    /**
     * {@snippet :
     * DWORD SetIoRateControlInformationJobObject(HANDLE hJob, JOBOBJECT_IO_RATE_CONTROL_INFORMATION* IoRateControlInfo);
     * }
     */
    public static int SetIoRateControlInformationJobObject(MemorySegment hJob, MemorySegment IoRateControlInfo) {
        var mh$ = SetIoRateControlInformationJobObject$MH();
        try {
            return (int)mh$.invokeExact(hJob, IoRateControlInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryInformationJobObject$MH() {
        return RuntimeHelper.requireNonNull(constants$703.const$3,"QueryInformationJobObject");
    }
    /**
     * {@snippet :
     * BOOL QueryInformationJobObject(HANDLE hJob, JOBOBJECTINFOCLASS JobObjectInformationClass, LPVOID lpJobObjectInformation, DWORD cbJobObjectInformationLength, LPDWORD lpReturnLength);
     * }
     */
    public static int QueryInformationJobObject(MemorySegment hJob, int JobObjectInformationClass, MemorySegment lpJobObjectInformation, int cbJobObjectInformationLength, MemorySegment lpReturnLength) {
        var mh$ = QueryInformationJobObject$MH();
        try {
            return (int)mh$.invokeExact(hJob, JobObjectInformationClass, lpJobObjectInformation, cbJobObjectInformationLength, lpReturnLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryIoRateControlInformationJobObject$MH() {
        return RuntimeHelper.requireNonNull(constants$703.const$4,"QueryIoRateControlInformationJobObject");
    }
    /**
     * {@snippet :
     * DWORD QueryIoRateControlInformationJobObject(HANDLE hJob, PCWSTR VolumeName, JOBOBJECT_IO_RATE_CONTROL_INFORMATION** InfoBlocks, ULONG* InfoBlockCount);
     * }
     */
    public static int QueryIoRateControlInformationJobObject(MemorySegment hJob, MemorySegment VolumeName, MemorySegment InfoBlocks, MemorySegment InfoBlockCount) {
        var mh$ = QueryIoRateControlInformationJobObject$MH();
        try {
            return (int)mh$.invokeExact(hJob, VolumeName, InfoBlocks, InfoBlockCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Wow64EnableWow64FsRedirection$MH() {
        return RuntimeHelper.requireNonNull(constants$703.const$6,"Wow64EnableWow64FsRedirection");
    }
    /**
     * {@snippet :
     * BOOLEAN Wow64EnableWow64FsRedirection(BOOLEAN Wow64FsEnableRedirection);
     * }
     */
    public static byte Wow64EnableWow64FsRedirection(byte Wow64FsEnableRedirection) {
        var mh$ = Wow64EnableWow64FsRedirection$MH();
        try {
            return (byte)mh$.invokeExact(Wow64FsEnableRedirection);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Wow64DisableWow64FsRedirection$MH() {
        return RuntimeHelper.requireNonNull(constants$704.const$0,"Wow64DisableWow64FsRedirection");
    }
    /**
     * {@snippet :
     * BOOL Wow64DisableWow64FsRedirection(PVOID* OldValue);
     * }
     */
    public static int Wow64DisableWow64FsRedirection(MemorySegment OldValue) {
        var mh$ = Wow64DisableWow64FsRedirection$MH();
        try {
            return (int)mh$.invokeExact(OldValue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Wow64RevertWow64FsRedirection$MH() {
        return RuntimeHelper.requireNonNull(constants$704.const$1,"Wow64RevertWow64FsRedirection");
    }
    /**
     * {@snippet :
     * BOOL Wow64RevertWow64FsRedirection(PVOID OlValue);
     * }
     */
    public static int Wow64RevertWow64FsRedirection(MemorySegment OlValue) {
        var mh$ = Wow64RevertWow64FsRedirection$MH();
        try {
            return (int)mh$.invokeExact(OlValue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsWow64Process$MH() {
        return RuntimeHelper.requireNonNull(constants$704.const$2,"IsWow64Process");
    }
    /**
     * {@snippet :
     * BOOL IsWow64Process(HANDLE hProcess, PBOOL Wow64Process);
     * }
     */
    public static int IsWow64Process(MemorySegment hProcess, MemorySegment Wow64Process) {
        var mh$ = IsWow64Process$MH();
        try {
            return (int)mh$.invokeExact(hProcess, Wow64Process);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemWow64DirectoryA$MH() {
        return RuntimeHelper.requireNonNull(constants$704.const$3,"GetSystemWow64DirectoryA");
    }
    /**
     * {@snippet :
     * UINT GetSystemWow64DirectoryA(LPSTR lpBuffer, UINT uSize);
     * }
     */
    public static int GetSystemWow64DirectoryA(MemorySegment lpBuffer, int uSize) {
        var mh$ = GetSystemWow64DirectoryA$MH();
        try {
            return (int)mh$.invokeExact(lpBuffer, uSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemWow64DirectoryW$MH() {
        return RuntimeHelper.requireNonNull(constants$704.const$4,"GetSystemWow64DirectoryW");
    }
    /**
     * {@snippet :
     * UINT GetSystemWow64DirectoryW(LPWSTR lpBuffer, UINT uSize);
     * }
     */
    public static int GetSystemWow64DirectoryW(MemorySegment lpBuffer, int uSize) {
        var mh$ = GetSystemWow64DirectoryW$MH();
        try {
            return (int)mh$.invokeExact(lpBuffer, uSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Wow64SetThreadDefaultGuestMachine$MH() {
        return RuntimeHelper.requireNonNull(constants$704.const$5,"Wow64SetThreadDefaultGuestMachine");
    }
    /**
     * {@snippet :
     * USHORT Wow64SetThreadDefaultGuestMachine(USHORT Machine);
     * }
     */
    public static short Wow64SetThreadDefaultGuestMachine(short Machine) {
        var mh$ = Wow64SetThreadDefaultGuestMachine$MH();
        try {
            return (short)mh$.invokeExact(Machine);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsWow64Process2$MH() {
        return RuntimeHelper.requireNonNull(constants$705.const$0,"IsWow64Process2");
    }
    /**
     * {@snippet :
     * BOOL IsWow64Process2(HANDLE hProcess, USHORT* pProcessMachine, USHORT* pNativeMachine);
     * }
     */
    public static int IsWow64Process2(MemorySegment hProcess, MemorySegment pProcessMachine, MemorySegment pNativeMachine) {
        var mh$ = IsWow64Process2$MH();
        try {
            return (int)mh$.invokeExact(hProcess, pProcessMachine, pNativeMachine);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemWow64Directory2A$MH() {
        return RuntimeHelper.requireNonNull(constants$705.const$2,"GetSystemWow64Directory2A");
    }
    /**
     * {@snippet :
     * UINT GetSystemWow64Directory2A(LPSTR lpBuffer, UINT uSize, WORD ImageFileMachineType);
     * }
     */
    public static int GetSystemWow64Directory2A(MemorySegment lpBuffer, int uSize, short ImageFileMachineType) {
        var mh$ = GetSystemWow64Directory2A$MH();
        try {
            return (int)mh$.invokeExact(lpBuffer, uSize, ImageFileMachineType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemWow64Directory2W$MH() {
        return RuntimeHelper.requireNonNull(constants$705.const$3,"GetSystemWow64Directory2W");
    }
    /**
     * {@snippet :
     * UINT GetSystemWow64Directory2W(LPWSTR lpBuffer, UINT uSize, WORD ImageFileMachineType);
     * }
     */
    public static int GetSystemWow64Directory2W(MemorySegment lpBuffer, int uSize, short ImageFileMachineType) {
        var mh$ = GetSystemWow64Directory2W$MH();
        try {
            return (int)mh$.invokeExact(lpBuffer, uSize, ImageFileMachineType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsWow64GuestMachineSupported$MH() {
        return RuntimeHelper.requireNonNull(constants$705.const$4,"IsWow64GuestMachineSupported");
    }
    /**
     * {@snippet :
     * HRESULT IsWow64GuestMachineSupported(USHORT WowGuestMachine, BOOL* MachineIsSupported);
     * }
     */
    public static int IsWow64GuestMachineSupported(short WowGuestMachine, MemorySegment MachineIsSupported) {
        var mh$ = IsWow64GuestMachineSupported$MH();
        try {
            return (int)mh$.invokeExact(WowGuestMachine, MachineIsSupported);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Wow64GetThreadContext$MH() {
        return RuntimeHelper.requireNonNull(constants$705.const$5,"Wow64GetThreadContext");
    }
    /**
     * {@snippet :
     * BOOL Wow64GetThreadContext(HANDLE hThread, PWOW64_CONTEXT lpContext);
     * }
     */
    public static int Wow64GetThreadContext(MemorySegment hThread, MemorySegment lpContext) {
        var mh$ = Wow64GetThreadContext$MH();
        try {
            return (int)mh$.invokeExact(hThread, lpContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}



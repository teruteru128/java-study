// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _KCRM_PROTOCOL_BLOB {
 *     CRM_PROTOCOL_ID ProtocolId;
 *     ULONG StaticInfoLength;
 *     ULONG TransactionIdInfoLength;
 *     ULONG Unused1;
 *     ULONG Unused2;
 * };
 * }
 */
public class _KCRM_PROTOCOL_BLOB {

    public static MemoryLayout $LAYOUT() {
        return constants$525.const$2;
    }
    public static MemorySegment ProtocolId$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    public static VarHandle StaticInfoLength$VH() {
        return constants$525.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG StaticInfoLength;
     * }
     */
    public static int StaticInfoLength$get(MemorySegment seg) {
        return (int)constants$525.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG StaticInfoLength;
     * }
     */
    public static void StaticInfoLength$set(MemorySegment seg, int x) {
        constants$525.const$3.set(seg, x);
    }
    public static int StaticInfoLength$get(MemorySegment seg, long index) {
        return (int)constants$525.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void StaticInfoLength$set(MemorySegment seg, long index, int x) {
        constants$525.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle TransactionIdInfoLength$VH() {
        return constants$525.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG TransactionIdInfoLength;
     * }
     */
    public static int TransactionIdInfoLength$get(MemorySegment seg) {
        return (int)constants$525.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG TransactionIdInfoLength;
     * }
     */
    public static void TransactionIdInfoLength$set(MemorySegment seg, int x) {
        constants$525.const$4.set(seg, x);
    }
    public static int TransactionIdInfoLength$get(MemorySegment seg, long index) {
        return (int)constants$525.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void TransactionIdInfoLength$set(MemorySegment seg, long index, int x) {
        constants$525.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Unused1$VH() {
        return constants$525.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG Unused1;
     * }
     */
    public static int Unused1$get(MemorySegment seg) {
        return (int)constants$525.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG Unused1;
     * }
     */
    public static void Unused1$set(MemorySegment seg, int x) {
        constants$525.const$5.set(seg, x);
    }
    public static int Unused1$get(MemorySegment seg, long index) {
        return (int)constants$525.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void Unused1$set(MemorySegment seg, long index, int x) {
        constants$525.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Unused2$VH() {
        return constants$526.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG Unused2;
     * }
     */
    public static int Unused2$get(MemorySegment seg) {
        return (int)constants$526.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG Unused2;
     * }
     */
    public static void Unused2$set(MemorySegment seg, int x) {
        constants$526.const$0.set(seg, x);
    }
    public static int Unused2$get(MemorySegment seg, long index) {
        return (int)constants$526.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Unused2$set(MemorySegment seg, long index, int x) {
        constants$526.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



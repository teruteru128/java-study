// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _PROPSHEETHEADERA_V2 {
 *     DWORD dwSize;
 *     DWORD dwFlags;
 *     HWND hwndParent;
 *     HINSTANCE hInstance;
 *     union {
 *         HICON hIcon;
 *         LPCSTR pszIcon;
 *     };
 *     LPCSTR pszCaption;
 *     UINT nPages;
 *     union {
 *         UINT nStartPage;
 *         LPCSTR pStartPage;
 *     };
 *     union {
 *         LPCPROPSHEETPAGEA ppsp;
 *         HPROPSHEETPAGE* phpage;
 *     };
 *     PFNPROPSHEETCALLBACK pfnCallback;
 *     union {
 *         HBITMAP hbmWatermark;
 *         LPCSTR pszbmWatermark;
 *     };
 *     HPALETTE hplWatermark;
 *     union {
 *         HBITMAP hbmHeader;
 *         LPCSTR pszbmHeader;
 *     };
 * };
 * }
 */
public class _PROPSHEETHEADERA_V2 {

    public static MemoryLayout $LAYOUT() {
        return constants$2810.const$3;
    }
    public static VarHandle dwSize$VH() {
        return constants$2810.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwSize;
     * }
     */
    public static int dwSize$get(MemorySegment seg) {
        return (int)constants$2810.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwSize;
     * }
     */
    public static void dwSize$set(MemorySegment seg, int x) {
        constants$2810.const$4.set(seg, x);
    }
    public static int dwSize$get(MemorySegment seg, long index) {
        return (int)constants$2810.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void dwSize$set(MemorySegment seg, long index, int x) {
        constants$2810.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwFlags$VH() {
        return constants$2810.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwFlags;
     * }
     */
    public static int dwFlags$get(MemorySegment seg) {
        return (int)constants$2810.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwFlags;
     * }
     */
    public static void dwFlags$set(MemorySegment seg, int x) {
        constants$2810.const$5.set(seg, x);
    }
    public static int dwFlags$get(MemorySegment seg, long index) {
        return (int)constants$2810.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void dwFlags$set(MemorySegment seg, long index, int x) {
        constants$2810.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hwndParent$VH() {
        return constants$2811.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HWND hwndParent;
     * }
     */
    public static MemorySegment hwndParent$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2811.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HWND hwndParent;
     * }
     */
    public static void hwndParent$set(MemorySegment seg, MemorySegment x) {
        constants$2811.const$0.set(seg, x);
    }
    public static MemorySegment hwndParent$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2811.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void hwndParent$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2811.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hInstance$VH() {
        return constants$2811.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HINSTANCE hInstance;
     * }
     */
    public static MemorySegment hInstance$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2811.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HINSTANCE hInstance;
     * }
     */
    public static void hInstance$set(MemorySegment seg, MemorySegment x) {
        constants$2811.const$1.set(seg, x);
    }
    public static MemorySegment hInstance$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2811.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void hInstance$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2811.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hIcon$VH() {
        return constants$2811.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HICON hIcon;
     * }
     */
    public static MemorySegment hIcon$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2811.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HICON hIcon;
     * }
     */
    public static void hIcon$set(MemorySegment seg, MemorySegment x) {
        constants$2811.const$2.set(seg, x);
    }
    public static MemorySegment hIcon$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2811.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void hIcon$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2811.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pszIcon$VH() {
        return constants$2811.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPCSTR pszIcon;
     * }
     */
    public static MemorySegment pszIcon$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2811.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPCSTR pszIcon;
     * }
     */
    public static void pszIcon$set(MemorySegment seg, MemorySegment x) {
        constants$2811.const$3.set(seg, x);
    }
    public static MemorySegment pszIcon$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2811.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void pszIcon$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2811.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pszCaption$VH() {
        return constants$2811.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPCSTR pszCaption;
     * }
     */
    public static MemorySegment pszCaption$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2811.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPCSTR pszCaption;
     * }
     */
    public static void pszCaption$set(MemorySegment seg, MemorySegment x) {
        constants$2811.const$4.set(seg, x);
    }
    public static MemorySegment pszCaption$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2811.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void pszCaption$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2811.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nPages$VH() {
        return constants$2811.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * UINT nPages;
     * }
     */
    public static int nPages$get(MemorySegment seg) {
        return (int)constants$2811.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * UINT nPages;
     * }
     */
    public static void nPages$set(MemorySegment seg, int x) {
        constants$2811.const$5.set(seg, x);
    }
    public static int nPages$get(MemorySegment seg, long index) {
        return (int)constants$2811.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void nPages$set(MemorySegment seg, long index, int x) {
        constants$2811.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nStartPage$VH() {
        return constants$2812.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * UINT nStartPage;
     * }
     */
    public static int nStartPage$get(MemorySegment seg) {
        return (int)constants$2812.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * UINT nStartPage;
     * }
     */
    public static void nStartPage$set(MemorySegment seg, int x) {
        constants$2812.const$0.set(seg, x);
    }
    public static int nStartPage$get(MemorySegment seg, long index) {
        return (int)constants$2812.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void nStartPage$set(MemorySegment seg, long index, int x) {
        constants$2812.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pStartPage$VH() {
        return constants$2812.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPCSTR pStartPage;
     * }
     */
    public static MemorySegment pStartPage$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2812.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPCSTR pStartPage;
     * }
     */
    public static void pStartPage$set(MemorySegment seg, MemorySegment x) {
        constants$2812.const$1.set(seg, x);
    }
    public static MemorySegment pStartPage$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2812.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void pStartPage$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2812.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ppsp$VH() {
        return constants$2812.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPCPROPSHEETPAGEA ppsp;
     * }
     */
    public static MemorySegment ppsp$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2812.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPCPROPSHEETPAGEA ppsp;
     * }
     */
    public static void ppsp$set(MemorySegment seg, MemorySegment x) {
        constants$2812.const$2.set(seg, x);
    }
    public static MemorySegment ppsp$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2812.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void ppsp$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2812.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle phpage$VH() {
        return constants$2812.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HPROPSHEETPAGE* phpage;
     * }
     */
    public static MemorySegment phpage$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2812.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HPROPSHEETPAGE* phpage;
     * }
     */
    public static void phpage$set(MemorySegment seg, MemorySegment x) {
        constants$2812.const$3.set(seg, x);
    }
    public static MemorySegment phpage$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2812.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void phpage$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2812.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pfnCallback$VH() {
        return constants$2812.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PFNPROPSHEETCALLBACK pfnCallback;
     * }
     */
    public static MemorySegment pfnCallback$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2812.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PFNPROPSHEETCALLBACK pfnCallback;
     * }
     */
    public static void pfnCallback$set(MemorySegment seg, MemorySegment x) {
        constants$2812.const$4.set(seg, x);
    }
    public static MemorySegment pfnCallback$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2812.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void pfnCallback$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2812.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static PFNPROPSHEETCALLBACK pfnCallback(MemorySegment segment, Arena scope) {
        return PFNPROPSHEETCALLBACK.ofAddress(pfnCallback$get(segment), scope);
    }
    public static VarHandle hbmWatermark$VH() {
        return constants$2812.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HBITMAP hbmWatermark;
     * }
     */
    public static MemorySegment hbmWatermark$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2812.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HBITMAP hbmWatermark;
     * }
     */
    public static void hbmWatermark$set(MemorySegment seg, MemorySegment x) {
        constants$2812.const$5.set(seg, x);
    }
    public static MemorySegment hbmWatermark$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2812.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void hbmWatermark$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2812.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pszbmWatermark$VH() {
        return constants$2813.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPCSTR pszbmWatermark;
     * }
     */
    public static MemorySegment pszbmWatermark$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2813.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPCSTR pszbmWatermark;
     * }
     */
    public static void pszbmWatermark$set(MemorySegment seg, MemorySegment x) {
        constants$2813.const$0.set(seg, x);
    }
    public static MemorySegment pszbmWatermark$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2813.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void pszbmWatermark$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2813.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hplWatermark$VH() {
        return constants$2813.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HPALETTE hplWatermark;
     * }
     */
    public static MemorySegment hplWatermark$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2813.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HPALETTE hplWatermark;
     * }
     */
    public static void hplWatermark$set(MemorySegment seg, MemorySegment x) {
        constants$2813.const$1.set(seg, x);
    }
    public static MemorySegment hplWatermark$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2813.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void hplWatermark$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2813.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hbmHeader$VH() {
        return constants$2813.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HBITMAP hbmHeader;
     * }
     */
    public static MemorySegment hbmHeader$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2813.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HBITMAP hbmHeader;
     * }
     */
    public static void hbmHeader$set(MemorySegment seg, MemorySegment x) {
        constants$2813.const$2.set(seg, x);
    }
    public static MemorySegment hbmHeader$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2813.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void hbmHeader$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2813.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pszbmHeader$VH() {
        return constants$2813.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPCSTR pszbmHeader;
     * }
     */
    public static MemorySegment pszbmHeader$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2813.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPCSTR pszbmHeader;
     * }
     */
    public static void pszbmHeader$set(MemorySegment seg, MemorySegment x) {
        constants$2813.const$3.set(seg, x);
    }
    public static MemorySegment pszbmHeader$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2813.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void pszbmHeader$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2813.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



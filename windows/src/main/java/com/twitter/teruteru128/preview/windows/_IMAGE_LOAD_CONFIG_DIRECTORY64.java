// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _IMAGE_LOAD_CONFIG_DIRECTORY64 {
 *     DWORD Size;
 *     DWORD TimeDateStamp;
 *     WORD MajorVersion;
 *     WORD MinorVersion;
 *     DWORD GlobalFlagsClear;
 *     DWORD GlobalFlagsSet;
 *     DWORD CriticalSectionDefaultTimeout;
 *     ULONGLONG DeCommitFreeBlockThreshold;
 *     ULONGLONG DeCommitTotalFreeThreshold;
 *     ULONGLONG LockPrefixTable;
 *     ULONGLONG MaximumAllocationSize;
 *     ULONGLONG VirtualMemoryThreshold;
 *     ULONGLONG ProcessAffinityMask;
 *     DWORD ProcessHeapFlags;
 *     WORD CSDVersion;
 *     WORD DependentLoadFlags;
 *     ULONGLONG EditList;
 *     ULONGLONG SecurityCookie;
 *     ULONGLONG SEHandlerTable;
 *     ULONGLONG SEHandlerCount;
 *     ULONGLONG GuardCFCheckFunctionPointer;
 *     ULONGLONG GuardCFDispatchFunctionPointer;
 *     ULONGLONG GuardCFFunctionTable;
 *     ULONGLONG GuardCFFunctionCount;
 *     DWORD GuardFlags;
 *     IMAGE_LOAD_CONFIG_CODE_INTEGRITY CodeIntegrity;
 *     ULONGLONG GuardAddressTakenIatEntryTable;
 *     ULONGLONG GuardAddressTakenIatEntryCount;
 *     ULONGLONG GuardLongJumpTargetTable;
 *     ULONGLONG GuardLongJumpTargetCount;
 *     ULONGLONG DynamicValueRelocTable;
 *     ULONGLONG CHPEMetadataPointer;
 *     ULONGLONG GuardRFFailureRoutine;
 *     ULONGLONG GuardRFFailureRoutineFunctionPointer;
 *     DWORD DynamicValueRelocTableOffset;
 *     WORD DynamicValueRelocTableSection;
 *     WORD Reserved2;
 *     ULONGLONG GuardRFVerifyStackPointerFunctionPointer;
 *     DWORD HotPatchTableOffset;
 *     DWORD Reserved3;
 *     ULONGLONG EnclaveConfigurationPointer;
 *     ULONGLONG VolatileMetadataPointer;
 *     ULONGLONG GuardEHContinuationTable;
 *     ULONGLONG GuardEHContinuationCount;
 *     ULONGLONG GuardXFGCheckFunctionPointer;
 *     ULONGLONG GuardXFGDispatchFunctionPointer;
 *     ULONGLONG GuardXFGTableDispatchFunctionPointer;
 *     ULONGLONG CastGuardOsDeterminedFailureMode;
 * };
 * }
 */
public class _IMAGE_LOAD_CONFIG_DIRECTORY64 {

    public static MemoryLayout $LAYOUT() {
        return constants$430.const$5;
    }
    public static VarHandle Size$VH() {
        return constants$431.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Size;
     * }
     */
    public static int Size$get(MemorySegment seg) {
        return (int)constants$431.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Size;
     * }
     */
    public static void Size$set(MemorySegment seg, int x) {
        constants$431.const$0.set(seg, x);
    }
    public static int Size$get(MemorySegment seg, long index) {
        return (int)constants$431.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Size$set(MemorySegment seg, long index, int x) {
        constants$431.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle TimeDateStamp$VH() {
        return constants$431.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD TimeDateStamp;
     * }
     */
    public static int TimeDateStamp$get(MemorySegment seg) {
        return (int)constants$431.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD TimeDateStamp;
     * }
     */
    public static void TimeDateStamp$set(MemorySegment seg, int x) {
        constants$431.const$1.set(seg, x);
    }
    public static int TimeDateStamp$get(MemorySegment seg, long index) {
        return (int)constants$431.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void TimeDateStamp$set(MemorySegment seg, long index, int x) {
        constants$431.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MajorVersion$VH() {
        return constants$431.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD MajorVersion;
     * }
     */
    public static short MajorVersion$get(MemorySegment seg) {
        return (short)constants$431.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD MajorVersion;
     * }
     */
    public static void MajorVersion$set(MemorySegment seg, short x) {
        constants$431.const$2.set(seg, x);
    }
    public static short MajorVersion$get(MemorySegment seg, long index) {
        return (short)constants$431.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void MajorVersion$set(MemorySegment seg, long index, short x) {
        constants$431.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MinorVersion$VH() {
        return constants$431.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD MinorVersion;
     * }
     */
    public static short MinorVersion$get(MemorySegment seg) {
        return (short)constants$431.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD MinorVersion;
     * }
     */
    public static void MinorVersion$set(MemorySegment seg, short x) {
        constants$431.const$3.set(seg, x);
    }
    public static short MinorVersion$get(MemorySegment seg, long index) {
        return (short)constants$431.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void MinorVersion$set(MemorySegment seg, long index, short x) {
        constants$431.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle GlobalFlagsClear$VH() {
        return constants$431.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD GlobalFlagsClear;
     * }
     */
    public static int GlobalFlagsClear$get(MemorySegment seg) {
        return (int)constants$431.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD GlobalFlagsClear;
     * }
     */
    public static void GlobalFlagsClear$set(MemorySegment seg, int x) {
        constants$431.const$4.set(seg, x);
    }
    public static int GlobalFlagsClear$get(MemorySegment seg, long index) {
        return (int)constants$431.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void GlobalFlagsClear$set(MemorySegment seg, long index, int x) {
        constants$431.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle GlobalFlagsSet$VH() {
        return constants$431.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD GlobalFlagsSet;
     * }
     */
    public static int GlobalFlagsSet$get(MemorySegment seg) {
        return (int)constants$431.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD GlobalFlagsSet;
     * }
     */
    public static void GlobalFlagsSet$set(MemorySegment seg, int x) {
        constants$431.const$5.set(seg, x);
    }
    public static int GlobalFlagsSet$get(MemorySegment seg, long index) {
        return (int)constants$431.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GlobalFlagsSet$set(MemorySegment seg, long index, int x) {
        constants$431.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle CriticalSectionDefaultTimeout$VH() {
        return constants$432.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD CriticalSectionDefaultTimeout;
     * }
     */
    public static int CriticalSectionDefaultTimeout$get(MemorySegment seg) {
        return (int)constants$432.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD CriticalSectionDefaultTimeout;
     * }
     */
    public static void CriticalSectionDefaultTimeout$set(MemorySegment seg, int x) {
        constants$432.const$0.set(seg, x);
    }
    public static int CriticalSectionDefaultTimeout$get(MemorySegment seg, long index) {
        return (int)constants$432.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void CriticalSectionDefaultTimeout$set(MemorySegment seg, long index, int x) {
        constants$432.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle DeCommitFreeBlockThreshold$VH() {
        return constants$432.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONGLONG DeCommitFreeBlockThreshold;
     * }
     */
    public static long DeCommitFreeBlockThreshold$get(MemorySegment seg) {
        return (long)constants$432.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONGLONG DeCommitFreeBlockThreshold;
     * }
     */
    public static void DeCommitFreeBlockThreshold$set(MemorySegment seg, long x) {
        constants$432.const$1.set(seg, x);
    }
    public static long DeCommitFreeBlockThreshold$get(MemorySegment seg, long index) {
        return (long)constants$432.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void DeCommitFreeBlockThreshold$set(MemorySegment seg, long index, long x) {
        constants$432.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle DeCommitTotalFreeThreshold$VH() {
        return constants$432.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONGLONG DeCommitTotalFreeThreshold;
     * }
     */
    public static long DeCommitTotalFreeThreshold$get(MemorySegment seg) {
        return (long)constants$432.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONGLONG DeCommitTotalFreeThreshold;
     * }
     */
    public static void DeCommitTotalFreeThreshold$set(MemorySegment seg, long x) {
        constants$432.const$2.set(seg, x);
    }
    public static long DeCommitTotalFreeThreshold$get(MemorySegment seg, long index) {
        return (long)constants$432.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void DeCommitTotalFreeThreshold$set(MemorySegment seg, long index, long x) {
        constants$432.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle LockPrefixTable$VH() {
        return constants$432.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONGLONG LockPrefixTable;
     * }
     */
    public static long LockPrefixTable$get(MemorySegment seg) {
        return (long)constants$432.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONGLONG LockPrefixTable;
     * }
     */
    public static void LockPrefixTable$set(MemorySegment seg, long x) {
        constants$432.const$3.set(seg, x);
    }
    public static long LockPrefixTable$get(MemorySegment seg, long index) {
        return (long)constants$432.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void LockPrefixTable$set(MemorySegment seg, long index, long x) {
        constants$432.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MaximumAllocationSize$VH() {
        return constants$432.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONGLONG MaximumAllocationSize;
     * }
     */
    public static long MaximumAllocationSize$get(MemorySegment seg) {
        return (long)constants$432.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONGLONG MaximumAllocationSize;
     * }
     */
    public static void MaximumAllocationSize$set(MemorySegment seg, long x) {
        constants$432.const$4.set(seg, x);
    }
    public static long MaximumAllocationSize$get(MemorySegment seg, long index) {
        return (long)constants$432.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void MaximumAllocationSize$set(MemorySegment seg, long index, long x) {
        constants$432.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle VirtualMemoryThreshold$VH() {
        return constants$432.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONGLONG VirtualMemoryThreshold;
     * }
     */
    public static long VirtualMemoryThreshold$get(MemorySegment seg) {
        return (long)constants$432.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONGLONG VirtualMemoryThreshold;
     * }
     */
    public static void VirtualMemoryThreshold$set(MemorySegment seg, long x) {
        constants$432.const$5.set(seg, x);
    }
    public static long VirtualMemoryThreshold$get(MemorySegment seg, long index) {
        return (long)constants$432.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void VirtualMemoryThreshold$set(MemorySegment seg, long index, long x) {
        constants$432.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ProcessAffinityMask$VH() {
        return constants$433.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONGLONG ProcessAffinityMask;
     * }
     */
    public static long ProcessAffinityMask$get(MemorySegment seg) {
        return (long)constants$433.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONGLONG ProcessAffinityMask;
     * }
     */
    public static void ProcessAffinityMask$set(MemorySegment seg, long x) {
        constants$433.const$0.set(seg, x);
    }
    public static long ProcessAffinityMask$get(MemorySegment seg, long index) {
        return (long)constants$433.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void ProcessAffinityMask$set(MemorySegment seg, long index, long x) {
        constants$433.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ProcessHeapFlags$VH() {
        return constants$433.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD ProcessHeapFlags;
     * }
     */
    public static int ProcessHeapFlags$get(MemorySegment seg) {
        return (int)constants$433.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD ProcessHeapFlags;
     * }
     */
    public static void ProcessHeapFlags$set(MemorySegment seg, int x) {
        constants$433.const$1.set(seg, x);
    }
    public static int ProcessHeapFlags$get(MemorySegment seg, long index) {
        return (int)constants$433.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void ProcessHeapFlags$set(MemorySegment seg, long index, int x) {
        constants$433.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle CSDVersion$VH() {
        return constants$433.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD CSDVersion;
     * }
     */
    public static short CSDVersion$get(MemorySegment seg) {
        return (short)constants$433.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD CSDVersion;
     * }
     */
    public static void CSDVersion$set(MemorySegment seg, short x) {
        constants$433.const$2.set(seg, x);
    }
    public static short CSDVersion$get(MemorySegment seg, long index) {
        return (short)constants$433.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void CSDVersion$set(MemorySegment seg, long index, short x) {
        constants$433.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle DependentLoadFlags$VH() {
        return constants$433.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD DependentLoadFlags;
     * }
     */
    public static short DependentLoadFlags$get(MemorySegment seg) {
        return (short)constants$433.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD DependentLoadFlags;
     * }
     */
    public static void DependentLoadFlags$set(MemorySegment seg, short x) {
        constants$433.const$3.set(seg, x);
    }
    public static short DependentLoadFlags$get(MemorySegment seg, long index) {
        return (short)constants$433.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void DependentLoadFlags$set(MemorySegment seg, long index, short x) {
        constants$433.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle EditList$VH() {
        return constants$433.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONGLONG EditList;
     * }
     */
    public static long EditList$get(MemorySegment seg) {
        return (long)constants$433.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONGLONG EditList;
     * }
     */
    public static void EditList$set(MemorySegment seg, long x) {
        constants$433.const$4.set(seg, x);
    }
    public static long EditList$get(MemorySegment seg, long index) {
        return (long)constants$433.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void EditList$set(MemorySegment seg, long index, long x) {
        constants$433.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle SecurityCookie$VH() {
        return constants$433.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONGLONG SecurityCookie;
     * }
     */
    public static long SecurityCookie$get(MemorySegment seg) {
        return (long)constants$433.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONGLONG SecurityCookie;
     * }
     */
    public static void SecurityCookie$set(MemorySegment seg, long x) {
        constants$433.const$5.set(seg, x);
    }
    public static long SecurityCookie$get(MemorySegment seg, long index) {
        return (long)constants$433.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void SecurityCookie$set(MemorySegment seg, long index, long x) {
        constants$433.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle SEHandlerTable$VH() {
        return constants$434.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONGLONG SEHandlerTable;
     * }
     */
    public static long SEHandlerTable$get(MemorySegment seg) {
        return (long)constants$434.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONGLONG SEHandlerTable;
     * }
     */
    public static void SEHandlerTable$set(MemorySegment seg, long x) {
        constants$434.const$0.set(seg, x);
    }
    public static long SEHandlerTable$get(MemorySegment seg, long index) {
        return (long)constants$434.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void SEHandlerTable$set(MemorySegment seg, long index, long x) {
        constants$434.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle SEHandlerCount$VH() {
        return constants$434.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONGLONG SEHandlerCount;
     * }
     */
    public static long SEHandlerCount$get(MemorySegment seg) {
        return (long)constants$434.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONGLONG SEHandlerCount;
     * }
     */
    public static void SEHandlerCount$set(MemorySegment seg, long x) {
        constants$434.const$1.set(seg, x);
    }
    public static long SEHandlerCount$get(MemorySegment seg, long index) {
        return (long)constants$434.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void SEHandlerCount$set(MemorySegment seg, long index, long x) {
        constants$434.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle GuardCFCheckFunctionPointer$VH() {
        return constants$434.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONGLONG GuardCFCheckFunctionPointer;
     * }
     */
    public static long GuardCFCheckFunctionPointer$get(MemorySegment seg) {
        return (long)constants$434.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONGLONG GuardCFCheckFunctionPointer;
     * }
     */
    public static void GuardCFCheckFunctionPointer$set(MemorySegment seg, long x) {
        constants$434.const$2.set(seg, x);
    }
    public static long GuardCFCheckFunctionPointer$get(MemorySegment seg, long index) {
        return (long)constants$434.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void GuardCFCheckFunctionPointer$set(MemorySegment seg, long index, long x) {
        constants$434.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle GuardCFDispatchFunctionPointer$VH() {
        return constants$434.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONGLONG GuardCFDispatchFunctionPointer;
     * }
     */
    public static long GuardCFDispatchFunctionPointer$get(MemorySegment seg) {
        return (long)constants$434.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONGLONG GuardCFDispatchFunctionPointer;
     * }
     */
    public static void GuardCFDispatchFunctionPointer$set(MemorySegment seg, long x) {
        constants$434.const$3.set(seg, x);
    }
    public static long GuardCFDispatchFunctionPointer$get(MemorySegment seg, long index) {
        return (long)constants$434.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void GuardCFDispatchFunctionPointer$set(MemorySegment seg, long index, long x) {
        constants$434.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle GuardCFFunctionTable$VH() {
        return constants$434.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONGLONG GuardCFFunctionTable;
     * }
     */
    public static long GuardCFFunctionTable$get(MemorySegment seg) {
        return (long)constants$434.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONGLONG GuardCFFunctionTable;
     * }
     */
    public static void GuardCFFunctionTable$set(MemorySegment seg, long x) {
        constants$434.const$4.set(seg, x);
    }
    public static long GuardCFFunctionTable$get(MemorySegment seg, long index) {
        return (long)constants$434.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void GuardCFFunctionTable$set(MemorySegment seg, long index, long x) {
        constants$434.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle GuardCFFunctionCount$VH() {
        return constants$434.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONGLONG GuardCFFunctionCount;
     * }
     */
    public static long GuardCFFunctionCount$get(MemorySegment seg) {
        return (long)constants$434.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONGLONG GuardCFFunctionCount;
     * }
     */
    public static void GuardCFFunctionCount$set(MemorySegment seg, long x) {
        constants$434.const$5.set(seg, x);
    }
    public static long GuardCFFunctionCount$get(MemorySegment seg, long index) {
        return (long)constants$434.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GuardCFFunctionCount$set(MemorySegment seg, long index, long x) {
        constants$434.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle GuardFlags$VH() {
        return constants$435.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD GuardFlags;
     * }
     */
    public static int GuardFlags$get(MemorySegment seg) {
        return (int)constants$435.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD GuardFlags;
     * }
     */
    public static void GuardFlags$set(MemorySegment seg, int x) {
        constants$435.const$0.set(seg, x);
    }
    public static int GuardFlags$get(MemorySegment seg, long index) {
        return (int)constants$435.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void GuardFlags$set(MemorySegment seg, long index, int x) {
        constants$435.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment CodeIntegrity$slice(MemorySegment seg) {
        return seg.asSlice(148, 12);
    }
    public static VarHandle GuardAddressTakenIatEntryTable$VH() {
        return constants$435.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONGLONG GuardAddressTakenIatEntryTable;
     * }
     */
    public static long GuardAddressTakenIatEntryTable$get(MemorySegment seg) {
        return (long)constants$435.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONGLONG GuardAddressTakenIatEntryTable;
     * }
     */
    public static void GuardAddressTakenIatEntryTable$set(MemorySegment seg, long x) {
        constants$435.const$1.set(seg, x);
    }
    public static long GuardAddressTakenIatEntryTable$get(MemorySegment seg, long index) {
        return (long)constants$435.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void GuardAddressTakenIatEntryTable$set(MemorySegment seg, long index, long x) {
        constants$435.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle GuardAddressTakenIatEntryCount$VH() {
        return constants$435.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONGLONG GuardAddressTakenIatEntryCount;
     * }
     */
    public static long GuardAddressTakenIatEntryCount$get(MemorySegment seg) {
        return (long)constants$435.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONGLONG GuardAddressTakenIatEntryCount;
     * }
     */
    public static void GuardAddressTakenIatEntryCount$set(MemorySegment seg, long x) {
        constants$435.const$2.set(seg, x);
    }
    public static long GuardAddressTakenIatEntryCount$get(MemorySegment seg, long index) {
        return (long)constants$435.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void GuardAddressTakenIatEntryCount$set(MemorySegment seg, long index, long x) {
        constants$435.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle GuardLongJumpTargetTable$VH() {
        return constants$435.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONGLONG GuardLongJumpTargetTable;
     * }
     */
    public static long GuardLongJumpTargetTable$get(MemorySegment seg) {
        return (long)constants$435.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONGLONG GuardLongJumpTargetTable;
     * }
     */
    public static void GuardLongJumpTargetTable$set(MemorySegment seg, long x) {
        constants$435.const$3.set(seg, x);
    }
    public static long GuardLongJumpTargetTable$get(MemorySegment seg, long index) {
        return (long)constants$435.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void GuardLongJumpTargetTable$set(MemorySegment seg, long index, long x) {
        constants$435.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle GuardLongJumpTargetCount$VH() {
        return constants$435.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONGLONG GuardLongJumpTargetCount;
     * }
     */
    public static long GuardLongJumpTargetCount$get(MemorySegment seg) {
        return (long)constants$435.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONGLONG GuardLongJumpTargetCount;
     * }
     */
    public static void GuardLongJumpTargetCount$set(MemorySegment seg, long x) {
        constants$435.const$4.set(seg, x);
    }
    public static long GuardLongJumpTargetCount$get(MemorySegment seg, long index) {
        return (long)constants$435.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void GuardLongJumpTargetCount$set(MemorySegment seg, long index, long x) {
        constants$435.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle DynamicValueRelocTable$VH() {
        return constants$435.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONGLONG DynamicValueRelocTable;
     * }
     */
    public static long DynamicValueRelocTable$get(MemorySegment seg) {
        return (long)constants$435.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONGLONG DynamicValueRelocTable;
     * }
     */
    public static void DynamicValueRelocTable$set(MemorySegment seg, long x) {
        constants$435.const$5.set(seg, x);
    }
    public static long DynamicValueRelocTable$get(MemorySegment seg, long index) {
        return (long)constants$435.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void DynamicValueRelocTable$set(MemorySegment seg, long index, long x) {
        constants$435.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle CHPEMetadataPointer$VH() {
        return constants$436.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONGLONG CHPEMetadataPointer;
     * }
     */
    public static long CHPEMetadataPointer$get(MemorySegment seg) {
        return (long)constants$436.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONGLONG CHPEMetadataPointer;
     * }
     */
    public static void CHPEMetadataPointer$set(MemorySegment seg, long x) {
        constants$436.const$0.set(seg, x);
    }
    public static long CHPEMetadataPointer$get(MemorySegment seg, long index) {
        return (long)constants$436.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void CHPEMetadataPointer$set(MemorySegment seg, long index, long x) {
        constants$436.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle GuardRFFailureRoutine$VH() {
        return constants$436.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONGLONG GuardRFFailureRoutine;
     * }
     */
    public static long GuardRFFailureRoutine$get(MemorySegment seg) {
        return (long)constants$436.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONGLONG GuardRFFailureRoutine;
     * }
     */
    public static void GuardRFFailureRoutine$set(MemorySegment seg, long x) {
        constants$436.const$1.set(seg, x);
    }
    public static long GuardRFFailureRoutine$get(MemorySegment seg, long index) {
        return (long)constants$436.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void GuardRFFailureRoutine$set(MemorySegment seg, long index, long x) {
        constants$436.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle GuardRFFailureRoutineFunctionPointer$VH() {
        return constants$436.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONGLONG GuardRFFailureRoutineFunctionPointer;
     * }
     */
    public static long GuardRFFailureRoutineFunctionPointer$get(MemorySegment seg) {
        return (long)constants$436.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONGLONG GuardRFFailureRoutineFunctionPointer;
     * }
     */
    public static void GuardRFFailureRoutineFunctionPointer$set(MemorySegment seg, long x) {
        constants$436.const$2.set(seg, x);
    }
    public static long GuardRFFailureRoutineFunctionPointer$get(MemorySegment seg, long index) {
        return (long)constants$436.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void GuardRFFailureRoutineFunctionPointer$set(MemorySegment seg, long index, long x) {
        constants$436.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle DynamicValueRelocTableOffset$VH() {
        return constants$436.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD DynamicValueRelocTableOffset;
     * }
     */
    public static int DynamicValueRelocTableOffset$get(MemorySegment seg) {
        return (int)constants$436.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD DynamicValueRelocTableOffset;
     * }
     */
    public static void DynamicValueRelocTableOffset$set(MemorySegment seg, int x) {
        constants$436.const$3.set(seg, x);
    }
    public static int DynamicValueRelocTableOffset$get(MemorySegment seg, long index) {
        return (int)constants$436.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void DynamicValueRelocTableOffset$set(MemorySegment seg, long index, int x) {
        constants$436.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle DynamicValueRelocTableSection$VH() {
        return constants$436.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD DynamicValueRelocTableSection;
     * }
     */
    public static short DynamicValueRelocTableSection$get(MemorySegment seg) {
        return (short)constants$436.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD DynamicValueRelocTableSection;
     * }
     */
    public static void DynamicValueRelocTableSection$set(MemorySegment seg, short x) {
        constants$436.const$4.set(seg, x);
    }
    public static short DynamicValueRelocTableSection$get(MemorySegment seg, long index) {
        return (short)constants$436.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void DynamicValueRelocTableSection$set(MemorySegment seg, long index, short x) {
        constants$436.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Reserved2$VH() {
        return constants$436.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD Reserved2;
     * }
     */
    public static short Reserved2$get(MemorySegment seg) {
        return (short)constants$436.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD Reserved2;
     * }
     */
    public static void Reserved2$set(MemorySegment seg, short x) {
        constants$436.const$5.set(seg, x);
    }
    public static short Reserved2$get(MemorySegment seg, long index) {
        return (short)constants$436.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void Reserved2$set(MemorySegment seg, long index, short x) {
        constants$436.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle GuardRFVerifyStackPointerFunctionPointer$VH() {
        return constants$437.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONGLONG GuardRFVerifyStackPointerFunctionPointer;
     * }
     */
    public static long GuardRFVerifyStackPointerFunctionPointer$get(MemorySegment seg) {
        return (long)constants$437.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONGLONG GuardRFVerifyStackPointerFunctionPointer;
     * }
     */
    public static void GuardRFVerifyStackPointerFunctionPointer$set(MemorySegment seg, long x) {
        constants$437.const$0.set(seg, x);
    }
    public static long GuardRFVerifyStackPointerFunctionPointer$get(MemorySegment seg, long index) {
        return (long)constants$437.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void GuardRFVerifyStackPointerFunctionPointer$set(MemorySegment seg, long index, long x) {
        constants$437.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle HotPatchTableOffset$VH() {
        return constants$437.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD HotPatchTableOffset;
     * }
     */
    public static int HotPatchTableOffset$get(MemorySegment seg) {
        return (int)constants$437.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD HotPatchTableOffset;
     * }
     */
    public static void HotPatchTableOffset$set(MemorySegment seg, int x) {
        constants$437.const$1.set(seg, x);
    }
    public static int HotPatchTableOffset$get(MemorySegment seg, long index) {
        return (int)constants$437.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void HotPatchTableOffset$set(MemorySegment seg, long index, int x) {
        constants$437.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Reserved3$VH() {
        return constants$437.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Reserved3;
     * }
     */
    public static int Reserved3$get(MemorySegment seg) {
        return (int)constants$437.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Reserved3;
     * }
     */
    public static void Reserved3$set(MemorySegment seg, int x) {
        constants$437.const$2.set(seg, x);
    }
    public static int Reserved3$get(MemorySegment seg, long index) {
        return (int)constants$437.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void Reserved3$set(MemorySegment seg, long index, int x) {
        constants$437.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle EnclaveConfigurationPointer$VH() {
        return constants$437.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONGLONG EnclaveConfigurationPointer;
     * }
     */
    public static long EnclaveConfigurationPointer$get(MemorySegment seg) {
        return (long)constants$437.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONGLONG EnclaveConfigurationPointer;
     * }
     */
    public static void EnclaveConfigurationPointer$set(MemorySegment seg, long x) {
        constants$437.const$3.set(seg, x);
    }
    public static long EnclaveConfigurationPointer$get(MemorySegment seg, long index) {
        return (long)constants$437.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void EnclaveConfigurationPointer$set(MemorySegment seg, long index, long x) {
        constants$437.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle VolatileMetadataPointer$VH() {
        return constants$437.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONGLONG VolatileMetadataPointer;
     * }
     */
    public static long VolatileMetadataPointer$get(MemorySegment seg) {
        return (long)constants$437.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONGLONG VolatileMetadataPointer;
     * }
     */
    public static void VolatileMetadataPointer$set(MemorySegment seg, long x) {
        constants$437.const$4.set(seg, x);
    }
    public static long VolatileMetadataPointer$get(MemorySegment seg, long index) {
        return (long)constants$437.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void VolatileMetadataPointer$set(MemorySegment seg, long index, long x) {
        constants$437.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle GuardEHContinuationTable$VH() {
        return constants$437.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONGLONG GuardEHContinuationTable;
     * }
     */
    public static long GuardEHContinuationTable$get(MemorySegment seg) {
        return (long)constants$437.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONGLONG GuardEHContinuationTable;
     * }
     */
    public static void GuardEHContinuationTable$set(MemorySegment seg, long x) {
        constants$437.const$5.set(seg, x);
    }
    public static long GuardEHContinuationTable$get(MemorySegment seg, long index) {
        return (long)constants$437.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GuardEHContinuationTable$set(MemorySegment seg, long index, long x) {
        constants$437.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle GuardEHContinuationCount$VH() {
        return constants$438.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONGLONG GuardEHContinuationCount;
     * }
     */
    public static long GuardEHContinuationCount$get(MemorySegment seg) {
        return (long)constants$438.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONGLONG GuardEHContinuationCount;
     * }
     */
    public static void GuardEHContinuationCount$set(MemorySegment seg, long x) {
        constants$438.const$0.set(seg, x);
    }
    public static long GuardEHContinuationCount$get(MemorySegment seg, long index) {
        return (long)constants$438.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void GuardEHContinuationCount$set(MemorySegment seg, long index, long x) {
        constants$438.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle GuardXFGCheckFunctionPointer$VH() {
        return constants$438.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONGLONG GuardXFGCheckFunctionPointer;
     * }
     */
    public static long GuardXFGCheckFunctionPointer$get(MemorySegment seg) {
        return (long)constants$438.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONGLONG GuardXFGCheckFunctionPointer;
     * }
     */
    public static void GuardXFGCheckFunctionPointer$set(MemorySegment seg, long x) {
        constants$438.const$1.set(seg, x);
    }
    public static long GuardXFGCheckFunctionPointer$get(MemorySegment seg, long index) {
        return (long)constants$438.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void GuardXFGCheckFunctionPointer$set(MemorySegment seg, long index, long x) {
        constants$438.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle GuardXFGDispatchFunctionPointer$VH() {
        return constants$438.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONGLONG GuardXFGDispatchFunctionPointer;
     * }
     */
    public static long GuardXFGDispatchFunctionPointer$get(MemorySegment seg) {
        return (long)constants$438.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONGLONG GuardXFGDispatchFunctionPointer;
     * }
     */
    public static void GuardXFGDispatchFunctionPointer$set(MemorySegment seg, long x) {
        constants$438.const$2.set(seg, x);
    }
    public static long GuardXFGDispatchFunctionPointer$get(MemorySegment seg, long index) {
        return (long)constants$438.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void GuardXFGDispatchFunctionPointer$set(MemorySegment seg, long index, long x) {
        constants$438.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle GuardXFGTableDispatchFunctionPointer$VH() {
        return constants$438.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONGLONG GuardXFGTableDispatchFunctionPointer;
     * }
     */
    public static long GuardXFGTableDispatchFunctionPointer$get(MemorySegment seg) {
        return (long)constants$438.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONGLONG GuardXFGTableDispatchFunctionPointer;
     * }
     */
    public static void GuardXFGTableDispatchFunctionPointer$set(MemorySegment seg, long x) {
        constants$438.const$3.set(seg, x);
    }
    public static long GuardXFGTableDispatchFunctionPointer$get(MemorySegment seg, long index) {
        return (long)constants$438.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void GuardXFGTableDispatchFunctionPointer$set(MemorySegment seg, long index, long x) {
        constants$438.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle CastGuardOsDeterminedFailureMode$VH() {
        return constants$438.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONGLONG CastGuardOsDeterminedFailureMode;
     * }
     */
    public static long CastGuardOsDeterminedFailureMode$get(MemorySegment seg) {
        return (long)constants$438.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONGLONG CastGuardOsDeterminedFailureMode;
     * }
     */
    public static void CastGuardOsDeterminedFailureMode$set(MemorySegment seg, long x) {
        constants$438.const$4.set(seg, x);
    }
    public static long CastGuardOsDeterminedFailureMode$get(MemorySegment seg, long index) {
        return (long)constants$438.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void CastGuardOsDeterminedFailureMode$set(MemorySegment seg, long index, long x) {
        constants$438.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct {
 *     USN_RECORD_COMMON_HEADER Header;
 *     FILE_ID_128 FileReferenceNumber;
 *     FILE_ID_128 ParentFileReferenceNumber;
 *     USN Usn;
 *     DWORD Reason;
 *     DWORD SourceInfo;
 *     DWORD RemainingExtents;
 *     WORD NumberOfExtents;
 *     WORD ExtentSize;
 *     USN_RECORD_EXTENT Extents[1];
 * };
 * }
 */
public class USN_RECORD_V4 {

    public static MemoryLayout $LAYOUT() {
        return constants$2593.const$1;
    }
    public static MemorySegment Header$slice(MemorySegment seg) {
        return seg.asSlice(0, 8);
    }
    public static MemorySegment FileReferenceNumber$slice(MemorySegment seg) {
        return seg.asSlice(8, 16);
    }
    public static MemorySegment ParentFileReferenceNumber$slice(MemorySegment seg) {
        return seg.asSlice(24, 16);
    }
    public static VarHandle Usn$VH() {
        return constants$2593.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * USN Usn;
     * }
     */
    public static long Usn$get(MemorySegment seg) {
        return (long)constants$2593.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * USN Usn;
     * }
     */
    public static void Usn$set(MemorySegment seg, long x) {
        constants$2593.const$2.set(seg, x);
    }
    public static long Usn$get(MemorySegment seg, long index) {
        return (long)constants$2593.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void Usn$set(MemorySegment seg, long index, long x) {
        constants$2593.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Reason$VH() {
        return constants$2593.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Reason;
     * }
     */
    public static int Reason$get(MemorySegment seg) {
        return (int)constants$2593.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Reason;
     * }
     */
    public static void Reason$set(MemorySegment seg, int x) {
        constants$2593.const$3.set(seg, x);
    }
    public static int Reason$get(MemorySegment seg, long index) {
        return (int)constants$2593.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void Reason$set(MemorySegment seg, long index, int x) {
        constants$2593.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle SourceInfo$VH() {
        return constants$2593.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD SourceInfo;
     * }
     */
    public static int SourceInfo$get(MemorySegment seg) {
        return (int)constants$2593.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD SourceInfo;
     * }
     */
    public static void SourceInfo$set(MemorySegment seg, int x) {
        constants$2593.const$4.set(seg, x);
    }
    public static int SourceInfo$get(MemorySegment seg, long index) {
        return (int)constants$2593.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void SourceInfo$set(MemorySegment seg, long index, int x) {
        constants$2593.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle RemainingExtents$VH() {
        return constants$2593.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD RemainingExtents;
     * }
     */
    public static int RemainingExtents$get(MemorySegment seg) {
        return (int)constants$2593.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD RemainingExtents;
     * }
     */
    public static void RemainingExtents$set(MemorySegment seg, int x) {
        constants$2593.const$5.set(seg, x);
    }
    public static int RemainingExtents$get(MemorySegment seg, long index) {
        return (int)constants$2593.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void RemainingExtents$set(MemorySegment seg, long index, int x) {
        constants$2593.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle NumberOfExtents$VH() {
        return constants$2594.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD NumberOfExtents;
     * }
     */
    public static short NumberOfExtents$get(MemorySegment seg) {
        return (short)constants$2594.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD NumberOfExtents;
     * }
     */
    public static void NumberOfExtents$set(MemorySegment seg, short x) {
        constants$2594.const$0.set(seg, x);
    }
    public static short NumberOfExtents$get(MemorySegment seg, long index) {
        return (short)constants$2594.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void NumberOfExtents$set(MemorySegment seg, long index, short x) {
        constants$2594.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ExtentSize$VH() {
        return constants$2594.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD ExtentSize;
     * }
     */
    public static short ExtentSize$get(MemorySegment seg) {
        return (short)constants$2594.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD ExtentSize;
     * }
     */
    public static void ExtentSize$set(MemorySegment seg, short x) {
        constants$2594.const$1.set(seg, x);
    }
    public static short ExtentSize$get(MemorySegment seg, long index) {
        return (short)constants$2594.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void ExtentSize$set(MemorySegment seg, long index, short x) {
        constants$2594.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Extents$slice(MemorySegment seg) {
        return seg.asSlice(64, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



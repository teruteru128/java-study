// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _IMAGE_OPTIONAL_HEADER64 {
 *     WORD Magic;
 *     BYTE MajorLinkerVersion;
 *     BYTE MinorLinkerVersion;
 *     DWORD SizeOfCode;
 *     DWORD SizeOfInitializedData;
 *     DWORD SizeOfUninitializedData;
 *     DWORD AddressOfEntryPoint;
 *     DWORD BaseOfCode;
 *     ULONGLONG ImageBase;
 *     DWORD SectionAlignment;
 *     DWORD FileAlignment;
 *     WORD MajorOperatingSystemVersion;
 *     WORD MinorOperatingSystemVersion;
 *     WORD MajorImageVersion;
 *     WORD MinorImageVersion;
 *     WORD MajorSubsystemVersion;
 *     WORD MinorSubsystemVersion;
 *     DWORD Win32VersionValue;
 *     DWORD SizeOfImage;
 *     DWORD SizeOfHeaders;
 *     DWORD CheckSum;
 *     WORD Subsystem;
 *     WORD DllCharacteristics;
 *     ULONGLONG SizeOfStackReserve;
 *     ULONGLONG SizeOfStackCommit;
 *     ULONGLONG SizeOfHeapReserve;
 *     ULONGLONG SizeOfHeapCommit;
 *     DWORD LoaderFlags;
 *     DWORD NumberOfRvaAndSizes;
 *     IMAGE_DATA_DIRECTORY DataDirectory[16];
 * };
 * }
 */
public class _IMAGE_OPTIONAL_HEADER64 {

    public static MemoryLayout $LAYOUT() {
        return constants$376.const$2;
    }
    public static VarHandle Magic$VH() {
        return constants$376.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD Magic;
     * }
     */
    public static short Magic$get(MemorySegment seg) {
        return (short)constants$376.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD Magic;
     * }
     */
    public static void Magic$set(MemorySegment seg, short x) {
        constants$376.const$3.set(seg, x);
    }
    public static short Magic$get(MemorySegment seg, long index) {
        return (short)constants$376.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void Magic$set(MemorySegment seg, long index, short x) {
        constants$376.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MajorLinkerVersion$VH() {
        return constants$376.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE MajorLinkerVersion;
     * }
     */
    public static byte MajorLinkerVersion$get(MemorySegment seg) {
        return (byte)constants$376.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE MajorLinkerVersion;
     * }
     */
    public static void MajorLinkerVersion$set(MemorySegment seg, byte x) {
        constants$376.const$4.set(seg, x);
    }
    public static byte MajorLinkerVersion$get(MemorySegment seg, long index) {
        return (byte)constants$376.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void MajorLinkerVersion$set(MemorySegment seg, long index, byte x) {
        constants$376.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MinorLinkerVersion$VH() {
        return constants$376.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE MinorLinkerVersion;
     * }
     */
    public static byte MinorLinkerVersion$get(MemorySegment seg) {
        return (byte)constants$376.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE MinorLinkerVersion;
     * }
     */
    public static void MinorLinkerVersion$set(MemorySegment seg, byte x) {
        constants$376.const$5.set(seg, x);
    }
    public static byte MinorLinkerVersion$get(MemorySegment seg, long index) {
        return (byte)constants$376.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void MinorLinkerVersion$set(MemorySegment seg, long index, byte x) {
        constants$376.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle SizeOfCode$VH() {
        return constants$377.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD SizeOfCode;
     * }
     */
    public static int SizeOfCode$get(MemorySegment seg) {
        return (int)constants$377.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD SizeOfCode;
     * }
     */
    public static void SizeOfCode$set(MemorySegment seg, int x) {
        constants$377.const$0.set(seg, x);
    }
    public static int SizeOfCode$get(MemorySegment seg, long index) {
        return (int)constants$377.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void SizeOfCode$set(MemorySegment seg, long index, int x) {
        constants$377.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle SizeOfInitializedData$VH() {
        return constants$377.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD SizeOfInitializedData;
     * }
     */
    public static int SizeOfInitializedData$get(MemorySegment seg) {
        return (int)constants$377.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD SizeOfInitializedData;
     * }
     */
    public static void SizeOfInitializedData$set(MemorySegment seg, int x) {
        constants$377.const$1.set(seg, x);
    }
    public static int SizeOfInitializedData$get(MemorySegment seg, long index) {
        return (int)constants$377.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void SizeOfInitializedData$set(MemorySegment seg, long index, int x) {
        constants$377.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle SizeOfUninitializedData$VH() {
        return constants$377.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD SizeOfUninitializedData;
     * }
     */
    public static int SizeOfUninitializedData$get(MemorySegment seg) {
        return (int)constants$377.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD SizeOfUninitializedData;
     * }
     */
    public static void SizeOfUninitializedData$set(MemorySegment seg, int x) {
        constants$377.const$2.set(seg, x);
    }
    public static int SizeOfUninitializedData$get(MemorySegment seg, long index) {
        return (int)constants$377.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void SizeOfUninitializedData$set(MemorySegment seg, long index, int x) {
        constants$377.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle AddressOfEntryPoint$VH() {
        return constants$377.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD AddressOfEntryPoint;
     * }
     */
    public static int AddressOfEntryPoint$get(MemorySegment seg) {
        return (int)constants$377.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD AddressOfEntryPoint;
     * }
     */
    public static void AddressOfEntryPoint$set(MemorySegment seg, int x) {
        constants$377.const$3.set(seg, x);
    }
    public static int AddressOfEntryPoint$get(MemorySegment seg, long index) {
        return (int)constants$377.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void AddressOfEntryPoint$set(MemorySegment seg, long index, int x) {
        constants$377.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle BaseOfCode$VH() {
        return constants$377.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD BaseOfCode;
     * }
     */
    public static int BaseOfCode$get(MemorySegment seg) {
        return (int)constants$377.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD BaseOfCode;
     * }
     */
    public static void BaseOfCode$set(MemorySegment seg, int x) {
        constants$377.const$4.set(seg, x);
    }
    public static int BaseOfCode$get(MemorySegment seg, long index) {
        return (int)constants$377.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void BaseOfCode$set(MemorySegment seg, long index, int x) {
        constants$377.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ImageBase$VH() {
        return constants$377.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONGLONG ImageBase;
     * }
     */
    public static long ImageBase$get(MemorySegment seg) {
        return (long)constants$377.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONGLONG ImageBase;
     * }
     */
    public static void ImageBase$set(MemorySegment seg, long x) {
        constants$377.const$5.set(seg, x);
    }
    public static long ImageBase$get(MemorySegment seg, long index) {
        return (long)constants$377.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void ImageBase$set(MemorySegment seg, long index, long x) {
        constants$377.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle SectionAlignment$VH() {
        return constants$378.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD SectionAlignment;
     * }
     */
    public static int SectionAlignment$get(MemorySegment seg) {
        return (int)constants$378.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD SectionAlignment;
     * }
     */
    public static void SectionAlignment$set(MemorySegment seg, int x) {
        constants$378.const$0.set(seg, x);
    }
    public static int SectionAlignment$get(MemorySegment seg, long index) {
        return (int)constants$378.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void SectionAlignment$set(MemorySegment seg, long index, int x) {
        constants$378.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle FileAlignment$VH() {
        return constants$378.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD FileAlignment;
     * }
     */
    public static int FileAlignment$get(MemorySegment seg) {
        return (int)constants$378.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD FileAlignment;
     * }
     */
    public static void FileAlignment$set(MemorySegment seg, int x) {
        constants$378.const$1.set(seg, x);
    }
    public static int FileAlignment$get(MemorySegment seg, long index) {
        return (int)constants$378.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void FileAlignment$set(MemorySegment seg, long index, int x) {
        constants$378.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MajorOperatingSystemVersion$VH() {
        return constants$378.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD MajorOperatingSystemVersion;
     * }
     */
    public static short MajorOperatingSystemVersion$get(MemorySegment seg) {
        return (short)constants$378.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD MajorOperatingSystemVersion;
     * }
     */
    public static void MajorOperatingSystemVersion$set(MemorySegment seg, short x) {
        constants$378.const$2.set(seg, x);
    }
    public static short MajorOperatingSystemVersion$get(MemorySegment seg, long index) {
        return (short)constants$378.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void MajorOperatingSystemVersion$set(MemorySegment seg, long index, short x) {
        constants$378.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MinorOperatingSystemVersion$VH() {
        return constants$378.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD MinorOperatingSystemVersion;
     * }
     */
    public static short MinorOperatingSystemVersion$get(MemorySegment seg) {
        return (short)constants$378.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD MinorOperatingSystemVersion;
     * }
     */
    public static void MinorOperatingSystemVersion$set(MemorySegment seg, short x) {
        constants$378.const$3.set(seg, x);
    }
    public static short MinorOperatingSystemVersion$get(MemorySegment seg, long index) {
        return (short)constants$378.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void MinorOperatingSystemVersion$set(MemorySegment seg, long index, short x) {
        constants$378.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MajorImageVersion$VH() {
        return constants$378.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD MajorImageVersion;
     * }
     */
    public static short MajorImageVersion$get(MemorySegment seg) {
        return (short)constants$378.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD MajorImageVersion;
     * }
     */
    public static void MajorImageVersion$set(MemorySegment seg, short x) {
        constants$378.const$4.set(seg, x);
    }
    public static short MajorImageVersion$get(MemorySegment seg, long index) {
        return (short)constants$378.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void MajorImageVersion$set(MemorySegment seg, long index, short x) {
        constants$378.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MinorImageVersion$VH() {
        return constants$378.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD MinorImageVersion;
     * }
     */
    public static short MinorImageVersion$get(MemorySegment seg) {
        return (short)constants$378.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD MinorImageVersion;
     * }
     */
    public static void MinorImageVersion$set(MemorySegment seg, short x) {
        constants$378.const$5.set(seg, x);
    }
    public static short MinorImageVersion$get(MemorySegment seg, long index) {
        return (short)constants$378.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void MinorImageVersion$set(MemorySegment seg, long index, short x) {
        constants$378.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MajorSubsystemVersion$VH() {
        return constants$379.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD MajorSubsystemVersion;
     * }
     */
    public static short MajorSubsystemVersion$get(MemorySegment seg) {
        return (short)constants$379.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD MajorSubsystemVersion;
     * }
     */
    public static void MajorSubsystemVersion$set(MemorySegment seg, short x) {
        constants$379.const$0.set(seg, x);
    }
    public static short MajorSubsystemVersion$get(MemorySegment seg, long index) {
        return (short)constants$379.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void MajorSubsystemVersion$set(MemorySegment seg, long index, short x) {
        constants$379.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MinorSubsystemVersion$VH() {
        return constants$379.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD MinorSubsystemVersion;
     * }
     */
    public static short MinorSubsystemVersion$get(MemorySegment seg) {
        return (short)constants$379.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD MinorSubsystemVersion;
     * }
     */
    public static void MinorSubsystemVersion$set(MemorySegment seg, short x) {
        constants$379.const$1.set(seg, x);
    }
    public static short MinorSubsystemVersion$get(MemorySegment seg, long index) {
        return (short)constants$379.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void MinorSubsystemVersion$set(MemorySegment seg, long index, short x) {
        constants$379.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Win32VersionValue$VH() {
        return constants$379.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Win32VersionValue;
     * }
     */
    public static int Win32VersionValue$get(MemorySegment seg) {
        return (int)constants$379.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Win32VersionValue;
     * }
     */
    public static void Win32VersionValue$set(MemorySegment seg, int x) {
        constants$379.const$2.set(seg, x);
    }
    public static int Win32VersionValue$get(MemorySegment seg, long index) {
        return (int)constants$379.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void Win32VersionValue$set(MemorySegment seg, long index, int x) {
        constants$379.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle SizeOfImage$VH() {
        return constants$379.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD SizeOfImage;
     * }
     */
    public static int SizeOfImage$get(MemorySegment seg) {
        return (int)constants$379.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD SizeOfImage;
     * }
     */
    public static void SizeOfImage$set(MemorySegment seg, int x) {
        constants$379.const$3.set(seg, x);
    }
    public static int SizeOfImage$get(MemorySegment seg, long index) {
        return (int)constants$379.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void SizeOfImage$set(MemorySegment seg, long index, int x) {
        constants$379.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle SizeOfHeaders$VH() {
        return constants$379.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD SizeOfHeaders;
     * }
     */
    public static int SizeOfHeaders$get(MemorySegment seg) {
        return (int)constants$379.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD SizeOfHeaders;
     * }
     */
    public static void SizeOfHeaders$set(MemorySegment seg, int x) {
        constants$379.const$4.set(seg, x);
    }
    public static int SizeOfHeaders$get(MemorySegment seg, long index) {
        return (int)constants$379.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void SizeOfHeaders$set(MemorySegment seg, long index, int x) {
        constants$379.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle CheckSum$VH() {
        return constants$379.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD CheckSum;
     * }
     */
    public static int CheckSum$get(MemorySegment seg) {
        return (int)constants$379.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD CheckSum;
     * }
     */
    public static void CheckSum$set(MemorySegment seg, int x) {
        constants$379.const$5.set(seg, x);
    }
    public static int CheckSum$get(MemorySegment seg, long index) {
        return (int)constants$379.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void CheckSum$set(MemorySegment seg, long index, int x) {
        constants$379.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Subsystem$VH() {
        return constants$380.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD Subsystem;
     * }
     */
    public static short Subsystem$get(MemorySegment seg) {
        return (short)constants$380.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD Subsystem;
     * }
     */
    public static void Subsystem$set(MemorySegment seg, short x) {
        constants$380.const$0.set(seg, x);
    }
    public static short Subsystem$get(MemorySegment seg, long index) {
        return (short)constants$380.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Subsystem$set(MemorySegment seg, long index, short x) {
        constants$380.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle DllCharacteristics$VH() {
        return constants$380.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD DllCharacteristics;
     * }
     */
    public static short DllCharacteristics$get(MemorySegment seg) {
        return (short)constants$380.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD DllCharacteristics;
     * }
     */
    public static void DllCharacteristics$set(MemorySegment seg, short x) {
        constants$380.const$1.set(seg, x);
    }
    public static short DllCharacteristics$get(MemorySegment seg, long index) {
        return (short)constants$380.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void DllCharacteristics$set(MemorySegment seg, long index, short x) {
        constants$380.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle SizeOfStackReserve$VH() {
        return constants$380.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONGLONG SizeOfStackReserve;
     * }
     */
    public static long SizeOfStackReserve$get(MemorySegment seg) {
        return (long)constants$380.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONGLONG SizeOfStackReserve;
     * }
     */
    public static void SizeOfStackReserve$set(MemorySegment seg, long x) {
        constants$380.const$2.set(seg, x);
    }
    public static long SizeOfStackReserve$get(MemorySegment seg, long index) {
        return (long)constants$380.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void SizeOfStackReserve$set(MemorySegment seg, long index, long x) {
        constants$380.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle SizeOfStackCommit$VH() {
        return constants$380.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONGLONG SizeOfStackCommit;
     * }
     */
    public static long SizeOfStackCommit$get(MemorySegment seg) {
        return (long)constants$380.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONGLONG SizeOfStackCommit;
     * }
     */
    public static void SizeOfStackCommit$set(MemorySegment seg, long x) {
        constants$380.const$3.set(seg, x);
    }
    public static long SizeOfStackCommit$get(MemorySegment seg, long index) {
        return (long)constants$380.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void SizeOfStackCommit$set(MemorySegment seg, long index, long x) {
        constants$380.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle SizeOfHeapReserve$VH() {
        return constants$380.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONGLONG SizeOfHeapReserve;
     * }
     */
    public static long SizeOfHeapReserve$get(MemorySegment seg) {
        return (long)constants$380.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONGLONG SizeOfHeapReserve;
     * }
     */
    public static void SizeOfHeapReserve$set(MemorySegment seg, long x) {
        constants$380.const$4.set(seg, x);
    }
    public static long SizeOfHeapReserve$get(MemorySegment seg, long index) {
        return (long)constants$380.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void SizeOfHeapReserve$set(MemorySegment seg, long index, long x) {
        constants$380.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle SizeOfHeapCommit$VH() {
        return constants$380.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONGLONG SizeOfHeapCommit;
     * }
     */
    public static long SizeOfHeapCommit$get(MemorySegment seg) {
        return (long)constants$380.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONGLONG SizeOfHeapCommit;
     * }
     */
    public static void SizeOfHeapCommit$set(MemorySegment seg, long x) {
        constants$380.const$5.set(seg, x);
    }
    public static long SizeOfHeapCommit$get(MemorySegment seg, long index) {
        return (long)constants$380.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void SizeOfHeapCommit$set(MemorySegment seg, long index, long x) {
        constants$380.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle LoaderFlags$VH() {
        return constants$381.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD LoaderFlags;
     * }
     */
    public static int LoaderFlags$get(MemorySegment seg) {
        return (int)constants$381.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD LoaderFlags;
     * }
     */
    public static void LoaderFlags$set(MemorySegment seg, int x) {
        constants$381.const$0.set(seg, x);
    }
    public static int LoaderFlags$get(MemorySegment seg, long index) {
        return (int)constants$381.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void LoaderFlags$set(MemorySegment seg, long index, int x) {
        constants$381.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle NumberOfRvaAndSizes$VH() {
        return constants$381.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD NumberOfRvaAndSizes;
     * }
     */
    public static int NumberOfRvaAndSizes$get(MemorySegment seg) {
        return (int)constants$381.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD NumberOfRvaAndSizes;
     * }
     */
    public static void NumberOfRvaAndSizes$set(MemorySegment seg, int x) {
        constants$381.const$1.set(seg, x);
    }
    public static int NumberOfRvaAndSizes$get(MemorySegment seg, long index) {
        return (int)constants$381.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void NumberOfRvaAndSizes$set(MemorySegment seg, long index, int x) {
        constants$381.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment DataDirectory$slice(MemorySegment seg) {
        return seg.asSlice(112, 128);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IMallocSpyVtbl {
 *     HRESULT (*QueryInterface)(IMallocSpy*,const IID*,void**);
 *     ULONG (*AddRef)(IMallocSpy*);
 *     ULONG (*Release)(IMallocSpy*);
 *     SIZE_T (*PreAlloc)(IMallocSpy*,SIZE_T);
 *     void* (*PostAlloc)(IMallocSpy*,void*);
 *     void* (*PreFree)(IMallocSpy*,void*,BOOL);
 *     void (*PostFree)(IMallocSpy*,BOOL);
 *     SIZE_T (*PreRealloc)(IMallocSpy*,void*,SIZE_T,void**,BOOL);
 *     void* (*PostRealloc)(IMallocSpy*,void*,BOOL);
 *     void* (*PreGetSize)(IMallocSpy*,void*,BOOL);
 *     SIZE_T (*PostGetSize)(IMallocSpy*,SIZE_T,BOOL);
 *     void* (*PreDidAlloc)(IMallocSpy*,void*,BOOL);
 *     int (*PostDidAlloc)(IMallocSpy*,void*,BOOL,int);
 *     void (*PreHeapMinimize)(IMallocSpy*);
 *     void (*PostHeapMinimize)(IMallocSpy*);
 * };
 * }
 */
public class IMallocSpyVtbl {

    public static MemoryLayout $LAYOUT() {
        return constants$3215.const$5;
    }
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IMallocSpy*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3216.const$0, fi, constants$37.const$3, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle QueryInterface$VH() {
        return constants$3216.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IMallocSpy*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3216.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IMallocSpy*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        constants$3216.const$1.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3216.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3216.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, Arena scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*AddRef)(IMallocSpy*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3216.const$2, fi, constants$18.const$5, scope);
        }
        static AddRef ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle AddRef$VH() {
        return constants$3216.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IMallocSpy*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3216.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IMallocSpy*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        constants$3216.const$3.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3216.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3216.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, Arena scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*Release)(IMallocSpy*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3216.const$4, fi, constants$18.const$5, scope);
        }
        static Release ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Release$VH() {
        return constants$3216.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IMallocSpy*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3216.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IMallocSpy*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        constants$3216.const$5.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3216.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3216.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, Arena scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    /**
     * {@snippet :
 * SIZE_T (*PreAlloc)(IMallocSpy*,SIZE_T);
     * }
     */
    public interface PreAlloc {

        long apply(java.lang.foreign.MemorySegment _x0, long _x1);
        static MemorySegment allocate(PreAlloc fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3217.const$0, fi, constants$35.const$0, scope);
        }
        static PreAlloc ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, long __x1) -> {
                try {
                    return (long)constants$3217.const$1.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle PreAlloc$VH() {
        return constants$3217.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * SIZE_T (*PreAlloc)(IMallocSpy*,SIZE_T);
     * }
     */
    public static MemorySegment PreAlloc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3217.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * SIZE_T (*PreAlloc)(IMallocSpy*,SIZE_T);
     * }
     */
    public static void PreAlloc$set(MemorySegment seg, MemorySegment x) {
        constants$3217.const$2.set(seg, x);
    }
    public static MemorySegment PreAlloc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3217.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void PreAlloc$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3217.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static PreAlloc PreAlloc(MemorySegment segment, Arena scope) {
        return PreAlloc.ofAddress(PreAlloc$get(segment), scope);
    }
    /**
     * {@snippet :
 * void* (*PostAlloc)(IMallocSpy*,void*);
     * }
     */
    public interface PostAlloc {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(PostAlloc fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3217.const$3, fi, constants$30.const$3, scope);
        }
        static PostAlloc ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$3083.const$4.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle PostAlloc$VH() {
        return constants$3217.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* (*PostAlloc)(IMallocSpy*,void*);
     * }
     */
    public static MemorySegment PostAlloc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3217.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* (*PostAlloc)(IMallocSpy*,void*);
     * }
     */
    public static void PostAlloc$set(MemorySegment seg, MemorySegment x) {
        constants$3217.const$4.set(seg, x);
    }
    public static MemorySegment PostAlloc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3217.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void PostAlloc$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3217.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static PostAlloc PostAlloc(MemorySegment segment, Arena scope) {
        return PostAlloc.ofAddress(PostAlloc$get(segment), scope);
    }
    /**
     * {@snippet :
 * void* (*PreFree)(IMallocSpy*,void*,BOOL);
     * }
     */
    public interface PreFree {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2);
        static MemorySegment allocate(PreFree fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3217.const$5, fi, constants$713.const$1, scope);
        }
        static PreFree ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$3218.const$0.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle PreFree$VH() {
        return constants$3218.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* (*PreFree)(IMallocSpy*,void*,BOOL);
     * }
     */
    public static MemorySegment PreFree$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3218.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* (*PreFree)(IMallocSpy*,void*,BOOL);
     * }
     */
    public static void PreFree$set(MemorySegment seg, MemorySegment x) {
        constants$3218.const$1.set(seg, x);
    }
    public static MemorySegment PreFree$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3218.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void PreFree$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3218.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static PreFree PreFree(MemorySegment segment, Arena scope) {
        return PreFree.ofAddress(PreFree$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*PostFree)(IMallocSpy*,BOOL);
     * }
     */
    public interface PostFree {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(PostFree fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3218.const$2, fi, constants$72.const$3, scope);
        }
        static PostFree ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    constants$1805.const$4.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle PostFree$VH() {
        return constants$3218.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*PostFree)(IMallocSpy*,BOOL);
     * }
     */
    public static MemorySegment PostFree$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3218.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*PostFree)(IMallocSpy*,BOOL);
     * }
     */
    public static void PostFree$set(MemorySegment seg, MemorySegment x) {
        constants$3218.const$3.set(seg, x);
    }
    public static MemorySegment PostFree$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3218.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void PostFree$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3218.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static PostFree PostFree(MemorySegment segment, Arena scope) {
        return PostFree.ofAddress(PostFree$get(segment), scope);
    }
    /**
     * {@snippet :
 * SIZE_T (*PreRealloc)(IMallocSpy*,void*,SIZE_T,void**,BOOL);
     * }
     */
    public interface PreRealloc {

        long apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, long _x2, java.lang.foreign.MemorySegment _x3, int _x4);
        static MemorySegment allocate(PreRealloc fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3218.const$5, fi, constants$3218.const$4, scope);
        }
        static PreRealloc ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, long __x2, java.lang.foreign.MemorySegment __x3, int __x4) -> {
                try {
                    return (long)constants$3219.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle PreRealloc$VH() {
        return constants$3219.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * SIZE_T (*PreRealloc)(IMallocSpy*,void*,SIZE_T,void**,BOOL);
     * }
     */
    public static MemorySegment PreRealloc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3219.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * SIZE_T (*PreRealloc)(IMallocSpy*,void*,SIZE_T,void**,BOOL);
     * }
     */
    public static void PreRealloc$set(MemorySegment seg, MemorySegment x) {
        constants$3219.const$1.set(seg, x);
    }
    public static MemorySegment PreRealloc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3219.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void PreRealloc$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3219.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static PreRealloc PreRealloc(MemorySegment segment, Arena scope) {
        return PreRealloc.ofAddress(PreRealloc$get(segment), scope);
    }
    /**
     * {@snippet :
 * void* (*PostRealloc)(IMallocSpy*,void*,BOOL);
     * }
     */
    public interface PostRealloc {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2);
        static MemorySegment allocate(PostRealloc fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3219.const$2, fi, constants$713.const$1, scope);
        }
        static PostRealloc ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$3218.const$0.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle PostRealloc$VH() {
        return constants$3219.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* (*PostRealloc)(IMallocSpy*,void*,BOOL);
     * }
     */
    public static MemorySegment PostRealloc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3219.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* (*PostRealloc)(IMallocSpy*,void*,BOOL);
     * }
     */
    public static void PostRealloc$set(MemorySegment seg, MemorySegment x) {
        constants$3219.const$3.set(seg, x);
    }
    public static MemorySegment PostRealloc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3219.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void PostRealloc$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3219.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static PostRealloc PostRealloc(MemorySegment segment, Arena scope) {
        return PostRealloc.ofAddress(PostRealloc$get(segment), scope);
    }
    /**
     * {@snippet :
 * void* (*PreGetSize)(IMallocSpy*,void*,BOOL);
     * }
     */
    public interface PreGetSize {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2);
        static MemorySegment allocate(PreGetSize fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3219.const$4, fi, constants$713.const$1, scope);
        }
        static PreGetSize ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$3218.const$0.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle PreGetSize$VH() {
        return constants$3219.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* (*PreGetSize)(IMallocSpy*,void*,BOOL);
     * }
     */
    public static MemorySegment PreGetSize$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3219.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* (*PreGetSize)(IMallocSpy*,void*,BOOL);
     * }
     */
    public static void PreGetSize$set(MemorySegment seg, MemorySegment x) {
        constants$3219.const$5.set(seg, x);
    }
    public static MemorySegment PreGetSize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3219.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void PreGetSize$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3219.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static PreGetSize PreGetSize(MemorySegment segment, Arena scope) {
        return PreGetSize.ofAddress(PreGetSize$get(segment), scope);
    }
    /**
     * {@snippet :
 * SIZE_T (*PostGetSize)(IMallocSpy*,SIZE_T,BOOL);
     * }
     */
    public interface PostGetSize {

        long apply(java.lang.foreign.MemorySegment _x0, long _x1, int _x2);
        static MemorySegment allocate(PostGetSize fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3220.const$1, fi, constants$3220.const$0, scope);
        }
        static PostGetSize ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, long __x1, int __x2) -> {
                try {
                    return (long)constants$3220.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle PostGetSize$VH() {
        return constants$3220.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * SIZE_T (*PostGetSize)(IMallocSpy*,SIZE_T,BOOL);
     * }
     */
    public static MemorySegment PostGetSize$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3220.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * SIZE_T (*PostGetSize)(IMallocSpy*,SIZE_T,BOOL);
     * }
     */
    public static void PostGetSize$set(MemorySegment seg, MemorySegment x) {
        constants$3220.const$3.set(seg, x);
    }
    public static MemorySegment PostGetSize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3220.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void PostGetSize$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3220.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static PostGetSize PostGetSize(MemorySegment segment, Arena scope) {
        return PostGetSize.ofAddress(PostGetSize$get(segment), scope);
    }
    /**
     * {@snippet :
 * void* (*PreDidAlloc)(IMallocSpy*,void*,BOOL);
     * }
     */
    public interface PreDidAlloc {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2);
        static MemorySegment allocate(PreDidAlloc fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3220.const$4, fi, constants$713.const$1, scope);
        }
        static PreDidAlloc ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$3218.const$0.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle PreDidAlloc$VH() {
        return constants$3220.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* (*PreDidAlloc)(IMallocSpy*,void*,BOOL);
     * }
     */
    public static MemorySegment PreDidAlloc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3220.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* (*PreDidAlloc)(IMallocSpy*,void*,BOOL);
     * }
     */
    public static void PreDidAlloc$set(MemorySegment seg, MemorySegment x) {
        constants$3220.const$5.set(seg, x);
    }
    public static MemorySegment PreDidAlloc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3220.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void PreDidAlloc$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3220.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static PreDidAlloc PreDidAlloc(MemorySegment segment, Arena scope) {
        return PreDidAlloc.ofAddress(PreDidAlloc$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*PostDidAlloc)(IMallocSpy*,void*,BOOL,int);
     * }
     */
    public interface PostDidAlloc {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3);
        static MemorySegment allocate(PostDidAlloc fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3221.const$0, fi, constants$584.const$5, scope);
        }
        static PostDidAlloc ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3) -> {
                try {
                    return (int)constants$2092.const$3.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle PostDidAlloc$VH() {
        return constants$3221.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*PostDidAlloc)(IMallocSpy*,void*,BOOL,int);
     * }
     */
    public static MemorySegment PostDidAlloc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3221.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*PostDidAlloc)(IMallocSpy*,void*,BOOL,int);
     * }
     */
    public static void PostDidAlloc$set(MemorySegment seg, MemorySegment x) {
        constants$3221.const$1.set(seg, x);
    }
    public static MemorySegment PostDidAlloc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3221.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void PostDidAlloc$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3221.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static PostDidAlloc PostDidAlloc(MemorySegment segment, Arena scope) {
        return PostDidAlloc.ofAddress(PostDidAlloc$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*PreHeapMinimize)(IMallocSpy*);
     * }
     */
    public interface PreHeapMinimize {

        void apply(java.lang.foreign.MemorySegment pParameter);
        static MemorySegment allocate(PreHeapMinimize fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3221.const$2, fi, constants$0.const$0, scope);
        }
        static PreHeapMinimize ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _pParameter) -> {
                try {
                    constants$496.const$2.invokeExact(symbol, _pParameter);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle PreHeapMinimize$VH() {
        return constants$3221.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*PreHeapMinimize)(IMallocSpy*);
     * }
     */
    public static MemorySegment PreHeapMinimize$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3221.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*PreHeapMinimize)(IMallocSpy*);
     * }
     */
    public static void PreHeapMinimize$set(MemorySegment seg, MemorySegment x) {
        constants$3221.const$3.set(seg, x);
    }
    public static MemorySegment PreHeapMinimize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3221.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void PreHeapMinimize$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3221.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static PreHeapMinimize PreHeapMinimize(MemorySegment segment, Arena scope) {
        return PreHeapMinimize.ofAddress(PreHeapMinimize$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*PostHeapMinimize)(IMallocSpy*);
     * }
     */
    public interface PostHeapMinimize {

        void apply(java.lang.foreign.MemorySegment pParameter);
        static MemorySegment allocate(PostHeapMinimize fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3221.const$4, fi, constants$0.const$0, scope);
        }
        static PostHeapMinimize ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _pParameter) -> {
                try {
                    constants$496.const$2.invokeExact(symbol, _pParameter);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle PostHeapMinimize$VH() {
        return constants$3221.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*PostHeapMinimize)(IMallocSpy*);
     * }
     */
    public static MemorySegment PostHeapMinimize$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3221.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*PostHeapMinimize)(IMallocSpy*);
     * }
     */
    public static void PostHeapMinimize$set(MemorySegment seg, MemorySegment x) {
        constants$3221.const$5.set(seg, x);
    }
    public static MemorySegment PostHeapMinimize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3221.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void PostHeapMinimize$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3221.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static PostHeapMinimize PostHeapMinimize(MemorySegment segment, Arena scope) {
        return PostHeapMinimize.ofAddress(PostHeapMinimize$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY {
 *     DWORD EntryLength;
 *     DWORD DependencyTypeFlags;
 *     DWORD ProviderSpecificFlags;
 *     VIRTUAL_STORAGE_TYPE VirtualStorageType;
 *     DWORD AncestorLevel;
 *     DWORD HostVolumeNameOffset;
 *     DWORD HostVolumeNameSize;
 *     DWORD DependentVolumeNameOffset;
 *     DWORD DependentVolumeNameSize;
 *     DWORD RelativePathOffset;
 *     DWORD RelativePathSize;
 *     DWORD DependentDeviceNameOffset;
 *     DWORD DependentDeviceNameSize;
 * };
 * }
 */
public class _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY {

    public static MemoryLayout $LAYOUT() {
        return constants$2667.const$5;
    }
    public static VarHandle EntryLength$VH() {
        return constants$2668.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD EntryLength;
     * }
     */
    public static int EntryLength$get(MemorySegment seg) {
        return (int)constants$2668.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD EntryLength;
     * }
     */
    public static void EntryLength$set(MemorySegment seg, int x) {
        constants$2668.const$0.set(seg, x);
    }
    public static int EntryLength$get(MemorySegment seg, long index) {
        return (int)constants$2668.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void EntryLength$set(MemorySegment seg, long index, int x) {
        constants$2668.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle DependencyTypeFlags$VH() {
        return constants$2668.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD DependencyTypeFlags;
     * }
     */
    public static int DependencyTypeFlags$get(MemorySegment seg) {
        return (int)constants$2668.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD DependencyTypeFlags;
     * }
     */
    public static void DependencyTypeFlags$set(MemorySegment seg, int x) {
        constants$2668.const$1.set(seg, x);
    }
    public static int DependencyTypeFlags$get(MemorySegment seg, long index) {
        return (int)constants$2668.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void DependencyTypeFlags$set(MemorySegment seg, long index, int x) {
        constants$2668.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ProviderSpecificFlags$VH() {
        return constants$2668.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD ProviderSpecificFlags;
     * }
     */
    public static int ProviderSpecificFlags$get(MemorySegment seg) {
        return (int)constants$2668.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD ProviderSpecificFlags;
     * }
     */
    public static void ProviderSpecificFlags$set(MemorySegment seg, int x) {
        constants$2668.const$2.set(seg, x);
    }
    public static int ProviderSpecificFlags$get(MemorySegment seg, long index) {
        return (int)constants$2668.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void ProviderSpecificFlags$set(MemorySegment seg, long index, int x) {
        constants$2668.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment VirtualStorageType$slice(MemorySegment seg) {
        return seg.asSlice(12, 20);
    }
    public static VarHandle AncestorLevel$VH() {
        return constants$2668.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD AncestorLevel;
     * }
     */
    public static int AncestorLevel$get(MemorySegment seg) {
        return (int)constants$2668.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD AncestorLevel;
     * }
     */
    public static void AncestorLevel$set(MemorySegment seg, int x) {
        constants$2668.const$3.set(seg, x);
    }
    public static int AncestorLevel$get(MemorySegment seg, long index) {
        return (int)constants$2668.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void AncestorLevel$set(MemorySegment seg, long index, int x) {
        constants$2668.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle HostVolumeNameOffset$VH() {
        return constants$2668.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD HostVolumeNameOffset;
     * }
     */
    public static int HostVolumeNameOffset$get(MemorySegment seg) {
        return (int)constants$2668.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD HostVolumeNameOffset;
     * }
     */
    public static void HostVolumeNameOffset$set(MemorySegment seg, int x) {
        constants$2668.const$4.set(seg, x);
    }
    public static int HostVolumeNameOffset$get(MemorySegment seg, long index) {
        return (int)constants$2668.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void HostVolumeNameOffset$set(MemorySegment seg, long index, int x) {
        constants$2668.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle HostVolumeNameSize$VH() {
        return constants$2668.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD HostVolumeNameSize;
     * }
     */
    public static int HostVolumeNameSize$get(MemorySegment seg) {
        return (int)constants$2668.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD HostVolumeNameSize;
     * }
     */
    public static void HostVolumeNameSize$set(MemorySegment seg, int x) {
        constants$2668.const$5.set(seg, x);
    }
    public static int HostVolumeNameSize$get(MemorySegment seg, long index) {
        return (int)constants$2668.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void HostVolumeNameSize$set(MemorySegment seg, long index, int x) {
        constants$2668.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle DependentVolumeNameOffset$VH() {
        return constants$2669.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD DependentVolumeNameOffset;
     * }
     */
    public static int DependentVolumeNameOffset$get(MemorySegment seg) {
        return (int)constants$2669.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD DependentVolumeNameOffset;
     * }
     */
    public static void DependentVolumeNameOffset$set(MemorySegment seg, int x) {
        constants$2669.const$0.set(seg, x);
    }
    public static int DependentVolumeNameOffset$get(MemorySegment seg, long index) {
        return (int)constants$2669.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void DependentVolumeNameOffset$set(MemorySegment seg, long index, int x) {
        constants$2669.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle DependentVolumeNameSize$VH() {
        return constants$2669.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD DependentVolumeNameSize;
     * }
     */
    public static int DependentVolumeNameSize$get(MemorySegment seg) {
        return (int)constants$2669.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD DependentVolumeNameSize;
     * }
     */
    public static void DependentVolumeNameSize$set(MemorySegment seg, int x) {
        constants$2669.const$1.set(seg, x);
    }
    public static int DependentVolumeNameSize$get(MemorySegment seg, long index) {
        return (int)constants$2669.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void DependentVolumeNameSize$set(MemorySegment seg, long index, int x) {
        constants$2669.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle RelativePathOffset$VH() {
        return constants$2669.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD RelativePathOffset;
     * }
     */
    public static int RelativePathOffset$get(MemorySegment seg) {
        return (int)constants$2669.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD RelativePathOffset;
     * }
     */
    public static void RelativePathOffset$set(MemorySegment seg, int x) {
        constants$2669.const$2.set(seg, x);
    }
    public static int RelativePathOffset$get(MemorySegment seg, long index) {
        return (int)constants$2669.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void RelativePathOffset$set(MemorySegment seg, long index, int x) {
        constants$2669.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle RelativePathSize$VH() {
        return constants$2669.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD RelativePathSize;
     * }
     */
    public static int RelativePathSize$get(MemorySegment seg) {
        return (int)constants$2669.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD RelativePathSize;
     * }
     */
    public static void RelativePathSize$set(MemorySegment seg, int x) {
        constants$2669.const$3.set(seg, x);
    }
    public static int RelativePathSize$get(MemorySegment seg, long index) {
        return (int)constants$2669.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void RelativePathSize$set(MemorySegment seg, long index, int x) {
        constants$2669.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle DependentDeviceNameOffset$VH() {
        return constants$2669.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD DependentDeviceNameOffset;
     * }
     */
    public static int DependentDeviceNameOffset$get(MemorySegment seg) {
        return (int)constants$2669.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD DependentDeviceNameOffset;
     * }
     */
    public static void DependentDeviceNameOffset$set(MemorySegment seg, int x) {
        constants$2669.const$4.set(seg, x);
    }
    public static int DependentDeviceNameOffset$get(MemorySegment seg, long index) {
        return (int)constants$2669.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void DependentDeviceNameOffset$set(MemorySegment seg, long index, int x) {
        constants$2669.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle DependentDeviceNameSize$VH() {
        return constants$2669.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD DependentDeviceNameSize;
     * }
     */
    public static int DependentDeviceNameSize$get(MemorySegment seg) {
        return (int)constants$2669.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD DependentDeviceNameSize;
     * }
     */
    public static void DependentDeviceNameSize$set(MemorySegment seg, int x) {
        constants$2669.const$5.set(seg, x);
    }
    public static int DependentDeviceNameSize$get(MemorySegment seg, long index) {
        return (int)constants$2669.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void DependentDeviceNameSize$set(MemorySegment seg, long index, int x) {
        constants$2669.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



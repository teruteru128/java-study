// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _CERT_ALT_NAME_ENTRY {
 *     DWORD dwAltNameChoice;
 *     union {
 *         PCERT_OTHER_NAME pOtherName;
 *         LPWSTR pwszRfc822Name;
 *         LPWSTR pwszDNSName;
 *         CERT_NAME_BLOB DirectoryName;
 *         LPWSTR pwszURL;
 *         CRYPT_DATA_BLOB IPAddress;
 *         LPSTR pszRegisteredID;
 *     };
 * };
 * }
 */
public class _CERT_ALT_NAME_ENTRY {

    public static MemoryLayout $LAYOUT() {
        return constants$2026.const$3;
    }
    public static VarHandle dwAltNameChoice$VH() {
        return constants$2026.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwAltNameChoice;
     * }
     */
    public static int dwAltNameChoice$get(MemorySegment seg) {
        return (int)constants$2026.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwAltNameChoice;
     * }
     */
    public static void dwAltNameChoice$set(MemorySegment seg, int x) {
        constants$2026.const$4.set(seg, x);
    }
    public static int dwAltNameChoice$get(MemorySegment seg, long index) {
        return (int)constants$2026.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void dwAltNameChoice$set(MemorySegment seg, long index, int x) {
        constants$2026.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pOtherName$VH() {
        return constants$2026.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PCERT_OTHER_NAME pOtherName;
     * }
     */
    public static MemorySegment pOtherName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2026.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PCERT_OTHER_NAME pOtherName;
     * }
     */
    public static void pOtherName$set(MemorySegment seg, MemorySegment x) {
        constants$2026.const$5.set(seg, x);
    }
    public static MemorySegment pOtherName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2026.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void pOtherName$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2026.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pwszRfc822Name$VH() {
        return constants$2027.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPWSTR pwszRfc822Name;
     * }
     */
    public static MemorySegment pwszRfc822Name$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2027.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPWSTR pwszRfc822Name;
     * }
     */
    public static void pwszRfc822Name$set(MemorySegment seg, MemorySegment x) {
        constants$2027.const$0.set(seg, x);
    }
    public static MemorySegment pwszRfc822Name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2027.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void pwszRfc822Name$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2027.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pwszDNSName$VH() {
        return constants$2027.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPWSTR pwszDNSName;
     * }
     */
    public static MemorySegment pwszDNSName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2027.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPWSTR pwszDNSName;
     * }
     */
    public static void pwszDNSName$set(MemorySegment seg, MemorySegment x) {
        constants$2027.const$1.set(seg, x);
    }
    public static MemorySegment pwszDNSName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2027.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void pwszDNSName$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2027.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment DirectoryName$slice(MemorySegment seg) {
        return seg.asSlice(8, 16);
    }
    public static VarHandle pwszURL$VH() {
        return constants$2027.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPWSTR pwszURL;
     * }
     */
    public static MemorySegment pwszURL$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2027.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPWSTR pwszURL;
     * }
     */
    public static void pwszURL$set(MemorySegment seg, MemorySegment x) {
        constants$2027.const$2.set(seg, x);
    }
    public static MemorySegment pwszURL$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2027.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void pwszURL$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2027.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment IPAddress$slice(MemorySegment seg) {
        return seg.asSlice(8, 16);
    }
    public static VarHandle pszRegisteredID$VH() {
        return constants$2027.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPSTR pszRegisteredID;
     * }
     */
    public static MemorySegment pszRegisteredID$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2027.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPSTR pszRegisteredID;
     * }
     */
    public static void pszRegisteredID$set(MemorySegment seg, MemorySegment x) {
        constants$2027.const$3.set(seg, x);
    }
    public static MemorySegment pszRegisteredID$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2027.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void pszRegisteredID$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2027.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



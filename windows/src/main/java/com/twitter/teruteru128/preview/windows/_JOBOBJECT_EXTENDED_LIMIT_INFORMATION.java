// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION {
 *     JOBOBJECT_BASIC_LIMIT_INFORMATION BasicLimitInformation;
 *     IO_COUNTERS IoInfo;
 *     SIZE_T ProcessMemoryLimit;
 *     SIZE_T JobMemoryLimit;
 *     SIZE_T PeakProcessMemoryUsed;
 *     SIZE_T PeakJobMemoryUsed;
 * };
 * }
 */
public class _JOBOBJECT_EXTENDED_LIMIT_INFORMATION {

    public static MemoryLayout $LAYOUT() {
        return constants$204.const$2;
    }
    public static MemorySegment BasicLimitInformation$slice(MemorySegment seg) {
        return seg.asSlice(0, 64);
    }
    public static MemorySegment IoInfo$slice(MemorySegment seg) {
        return seg.asSlice(64, 48);
    }
    public static VarHandle ProcessMemoryLimit$VH() {
        return constants$204.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * SIZE_T ProcessMemoryLimit;
     * }
     */
    public static long ProcessMemoryLimit$get(MemorySegment seg) {
        return (long)constants$204.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * SIZE_T ProcessMemoryLimit;
     * }
     */
    public static void ProcessMemoryLimit$set(MemorySegment seg, long x) {
        constants$204.const$3.set(seg, x);
    }
    public static long ProcessMemoryLimit$get(MemorySegment seg, long index) {
        return (long)constants$204.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void ProcessMemoryLimit$set(MemorySegment seg, long index, long x) {
        constants$204.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle JobMemoryLimit$VH() {
        return constants$204.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * SIZE_T JobMemoryLimit;
     * }
     */
    public static long JobMemoryLimit$get(MemorySegment seg) {
        return (long)constants$204.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * SIZE_T JobMemoryLimit;
     * }
     */
    public static void JobMemoryLimit$set(MemorySegment seg, long x) {
        constants$204.const$4.set(seg, x);
    }
    public static long JobMemoryLimit$get(MemorySegment seg, long index) {
        return (long)constants$204.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void JobMemoryLimit$set(MemorySegment seg, long index, long x) {
        constants$204.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle PeakProcessMemoryUsed$VH() {
        return constants$204.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * SIZE_T PeakProcessMemoryUsed;
     * }
     */
    public static long PeakProcessMemoryUsed$get(MemorySegment seg) {
        return (long)constants$204.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * SIZE_T PeakProcessMemoryUsed;
     * }
     */
    public static void PeakProcessMemoryUsed$set(MemorySegment seg, long x) {
        constants$204.const$5.set(seg, x);
    }
    public static long PeakProcessMemoryUsed$get(MemorySegment seg, long index) {
        return (long)constants$204.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void PeakProcessMemoryUsed$set(MemorySegment seg, long index, long x) {
        constants$204.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle PeakJobMemoryUsed$VH() {
        return constants$205.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * SIZE_T PeakJobMemoryUsed;
     * }
     */
    public static long PeakJobMemoryUsed$get(MemorySegment seg) {
        return (long)constants$205.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * SIZE_T PeakJobMemoryUsed;
     * }
     */
    public static void PeakJobMemoryUsed$set(MemorySegment seg, long x) {
        constants$205.const$0.set(seg, x);
    }
    public static long PeakJobMemoryUsed$get(MemorySegment seg, long index) {
        return (long)constants$205.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void PeakJobMemoryUsed$set(MemorySegment seg, long index, long x) {
        constants$205.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



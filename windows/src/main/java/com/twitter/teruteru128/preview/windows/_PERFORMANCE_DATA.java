// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _PERFORMANCE_DATA {
 *     WORD Size;
 *     BYTE Version;
 *     BYTE HwCountersCount;
 *     DWORD ContextSwitchCount;
 *     DWORD64 WaitReasonBitMap;
 *     DWORD64 CycleTime;
 *     DWORD RetryCount;
 *     DWORD Reserved;
 *     HARDWARE_COUNTER_DATA HwCounters[16];
 * };
 * }
 */
public class _PERFORMANCE_DATA {

    public static MemoryLayout $LAYOUT() {
        return constants$507.const$2;
    }
    public static VarHandle Size$VH() {
        return constants$507.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD Size;
     * }
     */
    public static short Size$get(MemorySegment seg) {
        return (short)constants$507.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD Size;
     * }
     */
    public static void Size$set(MemorySegment seg, short x) {
        constants$507.const$3.set(seg, x);
    }
    public static short Size$get(MemorySegment seg, long index) {
        return (short)constants$507.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void Size$set(MemorySegment seg, long index, short x) {
        constants$507.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Version$VH() {
        return constants$507.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE Version;
     * }
     */
    public static byte Version$get(MemorySegment seg) {
        return (byte)constants$507.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE Version;
     * }
     */
    public static void Version$set(MemorySegment seg, byte x) {
        constants$507.const$4.set(seg, x);
    }
    public static byte Version$get(MemorySegment seg, long index) {
        return (byte)constants$507.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, byte x) {
        constants$507.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle HwCountersCount$VH() {
        return constants$507.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE HwCountersCount;
     * }
     */
    public static byte HwCountersCount$get(MemorySegment seg) {
        return (byte)constants$507.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE HwCountersCount;
     * }
     */
    public static void HwCountersCount$set(MemorySegment seg, byte x) {
        constants$507.const$5.set(seg, x);
    }
    public static byte HwCountersCount$get(MemorySegment seg, long index) {
        return (byte)constants$507.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void HwCountersCount$set(MemorySegment seg, long index, byte x) {
        constants$507.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ContextSwitchCount$VH() {
        return constants$508.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD ContextSwitchCount;
     * }
     */
    public static int ContextSwitchCount$get(MemorySegment seg) {
        return (int)constants$508.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD ContextSwitchCount;
     * }
     */
    public static void ContextSwitchCount$set(MemorySegment seg, int x) {
        constants$508.const$0.set(seg, x);
    }
    public static int ContextSwitchCount$get(MemorySegment seg, long index) {
        return (int)constants$508.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void ContextSwitchCount$set(MemorySegment seg, long index, int x) {
        constants$508.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle WaitReasonBitMap$VH() {
        return constants$508.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 WaitReasonBitMap;
     * }
     */
    public static long WaitReasonBitMap$get(MemorySegment seg) {
        return (long)constants$508.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 WaitReasonBitMap;
     * }
     */
    public static void WaitReasonBitMap$set(MemorySegment seg, long x) {
        constants$508.const$1.set(seg, x);
    }
    public static long WaitReasonBitMap$get(MemorySegment seg, long index) {
        return (long)constants$508.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void WaitReasonBitMap$set(MemorySegment seg, long index, long x) {
        constants$508.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle CycleTime$VH() {
        return constants$508.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 CycleTime;
     * }
     */
    public static long CycleTime$get(MemorySegment seg) {
        return (long)constants$508.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 CycleTime;
     * }
     */
    public static void CycleTime$set(MemorySegment seg, long x) {
        constants$508.const$2.set(seg, x);
    }
    public static long CycleTime$get(MemorySegment seg, long index) {
        return (long)constants$508.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void CycleTime$set(MemorySegment seg, long index, long x) {
        constants$508.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle RetryCount$VH() {
        return constants$508.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD RetryCount;
     * }
     */
    public static int RetryCount$get(MemorySegment seg) {
        return (int)constants$508.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD RetryCount;
     * }
     */
    public static void RetryCount$set(MemorySegment seg, int x) {
        constants$508.const$3.set(seg, x);
    }
    public static int RetryCount$get(MemorySegment seg, long index) {
        return (int)constants$508.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void RetryCount$set(MemorySegment seg, long index, int x) {
        constants$508.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Reserved$VH() {
        return constants$508.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Reserved;
     * }
     */
    public static int Reserved$get(MemorySegment seg) {
        return (int)constants$508.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Reserved;
     * }
     */
    public static void Reserved$set(MemorySegment seg, int x) {
        constants$508.const$4.set(seg, x);
    }
    public static int Reserved$get(MemorySegment seg, long index) {
        return (int)constants$508.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void Reserved$set(MemorySegment seg, long index, int x) {
        constants$508.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment HwCounters$slice(MemorySegment seg) {
        return seg.asSlice(32, 256);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



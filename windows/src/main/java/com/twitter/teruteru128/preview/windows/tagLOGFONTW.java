// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tagLOGFONTW {
 *     LONG lfHeight;
 *     LONG lfWidth;
 *     LONG lfEscapement;
 *     LONG lfOrientation;
 *     LONG lfWeight;
 *     BYTE lfItalic;
 *     BYTE lfUnderline;
 *     BYTE lfStrikeOut;
 *     BYTE lfCharSet;
 *     BYTE lfOutPrecision;
 *     BYTE lfClipPrecision;
 *     BYTE lfQuality;
 *     BYTE lfPitchAndFamily;
 *     WCHAR lfFaceName[32];
 * };
 * }
 */
public class tagLOGFONTW {

    public static MemoryLayout $LAYOUT() {
        return constants$937.const$4;
    }
    public static VarHandle lfHeight$VH() {
        return constants$937.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LONG lfHeight;
     * }
     */
    public static int lfHeight$get(MemorySegment seg) {
        return (int)constants$937.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LONG lfHeight;
     * }
     */
    public static void lfHeight$set(MemorySegment seg, int x) {
        constants$937.const$5.set(seg, x);
    }
    public static int lfHeight$get(MemorySegment seg, long index) {
        return (int)constants$937.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void lfHeight$set(MemorySegment seg, long index, int x) {
        constants$937.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lfWidth$VH() {
        return constants$938.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LONG lfWidth;
     * }
     */
    public static int lfWidth$get(MemorySegment seg) {
        return (int)constants$938.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LONG lfWidth;
     * }
     */
    public static void lfWidth$set(MemorySegment seg, int x) {
        constants$938.const$0.set(seg, x);
    }
    public static int lfWidth$get(MemorySegment seg, long index) {
        return (int)constants$938.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void lfWidth$set(MemorySegment seg, long index, int x) {
        constants$938.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lfEscapement$VH() {
        return constants$938.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LONG lfEscapement;
     * }
     */
    public static int lfEscapement$get(MemorySegment seg) {
        return (int)constants$938.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LONG lfEscapement;
     * }
     */
    public static void lfEscapement$set(MemorySegment seg, int x) {
        constants$938.const$1.set(seg, x);
    }
    public static int lfEscapement$get(MemorySegment seg, long index) {
        return (int)constants$938.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void lfEscapement$set(MemorySegment seg, long index, int x) {
        constants$938.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lfOrientation$VH() {
        return constants$938.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LONG lfOrientation;
     * }
     */
    public static int lfOrientation$get(MemorySegment seg) {
        return (int)constants$938.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LONG lfOrientation;
     * }
     */
    public static void lfOrientation$set(MemorySegment seg, int x) {
        constants$938.const$2.set(seg, x);
    }
    public static int lfOrientation$get(MemorySegment seg, long index) {
        return (int)constants$938.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void lfOrientation$set(MemorySegment seg, long index, int x) {
        constants$938.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lfWeight$VH() {
        return constants$938.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LONG lfWeight;
     * }
     */
    public static int lfWeight$get(MemorySegment seg) {
        return (int)constants$938.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LONG lfWeight;
     * }
     */
    public static void lfWeight$set(MemorySegment seg, int x) {
        constants$938.const$3.set(seg, x);
    }
    public static int lfWeight$get(MemorySegment seg, long index) {
        return (int)constants$938.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void lfWeight$set(MemorySegment seg, long index, int x) {
        constants$938.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lfItalic$VH() {
        return constants$938.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE lfItalic;
     * }
     */
    public static byte lfItalic$get(MemorySegment seg) {
        return (byte)constants$938.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE lfItalic;
     * }
     */
    public static void lfItalic$set(MemorySegment seg, byte x) {
        constants$938.const$4.set(seg, x);
    }
    public static byte lfItalic$get(MemorySegment seg, long index) {
        return (byte)constants$938.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void lfItalic$set(MemorySegment seg, long index, byte x) {
        constants$938.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lfUnderline$VH() {
        return constants$938.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE lfUnderline;
     * }
     */
    public static byte lfUnderline$get(MemorySegment seg) {
        return (byte)constants$938.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE lfUnderline;
     * }
     */
    public static void lfUnderline$set(MemorySegment seg, byte x) {
        constants$938.const$5.set(seg, x);
    }
    public static byte lfUnderline$get(MemorySegment seg, long index) {
        return (byte)constants$938.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void lfUnderline$set(MemorySegment seg, long index, byte x) {
        constants$938.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lfStrikeOut$VH() {
        return constants$939.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE lfStrikeOut;
     * }
     */
    public static byte lfStrikeOut$get(MemorySegment seg) {
        return (byte)constants$939.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE lfStrikeOut;
     * }
     */
    public static void lfStrikeOut$set(MemorySegment seg, byte x) {
        constants$939.const$0.set(seg, x);
    }
    public static byte lfStrikeOut$get(MemorySegment seg, long index) {
        return (byte)constants$939.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void lfStrikeOut$set(MemorySegment seg, long index, byte x) {
        constants$939.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lfCharSet$VH() {
        return constants$939.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE lfCharSet;
     * }
     */
    public static byte lfCharSet$get(MemorySegment seg) {
        return (byte)constants$939.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE lfCharSet;
     * }
     */
    public static void lfCharSet$set(MemorySegment seg, byte x) {
        constants$939.const$1.set(seg, x);
    }
    public static byte lfCharSet$get(MemorySegment seg, long index) {
        return (byte)constants$939.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void lfCharSet$set(MemorySegment seg, long index, byte x) {
        constants$939.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lfOutPrecision$VH() {
        return constants$939.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE lfOutPrecision;
     * }
     */
    public static byte lfOutPrecision$get(MemorySegment seg) {
        return (byte)constants$939.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE lfOutPrecision;
     * }
     */
    public static void lfOutPrecision$set(MemorySegment seg, byte x) {
        constants$939.const$2.set(seg, x);
    }
    public static byte lfOutPrecision$get(MemorySegment seg, long index) {
        return (byte)constants$939.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void lfOutPrecision$set(MemorySegment seg, long index, byte x) {
        constants$939.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lfClipPrecision$VH() {
        return constants$939.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE lfClipPrecision;
     * }
     */
    public static byte lfClipPrecision$get(MemorySegment seg) {
        return (byte)constants$939.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE lfClipPrecision;
     * }
     */
    public static void lfClipPrecision$set(MemorySegment seg, byte x) {
        constants$939.const$3.set(seg, x);
    }
    public static byte lfClipPrecision$get(MemorySegment seg, long index) {
        return (byte)constants$939.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void lfClipPrecision$set(MemorySegment seg, long index, byte x) {
        constants$939.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lfQuality$VH() {
        return constants$939.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE lfQuality;
     * }
     */
    public static byte lfQuality$get(MemorySegment seg) {
        return (byte)constants$939.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE lfQuality;
     * }
     */
    public static void lfQuality$set(MemorySegment seg, byte x) {
        constants$939.const$4.set(seg, x);
    }
    public static byte lfQuality$get(MemorySegment seg, long index) {
        return (byte)constants$939.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void lfQuality$set(MemorySegment seg, long index, byte x) {
        constants$939.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lfPitchAndFamily$VH() {
        return constants$939.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE lfPitchAndFamily;
     * }
     */
    public static byte lfPitchAndFamily$get(MemorySegment seg) {
        return (byte)constants$939.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE lfPitchAndFamily;
     * }
     */
    public static void lfPitchAndFamily$set(MemorySegment seg, byte x) {
        constants$939.const$5.set(seg, x);
    }
    public static byte lfPitchAndFamily$get(MemorySegment seg, long index) {
        return (byte)constants$939.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void lfPitchAndFamily$set(MemorySegment seg, long index, byte x) {
        constants$939.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment lfFaceName$slice(MemorySegment seg) {
        return seg.asSlice(28, 64);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



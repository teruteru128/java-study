// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _DISPATCHER_CONTEXT {
 *     DWORD64 ControlPc;
 *     DWORD64 ImageBase;
 *     PRUNTIME_FUNCTION FunctionEntry;
 *     DWORD64 EstablisherFrame;
 *     DWORD64 TargetIp;
 *     PCONTEXT ContextRecord;
 *     PEXCEPTION_ROUTINE LanguageHandler;
 *     PVOID HandlerData;
 *     struct _UNWIND_HISTORY_TABLE* HistoryTable;
 *     DWORD ScopeIndex;
 *     DWORD Fill0;
 * };
 * }
 */
public class _DISPATCHER_CONTEXT {

    public static MemoryLayout $LAYOUT() {
        return constants$90.const$1;
    }
    public static VarHandle ControlPc$VH() {
        return constants$90.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 ControlPc;
     * }
     */
    public static long ControlPc$get(MemorySegment seg) {
        return (long)constants$90.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 ControlPc;
     * }
     */
    public static void ControlPc$set(MemorySegment seg, long x) {
        constants$90.const$2.set(seg, x);
    }
    public static long ControlPc$get(MemorySegment seg, long index) {
        return (long)constants$90.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void ControlPc$set(MemorySegment seg, long index, long x) {
        constants$90.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ImageBase$VH() {
        return constants$90.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 ImageBase;
     * }
     */
    public static long ImageBase$get(MemorySegment seg) {
        return (long)constants$90.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 ImageBase;
     * }
     */
    public static void ImageBase$set(MemorySegment seg, long x) {
        constants$90.const$3.set(seg, x);
    }
    public static long ImageBase$get(MemorySegment seg, long index) {
        return (long)constants$90.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void ImageBase$set(MemorySegment seg, long index, long x) {
        constants$90.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle FunctionEntry$VH() {
        return constants$90.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PRUNTIME_FUNCTION FunctionEntry;
     * }
     */
    public static MemorySegment FunctionEntry$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$90.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PRUNTIME_FUNCTION FunctionEntry;
     * }
     */
    public static void FunctionEntry$set(MemorySegment seg, MemorySegment x) {
        constants$90.const$4.set(seg, x);
    }
    public static MemorySegment FunctionEntry$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$90.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void FunctionEntry$set(MemorySegment seg, long index, MemorySegment x) {
        constants$90.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle EstablisherFrame$VH() {
        return constants$90.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 EstablisherFrame;
     * }
     */
    public static long EstablisherFrame$get(MemorySegment seg) {
        return (long)constants$90.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 EstablisherFrame;
     * }
     */
    public static void EstablisherFrame$set(MemorySegment seg, long x) {
        constants$90.const$5.set(seg, x);
    }
    public static long EstablisherFrame$get(MemorySegment seg, long index) {
        return (long)constants$90.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void EstablisherFrame$set(MemorySegment seg, long index, long x) {
        constants$90.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle TargetIp$VH() {
        return constants$91.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 TargetIp;
     * }
     */
    public static long TargetIp$get(MemorySegment seg) {
        return (long)constants$91.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 TargetIp;
     * }
     */
    public static void TargetIp$set(MemorySegment seg, long x) {
        constants$91.const$0.set(seg, x);
    }
    public static long TargetIp$get(MemorySegment seg, long index) {
        return (long)constants$91.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void TargetIp$set(MemorySegment seg, long index, long x) {
        constants$91.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ContextRecord$VH() {
        return constants$91.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PCONTEXT ContextRecord;
     * }
     */
    public static MemorySegment ContextRecord$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$91.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PCONTEXT ContextRecord;
     * }
     */
    public static void ContextRecord$set(MemorySegment seg, MemorySegment x) {
        constants$91.const$1.set(seg, x);
    }
    public static MemorySegment ContextRecord$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$91.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void ContextRecord$set(MemorySegment seg, long index, MemorySegment x) {
        constants$91.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle LanguageHandler$VH() {
        return constants$91.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PEXCEPTION_ROUTINE LanguageHandler;
     * }
     */
    public static MemorySegment LanguageHandler$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$91.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PEXCEPTION_ROUTINE LanguageHandler;
     * }
     */
    public static void LanguageHandler$set(MemorySegment seg, MemorySegment x) {
        constants$91.const$2.set(seg, x);
    }
    public static MemorySegment LanguageHandler$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$91.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void LanguageHandler$set(MemorySegment seg, long index, MemorySegment x) {
        constants$91.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static PEXCEPTION_ROUTINE LanguageHandler(MemorySegment segment, Arena scope) {
        return PEXCEPTION_ROUTINE.ofAddress(LanguageHandler$get(segment), scope);
    }
    public static VarHandle HandlerData$VH() {
        return constants$91.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PVOID HandlerData;
     * }
     */
    public static MemorySegment HandlerData$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$91.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PVOID HandlerData;
     * }
     */
    public static void HandlerData$set(MemorySegment seg, MemorySegment x) {
        constants$91.const$3.set(seg, x);
    }
    public static MemorySegment HandlerData$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$91.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void HandlerData$set(MemorySegment seg, long index, MemorySegment x) {
        constants$91.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle HistoryTable$VH() {
        return constants$91.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _UNWIND_HISTORY_TABLE* HistoryTable;
     * }
     */
    public static MemorySegment HistoryTable$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$91.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _UNWIND_HISTORY_TABLE* HistoryTable;
     * }
     */
    public static void HistoryTable$set(MemorySegment seg, MemorySegment x) {
        constants$91.const$4.set(seg, x);
    }
    public static MemorySegment HistoryTable$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$91.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void HistoryTable$set(MemorySegment seg, long index, MemorySegment x) {
        constants$91.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ScopeIndex$VH() {
        return constants$91.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD ScopeIndex;
     * }
     */
    public static int ScopeIndex$get(MemorySegment seg) {
        return (int)constants$91.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD ScopeIndex;
     * }
     */
    public static void ScopeIndex$set(MemorySegment seg, int x) {
        constants$91.const$5.set(seg, x);
    }
    public static int ScopeIndex$get(MemorySegment seg, long index) {
        return (int)constants$91.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void ScopeIndex$set(MemorySegment seg, long index, int x) {
        constants$91.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Fill0$VH() {
        return constants$92.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Fill0;
     * }
     */
    public static int Fill0$get(MemorySegment seg) {
        return (int)constants$92.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Fill0;
     * }
     */
    public static void Fill0$set(MemorySegment seg, int x) {
        constants$92.const$0.set(seg, x);
    }
    public static int Fill0$get(MemorySegment seg, long index) {
        return (int)constants$92.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Fill0$set(MemorySegment seg, long index, int x) {
        constants$92.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



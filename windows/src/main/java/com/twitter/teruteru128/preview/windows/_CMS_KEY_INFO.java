// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _CMS_KEY_INFO {
 *     DWORD dwVersion;
 *     ALG_ID Algid;
 *     BYTE* pbOID;
 *     DWORD cbOID;
 * };
 * }
 */
public class _CMS_KEY_INFO {

    public static MemoryLayout $LAYOUT() {
        return constants$1918.const$2;
    }
    public static VarHandle dwVersion$VH() {
        return constants$1918.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwVersion;
     * }
     */
    public static int dwVersion$get(MemorySegment seg) {
        return (int)constants$1918.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwVersion;
     * }
     */
    public static void dwVersion$set(MemorySegment seg, int x) {
        constants$1918.const$3.set(seg, x);
    }
    public static int dwVersion$get(MemorySegment seg, long index) {
        return (int)constants$1918.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void dwVersion$set(MemorySegment seg, long index, int x) {
        constants$1918.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Algid$VH() {
        return constants$1918.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ALG_ID Algid;
     * }
     */
    public static int Algid$get(MemorySegment seg) {
        return (int)constants$1918.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ALG_ID Algid;
     * }
     */
    public static void Algid$set(MemorySegment seg, int x) {
        constants$1918.const$4.set(seg, x);
    }
    public static int Algid$get(MemorySegment seg, long index) {
        return (int)constants$1918.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void Algid$set(MemorySegment seg, long index, int x) {
        constants$1918.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pbOID$VH() {
        return constants$1918.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE* pbOID;
     * }
     */
    public static MemorySegment pbOID$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1918.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE* pbOID;
     * }
     */
    public static void pbOID$set(MemorySegment seg, MemorySegment x) {
        constants$1918.const$5.set(seg, x);
    }
    public static MemorySegment pbOID$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1918.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void pbOID$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1918.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cbOID$VH() {
        return constants$1919.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD cbOID;
     * }
     */
    public static int cbOID$get(MemorySegment seg) {
        return (int)constants$1919.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD cbOID;
     * }
     */
    public static void cbOID$set(MemorySegment seg, int x) {
        constants$1919.const$0.set(seg, x);
    }
    public static int cbOID$get(MemorySegment seg, long index) {
        return (int)constants$1919.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void cbOID$set(MemorySegment seg, long index, int x) {
        constants$1919.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _CRYPT_PKCS8_EXPORT_PARAMS {
 *     HCRYPTPROV hCryptProv;
 *     DWORD dwKeySpec;
 *     LPSTR pszPrivateKeyObjId;
 *     PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC pEncryptPrivateKeyFunc;
 *     LPVOID pVoidEncryptFunc;
 * };
 * }
 */
public class _CRYPT_PKCS8_EXPORT_PARAMS {

    public static MemoryLayout $LAYOUT() {
        return constants$2011.const$3;
    }
    public static VarHandle hCryptProv$VH() {
        return constants$2011.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HCRYPTPROV hCryptProv;
     * }
     */
    public static long hCryptProv$get(MemorySegment seg) {
        return (long)constants$2011.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HCRYPTPROV hCryptProv;
     * }
     */
    public static void hCryptProv$set(MemorySegment seg, long x) {
        constants$2011.const$4.set(seg, x);
    }
    public static long hCryptProv$get(MemorySegment seg, long index) {
        return (long)constants$2011.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void hCryptProv$set(MemorySegment seg, long index, long x) {
        constants$2011.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwKeySpec$VH() {
        return constants$2011.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwKeySpec;
     * }
     */
    public static int dwKeySpec$get(MemorySegment seg) {
        return (int)constants$2011.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwKeySpec;
     * }
     */
    public static void dwKeySpec$set(MemorySegment seg, int x) {
        constants$2011.const$5.set(seg, x);
    }
    public static int dwKeySpec$get(MemorySegment seg, long index) {
        return (int)constants$2011.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void dwKeySpec$set(MemorySegment seg, long index, int x) {
        constants$2011.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pszPrivateKeyObjId$VH() {
        return constants$2012.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPSTR pszPrivateKeyObjId;
     * }
     */
    public static MemorySegment pszPrivateKeyObjId$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2012.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPSTR pszPrivateKeyObjId;
     * }
     */
    public static void pszPrivateKeyObjId$set(MemorySegment seg, MemorySegment x) {
        constants$2012.const$0.set(seg, x);
    }
    public static MemorySegment pszPrivateKeyObjId$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2012.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void pszPrivateKeyObjId$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2012.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pEncryptPrivateKeyFunc$VH() {
        return constants$2012.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC pEncryptPrivateKeyFunc;
     * }
     */
    public static MemorySegment pEncryptPrivateKeyFunc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2012.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC pEncryptPrivateKeyFunc;
     * }
     */
    public static void pEncryptPrivateKeyFunc$set(MemorySegment seg, MemorySegment x) {
        constants$2012.const$1.set(seg, x);
    }
    public static MemorySegment pEncryptPrivateKeyFunc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2012.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void pEncryptPrivateKeyFunc$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2012.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC pEncryptPrivateKeyFunc(MemorySegment segment, Arena scope) {
        return PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC.ofAddress(pEncryptPrivateKeyFunc$get(segment), scope);
    }
    public static VarHandle pVoidEncryptFunc$VH() {
        return constants$2012.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPVOID pVoidEncryptFunc;
     * }
     */
    public static MemorySegment pVoidEncryptFunc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2012.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPVOID pVoidEncryptFunc;
     * }
     */
    public static void pVoidEncryptFunc$set(MemorySegment seg, MemorySegment x) {
        constants$2012.const$2.set(seg, x);
    }
    public static MemorySegment pVoidEncryptFunc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2012.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void pVoidEncryptFunc$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2012.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _EXFAT_STATISTICS {
 *     DWORD CreateHits;
 *     DWORD SuccessfulCreates;
 *     DWORD FailedCreates;
 *     DWORD NonCachedReads;
 *     DWORD NonCachedReadBytes;
 *     DWORD NonCachedWrites;
 *     DWORD NonCachedWriteBytes;
 *     DWORD NonCachedDiskReads;
 *     DWORD NonCachedDiskWrites;
 * };
 * }
 */
public class _EXFAT_STATISTICS {

    public static MemoryLayout $LAYOUT() {
        return constants$2607.const$4;
    }
    public static VarHandle CreateHits$VH() {
        return constants$2607.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD CreateHits;
     * }
     */
    public static int CreateHits$get(MemorySegment seg) {
        return (int)constants$2607.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD CreateHits;
     * }
     */
    public static void CreateHits$set(MemorySegment seg, int x) {
        constants$2607.const$5.set(seg, x);
    }
    public static int CreateHits$get(MemorySegment seg, long index) {
        return (int)constants$2607.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void CreateHits$set(MemorySegment seg, long index, int x) {
        constants$2607.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle SuccessfulCreates$VH() {
        return constants$2608.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD SuccessfulCreates;
     * }
     */
    public static int SuccessfulCreates$get(MemorySegment seg) {
        return (int)constants$2608.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD SuccessfulCreates;
     * }
     */
    public static void SuccessfulCreates$set(MemorySegment seg, int x) {
        constants$2608.const$0.set(seg, x);
    }
    public static int SuccessfulCreates$get(MemorySegment seg, long index) {
        return (int)constants$2608.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void SuccessfulCreates$set(MemorySegment seg, long index, int x) {
        constants$2608.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle FailedCreates$VH() {
        return constants$2608.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD FailedCreates;
     * }
     */
    public static int FailedCreates$get(MemorySegment seg) {
        return (int)constants$2608.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD FailedCreates;
     * }
     */
    public static void FailedCreates$set(MemorySegment seg, int x) {
        constants$2608.const$1.set(seg, x);
    }
    public static int FailedCreates$get(MemorySegment seg, long index) {
        return (int)constants$2608.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void FailedCreates$set(MemorySegment seg, long index, int x) {
        constants$2608.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle NonCachedReads$VH() {
        return constants$2608.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD NonCachedReads;
     * }
     */
    public static int NonCachedReads$get(MemorySegment seg) {
        return (int)constants$2608.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD NonCachedReads;
     * }
     */
    public static void NonCachedReads$set(MemorySegment seg, int x) {
        constants$2608.const$2.set(seg, x);
    }
    public static int NonCachedReads$get(MemorySegment seg, long index) {
        return (int)constants$2608.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void NonCachedReads$set(MemorySegment seg, long index, int x) {
        constants$2608.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle NonCachedReadBytes$VH() {
        return constants$2608.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD NonCachedReadBytes;
     * }
     */
    public static int NonCachedReadBytes$get(MemorySegment seg) {
        return (int)constants$2608.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD NonCachedReadBytes;
     * }
     */
    public static void NonCachedReadBytes$set(MemorySegment seg, int x) {
        constants$2608.const$3.set(seg, x);
    }
    public static int NonCachedReadBytes$get(MemorySegment seg, long index) {
        return (int)constants$2608.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void NonCachedReadBytes$set(MemorySegment seg, long index, int x) {
        constants$2608.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle NonCachedWrites$VH() {
        return constants$2608.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD NonCachedWrites;
     * }
     */
    public static int NonCachedWrites$get(MemorySegment seg) {
        return (int)constants$2608.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD NonCachedWrites;
     * }
     */
    public static void NonCachedWrites$set(MemorySegment seg, int x) {
        constants$2608.const$4.set(seg, x);
    }
    public static int NonCachedWrites$get(MemorySegment seg, long index) {
        return (int)constants$2608.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void NonCachedWrites$set(MemorySegment seg, long index, int x) {
        constants$2608.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle NonCachedWriteBytes$VH() {
        return constants$2608.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD NonCachedWriteBytes;
     * }
     */
    public static int NonCachedWriteBytes$get(MemorySegment seg) {
        return (int)constants$2608.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD NonCachedWriteBytes;
     * }
     */
    public static void NonCachedWriteBytes$set(MemorySegment seg, int x) {
        constants$2608.const$5.set(seg, x);
    }
    public static int NonCachedWriteBytes$get(MemorySegment seg, long index) {
        return (int)constants$2608.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void NonCachedWriteBytes$set(MemorySegment seg, long index, int x) {
        constants$2608.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle NonCachedDiskReads$VH() {
        return constants$2609.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD NonCachedDiskReads;
     * }
     */
    public static int NonCachedDiskReads$get(MemorySegment seg) {
        return (int)constants$2609.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD NonCachedDiskReads;
     * }
     */
    public static void NonCachedDiskReads$set(MemorySegment seg, int x) {
        constants$2609.const$0.set(seg, x);
    }
    public static int NonCachedDiskReads$get(MemorySegment seg, long index) {
        return (int)constants$2609.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void NonCachedDiskReads$set(MemorySegment seg, long index, int x) {
        constants$2609.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle NonCachedDiskWrites$VH() {
        return constants$2609.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD NonCachedDiskWrites;
     * }
     */
    public static int NonCachedDiskWrites$get(MemorySegment seg) {
        return (int)constants$2609.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD NonCachedDiskWrites;
     * }
     */
    public static void NonCachedDiskWrites$set(MemorySegment seg, int x) {
        constants$2609.const$1.set(seg, x);
    }
    public static int NonCachedDiskWrites$get(MemorySegment seg, long index) {
        return (int)constants$2609.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void NonCachedDiskWrites$set(MemorySegment seg, long index, int x) {
        constants$2609.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
final class constants$1027 {

    // Suppresses default constructor, ensuring non-instantiability.
    private constants$1027() {}
    static final VarHandle const$0 = constants$1026.const$4.varHandle(MemoryLayout.PathElement.groupElement("axlNumAxes"));
    static final StructLayout const$1 = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                JAVA_INT.withName("lfHeight"),
                JAVA_INT.withName("lfWidth"),
                JAVA_INT.withName("lfEscapement"),
                JAVA_INT.withName("lfOrientation"),
                JAVA_INT.withName("lfWeight"),
                JAVA_BYTE.withName("lfItalic"),
                JAVA_BYTE.withName("lfUnderline"),
                JAVA_BYTE.withName("lfStrikeOut"),
                JAVA_BYTE.withName("lfCharSet"),
                JAVA_BYTE.withName("lfOutPrecision"),
                JAVA_BYTE.withName("lfClipPrecision"),
                JAVA_BYTE.withName("lfQuality"),
                JAVA_BYTE.withName("lfPitchAndFamily"),
                MemoryLayout.sequenceLayout(32, JAVA_BYTE).withName("lfFaceName")
            ).withName("elfLogFont"),
            MemoryLayout.sequenceLayout(64, JAVA_BYTE).withName("elfFullName"),
            MemoryLayout.sequenceLayout(32, JAVA_BYTE).withName("elfStyle"),
            MemoryLayout.sequenceLayout(32, JAVA_BYTE).withName("elfScript")
        ).withName("elfEnumLogfontEx"),
        MemoryLayout.structLayout(
            JAVA_INT.withName("dvReserved"),
            JAVA_INT.withName("dvNumAxes"),
            MemoryLayout.sequenceLayout(16, JAVA_INT).withName("dvValues")
        ).withName("elfDesignVector")
    ).withName("tagENUMLOGFONTEXDVA");
    static final StructLayout const$2 = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                JAVA_INT.withName("lfHeight"),
                JAVA_INT.withName("lfWidth"),
                JAVA_INT.withName("lfEscapement"),
                JAVA_INT.withName("lfOrientation"),
                JAVA_INT.withName("lfWeight"),
                JAVA_BYTE.withName("lfItalic"),
                JAVA_BYTE.withName("lfUnderline"),
                JAVA_BYTE.withName("lfStrikeOut"),
                JAVA_BYTE.withName("lfCharSet"),
                JAVA_BYTE.withName("lfOutPrecision"),
                JAVA_BYTE.withName("lfClipPrecision"),
                JAVA_BYTE.withName("lfQuality"),
                JAVA_BYTE.withName("lfPitchAndFamily"),
                MemoryLayout.sequenceLayout(32, JAVA_SHORT).withName("lfFaceName")
            ).withName("elfLogFont"),
            MemoryLayout.sequenceLayout(64, JAVA_SHORT).withName("elfFullName"),
            MemoryLayout.sequenceLayout(32, JAVA_SHORT).withName("elfStyle"),
            MemoryLayout.sequenceLayout(32, JAVA_SHORT).withName("elfScript")
        ).withName("elfEnumLogfontEx"),
        MemoryLayout.structLayout(
            JAVA_INT.withName("dvReserved"),
            JAVA_INT.withName("dvNumAxes"),
            MemoryLayout.sequenceLayout(16, JAVA_INT).withName("dvValues")
        ).withName("elfDesignVector")
    ).withName("tagENUMLOGFONTEXDVW");
    static final MethodHandle const$3 = RuntimeHelper.downcallHandle(
        "CreateFontIndirectExA",
        constants$33.const$3
    );
    static final MethodHandle const$4 = RuntimeHelper.downcallHandle(
        "CreateFontIndirectExW",
        constants$33.const$3
    );
    static final StructLayout const$5 = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                JAVA_INT.withName("tmHeight"),
                JAVA_INT.withName("tmAscent"),
                JAVA_INT.withName("tmDescent"),
                JAVA_INT.withName("tmInternalLeading"),
                JAVA_INT.withName("tmExternalLeading"),
                JAVA_INT.withName("tmAveCharWidth"),
                JAVA_INT.withName("tmMaxCharWidth"),
                JAVA_INT.withName("tmWeight"),
                JAVA_INT.withName("tmOverhang"),
                JAVA_INT.withName("tmDigitizedAspectX"),
                JAVA_INT.withName("tmDigitizedAspectY"),
                JAVA_BYTE.withName("tmFirstChar"),
                JAVA_BYTE.withName("tmLastChar"),
                JAVA_BYTE.withName("tmDefaultChar"),
                JAVA_BYTE.withName("tmBreakChar"),
                JAVA_BYTE.withName("tmItalic"),
                JAVA_BYTE.withName("tmUnderlined"),
                JAVA_BYTE.withName("tmStruckOut"),
                JAVA_BYTE.withName("tmPitchAndFamily"),
                JAVA_BYTE.withName("tmCharSet"),
                MemoryLayout.paddingLayout(3),
                JAVA_INT.withName("ntmFlags"),
                JAVA_INT.withName("ntmSizeEM"),
                JAVA_INT.withName("ntmCellHeight"),
                JAVA_INT.withName("ntmAvgWidth")
            ).withName("ntmTm"),
            MemoryLayout.structLayout(
                MemoryLayout.sequenceLayout(4, JAVA_INT).withName("fsUsb"),
                MemoryLayout.sequenceLayout(2, JAVA_INT).withName("fsCsb")
            ).withName("ntmFontSig")
        ).withName("etmNewTextMetricEx"),
        MemoryLayout.structLayout(
            JAVA_INT.withName("axlReserved"),
            JAVA_INT.withName("axlNumAxes"),
            MemoryLayout.sequenceLayout(16, MemoryLayout.structLayout(
                JAVA_INT.withName("axMinValue"),
                JAVA_INT.withName("axMaxValue"),
                MemoryLayout.sequenceLayout(16, JAVA_BYTE).withName("axAxisName")
            ).withName("tagAXISINFOA")).withName("axlAxisInfo")
        ).withName("etmAxesList")
    ).withName("tagENUMTEXTMETRICA");
}



// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct ITypeInfo2Vtbl {
 *     HRESULT (*QueryInterface)(ITypeInfo2*,const IID*,void**);
 *     ULONG (*AddRef)(ITypeInfo2*);
 *     ULONG (*Release)(ITypeInfo2*);
 *     HRESULT (*GetTypeAttr)(ITypeInfo2*,TYPEATTR**);
 *     HRESULT (*GetTypeComp)(ITypeInfo2*,ITypeComp**);
 *     HRESULT (*GetFuncDesc)(ITypeInfo2*,UINT,FUNCDESC**);
 *     HRESULT (*GetVarDesc)(ITypeInfo2*,UINT,VARDESC**);
 *     HRESULT (*GetNames)(ITypeInfo2*,MEMBERID,BSTR*,UINT,UINT*);
 *     HRESULT (*GetRefTypeOfImplType)(ITypeInfo2*,UINT,HREFTYPE*);
 *     HRESULT (*GetImplTypeFlags)(ITypeInfo2*,UINT,INT*);
 *     HRESULT (*GetIDsOfNames)(ITypeInfo2*,LPOLESTR*,UINT,MEMBERID*);
 *     HRESULT (*Invoke)(ITypeInfo2*,PVOID,MEMBERID,WORD,DISPPARAMS*,VARIANT*,EXCEPINFO*,UINT*);
 *     HRESULT (*GetDocumentation)(ITypeInfo2*,MEMBERID,BSTR*,BSTR*,DWORD*,BSTR*);
 *     HRESULT (*GetDllEntry)(ITypeInfo2*,MEMBERID,INVOKEKIND,BSTR*,BSTR*,WORD*);
 *     HRESULT (*GetRefTypeInfo)(ITypeInfo2*,HREFTYPE,ITypeInfo**);
 *     HRESULT (*AddressOfMember)(ITypeInfo2*,MEMBERID,INVOKEKIND,PVOID*);
 *     HRESULT (*CreateInstance)(ITypeInfo2*,IUnknown*,const IID*,PVOID*);
 *     HRESULT (*GetMops)(ITypeInfo2*,MEMBERID,BSTR*);
 *     HRESULT (*GetContainingTypeLib)(ITypeInfo2*,ITypeLib**,UINT*);
 *     void (*ReleaseTypeAttr)(ITypeInfo2*,TYPEATTR*);
 *     void (*ReleaseFuncDesc)(ITypeInfo2*,FUNCDESC*);
 *     void (*ReleaseVarDesc)(ITypeInfo2*,VARDESC*);
 *     HRESULT (*GetTypeKind)(ITypeInfo2*,TYPEKIND*);
 *     HRESULT (*GetTypeFlags)(ITypeInfo2*,ULONG*);
 *     HRESULT (*GetFuncIndexOfMemId)(ITypeInfo2*,MEMBERID,INVOKEKIND,UINT*);
 *     HRESULT (*GetVarIndexOfMemId)(ITypeInfo2*,MEMBERID,UINT*);
 *     HRESULT (*GetCustData)(ITypeInfo2*,const GUID*,VARIANT*);
 *     HRESULT (*GetFuncCustData)(ITypeInfo2*,UINT,const GUID*,VARIANT*);
 *     HRESULT (*GetParamCustData)(ITypeInfo2*,UINT,UINT,const GUID*,VARIANT*);
 *     HRESULT (*GetVarCustData)(ITypeInfo2*,UINT,const GUID*,VARIANT*);
 *     HRESULT (*GetImplTypeCustData)(ITypeInfo2*,UINT,const GUID*,VARIANT*);
 *     HRESULT (*GetDocumentation2)(ITypeInfo2*,MEMBERID,LCID,BSTR*,DWORD*,BSTR*);
 *     HRESULT (*GetAllCustData)(ITypeInfo2*,CUSTDATA*);
 *     HRESULT (*GetAllFuncCustData)(ITypeInfo2*,UINT,CUSTDATA*);
 *     HRESULT (*GetAllParamCustData)(ITypeInfo2*,UINT,UINT,CUSTDATA*);
 *     HRESULT (*GetAllVarCustData)(ITypeInfo2*,UINT,CUSTDATA*);
 *     HRESULT (*GetAllImplTypeCustData)(ITypeInfo2*,UINT,CUSTDATA*);
 * };
 * }
 */
public class ITypeInfo2Vtbl {

    public static MemoryLayout $LAYOUT() {
        return constants$3506.const$4;
    }
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(ITypeInfo2*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3506.const$5, fi, constants$37.const$3, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle QueryInterface$VH() {
        return constants$3507.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(ITypeInfo2*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3507.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(ITypeInfo2*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        constants$3507.const$0.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3507.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3507.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, Arena scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*AddRef)(ITypeInfo2*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3507.const$1, fi, constants$18.const$5, scope);
        }
        static AddRef ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle AddRef$VH() {
        return constants$3507.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(ITypeInfo2*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3507.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(ITypeInfo2*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        constants$3507.const$2.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3507.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3507.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, Arena scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*Release)(ITypeInfo2*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3507.const$3, fi, constants$18.const$5, scope);
        }
        static Release ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Release$VH() {
        return constants$3507.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(ITypeInfo2*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3507.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(ITypeInfo2*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        constants$3507.const$4.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3507.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3507.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, Arena scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetTypeAttr)(ITypeInfo2*,TYPEATTR**);
     * }
     */
    public interface GetTypeAttr {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetTypeAttr fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3507.const$5, fi, constants$34.const$0, scope);
        }
        static GetTypeAttr ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetTypeAttr$VH() {
        return constants$3508.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetTypeAttr)(ITypeInfo2*,TYPEATTR**);
     * }
     */
    public static MemorySegment GetTypeAttr$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3508.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetTypeAttr)(ITypeInfo2*,TYPEATTR**);
     * }
     */
    public static void GetTypeAttr$set(MemorySegment seg, MemorySegment x) {
        constants$3508.const$0.set(seg, x);
    }
    public static MemorySegment GetTypeAttr$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3508.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeAttr$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3508.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeAttr GetTypeAttr(MemorySegment segment, Arena scope) {
        return GetTypeAttr.ofAddress(GetTypeAttr$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetTypeComp)(ITypeInfo2*,ITypeComp**);
     * }
     */
    public interface GetTypeComp {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetTypeComp fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3508.const$1, fi, constants$34.const$0, scope);
        }
        static GetTypeComp ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetTypeComp$VH() {
        return constants$3508.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetTypeComp)(ITypeInfo2*,ITypeComp**);
     * }
     */
    public static MemorySegment GetTypeComp$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3508.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetTypeComp)(ITypeInfo2*,ITypeComp**);
     * }
     */
    public static void GetTypeComp$set(MemorySegment seg, MemorySegment x) {
        constants$3508.const$2.set(seg, x);
    }
    public static MemorySegment GetTypeComp$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3508.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeComp$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3508.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeComp GetTypeComp(MemorySegment segment, Arena scope) {
        return GetTypeComp.ofAddress(GetTypeComp$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetFuncDesc)(ITypeInfo2*,UINT,FUNCDESC**);
     * }
     */
    public interface GetFuncDesc {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetFuncDesc fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3508.const$3, fi, constants$485.const$5, scope);
        }
        static GetFuncDesc ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$1770.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetFuncDesc$VH() {
        return constants$3508.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetFuncDesc)(ITypeInfo2*,UINT,FUNCDESC**);
     * }
     */
    public static MemorySegment GetFuncDesc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3508.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetFuncDesc)(ITypeInfo2*,UINT,FUNCDESC**);
     * }
     */
    public static void GetFuncDesc$set(MemorySegment seg, MemorySegment x) {
        constants$3508.const$4.set(seg, x);
    }
    public static MemorySegment GetFuncDesc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3508.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void GetFuncDesc$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3508.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetFuncDesc GetFuncDesc(MemorySegment segment, Arena scope) {
        return GetFuncDesc.ofAddress(GetFuncDesc$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetVarDesc)(ITypeInfo2*,UINT,VARDESC**);
     * }
     */
    public interface GetVarDesc {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetVarDesc fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3508.const$5, fi, constants$485.const$5, scope);
        }
        static GetVarDesc ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$1770.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetVarDesc$VH() {
        return constants$3509.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetVarDesc)(ITypeInfo2*,UINT,VARDESC**);
     * }
     */
    public static MemorySegment GetVarDesc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3509.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetVarDesc)(ITypeInfo2*,UINT,VARDESC**);
     * }
     */
    public static void GetVarDesc$set(MemorySegment seg, MemorySegment x) {
        constants$3509.const$0.set(seg, x);
    }
    public static MemorySegment GetVarDesc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3509.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void GetVarDesc$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3509.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetVarDesc GetVarDesc(MemorySegment segment, Arena scope) {
        return GetVarDesc.ofAddress(GetVarDesc$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetNames)(ITypeInfo2*,MEMBERID,BSTR*,UINT,UINT*);
     * }
     */
    public interface GetNames {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, int _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(GetNames fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3509.const$1, fi, constants$703.const$2, scope);
        }
        static GetNames ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, int __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)constants$3269.const$5.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetNames$VH() {
        return constants$3509.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetNames)(ITypeInfo2*,MEMBERID,BSTR*,UINT,UINT*);
     * }
     */
    public static MemorySegment GetNames$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3509.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetNames)(ITypeInfo2*,MEMBERID,BSTR*,UINT,UINT*);
     * }
     */
    public static void GetNames$set(MemorySegment seg, MemorySegment x) {
        constants$3509.const$2.set(seg, x);
    }
    public static MemorySegment GetNames$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3509.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void GetNames$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3509.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetNames GetNames(MemorySegment segment, Arena scope) {
        return GetNames.ofAddress(GetNames$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetRefTypeOfImplType)(ITypeInfo2*,UINT,HREFTYPE*);
     * }
     */
    public interface GetRefTypeOfImplType {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetRefTypeOfImplType fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3509.const$3, fi, constants$485.const$5, scope);
        }
        static GetRefTypeOfImplType ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$1770.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetRefTypeOfImplType$VH() {
        return constants$3509.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetRefTypeOfImplType)(ITypeInfo2*,UINT,HREFTYPE*);
     * }
     */
    public static MemorySegment GetRefTypeOfImplType$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3509.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetRefTypeOfImplType)(ITypeInfo2*,UINT,HREFTYPE*);
     * }
     */
    public static void GetRefTypeOfImplType$set(MemorySegment seg, MemorySegment x) {
        constants$3509.const$4.set(seg, x);
    }
    public static MemorySegment GetRefTypeOfImplType$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3509.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void GetRefTypeOfImplType$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3509.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetRefTypeOfImplType GetRefTypeOfImplType(MemorySegment segment, Arena scope) {
        return GetRefTypeOfImplType.ofAddress(GetRefTypeOfImplType$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetImplTypeFlags)(ITypeInfo2*,UINT,INT*);
     * }
     */
    public interface GetImplTypeFlags {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetImplTypeFlags fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3509.const$5, fi, constants$485.const$5, scope);
        }
        static GetImplTypeFlags ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$1770.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetImplTypeFlags$VH() {
        return constants$3510.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetImplTypeFlags)(ITypeInfo2*,UINT,INT*);
     * }
     */
    public static MemorySegment GetImplTypeFlags$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3510.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetImplTypeFlags)(ITypeInfo2*,UINT,INT*);
     * }
     */
    public static void GetImplTypeFlags$set(MemorySegment seg, MemorySegment x) {
        constants$3510.const$0.set(seg, x);
    }
    public static MemorySegment GetImplTypeFlags$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3510.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void GetImplTypeFlags$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3510.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetImplTypeFlags GetImplTypeFlags(MemorySegment segment, Arena scope) {
        return GetImplTypeFlags.ofAddress(GetImplTypeFlags$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetIDsOfNames)(ITypeInfo2*,LPOLESTR*,UINT,MEMBERID*);
     * }
     */
    public interface GetIDsOfNames {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(GetIDsOfNames fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3510.const$1, fi, constants$586.const$5, scope);
        }
        static GetIDsOfNames ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)constants$2117.const$1.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetIDsOfNames$VH() {
        return constants$3510.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetIDsOfNames)(ITypeInfo2*,LPOLESTR*,UINT,MEMBERID*);
     * }
     */
    public static MemorySegment GetIDsOfNames$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3510.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetIDsOfNames)(ITypeInfo2*,LPOLESTR*,UINT,MEMBERID*);
     * }
     */
    public static void GetIDsOfNames$set(MemorySegment seg, MemorySegment x) {
        constants$3510.const$2.set(seg, x);
    }
    public static MemorySegment GetIDsOfNames$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3510.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void GetIDsOfNames$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3510.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetIDsOfNames GetIDsOfNames(MemorySegment segment, Arena scope) {
        return GetIDsOfNames.ofAddress(GetIDsOfNames$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*Invoke)(ITypeInfo2*,PVOID,MEMBERID,WORD,DISPPARAMS*,VARIANT*,EXCEPINFO*,UINT*);
     * }
     */
    public interface Invoke {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, short _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5, java.lang.foreign.MemorySegment _x6, java.lang.foreign.MemorySegment _x7);
        static MemorySegment allocate(Invoke fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3510.const$3, fi, constants$3497.const$2, scope);
        }
        static Invoke ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, short __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5, java.lang.foreign.MemorySegment __x6, java.lang.foreign.MemorySegment __x7) -> {
                try {
                    return (int)constants$3497.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Invoke$VH() {
        return constants$3510.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Invoke)(ITypeInfo2*,PVOID,MEMBERID,WORD,DISPPARAMS*,VARIANT*,EXCEPINFO*,UINT*);
     * }
     */
    public static MemorySegment Invoke$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3510.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Invoke)(ITypeInfo2*,PVOID,MEMBERID,WORD,DISPPARAMS*,VARIANT*,EXCEPINFO*,UINT*);
     * }
     */
    public static void Invoke$set(MemorySegment seg, MemorySegment x) {
        constants$3510.const$4.set(seg, x);
    }
    public static MemorySegment Invoke$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3510.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void Invoke$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3510.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static Invoke Invoke(MemorySegment segment, Arena scope) {
        return Invoke.ofAddress(Invoke$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetDocumentation)(ITypeInfo2*,MEMBERID,BSTR*,BSTR*,DWORD*,BSTR*);
     * }
     */
    public interface GetDocumentation {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(GetDocumentation fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3510.const$5, fi, constants$2151.const$4, scope);
        }
        static GetDocumentation ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    return (int)constants$2152.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetDocumentation$VH() {
        return constants$3511.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetDocumentation)(ITypeInfo2*,MEMBERID,BSTR*,BSTR*,DWORD*,BSTR*);
     * }
     */
    public static MemorySegment GetDocumentation$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3511.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetDocumentation)(ITypeInfo2*,MEMBERID,BSTR*,BSTR*,DWORD*,BSTR*);
     * }
     */
    public static void GetDocumentation$set(MemorySegment seg, MemorySegment x) {
        constants$3511.const$0.set(seg, x);
    }
    public static MemorySegment GetDocumentation$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3511.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDocumentation$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3511.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDocumentation GetDocumentation(MemorySegment segment, Arena scope) {
        return GetDocumentation.ofAddress(GetDocumentation$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetDllEntry)(ITypeInfo2*,MEMBERID,INVOKEKIND,BSTR*,BSTR*,WORD*);
     * }
     */
    public interface GetDllEntry {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(GetDllEntry fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3511.const$1, fi, constants$785.const$0, scope);
        }
        static GetDllEntry ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    return (int)constants$3498.const$3.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetDllEntry$VH() {
        return constants$3511.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetDllEntry)(ITypeInfo2*,MEMBERID,INVOKEKIND,BSTR*,BSTR*,WORD*);
     * }
     */
    public static MemorySegment GetDllEntry$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3511.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetDllEntry)(ITypeInfo2*,MEMBERID,INVOKEKIND,BSTR*,BSTR*,WORD*);
     * }
     */
    public static void GetDllEntry$set(MemorySegment seg, MemorySegment x) {
        constants$3511.const$2.set(seg, x);
    }
    public static MemorySegment GetDllEntry$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3511.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDllEntry$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3511.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDllEntry GetDllEntry(MemorySegment segment, Arena scope) {
        return GetDllEntry.ofAddress(GetDllEntry$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetRefTypeInfo)(ITypeInfo2*,HREFTYPE,ITypeInfo**);
     * }
     */
    public interface GetRefTypeInfo {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetRefTypeInfo fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3511.const$3, fi, constants$485.const$5, scope);
        }
        static GetRefTypeInfo ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$1770.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetRefTypeInfo$VH() {
        return constants$3511.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetRefTypeInfo)(ITypeInfo2*,HREFTYPE,ITypeInfo**);
     * }
     */
    public static MemorySegment GetRefTypeInfo$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3511.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetRefTypeInfo)(ITypeInfo2*,HREFTYPE,ITypeInfo**);
     * }
     */
    public static void GetRefTypeInfo$set(MemorySegment seg, MemorySegment x) {
        constants$3511.const$4.set(seg, x);
    }
    public static MemorySegment GetRefTypeInfo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3511.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void GetRefTypeInfo$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3511.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetRefTypeInfo GetRefTypeInfo(MemorySegment segment, Arena scope) {
        return GetRefTypeInfo.ofAddress(GetRefTypeInfo$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*AddressOfMember)(ITypeInfo2*,MEMBERID,INVOKEKIND,PVOID*);
     * }
     */
    public interface AddressOfMember {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(AddressOfMember fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3511.const$5, fi, constants$644.const$5, scope);
        }
        static AddressOfMember ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)constants$2131.const$5.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle AddressOfMember$VH() {
        return constants$3512.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*AddressOfMember)(ITypeInfo2*,MEMBERID,INVOKEKIND,PVOID*);
     * }
     */
    public static MemorySegment AddressOfMember$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3512.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*AddressOfMember)(ITypeInfo2*,MEMBERID,INVOKEKIND,PVOID*);
     * }
     */
    public static void AddressOfMember$set(MemorySegment seg, MemorySegment x) {
        constants$3512.const$0.set(seg, x);
    }
    public static MemorySegment AddressOfMember$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3512.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void AddressOfMember$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3512.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddressOfMember AddressOfMember(MemorySegment segment, Arena scope) {
        return AddressOfMember.ofAddress(AddressOfMember$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*CreateInstance)(ITypeInfo2*,IUnknown*,const IID*,PVOID*);
     * }
     */
    public interface CreateInstance {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(CreateInstance fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3512.const$1, fi, constants$1.const$3, scope);
        }
        static CreateInstance ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)constants$55.const$1.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CreateInstance$VH() {
        return constants$3512.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*CreateInstance)(ITypeInfo2*,IUnknown*,const IID*,PVOID*);
     * }
     */
    public static MemorySegment CreateInstance$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3512.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*CreateInstance)(ITypeInfo2*,IUnknown*,const IID*,PVOID*);
     * }
     */
    public static void CreateInstance$set(MemorySegment seg, MemorySegment x) {
        constants$3512.const$2.set(seg, x);
    }
    public static MemorySegment CreateInstance$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3512.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void CreateInstance$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3512.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static CreateInstance CreateInstance(MemorySegment segment, Arena scope) {
        return CreateInstance.ofAddress(CreateInstance$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetMops)(ITypeInfo2*,MEMBERID,BSTR*);
     * }
     */
    public interface GetMops {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetMops fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3512.const$3, fi, constants$485.const$5, scope);
        }
        static GetMops ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$1770.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetMops$VH() {
        return constants$3512.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetMops)(ITypeInfo2*,MEMBERID,BSTR*);
     * }
     */
    public static MemorySegment GetMops$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3512.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetMops)(ITypeInfo2*,MEMBERID,BSTR*);
     * }
     */
    public static void GetMops$set(MemorySegment seg, MemorySegment x) {
        constants$3512.const$4.set(seg, x);
    }
    public static MemorySegment GetMops$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3512.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void GetMops$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3512.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetMops GetMops(MemorySegment segment, Arena scope) {
        return GetMops.ofAddress(GetMops$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetContainingTypeLib)(ITypeInfo2*,ITypeLib**,UINT*);
     * }
     */
    public interface GetContainingTypeLib {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetContainingTypeLib fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3512.const$5, fi, constants$37.const$3, scope);
        }
        static GetContainingTypeLib ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetContainingTypeLib$VH() {
        return constants$3513.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetContainingTypeLib)(ITypeInfo2*,ITypeLib**,UINT*);
     * }
     */
    public static MemorySegment GetContainingTypeLib$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3513.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetContainingTypeLib)(ITypeInfo2*,ITypeLib**,UINT*);
     * }
     */
    public static void GetContainingTypeLib$set(MemorySegment seg, MemorySegment x) {
        constants$3513.const$0.set(seg, x);
    }
    public static MemorySegment GetContainingTypeLib$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3513.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void GetContainingTypeLib$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3513.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetContainingTypeLib GetContainingTypeLib(MemorySegment segment, Arena scope) {
        return GetContainingTypeLib.ofAddress(GetContainingTypeLib$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*ReleaseTypeAttr)(ITypeInfo2*,TYPEATTR*);
     * }
     */
    public interface ReleaseTypeAttr {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(ReleaseTypeAttr fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3513.const$1, fi, constants$469.const$2, scope);
        }
        static ReleaseTypeAttr ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    constants$531.const$5.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle ReleaseTypeAttr$VH() {
        return constants$3513.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*ReleaseTypeAttr)(ITypeInfo2*,TYPEATTR*);
     * }
     */
    public static MemorySegment ReleaseTypeAttr$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3513.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*ReleaseTypeAttr)(ITypeInfo2*,TYPEATTR*);
     * }
     */
    public static void ReleaseTypeAttr$set(MemorySegment seg, MemorySegment x) {
        constants$3513.const$2.set(seg, x);
    }
    public static MemorySegment ReleaseTypeAttr$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3513.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void ReleaseTypeAttr$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3513.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static ReleaseTypeAttr ReleaseTypeAttr(MemorySegment segment, Arena scope) {
        return ReleaseTypeAttr.ofAddress(ReleaseTypeAttr$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*ReleaseFuncDesc)(ITypeInfo2*,FUNCDESC*);
     * }
     */
    public interface ReleaseFuncDesc {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(ReleaseFuncDesc fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3513.const$3, fi, constants$469.const$2, scope);
        }
        static ReleaseFuncDesc ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    constants$531.const$5.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle ReleaseFuncDesc$VH() {
        return constants$3513.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*ReleaseFuncDesc)(ITypeInfo2*,FUNCDESC*);
     * }
     */
    public static MemorySegment ReleaseFuncDesc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3513.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*ReleaseFuncDesc)(ITypeInfo2*,FUNCDESC*);
     * }
     */
    public static void ReleaseFuncDesc$set(MemorySegment seg, MemorySegment x) {
        constants$3513.const$4.set(seg, x);
    }
    public static MemorySegment ReleaseFuncDesc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3513.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void ReleaseFuncDesc$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3513.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static ReleaseFuncDesc ReleaseFuncDesc(MemorySegment segment, Arena scope) {
        return ReleaseFuncDesc.ofAddress(ReleaseFuncDesc$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*ReleaseVarDesc)(ITypeInfo2*,VARDESC*);
     * }
     */
    public interface ReleaseVarDesc {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(ReleaseVarDesc fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3513.const$5, fi, constants$469.const$2, scope);
        }
        static ReleaseVarDesc ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    constants$531.const$5.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle ReleaseVarDesc$VH() {
        return constants$3514.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*ReleaseVarDesc)(ITypeInfo2*,VARDESC*);
     * }
     */
    public static MemorySegment ReleaseVarDesc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3514.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*ReleaseVarDesc)(ITypeInfo2*,VARDESC*);
     * }
     */
    public static void ReleaseVarDesc$set(MemorySegment seg, MemorySegment x) {
        constants$3514.const$0.set(seg, x);
    }
    public static MemorySegment ReleaseVarDesc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3514.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void ReleaseVarDesc$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3514.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static ReleaseVarDesc ReleaseVarDesc(MemorySegment segment, Arena scope) {
        return ReleaseVarDesc.ofAddress(ReleaseVarDesc$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetTypeKind)(ITypeInfo2*,TYPEKIND*);
     * }
     */
    public interface GetTypeKind {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetTypeKind fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3514.const$1, fi, constants$34.const$0, scope);
        }
        static GetTypeKind ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetTypeKind$VH() {
        return constants$3514.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetTypeKind)(ITypeInfo2*,TYPEKIND*);
     * }
     */
    public static MemorySegment GetTypeKind$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3514.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetTypeKind)(ITypeInfo2*,TYPEKIND*);
     * }
     */
    public static void GetTypeKind$set(MemorySegment seg, MemorySegment x) {
        constants$3514.const$2.set(seg, x);
    }
    public static MemorySegment GetTypeKind$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3514.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeKind$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3514.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeKind GetTypeKind(MemorySegment segment, Arena scope) {
        return GetTypeKind.ofAddress(GetTypeKind$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetTypeFlags)(ITypeInfo2*,ULONG*);
     * }
     */
    public interface GetTypeFlags {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetTypeFlags fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3514.const$3, fi, constants$34.const$0, scope);
        }
        static GetTypeFlags ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetTypeFlags$VH() {
        return constants$3514.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetTypeFlags)(ITypeInfo2*,ULONG*);
     * }
     */
    public static MemorySegment GetTypeFlags$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3514.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetTypeFlags)(ITypeInfo2*,ULONG*);
     * }
     */
    public static void GetTypeFlags$set(MemorySegment seg, MemorySegment x) {
        constants$3514.const$4.set(seg, x);
    }
    public static MemorySegment GetTypeFlags$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3514.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeFlags$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3514.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeFlags GetTypeFlags(MemorySegment segment, Arena scope) {
        return GetTypeFlags.ofAddress(GetTypeFlags$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetFuncIndexOfMemId)(ITypeInfo2*,MEMBERID,INVOKEKIND,UINT*);
     * }
     */
    public interface GetFuncIndexOfMemId {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(GetFuncIndexOfMemId fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3514.const$5, fi, constants$644.const$5, scope);
        }
        static GetFuncIndexOfMemId ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)constants$2131.const$5.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetFuncIndexOfMemId$VH() {
        return constants$3515.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetFuncIndexOfMemId)(ITypeInfo2*,MEMBERID,INVOKEKIND,UINT*);
     * }
     */
    public static MemorySegment GetFuncIndexOfMemId$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3515.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetFuncIndexOfMemId)(ITypeInfo2*,MEMBERID,INVOKEKIND,UINT*);
     * }
     */
    public static void GetFuncIndexOfMemId$set(MemorySegment seg, MemorySegment x) {
        constants$3515.const$0.set(seg, x);
    }
    public static MemorySegment GetFuncIndexOfMemId$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3515.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void GetFuncIndexOfMemId$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3515.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetFuncIndexOfMemId GetFuncIndexOfMemId(MemorySegment segment, Arena scope) {
        return GetFuncIndexOfMemId.ofAddress(GetFuncIndexOfMemId$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetVarIndexOfMemId)(ITypeInfo2*,MEMBERID,UINT*);
     * }
     */
    public interface GetVarIndexOfMemId {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetVarIndexOfMemId fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3515.const$1, fi, constants$485.const$5, scope);
        }
        static GetVarIndexOfMemId ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$1770.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetVarIndexOfMemId$VH() {
        return constants$3515.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetVarIndexOfMemId)(ITypeInfo2*,MEMBERID,UINT*);
     * }
     */
    public static MemorySegment GetVarIndexOfMemId$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3515.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetVarIndexOfMemId)(ITypeInfo2*,MEMBERID,UINT*);
     * }
     */
    public static void GetVarIndexOfMemId$set(MemorySegment seg, MemorySegment x) {
        constants$3515.const$2.set(seg, x);
    }
    public static MemorySegment GetVarIndexOfMemId$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3515.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void GetVarIndexOfMemId$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3515.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetVarIndexOfMemId GetVarIndexOfMemId(MemorySegment segment, Arena scope) {
        return GetVarIndexOfMemId.ofAddress(GetVarIndexOfMemId$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetCustData)(ITypeInfo2*,const GUID*,VARIANT*);
     * }
     */
    public interface GetCustData {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetCustData fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3515.const$3, fi, constants$37.const$3, scope);
        }
        static GetCustData ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetCustData$VH() {
        return constants$3515.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetCustData)(ITypeInfo2*,const GUID*,VARIANT*);
     * }
     */
    public static MemorySegment GetCustData$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3515.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetCustData)(ITypeInfo2*,const GUID*,VARIANT*);
     * }
     */
    public static void GetCustData$set(MemorySegment seg, MemorySegment x) {
        constants$3515.const$4.set(seg, x);
    }
    public static MemorySegment GetCustData$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3515.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void GetCustData$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3515.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetCustData GetCustData(MemorySegment segment, Arena scope) {
        return GetCustData.ofAddress(GetCustData$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetFuncCustData)(ITypeInfo2*,UINT,const GUID*,VARIANT*);
     * }
     */
    public interface GetFuncCustData {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(GetFuncCustData fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3515.const$5, fi, constants$585.const$2, scope);
        }
        static GetFuncCustData ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)constants$2151.const$1.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetFuncCustData$VH() {
        return constants$3516.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetFuncCustData)(ITypeInfo2*,UINT,const GUID*,VARIANT*);
     * }
     */
    public static MemorySegment GetFuncCustData$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3516.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetFuncCustData)(ITypeInfo2*,UINT,const GUID*,VARIANT*);
     * }
     */
    public static void GetFuncCustData$set(MemorySegment seg, MemorySegment x) {
        constants$3516.const$0.set(seg, x);
    }
    public static MemorySegment GetFuncCustData$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3516.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void GetFuncCustData$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3516.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetFuncCustData GetFuncCustData(MemorySegment segment, Arena scope) {
        return GetFuncCustData.ofAddress(GetFuncCustData$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetParamCustData)(ITypeInfo2*,UINT,UINT,const GUID*,VARIANT*);
     * }
     */
    public interface GetParamCustData {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(GetParamCustData fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3516.const$1, fi, constants$1007.const$4, scope);
        }
        static GetParamCustData ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)constants$3467.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetParamCustData$VH() {
        return constants$3516.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetParamCustData)(ITypeInfo2*,UINT,UINT,const GUID*,VARIANT*);
     * }
     */
    public static MemorySegment GetParamCustData$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3516.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetParamCustData)(ITypeInfo2*,UINT,UINT,const GUID*,VARIANT*);
     * }
     */
    public static void GetParamCustData$set(MemorySegment seg, MemorySegment x) {
        constants$3516.const$2.set(seg, x);
    }
    public static MemorySegment GetParamCustData$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3516.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void GetParamCustData$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3516.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetParamCustData GetParamCustData(MemorySegment segment, Arena scope) {
        return GetParamCustData.ofAddress(GetParamCustData$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetVarCustData)(ITypeInfo2*,UINT,const GUID*,VARIANT*);
     * }
     */
    public interface GetVarCustData {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(GetVarCustData fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3516.const$3, fi, constants$585.const$2, scope);
        }
        static GetVarCustData ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)constants$2151.const$1.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetVarCustData$VH() {
        return constants$3516.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetVarCustData)(ITypeInfo2*,UINT,const GUID*,VARIANT*);
     * }
     */
    public static MemorySegment GetVarCustData$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3516.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetVarCustData)(ITypeInfo2*,UINT,const GUID*,VARIANT*);
     * }
     */
    public static void GetVarCustData$set(MemorySegment seg, MemorySegment x) {
        constants$3516.const$4.set(seg, x);
    }
    public static MemorySegment GetVarCustData$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3516.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void GetVarCustData$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3516.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetVarCustData GetVarCustData(MemorySegment segment, Arena scope) {
        return GetVarCustData.ofAddress(GetVarCustData$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetImplTypeCustData)(ITypeInfo2*,UINT,const GUID*,VARIANT*);
     * }
     */
    public interface GetImplTypeCustData {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(GetImplTypeCustData fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3516.const$5, fi, constants$585.const$2, scope);
        }
        static GetImplTypeCustData ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)constants$2151.const$1.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetImplTypeCustData$VH() {
        return constants$3517.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetImplTypeCustData)(ITypeInfo2*,UINT,const GUID*,VARIANT*);
     * }
     */
    public static MemorySegment GetImplTypeCustData$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3517.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetImplTypeCustData)(ITypeInfo2*,UINT,const GUID*,VARIANT*);
     * }
     */
    public static void GetImplTypeCustData$set(MemorySegment seg, MemorySegment x) {
        constants$3517.const$0.set(seg, x);
    }
    public static MemorySegment GetImplTypeCustData$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3517.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void GetImplTypeCustData$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3517.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetImplTypeCustData GetImplTypeCustData(MemorySegment segment, Arena scope) {
        return GetImplTypeCustData.ofAddress(GetImplTypeCustData$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetDocumentation2)(ITypeInfo2*,MEMBERID,LCID,BSTR*,DWORD*,BSTR*);
     * }
     */
    public interface GetDocumentation2 {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(GetDocumentation2 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3517.const$1, fi, constants$785.const$0, scope);
        }
        static GetDocumentation2 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    return (int)constants$3498.const$3.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetDocumentation2$VH() {
        return constants$3517.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetDocumentation2)(ITypeInfo2*,MEMBERID,LCID,BSTR*,DWORD*,BSTR*);
     * }
     */
    public static MemorySegment GetDocumentation2$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3517.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetDocumentation2)(ITypeInfo2*,MEMBERID,LCID,BSTR*,DWORD*,BSTR*);
     * }
     */
    public static void GetDocumentation2$set(MemorySegment seg, MemorySegment x) {
        constants$3517.const$2.set(seg, x);
    }
    public static MemorySegment GetDocumentation2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3517.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDocumentation2$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3517.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDocumentation2 GetDocumentation2(MemorySegment segment, Arena scope) {
        return GetDocumentation2.ofAddress(GetDocumentation2$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetAllCustData)(ITypeInfo2*,CUSTDATA*);
     * }
     */
    public interface GetAllCustData {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetAllCustData fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3517.const$3, fi, constants$34.const$0, scope);
        }
        static GetAllCustData ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetAllCustData$VH() {
        return constants$3517.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetAllCustData)(ITypeInfo2*,CUSTDATA*);
     * }
     */
    public static MemorySegment GetAllCustData$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3517.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetAllCustData)(ITypeInfo2*,CUSTDATA*);
     * }
     */
    public static void GetAllCustData$set(MemorySegment seg, MemorySegment x) {
        constants$3517.const$4.set(seg, x);
    }
    public static MemorySegment GetAllCustData$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3517.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void GetAllCustData$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3517.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetAllCustData GetAllCustData(MemorySegment segment, Arena scope) {
        return GetAllCustData.ofAddress(GetAllCustData$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetAllFuncCustData)(ITypeInfo2*,UINT,CUSTDATA*);
     * }
     */
    public interface GetAllFuncCustData {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetAllFuncCustData fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3517.const$5, fi, constants$485.const$5, scope);
        }
        static GetAllFuncCustData ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$1770.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetAllFuncCustData$VH() {
        return constants$3518.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetAllFuncCustData)(ITypeInfo2*,UINT,CUSTDATA*);
     * }
     */
    public static MemorySegment GetAllFuncCustData$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3518.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetAllFuncCustData)(ITypeInfo2*,UINT,CUSTDATA*);
     * }
     */
    public static void GetAllFuncCustData$set(MemorySegment seg, MemorySegment x) {
        constants$3518.const$0.set(seg, x);
    }
    public static MemorySegment GetAllFuncCustData$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3518.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void GetAllFuncCustData$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3518.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetAllFuncCustData GetAllFuncCustData(MemorySegment segment, Arena scope) {
        return GetAllFuncCustData.ofAddress(GetAllFuncCustData$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetAllParamCustData)(ITypeInfo2*,UINT,UINT,CUSTDATA*);
     * }
     */
    public interface GetAllParamCustData {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(GetAllParamCustData fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3518.const$1, fi, constants$644.const$5, scope);
        }
        static GetAllParamCustData ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)constants$2131.const$5.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetAllParamCustData$VH() {
        return constants$3518.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetAllParamCustData)(ITypeInfo2*,UINT,UINT,CUSTDATA*);
     * }
     */
    public static MemorySegment GetAllParamCustData$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3518.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetAllParamCustData)(ITypeInfo2*,UINT,UINT,CUSTDATA*);
     * }
     */
    public static void GetAllParamCustData$set(MemorySegment seg, MemorySegment x) {
        constants$3518.const$2.set(seg, x);
    }
    public static MemorySegment GetAllParamCustData$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3518.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void GetAllParamCustData$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3518.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetAllParamCustData GetAllParamCustData(MemorySegment segment, Arena scope) {
        return GetAllParamCustData.ofAddress(GetAllParamCustData$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetAllVarCustData)(ITypeInfo2*,UINT,CUSTDATA*);
     * }
     */
    public interface GetAllVarCustData {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetAllVarCustData fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3518.const$3, fi, constants$485.const$5, scope);
        }
        static GetAllVarCustData ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$1770.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetAllVarCustData$VH() {
        return constants$3518.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetAllVarCustData)(ITypeInfo2*,UINT,CUSTDATA*);
     * }
     */
    public static MemorySegment GetAllVarCustData$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3518.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetAllVarCustData)(ITypeInfo2*,UINT,CUSTDATA*);
     * }
     */
    public static void GetAllVarCustData$set(MemorySegment seg, MemorySegment x) {
        constants$3518.const$4.set(seg, x);
    }
    public static MemorySegment GetAllVarCustData$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3518.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void GetAllVarCustData$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3518.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetAllVarCustData GetAllVarCustData(MemorySegment segment, Arena scope) {
        return GetAllVarCustData.ofAddress(GetAllVarCustData$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetAllImplTypeCustData)(ITypeInfo2*,UINT,CUSTDATA*);
     * }
     */
    public interface GetAllImplTypeCustData {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetAllImplTypeCustData fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3518.const$5, fi, constants$485.const$5, scope);
        }
        static GetAllImplTypeCustData ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$1770.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetAllImplTypeCustData$VH() {
        return constants$3519.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetAllImplTypeCustData)(ITypeInfo2*,UINT,CUSTDATA*);
     * }
     */
    public static MemorySegment GetAllImplTypeCustData$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3519.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetAllImplTypeCustData)(ITypeInfo2*,UINT,CUSTDATA*);
     * }
     */
    public static void GetAllImplTypeCustData$set(MemorySegment seg, MemorySegment x) {
        constants$3519.const$0.set(seg, x);
    }
    public static MemorySegment GetAllImplTypeCustData$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3519.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void GetAllImplTypeCustData$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3519.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetAllImplTypeCustData GetAllImplTypeCustData(MemorySegment segment, Arena scope) {
        return GetAllImplTypeCustData.ofAddress(GetAllImplTypeCustData$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IDataObjectVtbl {
 *     HRESULT (*QueryInterface)(IDataObject*,const IID*,void**);
 *     ULONG (*AddRef)(IDataObject*);
 *     ULONG (*Release)(IDataObject*);
 *     HRESULT (*GetData)(IDataObject*,FORMATETC*,STGMEDIUM*);
 *     HRESULT (*GetDataHere)(IDataObject*,FORMATETC*,STGMEDIUM*);
 *     HRESULT (*QueryGetData)(IDataObject*,FORMATETC*);
 *     HRESULT (*GetCanonicalFormatEtc)(IDataObject*,FORMATETC*,FORMATETC*);
 *     HRESULT (*SetData)(IDataObject*,FORMATETC*,STGMEDIUM*,BOOL);
 *     HRESULT (*EnumFormatEtc)(IDataObject*,DWORD,IEnumFORMATETC**);
 *     HRESULT (*DAdvise)(IDataObject*,FORMATETC*,DWORD,IAdviseSink*,DWORD*);
 *     HRESULT (*DUnadvise)(IDataObject*,DWORD);
 *     HRESULT (*EnumDAdvise)(IDataObject*,IEnumSTATDATA**);
 * };
 * }
 */
public class IDataObjectVtbl {

    public static MemoryLayout $LAYOUT() {
        return constants$3327.const$4;
    }
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IDataObject*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3327.const$5, fi, constants$37.const$3, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle QueryInterface$VH() {
        return constants$3328.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IDataObject*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3328.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IDataObject*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        constants$3328.const$0.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3328.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3328.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, Arena scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*AddRef)(IDataObject*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3328.const$1, fi, constants$18.const$5, scope);
        }
        static AddRef ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle AddRef$VH() {
        return constants$3328.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IDataObject*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3328.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IDataObject*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        constants$3328.const$2.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3328.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3328.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, Arena scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*Release)(IDataObject*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3328.const$3, fi, constants$18.const$5, scope);
        }
        static Release ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Release$VH() {
        return constants$3328.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IDataObject*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3328.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IDataObject*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        constants$3328.const$4.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3328.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3328.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, Arena scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetData)(IDataObject*,FORMATETC*,STGMEDIUM*);
     * }
     */
    public interface GetData {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetData fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3328.const$5, fi, constants$37.const$3, scope);
        }
        static GetData ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetData$VH() {
        return constants$3329.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetData)(IDataObject*,FORMATETC*,STGMEDIUM*);
     * }
     */
    public static MemorySegment GetData$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3329.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetData)(IDataObject*,FORMATETC*,STGMEDIUM*);
     * }
     */
    public static void GetData$set(MemorySegment seg, MemorySegment x) {
        constants$3329.const$0.set(seg, x);
    }
    public static MemorySegment GetData$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3329.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void GetData$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3329.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetData GetData(MemorySegment segment, Arena scope) {
        return GetData.ofAddress(GetData$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetDataHere)(IDataObject*,FORMATETC*,STGMEDIUM*);
     * }
     */
    public interface GetDataHere {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetDataHere fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3329.const$1, fi, constants$37.const$3, scope);
        }
        static GetDataHere ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetDataHere$VH() {
        return constants$3329.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetDataHere)(IDataObject*,FORMATETC*,STGMEDIUM*);
     * }
     */
    public static MemorySegment GetDataHere$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3329.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetDataHere)(IDataObject*,FORMATETC*,STGMEDIUM*);
     * }
     */
    public static void GetDataHere$set(MemorySegment seg, MemorySegment x) {
        constants$3329.const$2.set(seg, x);
    }
    public static MemorySegment GetDataHere$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3329.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDataHere$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3329.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDataHere GetDataHere(MemorySegment segment, Arena scope) {
        return GetDataHere.ofAddress(GetDataHere$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*QueryGetData)(IDataObject*,FORMATETC*);
     * }
     */
    public interface QueryGetData {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(QueryGetData fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3329.const$3, fi, constants$34.const$0, scope);
        }
        static QueryGetData ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle QueryGetData$VH() {
        return constants$3329.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryGetData)(IDataObject*,FORMATETC*);
     * }
     */
    public static MemorySegment QueryGetData$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3329.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryGetData)(IDataObject*,FORMATETC*);
     * }
     */
    public static void QueryGetData$set(MemorySegment seg, MemorySegment x) {
        constants$3329.const$4.set(seg, x);
    }
    public static MemorySegment QueryGetData$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3329.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryGetData$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3329.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryGetData QueryGetData(MemorySegment segment, Arena scope) {
        return QueryGetData.ofAddress(QueryGetData$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetCanonicalFormatEtc)(IDataObject*,FORMATETC*,FORMATETC*);
     * }
     */
    public interface GetCanonicalFormatEtc {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetCanonicalFormatEtc fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3329.const$5, fi, constants$37.const$3, scope);
        }
        static GetCanonicalFormatEtc ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetCanonicalFormatEtc$VH() {
        return constants$3330.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetCanonicalFormatEtc)(IDataObject*,FORMATETC*,FORMATETC*);
     * }
     */
    public static MemorySegment GetCanonicalFormatEtc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3330.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetCanonicalFormatEtc)(IDataObject*,FORMATETC*,FORMATETC*);
     * }
     */
    public static void GetCanonicalFormatEtc$set(MemorySegment seg, MemorySegment x) {
        constants$3330.const$0.set(seg, x);
    }
    public static MemorySegment GetCanonicalFormatEtc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3330.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void GetCanonicalFormatEtc$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3330.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetCanonicalFormatEtc GetCanonicalFormatEtc(MemorySegment segment, Arena scope) {
        return GetCanonicalFormatEtc.ofAddress(GetCanonicalFormatEtc$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetData)(IDataObject*,FORMATETC*,STGMEDIUM*,BOOL);
     * }
     */
    public interface SetData {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3);
        static MemorySegment allocate(SetData fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3330.const$1, fi, constants$607.const$3, scope);
        }
        static SetData ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3) -> {
                try {
                    return (int)constants$2133.const$3.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetData$VH() {
        return constants$3330.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetData)(IDataObject*,FORMATETC*,STGMEDIUM*,BOOL);
     * }
     */
    public static MemorySegment SetData$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3330.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetData)(IDataObject*,FORMATETC*,STGMEDIUM*,BOOL);
     * }
     */
    public static void SetData$set(MemorySegment seg, MemorySegment x) {
        constants$3330.const$2.set(seg, x);
    }
    public static MemorySegment SetData$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3330.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void SetData$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3330.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetData SetData(MemorySegment segment, Arena scope) {
        return SetData.ofAddress(SetData$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*EnumFormatEtc)(IDataObject*,DWORD,IEnumFORMATETC**);
     * }
     */
    public interface EnumFormatEtc {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(EnumFormatEtc fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3330.const$3, fi, constants$485.const$5, scope);
        }
        static EnumFormatEtc ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$1770.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle EnumFormatEtc$VH() {
        return constants$3330.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*EnumFormatEtc)(IDataObject*,DWORD,IEnumFORMATETC**);
     * }
     */
    public static MemorySegment EnumFormatEtc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3330.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*EnumFormatEtc)(IDataObject*,DWORD,IEnumFORMATETC**);
     * }
     */
    public static void EnumFormatEtc$set(MemorySegment seg, MemorySegment x) {
        constants$3330.const$4.set(seg, x);
    }
    public static MemorySegment EnumFormatEtc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3330.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void EnumFormatEtc$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3330.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static EnumFormatEtc EnumFormatEtc(MemorySegment segment, Arena scope) {
        return EnumFormatEtc.ofAddress(EnumFormatEtc$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*DAdvise)(IDataObject*,FORMATETC*,DWORD,IAdviseSink*,DWORD*);
     * }
     */
    public interface DAdvise {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(DAdvise fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3330.const$5, fi, constants$588.const$3, scope);
        }
        static DAdvise ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)constants$1005.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle DAdvise$VH() {
        return constants$3331.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*DAdvise)(IDataObject*,FORMATETC*,DWORD,IAdviseSink*,DWORD*);
     * }
     */
    public static MemorySegment DAdvise$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3331.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*DAdvise)(IDataObject*,FORMATETC*,DWORD,IAdviseSink*,DWORD*);
     * }
     */
    public static void DAdvise$set(MemorySegment seg, MemorySegment x) {
        constants$3331.const$0.set(seg, x);
    }
    public static MemorySegment DAdvise$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3331.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void DAdvise$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3331.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static DAdvise DAdvise(MemorySegment segment, Arena scope) {
        return DAdvise.ofAddress(DAdvise$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*DUnadvise)(IDataObject*,DWORD);
     * }
     */
    public interface DUnadvise {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(DUnadvise fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3331.const$1, fi, constants$65.const$2, scope);
        }
        static DUnadvise ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)constants$800.const$4.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle DUnadvise$VH() {
        return constants$3331.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*DUnadvise)(IDataObject*,DWORD);
     * }
     */
    public static MemorySegment DUnadvise$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3331.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*DUnadvise)(IDataObject*,DWORD);
     * }
     */
    public static void DUnadvise$set(MemorySegment seg, MemorySegment x) {
        constants$3331.const$2.set(seg, x);
    }
    public static MemorySegment DUnadvise$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3331.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void DUnadvise$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3331.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static DUnadvise DUnadvise(MemorySegment segment, Arena scope) {
        return DUnadvise.ofAddress(DUnadvise$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*EnumDAdvise)(IDataObject*,IEnumSTATDATA**);
     * }
     */
    public interface EnumDAdvise {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(EnumDAdvise fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3331.const$3, fi, constants$34.const$0, scope);
        }
        static EnumDAdvise ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle EnumDAdvise$VH() {
        return constants$3331.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*EnumDAdvise)(IDataObject*,IEnumSTATDATA**);
     * }
     */
    public static MemorySegment EnumDAdvise$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3331.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*EnumDAdvise)(IDataObject*,IEnumSTATDATA**);
     * }
     */
    public static void EnumDAdvise$set(MemorySegment seg, MemorySegment x) {
        constants$3331.const$4.set(seg, x);
    }
    public static MemorySegment EnumDAdvise$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3331.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void EnumDAdvise$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3331.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static EnumDAdvise EnumDAdvise(MemorySegment segment, Arena scope) {
        return EnumDAdvise.ofAddress(EnumDAdvise$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



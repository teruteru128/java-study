// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct {
 *     BOOLEAN Enable;
 *     BYTE Spare[3];
 *     DWORD BatteryLevel;
 *     POWER_ACTION_POLICY PowerPolicy;
 *     SYSTEM_POWER_STATE MinSystemState;
 * };
 * }
 */
public class SYSTEM_POWER_LEVEL {

    public static MemoryLayout $LAYOUT() {
        return constants$332.const$1;
    }
    public static VarHandle Enable$VH() {
        return constants$332.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BOOLEAN Enable;
     * }
     */
    public static byte Enable$get(MemorySegment seg) {
        return (byte)constants$332.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BOOLEAN Enable;
     * }
     */
    public static void Enable$set(MemorySegment seg, byte x) {
        constants$332.const$2.set(seg, x);
    }
    public static byte Enable$get(MemorySegment seg, long index) {
        return (byte)constants$332.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void Enable$set(MemorySegment seg, long index, byte x) {
        constants$332.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Spare$slice(MemorySegment seg) {
        return seg.asSlice(1, 3);
    }
    public static VarHandle BatteryLevel$VH() {
        return constants$332.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD BatteryLevel;
     * }
     */
    public static int BatteryLevel$get(MemorySegment seg) {
        return (int)constants$332.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD BatteryLevel;
     * }
     */
    public static void BatteryLevel$set(MemorySegment seg, int x) {
        constants$332.const$3.set(seg, x);
    }
    public static int BatteryLevel$get(MemorySegment seg, long index) {
        return (int)constants$332.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void BatteryLevel$set(MemorySegment seg, long index, int x) {
        constants$332.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment PowerPolicy$slice(MemorySegment seg) {
        return seg.asSlice(8, 12);
    }
    public static VarHandle MinSystemState$VH() {
        return constants$332.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * SYSTEM_POWER_STATE MinSystemState;
     * }
     */
    public static int MinSystemState$get(MemorySegment seg) {
        return (int)constants$332.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * SYSTEM_POWER_STATE MinSystemState;
     * }
     */
    public static void MinSystemState$set(MemorySegment seg, int x) {
        constants$332.const$4.set(seg, x);
    }
    public static int MinSystemState$get(MemorySegment seg, long index) {
        return (int)constants$332.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void MinSystemState$set(MemorySegment seg, long index, int x) {
        constants$332.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct __MIDL___MIDL_itf_wtypes_0000_0001_0001 {
 *     DWORD tyspec;
 *     union __MIDL___MIDL_itf_wtypes_0000_0001_0005 tagged_union;
 * };
 * }
 */
public class __MIDL___MIDL_itf_wtypes_0000_0001_0001 {

    public static MemoryLayout $LAYOUT() {
        return constants$2366.const$2;
    }
    public static VarHandle tyspec$VH() {
        return constants$2366.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD tyspec;
     * }
     */
    public static int tyspec$get(MemorySegment seg) {
        return (int)constants$2366.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD tyspec;
     * }
     */
    public static void tyspec$set(MemorySegment seg, int x) {
        constants$2366.const$3.set(seg, x);
    }
    public static int tyspec$get(MemorySegment seg, long index) {
        return (int)constants$2366.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void tyspec$set(MemorySegment seg, long index, int x) {
        constants$2366.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
     * union __MIDL___MIDL_itf_wtypes_0000_0001_0005 {
     *     CLSID clsid;
     *     LPOLESTR pFileExt;
     *     LPOLESTR pMimeType;
     *     LPOLESTR pProgId;
     *     LPOLESTR pFileName;
     *     struct  ByName;
     *     struct  ByObjectId;
     * };
     * }
     */
    public static final class __MIDL___MIDL_itf_wtypes_0000_0001_0005 {

        // Suppresses default constructor, ensuring non-instantiability.
        private __MIDL___MIDL_itf_wtypes_0000_0001_0005() {}
        public static MemoryLayout $LAYOUT() {
            return constants$2366.const$4;
        }
        public static MemorySegment clsid$slice(MemorySegment seg) {
            return seg.asSlice(0, 16);
        }
        public static VarHandle pFileExt$VH() {
            return constants$2366.const$5;
        }
        /**
         * Getter for field:
         * {@snippet :
         * LPOLESTR pFileExt;
         * }
         */
        public static MemorySegment pFileExt$get(MemorySegment seg) {
            return (java.lang.foreign.MemorySegment)constants$2366.const$5.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * LPOLESTR pFileExt;
         * }
         */
        public static void pFileExt$set(MemorySegment seg, MemorySegment x) {
            constants$2366.const$5.set(seg, x);
        }
        public static MemorySegment pFileExt$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemorySegment)constants$2366.const$5.get(seg.asSlice(index*sizeof()));
        }
        public static void pFileExt$set(MemorySegment seg, long index, MemorySegment x) {
            constants$2366.const$5.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle pMimeType$VH() {
            return constants$2367.const$0;
        }
        /**
         * Getter for field:
         * {@snippet :
         * LPOLESTR pMimeType;
         * }
         */
        public static MemorySegment pMimeType$get(MemorySegment seg) {
            return (java.lang.foreign.MemorySegment)constants$2367.const$0.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * LPOLESTR pMimeType;
         * }
         */
        public static void pMimeType$set(MemorySegment seg, MemorySegment x) {
            constants$2367.const$0.set(seg, x);
        }
        public static MemorySegment pMimeType$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemorySegment)constants$2367.const$0.get(seg.asSlice(index*sizeof()));
        }
        public static void pMimeType$set(MemorySegment seg, long index, MemorySegment x) {
            constants$2367.const$0.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle pProgId$VH() {
            return constants$2367.const$1;
        }
        /**
         * Getter for field:
         * {@snippet :
         * LPOLESTR pProgId;
         * }
         */
        public static MemorySegment pProgId$get(MemorySegment seg) {
            return (java.lang.foreign.MemorySegment)constants$2367.const$1.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * LPOLESTR pProgId;
         * }
         */
        public static void pProgId$set(MemorySegment seg, MemorySegment x) {
            constants$2367.const$1.set(seg, x);
        }
        public static MemorySegment pProgId$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemorySegment)constants$2367.const$1.get(seg.asSlice(index*sizeof()));
        }
        public static void pProgId$set(MemorySegment seg, long index, MemorySegment x) {
            constants$2367.const$1.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle pFileName$VH() {
            return constants$2367.const$2;
        }
        /**
         * Getter for field:
         * {@snippet :
         * LPOLESTR pFileName;
         * }
         */
        public static MemorySegment pFileName$get(MemorySegment seg) {
            return (java.lang.foreign.MemorySegment)constants$2367.const$2.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * LPOLESTR pFileName;
         * }
         */
        public static void pFileName$set(MemorySegment seg, MemorySegment x) {
            constants$2367.const$2.set(seg, x);
        }
        public static MemorySegment pFileName$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemorySegment)constants$2367.const$2.get(seg.asSlice(index*sizeof()));
        }
        public static void pFileName$set(MemorySegment seg, long index, MemorySegment x) {
            constants$2367.const$2.set(seg.asSlice(index*sizeof()), x);
        }
        /**
         * {@snippet :
         * struct {
         *     LPOLESTR pPackageName;
         *     GUID PolicyId;
         * };
         * }
         */
        public static final class ByName {

            // Suppresses default constructor, ensuring non-instantiability.
            private ByName() {}
            public static MemoryLayout $LAYOUT() {
                return constants$2367.const$3;
            }
            public static VarHandle pPackageName$VH() {
                return constants$2367.const$4;
            }
            /**
             * Getter for field:
             * {@snippet :
             * LPOLESTR pPackageName;
             * }
             */
            public static MemorySegment pPackageName$get(MemorySegment seg) {
                return (java.lang.foreign.MemorySegment)constants$2367.const$4.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * LPOLESTR pPackageName;
             * }
             */
            public static void pPackageName$set(MemorySegment seg, MemorySegment x) {
                constants$2367.const$4.set(seg, x);
            }
            public static MemorySegment pPackageName$get(MemorySegment seg, long index) {
                return (java.lang.foreign.MemorySegment)constants$2367.const$4.get(seg.asSlice(index*sizeof()));
            }
            public static void pPackageName$set(MemorySegment seg, long index, MemorySegment x) {
                constants$2367.const$4.set(seg.asSlice(index*sizeof()), x);
            }
            public static MemorySegment PolicyId$slice(MemorySegment seg) {
                return seg.asSlice(8, 16);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
        }

        public static MemorySegment ByName$slice(MemorySegment seg) {
            return seg.asSlice(0, 24);
        }
        /**
         * {@snippet :
         * struct {
         *     GUID ObjectId;
         *     GUID PolicyId;
         * };
         * }
         */
        public static final class ByObjectId {

            // Suppresses default constructor, ensuring non-instantiability.
            private ByObjectId() {}
            public static MemoryLayout $LAYOUT() {
                return constants$2367.const$5;
            }
            public static MemorySegment ObjectId$slice(MemorySegment seg) {
                return seg.asSlice(0, 16);
            }
            public static MemorySegment PolicyId$slice(MemorySegment seg) {
                return seg.asSlice(16, 16);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
        }

        public static MemorySegment ByObjectId$slice(MemorySegment seg) {
            return seg.asSlice(0, 32);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment tagged_union$slice(MemorySegment seg) {
        return seg.asSlice(8, 32);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



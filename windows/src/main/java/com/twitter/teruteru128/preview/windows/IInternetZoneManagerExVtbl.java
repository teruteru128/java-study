// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IInternetZoneManagerExVtbl {
 *     HRESULT (*QueryInterface)(IInternetZoneManagerEx*,const IID*,void**);
 *     ULONG (*AddRef)(IInternetZoneManagerEx*);
 *     ULONG (*Release)(IInternetZoneManagerEx*);
 *     HRESULT (*GetZoneAttributes)(IInternetZoneManagerEx*,DWORD,ZONEATTRIBUTES*);
 *     HRESULT (*SetZoneAttributes)(IInternetZoneManagerEx*,DWORD,ZONEATTRIBUTES*);
 *     HRESULT (*GetZoneCustomPolicy)(IInternetZoneManagerEx*,DWORD,const GUID*,BYTE**,DWORD*,URLZONEREG);
 *     HRESULT (*SetZoneCustomPolicy)(IInternetZoneManagerEx*,DWORD,const GUID*,BYTE*,DWORD,URLZONEREG);
 *     HRESULT (*GetZoneActionPolicy)(IInternetZoneManagerEx*,DWORD,DWORD,BYTE*,DWORD,URLZONEREG);
 *     HRESULT (*SetZoneActionPolicy)(IInternetZoneManagerEx*,DWORD,DWORD,BYTE*,DWORD,URLZONEREG);
 *     HRESULT (*PromptAction)(IInternetZoneManagerEx*,DWORD,HWND,LPCWSTR,LPCWSTR,DWORD);
 *     HRESULT (*LogAction)(IInternetZoneManagerEx*,DWORD,LPCWSTR,LPCWSTR,DWORD);
 *     HRESULT (*CreateZoneEnumerator)(IInternetZoneManagerEx*,DWORD*,DWORD*,DWORD);
 *     HRESULT (*GetZoneAt)(IInternetZoneManagerEx*,DWORD,DWORD,DWORD*);
 *     HRESULT (*DestroyZoneEnumerator)(IInternetZoneManagerEx*,DWORD);
 *     HRESULT (*CopyTemplatePoliciesToZone)(IInternetZoneManagerEx*,DWORD,DWORD,DWORD);
 *     HRESULT (*GetZoneActionPolicyEx)(IInternetZoneManagerEx*,DWORD,DWORD,BYTE*,DWORD,URLZONEREG,DWORD);
 *     HRESULT (*SetZoneActionPolicyEx)(IInternetZoneManagerEx*,DWORD,DWORD,BYTE*,DWORD,URLZONEREG,DWORD);
 * };
 * }
 */
public class IInternetZoneManagerExVtbl {

    public static MemoryLayout $LAYOUT() {
        return constants$4283.const$0;
    }
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IInternetZoneManagerEx*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4283.const$1, fi, constants$37.const$3, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle QueryInterface$VH() {
        return constants$4283.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IInternetZoneManagerEx*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4283.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IInternetZoneManagerEx*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        constants$4283.const$2.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4283.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4283.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, Arena scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*AddRef)(IInternetZoneManagerEx*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4283.const$3, fi, constants$18.const$5, scope);
        }
        static AddRef ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle AddRef$VH() {
        return constants$4283.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IInternetZoneManagerEx*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4283.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IInternetZoneManagerEx*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        constants$4283.const$4.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4283.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4283.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, Arena scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*Release)(IInternetZoneManagerEx*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4283.const$5, fi, constants$18.const$5, scope);
        }
        static Release ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Release$VH() {
        return constants$4284.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IInternetZoneManagerEx*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4284.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IInternetZoneManagerEx*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        constants$4284.const$0.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4284.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4284.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, Arena scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetZoneAttributes)(IInternetZoneManagerEx*,DWORD,ZONEATTRIBUTES*);
     * }
     */
    public interface GetZoneAttributes {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetZoneAttributes fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4284.const$1, fi, constants$485.const$5, scope);
        }
        static GetZoneAttributes ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$1770.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetZoneAttributes$VH() {
        return constants$4284.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetZoneAttributes)(IInternetZoneManagerEx*,DWORD,ZONEATTRIBUTES*);
     * }
     */
    public static MemorySegment GetZoneAttributes$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4284.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetZoneAttributes)(IInternetZoneManagerEx*,DWORD,ZONEATTRIBUTES*);
     * }
     */
    public static void GetZoneAttributes$set(MemorySegment seg, MemorySegment x) {
        constants$4284.const$2.set(seg, x);
    }
    public static MemorySegment GetZoneAttributes$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4284.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void GetZoneAttributes$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4284.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetZoneAttributes GetZoneAttributes(MemorySegment segment, Arena scope) {
        return GetZoneAttributes.ofAddress(GetZoneAttributes$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetZoneAttributes)(IInternetZoneManagerEx*,DWORD,ZONEATTRIBUTES*);
     * }
     */
    public interface SetZoneAttributes {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(SetZoneAttributes fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4284.const$3, fi, constants$485.const$5, scope);
        }
        static SetZoneAttributes ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$1770.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetZoneAttributes$VH() {
        return constants$4284.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetZoneAttributes)(IInternetZoneManagerEx*,DWORD,ZONEATTRIBUTES*);
     * }
     */
    public static MemorySegment SetZoneAttributes$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4284.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetZoneAttributes)(IInternetZoneManagerEx*,DWORD,ZONEATTRIBUTES*);
     * }
     */
    public static void SetZoneAttributes$set(MemorySegment seg, MemorySegment x) {
        constants$4284.const$4.set(seg, x);
    }
    public static MemorySegment SetZoneAttributes$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4284.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void SetZoneAttributes$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4284.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetZoneAttributes SetZoneAttributes(MemorySegment segment, Arena scope) {
        return SetZoneAttributes.ofAddress(SetZoneAttributes$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetZoneCustomPolicy)(IInternetZoneManagerEx*,DWORD,const GUID*,BYTE**,DWORD*,URLZONEREG);
     * }
     */
    public interface GetZoneCustomPolicy {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, int _x5);
        static MemorySegment allocate(GetZoneCustomPolicy fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4284.const$5, fi, constants$1408.const$3, scope);
        }
        static GetZoneCustomPolicy ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, int __x5) -> {
                try {
                    return (int)constants$4278.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetZoneCustomPolicy$VH() {
        return constants$4285.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetZoneCustomPolicy)(IInternetZoneManagerEx*,DWORD,const GUID*,BYTE**,DWORD*,URLZONEREG);
     * }
     */
    public static MemorySegment GetZoneCustomPolicy$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4285.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetZoneCustomPolicy)(IInternetZoneManagerEx*,DWORD,const GUID*,BYTE**,DWORD*,URLZONEREG);
     * }
     */
    public static void GetZoneCustomPolicy$set(MemorySegment seg, MemorySegment x) {
        constants$4285.const$0.set(seg, x);
    }
    public static MemorySegment GetZoneCustomPolicy$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4285.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void GetZoneCustomPolicy$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4285.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetZoneCustomPolicy GetZoneCustomPolicy(MemorySegment segment, Arena scope) {
        return GetZoneCustomPolicy.ofAddress(GetZoneCustomPolicy$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetZoneCustomPolicy)(IInternetZoneManagerEx*,DWORD,const GUID*,BYTE*,DWORD,URLZONEREG);
     * }
     */
    public interface SetZoneCustomPolicy {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, int _x4, int _x5);
        static MemorySegment allocate(SetZoneCustomPolicy fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4285.const$1, fi, constants$4278.const$4, scope);
        }
        static SetZoneCustomPolicy ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, int __x4, int __x5) -> {
                try {
                    return (int)constants$4279.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetZoneCustomPolicy$VH() {
        return constants$4285.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetZoneCustomPolicy)(IInternetZoneManagerEx*,DWORD,const GUID*,BYTE*,DWORD,URLZONEREG);
     * }
     */
    public static MemorySegment SetZoneCustomPolicy$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4285.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetZoneCustomPolicy)(IInternetZoneManagerEx*,DWORD,const GUID*,BYTE*,DWORD,URLZONEREG);
     * }
     */
    public static void SetZoneCustomPolicy$set(MemorySegment seg, MemorySegment x) {
        constants$4285.const$2.set(seg, x);
    }
    public static MemorySegment SetZoneCustomPolicy$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4285.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void SetZoneCustomPolicy$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4285.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetZoneCustomPolicy SetZoneCustomPolicy(MemorySegment segment, Arena scope) {
        return SetZoneCustomPolicy.ofAddress(SetZoneCustomPolicy$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetZoneActionPolicy)(IInternetZoneManagerEx*,DWORD,DWORD,BYTE*,DWORD,URLZONEREG);
     * }
     */
    public interface GetZoneActionPolicy {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, java.lang.foreign.MemorySegment _x3, int _x4, int _x5);
        static MemorySegment allocate(GetZoneActionPolicy fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4285.const$3, fi, constants$720.const$5, scope);
        }
        static GetZoneActionPolicy ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, java.lang.foreign.MemorySegment __x3, int __x4, int __x5) -> {
                try {
                    return (int)constants$4279.const$3.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetZoneActionPolicy$VH() {
        return constants$4285.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetZoneActionPolicy)(IInternetZoneManagerEx*,DWORD,DWORD,BYTE*,DWORD,URLZONEREG);
     * }
     */
    public static MemorySegment GetZoneActionPolicy$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4285.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetZoneActionPolicy)(IInternetZoneManagerEx*,DWORD,DWORD,BYTE*,DWORD,URLZONEREG);
     * }
     */
    public static void GetZoneActionPolicy$set(MemorySegment seg, MemorySegment x) {
        constants$4285.const$4.set(seg, x);
    }
    public static MemorySegment GetZoneActionPolicy$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4285.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void GetZoneActionPolicy$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4285.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetZoneActionPolicy GetZoneActionPolicy(MemorySegment segment, Arena scope) {
        return GetZoneActionPolicy.ofAddress(GetZoneActionPolicy$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetZoneActionPolicy)(IInternetZoneManagerEx*,DWORD,DWORD,BYTE*,DWORD,URLZONEREG);
     * }
     */
    public interface SetZoneActionPolicy {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, java.lang.foreign.MemorySegment _x3, int _x4, int _x5);
        static MemorySegment allocate(SetZoneActionPolicy fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4285.const$5, fi, constants$720.const$5, scope);
        }
        static SetZoneActionPolicy ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, java.lang.foreign.MemorySegment __x3, int __x4, int __x5) -> {
                try {
                    return (int)constants$4279.const$3.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetZoneActionPolicy$VH() {
        return constants$4286.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetZoneActionPolicy)(IInternetZoneManagerEx*,DWORD,DWORD,BYTE*,DWORD,URLZONEREG);
     * }
     */
    public static MemorySegment SetZoneActionPolicy$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4286.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetZoneActionPolicy)(IInternetZoneManagerEx*,DWORD,DWORD,BYTE*,DWORD,URLZONEREG);
     * }
     */
    public static void SetZoneActionPolicy$set(MemorySegment seg, MemorySegment x) {
        constants$4286.const$0.set(seg, x);
    }
    public static MemorySegment SetZoneActionPolicy$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4286.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void SetZoneActionPolicy$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4286.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetZoneActionPolicy SetZoneActionPolicy(MemorySegment segment, Arena scope) {
        return SetZoneActionPolicy.ofAddress(SetZoneActionPolicy$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*PromptAction)(IInternetZoneManagerEx*,DWORD,HWND,LPCWSTR,LPCWSTR,DWORD);
     * }
     */
    public interface PromptAction {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, int _x5);
        static MemorySegment allocate(PromptAction fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4286.const$1, fi, constants$1408.const$3, scope);
        }
        static PromptAction ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, int __x5) -> {
                try {
                    return (int)constants$4278.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle PromptAction$VH() {
        return constants$4286.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*PromptAction)(IInternetZoneManagerEx*,DWORD,HWND,LPCWSTR,LPCWSTR,DWORD);
     * }
     */
    public static MemorySegment PromptAction$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4286.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*PromptAction)(IInternetZoneManagerEx*,DWORD,HWND,LPCWSTR,LPCWSTR,DWORD);
     * }
     */
    public static void PromptAction$set(MemorySegment seg, MemorySegment x) {
        constants$4286.const$2.set(seg, x);
    }
    public static MemorySegment PromptAction$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4286.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void PromptAction$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4286.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static PromptAction PromptAction(MemorySegment segment, Arena scope) {
        return PromptAction.ofAddress(PromptAction$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*LogAction)(IInternetZoneManagerEx*,DWORD,LPCWSTR,LPCWSTR,DWORD);
     * }
     */
    public interface LogAction {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, int _x4);
        static MemorySegment allocate(LogAction fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4286.const$3, fi, constants$657.const$2, scope);
        }
        static LogAction ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, int __x4) -> {
                try {
                    return (int)constants$3607.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle LogAction$VH() {
        return constants$4286.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*LogAction)(IInternetZoneManagerEx*,DWORD,LPCWSTR,LPCWSTR,DWORD);
     * }
     */
    public static MemorySegment LogAction$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4286.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*LogAction)(IInternetZoneManagerEx*,DWORD,LPCWSTR,LPCWSTR,DWORD);
     * }
     */
    public static void LogAction$set(MemorySegment seg, MemorySegment x) {
        constants$4286.const$4.set(seg, x);
    }
    public static MemorySegment LogAction$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4286.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void LogAction$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4286.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static LogAction LogAction(MemorySegment segment, Arena scope) {
        return LogAction.ofAddress(LogAction$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*CreateZoneEnumerator)(IInternetZoneManagerEx*,DWORD*,DWORD*,DWORD);
     * }
     */
    public interface CreateZoneEnumerator {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3);
        static MemorySegment allocate(CreateZoneEnumerator fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4286.const$5, fi, constants$607.const$3, scope);
        }
        static CreateZoneEnumerator ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3) -> {
                try {
                    return (int)constants$2133.const$3.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CreateZoneEnumerator$VH() {
        return constants$4287.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*CreateZoneEnumerator)(IInternetZoneManagerEx*,DWORD*,DWORD*,DWORD);
     * }
     */
    public static MemorySegment CreateZoneEnumerator$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4287.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*CreateZoneEnumerator)(IInternetZoneManagerEx*,DWORD*,DWORD*,DWORD);
     * }
     */
    public static void CreateZoneEnumerator$set(MemorySegment seg, MemorySegment x) {
        constants$4287.const$0.set(seg, x);
    }
    public static MemorySegment CreateZoneEnumerator$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4287.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void CreateZoneEnumerator$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4287.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static CreateZoneEnumerator CreateZoneEnumerator(MemorySegment segment, Arena scope) {
        return CreateZoneEnumerator.ofAddress(CreateZoneEnumerator$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetZoneAt)(IInternetZoneManagerEx*,DWORD,DWORD,DWORD*);
     * }
     */
    public interface GetZoneAt {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(GetZoneAt fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4287.const$1, fi, constants$644.const$5, scope);
        }
        static GetZoneAt ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)constants$2131.const$5.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetZoneAt$VH() {
        return constants$4287.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetZoneAt)(IInternetZoneManagerEx*,DWORD,DWORD,DWORD*);
     * }
     */
    public static MemorySegment GetZoneAt$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4287.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetZoneAt)(IInternetZoneManagerEx*,DWORD,DWORD,DWORD*);
     * }
     */
    public static void GetZoneAt$set(MemorySegment seg, MemorySegment x) {
        constants$4287.const$2.set(seg, x);
    }
    public static MemorySegment GetZoneAt$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4287.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void GetZoneAt$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4287.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetZoneAt GetZoneAt(MemorySegment segment, Arena scope) {
        return GetZoneAt.ofAddress(GetZoneAt$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*DestroyZoneEnumerator)(IInternetZoneManagerEx*,DWORD);
     * }
     */
    public interface DestroyZoneEnumerator {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(DestroyZoneEnumerator fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4287.const$3, fi, constants$65.const$2, scope);
        }
        static DestroyZoneEnumerator ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)constants$800.const$4.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle DestroyZoneEnumerator$VH() {
        return constants$4287.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*DestroyZoneEnumerator)(IInternetZoneManagerEx*,DWORD);
     * }
     */
    public static MemorySegment DestroyZoneEnumerator$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4287.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*DestroyZoneEnumerator)(IInternetZoneManagerEx*,DWORD);
     * }
     */
    public static void DestroyZoneEnumerator$set(MemorySegment seg, MemorySegment x) {
        constants$4287.const$4.set(seg, x);
    }
    public static MemorySegment DestroyZoneEnumerator$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4287.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void DestroyZoneEnumerator$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4287.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static DestroyZoneEnumerator DestroyZoneEnumerator(MemorySegment segment, Arena scope) {
        return DestroyZoneEnumerator.ofAddress(DestroyZoneEnumerator$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*CopyTemplatePoliciesToZone)(IInternetZoneManagerEx*,DWORD,DWORD,DWORD);
     * }
     */
    public interface CopyTemplatePoliciesToZone {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, int _x3);
        static MemorySegment allocate(CopyTemplatePoliciesToZone fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4287.const$5, fi, constants$775.const$4, scope);
        }
        static CopyTemplatePoliciesToZone ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, int __x3) -> {
                try {
                    return (int)constants$1135.const$1.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CopyTemplatePoliciesToZone$VH() {
        return constants$4288.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*CopyTemplatePoliciesToZone)(IInternetZoneManagerEx*,DWORD,DWORD,DWORD);
     * }
     */
    public static MemorySegment CopyTemplatePoliciesToZone$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4288.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*CopyTemplatePoliciesToZone)(IInternetZoneManagerEx*,DWORD,DWORD,DWORD);
     * }
     */
    public static void CopyTemplatePoliciesToZone$set(MemorySegment seg, MemorySegment x) {
        constants$4288.const$0.set(seg, x);
    }
    public static MemorySegment CopyTemplatePoliciesToZone$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4288.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void CopyTemplatePoliciesToZone$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4288.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static CopyTemplatePoliciesToZone CopyTemplatePoliciesToZone(MemorySegment segment, Arena scope) {
        return CopyTemplatePoliciesToZone.ofAddress(CopyTemplatePoliciesToZone$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetZoneActionPolicyEx)(IInternetZoneManagerEx*,DWORD,DWORD,BYTE*,DWORD,URLZONEREG,DWORD);
     * }
     */
    public interface GetZoneActionPolicyEx {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, java.lang.foreign.MemorySegment _x3, int _x4, int _x5, int _x6);
        static MemorySegment allocate(GetZoneActionPolicyEx fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4288.const$2, fi, constants$4288.const$1, scope);
        }
        static GetZoneActionPolicyEx ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, java.lang.foreign.MemorySegment __x3, int __x4, int __x5, int __x6) -> {
                try {
                    return (int)constants$4288.const$3.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetZoneActionPolicyEx$VH() {
        return constants$4288.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetZoneActionPolicyEx)(IInternetZoneManagerEx*,DWORD,DWORD,BYTE*,DWORD,URLZONEREG,DWORD);
     * }
     */
    public static MemorySegment GetZoneActionPolicyEx$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4288.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetZoneActionPolicyEx)(IInternetZoneManagerEx*,DWORD,DWORD,BYTE*,DWORD,URLZONEREG,DWORD);
     * }
     */
    public static void GetZoneActionPolicyEx$set(MemorySegment seg, MemorySegment x) {
        constants$4288.const$4.set(seg, x);
    }
    public static MemorySegment GetZoneActionPolicyEx$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4288.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void GetZoneActionPolicyEx$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4288.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetZoneActionPolicyEx GetZoneActionPolicyEx(MemorySegment segment, Arena scope) {
        return GetZoneActionPolicyEx.ofAddress(GetZoneActionPolicyEx$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetZoneActionPolicyEx)(IInternetZoneManagerEx*,DWORD,DWORD,BYTE*,DWORD,URLZONEREG,DWORD);
     * }
     */
    public interface SetZoneActionPolicyEx {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, java.lang.foreign.MemorySegment _x3, int _x4, int _x5, int _x6);
        static MemorySegment allocate(SetZoneActionPolicyEx fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4288.const$5, fi, constants$4288.const$1, scope);
        }
        static SetZoneActionPolicyEx ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, java.lang.foreign.MemorySegment __x3, int __x4, int __x5, int __x6) -> {
                try {
                    return (int)constants$4288.const$3.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetZoneActionPolicyEx$VH() {
        return constants$4289.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetZoneActionPolicyEx)(IInternetZoneManagerEx*,DWORD,DWORD,BYTE*,DWORD,URLZONEREG,DWORD);
     * }
     */
    public static MemorySegment SetZoneActionPolicyEx$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4289.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetZoneActionPolicyEx)(IInternetZoneManagerEx*,DWORD,DWORD,BYTE*,DWORD,URLZONEREG,DWORD);
     * }
     */
    public static void SetZoneActionPolicyEx$set(MemorySegment seg, MemorySegment x) {
        constants$4289.const$0.set(seg, x);
    }
    public static MemorySegment SetZoneActionPolicyEx$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4289.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void SetZoneActionPolicyEx$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4289.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetZoneActionPolicyEx SetZoneActionPolicyEx(MemorySegment segment, Arena scope) {
        return SetZoneActionPolicyEx.ofAddress(SetZoneActionPolicyEx$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



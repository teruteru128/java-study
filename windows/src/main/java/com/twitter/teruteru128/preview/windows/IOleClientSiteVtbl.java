// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IOleClientSiteVtbl {
 *     HRESULT (*QueryInterface)(IOleClientSite*,const IID*,void**);
 *     ULONG (*AddRef)(IOleClientSite*);
 *     ULONG (*Release)(IOleClientSite*);
 *     HRESULT (*SaveObject)(IOleClientSite*);
 *     HRESULT (*GetMoniker)(IOleClientSite*,DWORD,DWORD,IMoniker**);
 *     HRESULT (*GetContainer)(IOleClientSite*,IOleContainer**);
 *     HRESULT (*ShowObject)(IOleClientSite*);
 *     HRESULT (*OnShowWindow)(IOleClientSite*,BOOL);
 *     HRESULT (*RequestNewObjectLayout)(IOleClientSite*);
 * };
 * }
 */
public class IOleClientSiteVtbl {

    public static MemoryLayout $LAYOUT() {
        return constants$3654.const$4;
    }
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IOleClientSite*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3654.const$5, fi, constants$37.const$3, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle QueryInterface$VH() {
        return constants$3655.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IOleClientSite*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3655.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IOleClientSite*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        constants$3655.const$0.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3655.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3655.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, Arena scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*AddRef)(IOleClientSite*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3655.const$1, fi, constants$18.const$5, scope);
        }
        static AddRef ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle AddRef$VH() {
        return constants$3655.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IOleClientSite*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3655.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IOleClientSite*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        constants$3655.const$2.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3655.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3655.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, Arena scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*Release)(IOleClientSite*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3655.const$3, fi, constants$18.const$5, scope);
        }
        static Release ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Release$VH() {
        return constants$3655.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IOleClientSite*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3655.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IOleClientSite*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        constants$3655.const$4.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3655.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3655.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, Arena scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SaveObject)(IOleClientSite*);
     * }
     */
    public interface SaveObject {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(SaveObject fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3655.const$5, fi, constants$18.const$5, scope);
        }
        static SaveObject ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SaveObject$VH() {
        return constants$3656.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SaveObject)(IOleClientSite*);
     * }
     */
    public static MemorySegment SaveObject$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3656.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SaveObject)(IOleClientSite*);
     * }
     */
    public static void SaveObject$set(MemorySegment seg, MemorySegment x) {
        constants$3656.const$0.set(seg, x);
    }
    public static MemorySegment SaveObject$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3656.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void SaveObject$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3656.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static SaveObject SaveObject(MemorySegment segment, Arena scope) {
        return SaveObject.ofAddress(SaveObject$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetMoniker)(IOleClientSite*,DWORD,DWORD,IMoniker**);
     * }
     */
    public interface GetMoniker {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(GetMoniker fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3656.const$1, fi, constants$644.const$5, scope);
        }
        static GetMoniker ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)constants$2131.const$5.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetMoniker$VH() {
        return constants$3656.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetMoniker)(IOleClientSite*,DWORD,DWORD,IMoniker**);
     * }
     */
    public static MemorySegment GetMoniker$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3656.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetMoniker)(IOleClientSite*,DWORD,DWORD,IMoniker**);
     * }
     */
    public static void GetMoniker$set(MemorySegment seg, MemorySegment x) {
        constants$3656.const$2.set(seg, x);
    }
    public static MemorySegment GetMoniker$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3656.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void GetMoniker$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3656.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetMoniker GetMoniker(MemorySegment segment, Arena scope) {
        return GetMoniker.ofAddress(GetMoniker$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetContainer)(IOleClientSite*,IOleContainer**);
     * }
     */
    public interface GetContainer {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetContainer fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3656.const$3, fi, constants$34.const$0, scope);
        }
        static GetContainer ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetContainer$VH() {
        return constants$3656.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetContainer)(IOleClientSite*,IOleContainer**);
     * }
     */
    public static MemorySegment GetContainer$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3656.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetContainer)(IOleClientSite*,IOleContainer**);
     * }
     */
    public static void GetContainer$set(MemorySegment seg, MemorySegment x) {
        constants$3656.const$4.set(seg, x);
    }
    public static MemorySegment GetContainer$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3656.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void GetContainer$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3656.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetContainer GetContainer(MemorySegment segment, Arena scope) {
        return GetContainer.ofAddress(GetContainer$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*ShowObject)(IOleClientSite*);
     * }
     */
    public interface ShowObject {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(ShowObject fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3656.const$5, fi, constants$18.const$5, scope);
        }
        static ShowObject ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle ShowObject$VH() {
        return constants$3657.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*ShowObject)(IOleClientSite*);
     * }
     */
    public static MemorySegment ShowObject$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3657.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*ShowObject)(IOleClientSite*);
     * }
     */
    public static void ShowObject$set(MemorySegment seg, MemorySegment x) {
        constants$3657.const$0.set(seg, x);
    }
    public static MemorySegment ShowObject$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3657.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void ShowObject$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3657.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static ShowObject ShowObject(MemorySegment segment, Arena scope) {
        return ShowObject.ofAddress(ShowObject$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*OnShowWindow)(IOleClientSite*,BOOL);
     * }
     */
    public interface OnShowWindow {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(OnShowWindow fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3657.const$1, fi, constants$65.const$2, scope);
        }
        static OnShowWindow ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)constants$800.const$4.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle OnShowWindow$VH() {
        return constants$3657.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*OnShowWindow)(IOleClientSite*,BOOL);
     * }
     */
    public static MemorySegment OnShowWindow$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3657.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*OnShowWindow)(IOleClientSite*,BOOL);
     * }
     */
    public static void OnShowWindow$set(MemorySegment seg, MemorySegment x) {
        constants$3657.const$2.set(seg, x);
    }
    public static MemorySegment OnShowWindow$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3657.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void OnShowWindow$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3657.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static OnShowWindow OnShowWindow(MemorySegment segment, Arena scope) {
        return OnShowWindow.ofAddress(OnShowWindow$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*RequestNewObjectLayout)(IOleClientSite*);
     * }
     */
    public interface RequestNewObjectLayout {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(RequestNewObjectLayout fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3657.const$3, fi, constants$18.const$5, scope);
        }
        static RequestNewObjectLayout ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle RequestNewObjectLayout$VH() {
        return constants$3657.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*RequestNewObjectLayout)(IOleClientSite*);
     * }
     */
    public static MemorySegment RequestNewObjectLayout$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3657.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*RequestNewObjectLayout)(IOleClientSite*);
     * }
     */
    public static void RequestNewObjectLayout$set(MemorySegment seg, MemorySegment x) {
        constants$3657.const$4.set(seg, x);
    }
    public static MemorySegment RequestNewObjectLayout$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3657.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void RequestNewObjectLayout$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3657.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static RequestNewObjectLayout RequestNewObjectLayout(MemorySegment segment, Arena scope) {
        return RequestNewObjectLayout.ofAddress(RequestNewObjectLayout$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



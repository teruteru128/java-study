// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _STORAGE_RPMB_DATA_FRAME {
 *     BYTE Stuff[196];
 *     BYTE KeyOrMAC[32];
 *     BYTE Data[256];
 *     BYTE Nonce[16];
 *     BYTE WriteCounter[4];
 *     BYTE Address[2];
 *     BYTE BlockCount[2];
 *     BYTE OperationResult[2];
 *     BYTE RequestOrResponseType[2];
 * };
 * }
 */
public class _STORAGE_RPMB_DATA_FRAME {

    public static MemoryLayout $LAYOUT() {
        return constants$2490.const$1;
    }
    public static MemorySegment Stuff$slice(MemorySegment seg) {
        return seg.asSlice(0, 196);
    }
    public static MemorySegment KeyOrMAC$slice(MemorySegment seg) {
        return seg.asSlice(196, 32);
    }
    public static MemorySegment Data$slice(MemorySegment seg) {
        return seg.asSlice(228, 256);
    }
    public static MemorySegment Nonce$slice(MemorySegment seg) {
        return seg.asSlice(484, 16);
    }
    public static MemorySegment WriteCounter$slice(MemorySegment seg) {
        return seg.asSlice(500, 4);
    }
    public static MemorySegment Address$slice(MemorySegment seg) {
        return seg.asSlice(504, 2);
    }
    public static MemorySegment BlockCount$slice(MemorySegment seg) {
        return seg.asSlice(506, 2);
    }
    public static MemorySegment OperationResult$slice(MemorySegment seg) {
        return seg.asSlice(508, 2);
    }
    public static MemorySegment RequestOrResponseType$slice(MemorySegment seg) {
        return seg.asSlice(510, 2);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



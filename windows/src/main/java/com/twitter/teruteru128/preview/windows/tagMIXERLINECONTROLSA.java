// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tagMIXERLINECONTROLSA {
 *     DWORD cbStruct;
 *     DWORD dwLineID;
 *     union {
 *         DWORD dwControlID;
 *         DWORD dwControlType;
 *     };
 *     DWORD cControls;
 *     DWORD cbmxctrl;
 *     LPMIXERCONTROLA pamxctrl;
 * };
 * }
 */
public class tagMIXERLINECONTROLSA {

    public static MemoryLayout $LAYOUT() {
        return constants$1672.const$5;
    }
    public static VarHandle cbStruct$VH() {
        return constants$1673.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD cbStruct;
     * }
     */
    public static int cbStruct$get(MemorySegment seg) {
        return (int)constants$1673.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD cbStruct;
     * }
     */
    public static void cbStruct$set(MemorySegment seg, int x) {
        constants$1673.const$0.set(seg, x);
    }
    public static int cbStruct$get(MemorySegment seg, long index) {
        return (int)constants$1673.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void cbStruct$set(MemorySegment seg, long index, int x) {
        constants$1673.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwLineID$VH() {
        return constants$1673.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwLineID;
     * }
     */
    public static int dwLineID$get(MemorySegment seg) {
        return (int)constants$1673.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwLineID;
     * }
     */
    public static void dwLineID$set(MemorySegment seg, int x) {
        constants$1673.const$1.set(seg, x);
    }
    public static int dwLineID$get(MemorySegment seg, long index) {
        return (int)constants$1673.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void dwLineID$set(MemorySegment seg, long index, int x) {
        constants$1673.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwControlID$VH() {
        return constants$1673.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwControlID;
     * }
     */
    public static int dwControlID$get(MemorySegment seg) {
        return (int)constants$1673.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwControlID;
     * }
     */
    public static void dwControlID$set(MemorySegment seg, int x) {
        constants$1673.const$2.set(seg, x);
    }
    public static int dwControlID$get(MemorySegment seg, long index) {
        return (int)constants$1673.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void dwControlID$set(MemorySegment seg, long index, int x) {
        constants$1673.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwControlType$VH() {
        return constants$1673.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwControlType;
     * }
     */
    public static int dwControlType$get(MemorySegment seg) {
        return (int)constants$1673.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwControlType;
     * }
     */
    public static void dwControlType$set(MemorySegment seg, int x) {
        constants$1673.const$3.set(seg, x);
    }
    public static int dwControlType$get(MemorySegment seg, long index) {
        return (int)constants$1673.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void dwControlType$set(MemorySegment seg, long index, int x) {
        constants$1673.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cControls$VH() {
        return constants$1673.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD cControls;
     * }
     */
    public static int cControls$get(MemorySegment seg) {
        return (int)constants$1673.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD cControls;
     * }
     */
    public static void cControls$set(MemorySegment seg, int x) {
        constants$1673.const$4.set(seg, x);
    }
    public static int cControls$get(MemorySegment seg, long index) {
        return (int)constants$1673.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void cControls$set(MemorySegment seg, long index, int x) {
        constants$1673.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cbmxctrl$VH() {
        return constants$1673.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD cbmxctrl;
     * }
     */
    public static int cbmxctrl$get(MemorySegment seg) {
        return (int)constants$1673.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD cbmxctrl;
     * }
     */
    public static void cbmxctrl$set(MemorySegment seg, int x) {
        constants$1673.const$5.set(seg, x);
    }
    public static int cbmxctrl$get(MemorySegment seg, long index) {
        return (int)constants$1673.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void cbmxctrl$set(MemorySegment seg, long index, int x) {
        constants$1673.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pamxctrl$VH() {
        return constants$1674.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPMIXERCONTROLA pamxctrl;
     * }
     */
    public static MemorySegment pamxctrl$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1674.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPMIXERCONTROLA pamxctrl;
     * }
     */
    public static void pamxctrl$set(MemorySegment seg, MemorySegment x) {
        constants$1674.const$0.set(seg, x);
    }
    public static MemorySegment pamxctrl$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1674.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void pamxctrl$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1674.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



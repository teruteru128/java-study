// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO {
 *     DISPLAYCONFIG_DEVICE_INFO_HEADER header;
 *     union {
 *         struct {
 *              *             UINT32 advancedColorSupported;
 *             UINT32 advancedColorEnabled;
 *             UINT32 wideColorEnforced;
 *             UINT32 advancedColorForceDisabled;
 *             UINT32 reserved;
 *         };
 *         UINT32 value;
 *     };
 *     DISPLAYCONFIG_COLOR_ENCODING colorEncoding;
 *     UINT32 bitsPerColorChannel;
 * };
 * }
 */
public class _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO {

    public static MemoryLayout $LAYOUT() {
        return constants$966.const$5;
    }
    public static MemorySegment header$slice(MemorySegment seg) {
        return seg.asSlice(0, 20);
    }
    public static VarHandle value$VH() {
        return constants$967.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * UINT32 value;
     * }
     */
    public static int value$get(MemorySegment seg) {
        return (int)constants$967.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * UINT32 value;
     * }
     */
    public static void value$set(MemorySegment seg, int x) {
        constants$967.const$0.set(seg, x);
    }
    public static int value$get(MemorySegment seg, long index) {
        return (int)constants$967.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void value$set(MemorySegment seg, long index, int x) {
        constants$967.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle colorEncoding$VH() {
        return constants$967.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DISPLAYCONFIG_COLOR_ENCODING colorEncoding;
     * }
     */
    public static int colorEncoding$get(MemorySegment seg) {
        return (int)constants$967.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DISPLAYCONFIG_COLOR_ENCODING colorEncoding;
     * }
     */
    public static void colorEncoding$set(MemorySegment seg, int x) {
        constants$967.const$1.set(seg, x);
    }
    public static int colorEncoding$get(MemorySegment seg, long index) {
        return (int)constants$967.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void colorEncoding$set(MemorySegment seg, long index, int x) {
        constants$967.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bitsPerColorChannel$VH() {
        return constants$967.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * UINT32 bitsPerColorChannel;
     * }
     */
    public static int bitsPerColorChannel$get(MemorySegment seg) {
        return (int)constants$967.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * UINT32 bitsPerColorChannel;
     * }
     */
    public static void bitsPerColorChannel$set(MemorySegment seg, int x) {
        constants$967.const$2.set(seg, x);
    }
    public static int bitsPerColorChannel$get(MemorySegment seg, long index) {
        return (int)constants$967.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void bitsPerColorChannel$set(MemorySegment seg, long index, int x) {
        constants$967.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _COMMCONFIG {
 *     DWORD dwSize;
 *     WORD wVersion;
 *     WORD wReserved;
 *     DCB dcb;
 *     DWORD dwProviderSubType;
 *     DWORD dwProviderOffset;
 *     DWORD dwProviderSize;
 *     WCHAR wcProviderData[1];
 * };
 * }
 */
public class _COMMCONFIG {

    public static MemoryLayout $LAYOUT() {
        return constants$750.const$2;
    }
    public static VarHandle dwSize$VH() {
        return constants$750.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwSize;
     * }
     */
    public static int dwSize$get(MemorySegment seg) {
        return (int)constants$750.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwSize;
     * }
     */
    public static void dwSize$set(MemorySegment seg, int x) {
        constants$750.const$3.set(seg, x);
    }
    public static int dwSize$get(MemorySegment seg, long index) {
        return (int)constants$750.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void dwSize$set(MemorySegment seg, long index, int x) {
        constants$750.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle wVersion$VH() {
        return constants$750.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD wVersion;
     * }
     */
    public static short wVersion$get(MemorySegment seg) {
        return (short)constants$750.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD wVersion;
     * }
     */
    public static void wVersion$set(MemorySegment seg, short x) {
        constants$750.const$4.set(seg, x);
    }
    public static short wVersion$get(MemorySegment seg, long index) {
        return (short)constants$750.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void wVersion$set(MemorySegment seg, long index, short x) {
        constants$750.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle wReserved$VH() {
        return constants$750.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD wReserved;
     * }
     */
    public static short wReserved$get(MemorySegment seg) {
        return (short)constants$750.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD wReserved;
     * }
     */
    public static void wReserved$set(MemorySegment seg, short x) {
        constants$750.const$5.set(seg, x);
    }
    public static short wReserved$get(MemorySegment seg, long index) {
        return (short)constants$750.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void wReserved$set(MemorySegment seg, long index, short x) {
        constants$750.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment dcb$slice(MemorySegment seg) {
        return seg.asSlice(8, 28);
    }
    public static VarHandle dwProviderSubType$VH() {
        return constants$751.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwProviderSubType;
     * }
     */
    public static int dwProviderSubType$get(MemorySegment seg) {
        return (int)constants$751.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwProviderSubType;
     * }
     */
    public static void dwProviderSubType$set(MemorySegment seg, int x) {
        constants$751.const$0.set(seg, x);
    }
    public static int dwProviderSubType$get(MemorySegment seg, long index) {
        return (int)constants$751.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void dwProviderSubType$set(MemorySegment seg, long index, int x) {
        constants$751.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwProviderOffset$VH() {
        return constants$751.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwProviderOffset;
     * }
     */
    public static int dwProviderOffset$get(MemorySegment seg) {
        return (int)constants$751.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwProviderOffset;
     * }
     */
    public static void dwProviderOffset$set(MemorySegment seg, int x) {
        constants$751.const$1.set(seg, x);
    }
    public static int dwProviderOffset$get(MemorySegment seg, long index) {
        return (int)constants$751.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void dwProviderOffset$set(MemorySegment seg, long index, int x) {
        constants$751.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwProviderSize$VH() {
        return constants$751.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwProviderSize;
     * }
     */
    public static int dwProviderSize$get(MemorySegment seg) {
        return (int)constants$751.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwProviderSize;
     * }
     */
    public static void dwProviderSize$set(MemorySegment seg, int x) {
        constants$751.const$2.set(seg, x);
    }
    public static int dwProviderSize$get(MemorySegment seg, long index) {
        return (int)constants$751.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void dwProviderSize$set(MemorySegment seg, long index, int x) {
        constants$751.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment wcProviderData$slice(MemorySegment seg) {
        return seg.asSlice(48, 2);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class Windows_h_19 extends Windows_h_18 {

    public static MethodHandle RpcNsProfileEltInqNextW$MH() {
        return RuntimeHelper.requireNonNull(constants$1815.const$4,"RpcNsProfileEltInqNextW");
    }
    /**
     * {@snippet :
     * RPC_STATUS RpcNsProfileEltInqNextW(RPC_NS_HANDLE InquiryContext, RPC_IF_ID* IfId, RPC_WSTR* MemberName, unsigned long* Priority, RPC_WSTR* Annotation);
     * }
     */
    public static int RpcNsProfileEltInqNextW(MemorySegment InquiryContext, MemorySegment IfId, MemorySegment MemberName, MemorySegment Priority, MemorySegment Annotation) {
        var mh$ = RpcNsProfileEltInqNextW$MH();
        try {
            return (int)mh$.invokeExact(InquiryContext, IfId, MemberName, Priority, Annotation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsProfileEltInqDone$MH() {
        return RuntimeHelper.requireNonNull(constants$1815.const$5,"RpcNsProfileEltInqDone");
    }
    /**
     * {@snippet :
     * RPC_STATUS RpcNsProfileEltInqDone(RPC_NS_HANDLE* InquiryContext);
     * }
     */
    public static int RpcNsProfileEltInqDone(MemorySegment InquiryContext) {
        var mh$ = RpcNsProfileEltInqDone$MH();
        try {
            return (int)mh$.invokeExact(InquiryContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsEntryObjectInqBeginA$MH() {
        return RuntimeHelper.requireNonNull(constants$1816.const$0,"RpcNsEntryObjectInqBeginA");
    }
    /**
     * {@snippet :
     * RPC_STATUS RpcNsEntryObjectInqBeginA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_NS_HANDLE* InquiryContext);
     * }
     */
    public static int RpcNsEntryObjectInqBeginA(int EntryNameSyntax, MemorySegment EntryName, MemorySegment InquiryContext) {
        var mh$ = RpcNsEntryObjectInqBeginA$MH();
        try {
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, InquiryContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsEntryObjectInqBeginW$MH() {
        return RuntimeHelper.requireNonNull(constants$1816.const$1,"RpcNsEntryObjectInqBeginW");
    }
    /**
     * {@snippet :
     * RPC_STATUS RpcNsEntryObjectInqBeginW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_NS_HANDLE* InquiryContext);
     * }
     */
    public static int RpcNsEntryObjectInqBeginW(int EntryNameSyntax, MemorySegment EntryName, MemorySegment InquiryContext) {
        var mh$ = RpcNsEntryObjectInqBeginW$MH();
        try {
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, InquiryContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsEntryObjectInqNext$MH() {
        return RuntimeHelper.requireNonNull(constants$1816.const$2,"RpcNsEntryObjectInqNext");
    }
    /**
     * {@snippet :
     * RPC_STATUS RpcNsEntryObjectInqNext(RPC_NS_HANDLE InquiryContext, UUID* ObjUuid);
     * }
     */
    public static int RpcNsEntryObjectInqNext(MemorySegment InquiryContext, MemorySegment ObjUuid) {
        var mh$ = RpcNsEntryObjectInqNext$MH();
        try {
            return (int)mh$.invokeExact(InquiryContext, ObjUuid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsEntryObjectInqDone$MH() {
        return RuntimeHelper.requireNonNull(constants$1816.const$3,"RpcNsEntryObjectInqDone");
    }
    /**
     * {@snippet :
     * RPC_STATUS RpcNsEntryObjectInqDone(RPC_NS_HANDLE* InquiryContext);
     * }
     */
    public static int RpcNsEntryObjectInqDone(MemorySegment InquiryContext) {
        var mh$ = RpcNsEntryObjectInqDone$MH();
        try {
            return (int)mh$.invokeExact(InquiryContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsEntryExpandNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$1816.const$4,"RpcNsEntryExpandNameA");
    }
    /**
     * {@snippet :
     * RPC_STATUS RpcNsEntryExpandNameA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_CSTR* ExpandedName);
     * }
     */
    public static int RpcNsEntryExpandNameA(int EntryNameSyntax, MemorySegment EntryName, MemorySegment ExpandedName) {
        var mh$ = RpcNsEntryExpandNameA$MH();
        try {
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, ExpandedName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsMgmtBindingUnexportA$MH() {
        return RuntimeHelper.requireNonNull(constants$1816.const$5,"RpcNsMgmtBindingUnexportA");
    }
    /**
     * {@snippet :
     * RPC_STATUS RpcNsMgmtBindingUnexportA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_ID* IfId, unsigned long VersOption, UUID_VECTOR* ObjectUuidVec);
     * }
     */
    public static int RpcNsMgmtBindingUnexportA(int EntryNameSyntax, MemorySegment EntryName, MemorySegment IfId, int VersOption, MemorySegment ObjectUuidVec) {
        var mh$ = RpcNsMgmtBindingUnexportA$MH();
        try {
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfId, VersOption, ObjectUuidVec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsMgmtEntryCreateA$MH() {
        return RuntimeHelper.requireNonNull(constants$1817.const$0,"RpcNsMgmtEntryCreateA");
    }
    /**
     * {@snippet :
     * RPC_STATUS RpcNsMgmtEntryCreateA(unsigned long EntryNameSyntax, RPC_CSTR EntryName);
     * }
     */
    public static int RpcNsMgmtEntryCreateA(int EntryNameSyntax, MemorySegment EntryName) {
        var mh$ = RpcNsMgmtEntryCreateA$MH();
        try {
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsMgmtEntryDeleteA$MH() {
        return RuntimeHelper.requireNonNull(constants$1817.const$1,"RpcNsMgmtEntryDeleteA");
    }
    /**
     * {@snippet :
     * RPC_STATUS RpcNsMgmtEntryDeleteA(unsigned long EntryNameSyntax, RPC_CSTR EntryName);
     * }
     */
    public static int RpcNsMgmtEntryDeleteA(int EntryNameSyntax, MemorySegment EntryName) {
        var mh$ = RpcNsMgmtEntryDeleteA$MH();
        try {
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsMgmtEntryInqIfIdsA$MH() {
        return RuntimeHelper.requireNonNull(constants$1817.const$2,"RpcNsMgmtEntryInqIfIdsA");
    }
    /**
     * {@snippet :
     * RPC_STATUS RpcNsMgmtEntryInqIfIdsA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_ID_VECTOR** IfIdVec);
     * }
     */
    public static int RpcNsMgmtEntryInqIfIdsA(int EntryNameSyntax, MemorySegment EntryName, MemorySegment IfIdVec) {
        var mh$ = RpcNsMgmtEntryInqIfIdsA$MH();
        try {
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfIdVec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsMgmtHandleSetExpAge$MH() {
        return RuntimeHelper.requireNonNull(constants$1817.const$3,"RpcNsMgmtHandleSetExpAge");
    }
    /**
     * {@snippet :
     * RPC_STATUS RpcNsMgmtHandleSetExpAge(RPC_NS_HANDLE NsHandle, unsigned long ExpirationAge);
     * }
     */
    public static int RpcNsMgmtHandleSetExpAge(MemorySegment NsHandle, int ExpirationAge) {
        var mh$ = RpcNsMgmtHandleSetExpAge$MH();
        try {
            return (int)mh$.invokeExact(NsHandle, ExpirationAge);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsMgmtInqExpAge$MH() {
        return RuntimeHelper.requireNonNull(constants$1817.const$4,"RpcNsMgmtInqExpAge");
    }
    /**
     * {@snippet :
     * RPC_STATUS RpcNsMgmtInqExpAge(unsigned long* ExpirationAge);
     * }
     */
    public static int RpcNsMgmtInqExpAge(MemorySegment ExpirationAge) {
        var mh$ = RpcNsMgmtInqExpAge$MH();
        try {
            return (int)mh$.invokeExact(ExpirationAge);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsMgmtSetExpAge$MH() {
        return RuntimeHelper.requireNonNull(constants$1817.const$5,"RpcNsMgmtSetExpAge");
    }
    /**
     * {@snippet :
     * RPC_STATUS RpcNsMgmtSetExpAge(unsigned long ExpirationAge);
     * }
     */
    public static int RpcNsMgmtSetExpAge(int ExpirationAge) {
        var mh$ = RpcNsMgmtSetExpAge$MH();
        try {
            return (int)mh$.invokeExact(ExpirationAge);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsEntryExpandNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$1818.const$0,"RpcNsEntryExpandNameW");
    }
    /**
     * {@snippet :
     * RPC_STATUS RpcNsEntryExpandNameW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_WSTR* ExpandedName);
     * }
     */
    public static int RpcNsEntryExpandNameW(int EntryNameSyntax, MemorySegment EntryName, MemorySegment ExpandedName) {
        var mh$ = RpcNsEntryExpandNameW$MH();
        try {
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, ExpandedName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsMgmtBindingUnexportW$MH() {
        return RuntimeHelper.requireNonNull(constants$1818.const$1,"RpcNsMgmtBindingUnexportW");
    }
    /**
     * {@snippet :
     * RPC_STATUS RpcNsMgmtBindingUnexportW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_ID* IfId, unsigned long VersOption, UUID_VECTOR* ObjectUuidVec);
     * }
     */
    public static int RpcNsMgmtBindingUnexportW(int EntryNameSyntax, MemorySegment EntryName, MemorySegment IfId, int VersOption, MemorySegment ObjectUuidVec) {
        var mh$ = RpcNsMgmtBindingUnexportW$MH();
        try {
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfId, VersOption, ObjectUuidVec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsMgmtEntryCreateW$MH() {
        return RuntimeHelper.requireNonNull(constants$1818.const$2,"RpcNsMgmtEntryCreateW");
    }
    /**
     * {@snippet :
     * RPC_STATUS RpcNsMgmtEntryCreateW(unsigned long EntryNameSyntax, RPC_WSTR EntryName);
     * }
     */
    public static int RpcNsMgmtEntryCreateW(int EntryNameSyntax, MemorySegment EntryName) {
        var mh$ = RpcNsMgmtEntryCreateW$MH();
        try {
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsMgmtEntryDeleteW$MH() {
        return RuntimeHelper.requireNonNull(constants$1818.const$3,"RpcNsMgmtEntryDeleteW");
    }
    /**
     * {@snippet :
     * RPC_STATUS RpcNsMgmtEntryDeleteW(unsigned long EntryNameSyntax, RPC_WSTR EntryName);
     * }
     */
    public static int RpcNsMgmtEntryDeleteW(int EntryNameSyntax, MemorySegment EntryName) {
        var mh$ = RpcNsMgmtEntryDeleteW$MH();
        try {
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsMgmtEntryInqIfIdsW$MH() {
        return RuntimeHelper.requireNonNull(constants$1818.const$4,"RpcNsMgmtEntryInqIfIdsW");
    }
    /**
     * {@snippet :
     * RPC_STATUS RpcNsMgmtEntryInqIfIdsW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_ID_VECTOR** IfIdVec);
     * }
     */
    public static int RpcNsMgmtEntryInqIfIdsW(int EntryNameSyntax, MemorySegment EntryName, MemorySegment IfIdVec) {
        var mh$ = RpcNsMgmtEntryInqIfIdsW$MH();
        try {
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfIdVec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsBindingImportBeginA$MH() {
        return RuntimeHelper.requireNonNull(constants$1818.const$5,"RpcNsBindingImportBeginA");
    }
    /**
     * {@snippet :
     * RPC_STATUS RpcNsBindingImportBeginA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID* ObjUuid, RPC_NS_HANDLE* ImportContext);
     * }
     */
    public static int RpcNsBindingImportBeginA(int EntryNameSyntax, MemorySegment EntryName, MemorySegment IfSpec, MemorySegment ObjUuid, MemorySegment ImportContext) {
        var mh$ = RpcNsBindingImportBeginA$MH();
        try {
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfSpec, ObjUuid, ImportContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsBindingImportBeginW$MH() {
        return RuntimeHelper.requireNonNull(constants$1819.const$0,"RpcNsBindingImportBeginW");
    }
    /**
     * {@snippet :
     * RPC_STATUS RpcNsBindingImportBeginW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID* ObjUuid, RPC_NS_HANDLE* ImportContext);
     * }
     */
    public static int RpcNsBindingImportBeginW(int EntryNameSyntax, MemorySegment EntryName, MemorySegment IfSpec, MemorySegment ObjUuid, MemorySegment ImportContext) {
        var mh$ = RpcNsBindingImportBeginW$MH();
        try {
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfSpec, ObjUuid, ImportContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsBindingImportNext$MH() {
        return RuntimeHelper.requireNonNull(constants$1819.const$1,"RpcNsBindingImportNext");
    }
    /**
     * {@snippet :
     * RPC_STATUS RpcNsBindingImportNext(RPC_NS_HANDLE ImportContext, RPC_BINDING_HANDLE* Binding);
     * }
     */
    public static int RpcNsBindingImportNext(MemorySegment ImportContext, MemorySegment Binding) {
        var mh$ = RpcNsBindingImportNext$MH();
        try {
            return (int)mh$.invokeExact(ImportContext, Binding);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsBindingImportDone$MH() {
        return RuntimeHelper.requireNonNull(constants$1819.const$2,"RpcNsBindingImportDone");
    }
    /**
     * {@snippet :
     * RPC_STATUS RpcNsBindingImportDone(RPC_NS_HANDLE* ImportContext);
     * }
     */
    public static int RpcNsBindingImportDone(MemorySegment ImportContext) {
        var mh$ = RpcNsBindingImportDone$MH();
        try {
            return (int)mh$.invokeExact(ImportContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsBindingSelect$MH() {
        return RuntimeHelper.requireNonNull(constants$1819.const$3,"RpcNsBindingSelect");
    }
    /**
     * {@snippet :
     * RPC_STATUS RpcNsBindingSelect(RPC_BINDING_VECTOR* BindingVec, RPC_BINDING_HANDLE* Binding);
     * }
     */
    public static int RpcNsBindingSelect(MemorySegment BindingVec, MemorySegment Binding) {
        var mh$ = RpcNsBindingSelect$MH();
        try {
            return (int)mh$.invokeExact(BindingVec, Binding);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum _RPC_NOTIFICATION_TYPES.RpcNotificationTypeNone = 0;
     * }
     */
    public static int RpcNotificationTypeNone() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum _RPC_NOTIFICATION_TYPES.RpcNotificationTypeEvent = 1;
     * }
     */
    public static int RpcNotificationTypeEvent() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum _RPC_NOTIFICATION_TYPES.RpcNotificationTypeApc = 2;
     * }
     */
    public static int RpcNotificationTypeApc() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum _RPC_NOTIFICATION_TYPES.RpcNotificationTypeIoc = 3;
     * }
     */
    public static int RpcNotificationTypeIoc() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum _RPC_NOTIFICATION_TYPES.RpcNotificationTypeHwnd = 4;
     * }
     */
    public static int RpcNotificationTypeHwnd() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum _RPC_NOTIFICATION_TYPES.RpcNotificationTypeCallback = 5;
     * }
     */
    public static int RpcNotificationTypeCallback() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum _RPC_ASYNC_EVENT.RpcCallComplete = 0;
     * }
     */
    public static int RpcCallComplete() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum _RPC_ASYNC_EVENT.RpcSendComplete = 1;
     * }
     */
    public static int RpcSendComplete() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum _RPC_ASYNC_EVENT.RpcReceiveComplete = 2;
     * }
     */
    public static int RpcReceiveComplete() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum _RPC_ASYNC_EVENT.RpcClientDisconnect = 3;
     * }
     */
    public static int RpcClientDisconnect() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum _RPC_ASYNC_EVENT.RpcClientCancel = 4;
     * }
     */
    public static int RpcClientCancel() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * typedef union _RPC_ASYNC_NOTIFICATION_INFO* PRPC_ASYNC_NOTIFICATION_INFO;
     * }
     */
    public static final AddressLayout PRPC_ASYNC_NOTIFICATION_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _RPC_ASYNC_STATE* PRPC_ASYNC_STATE;
     * }
     */
    public static final AddressLayout PRPC_ASYNC_STATE = RuntimeHelper.POINTER;
    public static MethodHandle RpcAsyncRegisterInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$1824.const$0,"RpcAsyncRegisterInfo");
    }
    /**
     * {@snippet :
     * RPC_STATUS RpcAsyncRegisterInfo(PRPC_ASYNC_STATE pAsync);
     * }
     */
    public static int RpcAsyncRegisterInfo(MemorySegment pAsync) {
        var mh$ = RpcAsyncRegisterInfo$MH();
        try {
            return (int)mh$.invokeExact(pAsync);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcAsyncInitializeHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$1824.const$1,"RpcAsyncInitializeHandle");
    }
    /**
     * {@snippet :
     * RPC_STATUS RpcAsyncInitializeHandle(PRPC_ASYNC_STATE pAsync, unsigned int Size);
     * }
     */
    public static int RpcAsyncInitializeHandle(MemorySegment pAsync, int Size) {
        var mh$ = RpcAsyncInitializeHandle$MH();
        try {
            return (int)mh$.invokeExact(pAsync, Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcAsyncGetCallStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$1824.const$2,"RpcAsyncGetCallStatus");
    }
    /**
     * {@snippet :
     * RPC_STATUS RpcAsyncGetCallStatus(PRPC_ASYNC_STATE pAsync);
     * }
     */
    public static int RpcAsyncGetCallStatus(MemorySegment pAsync) {
        var mh$ = RpcAsyncGetCallStatus$MH();
        try {
            return (int)mh$.invokeExact(pAsync);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcAsyncCompleteCall$MH() {
        return RuntimeHelper.requireNonNull(constants$1824.const$3,"RpcAsyncCompleteCall");
    }
    /**
     * {@snippet :
     * RPC_STATUS RpcAsyncCompleteCall(PRPC_ASYNC_STATE pAsync, void* Reply);
     * }
     */
    public static int RpcAsyncCompleteCall(MemorySegment pAsync, MemorySegment Reply) {
        var mh$ = RpcAsyncCompleteCall$MH();
        try {
            return (int)mh$.invokeExact(pAsync, Reply);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcAsyncAbortCall$MH() {
        return RuntimeHelper.requireNonNull(constants$1824.const$4,"RpcAsyncAbortCall");
    }
    /**
     * {@snippet :
     * RPC_STATUS RpcAsyncAbortCall(PRPC_ASYNC_STATE pAsync, unsigned long ExceptionCode);
     * }
     */
    public static int RpcAsyncAbortCall(MemorySegment pAsync, int ExceptionCode) {
        var mh$ = RpcAsyncAbortCall$MH();
        try {
            return (int)mh$.invokeExact(pAsync, ExceptionCode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcAsyncCancelCall$MH() {
        return RuntimeHelper.requireNonNull(constants$1824.const$5,"RpcAsyncCancelCall");
    }
    /**
     * {@snippet :
     * RPC_STATUS RpcAsyncCancelCall(PRPC_ASYNC_STATE pAsync, BOOL fAbort);
     * }
     */
    public static int RpcAsyncCancelCall(MemorySegment pAsync, int fAbort) {
        var mh$ = RpcAsyncCancelCall$MH();
        try {
            return (int)mh$.invokeExact(pAsync, fAbort);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum tagExtendedErrorParamTypes.eeptAnsiString = 1;
     * }
     */
    public static int eeptAnsiString() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum tagExtendedErrorParamTypes.eeptUnicodeString = 2;
     * }
     */
    public static int eeptUnicodeString() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum tagExtendedErrorParamTypes.eeptLongVal = 3;
     * }
     */
    public static int eeptLongVal() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum tagExtendedErrorParamTypes.eeptShortVal = 4;
     * }
     */
    public static int eeptShortVal() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum tagExtendedErrorParamTypes.eeptPointerVal = 5;
     * }
     */
    public static int eeptPointerVal() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum tagExtendedErrorParamTypes.eeptNone = 6;
     * }
     */
    public static int eeptNone() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum tagExtendedErrorParamTypes.eeptBinary = 7;
     * }
     */
    public static int eeptBinary() {
        return (int)7L;
    }
    public static MethodHandle RpcErrorStartEnumeration$MH() {
        return RuntimeHelper.requireNonNull(constants$1829.const$1,"RpcErrorStartEnumeration");
    }
    /**
     * {@snippet :
     * RPC_STATUS RpcErrorStartEnumeration(RPC_ERROR_ENUM_HANDLE* EnumHandle);
     * }
     */
    public static int RpcErrorStartEnumeration(MemorySegment EnumHandle) {
        var mh$ = RpcErrorStartEnumeration$MH();
        try {
            return (int)mh$.invokeExact(EnumHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcErrorGetNextRecord$MH() {
        return RuntimeHelper.requireNonNull(constants$1829.const$2,"RpcErrorGetNextRecord");
    }
    /**
     * {@snippet :
     * RPC_STATUS RpcErrorGetNextRecord(RPC_ERROR_ENUM_HANDLE* EnumHandle, BOOL CopyStrings, RPC_EXTENDED_ERROR_INFO* ErrorInfo);
     * }
     */
    public static int RpcErrorGetNextRecord(MemorySegment EnumHandle, int CopyStrings, MemorySegment ErrorInfo) {
        var mh$ = RpcErrorGetNextRecord$MH();
        try {
            return (int)mh$.invokeExact(EnumHandle, CopyStrings, ErrorInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcErrorEndEnumeration$MH() {
        return RuntimeHelper.requireNonNull(constants$1829.const$3,"RpcErrorEndEnumeration");
    }
    /**
     * {@snippet :
     * RPC_STATUS RpcErrorEndEnumeration(RPC_ERROR_ENUM_HANDLE* EnumHandle);
     * }
     */
    public static int RpcErrorEndEnumeration(MemorySegment EnumHandle) {
        var mh$ = RpcErrorEndEnumeration$MH();
        try {
            return (int)mh$.invokeExact(EnumHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcErrorResetEnumeration$MH() {
        return RuntimeHelper.requireNonNull(constants$1829.const$4,"RpcErrorResetEnumeration");
    }
    /**
     * {@snippet :
     * RPC_STATUS RpcErrorResetEnumeration(RPC_ERROR_ENUM_HANDLE* EnumHandle);
     * }
     */
    public static int RpcErrorResetEnumeration(MemorySegment EnumHandle) {
        var mh$ = RpcErrorResetEnumeration$MH();
        try {
            return (int)mh$.invokeExact(EnumHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcErrorGetNumberOfRecords$MH() {
        return RuntimeHelper.requireNonNull(constants$1829.const$5,"RpcErrorGetNumberOfRecords");
    }
    /**
     * {@snippet :
     * RPC_STATUS RpcErrorGetNumberOfRecords(RPC_ERROR_ENUM_HANDLE* EnumHandle, int* Records);
     * }
     */
    public static int RpcErrorGetNumberOfRecords(MemorySegment EnumHandle, MemorySegment Records) {
        var mh$ = RpcErrorGetNumberOfRecords$MH();
        try {
            return (int)mh$.invokeExact(EnumHandle, Records);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcErrorSaveErrorInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$1830.const$0,"RpcErrorSaveErrorInfo");
    }
    /**
     * {@snippet :
     * RPC_STATUS RpcErrorSaveErrorInfo(RPC_ERROR_ENUM_HANDLE* EnumHandle, PVOID* ErrorBlob, size_t* BlobSize);
     * }
     */
    public static int RpcErrorSaveErrorInfo(MemorySegment EnumHandle, MemorySegment ErrorBlob, MemorySegment BlobSize) {
        var mh$ = RpcErrorSaveErrorInfo$MH();
        try {
            return (int)mh$.invokeExact(EnumHandle, ErrorBlob, BlobSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcErrorLoadErrorInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$1830.const$1,"RpcErrorLoadErrorInfo");
    }
    /**
     * {@snippet :
     * RPC_STATUS RpcErrorLoadErrorInfo(PVOID ErrorBlob, size_t BlobSize, RPC_ERROR_ENUM_HANDLE* EnumHandle);
     * }
     */
    public static int RpcErrorLoadErrorInfo(MemorySegment ErrorBlob, long BlobSize, MemorySegment EnumHandle) {
        var mh$ = RpcErrorLoadErrorInfo$MH();
        try {
            return (int)mh$.invokeExact(ErrorBlob, BlobSize, EnumHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcErrorAddRecord$MH() {
        return RuntimeHelper.requireNonNull(constants$1830.const$2,"RpcErrorAddRecord");
    }
    /**
     * {@snippet :
     * RPC_STATUS RpcErrorAddRecord(RPC_EXTENDED_ERROR_INFO* ErrorInfo);
     * }
     */
    public static int RpcErrorAddRecord(MemorySegment ErrorInfo) {
        var mh$ = RpcErrorAddRecord$MH();
        try {
            return (int)mh$.invokeExact(ErrorInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcErrorClearInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$1830.const$3,"RpcErrorClearInformation");
    }
    /**
     * {@snippet :
     * void RpcErrorClearInformation();
     * }
     */
    public static void RpcErrorClearInformation() {
        var mh$ = RpcErrorClearInformation$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcAsyncCleanupThread$MH() {
        return RuntimeHelper.requireNonNull(constants$1830.const$4,"RpcAsyncCleanupThread");
    }
    /**
     * {@snippet :
     * RPC_STATUS RpcAsyncCleanupThread(DWORD dwTimeout);
     * }
     */
    public static int RpcAsyncCleanupThread(int dwTimeout) {
        var mh$ = RpcAsyncCleanupThread$MH();
        try {
            return (int)mh$.invokeExact(dwTimeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcGetAuthorizationContextForClient$MH() {
        return RuntimeHelper.requireNonNull(constants$1830.const$6,"RpcGetAuthorizationContextForClient");
    }
    /**
     * {@snippet :
     * RPC_STATUS RpcGetAuthorizationContextForClient(RPC_BINDING_HANDLE ClientBinding, BOOL ImpersonateOnReturn, PVOID Reserved1, PLARGE_INTEGER pExpirationTime, LUID Reserved2, DWORD Reserved3, PVOID Reserved4, PVOID* pAuthzClientContext);
     * }
     */
    public static int RpcGetAuthorizationContextForClient(MemorySegment ClientBinding, int ImpersonateOnReturn, MemorySegment Reserved1, MemorySegment pExpirationTime, MemorySegment Reserved2, int Reserved3, MemorySegment Reserved4, MemorySegment pAuthzClientContext) {
        var mh$ = RpcGetAuthorizationContextForClient$MH();
        try {
            return (int)mh$.invokeExact(ClientBinding, ImpersonateOnReturn, Reserved1, pExpirationTime, Reserved2, Reserved3, Reserved4, pAuthzClientContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcFreeAuthorizationContext$MH() {
        return RuntimeHelper.requireNonNull(constants$1831.const$0,"RpcFreeAuthorizationContext");
    }
    /**
     * {@snippet :
     * RPC_STATUS RpcFreeAuthorizationContext(PVOID* pAuthzClientContext);
     * }
     */
    public static int RpcFreeAuthorizationContext(MemorySegment pAuthzClientContext) {
        var mh$ = RpcFreeAuthorizationContext$MH();
        try {
            return (int)mh$.invokeExact(pAuthzClientContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSsContextLockExclusive$MH() {
        return RuntimeHelper.requireNonNull(constants$1831.const$1,"RpcSsContextLockExclusive");
    }
    /**
     * {@snippet :
     * RPC_STATUS RpcSsContextLockExclusive(RPC_BINDING_HANDLE ServerBindingHandle, PVOID UserContext);
     * }
     */
    public static int RpcSsContextLockExclusive(MemorySegment ServerBindingHandle, MemorySegment UserContext) {
        var mh$ = RpcSsContextLockExclusive$MH();
        try {
            return (int)mh$.invokeExact(ServerBindingHandle, UserContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSsContextLockShared$MH() {
        return RuntimeHelper.requireNonNull(constants$1831.const$2,"RpcSsContextLockShared");
    }
    /**
     * {@snippet :
     * RPC_STATUS RpcSsContextLockShared(RPC_BINDING_HANDLE ServerBindingHandle, PVOID UserContext);
     * }
     */
    public static int RpcSsContextLockShared(MemorySegment ServerBindingHandle, MemorySegment UserContext) {
        var mh$ = RpcSsContextLockShared$MH();
        try {
            return (int)mh$.invokeExact(ServerBindingHandle, UserContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum tagRpcLocalAddressFormat.rlafInvalid = 0;
     * }
     */
    public static int rlafInvalid() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum tagRpcLocalAddressFormat.rlafIPv4 = 1;
     * }
     */
    public static int rlafIPv4() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum tagRpcLocalAddressFormat.rlafIPv6 = 2;
     * }
     */
    public static int rlafIPv6() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * typedef struct _RPC_CALL_LOCAL_ADDRESS_V1* PRPC_CALL_LOCAL_ADDRESS_V1;
     * }
     */
    public static final AddressLayout PRPC_CALL_LOCAL_ADDRESS_V1 = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * enum tagRpcCallType.rctInvalid = 0;
     * }
     */
    public static int rctInvalid() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum tagRpcCallType.rctNormal = 1;
     * }
     */
    public static int rctNormal() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum tagRpcCallType.rctTraining = 2;
     * }
     */
    public static int rctTraining() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum tagRpcCallType.rctGuaranteed = 3;
     * }
     */
    public static int rctGuaranteed() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum tagRpcCallClientLocality.rcclInvalid = 0;
     * }
     */
    public static int rcclInvalid() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum tagRpcCallClientLocality.rcclLocal = 1;
     * }
     */
    public static int rcclLocal() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum tagRpcCallClientLocality.rcclRemote = 2;
     * }
     */
    public static int rcclRemote() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum tagRpcCallClientLocality.rcclClientUnknownLocality = 3;
     * }
     */
    public static int rcclClientUnknownLocality() {
        return (int)3L;
    }
    public static MethodHandle RpcServerInqCallAttributesW$MH() {
        return RuntimeHelper.requireNonNull(constants$1848.const$2,"RpcServerInqCallAttributesW");
    }
    /**
     * {@snippet :
     * RPC_STATUS RpcServerInqCallAttributesW(RPC_BINDING_HANDLE ClientBinding, void* RpcCallAttributes);
     * }
     */
    public static int RpcServerInqCallAttributesW(MemorySegment ClientBinding, MemorySegment RpcCallAttributes) {
        var mh$ = RpcServerInqCallAttributesW$MH();
        try {
            return (int)mh$.invokeExact(ClientBinding, RpcCallAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcServerInqCallAttributesA$MH() {
        return RuntimeHelper.requireNonNull(constants$1848.const$3,"RpcServerInqCallAttributesA");
    }
    /**
     * {@snippet :
     * RPC_STATUS RpcServerInqCallAttributesA(RPC_BINDING_HANDLE ClientBinding, void* RpcCallAttributes);
     * }
     */
    public static int RpcServerInqCallAttributesA(MemorySegment ClientBinding, MemorySegment RpcCallAttributes) {
        var mh$ = RpcServerInqCallAttributesA$MH();
        try {
            return (int)mh$.invokeExact(ClientBinding, RpcCallAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum _RPC_NOTIFICATIONS.RpcNotificationCallNone = 0;
     * }
     */
    public static int RpcNotificationCallNone() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum _RPC_NOTIFICATIONS.RpcNotificationClientDisconnect = 1;
     * }
     */
    public static int RpcNotificationClientDisconnect() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum _RPC_NOTIFICATIONS.RpcNotificationCallCancel = 2;
     * }
     */
    public static int RpcNotificationCallCancel() {
        return (int)2L;
    }
    public static MethodHandle RpcServerSubscribeForNotification$MH() {
        return RuntimeHelper.requireNonNull(constants$1848.const$4,"RpcServerSubscribeForNotification");
    }
    /**
     * {@snippet :
     * RPC_STATUS RpcServerSubscribeForNotification(RPC_BINDING_HANDLE Binding, RPC_NOTIFICATIONS Notification, RPC_NOTIFICATION_TYPES NotificationType, RPC_ASYNC_NOTIFICATION_INFO* NotificationInfo);
     * }
     */
    public static int RpcServerSubscribeForNotification(MemorySegment Binding, int Notification, int NotificationType, MemorySegment NotificationInfo) {
        var mh$ = RpcServerSubscribeForNotification$MH();
        try {
            return (int)mh$.invokeExact(Binding, Notification, NotificationType, NotificationInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcServerUnsubscribeForNotification$MH() {
        return RuntimeHelper.requireNonNull(constants$1848.const$5,"RpcServerUnsubscribeForNotification");
    }
    /**
     * {@snippet :
     * RPC_STATUS RpcServerUnsubscribeForNotification(RPC_BINDING_HANDLE Binding, RPC_NOTIFICATIONS Notification, unsigned long* NotificationsQueued);
     * }
     */
    public static int RpcServerUnsubscribeForNotification(MemorySegment Binding, int Notification, MemorySegment NotificationsQueued) {
        var mh$ = RpcServerUnsubscribeForNotification$MH();
        try {
            return (int)mh$.invokeExact(Binding, Notification, NotificationsQueued);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcBindingBind$MH() {
        return RuntimeHelper.requireNonNull(constants$1849.const$0,"RpcBindingBind");
    }
    /**
     * {@snippet :
     * RPC_STATUS RpcBindingBind(PRPC_ASYNC_STATE pAsync, RPC_BINDING_HANDLE Binding, RPC_IF_HANDLE IfSpec);
     * }
     */
    public static int RpcBindingBind(MemorySegment pAsync, MemorySegment Binding, MemorySegment IfSpec) {
        var mh$ = RpcBindingBind$MH();
        try {
            return (int)mh$.invokeExact(pAsync, Binding, IfSpec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcBindingUnbind$MH() {
        return RuntimeHelper.requireNonNull(constants$1849.const$1,"RpcBindingUnbind");
    }
    /**
     * {@snippet :
     * RPC_STATUS RpcBindingUnbind(RPC_BINDING_HANDLE Binding);
     * }
     */
    public static int RpcBindingUnbind(MemorySegment Binding) {
        var mh$ = RpcBindingUnbind$MH();
        try {
            return (int)mh$.invokeExact(Binding);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcAsyncSetHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$1849.const$2,"I_RpcAsyncSetHandle");
    }
    /**
     * {@snippet :
     * RPC_STATUS I_RpcAsyncSetHandle(PRPC_MESSAGE Message, PRPC_ASYNC_STATE pAsync);
     * }
     */
    public static int I_RpcAsyncSetHandle(MemorySegment Message, MemorySegment pAsync) {
        var mh$ = I_RpcAsyncSetHandle$MH();
        try {
            return (int)mh$.invokeExact(Message, pAsync);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcAsyncAbortCall$MH() {
        return RuntimeHelper.requireNonNull(constants$1849.const$3,"I_RpcAsyncAbortCall");
    }
    /**
     * {@snippet :
     * RPC_STATUS I_RpcAsyncAbortCall(PRPC_ASYNC_STATE pAsync, unsigned long ExceptionCode);
     * }
     */
    public static int I_RpcAsyncAbortCall(MemorySegment pAsync, int ExceptionCode) {
        var mh$ = I_RpcAsyncAbortCall$MH();
        try {
            return (int)mh$.invokeExact(pAsync, ExceptionCode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcExceptionFilter$MH() {
        return RuntimeHelper.requireNonNull(constants$1849.const$4,"I_RpcExceptionFilter");
    }
    /**
     * {@snippet :
     * int I_RpcExceptionFilter(unsigned long ExceptionCode);
     * }
     */
    public static int I_RpcExceptionFilter(int ExceptionCode) {
        var mh$ = I_RpcExceptionFilter$MH();
        try {
            return (int)mh$.invokeExact(ExceptionCode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcBindingInqClientTokenAttributes$MH() {
        return RuntimeHelper.requireNonNull(constants$1849.const$5,"I_RpcBindingInqClientTokenAttributes");
    }
    /**
     * {@snippet :
     * RPC_STATUS I_RpcBindingInqClientTokenAttributes(RPC_BINDING_HANDLE Binding, LUID* TokenId, LUID* AuthenticationId, LUID* ModifiedId);
     * }
     */
    public static int I_RpcBindingInqClientTokenAttributes(MemorySegment Binding, MemorySegment TokenId, MemorySegment AuthenticationId, MemorySegment ModifiedId) {
        var mh$ = I_RpcBindingInqClientTokenAttributes$MH();
        try {
            return (int)mh$.invokeExact(Binding, TokenId, AuthenticationId, ModifiedId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CommandLineToArgvW$MH() {
        return RuntimeHelper.requireNonNull(constants$1850.const$0,"CommandLineToArgvW");
    }
    /**
     * {@snippet :
     * LPWSTR* CommandLineToArgvW(LPCWSTR lpCmdLine, int* pNumArgs);
     * }
     */
    public static MemorySegment CommandLineToArgvW(MemorySegment lpCmdLine, MemorySegment pNumArgs) {
        var mh$ = CommandLineToArgvW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpCmdLine, pNumArgs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct HDROP__* HDROP;
     * }
     */
    public static final AddressLayout HDROP = RuntimeHelper.POINTER;
    public static MethodHandle DragQueryFileA$MH() {
        return RuntimeHelper.requireNonNull(constants$1850.const$3,"DragQueryFileA");
    }
    /**
     * {@snippet :
     * UINT DragQueryFileA(HDROP hDrop, UINT iFile, LPSTR lpszFile, UINT cch);
     * }
     */
    public static int DragQueryFileA(MemorySegment hDrop, int iFile, MemorySegment lpszFile, int cch) {
        var mh$ = DragQueryFileA$MH();
        try {
            return (int)mh$.invokeExact(hDrop, iFile, lpszFile, cch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DragQueryFileW$MH() {
        return RuntimeHelper.requireNonNull(constants$1850.const$4,"DragQueryFileW");
    }
    /**
     * {@snippet :
     * UINT DragQueryFileW(HDROP hDrop, UINT iFile, LPWSTR lpszFile, UINT cch);
     * }
     */
    public static int DragQueryFileW(MemorySegment hDrop, int iFile, MemorySegment lpszFile, int cch) {
        var mh$ = DragQueryFileW$MH();
        try {
            return (int)mh$.invokeExact(hDrop, iFile, lpszFile, cch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DragQueryPoint$MH() {
        return RuntimeHelper.requireNonNull(constants$1850.const$5,"DragQueryPoint");
    }
    /**
     * {@snippet :
     * BOOL DragQueryPoint(HDROP hDrop, POINT* ppt);
     * }
     */
    public static int DragQueryPoint(MemorySegment hDrop, MemorySegment ppt) {
        var mh$ = DragQueryPoint$MH();
        try {
            return (int)mh$.invokeExact(hDrop, ppt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DragFinish$MH() {
        return RuntimeHelper.requireNonNull(constants$1851.const$0,"DragFinish");
    }
    /**
     * {@snippet :
     * void DragFinish(HDROP hDrop);
     * }
     */
    public static void DragFinish(MemorySegment hDrop) {
        var mh$ = DragFinish$MH();
        try {
            mh$.invokeExact(hDrop);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DragAcceptFiles$MH() {
        return RuntimeHelper.requireNonNull(constants$1851.const$1,"DragAcceptFiles");
    }
    /**
     * {@snippet :
     * void DragAcceptFiles(HWND hWnd, BOOL fAccept);
     * }
     */
    public static void DragAcceptFiles(MemorySegment hWnd, int fAccept) {
        var mh$ = DragAcceptFiles$MH();
        try {
            mh$.invokeExact(hWnd, fAccept);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ShellExecuteA$MH() {
        return RuntimeHelper.requireNonNull(constants$1851.const$3,"ShellExecuteA");
    }
    /**
     * {@snippet :
     * HINSTANCE ShellExecuteA(HWND hwnd, LPCSTR lpOperation, LPCSTR lpFile, LPCSTR lpParameters, LPCSTR lpDirectory, INT nShowCmd);
     * }
     */
    public static MemorySegment ShellExecuteA(MemorySegment hwnd, MemorySegment lpOperation, MemorySegment lpFile, MemorySegment lpParameters, MemorySegment lpDirectory, int nShowCmd) {
        var mh$ = ShellExecuteA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hwnd, lpOperation, lpFile, lpParameters, lpDirectory, nShowCmd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ShellExecuteW$MH() {
        return RuntimeHelper.requireNonNull(constants$1851.const$4,"ShellExecuteW");
    }
    /**
     * {@snippet :
     * HINSTANCE ShellExecuteW(HWND hwnd, LPCWSTR lpOperation, LPCWSTR lpFile, LPCWSTR lpParameters, LPCWSTR lpDirectory, INT nShowCmd);
     * }
     */
    public static MemorySegment ShellExecuteW(MemorySegment hwnd, MemorySegment lpOperation, MemorySegment lpFile, MemorySegment lpParameters, MemorySegment lpDirectory, int nShowCmd) {
        var mh$ = ShellExecuteW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hwnd, lpOperation, lpFile, lpParameters, lpDirectory, nShowCmd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindExecutableA$MH() {
        return RuntimeHelper.requireNonNull(constants$1851.const$5,"FindExecutableA");
    }
    /**
     * {@snippet :
     * HINSTANCE FindExecutableA(LPCSTR lpFile, LPCSTR lpDirectory, LPSTR lpResult);
     * }
     */
    public static MemorySegment FindExecutableA(MemorySegment lpFile, MemorySegment lpDirectory, MemorySegment lpResult) {
        var mh$ = FindExecutableA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpFile, lpDirectory, lpResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindExecutableW$MH() {
        return RuntimeHelper.requireNonNull(constants$1852.const$0,"FindExecutableW");
    }
    /**
     * {@snippet :
     * HINSTANCE FindExecutableW(LPCWSTR lpFile, LPCWSTR lpDirectory, LPWSTR lpResult);
     * }
     */
    public static MemorySegment FindExecutableW(MemorySegment lpFile, MemorySegment lpDirectory, MemorySegment lpResult) {
        var mh$ = FindExecutableW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpFile, lpDirectory, lpResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ShellAboutA$MH() {
        return RuntimeHelper.requireNonNull(constants$1852.const$1,"ShellAboutA");
    }
    /**
     * {@snippet :
     * INT ShellAboutA(HWND hWnd, LPCSTR szApp, LPCSTR szOtherStuff, HICON hIcon);
     * }
     */
    public static int ShellAboutA(MemorySegment hWnd, MemorySegment szApp, MemorySegment szOtherStuff, MemorySegment hIcon) {
        var mh$ = ShellAboutA$MH();
        try {
            return (int)mh$.invokeExact(hWnd, szApp, szOtherStuff, hIcon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ShellAboutW$MH() {
        return RuntimeHelper.requireNonNull(constants$1852.const$2,"ShellAboutW");
    }
    /**
     * {@snippet :
     * INT ShellAboutW(HWND hWnd, LPCWSTR szApp, LPCWSTR szOtherStuff, HICON hIcon);
     * }
     */
    public static int ShellAboutW(MemorySegment hWnd, MemorySegment szApp, MemorySegment szOtherStuff, MemorySegment hIcon) {
        var mh$ = ShellAboutW$MH();
        try {
            return (int)mh$.invokeExact(hWnd, szApp, szOtherStuff, hIcon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DuplicateIcon$MH() {
        return RuntimeHelper.requireNonNull(constants$1852.const$3,"DuplicateIcon");
    }
    /**
     * {@snippet :
     * HICON DuplicateIcon(HINSTANCE hInst, HICON hIcon);
     * }
     */
    public static MemorySegment DuplicateIcon(MemorySegment hInst, MemorySegment hIcon) {
        var mh$ = DuplicateIcon$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hInst, hIcon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExtractAssociatedIconA$MH() {
        return RuntimeHelper.requireNonNull(constants$1852.const$4,"ExtractAssociatedIconA");
    }
    /**
     * {@snippet :
     * HICON ExtractAssociatedIconA(HINSTANCE hInst, LPSTR pszIconPath, WORD* piIcon);
     * }
     */
    public static MemorySegment ExtractAssociatedIconA(MemorySegment hInst, MemorySegment pszIconPath, MemorySegment piIcon) {
        var mh$ = ExtractAssociatedIconA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hInst, pszIconPath, piIcon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExtractAssociatedIconW$MH() {
        return RuntimeHelper.requireNonNull(constants$1852.const$5,"ExtractAssociatedIconW");
    }
    /**
     * {@snippet :
     * HICON ExtractAssociatedIconW(HINSTANCE hInst, LPWSTR pszIconPath, WORD* piIcon);
     * }
     */
    public static MemorySegment ExtractAssociatedIconW(MemorySegment hInst, MemorySegment pszIconPath, MemorySegment piIcon) {
        var mh$ = ExtractAssociatedIconW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hInst, pszIconPath, piIcon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExtractAssociatedIconExA$MH() {
        return RuntimeHelper.requireNonNull(constants$1853.const$0,"ExtractAssociatedIconExA");
    }
    /**
     * {@snippet :
     * HICON ExtractAssociatedIconExA(HINSTANCE hInst, LPSTR pszIconPath, WORD* piIconIndex, WORD* piIconId);
     * }
     */
    public static MemorySegment ExtractAssociatedIconExA(MemorySegment hInst, MemorySegment pszIconPath, MemorySegment piIconIndex, MemorySegment piIconId) {
        var mh$ = ExtractAssociatedIconExA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hInst, pszIconPath, piIconIndex, piIconId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExtractAssociatedIconExW$MH() {
        return RuntimeHelper.requireNonNull(constants$1853.const$1,"ExtractAssociatedIconExW");
    }
    /**
     * {@snippet :
     * HICON ExtractAssociatedIconExW(HINSTANCE hInst, LPWSTR pszIconPath, WORD* piIconIndex, WORD* piIconId);
     * }
     */
    public static MemorySegment ExtractAssociatedIconExW(MemorySegment hInst, MemorySegment pszIconPath, MemorySegment piIconIndex, MemorySegment piIconId) {
        var mh$ = ExtractAssociatedIconExW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hInst, pszIconPath, piIconIndex, piIconId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExtractIconA$MH() {
        return RuntimeHelper.requireNonNull(constants$1853.const$2,"ExtractIconA");
    }
    /**
     * {@snippet :
     * HICON ExtractIconA(HINSTANCE hInst, LPCSTR pszExeFileName, UINT nIconIndex);
     * }
     */
    public static MemorySegment ExtractIconA(MemorySegment hInst, MemorySegment pszExeFileName, int nIconIndex) {
        var mh$ = ExtractIconA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hInst, pszExeFileName, nIconIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExtractIconW$MH() {
        return RuntimeHelper.requireNonNull(constants$1853.const$3,"ExtractIconW");
    }
    /**
     * {@snippet :
     * HICON ExtractIconW(HINSTANCE hInst, LPCWSTR pszExeFileName, UINT nIconIndex);
     * }
     */
    public static MemorySegment ExtractIconW(MemorySegment hInst, MemorySegment pszExeFileName, int nIconIndex) {
        var mh$ = ExtractIconW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hInst, pszExeFileName, nIconIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _DRAGINFOA* LPDRAGINFOA;
     * }
     */
    public static final AddressLayout LPDRAGINFOA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _DRAGINFOW* LPDRAGINFOW;
     * }
     */
    public static final AddressLayout LPDRAGINFOW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _DRAGINFOA* LPDRAGINFO;
     * }
     */
    public static final AddressLayout LPDRAGINFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _AppBarData* PAPPBARDATA;
     * }
     */
    public static final AddressLayout PAPPBARDATA = RuntimeHelper.POINTER;
    public static MethodHandle SHAppBarMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$1856.const$3,"SHAppBarMessage");
    }
    /**
     * {@snippet :
     * UINT_PTR SHAppBarMessage(DWORD dwMessage, PAPPBARDATA pData);
     * }
     */
    public static long SHAppBarMessage(int dwMessage, MemorySegment pData) {
        var mh$ = SHAppBarMessage$MH();
        try {
            return (long)mh$.invokeExact(dwMessage, pData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DoEnvironmentSubstA$MH() {
        return RuntimeHelper.requireNonNull(constants$1856.const$4,"DoEnvironmentSubstA");
    }
    /**
     * {@snippet :
     * DWORD DoEnvironmentSubstA(LPSTR pszSrc, UINT cchSrc);
     * }
     */
    public static int DoEnvironmentSubstA(MemorySegment pszSrc, int cchSrc) {
        var mh$ = DoEnvironmentSubstA$MH();
        try {
            return (int)mh$.invokeExact(pszSrc, cchSrc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DoEnvironmentSubstW$MH() {
        return RuntimeHelper.requireNonNull(constants$1856.const$5,"DoEnvironmentSubstW");
    }
    /**
     * {@snippet :
     * DWORD DoEnvironmentSubstW(LPWSTR pszSrc, UINT cchSrc);
     * }
     */
    public static int DoEnvironmentSubstW(MemorySegment pszSrc, int cchSrc) {
        var mh$ = DoEnvironmentSubstW$MH();
        try {
            return (int)mh$.invokeExact(pszSrc, cchSrc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExtractIconExA$MH() {
        return RuntimeHelper.requireNonNull(constants$1857.const$0,"ExtractIconExA");
    }
    /**
     * {@snippet :
     * UINT ExtractIconExA(LPCSTR lpszFile, int nIconIndex, HICON* phiconLarge, HICON* phiconSmall, UINT nIcons);
     * }
     */
    public static int ExtractIconExA(MemorySegment lpszFile, int nIconIndex, MemorySegment phiconLarge, MemorySegment phiconSmall, int nIcons) {
        var mh$ = ExtractIconExA$MH();
        try {
            return (int)mh$.invokeExact(lpszFile, nIconIndex, phiconLarge, phiconSmall, nIcons);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExtractIconExW$MH() {
        return RuntimeHelper.requireNonNull(constants$1857.const$1,"ExtractIconExW");
    }
    /**
     * {@snippet :
     * UINT ExtractIconExW(LPCWSTR lpszFile, int nIconIndex, HICON* phiconLarge, HICON* phiconSmall, UINT nIcons);
     * }
     */
    public static int ExtractIconExW(MemorySegment lpszFile, int nIconIndex, MemorySegment phiconLarge, MemorySegment phiconSmall, int nIcons) {
        var mh$ = ExtractIconExW$MH();
        try {
            return (int)mh$.invokeExact(lpszFile, nIconIndex, phiconLarge, phiconSmall, nIcons);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned short FILEOP_FLAGS;
     * }
     */
    public static final OfShort FILEOP_FLAGS = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned short PRINTEROP_FLAGS;
     * }
     */
    public static final OfShort PRINTEROP_FLAGS = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef struct _SHFILEOPSTRUCTA* LPSHFILEOPSTRUCTA;
     * }
     */
    public static final AddressLayout LPSHFILEOPSTRUCTA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _SHFILEOPSTRUCTW* LPSHFILEOPSTRUCTW;
     * }
     */
    public static final AddressLayout LPSHFILEOPSTRUCTW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _SHFILEOPSTRUCTA* LPSHFILEOPSTRUCT;
     * }
     */
    public static final AddressLayout LPSHFILEOPSTRUCT = RuntimeHelper.POINTER;
    public static MethodHandle SHFileOperationA$MH() {
        return RuntimeHelper.requireNonNull(constants$1860.const$2,"SHFileOperationA");
    }
    /**
     * {@snippet :
     * int SHFileOperationA(LPSHFILEOPSTRUCTA lpFileOp);
     * }
     */
    public static int SHFileOperationA(MemorySegment lpFileOp) {
        var mh$ = SHFileOperationA$MH();
        try {
            return (int)mh$.invokeExact(lpFileOp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHFileOperationW$MH() {
        return RuntimeHelper.requireNonNull(constants$1860.const$3,"SHFileOperationW");
    }
    /**
     * {@snippet :
     * int SHFileOperationW(LPSHFILEOPSTRUCTW lpFileOp);
     * }
     */
    public static int SHFileOperationW(MemorySegment lpFileOp) {
        var mh$ = SHFileOperationW$MH();
        try {
            return (int)mh$.invokeExact(lpFileOp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHFreeNameMappings$MH() {
        return RuntimeHelper.requireNonNull(constants$1860.const$4,"SHFreeNameMappings");
    }
    /**
     * {@snippet :
     * void SHFreeNameMappings(HANDLE hNameMappings);
     * }
     */
    public static void SHFreeNameMappings(MemorySegment hNameMappings) {
        var mh$ = SHFreeNameMappings$MH();
        try {
            mh$.invokeExact(hNameMappings);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _SHNAMEMAPPINGA* LPSHNAMEMAPPINGA;
     * }
     */
    public static final AddressLayout LPSHNAMEMAPPINGA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _SHNAMEMAPPINGW* LPSHNAMEMAPPINGW;
     * }
     */
    public static final AddressLayout LPSHNAMEMAPPINGW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _SHNAMEMAPPINGA* LPSHNAMEMAPPING;
     * }
     */
    public static final AddressLayout LPSHNAMEMAPPING = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _SHELLEXECUTEINFOA* LPSHELLEXECUTEINFOA;
     * }
     */
    public static final AddressLayout LPSHELLEXECUTEINFOA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _SHELLEXECUTEINFOW* LPSHELLEXECUTEINFOW;
     * }
     */
    public static final AddressLayout LPSHELLEXECUTEINFOW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _SHELLEXECUTEINFOA* LPSHELLEXECUTEINFO;
     * }
     */
    public static final AddressLayout LPSHELLEXECUTEINFO = RuntimeHelper.POINTER;
    public static MethodHandle ShellExecuteExA$MH() {
        return RuntimeHelper.requireNonNull(constants$1868.const$1,"ShellExecuteExA");
    }
    /**
     * {@snippet :
     * BOOL ShellExecuteExA(SHELLEXECUTEINFOA* pExecInfo);
     * }
     */
    public static int ShellExecuteExA(MemorySegment pExecInfo) {
        var mh$ = ShellExecuteExA$MH();
        try {
            return (int)mh$.invokeExact(pExecInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ShellExecuteExW$MH() {
        return RuntimeHelper.requireNonNull(constants$1868.const$2,"ShellExecuteExW");
    }
    /**
     * {@snippet :
     * BOOL ShellExecuteExW(SHELLEXECUTEINFOW* pExecInfo);
     * }
     */
    public static int ShellExecuteExW(MemorySegment pExecInfo) {
        var mh$ = ShellExecuteExW$MH();
        try {
            return (int)mh$.invokeExact(pExecInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _SHCREATEPROCESSINFOW* PSHCREATEPROCESSINFOW;
     * }
     */
    public static final AddressLayout PSHCREATEPROCESSINFOW = RuntimeHelper.POINTER;
    public static MethodHandle SHCreateProcessAsUserW$MH() {
        return RuntimeHelper.requireNonNull(constants$1870.const$5,"SHCreateProcessAsUserW");
    }
    /**
     * {@snippet :
     * BOOL SHCreateProcessAsUserW(PSHCREATEPROCESSINFOW pscpi);
     * }
     */
    public static int SHCreateProcessAsUserW(MemorySegment pscpi) {
        var mh$ = SHCreateProcessAsUserW$MH();
        try {
            return (int)mh$.invokeExact(pscpi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHEvaluateSystemCommandTemplate$MH() {
        return RuntimeHelper.requireNonNull(constants$1871.const$0,"SHEvaluateSystemCommandTemplate");
    }
    /**
     * {@snippet :
     * HRESULT SHEvaluateSystemCommandTemplate(PCWSTR pszCmdTemplate, PWSTR* ppszApplication, PWSTR* ppszCommandLine, PWSTR* ppszParameters);
     * }
     */
    public static int SHEvaluateSystemCommandTemplate(MemorySegment pszCmdTemplate, MemorySegment ppszApplication, MemorySegment ppszCommandLine, MemorySegment ppszParameters) {
        var mh$ = SHEvaluateSystemCommandTemplate$MH();
        try {
            return (int)mh$.invokeExact(pszCmdTemplate, ppszApplication, ppszCommandLine, ppszParameters);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum ASSOCCLASS.ASSOCCLASS_SHELL_KEY = 0;
     * }
     */
    public static int ASSOCCLASS_SHELL_KEY() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum ASSOCCLASS.ASSOCCLASS_PROGID_KEY = 1;
     * }
     */
    public static int ASSOCCLASS_PROGID_KEY() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum ASSOCCLASS.ASSOCCLASS_PROGID_STR = 2;
     * }
     */
    public static int ASSOCCLASS_PROGID_STR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum ASSOCCLASS.ASSOCCLASS_CLSID_KEY = 3;
     * }
     */
    public static int ASSOCCLASS_CLSID_KEY() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum ASSOCCLASS.ASSOCCLASS_CLSID_STR = 4;
     * }
     */
    public static int ASSOCCLASS_CLSID_STR() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum ASSOCCLASS.ASSOCCLASS_APP_KEY = 5;
     * }
     */
    public static int ASSOCCLASS_APP_KEY() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum ASSOCCLASS.ASSOCCLASS_APP_STR = 6;
     * }
     */
    public static int ASSOCCLASS_APP_STR() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum ASSOCCLASS.ASSOCCLASS_SYSTEM_STR = 7;
     * }
     */
    public static int ASSOCCLASS_SYSTEM_STR() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum ASSOCCLASS.ASSOCCLASS_FOLDER = 8;
     * }
     */
    public static int ASSOCCLASS_FOLDER() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum ASSOCCLASS.ASSOCCLASS_STAR = 9;
     * }
     */
    public static int ASSOCCLASS_STAR() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum ASSOCCLASS.ASSOCCLASS_FIXED_PROGID_STR = 10;
     * }
     */
    public static int ASSOCCLASS_FIXED_PROGID_STR() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum ASSOCCLASS.ASSOCCLASS_PROTOCOL_STR = 11;
     * }
     */
    public static int ASSOCCLASS_PROTOCOL_STR() {
        return (int)11L;
    }
    public static MethodHandle AssocCreateForClasses$MH() {
        return RuntimeHelper.requireNonNull(constants$1871.const$5,"AssocCreateForClasses");
    }
    /**
     * {@snippet :
     * HRESULT AssocCreateForClasses(const ASSOCIATIONELEMENT* rgClasses, ULONG cClasses, const IID* riid, void** ppv);
     * }
     */
    public static int AssocCreateForClasses(MemorySegment rgClasses, int cClasses, MemorySegment riid, MemorySegment ppv) {
        var mh$ = AssocCreateForClasses$MH();
        try {
            return (int)mh$.invokeExact(rgClasses, cClasses, riid, ppv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _SHQUERYRBINFO* LPSHQUERYRBINFO;
     * }
     */
    public static final AddressLayout LPSHQUERYRBINFO = RuntimeHelper.POINTER;
    public static MethodHandle SHQueryRecycleBinA$MH() {
        return RuntimeHelper.requireNonNull(constants$1872.const$4,"SHQueryRecycleBinA");
    }
    /**
     * {@snippet :
     * HRESULT SHQueryRecycleBinA(LPCSTR pszRootPath, LPSHQUERYRBINFO pSHQueryRBInfo);
     * }
     */
    public static int SHQueryRecycleBinA(MemorySegment pszRootPath, MemorySegment pSHQueryRBInfo) {
        var mh$ = SHQueryRecycleBinA$MH();
        try {
            return (int)mh$.invokeExact(pszRootPath, pSHQueryRBInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHQueryRecycleBinW$MH() {
        return RuntimeHelper.requireNonNull(constants$1872.const$5,"SHQueryRecycleBinW");
    }
    /**
     * {@snippet :
     * HRESULT SHQueryRecycleBinW(LPCWSTR pszRootPath, LPSHQUERYRBINFO pSHQueryRBInfo);
     * }
     */
    public static int SHQueryRecycleBinW(MemorySegment pszRootPath, MemorySegment pSHQueryRBInfo) {
        var mh$ = SHQueryRecycleBinW$MH();
        try {
            return (int)mh$.invokeExact(pszRootPath, pSHQueryRBInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHEmptyRecycleBinA$MH() {
        return RuntimeHelper.requireNonNull(constants$1873.const$0,"SHEmptyRecycleBinA");
    }
    /**
     * {@snippet :
     * HRESULT SHEmptyRecycleBinA(HWND hwnd, LPCSTR pszRootPath, DWORD dwFlags);
     * }
     */
    public static int SHEmptyRecycleBinA(MemorySegment hwnd, MemorySegment pszRootPath, int dwFlags) {
        var mh$ = SHEmptyRecycleBinA$MH();
        try {
            return (int)mh$.invokeExact(hwnd, pszRootPath, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHEmptyRecycleBinW$MH() {
        return RuntimeHelper.requireNonNull(constants$1873.const$1,"SHEmptyRecycleBinW");
    }
    /**
     * {@snippet :
     * HRESULT SHEmptyRecycleBinW(HWND hwnd, LPCWSTR pszRootPath, DWORD dwFlags);
     * }
     */
    public static int SHEmptyRecycleBinW(MemorySegment hwnd, MemorySegment pszRootPath, int dwFlags) {
        var mh$ = SHEmptyRecycleBinW$MH();
        try {
            return (int)mh$.invokeExact(hwnd, pszRootPath, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum .QUNS_NOT_PRESENT = 1;
     * }
     */
    public static int QUNS_NOT_PRESENT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .QUNS_BUSY = 2;
     * }
     */
    public static int QUNS_BUSY() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .QUNS_RUNNING_D3D_FULL_SCREEN = 3;
     * }
     */
    public static int QUNS_RUNNING_D3D_FULL_SCREEN() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .QUNS_PRESENTATION_MODE = 4;
     * }
     */
    public static int QUNS_PRESENTATION_MODE() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .QUNS_ACCEPTS_NOTIFICATIONS = 5;
     * }
     */
    public static int QUNS_ACCEPTS_NOTIFICATIONS() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .QUNS_QUIET_TIME = 6;
     * }
     */
    public static int QUNS_QUIET_TIME() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum .QUNS_APP = 7;
     * }
     */
    public static int QUNS_APP() {
        return (int)7L;
    }
    public static MethodHandle SHQueryUserNotificationState$MH() {
        return RuntimeHelper.requireNonNull(constants$1873.const$2,"SHQueryUserNotificationState");
    }
    /**
     * {@snippet :
     * HRESULT SHQueryUserNotificationState(QUERY_USER_NOTIFICATION_STATE* pquns);
     * }
     */
    public static int SHQueryUserNotificationState(MemorySegment pquns) {
        var mh$ = SHQueryUserNotificationState$MH();
        try {
            return (int)mh$.invokeExact(pquns);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHGetPropertyStoreForWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$1873.const$3,"SHGetPropertyStoreForWindow");
    }
    /**
     * {@snippet :
     * HRESULT SHGetPropertyStoreForWindow(HWND hwnd, const IID* riid, void** ppv);
     * }
     */
    public static int SHGetPropertyStoreForWindow(MemorySegment hwnd, MemorySegment riid, MemorySegment ppv) {
        var mh$ = SHGetPropertyStoreForWindow$MH();
        try {
            return (int)mh$.invokeExact(hwnd, riid, ppv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _NOTIFYICONDATAA* PNOTIFYICONDATAA;
     * }
     */
    public static final AddressLayout PNOTIFYICONDATAA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _NOTIFYICONDATAW* PNOTIFYICONDATAW;
     * }
     */
    public static final AddressLayout PNOTIFYICONDATAW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _NOTIFYICONDATAA* PNOTIFYICONDATA;
     * }
     */
    public static final AddressLayout PNOTIFYICONDATA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _NOTIFYICONIDENTIFIER* PNOTIFYICONIDENTIFIER;
     * }
     */
    public static final AddressLayout PNOTIFYICONIDENTIFIER = RuntimeHelper.POINTER;
    public static MethodHandle Shell_NotifyIconA$MH() {
        return RuntimeHelper.requireNonNull(constants$1878.const$4,"Shell_NotifyIconA");
    }
    /**
     * {@snippet :
     * BOOL Shell_NotifyIconA(DWORD dwMessage, PNOTIFYICONDATAA lpData);
     * }
     */
    public static int Shell_NotifyIconA(int dwMessage, MemorySegment lpData) {
        var mh$ = Shell_NotifyIconA$MH();
        try {
            return (int)mh$.invokeExact(dwMessage, lpData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Shell_NotifyIconW$MH() {
        return RuntimeHelper.requireNonNull(constants$1878.const$5,"Shell_NotifyIconW");
    }
    /**
     * {@snippet :
     * BOOL Shell_NotifyIconW(DWORD dwMessage, PNOTIFYICONDATAW lpData);
     * }
     */
    public static int Shell_NotifyIconW(int dwMessage, MemorySegment lpData) {
        var mh$ = Shell_NotifyIconW$MH();
        try {
            return (int)mh$.invokeExact(dwMessage, lpData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Shell_NotifyIconGetRect$MH() {
        return RuntimeHelper.requireNonNull(constants$1879.const$0,"Shell_NotifyIconGetRect");
    }
    /**
     * {@snippet :
     * HRESULT Shell_NotifyIconGetRect(const NOTIFYICONIDENTIFIER* identifier, RECT* iconLocation);
     * }
     */
    public static int Shell_NotifyIconGetRect(MemorySegment identifier, MemorySegment iconLocation) {
        var mh$ = Shell_NotifyIconGetRect$MH();
        try {
            return (int)mh$.invokeExact(identifier, iconLocation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHGetFileInfoA$MH() {
        return RuntimeHelper.requireNonNull(constants$1880.const$4,"SHGetFileInfoA");
    }
    /**
     * {@snippet :
     * DWORD_PTR SHGetFileInfoA(LPCSTR pszPath, DWORD dwFileAttributes, SHFILEINFOA* psfi, UINT cbFileInfo, UINT uFlags);
     * }
     */
    public static long SHGetFileInfoA(MemorySegment pszPath, int dwFileAttributes, MemorySegment psfi, int cbFileInfo, int uFlags) {
        var mh$ = SHGetFileInfoA$MH();
        try {
            return (long)mh$.invokeExact(pszPath, dwFileAttributes, psfi, cbFileInfo, uFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHGetFileInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$1880.const$5,"SHGetFileInfoW");
    }
    /**
     * {@snippet :
     * DWORD_PTR SHGetFileInfoW(LPCWSTR pszPath, DWORD dwFileAttributes, SHFILEINFOW* psfi, UINT cbFileInfo, UINT uFlags);
     * }
     */
    public static long SHGetFileInfoW(MemorySegment pszPath, int dwFileAttributes, MemorySegment psfi, int cbFileInfo, int uFlags) {
        var mh$ = SHGetFileInfoW$MH();
        try {
            return (long)mh$.invokeExact(pszPath, dwFileAttributes, psfi, cbFileInfo, uFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_DOCNOASSOC = 0;
     * }
     */
    public static int SIID_DOCNOASSOC() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_DOCASSOC = 1;
     * }
     */
    public static int SIID_DOCASSOC() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_APPLICATION = 2;
     * }
     */
    public static int SIID_APPLICATION() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_FOLDER = 3;
     * }
     */
    public static int SIID_FOLDER() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_FOLDEROPEN = 4;
     * }
     */
    public static int SIID_FOLDEROPEN() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_DRIVE525 = 5;
     * }
     */
    public static int SIID_DRIVE525() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_DRIVE35 = 6;
     * }
     */
    public static int SIID_DRIVE35() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_DRIVEREMOVE = 7;
     * }
     */
    public static int SIID_DRIVEREMOVE() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_DRIVEFIXED = 8;
     * }
     */
    public static int SIID_DRIVEFIXED() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_DRIVENET = 9;
     * }
     */
    public static int SIID_DRIVENET() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_DRIVENETDISABLED = 10;
     * }
     */
    public static int SIID_DRIVENETDISABLED() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_DRIVECD = 11;
     * }
     */
    public static int SIID_DRIVECD() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_DRIVERAM = 12;
     * }
     */
    public static int SIID_DRIVERAM() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_WORLD = 13;
     * }
     */
    public static int SIID_WORLD() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_SERVER = 15;
     * }
     */
    public static int SIID_SERVER() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_PRINTER = 16;
     * }
     */
    public static int SIID_PRINTER() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_MYNETWORK = 17;
     * }
     */
    public static int SIID_MYNETWORK() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_FIND = 22;
     * }
     */
    public static int SIID_FIND() {
        return (int)22L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_HELP = 23;
     * }
     */
    public static int SIID_HELP() {
        return (int)23L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_SHARE = 28;
     * }
     */
    public static int SIID_SHARE() {
        return (int)28L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_LINK = 29;
     * }
     */
    public static int SIID_LINK() {
        return (int)29L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_SLOWFILE = 30;
     * }
     */
    public static int SIID_SLOWFILE() {
        return (int)30L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_RECYCLER = 31;
     * }
     */
    public static int SIID_RECYCLER() {
        return (int)31L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_RECYCLERFULL = 32;
     * }
     */
    public static int SIID_RECYCLERFULL() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_MEDIACDAUDIO = 40;
     * }
     */
    public static int SIID_MEDIACDAUDIO() {
        return (int)40L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_LOCK = 47;
     * }
     */
    public static int SIID_LOCK() {
        return (int)47L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_AUTOLIST = 49;
     * }
     */
    public static int SIID_AUTOLIST() {
        return (int)49L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_PRINTERNET = 50;
     * }
     */
    public static int SIID_PRINTERNET() {
        return (int)50L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_SERVERSHARE = 51;
     * }
     */
    public static int SIID_SERVERSHARE() {
        return (int)51L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_PRINTERFAX = 52;
     * }
     */
    public static int SIID_PRINTERFAX() {
        return (int)52L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_PRINTERFAXNET = 53;
     * }
     */
    public static int SIID_PRINTERFAXNET() {
        return (int)53L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_PRINTERFILE = 54;
     * }
     */
    public static int SIID_PRINTERFILE() {
        return (int)54L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_STACK = 55;
     * }
     */
    public static int SIID_STACK() {
        return (int)55L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_MEDIASVCD = 56;
     * }
     */
    public static int SIID_MEDIASVCD() {
        return (int)56L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_STUFFEDFOLDER = 57;
     * }
     */
    public static int SIID_STUFFEDFOLDER() {
        return (int)57L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_DRIVEUNKNOWN = 58;
     * }
     */
    public static int SIID_DRIVEUNKNOWN() {
        return (int)58L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_DRIVEDVD = 59;
     * }
     */
    public static int SIID_DRIVEDVD() {
        return (int)59L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_MEDIADVD = 60;
     * }
     */
    public static int SIID_MEDIADVD() {
        return (int)60L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_MEDIADVDRAM = 61;
     * }
     */
    public static int SIID_MEDIADVDRAM() {
        return (int)61L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_MEDIADVDRW = 62;
     * }
     */
    public static int SIID_MEDIADVDRW() {
        return (int)62L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_MEDIADVDR = 63;
     * }
     */
    public static int SIID_MEDIADVDR() {
        return (int)63L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_MEDIADVDROM = 64;
     * }
     */
    public static int SIID_MEDIADVDROM() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_MEDIACDAUDIOPLUS = 65;
     * }
     */
    public static int SIID_MEDIACDAUDIOPLUS() {
        return (int)65L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_MEDIACDRW = 66;
     * }
     */
    public static int SIID_MEDIACDRW() {
        return (int)66L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_MEDIACDR = 67;
     * }
     */
    public static int SIID_MEDIACDR() {
        return (int)67L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_MEDIACDBURN = 68;
     * }
     */
    public static int SIID_MEDIACDBURN() {
        return (int)68L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_MEDIABLANKCD = 69;
     * }
     */
    public static int SIID_MEDIABLANKCD() {
        return (int)69L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_MEDIACDROM = 70;
     * }
     */
    public static int SIID_MEDIACDROM() {
        return (int)70L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_AUDIOFILES = 71;
     * }
     */
    public static int SIID_AUDIOFILES() {
        return (int)71L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_IMAGEFILES = 72;
     * }
     */
    public static int SIID_IMAGEFILES() {
        return (int)72L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_VIDEOFILES = 73;
     * }
     */
    public static int SIID_VIDEOFILES() {
        return (int)73L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_MIXEDFILES = 74;
     * }
     */
    public static int SIID_MIXEDFILES() {
        return (int)74L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_FOLDERBACK = 75;
     * }
     */
    public static int SIID_FOLDERBACK() {
        return (int)75L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_FOLDERFRONT = 76;
     * }
     */
    public static int SIID_FOLDERFRONT() {
        return (int)76L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_SHIELD = 77;
     * }
     */
    public static int SIID_SHIELD() {
        return (int)77L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_WARNING = 78;
     * }
     */
    public static int SIID_WARNING() {
        return (int)78L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_INFO = 79;
     * }
     */
    public static int SIID_INFO() {
        return (int)79L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_ERROR = 80;
     * }
     */
    public static int SIID_ERROR() {
        return (int)80L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_KEY = 81;
     * }
     */
    public static int SIID_KEY() {
        return (int)81L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_SOFTWARE = 82;
     * }
     */
    public static int SIID_SOFTWARE() {
        return (int)82L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_RENAME = 83;
     * }
     */
    public static int SIID_RENAME() {
        return (int)83L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_DELETE = 84;
     * }
     */
    public static int SIID_DELETE() {
        return (int)84L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_MEDIAAUDIODVD = 85;
     * }
     */
    public static int SIID_MEDIAAUDIODVD() {
        return (int)85L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_MEDIAMOVIEDVD = 86;
     * }
     */
    public static int SIID_MEDIAMOVIEDVD() {
        return (int)86L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_MEDIAENHANCEDCD = 87;
     * }
     */
    public static int SIID_MEDIAENHANCEDCD() {
        return (int)87L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_MEDIAENHANCEDDVD = 88;
     * }
     */
    public static int SIID_MEDIAENHANCEDDVD() {
        return (int)88L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_MEDIAHDDVD = 89;
     * }
     */
    public static int SIID_MEDIAHDDVD() {
        return (int)89L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_MEDIABLURAY = 90;
     * }
     */
    public static int SIID_MEDIABLURAY() {
        return (int)90L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_MEDIAVCD = 91;
     * }
     */
    public static int SIID_MEDIAVCD() {
        return (int)91L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_MEDIADVDPLUSR = 92;
     * }
     */
    public static int SIID_MEDIADVDPLUSR() {
        return (int)92L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_MEDIADVDPLUSRW = 93;
     * }
     */
    public static int SIID_MEDIADVDPLUSRW() {
        return (int)93L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_DESKTOPPC = 94;
     * }
     */
    public static int SIID_DESKTOPPC() {
        return (int)94L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_MOBILEPC = 95;
     * }
     */
    public static int SIID_MOBILEPC() {
        return (int)95L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_USERS = 96;
     * }
     */
    public static int SIID_USERS() {
        return (int)96L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_MEDIASMARTMEDIA = 97;
     * }
     */
    public static int SIID_MEDIASMARTMEDIA() {
        return (int)97L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_MEDIACOMPACTFLASH = 98;
     * }
     */
    public static int SIID_MEDIACOMPACTFLASH() {
        return (int)98L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_DEVICECELLPHONE = 99;
     * }
     */
    public static int SIID_DEVICECELLPHONE() {
        return (int)99L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_DEVICECAMERA = 100;
     * }
     */
    public static int SIID_DEVICECAMERA() {
        return (int)100L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_DEVICEVIDEOCAMERA = 101;
     * }
     */
    public static int SIID_DEVICEVIDEOCAMERA() {
        return (int)101L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_DEVICEAUDIOPLAYER = 102;
     * }
     */
    public static int SIID_DEVICEAUDIOPLAYER() {
        return (int)102L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_NETWORKCONNECT = 103;
     * }
     */
    public static int SIID_NETWORKCONNECT() {
        return (int)103L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_INTERNET = 104;
     * }
     */
    public static int SIID_INTERNET() {
        return (int)104L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_ZIPFILE = 105;
     * }
     */
    public static int SIID_ZIPFILE() {
        return (int)105L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_SETTINGS = 106;
     * }
     */
    public static int SIID_SETTINGS() {
        return (int)106L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_DRIVEHDDVD = 132;
     * }
     */
    public static int SIID_DRIVEHDDVD() {
        return (int)132L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_DRIVEBD = 133;
     * }
     */
    public static int SIID_DRIVEBD() {
        return (int)133L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_MEDIAHDDVDROM = 134;
     * }
     */
    public static int SIID_MEDIAHDDVDROM() {
        return (int)134L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_MEDIAHDDVDR = 135;
     * }
     */
    public static int SIID_MEDIAHDDVDR() {
        return (int)135L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_MEDIAHDDVDRAM = 136;
     * }
     */
    public static int SIID_MEDIAHDDVDRAM() {
        return (int)136L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_MEDIABDROM = 137;
     * }
     */
    public static int SIID_MEDIABDROM() {
        return (int)137L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_MEDIABDR = 138;
     * }
     */
    public static int SIID_MEDIABDR() {
        return (int)138L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_MEDIABDRE = 139;
     * }
     */
    public static int SIID_MEDIABDRE() {
        return (int)139L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_CLUSTEREDDRIVE = 140;
     * }
     */
    public static int SIID_CLUSTEREDDRIVE() {
        return (int)140L;
    }
    /**
     * {@snippet :
     * enum SHSTOCKICONID.SIID_MAX_ICONS = 181;
     * }
     */
    public static int SIID_MAX_ICONS() {
        return (int)181L;
    }
    public static MethodHandle SHGetStockIconInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$1881.const$5,"SHGetStockIconInfo");
    }
    /**
     * {@snippet :
     * HRESULT SHGetStockIconInfo(SHSTOCKICONID siid, UINT uFlags, SHSTOCKICONINFO* psii);
     * }
     */
    public static int SHGetStockIconInfo(int siid, int uFlags, MemorySegment psii) {
        var mh$ = SHGetStockIconInfo$MH();
        try {
            return (int)mh$.invokeExact(siid, uFlags, psii);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHGetDiskFreeSpaceExA$MH() {
        return RuntimeHelper.requireNonNull(constants$1882.const$0,"SHGetDiskFreeSpaceExA");
    }
    /**
     * {@snippet :
     * BOOL SHGetDiskFreeSpaceExA(LPCSTR pszDirectoryName, ULARGE_INTEGER* pulFreeBytesAvailableToCaller, ULARGE_INTEGER* pulTotalNumberOfBytes, ULARGE_INTEGER* pulTotalNumberOfFreeBytes);
     * }
     */
    public static int SHGetDiskFreeSpaceExA(MemorySegment pszDirectoryName, MemorySegment pulFreeBytesAvailableToCaller, MemorySegment pulTotalNumberOfBytes, MemorySegment pulTotalNumberOfFreeBytes) {
        var mh$ = SHGetDiskFreeSpaceExA$MH();
        try {
            return (int)mh$.invokeExact(pszDirectoryName, pulFreeBytesAvailableToCaller, pulTotalNumberOfBytes, pulTotalNumberOfFreeBytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHGetDiskFreeSpaceExW$MH() {
        return RuntimeHelper.requireNonNull(constants$1882.const$1,"SHGetDiskFreeSpaceExW");
    }
    /**
     * {@snippet :
     * BOOL SHGetDiskFreeSpaceExW(LPCWSTR pszDirectoryName, ULARGE_INTEGER* pulFreeBytesAvailableToCaller, ULARGE_INTEGER* pulTotalNumberOfBytes, ULARGE_INTEGER* pulTotalNumberOfFreeBytes);
     * }
     */
    public static int SHGetDiskFreeSpaceExW(MemorySegment pszDirectoryName, MemorySegment pulFreeBytesAvailableToCaller, MemorySegment pulTotalNumberOfBytes, MemorySegment pulTotalNumberOfFreeBytes) {
        var mh$ = SHGetDiskFreeSpaceExW$MH();
        try {
            return (int)mh$.invokeExact(pszDirectoryName, pulFreeBytesAvailableToCaller, pulTotalNumberOfBytes, pulTotalNumberOfFreeBytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHGetNewLinkInfoA$MH() {
        return RuntimeHelper.requireNonNull(constants$1882.const$2,"SHGetNewLinkInfoA");
    }
    /**
     * {@snippet :
     * BOOL SHGetNewLinkInfoA(LPCSTR pszLinkTo, LPCSTR pszDir, LPSTR pszName, BOOL* pfMustCopy, UINT uFlags);
     * }
     */
    public static int SHGetNewLinkInfoA(MemorySegment pszLinkTo, MemorySegment pszDir, MemorySegment pszName, MemorySegment pfMustCopy, int uFlags) {
        var mh$ = SHGetNewLinkInfoA$MH();
        try {
            return (int)mh$.invokeExact(pszLinkTo, pszDir, pszName, pfMustCopy, uFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHGetNewLinkInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$1882.const$3,"SHGetNewLinkInfoW");
    }
    /**
     * {@snippet :
     * BOOL SHGetNewLinkInfoW(LPCWSTR pszLinkTo, LPCWSTR pszDir, LPWSTR pszName, BOOL* pfMustCopy, UINT uFlags);
     * }
     */
    public static int SHGetNewLinkInfoW(MemorySegment pszLinkTo, MemorySegment pszDir, MemorySegment pszName, MemorySegment pfMustCopy, int uFlags) {
        var mh$ = SHGetNewLinkInfoW$MH();
        try {
            return (int)mh$.invokeExact(pszLinkTo, pszDir, pszName, pfMustCopy, uFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHInvokePrinterCommandA$MH() {
        return RuntimeHelper.requireNonNull(constants$1882.const$4,"SHInvokePrinterCommandA");
    }
    /**
     * {@snippet :
     * BOOL SHInvokePrinterCommandA(HWND hwnd, UINT uAction, LPCSTR lpBuf1, LPCSTR lpBuf2, BOOL fModal);
     * }
     */
    public static int SHInvokePrinterCommandA(MemorySegment hwnd, int uAction, MemorySegment lpBuf1, MemorySegment lpBuf2, int fModal) {
        var mh$ = SHInvokePrinterCommandA$MH();
        try {
            return (int)mh$.invokeExact(hwnd, uAction, lpBuf1, lpBuf2, fModal);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHInvokePrinterCommandW$MH() {
        return RuntimeHelper.requireNonNull(constants$1882.const$5,"SHInvokePrinterCommandW");
    }
    /**
     * {@snippet :
     * BOOL SHInvokePrinterCommandW(HWND hwnd, UINT uAction, LPCWSTR lpBuf1, LPCWSTR lpBuf2, BOOL fModal);
     * }
     */
    public static int SHInvokePrinterCommandW(MemorySegment hwnd, int uAction, MemorySegment lpBuf1, MemorySegment lpBuf2, int fModal) {
        var mh$ = SHInvokePrinterCommandW$MH();
        try {
            return (int)mh$.invokeExact(hwnd, uAction, lpBuf1, lpBuf2, fModal);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _OPEN_PRINTER_PROPS_INFOA* POPEN_PRINTER_PROPS_INFOA;
     * }
     */
    public static final AddressLayout POPEN_PRINTER_PROPS_INFOA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _OPEN_PRINTER_PROPS_INFOW* POPEN_PRINTER_PROPS_INFOW;
     * }
     */
    public static final AddressLayout POPEN_PRINTER_PROPS_INFOW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _OPEN_PRINTER_PROPS_INFOA* POPEN_PRINTER_PROPS_INFO;
     * }
     */
    public static final AddressLayout POPEN_PRINTER_PROPS_INFO = RuntimeHelper.POINTER;
    public static MethodHandle SHLoadNonloadedIconOverlayIdentifiers$MH() {
        return RuntimeHelper.requireNonNull(constants$1885.const$0,"SHLoadNonloadedIconOverlayIdentifiers");
    }
    /**
     * {@snippet :
     * HRESULT SHLoadNonloadedIconOverlayIdentifiers();
     * }
     */
    public static int SHLoadNonloadedIconOverlayIdentifiers() {
        var mh$ = SHLoadNonloadedIconOverlayIdentifiers$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHIsFileAvailableOffline$MH() {
        return RuntimeHelper.requireNonNull(constants$1885.const$1,"SHIsFileAvailableOffline");
    }
    /**
     * {@snippet :
     * HRESULT SHIsFileAvailableOffline(PCWSTR pwszPath, DWORD* pdwStatus);
     * }
     */
    public static int SHIsFileAvailableOffline(MemorySegment pwszPath, MemorySegment pdwStatus) {
        var mh$ = SHIsFileAvailableOffline$MH();
        try {
            return (int)mh$.invokeExact(pwszPath, pdwStatus);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHSetLocalizedName$MH() {
        return RuntimeHelper.requireNonNull(constants$1885.const$2,"SHSetLocalizedName");
    }
    /**
     * {@snippet :
     * HRESULT SHSetLocalizedName(PCWSTR pszPath, PCWSTR pszResModule, int idsRes);
     * }
     */
    public static int SHSetLocalizedName(MemorySegment pszPath, MemorySegment pszResModule, int idsRes) {
        var mh$ = SHSetLocalizedName$MH();
        try {
            return (int)mh$.invokeExact(pszPath, pszResModule, idsRes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHRemoveLocalizedName$MH() {
        return RuntimeHelper.requireNonNull(constants$1885.const$3,"SHRemoveLocalizedName");
    }
    /**
     * {@snippet :
     * HRESULT SHRemoveLocalizedName(PCWSTR pszPath);
     * }
     */
    public static int SHRemoveLocalizedName(MemorySegment pszPath) {
        var mh$ = SHRemoveLocalizedName$MH();
        try {
            return (int)mh$.invokeExact(pszPath);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHGetLocalizedName$MH() {
        return RuntimeHelper.requireNonNull(constants$1885.const$4,"SHGetLocalizedName");
    }
    /**
     * {@snippet :
     * HRESULT SHGetLocalizedName(PCWSTR pszPath, PWSTR pszResModule, UINT cch, int* pidsRes);
     * }
     */
    public static int SHGetLocalizedName(MemorySegment pszPath, MemorySegment pszResModule, int cch, MemorySegment pidsRes) {
        var mh$ = SHGetLocalizedName$MH();
        try {
            return (int)mh$.invokeExact(pszPath, pszResModule, cch, pidsRes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ShellMessageBoxA$MH() {
        return RuntimeHelper.requireNonNull(constants$1885.const$5,"ShellMessageBoxA");
    }
    /**
     * {@snippet :
     * int ShellMessageBoxA(HINSTANCE hAppInst, HWND hWnd, LPCSTR lpcText, LPCSTR lpcTitle, UINT fuStyle,...);
     * }
     */
    public static int ShellMessageBoxA(MemorySegment hAppInst, MemorySegment hWnd, MemorySegment lpcText, MemorySegment lpcTitle, int fuStyle, Object... x5) {
        var mh$ = ShellMessageBoxA$MH();
        try {
            return (int)mh$.invokeExact(hAppInst, hWnd, lpcText, lpcTitle, fuStyle, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ShellMessageBoxW$MH() {
        return RuntimeHelper.requireNonNull(constants$1886.const$0,"ShellMessageBoxW");
    }
    /**
     * {@snippet :
     * int ShellMessageBoxW(HINSTANCE hAppInst, HWND hWnd, LPCWSTR lpcText, LPCWSTR lpcTitle, UINT fuStyle,...);
     * }
     */
    public static int ShellMessageBoxW(MemorySegment hAppInst, MemorySegment hWnd, MemorySegment lpcText, MemorySegment lpcTitle, int fuStyle, Object... x5) {
        var mh$ = ShellMessageBoxW$MH();
        try {
            return (int)mh$.invokeExact(hAppInst, hWnd, lpcText, lpcTitle, fuStyle, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsLFNDriveA$MH() {
        return RuntimeHelper.requireNonNull(constants$1886.const$1,"IsLFNDriveA");
    }
    /**
     * {@snippet :
     * BOOL IsLFNDriveA(LPCSTR pszPath);
     * }
     */
    public static int IsLFNDriveA(MemorySegment pszPath) {
        var mh$ = IsLFNDriveA$MH();
        try {
            return (int)mh$.invokeExact(pszPath);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsLFNDriveW$MH() {
        return RuntimeHelper.requireNonNull(constants$1886.const$2,"IsLFNDriveW");
    }
    /**
     * {@snippet :
     * BOOL IsLFNDriveW(LPCWSTR pszPath);
     * }
     */
    public static int IsLFNDriveW(MemorySegment pszPath) {
        var mh$ = IsLFNDriveW$MH();
        try {
            return (int)mh$.invokeExact(pszPath);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHEnumerateUnreadMailAccountsA$MH() {
        return RuntimeHelper.requireNonNull(constants$1886.const$3,"SHEnumerateUnreadMailAccountsA");
    }
    /**
     * {@snippet :
     * HRESULT SHEnumerateUnreadMailAccountsA(HKEY hKeyUser, DWORD dwIndex, LPSTR pszMailAddress, int cchMailAddress);
     * }
     */
    public static int SHEnumerateUnreadMailAccountsA(MemorySegment hKeyUser, int dwIndex, MemorySegment pszMailAddress, int cchMailAddress) {
        var mh$ = SHEnumerateUnreadMailAccountsA$MH();
        try {
            return (int)mh$.invokeExact(hKeyUser, dwIndex, pszMailAddress, cchMailAddress);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHEnumerateUnreadMailAccountsW$MH() {
        return RuntimeHelper.requireNonNull(constants$1886.const$4,"SHEnumerateUnreadMailAccountsW");
    }
    /**
     * {@snippet :
     * HRESULT SHEnumerateUnreadMailAccountsW(HKEY hKeyUser, DWORD dwIndex, LPWSTR pszMailAddress, int cchMailAddress);
     * }
     */
    public static int SHEnumerateUnreadMailAccountsW(MemorySegment hKeyUser, int dwIndex, MemorySegment pszMailAddress, int cchMailAddress) {
        var mh$ = SHEnumerateUnreadMailAccountsW$MH();
        try {
            return (int)mh$.invokeExact(hKeyUser, dwIndex, pszMailAddress, cchMailAddress);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHGetUnreadMailCountA$MH() {
        return RuntimeHelper.requireNonNull(constants$1886.const$5,"SHGetUnreadMailCountA");
    }
    /**
     * {@snippet :
     * HRESULT SHGetUnreadMailCountA(HKEY hKeyUser, LPCSTR pszMailAddress, DWORD* pdwCount, FILETIME* pFileTime, LPSTR pszShellExecuteCommand, int cchShellExecuteCommand);
     * }
     */
    public static int SHGetUnreadMailCountA(MemorySegment hKeyUser, MemorySegment pszMailAddress, MemorySegment pdwCount, MemorySegment pFileTime, MemorySegment pszShellExecuteCommand, int cchShellExecuteCommand) {
        var mh$ = SHGetUnreadMailCountA$MH();
        try {
            return (int)mh$.invokeExact(hKeyUser, pszMailAddress, pdwCount, pFileTime, pszShellExecuteCommand, cchShellExecuteCommand);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHGetUnreadMailCountW$MH() {
        return RuntimeHelper.requireNonNull(constants$1887.const$0,"SHGetUnreadMailCountW");
    }
    /**
     * {@snippet :
     * HRESULT SHGetUnreadMailCountW(HKEY hKeyUser, LPCWSTR pszMailAddress, DWORD* pdwCount, FILETIME* pFileTime, LPWSTR pszShellExecuteCommand, int cchShellExecuteCommand);
     * }
     */
    public static int SHGetUnreadMailCountW(MemorySegment hKeyUser, MemorySegment pszMailAddress, MemorySegment pdwCount, MemorySegment pFileTime, MemorySegment pszShellExecuteCommand, int cchShellExecuteCommand) {
        var mh$ = SHGetUnreadMailCountW$MH();
        try {
            return (int)mh$.invokeExact(hKeyUser, pszMailAddress, pdwCount, pFileTime, pszShellExecuteCommand, cchShellExecuteCommand);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHSetUnreadMailCountA$MH() {
        return RuntimeHelper.requireNonNull(constants$1887.const$1,"SHSetUnreadMailCountA");
    }
    /**
     * {@snippet :
     * HRESULT SHSetUnreadMailCountA(LPCSTR pszMailAddress, DWORD dwCount, LPCSTR pszShellExecuteCommand);
     * }
     */
    public static int SHSetUnreadMailCountA(MemorySegment pszMailAddress, int dwCount, MemorySegment pszShellExecuteCommand) {
        var mh$ = SHSetUnreadMailCountA$MH();
        try {
            return (int)mh$.invokeExact(pszMailAddress, dwCount, pszShellExecuteCommand);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHSetUnreadMailCountW$MH() {
        return RuntimeHelper.requireNonNull(constants$1887.const$2,"SHSetUnreadMailCountW");
    }
    /**
     * {@snippet :
     * HRESULT SHSetUnreadMailCountW(LPCWSTR pszMailAddress, DWORD dwCount, LPCWSTR pszShellExecuteCommand);
     * }
     */
    public static int SHSetUnreadMailCountW(MemorySegment pszMailAddress, int dwCount, MemorySegment pszShellExecuteCommand) {
        var mh$ = SHSetUnreadMailCountW$MH();
        try {
            return (int)mh$.invokeExact(pszMailAddress, dwCount, pszShellExecuteCommand);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHTestTokenMembership$MH() {
        return RuntimeHelper.requireNonNull(constants$1887.const$3,"SHTestTokenMembership");
    }
    /**
     * {@snippet :
     * BOOL SHTestTokenMembership(HANDLE hToken, ULONG ulRID);
     * }
     */
    public static int SHTestTokenMembership(MemorySegment hToken, int ulRID) {
        var mh$ = SHTestTokenMembership$MH();
        try {
            return (int)mh$.invokeExact(hToken, ulRID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHGetImageList$MH() {
        return RuntimeHelper.requireNonNull(constants$1887.const$4,"SHGetImageList");
    }
    /**
     * {@snippet :
     * HRESULT SHGetImageList(int iImageList, const IID* riid, void** ppvObj);
     * }
     */
    public static int SHGetImageList(int iImageList, MemorySegment riid, MemorySegment ppvObj) {
        var mh$ = SHGetImageList$MH();
        try {
            return (int)mh$.invokeExact(iImageList, riid, ppvObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitNetworkAddressControl$MH() {
        return RuntimeHelper.requireNonNull(constants$1888.const$1,"InitNetworkAddressControl");
    }
    /**
     * {@snippet :
     * BOOL InitNetworkAddressControl();
     * }
     */
    public static int InitNetworkAddressControl() {
        var mh$ = InitNetworkAddressControl$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagNC_ADDRESS* PNC_ADDRESS;
     * }
     */
    public static final AddressLayout PNC_ADDRESS = RuntimeHelper.POINTER;
    public static MethodHandle SHGetDriveMedia$MH() {
        return RuntimeHelper.requireNonNull(constants$1889.const$0,"SHGetDriveMedia");
    }
    /**
     * {@snippet :
     * HRESULT SHGetDriveMedia(PCWSTR pszDrive, DWORD* pdwMediaContent);
     * }
     */
    public static int SHGetDriveMedia(MemorySegment pszDrive, MemorySegment pdwMediaContent) {
        var mh$ = SHGetDriveMedia$MH();
        try {
            return (int)mh$.invokeExact(pszDrive, pdwMediaContent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _PERF_DATA_BLOCK* PPERF_DATA_BLOCK;
     * }
     */
    public static final AddressLayout PPERF_DATA_BLOCK = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _PERF_OBJECT_TYPE* PPERF_OBJECT_TYPE;
     * }
     */
    public static final AddressLayout PPERF_OBJECT_TYPE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _PERF_COUNTER_DEFINITION* PPERF_COUNTER_DEFINITION;
     * }
     */
    public static final AddressLayout PPERF_COUNTER_DEFINITION = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _PERF_INSTANCE_DEFINITION* PPERF_INSTANCE_DEFINITION;
     * }
     */
    public static final AddressLayout PPERF_INSTANCE_DEFINITION = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _PERF_COUNTER_BLOCK* PPERF_COUNTER_BLOCK;
     * }
     */
    public static final AddressLayout PPERF_COUNTER_BLOCK = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef unsigned char u_char;
     * }
     */
    public static final OfByte u_char = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned short u_short;
     * }
     */
    public static final OfShort u_short = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned int u_int;
     * }
     */
    public static final OfInt u_int = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long u_long;
     * }
     */
    public static final OfInt u_long = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long long SOCKET;
     * }
     */
    public static final OfLong SOCKET = JAVA_LONG;
    public static MethodHandle __WSAFDIsSet$MH() {
        return RuntimeHelper.requireNonNull(constants$1897.const$3,"__WSAFDIsSet");
    }
    /**
     * {@snippet :
     * int __WSAFDIsSet(SOCKET, fd_set*);
     * }
     */
    public static int __WSAFDIsSet(long x0, MemorySegment x1) {
        var mh$ = __WSAFDIsSet$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct in_addr* PIN_ADDR;
     * }
     */
    public static final AddressLayout PIN_ADDR = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct in_addr* LPIN_ADDR;
     * }
     */
    public static final AddressLayout LPIN_ADDR = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct WSAData* LPWSADATA;
     * }
     */
    public static final AddressLayout LPWSADATA = RuntimeHelper.POINTER;
    public static MethodHandle accept$MH() {
        return RuntimeHelper.requireNonNull(constants$1906.const$3,"accept");
    }
    /**
     * {@snippet :
     * SOCKET accept(SOCKET s, struct sockaddr* addr, int* addrlen);
     * }
     */
    public static long accept(long s, MemorySegment addr, MemorySegment addrlen) {
        var mh$ = accept$MH();
        try {
            return (long)mh$.invokeExact(s, addr, addrlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bind$MH() {
        return RuntimeHelper.requireNonNull(constants$1906.const$4,"bind");
    }
    /**
     * {@snippet :
     * int bind(SOCKET s, struct sockaddr* addr, int namelen);
     * }
     */
    public static int bind(long s, MemorySegment addr, int namelen) {
        var mh$ = bind$MH();
        try {
            return (int)mh$.invokeExact(s, addr, namelen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle closesocket$MH() {
        return RuntimeHelper.requireNonNull(constants$1906.const$5,"closesocket");
    }
    /**
     * {@snippet :
     * int closesocket(SOCKET s);
     * }
     */
    public static int closesocket(long s) {
        var mh$ = closesocket$MH();
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle connect$MH() {
        return RuntimeHelper.requireNonNull(constants$1907.const$0,"connect");
    }
    /**
     * {@snippet :
     * int connect(SOCKET s, struct sockaddr* name, int namelen);
     * }
     */
    public static int connect(long s, MemorySegment name, int namelen) {
        var mh$ = connect$MH();
        try {
            return (int)mh$.invokeExact(s, name, namelen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ioctlsocket$MH() {
        return RuntimeHelper.requireNonNull(constants$1907.const$2,"ioctlsocket");
    }
    /**
     * {@snippet :
     * int ioctlsocket(SOCKET s, long cmd, u_long* argp);
     * }
     */
    public static int ioctlsocket(long s, int cmd, MemorySegment argp) {
        var mh$ = ioctlsocket$MH();
        try {
            return (int)mh$.invokeExact(s, cmd, argp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getpeername$MH() {
        return RuntimeHelper.requireNonNull(constants$1907.const$3,"getpeername");
    }
    /**
     * {@snippet :
     * int getpeername(SOCKET s, struct sockaddr* name, int* namelen);
     * }
     */
    public static int getpeername(long s, MemorySegment name, MemorySegment namelen) {
        var mh$ = getpeername$MH();
        try {
            return (int)mh$.invokeExact(s, name, namelen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getsockname$MH() {
        return RuntimeHelper.requireNonNull(constants$1907.const$4,"getsockname");
    }
    /**
     * {@snippet :
     * int getsockname(SOCKET s, struct sockaddr* name, int* namelen);
     * }
     */
    public static int getsockname(long s, MemorySegment name, MemorySegment namelen) {
        var mh$ = getsockname$MH();
        try {
            return (int)mh$.invokeExact(s, name, namelen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getsockopt$MH() {
        return RuntimeHelper.requireNonNull(constants$1907.const$6,"getsockopt");
    }
    /**
     * {@snippet :
     * int getsockopt(SOCKET s, int level, int optname, char* optval, int* optlen);
     * }
     */
    public static int getsockopt(long s, int level, int optname, MemorySegment optval, MemorySegment optlen) {
        var mh$ = getsockopt$MH();
        try {
            return (int)mh$.invokeExact(s, level, optname, optval, optlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle htonl$MH() {
        return RuntimeHelper.requireNonNull(constants$1908.const$0,"htonl");
    }
    /**
     * {@snippet :
     * u_long htonl(u_long hostlong);
     * }
     */
    public static int htonl(int hostlong) {
        var mh$ = htonl$MH();
        try {
            return (int)mh$.invokeExact(hostlong);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle htons$MH() {
        return RuntimeHelper.requireNonNull(constants$1908.const$1,"htons");
    }
    /**
     * {@snippet :
     * u_short htons(u_short hostshort);
     * }
     */
    public static short htons(short hostshort) {
        var mh$ = htons$MH();
        try {
            return (short)mh$.invokeExact(hostshort);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle inet_addr$MH() {
        return RuntimeHelper.requireNonNull(constants$1908.const$2,"inet_addr");
    }
    /**
     * {@snippet :
     * unsigned long inet_addr(char* cp);
     * }
     */
    public static int inet_addr(MemorySegment cp) {
        var mh$ = inet_addr$MH();
        try {
            return (int)mh$.invokeExact(cp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle inet_ntoa$MH() {
        return RuntimeHelper.requireNonNull(constants$1908.const$4,"inet_ntoa");
    }
    /**
     * {@snippet :
     * char* inet_ntoa(struct in_addr in);
     * }
     */
    public static MemorySegment inet_ntoa(MemorySegment in) {
        var mh$ = inet_ntoa$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(in);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle listen$MH() {
        return RuntimeHelper.requireNonNull(constants$1908.const$5,"listen");
    }
    /**
     * {@snippet :
     * int listen(SOCKET s, int backlog);
     * }
     */
    public static int listen(long s, int backlog) {
        var mh$ = listen$MH();
        try {
            return (int)mh$.invokeExact(s, backlog);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ntohl$MH() {
        return RuntimeHelper.requireNonNull(constants$1909.const$0,"ntohl");
    }
    /**
     * {@snippet :
     * u_long ntohl(u_long netlong);
     * }
     */
    public static int ntohl(int netlong) {
        var mh$ = ntohl$MH();
        try {
            return (int)mh$.invokeExact(netlong);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ntohs$MH() {
        return RuntimeHelper.requireNonNull(constants$1909.const$1,"ntohs");
    }
    /**
     * {@snippet :
     * u_short ntohs(u_short netshort);
     * }
     */
    public static short ntohs(short netshort) {
        var mh$ = ntohs$MH();
        try {
            return (short)mh$.invokeExact(netshort);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle recv$MH() {
        return RuntimeHelper.requireNonNull(constants$1909.const$3,"recv");
    }
    /**
     * {@snippet :
     * int recv(SOCKET s, char* buf, int len, int flags);
     * }
     */
    public static int recv(long s, MemorySegment buf, int len, int flags) {
        var mh$ = recv$MH();
        try {
            return (int)mh$.invokeExact(s, buf, len, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle recvfrom$MH() {
        return RuntimeHelper.requireNonNull(constants$1909.const$5,"recvfrom");
    }
    /**
     * {@snippet :
     * int recvfrom(SOCKET s, char* buf, int len, int flags, struct sockaddr* from, int* fromlen);
     * }
     */
    public static int recvfrom(long s, MemorySegment buf, int len, int flags, MemorySegment from, MemorySegment fromlen) {
        var mh$ = recvfrom$MH();
        try {
            return (int)mh$.invokeExact(s, buf, len, flags, from, fromlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle select$MH() {
        return RuntimeHelper.requireNonNull(constants$1910.const$0,"select");
    }
    /**
     * {@snippet :
     * int select(int nfds, fd_set* readfds, fd_set* writefds, fd_set* exceptfds, struct timeval* timeout);
     * }
     */
    public static int select(int nfds, MemorySegment readfds, MemorySegment writefds, MemorySegment exceptfds, MemorySegment timeout) {
        var mh$ = select$MH();
        try {
            return (int)mh$.invokeExact(nfds, readfds, writefds, exceptfds, timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle send$MH() {
        return RuntimeHelper.requireNonNull(constants$1910.const$1,"send");
    }
    /**
     * {@snippet :
     * int send(SOCKET s, char* buf, int len, int flags);
     * }
     */
    public static int send(long s, MemorySegment buf, int len, int flags) {
        var mh$ = send$MH();
        try {
            return (int)mh$.invokeExact(s, buf, len, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sendto$MH() {
        return RuntimeHelper.requireNonNull(constants$1910.const$3,"sendto");
    }
    /**
     * {@snippet :
     * int sendto(SOCKET s, char* buf, int len, int flags, struct sockaddr* to, int tolen);
     * }
     */
    public static int sendto(long s, MemorySegment buf, int len, int flags, MemorySegment to, int tolen) {
        var mh$ = sendto$MH();
        try {
            return (int)mh$.invokeExact(s, buf, len, flags, to, tolen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setsockopt$MH() {
        return RuntimeHelper.requireNonNull(constants$1910.const$5,"setsockopt");
    }
    /**
     * {@snippet :
     * int setsockopt(SOCKET s, int level, int optname, char* optval, int optlen);
     * }
     */
    public static int setsockopt(long s, int level, int optname, MemorySegment optval, int optlen) {
        var mh$ = setsockopt$MH();
        try {
            return (int)mh$.invokeExact(s, level, optname, optval, optlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle shutdown$MH() {
        return RuntimeHelper.requireNonNull(constants$1911.const$0,"shutdown");
    }
    /**
     * {@snippet :
     * int shutdown(SOCKET s, int how);
     * }
     */
    public static int shutdown(long s, int how) {
        var mh$ = shutdown$MH();
        try {
            return (int)mh$.invokeExact(s, how);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle socket$MH() {
        return RuntimeHelper.requireNonNull(constants$1911.const$2,"socket");
    }
    /**
     * {@snippet :
     * SOCKET socket(int af, int type, int protocol);
     * }
     */
    public static long socket(int af, int type, int protocol) {
        var mh$ = socket$MH();
        try {
            return (long)mh$.invokeExact(af, type, protocol);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gethostbyaddr$MH() {
        return RuntimeHelper.requireNonNull(constants$1911.const$3,"gethostbyaddr");
    }
    /**
     * {@snippet :
     * struct hostent* gethostbyaddr(char* addr, int len, int type);
     * }
     */
    public static MemorySegment gethostbyaddr(MemorySegment addr, int len, int type) {
        var mh$ = gethostbyaddr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(addr, len, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gethostbyname$MH() {
        return RuntimeHelper.requireNonNull(constants$1911.const$4,"gethostbyname");
    }
    /**
     * {@snippet :
     * struct hostent* gethostbyname(char* name);
     * }
     */
    public static MemorySegment gethostbyname(MemorySegment name) {
        var mh$ = gethostbyname$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gethostname$MH() {
        return RuntimeHelper.requireNonNull(constants$1911.const$5,"gethostname");
    }
    /**
     * {@snippet :
     * int gethostname(char* name, int namelen);
     * }
     */
    public static int gethostname(MemorySegment name, int namelen) {
        var mh$ = gethostname$MH();
        try {
            return (int)mh$.invokeExact(name, namelen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getservbyport$MH() {
        return RuntimeHelper.requireNonNull(constants$1912.const$0,"getservbyport");
    }
    /**
     * {@snippet :
     * struct servent* getservbyport(int port, char* proto);
     * }
     */
    public static MemorySegment getservbyport(int port, MemorySegment proto) {
        var mh$ = getservbyport$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(port, proto);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getservbyname$MH() {
        return RuntimeHelper.requireNonNull(constants$1912.const$1,"getservbyname");
    }
    /**
     * {@snippet :
     * struct servent* getservbyname(char* name, char* proto);
     * }
     */
    public static MemorySegment getservbyname(MemorySegment name, MemorySegment proto) {
        var mh$ = getservbyname$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(name, proto);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getprotobynumber$MH() {
        return RuntimeHelper.requireNonNull(constants$1912.const$2,"getprotobynumber");
    }
    /**
     * {@snippet :
     * struct protoent* getprotobynumber(int proto);
     * }
     */
    public static MemorySegment getprotobynumber(int proto) {
        var mh$ = getprotobynumber$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(proto);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getprotobyname$MH() {
        return RuntimeHelper.requireNonNull(constants$1912.const$3,"getprotobyname");
    }
    /**
     * {@snippet :
     * struct protoent* getprotobyname(char* name);
     * }
     */
    public static MemorySegment getprotobyname(MemorySegment name) {
        var mh$ = getprotobyname$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAStartup$MH() {
        return RuntimeHelper.requireNonNull(constants$1912.const$4,"WSAStartup");
    }
    /**
     * {@snippet :
     * int WSAStartup(WORD wVersionRequired, LPWSADATA lpWSAData);
     * }
     */
    public static int WSAStartup(short wVersionRequired, MemorySegment lpWSAData) {
        var mh$ = WSAStartup$MH();
        try {
            return (int)mh$.invokeExact(wVersionRequired, lpWSAData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSACleanup$MH() {
        return RuntimeHelper.requireNonNull(constants$1912.const$5,"WSACleanup");
    }
    /**
     * {@snippet :
     * int WSACleanup();
     * }
     */
    public static int WSACleanup() {
        var mh$ = WSACleanup$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSASetLastError$MH() {
        return RuntimeHelper.requireNonNull(constants$1913.const$0,"WSASetLastError");
    }
    /**
     * {@snippet :
     * void WSASetLastError(int iError);
     * }
     */
    public static void WSASetLastError(int iError) {
        var mh$ = WSASetLastError$MH();
        try {
            mh$.invokeExact(iError);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAGetLastError$MH() {
        return RuntimeHelper.requireNonNull(constants$1913.const$1,"WSAGetLastError");
    }
    /**
     * {@snippet :
     * int WSAGetLastError();
     * }
     */
    public static int WSAGetLastError() {
        var mh$ = WSAGetLastError$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAIsBlocking$MH() {
        return RuntimeHelper.requireNonNull(constants$1913.const$2,"WSAIsBlocking");
    }
    /**
     * {@snippet :
     * BOOL WSAIsBlocking();
     * }
     */
    public static int WSAIsBlocking() {
        var mh$ = WSAIsBlocking$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAUnhookBlockingHook$MH() {
        return RuntimeHelper.requireNonNull(constants$1913.const$3,"WSAUnhookBlockingHook");
    }
    /**
     * {@snippet :
     * int WSAUnhookBlockingHook();
     * }
     */
    public static int WSAUnhookBlockingHook() {
        var mh$ = WSAUnhookBlockingHook$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSASetBlockingHook$MH() {
        return RuntimeHelper.requireNonNull(constants$1913.const$4,"WSASetBlockingHook");
    }
    /**
     * {@snippet :
     * FARPROC WSASetBlockingHook(FARPROC lpBlockFunc);
     * }
     */
    public static MemorySegment WSASetBlockingHook(MemorySegment lpBlockFunc) {
        var mh$ = WSASetBlockingHook$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpBlockFunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSACancelBlockingCall$MH() {
        return RuntimeHelper.requireNonNull(constants$1913.const$5,"WSACancelBlockingCall");
    }
    /**
     * {@snippet :
     * int WSACancelBlockingCall();
     * }
     */
    public static int WSACancelBlockingCall() {
        var mh$ = WSACancelBlockingCall$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAAsyncGetServByName$MH() {
        return RuntimeHelper.requireNonNull(constants$1914.const$1,"WSAAsyncGetServByName");
    }
    /**
     * {@snippet :
     * HANDLE WSAAsyncGetServByName(HWND hWnd, u_int wMsg, char* name, char* proto, char* buf, int buflen);
     * }
     */
    public static MemorySegment WSAAsyncGetServByName(MemorySegment hWnd, int wMsg, MemorySegment name, MemorySegment proto, MemorySegment buf, int buflen) {
        var mh$ = WSAAsyncGetServByName$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hWnd, wMsg, name, proto, buf, buflen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAAsyncGetServByPort$MH() {
        return RuntimeHelper.requireNonNull(constants$1914.const$3,"WSAAsyncGetServByPort");
    }
    /**
     * {@snippet :
     * HANDLE WSAAsyncGetServByPort(HWND hWnd, u_int wMsg, int port, char* proto, char* buf, int buflen);
     * }
     */
    public static MemorySegment WSAAsyncGetServByPort(MemorySegment hWnd, int wMsg, int port, MemorySegment proto, MemorySegment buf, int buflen) {
        var mh$ = WSAAsyncGetServByPort$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hWnd, wMsg, port, proto, buf, buflen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAAsyncGetProtoByName$MH() {
        return RuntimeHelper.requireNonNull(constants$1914.const$5,"WSAAsyncGetProtoByName");
    }
    /**
     * {@snippet :
     * HANDLE WSAAsyncGetProtoByName(HWND hWnd, u_int wMsg, char* name, char* buf, int buflen);
     * }
     */
    public static MemorySegment WSAAsyncGetProtoByName(MemorySegment hWnd, int wMsg, MemorySegment name, MemorySegment buf, int buflen) {
        var mh$ = WSAAsyncGetProtoByName$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hWnd, wMsg, name, buf, buflen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAAsyncGetProtoByNumber$MH() {
        return RuntimeHelper.requireNonNull(constants$1915.const$1,"WSAAsyncGetProtoByNumber");
    }
    /**
     * {@snippet :
     * HANDLE WSAAsyncGetProtoByNumber(HWND hWnd, u_int wMsg, int number, char* buf, int buflen);
     * }
     */
    public static MemorySegment WSAAsyncGetProtoByNumber(MemorySegment hWnd, int wMsg, int number, MemorySegment buf, int buflen) {
        var mh$ = WSAAsyncGetProtoByNumber$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hWnd, wMsg, number, buf, buflen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAAsyncGetHostByName$MH() {
        return RuntimeHelper.requireNonNull(constants$1915.const$2,"WSAAsyncGetHostByName");
    }
    /**
     * {@snippet :
     * HANDLE WSAAsyncGetHostByName(HWND hWnd, u_int wMsg, char* name, char* buf, int buflen);
     * }
     */
    public static MemorySegment WSAAsyncGetHostByName(MemorySegment hWnd, int wMsg, MemorySegment name, MemorySegment buf, int buflen) {
        var mh$ = WSAAsyncGetHostByName$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hWnd, wMsg, name, buf, buflen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAAsyncGetHostByAddr$MH() {
        return RuntimeHelper.requireNonNull(constants$1915.const$4,"WSAAsyncGetHostByAddr");
    }
    /**
     * {@snippet :
     * HANDLE WSAAsyncGetHostByAddr(HWND hWnd, u_int wMsg, char* addr, int len, int type, char* buf, int buflen);
     * }
     */
    public static MemorySegment WSAAsyncGetHostByAddr(MemorySegment hWnd, int wMsg, MemorySegment addr, int len, int type, MemorySegment buf, int buflen) {
        var mh$ = WSAAsyncGetHostByAddr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hWnd, wMsg, addr, len, type, buf, buflen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSACancelAsyncRequest$MH() {
        return RuntimeHelper.requireNonNull(constants$1915.const$5,"WSACancelAsyncRequest");
    }
    /**
     * {@snippet :
     * int WSACancelAsyncRequest(HANDLE hAsyncTaskHandle);
     * }
     */
    public static int WSACancelAsyncRequest(MemorySegment hAsyncTaskHandle) {
        var mh$ = WSACancelAsyncRequest$MH();
        try {
            return (int)mh$.invokeExact(hAsyncTaskHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAAsyncSelect$MH() {
        return RuntimeHelper.requireNonNull(constants$1916.const$0,"WSAAsyncSelect");
    }
    /**
     * {@snippet :
     * int WSAAsyncSelect(SOCKET s, HWND hWnd, u_int wMsg, long lEvent);
     * }
     */
    public static int WSAAsyncSelect(long s, MemorySegment hWnd, int wMsg, int lEvent) {
        var mh$ = WSAAsyncSelect$MH();
        try {
            return (int)mh$.invokeExact(s, hWnd, wMsg, lEvent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSARecvEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1916.const$2,"WSARecvEx");
    }
    /**
     * {@snippet :
     * int WSARecvEx(SOCKET s, char* buf, int len, int* flags);
     * }
     */
    public static int WSARecvEx(long s, MemorySegment buf, int len, MemorySegment flags) {
        var mh$ = WSARecvEx$MH();
        try {
            return (int)mh$.invokeExact(s, buf, len, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _TRANSMIT_FILE_BUFFERS* PTRANSMIT_FILE_BUFFERS;
     * }
     */
    public static final AddressLayout PTRANSMIT_FILE_BUFFERS = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _TRANSMIT_FILE_BUFFERS* LPTRANSMIT_FILE_BUFFERS;
     * }
     */
    public static final AddressLayout LPTRANSMIT_FILE_BUFFERS = RuntimeHelper.POINTER;
    public static MethodHandle TransmitFile$MH() {
        return RuntimeHelper.requireNonNull(constants$1917.const$3,"TransmitFile");
    }
    /**
     * {@snippet :
     * BOOL TransmitFile(SOCKET hSocket, HANDLE hFile, DWORD nNumberOfBytesToWrite, DWORD nNumberOfBytesPerSend, LPOVERLAPPED lpOverlapped, LPTRANSMIT_FILE_BUFFERS lpTransmitBuffers, DWORD dwReserved);
     * }
     */
    public static int TransmitFile(long hSocket, MemorySegment hFile, int nNumberOfBytesToWrite, int nNumberOfBytesPerSend, MemorySegment lpOverlapped, MemorySegment lpTransmitBuffers, int dwReserved) {
        var mh$ = TransmitFile$MH();
        try {
            return (int)mh$.invokeExact(hSocket, hFile, nNumberOfBytesToWrite, nNumberOfBytesPerSend, lpOverlapped, lpTransmitBuffers, dwReserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AcceptEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1917.const$5,"AcceptEx");
    }
    /**
     * {@snippet :
     * BOOL AcceptEx(SOCKET sListenSocket, SOCKET sAcceptSocket, PVOID lpOutputBuffer, DWORD dwReceiveDataLength, DWORD dwLocalAddressLength, DWORD dwRemoteAddressLength, LPDWORD lpdwBytesReceived, LPOVERLAPPED lpOverlapped);
     * }
     */
    public static int AcceptEx(long sListenSocket, long sAcceptSocket, MemorySegment lpOutputBuffer, int dwReceiveDataLength, int dwLocalAddressLength, int dwRemoteAddressLength, MemorySegment lpdwBytesReceived, MemorySegment lpOverlapped) {
        var mh$ = AcceptEx$MH();
        try {
            return (int)mh$.invokeExact(sListenSocket, sAcceptSocket, lpOutputBuffer, dwReceiveDataLength, dwLocalAddressLength, dwRemoteAddressLength, lpdwBytesReceived, lpOverlapped);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetAcceptExSockaddrs$MH() {
        return RuntimeHelper.requireNonNull(constants$1918.const$1,"GetAcceptExSockaddrs");
    }
    /**
     * {@snippet :
     * void GetAcceptExSockaddrs(PVOID lpOutputBuffer, DWORD dwReceiveDataLength, DWORD dwLocalAddressLength, DWORD dwRemoteAddressLength, struct sockaddr** LocalSockaddr, LPINT LocalSockaddrLength, struct sockaddr** RemoteSockaddr, LPINT RemoteSockaddrLength);
     * }
     */
    public static void GetAcceptExSockaddrs(MemorySegment lpOutputBuffer, int dwReceiveDataLength, int dwLocalAddressLength, int dwRemoteAddressLength, MemorySegment LocalSockaddr, MemorySegment LocalSockaddrLength, MemorySegment RemoteSockaddr, MemorySegment RemoteSockaddrLength) {
        var mh$ = GetAcceptExSockaddrs$MH();
        try {
            mh$.invokeExact(lpOutputBuffer, dwReceiveDataLength, dwLocalAddressLength, dwRemoteAddressLength, LocalSockaddr, LocalSockaddrLength, RemoteSockaddr, RemoteSockaddrLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct sockaddr* PSOCKADDR;
     * }
     */
    public static final AddressLayout PSOCKADDR = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct sockaddr* LPSOCKADDR;
     * }
     */
    public static final AddressLayout LPSOCKADDR = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct sockaddr_in* PSOCKADDR_IN;
     * }
     */
    public static final AddressLayout PSOCKADDR_IN = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct sockaddr_in* LPSOCKADDR_IN;
     * }
     */
    public static final AddressLayout LPSOCKADDR_IN = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct linger* PLINGER;
     * }
     */
    public static final AddressLayout PLINGER = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct linger* LPLINGER;
     * }
     */
    public static final AddressLayout LPLINGER = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct fd_set* PFD_SET;
     * }
     */
    public static final AddressLayout PFD_SET = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct fd_set* LPFD_SET;
     * }
     */
    public static final AddressLayout LPFD_SET = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct hostent* PHOSTENT;
     * }
     */
    public static final AddressLayout PHOSTENT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct hostent* LPHOSTENT;
     * }
     */
    public static final AddressLayout LPHOSTENT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct servent* PSERVENT;
     * }
     */
    public static final AddressLayout PSERVENT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct servent* LPSERVENT;
     * }
     */
    public static final AddressLayout LPSERVENT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct protoent* PPROTOENT;
     * }
     */
    public static final AddressLayout PPROTOENT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct protoent* LPPROTOENT;
     * }
     */
    public static final AddressLayout LPPROTOENT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct timeval* PTIMEVAL;
     * }
     */
    public static final AddressLayout PTIMEVAL = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct timeval* LPTIMEVAL;
     * }
     */
    public static final AddressLayout LPTIMEVAL = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef unsigned int ALG_ID;
     * }
     */
    public static final OfInt ALG_ID = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long long HCRYPTPROV;
     * }
     */
    public static final OfLong HCRYPTPROV = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long HCRYPTKEY;
     * }
     */
    public static final OfLong HCRYPTKEY = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long HCRYPTHASH;
     * }
     */
    public static final OfLong HCRYPTHASH = JAVA_LONG;
    /**
     * {@snippet :
     * typedef struct _CMS_KEY_INFO* PCMS_KEY_INFO;
     * }
     */
    public static final AddressLayout PCMS_KEY_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _HMAC_Info* PHMAC_INFO;
     * }
     */
    public static final AddressLayout PHMAC_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _SCHANNEL_ALG* PSCHANNEL_ALG;
     * }
     */
    public static final AddressLayout PSCHANNEL_ALG = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _KEY_TYPE_SUBTYPE* PKEY_TYPE_SUBTYPE;
     * }
     */
    public static final AddressLayout PKEY_TYPE_SUBTYPE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPT_RC4_KEY_STATE* PCRYPT_RC4_KEY_STATE;
     * }
     */
    public static final AddressLayout PCRYPT_RC4_KEY_STATE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPT_DES_KEY_STATE* PCRYPT_DES_KEY_STATE;
     * }
     */
    public static final AddressLayout PCRYPT_DES_KEY_STATE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPT_3DES_KEY_STATE* PCRYPT_3DES_KEY_STATE;
     * }
     */
    public static final AddressLayout PCRYPT_3DES_KEY_STATE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPT_AES_128_KEY_STATE* PCRYPT_AES_128_KEY_STATE;
     * }
     */
    public static final AddressLayout PCRYPT_AES_128_KEY_STATE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPT_AES_256_KEY_STATE* PCRYPT_AES_256_KEY_STATE;
     * }
     */
    public static final AddressLayout PCRYPT_AES_256_KEY_STATE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPTOAPI_BLOB* PCRYPT_INTEGER_BLOB;
     * }
     */
    public static final AddressLayout PCRYPT_INTEGER_BLOB = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPTOAPI_BLOB* PCRYPT_UINT_BLOB;
     * }
     */
    public static final AddressLayout PCRYPT_UINT_BLOB = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPTOAPI_BLOB* PCRYPT_OBJID_BLOB;
     * }
     */
    public static final AddressLayout PCRYPT_OBJID_BLOB = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPTOAPI_BLOB* PCERT_NAME_BLOB;
     * }
     */
    public static final AddressLayout PCERT_NAME_BLOB = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPTOAPI_BLOB* PCERT_RDN_VALUE_BLOB;
     * }
     */
    public static final AddressLayout PCERT_RDN_VALUE_BLOB = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPTOAPI_BLOB* PCERT_BLOB;
     * }
     */
    public static final AddressLayout PCERT_BLOB = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPTOAPI_BLOB* PCRL_BLOB;
     * }
     */
    public static final AddressLayout PCRL_BLOB = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPTOAPI_BLOB* PDATA_BLOB;
     * }
     */
    public static final AddressLayout PDATA_BLOB = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPTOAPI_BLOB* PCRYPT_DATA_BLOB;
     * }
     */
    public static final AddressLayout PCRYPT_DATA_BLOB = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPTOAPI_BLOB* PCRYPT_HASH_BLOB;
     * }
     */
    public static final AddressLayout PCRYPT_HASH_BLOB = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPTOAPI_BLOB* PCRYPT_DIGEST_BLOB;
     * }
     */
    public static final AddressLayout PCRYPT_DIGEST_BLOB = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPTOAPI_BLOB* PCRYPT_DER_BLOB;
     * }
     */
    public static final AddressLayout PCRYPT_DER_BLOB = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPTOAPI_BLOB* PCRYPT_ATTR_BLOB;
     * }
     */
    public static final AddressLayout PCRYPT_ATTR_BLOB = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CMS_DH_KEY_INFO* PCMS_DH_KEY_INFO;
     * }
     */
    public static final AddressLayout PCMS_DH_KEY_INFO = RuntimeHelper.POINTER;
    public static MethodHandle CryptAcquireContextA$MH() {
        return RuntimeHelper.requireNonNull(constants$1930.const$3,"CryptAcquireContextA");
    }
    /**
     * {@snippet :
     * BOOL CryptAcquireContextA(HCRYPTPROV* phProv, LPCSTR szContainer, LPCSTR szProvider, DWORD dwProvType, DWORD dwFlags);
     * }
     */
    public static int CryptAcquireContextA(MemorySegment phProv, MemorySegment szContainer, MemorySegment szProvider, int dwProvType, int dwFlags) {
        var mh$ = CryptAcquireContextA$MH();
        try {
            return (int)mh$.invokeExact(phProv, szContainer, szProvider, dwProvType, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptAcquireContextW$MH() {
        return RuntimeHelper.requireNonNull(constants$1930.const$4,"CryptAcquireContextW");
    }
    /**
     * {@snippet :
     * BOOL CryptAcquireContextW(HCRYPTPROV* phProv, LPCWSTR szContainer, LPCWSTR szProvider, DWORD dwProvType, DWORD dwFlags);
     * }
     */
    public static int CryptAcquireContextW(MemorySegment phProv, MemorySegment szContainer, MemorySegment szProvider, int dwProvType, int dwFlags) {
        var mh$ = CryptAcquireContextW$MH();
        try {
            return (int)mh$.invokeExact(phProv, szContainer, szProvider, dwProvType, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptReleaseContext$MH() {
        return RuntimeHelper.requireNonNull(constants$1930.const$5,"CryptReleaseContext");
    }
    /**
     * {@snippet :
     * BOOL CryptReleaseContext(HCRYPTPROV hProv, DWORD dwFlags);
     * }
     */
    public static int CryptReleaseContext(long hProv, int dwFlags) {
        var mh$ = CryptReleaseContext$MH();
        try {
            return (int)mh$.invokeExact(hProv, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptGenKey$MH() {
        return RuntimeHelper.requireNonNull(constants$1931.const$1,"CryptGenKey");
    }
    /**
     * {@snippet :
     * BOOL CryptGenKey(HCRYPTPROV hProv, ALG_ID Algid, DWORD dwFlags, HCRYPTKEY* phKey);
     * }
     */
    public static int CryptGenKey(long hProv, int Algid, int dwFlags, MemorySegment phKey) {
        var mh$ = CryptGenKey$MH();
        try {
            return (int)mh$.invokeExact(hProv, Algid, dwFlags, phKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptDeriveKey$MH() {
        return RuntimeHelper.requireNonNull(constants$1931.const$3,"CryptDeriveKey");
    }
    /**
     * {@snippet :
     * BOOL CryptDeriveKey(HCRYPTPROV hProv, ALG_ID Algid, HCRYPTHASH hBaseData, DWORD dwFlags, HCRYPTKEY* phKey);
     * }
     */
    public static int CryptDeriveKey(long hProv, int Algid, long hBaseData, int dwFlags, MemorySegment phKey) {
        var mh$ = CryptDeriveKey$MH();
        try {
            return (int)mh$.invokeExact(hProv, Algid, hBaseData, dwFlags, phKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptDestroyKey$MH() {
        return RuntimeHelper.requireNonNull(constants$1931.const$4,"CryptDestroyKey");
    }
    /**
     * {@snippet :
     * BOOL CryptDestroyKey(HCRYPTKEY hKey);
     * }
     */
    public static int CryptDestroyKey(long hKey) {
        var mh$ = CryptDestroyKey$MH();
        try {
            return (int)mh$.invokeExact(hKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptSetKeyParam$MH() {
        return RuntimeHelper.requireNonNull(constants$1931.const$6,"CryptSetKeyParam");
    }
    /**
     * {@snippet :
     * BOOL CryptSetKeyParam(HCRYPTKEY hKey, DWORD dwParam, const BYTE* pbData, DWORD dwFlags);
     * }
     */
    public static int CryptSetKeyParam(long hKey, int dwParam, MemorySegment pbData, int dwFlags) {
        var mh$ = CryptSetKeyParam$MH();
        try {
            return (int)mh$.invokeExact(hKey, dwParam, pbData, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptGetKeyParam$MH() {
        return RuntimeHelper.requireNonNull(constants$1932.const$1,"CryptGetKeyParam");
    }
    /**
     * {@snippet :
     * BOOL CryptGetKeyParam(HCRYPTKEY hKey, DWORD dwParam, BYTE* pbData, DWORD* pdwDataLen, DWORD dwFlags);
     * }
     */
    public static int CryptGetKeyParam(long hKey, int dwParam, MemorySegment pbData, MemorySegment pdwDataLen, int dwFlags) {
        var mh$ = CryptGetKeyParam$MH();
        try {
            return (int)mh$.invokeExact(hKey, dwParam, pbData, pdwDataLen, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptSetHashParam$MH() {
        return RuntimeHelper.requireNonNull(constants$1932.const$2,"CryptSetHashParam");
    }
    /**
     * {@snippet :
     * BOOL CryptSetHashParam(HCRYPTHASH hHash, DWORD dwParam, const BYTE* pbData, DWORD dwFlags);
     * }
     */
    public static int CryptSetHashParam(long hHash, int dwParam, MemorySegment pbData, int dwFlags) {
        var mh$ = CryptSetHashParam$MH();
        try {
            return (int)mh$.invokeExact(hHash, dwParam, pbData, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptGetHashParam$MH() {
        return RuntimeHelper.requireNonNull(constants$1932.const$3,"CryptGetHashParam");
    }
    /**
     * {@snippet :
     * BOOL CryptGetHashParam(HCRYPTHASH hHash, DWORD dwParam, BYTE* pbData, DWORD* pdwDataLen, DWORD dwFlags);
     * }
     */
    public static int CryptGetHashParam(long hHash, int dwParam, MemorySegment pbData, MemorySegment pdwDataLen, int dwFlags) {
        var mh$ = CryptGetHashParam$MH();
        try {
            return (int)mh$.invokeExact(hHash, dwParam, pbData, pdwDataLen, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptSetProvParam$MH() {
        return RuntimeHelper.requireNonNull(constants$1932.const$4,"CryptSetProvParam");
    }
    /**
     * {@snippet :
     * BOOL CryptSetProvParam(HCRYPTPROV hProv, DWORD dwParam, const BYTE* pbData, DWORD dwFlags);
     * }
     */
    public static int CryptSetProvParam(long hProv, int dwParam, MemorySegment pbData, int dwFlags) {
        var mh$ = CryptSetProvParam$MH();
        try {
            return (int)mh$.invokeExact(hProv, dwParam, pbData, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptGetProvParam$MH() {
        return RuntimeHelper.requireNonNull(constants$1932.const$5,"CryptGetProvParam");
    }
    /**
     * {@snippet :
     * BOOL CryptGetProvParam(HCRYPTPROV hProv, DWORD dwParam, BYTE* pbData, DWORD* pdwDataLen, DWORD dwFlags);
     * }
     */
    public static int CryptGetProvParam(long hProv, int dwParam, MemorySegment pbData, MemorySegment pdwDataLen, int dwFlags) {
        var mh$ = CryptGetProvParam$MH();
        try {
            return (int)mh$.invokeExact(hProv, dwParam, pbData, pdwDataLen, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptGenRandom$MH() {
        return RuntimeHelper.requireNonNull(constants$1933.const$0,"CryptGenRandom");
    }
    /**
     * {@snippet :
     * BOOL CryptGenRandom(HCRYPTPROV hProv, DWORD dwLen, BYTE* pbBuffer);
     * }
     */
    public static int CryptGenRandom(long hProv, int dwLen, MemorySegment pbBuffer) {
        var mh$ = CryptGenRandom$MH();
        try {
            return (int)mh$.invokeExact(hProv, dwLen, pbBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptGetUserKey$MH() {
        return RuntimeHelper.requireNonNull(constants$1933.const$1,"CryptGetUserKey");
    }
    /**
     * {@snippet :
     * BOOL CryptGetUserKey(HCRYPTPROV hProv, DWORD dwKeySpec, HCRYPTKEY* phUserKey);
     * }
     */
    public static int CryptGetUserKey(long hProv, int dwKeySpec, MemorySegment phUserKey) {
        var mh$ = CryptGetUserKey$MH();
        try {
            return (int)mh$.invokeExact(hProv, dwKeySpec, phUserKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptExportKey$MH() {
        return RuntimeHelper.requireNonNull(constants$1933.const$3,"CryptExportKey");
    }
    /**
     * {@snippet :
     * BOOL CryptExportKey(HCRYPTKEY hKey, HCRYPTKEY hExpKey, DWORD dwBlobType, DWORD dwFlags, BYTE* pbData, DWORD* pdwDataLen);
     * }
     */
    public static int CryptExportKey(long hKey, long hExpKey, int dwBlobType, int dwFlags, MemorySegment pbData, MemorySegment pdwDataLen) {
        var mh$ = CryptExportKey$MH();
        try {
            return (int)mh$.invokeExact(hKey, hExpKey, dwBlobType, dwFlags, pbData, pdwDataLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptImportKey$MH() {
        return RuntimeHelper.requireNonNull(constants$1933.const$5,"CryptImportKey");
    }
    /**
     * {@snippet :
     * BOOL CryptImportKey(HCRYPTPROV hProv, const BYTE* pbData, DWORD dwDataLen, HCRYPTKEY hPubKey, DWORD dwFlags, HCRYPTKEY* phKey);
     * }
     */
    public static int CryptImportKey(long hProv, MemorySegment pbData, int dwDataLen, long hPubKey, int dwFlags, MemorySegment phKey) {
        var mh$ = CryptImportKey$MH();
        try {
            return (int)mh$.invokeExact(hProv, pbData, dwDataLen, hPubKey, dwFlags, phKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptEncrypt$MH() {
        return RuntimeHelper.requireNonNull(constants$1934.const$1,"CryptEncrypt");
    }
    /**
     * {@snippet :
     * BOOL CryptEncrypt(HCRYPTKEY hKey, HCRYPTHASH hHash, BOOL Final, DWORD dwFlags, BYTE* pbData, DWORD* pdwDataLen, DWORD dwBufLen);
     * }
     */
    public static int CryptEncrypt(long hKey, long hHash, int Final, int dwFlags, MemorySegment pbData, MemorySegment pdwDataLen, int dwBufLen) {
        var mh$ = CryptEncrypt$MH();
        try {
            return (int)mh$.invokeExact(hKey, hHash, Final, dwFlags, pbData, pdwDataLen, dwBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptDecrypt$MH() {
        return RuntimeHelper.requireNonNull(constants$1934.const$2,"CryptDecrypt");
    }
    /**
     * {@snippet :
     * BOOL CryptDecrypt(HCRYPTKEY hKey, HCRYPTHASH hHash, BOOL Final, DWORD dwFlags, BYTE* pbData, DWORD* pdwDataLen);
     * }
     */
    public static int CryptDecrypt(long hKey, long hHash, int Final, int dwFlags, MemorySegment pbData, MemorySegment pdwDataLen) {
        var mh$ = CryptDecrypt$MH();
        try {
            return (int)mh$.invokeExact(hKey, hHash, Final, dwFlags, pbData, pdwDataLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptCreateHash$MH() {
        return RuntimeHelper.requireNonNull(constants$1934.const$3,"CryptCreateHash");
    }
    /**
     * {@snippet :
     * BOOL CryptCreateHash(HCRYPTPROV hProv, ALG_ID Algid, HCRYPTKEY hKey, DWORD dwFlags, HCRYPTHASH* phHash);
     * }
     */
    public static int CryptCreateHash(long hProv, int Algid, long hKey, int dwFlags, MemorySegment phHash) {
        var mh$ = CryptCreateHash$MH();
        try {
            return (int)mh$.invokeExact(hProv, Algid, hKey, dwFlags, phHash);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptHashData$MH() {
        return RuntimeHelper.requireNonNull(constants$1934.const$4,"CryptHashData");
    }
    /**
     * {@snippet :
     * BOOL CryptHashData(HCRYPTHASH hHash, const BYTE* pbData, DWORD dwDataLen, DWORD dwFlags);
     * }
     */
    public static int CryptHashData(long hHash, MemorySegment pbData, int dwDataLen, int dwFlags) {
        var mh$ = CryptHashData$MH();
        try {
            return (int)mh$.invokeExact(hHash, pbData, dwDataLen, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptHashSessionKey$MH() {
        return RuntimeHelper.requireNonNull(constants$1934.const$5,"CryptHashSessionKey");
    }
    /**
     * {@snippet :
     * BOOL CryptHashSessionKey(HCRYPTHASH hHash, HCRYPTKEY hKey, DWORD dwFlags);
     * }
     */
    public static int CryptHashSessionKey(long hHash, long hKey, int dwFlags) {
        var mh$ = CryptHashSessionKey$MH();
        try {
            return (int)mh$.invokeExact(hHash, hKey, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptDestroyHash$MH() {
        return RuntimeHelper.requireNonNull(constants$1935.const$0,"CryptDestroyHash");
    }
    /**
     * {@snippet :
     * BOOL CryptDestroyHash(HCRYPTHASH hHash);
     * }
     */
    public static int CryptDestroyHash(long hHash) {
        var mh$ = CryptDestroyHash$MH();
        try {
            return (int)mh$.invokeExact(hHash);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptSignHashA$MH() {
        return RuntimeHelper.requireNonNull(constants$1935.const$2,"CryptSignHashA");
    }
    /**
     * {@snippet :
     * BOOL CryptSignHashA(HCRYPTHASH hHash, DWORD dwKeySpec, LPCSTR szDescription, DWORD dwFlags, BYTE* pbSignature, DWORD* pdwSigLen);
     * }
     */
    public static int CryptSignHashA(long hHash, int dwKeySpec, MemorySegment szDescription, int dwFlags, MemorySegment pbSignature, MemorySegment pdwSigLen) {
        var mh$ = CryptSignHashA$MH();
        try {
            return (int)mh$.invokeExact(hHash, dwKeySpec, szDescription, dwFlags, pbSignature, pdwSigLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptSignHashW$MH() {
        return RuntimeHelper.requireNonNull(constants$1935.const$3,"CryptSignHashW");
    }
    /**
     * {@snippet :
     * BOOL CryptSignHashW(HCRYPTHASH hHash, DWORD dwKeySpec, LPCWSTR szDescription, DWORD dwFlags, BYTE* pbSignature, DWORD* pdwSigLen);
     * }
     */
    public static int CryptSignHashW(long hHash, int dwKeySpec, MemorySegment szDescription, int dwFlags, MemorySegment pbSignature, MemorySegment pdwSigLen) {
        var mh$ = CryptSignHashW$MH();
        try {
            return (int)mh$.invokeExact(hHash, dwKeySpec, szDescription, dwFlags, pbSignature, pdwSigLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptVerifySignatureA$MH() {
        return RuntimeHelper.requireNonNull(constants$1935.const$5,"CryptVerifySignatureA");
    }
    /**
     * {@snippet :
     * BOOL CryptVerifySignatureA(HCRYPTHASH hHash, const BYTE* pbSignature, DWORD dwSigLen, HCRYPTKEY hPubKey, LPCSTR szDescription, DWORD dwFlags);
     * }
     */
    public static int CryptVerifySignatureA(long hHash, MemorySegment pbSignature, int dwSigLen, long hPubKey, MemorySegment szDescription, int dwFlags) {
        var mh$ = CryptVerifySignatureA$MH();
        try {
            return (int)mh$.invokeExact(hHash, pbSignature, dwSigLen, hPubKey, szDescription, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptVerifySignatureW$MH() {
        return RuntimeHelper.requireNonNull(constants$1936.const$0,"CryptVerifySignatureW");
    }
    /**
     * {@snippet :
     * BOOL CryptVerifySignatureW(HCRYPTHASH hHash, const BYTE* pbSignature, DWORD dwSigLen, HCRYPTKEY hPubKey, LPCWSTR szDescription, DWORD dwFlags);
     * }
     */
    public static int CryptVerifySignatureW(long hHash, MemorySegment pbSignature, int dwSigLen, long hPubKey, MemorySegment szDescription, int dwFlags) {
        var mh$ = CryptVerifySignatureW$MH();
        try {
            return (int)mh$.invokeExact(hHash, pbSignature, dwSigLen, hPubKey, szDescription, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptSetProviderA$MH() {
        return RuntimeHelper.requireNonNull(constants$1936.const$1,"CryptSetProviderA");
    }
    /**
     * {@snippet :
     * BOOL CryptSetProviderA(LPCSTR pszProvName, DWORD dwProvType);
     * }
     */
    public static int CryptSetProviderA(MemorySegment pszProvName, int dwProvType) {
        var mh$ = CryptSetProviderA$MH();
        try {
            return (int)mh$.invokeExact(pszProvName, dwProvType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptSetProviderW$MH() {
        return RuntimeHelper.requireNonNull(constants$1936.const$2,"CryptSetProviderW");
    }
    /**
     * {@snippet :
     * BOOL CryptSetProviderW(LPCWSTR pszProvName, DWORD dwProvType);
     * }
     */
    public static int CryptSetProviderW(MemorySegment pszProvName, int dwProvType) {
        var mh$ = CryptSetProviderW$MH();
        try {
            return (int)mh$.invokeExact(pszProvName, dwProvType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptSetProviderExA$MH() {
        return RuntimeHelper.requireNonNull(constants$1936.const$3,"CryptSetProviderExA");
    }
    /**
     * {@snippet :
     * BOOL CryptSetProviderExA(LPCSTR pszProvName, DWORD dwProvType, DWORD* pdwReserved, DWORD dwFlags);
     * }
     */
    public static int CryptSetProviderExA(MemorySegment pszProvName, int dwProvType, MemorySegment pdwReserved, int dwFlags) {
        var mh$ = CryptSetProviderExA$MH();
        try {
            return (int)mh$.invokeExact(pszProvName, dwProvType, pdwReserved, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptSetProviderExW$MH() {
        return RuntimeHelper.requireNonNull(constants$1936.const$4,"CryptSetProviderExW");
    }
    /**
     * {@snippet :
     * BOOL CryptSetProviderExW(LPCWSTR pszProvName, DWORD dwProvType, DWORD* pdwReserved, DWORD dwFlags);
     * }
     */
    public static int CryptSetProviderExW(MemorySegment pszProvName, int dwProvType, MemorySegment pdwReserved, int dwFlags) {
        var mh$ = CryptSetProviderExW$MH();
        try {
            return (int)mh$.invokeExact(pszProvName, dwProvType, pdwReserved, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptGetDefaultProviderA$MH() {
        return RuntimeHelper.requireNonNull(constants$1936.const$5,"CryptGetDefaultProviderA");
    }
    /**
     * {@snippet :
     * BOOL CryptGetDefaultProviderA(DWORD dwProvType, DWORD* pdwReserved, DWORD dwFlags, LPSTR pszProvName, DWORD* pcbProvName);
     * }
     */
    public static int CryptGetDefaultProviderA(int dwProvType, MemorySegment pdwReserved, int dwFlags, MemorySegment pszProvName, MemorySegment pcbProvName) {
        var mh$ = CryptGetDefaultProviderA$MH();
        try {
            return (int)mh$.invokeExact(dwProvType, pdwReserved, dwFlags, pszProvName, pcbProvName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptGetDefaultProviderW$MH() {
        return RuntimeHelper.requireNonNull(constants$1937.const$0,"CryptGetDefaultProviderW");
    }
    /**
     * {@snippet :
     * BOOL CryptGetDefaultProviderW(DWORD dwProvType, DWORD* pdwReserved, DWORD dwFlags, LPWSTR pszProvName, DWORD* pcbProvName);
     * }
     */
    public static int CryptGetDefaultProviderW(int dwProvType, MemorySegment pdwReserved, int dwFlags, MemorySegment pszProvName, MemorySegment pcbProvName) {
        var mh$ = CryptGetDefaultProviderW$MH();
        try {
            return (int)mh$.invokeExact(dwProvType, pdwReserved, dwFlags, pszProvName, pcbProvName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptEnumProviderTypesA$MH() {
        return RuntimeHelper.requireNonNull(constants$1937.const$2,"CryptEnumProviderTypesA");
    }
    /**
     * {@snippet :
     * BOOL CryptEnumProviderTypesA(DWORD dwIndex, DWORD* pdwReserved, DWORD dwFlags, DWORD* pdwProvType, LPSTR szTypeName, DWORD* pcbTypeName);
     * }
     */
    public static int CryptEnumProviderTypesA(int dwIndex, MemorySegment pdwReserved, int dwFlags, MemorySegment pdwProvType, MemorySegment szTypeName, MemorySegment pcbTypeName) {
        var mh$ = CryptEnumProviderTypesA$MH();
        try {
            return (int)mh$.invokeExact(dwIndex, pdwReserved, dwFlags, pdwProvType, szTypeName, pcbTypeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptEnumProviderTypesW$MH() {
        return RuntimeHelper.requireNonNull(constants$1937.const$3,"CryptEnumProviderTypesW");
    }
    /**
     * {@snippet :
     * BOOL CryptEnumProviderTypesW(DWORD dwIndex, DWORD* pdwReserved, DWORD dwFlags, DWORD* pdwProvType, LPWSTR szTypeName, DWORD* pcbTypeName);
     * }
     */
    public static int CryptEnumProviderTypesW(int dwIndex, MemorySegment pdwReserved, int dwFlags, MemorySegment pdwProvType, MemorySegment szTypeName, MemorySegment pcbTypeName) {
        var mh$ = CryptEnumProviderTypesW$MH();
        try {
            return (int)mh$.invokeExact(dwIndex, pdwReserved, dwFlags, pdwProvType, szTypeName, pcbTypeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptEnumProvidersA$MH() {
        return RuntimeHelper.requireNonNull(constants$1937.const$4,"CryptEnumProvidersA");
    }
    /**
     * {@snippet :
     * BOOL CryptEnumProvidersA(DWORD dwIndex, DWORD* pdwReserved, DWORD dwFlags, DWORD* pdwProvType, LPSTR szProvName, DWORD* pcbProvName);
     * }
     */
    public static int CryptEnumProvidersA(int dwIndex, MemorySegment pdwReserved, int dwFlags, MemorySegment pdwProvType, MemorySegment szProvName, MemorySegment pcbProvName) {
        var mh$ = CryptEnumProvidersA$MH();
        try {
            return (int)mh$.invokeExact(dwIndex, pdwReserved, dwFlags, pdwProvType, szProvName, pcbProvName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptEnumProvidersW$MH() {
        return RuntimeHelper.requireNonNull(constants$1937.const$5,"CryptEnumProvidersW");
    }
    /**
     * {@snippet :
     * BOOL CryptEnumProvidersW(DWORD dwIndex, DWORD* pdwReserved, DWORD dwFlags, DWORD* pdwProvType, LPWSTR szProvName, DWORD* pcbProvName);
     * }
     */
    public static int CryptEnumProvidersW(int dwIndex, MemorySegment pdwReserved, int dwFlags, MemorySegment pdwProvType, MemorySegment szProvName, MemorySegment pcbProvName) {
        var mh$ = CryptEnumProvidersW$MH();
        try {
            return (int)mh$.invokeExact(dwIndex, pdwReserved, dwFlags, pdwProvType, szProvName, pcbProvName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptContextAddRef$MH() {
        return RuntimeHelper.requireNonNull(constants$1938.const$0,"CryptContextAddRef");
    }
    /**
     * {@snippet :
     * BOOL CryptContextAddRef(HCRYPTPROV hProv, DWORD* pdwReserved, DWORD dwFlags);
     * }
     */
    public static int CryptContextAddRef(long hProv, MemorySegment pdwReserved, int dwFlags) {
        var mh$ = CryptContextAddRef$MH();
        try {
            return (int)mh$.invokeExact(hProv, pdwReserved, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptDuplicateKey$MH() {
        return RuntimeHelper.requireNonNull(constants$1938.const$1,"CryptDuplicateKey");
    }
    /**
     * {@snippet :
     * BOOL CryptDuplicateKey(HCRYPTKEY hKey, DWORD* pdwReserved, DWORD dwFlags, HCRYPTKEY* phKey);
     * }
     */
    public static int CryptDuplicateKey(long hKey, MemorySegment pdwReserved, int dwFlags, MemorySegment phKey) {
        var mh$ = CryptDuplicateKey$MH();
        try {
            return (int)mh$.invokeExact(hKey, pdwReserved, dwFlags, phKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptDuplicateHash$MH() {
        return RuntimeHelper.requireNonNull(constants$1938.const$2,"CryptDuplicateHash");
    }
    /**
     * {@snippet :
     * BOOL CryptDuplicateHash(HCRYPTHASH hHash, DWORD* pdwReserved, DWORD dwFlags, HCRYPTHASH* phHash);
     * }
     */
    public static int CryptDuplicateHash(long hHash, MemorySegment pdwReserved, int dwFlags, MemorySegment phHash) {
        var mh$ = CryptDuplicateHash$MH();
        try {
            return (int)mh$.invokeExact(hHash, pdwReserved, dwFlags, phHash);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetEncSChannel$MH() {
        return RuntimeHelper.requireNonNull(constants$1938.const$3,"GetEncSChannel");
    }
    /**
     * {@snippet :
     * BOOL GetEncSChannel(BYTE** pData, DWORD* dwDecSize);
     * }
     */
    public static int GetEncSChannel(MemorySegment pData, MemorySegment dwDecSize) {
        var mh$ = GetEncSChannel$MH();
        try {
            return (int)mh$.invokeExact(pData, dwDecSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef long NTSTATUS;
     * }
     */
    public static final OfInt NTSTATUS = JAVA_INT;
    /**
     * {@snippet :
     * typedef long* PNTSTATUS;
     * }
     */
    public static final AddressLayout PNTSTATUS = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO* PBCRYPT_AUTHENTICATED_CIPHER_MODE_INFO;
     * }
     */
    public static final AddressLayout PBCRYPT_AUTHENTICATED_CIPHER_MODE_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _BCryptBuffer* PBCryptBuffer;
     * }
     */
    public static final AddressLayout PBCryptBuffer = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _BCryptBufferDesc* PBCryptBufferDesc;
     * }
     */
    public static final AddressLayout PBCryptBufferDesc = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef void* BCRYPT_HANDLE;
     * }
     */
    public static final AddressLayout BCRYPT_HANDLE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef void* BCRYPT_ALG_HANDLE;
     * }
     */
    public static final AddressLayout BCRYPT_ALG_HANDLE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef void* BCRYPT_KEY_HANDLE;
     * }
     */
    public static final AddressLayout BCRYPT_KEY_HANDLE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef void* BCRYPT_HASH_HANDLE;
     * }
     */
    public static final AddressLayout BCRYPT_HASH_HANDLE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef void* BCRYPT_SECRET_HANDLE;
     * }
     */
    public static final AddressLayout BCRYPT_SECRET_HANDLE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _BCRYPT_ECCKEY_BLOB* PBCRYPT_ECCKEY_BLOB;
     * }
     */
    public static final AddressLayout PBCRYPT_ECCKEY_BLOB = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _SSL_ECCKEY_BLOB* PSSL_ECCKEY_BLOB;
     * }
     */
    public static final AddressLayout PSSL_ECCKEY_BLOB = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * enum .BCRYPT_ECC_PRIME_SHORT_WEIERSTRASS_CURVE = 1;
     * }
     */
    public static int BCRYPT_ECC_PRIME_SHORT_WEIERSTRASS_CURVE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .BCRYPT_ECC_PRIME_TWISTED_EDWARDS_CURVE = 2;
     * }
     */
    public static int BCRYPT_ECC_PRIME_TWISTED_EDWARDS_CURVE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .BCRYPT_ECC_PRIME_MONTGOMERY_CURVE = 3;
     * }
     */
    public static int BCRYPT_ECC_PRIME_MONTGOMERY_CURVE() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .BCRYPT_NO_CURVE_GENERATION_ALG_ID = 0;
     * }
     */
    public static int BCRYPT_NO_CURVE_GENERATION_ALG_ID() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * typedef struct _BCRYPT_ECCFULLKEY_BLOB* PBCRYPT_ECCFULLKEY_BLOB;
     * }
     */
    public static final AddressLayout PBCRYPT_ECCFULLKEY_BLOB = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _BCRYPT_DH_KEY_BLOB* PBCRYPT_DH_KEY_BLOB;
     * }
     */
    public static final AddressLayout PBCRYPT_DH_KEY_BLOB = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _BCRYPT_DSA_KEY_BLOB* PBCRYPT_DSA_KEY_BLOB;
     * }
     */
    public static final AddressLayout PBCRYPT_DSA_KEY_BLOB = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * enum .DSA_HASH_ALGORITHM_SHA1 = 0;
     * }
     */
    public static int DSA_HASH_ALGORITHM_SHA1() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .DSA_HASH_ALGORITHM_SHA256 = 1;
     * }
     */
    public static int DSA_HASH_ALGORITHM_SHA256() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .DSA_HASH_ALGORITHM_SHA512 = 2;
     * }
     */
    public static int DSA_HASH_ALGORITHM_SHA512() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .DSA_FIPS186_2 = 0;
     * }
     */
    public static int DSA_FIPS186_2() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .DSA_FIPS186_3 = 1;
     * }
     */
    public static int DSA_FIPS186_3() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * typedef struct _BCRYPT_DSA_KEY_BLOB_V2* PBCRYPT_DSA_KEY_BLOB_V2;
     * }
     */
    public static final AddressLayout PBCRYPT_DSA_KEY_BLOB_V2 = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _BCRYPT_KEY_DATA_BLOB_HEADER* PBCRYPT_KEY_DATA_BLOB_HEADER;
     * }
     */
    public static final AddressLayout PBCRYPT_KEY_DATA_BLOB_HEADER = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * enum .BCRYPT_HASH_OPERATION_HASH_DATA = 1;
     * }
     */
    public static int BCRYPT_HASH_OPERATION_HASH_DATA() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .BCRYPT_HASH_OPERATION_FINISH_HASH = 2;
     * }
     */
    public static int BCRYPT_HASH_OPERATION_FINISH_HASH() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .BCRYPT_OPERATION_TYPE_HASH = 1;
     * }
     */
    public static int BCRYPT_OPERATION_TYPE_HASH() {
        return (int)1L;
    }
    public static MethodHandle BCryptOpenAlgorithmProvider$MH() {
        return RuntimeHelper.requireNonNull(constants$1956.const$5,"BCryptOpenAlgorithmProvider");
    }
    /**
     * {@snippet :
     * NTSTATUS BCryptOpenAlgorithmProvider(BCRYPT_ALG_HANDLE* phAlgorithm, LPCWSTR pszAlgId, LPCWSTR pszImplementation, ULONG dwFlags);
     * }
     */
    public static int BCryptOpenAlgorithmProvider(MemorySegment phAlgorithm, MemorySegment pszAlgId, MemorySegment pszImplementation, int dwFlags) {
        var mh$ = BCryptOpenAlgorithmProvider$MH();
        try {
            return (int)mh$.invokeExact(phAlgorithm, pszAlgId, pszImplementation, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptEnumAlgorithms$MH() {
        return RuntimeHelper.requireNonNull(constants$1957.const$4,"BCryptEnumAlgorithms");
    }
    /**
     * {@snippet :
     * NTSTATUS BCryptEnumAlgorithms(ULONG dwAlgOperations, ULONG* pAlgCount, BCRYPT_ALGORITHM_IDENTIFIER** ppAlgList, ULONG dwFlags);
     * }
     */
    public static int BCryptEnumAlgorithms(int dwAlgOperations, MemorySegment pAlgCount, MemorySegment ppAlgList, int dwFlags) {
        var mh$ = BCryptEnumAlgorithms$MH();
        try {
            return (int)mh$.invokeExact(dwAlgOperations, pAlgCount, ppAlgList, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptEnumProviders$MH() {
        return RuntimeHelper.requireNonNull(constants$1958.const$1,"BCryptEnumProviders");
    }
    /**
     * {@snippet :
     * NTSTATUS BCryptEnumProviders(LPCWSTR pszAlgId, ULONG* pImplCount, BCRYPT_PROVIDER_NAME** ppImplList, ULONG dwFlags);
     * }
     */
    public static int BCryptEnumProviders(MemorySegment pszAlgId, MemorySegment pImplCount, MemorySegment ppImplList, int dwFlags) {
        var mh$ = BCryptEnumProviders$MH();
        try {
            return (int)mh$.invokeExact(pszAlgId, pImplCount, ppImplList, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptGetProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$1958.const$2,"BCryptGetProperty");
    }
    /**
     * {@snippet :
     * NTSTATUS BCryptGetProperty(BCRYPT_HANDLE hObject, LPCWSTR pszProperty, PUCHAR pbOutput, ULONG cbOutput, ULONG* pcbResult, ULONG dwFlags);
     * }
     */
    public static int BCryptGetProperty(MemorySegment hObject, MemorySegment pszProperty, MemorySegment pbOutput, int cbOutput, MemorySegment pcbResult, int dwFlags) {
        var mh$ = BCryptGetProperty$MH();
        try {
            return (int)mh$.invokeExact(hObject, pszProperty, pbOutput, cbOutput, pcbResult, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptSetProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$1958.const$3,"BCryptSetProperty");
    }
    /**
     * {@snippet :
     * NTSTATUS BCryptSetProperty(BCRYPT_HANDLE hObject, LPCWSTR pszProperty, PUCHAR pbInput, ULONG cbInput, ULONG dwFlags);
     * }
     */
    public static int BCryptSetProperty(MemorySegment hObject, MemorySegment pszProperty, MemorySegment pbInput, int cbInput, int dwFlags) {
        var mh$ = BCryptSetProperty$MH();
        try {
            return (int)mh$.invokeExact(hObject, pszProperty, pbInput, cbInput, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptCloseAlgorithmProvider$MH() {
        return RuntimeHelper.requireNonNull(constants$1958.const$4,"BCryptCloseAlgorithmProvider");
    }
    /**
     * {@snippet :
     * NTSTATUS BCryptCloseAlgorithmProvider(BCRYPT_ALG_HANDLE hAlgorithm, ULONG dwFlags);
     * }
     */
    public static int BCryptCloseAlgorithmProvider(MemorySegment hAlgorithm, int dwFlags) {
        var mh$ = BCryptCloseAlgorithmProvider$MH();
        try {
            return (int)mh$.invokeExact(hAlgorithm, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptFreeBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$1958.const$5,"BCryptFreeBuffer");
    }
    /**
     * {@snippet :
     * void BCryptFreeBuffer(PVOID pvBuffer);
     * }
     */
    public static void BCryptFreeBuffer(MemorySegment pvBuffer) {
        var mh$ = BCryptFreeBuffer$MH();
        try {
            mh$.invokeExact(pvBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptGenerateSymmetricKey$MH() {
        return RuntimeHelper.requireNonNull(constants$1959.const$1,"BCryptGenerateSymmetricKey");
    }
    /**
     * {@snippet :
     * NTSTATUS BCryptGenerateSymmetricKey(BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_KEY_HANDLE* phKey, PUCHAR pbKeyObject, ULONG cbKeyObject, PUCHAR pbSecret, ULONG cbSecret, ULONG dwFlags);
     * }
     */
    public static int BCryptGenerateSymmetricKey(MemorySegment hAlgorithm, MemorySegment phKey, MemorySegment pbKeyObject, int cbKeyObject, MemorySegment pbSecret, int cbSecret, int dwFlags) {
        var mh$ = BCryptGenerateSymmetricKey$MH();
        try {
            return (int)mh$.invokeExact(hAlgorithm, phKey, pbKeyObject, cbKeyObject, pbSecret, cbSecret, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptGenerateKeyPair$MH() {
        return RuntimeHelper.requireNonNull(constants$1959.const$2,"BCryptGenerateKeyPair");
    }
    /**
     * {@snippet :
     * NTSTATUS BCryptGenerateKeyPair(BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_KEY_HANDLE* phKey, ULONG dwLength, ULONG dwFlags);
     * }
     */
    public static int BCryptGenerateKeyPair(MemorySegment hAlgorithm, MemorySegment phKey, int dwLength, int dwFlags) {
        var mh$ = BCryptGenerateKeyPair$MH();
        try {
            return (int)mh$.invokeExact(hAlgorithm, phKey, dwLength, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptEncrypt$MH() {
        return RuntimeHelper.requireNonNull(constants$1959.const$4,"BCryptEncrypt");
    }
    /**
     * {@snippet :
     * NTSTATUS BCryptEncrypt(BCRYPT_KEY_HANDLE hKey, PUCHAR pbInput, ULONG cbInput, void* pPaddingInfo, PUCHAR pbIV, ULONG cbIV, PUCHAR pbOutput, ULONG cbOutput, ULONG* pcbResult, ULONG dwFlags);
     * }
     */
    public static int BCryptEncrypt(MemorySegment hKey, MemorySegment pbInput, int cbInput, MemorySegment pPaddingInfo, MemorySegment pbIV, int cbIV, MemorySegment pbOutput, int cbOutput, MemorySegment pcbResult, int dwFlags) {
        var mh$ = BCryptEncrypt$MH();
        try {
            return (int)mh$.invokeExact(hKey, pbInput, cbInput, pPaddingInfo, pbIV, cbIV, pbOutput, cbOutput, pcbResult, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptDecrypt$MH() {
        return RuntimeHelper.requireNonNull(constants$1959.const$5,"BCryptDecrypt");
    }
    /**
     * {@snippet :
     * NTSTATUS BCryptDecrypt(BCRYPT_KEY_HANDLE hKey, PUCHAR pbInput, ULONG cbInput, void* pPaddingInfo, PUCHAR pbIV, ULONG cbIV, PUCHAR pbOutput, ULONG cbOutput, ULONG* pcbResult, ULONG dwFlags);
     * }
     */
    public static int BCryptDecrypt(MemorySegment hKey, MemorySegment pbInput, int cbInput, MemorySegment pPaddingInfo, MemorySegment pbIV, int cbIV, MemorySegment pbOutput, int cbOutput, MemorySegment pcbResult, int dwFlags) {
        var mh$ = BCryptDecrypt$MH();
        try {
            return (int)mh$.invokeExact(hKey, pbInput, cbInput, pPaddingInfo, pbIV, cbIV, pbOutput, cbOutput, pcbResult, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptExportKey$MH() {
        return RuntimeHelper.requireNonNull(constants$1960.const$1,"BCryptExportKey");
    }
    /**
     * {@snippet :
     * NTSTATUS BCryptExportKey(BCRYPT_KEY_HANDLE hKey, BCRYPT_KEY_HANDLE hExportKey, LPCWSTR pszBlobType, PUCHAR pbOutput, ULONG cbOutput, ULONG* pcbResult, ULONG dwFlags);
     * }
     */
    public static int BCryptExportKey(MemorySegment hKey, MemorySegment hExportKey, MemorySegment pszBlobType, MemorySegment pbOutput, int cbOutput, MemorySegment pcbResult, int dwFlags) {
        var mh$ = BCryptExportKey$MH();
        try {
            return (int)mh$.invokeExact(hKey, hExportKey, pszBlobType, pbOutput, cbOutput, pcbResult, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptImportKey$MH() {
        return RuntimeHelper.requireNonNull(constants$1960.const$3,"BCryptImportKey");
    }
    /**
     * {@snippet :
     * NTSTATUS BCryptImportKey(BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_KEY_HANDLE hImportKey, LPCWSTR pszBlobType, BCRYPT_KEY_HANDLE* phKey, PUCHAR pbKeyObject, ULONG cbKeyObject, PUCHAR pbInput, ULONG cbInput, ULONG dwFlags);
     * }
     */
    public static int BCryptImportKey(MemorySegment hAlgorithm, MemorySegment hImportKey, MemorySegment pszBlobType, MemorySegment phKey, MemorySegment pbKeyObject, int cbKeyObject, MemorySegment pbInput, int cbInput, int dwFlags) {
        var mh$ = BCryptImportKey$MH();
        try {
            return (int)mh$.invokeExact(hAlgorithm, hImportKey, pszBlobType, phKey, pbKeyObject, cbKeyObject, pbInput, cbInput, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptImportKeyPair$MH() {
        return RuntimeHelper.requireNonNull(constants$1960.const$5,"BCryptImportKeyPair");
    }
    /**
     * {@snippet :
     * NTSTATUS BCryptImportKeyPair(BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_KEY_HANDLE hImportKey, LPCWSTR pszBlobType, BCRYPT_KEY_HANDLE* phKey, PUCHAR pbInput, ULONG cbInput, ULONG dwFlags);
     * }
     */
    public static int BCryptImportKeyPair(MemorySegment hAlgorithm, MemorySegment hImportKey, MemorySegment pszBlobType, MemorySegment phKey, MemorySegment pbInput, int cbInput, int dwFlags) {
        var mh$ = BCryptImportKeyPair$MH();
        try {
            return (int)mh$.invokeExact(hAlgorithm, hImportKey, pszBlobType, phKey, pbInput, cbInput, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptDuplicateKey$MH() {
        return RuntimeHelper.requireNonNull(constants$1961.const$0,"BCryptDuplicateKey");
    }
    /**
     * {@snippet :
     * NTSTATUS BCryptDuplicateKey(BCRYPT_KEY_HANDLE hKey, BCRYPT_KEY_HANDLE* phNewKey, PUCHAR pbKeyObject, ULONG cbKeyObject, ULONG dwFlags);
     * }
     */
    public static int BCryptDuplicateKey(MemorySegment hKey, MemorySegment phNewKey, MemorySegment pbKeyObject, int cbKeyObject, int dwFlags) {
        var mh$ = BCryptDuplicateKey$MH();
        try {
            return (int)mh$.invokeExact(hKey, phNewKey, pbKeyObject, cbKeyObject, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptFinalizeKeyPair$MH() {
        return RuntimeHelper.requireNonNull(constants$1961.const$1,"BCryptFinalizeKeyPair");
    }
    /**
     * {@snippet :
     * NTSTATUS BCryptFinalizeKeyPair(BCRYPT_KEY_HANDLE hKey, ULONG dwFlags);
     * }
     */
    public static int BCryptFinalizeKeyPair(MemorySegment hKey, int dwFlags) {
        var mh$ = BCryptFinalizeKeyPair$MH();
        try {
            return (int)mh$.invokeExact(hKey, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptDestroyKey$MH() {
        return RuntimeHelper.requireNonNull(constants$1961.const$2,"BCryptDestroyKey");
    }
    /**
     * {@snippet :
     * NTSTATUS BCryptDestroyKey(BCRYPT_KEY_HANDLE hKey);
     * }
     */
    public static int BCryptDestroyKey(MemorySegment hKey) {
        var mh$ = BCryptDestroyKey$MH();
        try {
            return (int)mh$.invokeExact(hKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptDestroySecret$MH() {
        return RuntimeHelper.requireNonNull(constants$1961.const$3,"BCryptDestroySecret");
    }
    /**
     * {@snippet :
     * NTSTATUS BCryptDestroySecret(BCRYPT_SECRET_HANDLE hSecret);
     * }
     */
    public static int BCryptDestroySecret(MemorySegment hSecret) {
        var mh$ = BCryptDestroySecret$MH();
        try {
            return (int)mh$.invokeExact(hSecret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptSignHash$MH() {
        return RuntimeHelper.requireNonNull(constants$1961.const$5,"BCryptSignHash");
    }
    /**
     * {@snippet :
     * NTSTATUS BCryptSignHash(BCRYPT_KEY_HANDLE hKey, void* pPaddingInfo, PUCHAR pbInput, ULONG cbInput, PUCHAR pbOutput, ULONG cbOutput, ULONG* pcbResult, ULONG dwFlags);
     * }
     */
    public static int BCryptSignHash(MemorySegment hKey, MemorySegment pPaddingInfo, MemorySegment pbInput, int cbInput, MemorySegment pbOutput, int cbOutput, MemorySegment pcbResult, int dwFlags) {
        var mh$ = BCryptSignHash$MH();
        try {
            return (int)mh$.invokeExact(hKey, pPaddingInfo, pbInput, cbInput, pbOutput, cbOutput, pcbResult, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptVerifySignature$MH() {
        return RuntimeHelper.requireNonNull(constants$1962.const$0,"BCryptVerifySignature");
    }
    /**
     * {@snippet :
     * NTSTATUS BCryptVerifySignature(BCRYPT_KEY_HANDLE hKey, void* pPaddingInfo, PUCHAR pbHash, ULONG cbHash, PUCHAR pbSignature, ULONG cbSignature, ULONG dwFlags);
     * }
     */
    public static int BCryptVerifySignature(MemorySegment hKey, MemorySegment pPaddingInfo, MemorySegment pbHash, int cbHash, MemorySegment pbSignature, int cbSignature, int dwFlags) {
        var mh$ = BCryptVerifySignature$MH();
        try {
            return (int)mh$.invokeExact(hKey, pPaddingInfo, pbHash, cbHash, pbSignature, cbSignature, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptSecretAgreement$MH() {
        return RuntimeHelper.requireNonNull(constants$1962.const$1,"BCryptSecretAgreement");
    }
    /**
     * {@snippet :
     * NTSTATUS BCryptSecretAgreement(BCRYPT_KEY_HANDLE hPrivKey, BCRYPT_KEY_HANDLE hPubKey, BCRYPT_SECRET_HANDLE* phAgreedSecret, ULONG dwFlags);
     * }
     */
    public static int BCryptSecretAgreement(MemorySegment hPrivKey, MemorySegment hPubKey, MemorySegment phAgreedSecret, int dwFlags) {
        var mh$ = BCryptSecretAgreement$MH();
        try {
            return (int)mh$.invokeExact(hPrivKey, hPubKey, phAgreedSecret, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptDeriveKey$MH() {
        return RuntimeHelper.requireNonNull(constants$1962.const$2,"BCryptDeriveKey");
    }
    /**
     * {@snippet :
     * NTSTATUS BCryptDeriveKey(BCRYPT_SECRET_HANDLE hSharedSecret, LPCWSTR pwszKDF, BCryptBufferDesc* pParameterList, PUCHAR pbDerivedKey, ULONG cbDerivedKey, ULONG* pcbResult, ULONG dwFlags);
     * }
     */
    public static int BCryptDeriveKey(MemorySegment hSharedSecret, MemorySegment pwszKDF, MemorySegment pParameterList, MemorySegment pbDerivedKey, int cbDerivedKey, MemorySegment pcbResult, int dwFlags) {
        var mh$ = BCryptDeriveKey$MH();
        try {
            return (int)mh$.invokeExact(hSharedSecret, pwszKDF, pParameterList, pbDerivedKey, cbDerivedKey, pcbResult, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptKeyDerivation$MH() {
        return RuntimeHelper.requireNonNull(constants$1962.const$3,"BCryptKeyDerivation");
    }
    /**
     * {@snippet :
     * NTSTATUS BCryptKeyDerivation(BCRYPT_KEY_HANDLE hKey, BCryptBufferDesc* pParameterList, PUCHAR pbDerivedKey, ULONG cbDerivedKey, ULONG* pcbResult, ULONG dwFlags);
     * }
     */
    public static int BCryptKeyDerivation(MemorySegment hKey, MemorySegment pParameterList, MemorySegment pbDerivedKey, int cbDerivedKey, MemorySegment pcbResult, int dwFlags) {
        var mh$ = BCryptKeyDerivation$MH();
        try {
            return (int)mh$.invokeExact(hKey, pParameterList, pbDerivedKey, cbDerivedKey, pcbResult, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptCreateHash$MH() {
        return RuntimeHelper.requireNonNull(constants$1962.const$4,"BCryptCreateHash");
    }
    /**
     * {@snippet :
     * NTSTATUS BCryptCreateHash(BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_HASH_HANDLE* phHash, PUCHAR pbHashObject, ULONG cbHashObject, PUCHAR pbSecret, ULONG cbSecret, ULONG dwFlags);
     * }
     */
    public static int BCryptCreateHash(MemorySegment hAlgorithm, MemorySegment phHash, MemorySegment pbHashObject, int cbHashObject, MemorySegment pbSecret, int cbSecret, int dwFlags) {
        var mh$ = BCryptCreateHash$MH();
        try {
            return (int)mh$.invokeExact(hAlgorithm, phHash, pbHashObject, cbHashObject, pbSecret, cbSecret, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptHashData$MH() {
        return RuntimeHelper.requireNonNull(constants$1962.const$5,"BCryptHashData");
    }
    /**
     * {@snippet :
     * NTSTATUS BCryptHashData(BCRYPT_HASH_HANDLE hHash, PUCHAR pbInput, ULONG cbInput, ULONG dwFlags);
     * }
     */
    public static int BCryptHashData(MemorySegment hHash, MemorySegment pbInput, int cbInput, int dwFlags) {
        var mh$ = BCryptHashData$MH();
        try {
            return (int)mh$.invokeExact(hHash, pbInput, cbInput, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptFinishHash$MH() {
        return RuntimeHelper.requireNonNull(constants$1963.const$0,"BCryptFinishHash");
    }
    /**
     * {@snippet :
     * NTSTATUS BCryptFinishHash(BCRYPT_HASH_HANDLE hHash, PUCHAR pbOutput, ULONG cbOutput, ULONG dwFlags);
     * }
     */
    public static int BCryptFinishHash(MemorySegment hHash, MemorySegment pbOutput, int cbOutput, int dwFlags) {
        var mh$ = BCryptFinishHash$MH();
        try {
            return (int)mh$.invokeExact(hHash, pbOutput, cbOutput, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptCreateMultiHash$MH() {
        return RuntimeHelper.requireNonNull(constants$1963.const$2,"BCryptCreateMultiHash");
    }
    /**
     * {@snippet :
     * NTSTATUS BCryptCreateMultiHash(BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_HASH_HANDLE* phHash, ULONG nHashes, PUCHAR pbHashObject, ULONG cbHashObject, PUCHAR pbSecret, ULONG cbSecret, ULONG dwFlags);
     * }
     */
    public static int BCryptCreateMultiHash(MemorySegment hAlgorithm, MemorySegment phHash, int nHashes, MemorySegment pbHashObject, int cbHashObject, MemorySegment pbSecret, int cbSecret, int dwFlags) {
        var mh$ = BCryptCreateMultiHash$MH();
        try {
            return (int)mh$.invokeExact(hAlgorithm, phHash, nHashes, pbHashObject, cbHashObject, pbSecret, cbSecret, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptProcessMultiOperations$MH() {
        return RuntimeHelper.requireNonNull(constants$1963.const$3,"BCryptProcessMultiOperations");
    }
    /**
     * {@snippet :
     * NTSTATUS BCryptProcessMultiOperations(BCRYPT_HANDLE hObject, BCRYPT_MULTI_OPERATION_TYPE operationType, PVOID pOperations, ULONG cbOperations, ULONG dwFlags);
     * }
     */
    public static int BCryptProcessMultiOperations(MemorySegment hObject, int operationType, MemorySegment pOperations, int cbOperations, int dwFlags) {
        var mh$ = BCryptProcessMultiOperations$MH();
        try {
            return (int)mh$.invokeExact(hObject, operationType, pOperations, cbOperations, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptDuplicateHash$MH() {
        return RuntimeHelper.requireNonNull(constants$1963.const$4,"BCryptDuplicateHash");
    }
    /**
     * {@snippet :
     * NTSTATUS BCryptDuplicateHash(BCRYPT_HASH_HANDLE hHash, BCRYPT_HASH_HANDLE* phNewHash, PUCHAR pbHashObject, ULONG cbHashObject, ULONG dwFlags);
     * }
     */
    public static int BCryptDuplicateHash(MemorySegment hHash, MemorySegment phNewHash, MemorySegment pbHashObject, int cbHashObject, int dwFlags) {
        var mh$ = BCryptDuplicateHash$MH();
        try {
            return (int)mh$.invokeExact(hHash, phNewHash, pbHashObject, cbHashObject, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptDestroyHash$MH() {
        return RuntimeHelper.requireNonNull(constants$1963.const$5,"BCryptDestroyHash");
    }
    /**
     * {@snippet :
     * NTSTATUS BCryptDestroyHash(BCRYPT_HASH_HANDLE hHash);
     * }
     */
    public static int BCryptDestroyHash(MemorySegment hHash) {
        var mh$ = BCryptDestroyHash$MH();
        try {
            return (int)mh$.invokeExact(hHash);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptHash$MH() {
        return RuntimeHelper.requireNonNull(constants$1964.const$0,"BCryptHash");
    }
    /**
     * {@snippet :
     * NTSTATUS BCryptHash(BCRYPT_ALG_HANDLE hAlgorithm, PUCHAR pbSecret, ULONG cbSecret, PUCHAR pbInput, ULONG cbInput, PUCHAR pbOutput, ULONG cbOutput);
     * }
     */
    public static int BCryptHash(MemorySegment hAlgorithm, MemorySegment pbSecret, int cbSecret, MemorySegment pbInput, int cbInput, MemorySegment pbOutput, int cbOutput) {
        var mh$ = BCryptHash$MH();
        try {
            return (int)mh$.invokeExact(hAlgorithm, pbSecret, cbSecret, pbInput, cbInput, pbOutput, cbOutput);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptGenRandom$MH() {
        return RuntimeHelper.requireNonNull(constants$1964.const$1,"BCryptGenRandom");
    }
    /**
     * {@snippet :
     * NTSTATUS BCryptGenRandom(BCRYPT_ALG_HANDLE hAlgorithm, PUCHAR pbBuffer, ULONG cbBuffer, ULONG dwFlags);
     * }
     */
    public static int BCryptGenRandom(MemorySegment hAlgorithm, MemorySegment pbBuffer, int cbBuffer, int dwFlags) {
        var mh$ = BCryptGenRandom$MH();
        try {
            return (int)mh$.invokeExact(hAlgorithm, pbBuffer, cbBuffer, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptDeriveKeyCapi$MH() {
        return RuntimeHelper.requireNonNull(constants$1964.const$2,"BCryptDeriveKeyCapi");
    }
    /**
     * {@snippet :
     * NTSTATUS BCryptDeriveKeyCapi(BCRYPT_HASH_HANDLE hHash, BCRYPT_ALG_HANDLE hTargetAlg, PUCHAR pbDerivedKey, ULONG cbDerivedKey, ULONG dwFlags);
     * }
     */
    public static int BCryptDeriveKeyCapi(MemorySegment hHash, MemorySegment hTargetAlg, MemorySegment pbDerivedKey, int cbDerivedKey, int dwFlags) {
        var mh$ = BCryptDeriveKeyCapi$MH();
        try {
            return (int)mh$.invokeExact(hHash, hTargetAlg, pbDerivedKey, cbDerivedKey, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptDeriveKeyPBKDF2$MH() {
        return RuntimeHelper.requireNonNull(constants$1964.const$4,"BCryptDeriveKeyPBKDF2");
    }
    /**
     * {@snippet :
     * NTSTATUS BCryptDeriveKeyPBKDF2(BCRYPT_ALG_HANDLE hPrf, PUCHAR pbPassword, ULONG cbPassword, PUCHAR pbSalt, ULONG cbSalt, ULONGLONG cIterations, PUCHAR pbDerivedKey, ULONG cbDerivedKey, ULONG dwFlags);
     * }
     */
    public static int BCryptDeriveKeyPBKDF2(MemorySegment hPrf, MemorySegment pbPassword, int cbPassword, MemorySegment pbSalt, int cbSalt, long cIterations, MemorySegment pbDerivedKey, int cbDerivedKey, int dwFlags) {
        var mh$ = BCryptDeriveKeyPBKDF2$MH();
        try {
            return (int)mh$.invokeExact(hPrf, pbPassword, cbPassword, pbSalt, cbSalt, cIterations, pbDerivedKey, cbDerivedKey, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _BCRYPT_INTERFACE_VERSION* PBCRYPT_INTERFACE_VERSION;
     * }
     */
    public static final AddressLayout PBCRYPT_INTERFACE_VERSION = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPT_INTERFACE_REG* PCRYPT_INTERFACE_REG;
     * }
     */
    public static final AddressLayout PCRYPT_INTERFACE_REG = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPT_IMAGE_REG* PCRYPT_IMAGE_REG;
     * }
     */
    public static final AddressLayout PCRYPT_IMAGE_REG = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPT_PROVIDER_REG* PCRYPT_PROVIDER_REG;
     * }
     */
    public static final AddressLayout PCRYPT_PROVIDER_REG = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPT_PROVIDERS* PCRYPT_PROVIDERS;
     * }
     */
    public static final AddressLayout PCRYPT_PROVIDERS = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPT_CONTEXT_CONFIG* PCRYPT_CONTEXT_CONFIG;
     * }
     */
    public static final AddressLayout PCRYPT_CONTEXT_CONFIG = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPT_CONTEXT_FUNCTION_CONFIG* PCRYPT_CONTEXT_FUNCTION_CONFIG;
     * }
     */
    public static final AddressLayout PCRYPT_CONTEXT_FUNCTION_CONFIG = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPT_CONTEXTS* PCRYPT_CONTEXTS;
     * }
     */
    public static final AddressLayout PCRYPT_CONTEXTS = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPT_CONTEXT_FUNCTIONS* PCRYPT_CONTEXT_FUNCTIONS;
     * }
     */
    public static final AddressLayout PCRYPT_CONTEXT_FUNCTIONS = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPT_CONTEXT_FUNCTION_PROVIDERS* PCRYPT_CONTEXT_FUNCTION_PROVIDERS;
     * }
     */
    public static final AddressLayout PCRYPT_CONTEXT_FUNCTION_PROVIDERS = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPT_PROPERTY_REF* PCRYPT_PROPERTY_REF;
     * }
     */
    public static final AddressLayout PCRYPT_PROPERTY_REF = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPT_IMAGE_REF* PCRYPT_IMAGE_REF;
     * }
     */
    public static final AddressLayout PCRYPT_IMAGE_REF = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPT_PROVIDER_REF* PCRYPT_PROVIDER_REF;
     * }
     */
    public static final AddressLayout PCRYPT_PROVIDER_REF = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPT_PROVIDER_REFS* PCRYPT_PROVIDER_REFS;
     * }
     */
    public static final AddressLayout PCRYPT_PROVIDER_REFS = RuntimeHelper.POINTER;
    public static MethodHandle BCryptQueryProviderRegistration$MH() {
        return RuntimeHelper.requireNonNull(constants$1973.const$4,"BCryptQueryProviderRegistration");
    }
    /**
     * {@snippet :
     * NTSTATUS BCryptQueryProviderRegistration(LPCWSTR pszProvider, ULONG dwMode, ULONG dwInterface, ULONG* pcbBuffer, PCRYPT_PROVIDER_REG* ppBuffer);
     * }
     */
    public static int BCryptQueryProviderRegistration(MemorySegment pszProvider, int dwMode, int dwInterface, MemorySegment pcbBuffer, MemorySegment ppBuffer) {
        var mh$ = BCryptQueryProviderRegistration$MH();
        try {
            return (int)mh$.invokeExact(pszProvider, dwMode, dwInterface, pcbBuffer, ppBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptEnumRegisteredProviders$MH() {
        return RuntimeHelper.requireNonNull(constants$1973.const$5,"BCryptEnumRegisteredProviders");
    }
    /**
     * {@snippet :
     * NTSTATUS BCryptEnumRegisteredProviders(ULONG* pcbBuffer, PCRYPT_PROVIDERS* ppBuffer);
     * }
     */
    public static int BCryptEnumRegisteredProviders(MemorySegment pcbBuffer, MemorySegment ppBuffer) {
        var mh$ = BCryptEnumRegisteredProviders$MH();
        try {
            return (int)mh$.invokeExact(pcbBuffer, ppBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptCreateContext$MH() {
        return RuntimeHelper.requireNonNull(constants$1974.const$0,"BCryptCreateContext");
    }
    /**
     * {@snippet :
     * NTSTATUS BCryptCreateContext(ULONG dwTable, LPCWSTR pszContext, PCRYPT_CONTEXT_CONFIG pConfig);
     * }
     */
    public static int BCryptCreateContext(int dwTable, MemorySegment pszContext, MemorySegment pConfig) {
        var mh$ = BCryptCreateContext$MH();
        try {
            return (int)mh$.invokeExact(dwTable, pszContext, pConfig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptDeleteContext$MH() {
        return RuntimeHelper.requireNonNull(constants$1974.const$1,"BCryptDeleteContext");
    }
    /**
     * {@snippet :
     * NTSTATUS BCryptDeleteContext(ULONG dwTable, LPCWSTR pszContext);
     * }
     */
    public static int BCryptDeleteContext(int dwTable, MemorySegment pszContext) {
        var mh$ = BCryptDeleteContext$MH();
        try {
            return (int)mh$.invokeExact(dwTable, pszContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptEnumContexts$MH() {
        return RuntimeHelper.requireNonNull(constants$1974.const$2,"BCryptEnumContexts");
    }
    /**
     * {@snippet :
     * NTSTATUS BCryptEnumContexts(ULONG dwTable, ULONG* pcbBuffer, PCRYPT_CONTEXTS* ppBuffer);
     * }
     */
    public static int BCryptEnumContexts(int dwTable, MemorySegment pcbBuffer, MemorySegment ppBuffer) {
        var mh$ = BCryptEnumContexts$MH();
        try {
            return (int)mh$.invokeExact(dwTable, pcbBuffer, ppBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptConfigureContext$MH() {
        return RuntimeHelper.requireNonNull(constants$1974.const$3,"BCryptConfigureContext");
    }
    /**
     * {@snippet :
     * NTSTATUS BCryptConfigureContext(ULONG dwTable, LPCWSTR pszContext, PCRYPT_CONTEXT_CONFIG pConfig);
     * }
     */
    public static int BCryptConfigureContext(int dwTable, MemorySegment pszContext, MemorySegment pConfig) {
        var mh$ = BCryptConfigureContext$MH();
        try {
            return (int)mh$.invokeExact(dwTable, pszContext, pConfig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptQueryContextConfiguration$MH() {
        return RuntimeHelper.requireNonNull(constants$1974.const$4,"BCryptQueryContextConfiguration");
    }
    /**
     * {@snippet :
     * NTSTATUS BCryptQueryContextConfiguration(ULONG dwTable, LPCWSTR pszContext, ULONG* pcbBuffer, PCRYPT_CONTEXT_CONFIG* ppBuffer);
     * }
     */
    public static int BCryptQueryContextConfiguration(int dwTable, MemorySegment pszContext, MemorySegment pcbBuffer, MemorySegment ppBuffer) {
        var mh$ = BCryptQueryContextConfiguration$MH();
        try {
            return (int)mh$.invokeExact(dwTable, pszContext, pcbBuffer, ppBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptAddContextFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$1974.const$5,"BCryptAddContextFunction");
    }
    /**
     * {@snippet :
     * NTSTATUS BCryptAddContextFunction(ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, ULONG dwPosition);
     * }
     */
    public static int BCryptAddContextFunction(int dwTable, MemorySegment pszContext, int dwInterface, MemorySegment pszFunction, int dwPosition) {
        var mh$ = BCryptAddContextFunction$MH();
        try {
            return (int)mh$.invokeExact(dwTable, pszContext, dwInterface, pszFunction, dwPosition);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptRemoveContextFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$1975.const$0,"BCryptRemoveContextFunction");
    }
    /**
     * {@snippet :
     * NTSTATUS BCryptRemoveContextFunction(ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction);
     * }
     */
    public static int BCryptRemoveContextFunction(int dwTable, MemorySegment pszContext, int dwInterface, MemorySegment pszFunction) {
        var mh$ = BCryptRemoveContextFunction$MH();
        try {
            return (int)mh$.invokeExact(dwTable, pszContext, dwInterface, pszFunction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptEnumContextFunctions$MH() {
        return RuntimeHelper.requireNonNull(constants$1975.const$1,"BCryptEnumContextFunctions");
    }
    /**
     * {@snippet :
     * NTSTATUS BCryptEnumContextFunctions(ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, ULONG* pcbBuffer, PCRYPT_CONTEXT_FUNCTIONS* ppBuffer);
     * }
     */
    public static int BCryptEnumContextFunctions(int dwTable, MemorySegment pszContext, int dwInterface, MemorySegment pcbBuffer, MemorySegment ppBuffer) {
        var mh$ = BCryptEnumContextFunctions$MH();
        try {
            return (int)mh$.invokeExact(dwTable, pszContext, dwInterface, pcbBuffer, ppBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptConfigureContextFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$1975.const$2,"BCryptConfigureContextFunction");
    }
    /**
     * {@snippet :
     * NTSTATUS BCryptConfigureContextFunction(ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, PCRYPT_CONTEXT_FUNCTION_CONFIG pConfig);
     * }
     */
    public static int BCryptConfigureContextFunction(int dwTable, MemorySegment pszContext, int dwInterface, MemorySegment pszFunction, MemorySegment pConfig) {
        var mh$ = BCryptConfigureContextFunction$MH();
        try {
            return (int)mh$.invokeExact(dwTable, pszContext, dwInterface, pszFunction, pConfig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptQueryContextFunctionConfiguration$MH() {
        return RuntimeHelper.requireNonNull(constants$1975.const$3,"BCryptQueryContextFunctionConfiguration");
    }
    /**
     * {@snippet :
     * NTSTATUS BCryptQueryContextFunctionConfiguration(ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, ULONG* pcbBuffer, PCRYPT_CONTEXT_FUNCTION_CONFIG* ppBuffer);
     * }
     */
    public static int BCryptQueryContextFunctionConfiguration(int dwTable, MemorySegment pszContext, int dwInterface, MemorySegment pszFunction, MemorySegment pcbBuffer, MemorySegment ppBuffer) {
        var mh$ = BCryptQueryContextFunctionConfiguration$MH();
        try {
            return (int)mh$.invokeExact(dwTable, pszContext, dwInterface, pszFunction, pcbBuffer, ppBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptEnumContextFunctionProviders$MH() {
        return RuntimeHelper.requireNonNull(constants$1975.const$4,"BCryptEnumContextFunctionProviders");
    }
    /**
     * {@snippet :
     * NTSTATUS BCryptEnumContextFunctionProviders(ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, ULONG* pcbBuffer, PCRYPT_CONTEXT_FUNCTION_PROVIDERS* ppBuffer);
     * }
     */
    public static int BCryptEnumContextFunctionProviders(int dwTable, MemorySegment pszContext, int dwInterface, MemorySegment pszFunction, MemorySegment pcbBuffer, MemorySegment ppBuffer) {
        var mh$ = BCryptEnumContextFunctionProviders$MH();
        try {
            return (int)mh$.invokeExact(dwTable, pszContext, dwInterface, pszFunction, pcbBuffer, ppBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptSetContextFunctionProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$1975.const$6,"BCryptSetContextFunctionProperty");
    }
    /**
     * {@snippet :
     * NTSTATUS BCryptSetContextFunctionProperty(ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, LPCWSTR pszProperty, ULONG cbValue, PUCHAR pbValue);
     * }
     */
    public static int BCryptSetContextFunctionProperty(int dwTable, MemorySegment pszContext, int dwInterface, MemorySegment pszFunction, MemorySegment pszProperty, int cbValue, MemorySegment pbValue) {
        var mh$ = BCryptSetContextFunctionProperty$MH();
        try {
            return (int)mh$.invokeExact(dwTable, pszContext, dwInterface, pszFunction, pszProperty, cbValue, pbValue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptQueryContextFunctionProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$1976.const$1,"BCryptQueryContextFunctionProperty");
    }
    /**
     * {@snippet :
     * NTSTATUS BCryptQueryContextFunctionProperty(ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, LPCWSTR pszProperty, ULONG* pcbValue, PUCHAR* ppbValue);
     * }
     */
    public static int BCryptQueryContextFunctionProperty(int dwTable, MemorySegment pszContext, int dwInterface, MemorySegment pszFunction, MemorySegment pszProperty, MemorySegment pcbValue, MemorySegment ppbValue) {
        var mh$ = BCryptQueryContextFunctionProperty$MH();
        try {
            return (int)mh$.invokeExact(dwTable, pszContext, dwInterface, pszFunction, pszProperty, pcbValue, ppbValue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptRegisterConfigChangeNotify$MH() {
        return RuntimeHelper.requireNonNull(constants$1976.const$2,"BCryptRegisterConfigChangeNotify");
    }
    /**
     * {@snippet :
     * NTSTATUS BCryptRegisterConfigChangeNotify(HANDLE* phEvent);
     * }
     */
    public static int BCryptRegisterConfigChangeNotify(MemorySegment phEvent) {
        var mh$ = BCryptRegisterConfigChangeNotify$MH();
        try {
            return (int)mh$.invokeExact(phEvent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptUnregisterConfigChangeNotify$MH() {
        return RuntimeHelper.requireNonNull(constants$1976.const$3,"BCryptUnregisterConfigChangeNotify");
    }
    /**
     * {@snippet :
     * NTSTATUS BCryptUnregisterConfigChangeNotify(HANDLE hEvent);
     * }
     */
    public static int BCryptUnregisterConfigChangeNotify(MemorySegment hEvent) {
        var mh$ = BCryptUnregisterConfigChangeNotify$MH();
        try {
            return (int)mh$.invokeExact(hEvent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptResolveProviders$MH() {
        return RuntimeHelper.requireNonNull(constants$1976.const$5,"BCryptResolveProviders");
    }
    /**
     * {@snippet :
     * NTSTATUS BCryptResolveProviders(LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, LPCWSTR pszProvider, ULONG dwMode, ULONG dwFlags, ULONG* pcbBuffer, PCRYPT_PROVIDER_REFS* ppBuffer);
     * }
     */
    public static int BCryptResolveProviders(MemorySegment pszContext, int dwInterface, MemorySegment pszFunction, MemorySegment pszProvider, int dwMode, int dwFlags, MemorySegment pcbBuffer, MemorySegment ppBuffer) {
        var mh$ = BCryptResolveProviders$MH();
        try {
            return (int)mh$.invokeExact(pszContext, dwInterface, pszFunction, pszProvider, dwMode, dwFlags, pcbBuffer, ppBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptGetFipsAlgorithmMode$MH() {
        return RuntimeHelper.requireNonNull(constants$1977.const$0,"BCryptGetFipsAlgorithmMode");
    }
    /**
     * {@snippet :
     * NTSTATUS BCryptGetFipsAlgorithmMode(BOOLEAN* pfEnabled);
     * }
     */
    public static int BCryptGetFipsAlgorithmMode(MemorySegment pfEnabled) {
        var mh$ = BCryptGetFipsAlgorithmMode$MH();
        try {
            return (int)mh$.invokeExact(pfEnabled);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CngGetFipsAlgorithmMode$MH() {
        return RuntimeHelper.requireNonNull(constants$1977.const$1,"CngGetFipsAlgorithmMode");
    }
    /**
     * {@snippet :
     * BOOLEAN CngGetFipsAlgorithmMode();
     * }
     */
    public static byte CngGetFipsAlgorithmMode() {
        var mh$ = CngGetFipsAlgorithmMode$MH();
        try {
            return (byte)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef long SECURITY_STATUS;
     * }
     */
    public static final OfInt SECURITY_STATUS = JAVA_INT;
    /**
     * {@snippet :
     * typedef struct _BCryptBuffer* PNCryptBuffer;
     * }
     */
    public static final AddressLayout PNCryptBuffer = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _BCryptBufferDesc* PNCryptBufferDesc;
     * }
     */
    public static final AddressLayout PNCryptBufferDesc = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef unsigned long long NCRYPT_HANDLE;
     * }
     */
    public static final OfLong NCRYPT_HANDLE = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long NCRYPT_PROV_HANDLE;
     * }
     */
    public static final OfLong NCRYPT_PROV_HANDLE = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long NCRYPT_KEY_HANDLE;
     * }
     */
    public static final OfLong NCRYPT_KEY_HANDLE = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long NCRYPT_HASH_HANDLE;
     * }
     */
    public static final OfLong NCRYPT_HASH_HANDLE = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long NCRYPT_SECRET_HANDLE;
     * }
     */
    public static final OfLong NCRYPT_SECRET_HANDLE = JAVA_LONG;
    /**
     * {@snippet :
     * typedef struct _NCRYPT_CIPHER_PADDING_INFO* PNCRYPT_CIPHER_PADDING_INFO;
     * }
     */
    public static final AddressLayout PNCRYPT_CIPHER_PADDING_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES* PNCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES;
     * }
     */
    public static final AddressLayout PNCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _NCRYPT_VSM_KEY_ATTESTATION_STATEMENT* PNCRYPT_VSM_KEY_ATTESTATION_STATEMENT;
     * }
     */
    public static final AddressLayout PNCRYPT_VSM_KEY_ATTESTATION_STATEMENT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS* PNCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS;
     * }
     */
    public static final AddressLayout PNCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _NCRYPT_EXPORTED_ISOLATED_KEY_HEADER* PNCRYPT_EXPORTED_ISOLATED_KEY_HEADER;
     * }
     */
    public static final AddressLayout PNCRYPT_EXPORTED_ISOLATED_KEY_HEADER = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _NCRYPT_EXPORTED_ISOLATED_KEY_ENVELOPE* PNCRYPT_EXPORTED_ISOLATED_KEY_ENVELOPE;
     * }
     */
    public static final AddressLayout PNCRYPT_EXPORTED_ISOLATED_KEY_ENVELOPE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT* PNCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT;
     * }
     */
    public static final AddressLayout PNCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT* PNCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT;
     * }
     */
    public static final AddressLayout PNCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT = RuntimeHelper.POINTER;
    public static MethodHandle NCryptOpenStorageProvider$MH() {
        return RuntimeHelper.requireNonNull(constants$1987.const$5,"NCryptOpenStorageProvider");
    }
    /**
     * {@snippet :
     * SECURITY_STATUS NCryptOpenStorageProvider(NCRYPT_PROV_HANDLE* phProvider, LPCWSTR pszProviderName, DWORD dwFlags);
     * }
     */
    public static int NCryptOpenStorageProvider(MemorySegment phProvider, MemorySegment pszProviderName, int dwFlags) {
        var mh$ = NCryptOpenStorageProvider$MH();
        try {
            return (int)mh$.invokeExact(phProvider, pszProviderName, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptEnumAlgorithms$MH() {
        return RuntimeHelper.requireNonNull(constants$1988.const$5,"NCryptEnumAlgorithms");
    }
    /**
     * {@snippet :
     * SECURITY_STATUS NCryptEnumAlgorithms(NCRYPT_PROV_HANDLE hProvider, DWORD dwAlgOperations, DWORD* pdwAlgCount, NCryptAlgorithmName** ppAlgList, DWORD dwFlags);
     * }
     */
    public static int NCryptEnumAlgorithms(long hProvider, int dwAlgOperations, MemorySegment pdwAlgCount, MemorySegment ppAlgList, int dwFlags) {
        var mh$ = NCryptEnumAlgorithms$MH();
        try {
            return (int)mh$.invokeExact(hProvider, dwAlgOperations, pdwAlgCount, ppAlgList, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptIsAlgSupported$MH() {
        return RuntimeHelper.requireNonNull(constants$1989.const$0,"NCryptIsAlgSupported");
    }
    /**
     * {@snippet :
     * SECURITY_STATUS NCryptIsAlgSupported(NCRYPT_PROV_HANDLE hProvider, LPCWSTR pszAlgId, DWORD dwFlags);
     * }
     */
    public static int NCryptIsAlgSupported(long hProvider, MemorySegment pszAlgId, int dwFlags) {
        var mh$ = NCryptIsAlgSupported$MH();
        try {
            return (int)mh$.invokeExact(hProvider, pszAlgId, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptEnumKeys$MH() {
        return RuntimeHelper.requireNonNull(constants$1990.const$1,"NCryptEnumKeys");
    }
    /**
     * {@snippet :
     * SECURITY_STATUS NCryptEnumKeys(NCRYPT_PROV_HANDLE hProvider, LPCWSTR pszScope, NCryptKeyName** ppKeyName, PVOID* ppEnumState, DWORD dwFlags);
     * }
     */
    public static int NCryptEnumKeys(long hProvider, MemorySegment pszScope, MemorySegment ppKeyName, MemorySegment ppEnumState, int dwFlags) {
        var mh$ = NCryptEnumKeys$MH();
        try {
            return (int)mh$.invokeExact(hProvider, pszScope, ppKeyName, ppEnumState, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptEnumStorageProviders$MH() {
        return RuntimeHelper.requireNonNull(constants$1990.const$5,"NCryptEnumStorageProviders");
    }
    /**
     * {@snippet :
     * SECURITY_STATUS NCryptEnumStorageProviders(DWORD* pdwProviderCount, NCryptProviderName** ppProviderList, DWORD dwFlags);
     * }
     */
    public static int NCryptEnumStorageProviders(MemorySegment pdwProviderCount, MemorySegment ppProviderList, int dwFlags) {
        var mh$ = NCryptEnumStorageProviders$MH();
        try {
            return (int)mh$.invokeExact(pdwProviderCount, ppProviderList, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptFreeBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$1991.const$0,"NCryptFreeBuffer");
    }
    /**
     * {@snippet :
     * SECURITY_STATUS NCryptFreeBuffer(PVOID pvInput);
     * }
     */
    public static int NCryptFreeBuffer(MemorySegment pvInput) {
        var mh$ = NCryptFreeBuffer$MH();
        try {
            return (int)mh$.invokeExact(pvInput);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptOpenKey$MH() {
        return RuntimeHelper.requireNonNull(constants$1991.const$2,"NCryptOpenKey");
    }
    /**
     * {@snippet :
     * SECURITY_STATUS NCryptOpenKey(NCRYPT_PROV_HANDLE hProvider, NCRYPT_KEY_HANDLE* phKey, LPCWSTR pszKeyName, DWORD dwLegacyKeySpec, DWORD dwFlags);
     * }
     */
    public static int NCryptOpenKey(long hProvider, MemorySegment phKey, MemorySegment pszKeyName, int dwLegacyKeySpec, int dwFlags) {
        var mh$ = NCryptOpenKey$MH();
        try {
            return (int)mh$.invokeExact(hProvider, phKey, pszKeyName, dwLegacyKeySpec, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptCreatePersistedKey$MH() {
        return RuntimeHelper.requireNonNull(constants$1991.const$4,"NCryptCreatePersistedKey");
    }
    /**
     * {@snippet :
     * SECURITY_STATUS NCryptCreatePersistedKey(NCRYPT_PROV_HANDLE hProvider, NCRYPT_KEY_HANDLE* phKey, LPCWSTR pszAlgId, LPCWSTR pszKeyName, DWORD dwLegacyKeySpec, DWORD dwFlags);
     * }
     */
    public static int NCryptCreatePersistedKey(long hProvider, MemorySegment phKey, MemorySegment pszAlgId, MemorySegment pszKeyName, int dwLegacyKeySpec, int dwFlags) {
        var mh$ = NCryptCreatePersistedKey$MH();
        try {
            return (int)mh$.invokeExact(hProvider, phKey, pszAlgId, pszKeyName, dwLegacyKeySpec, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptGetProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$1996.const$3,"NCryptGetProperty");
    }
    /**
     * {@snippet :
     * SECURITY_STATUS NCryptGetProperty(NCRYPT_HANDLE hObject, LPCWSTR pszProperty, PBYTE pbOutput, DWORD cbOutput, DWORD* pcbResult, DWORD dwFlags);
     * }
     */
    public static int NCryptGetProperty(long hObject, MemorySegment pszProperty, MemorySegment pbOutput, int cbOutput, MemorySegment pcbResult, int dwFlags) {
        var mh$ = NCryptGetProperty$MH();
        try {
            return (int)mh$.invokeExact(hObject, pszProperty, pbOutput, cbOutput, pcbResult, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptSetProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$1996.const$4,"NCryptSetProperty");
    }
    /**
     * {@snippet :
     * SECURITY_STATUS NCryptSetProperty(NCRYPT_HANDLE hObject, LPCWSTR pszProperty, PBYTE pbInput, DWORD cbInput, DWORD dwFlags);
     * }
     */
    public static int NCryptSetProperty(long hObject, MemorySegment pszProperty, MemorySegment pbInput, int cbInput, int dwFlags) {
        var mh$ = NCryptSetProperty$MH();
        try {
            return (int)mh$.invokeExact(hObject, pszProperty, pbInput, cbInput, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptFinalizeKey$MH() {
        return RuntimeHelper.requireNonNull(constants$1996.const$5,"NCryptFinalizeKey");
    }
    /**
     * {@snippet :
     * SECURITY_STATUS NCryptFinalizeKey(NCRYPT_KEY_HANDLE hKey, DWORD dwFlags);
     * }
     */
    public static int NCryptFinalizeKey(long hKey, int dwFlags) {
        var mh$ = NCryptFinalizeKey$MH();
        try {
            return (int)mh$.invokeExact(hKey, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptEncrypt$MH() {
        return RuntimeHelper.requireNonNull(constants$1997.const$1,"NCryptEncrypt");
    }
    /**
     * {@snippet :
     * SECURITY_STATUS NCryptEncrypt(NCRYPT_KEY_HANDLE hKey, PBYTE pbInput, DWORD cbInput, void* pPaddingInfo, PBYTE pbOutput, DWORD cbOutput, DWORD* pcbResult, DWORD dwFlags);
     * }
     */
    public static int NCryptEncrypt(long hKey, MemorySegment pbInput, int cbInput, MemorySegment pPaddingInfo, MemorySegment pbOutput, int cbOutput, MemorySegment pcbResult, int dwFlags) {
        var mh$ = NCryptEncrypt$MH();
        try {
            return (int)mh$.invokeExact(hKey, pbInput, cbInput, pPaddingInfo, pbOutput, cbOutput, pcbResult, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptDecrypt$MH() {
        return RuntimeHelper.requireNonNull(constants$1997.const$2,"NCryptDecrypt");
    }
    /**
     * {@snippet :
     * SECURITY_STATUS NCryptDecrypt(NCRYPT_KEY_HANDLE hKey, PBYTE pbInput, DWORD cbInput, void* pPaddingInfo, PBYTE pbOutput, DWORD cbOutput, DWORD* pcbResult, DWORD dwFlags);
     * }
     */
    public static int NCryptDecrypt(long hKey, MemorySegment pbInput, int cbInput, MemorySegment pPaddingInfo, MemorySegment pbOutput, int cbOutput, MemorySegment pcbResult, int dwFlags) {
        var mh$ = NCryptDecrypt$MH();
        try {
            return (int)mh$.invokeExact(hKey, pbInput, cbInput, pPaddingInfo, pbOutput, cbOutput, pcbResult, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _NCRYPT_KEY_BLOB_HEADER* PNCRYPT_KEY_BLOB_HEADER;
     * }
     */
    public static final AddressLayout PNCRYPT_KEY_BLOB_HEADER = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER* PNCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER;
     * }
     */
    public static final AddressLayout PNCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER = RuntimeHelper.POINTER;
    public static MethodHandle NCryptImportKey$MH() {
        return RuntimeHelper.requireNonNull(constants$1999.const$3,"NCryptImportKey");
    }
    /**
     * {@snippet :
     * SECURITY_STATUS NCryptImportKey(NCRYPT_PROV_HANDLE hProvider, NCRYPT_KEY_HANDLE hImportKey, LPCWSTR pszBlobType, NCryptBufferDesc* pParameterList, NCRYPT_KEY_HANDLE* phKey, PBYTE pbData, DWORD cbData, DWORD dwFlags);
     * }
     */
    public static int NCryptImportKey(long hProvider, long hImportKey, MemorySegment pszBlobType, MemorySegment pParameterList, MemorySegment phKey, MemorySegment pbData, int cbData, int dwFlags) {
        var mh$ = NCryptImportKey$MH();
        try {
            return (int)mh$.invokeExact(hProvider, hImportKey, pszBlobType, pParameterList, phKey, pbData, cbData, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptExportKey$MH() {
        return RuntimeHelper.requireNonNull(constants$1999.const$5,"NCryptExportKey");
    }
    /**
     * {@snippet :
     * SECURITY_STATUS NCryptExportKey(NCRYPT_KEY_HANDLE hKey, NCRYPT_KEY_HANDLE hExportKey, LPCWSTR pszBlobType, NCryptBufferDesc* pParameterList, PBYTE pbOutput, DWORD cbOutput, DWORD* pcbResult, DWORD dwFlags);
     * }
     */
    public static int NCryptExportKey(long hKey, long hExportKey, MemorySegment pszBlobType, MemorySegment pParameterList, MemorySegment pbOutput, int cbOutput, MemorySegment pcbResult, int dwFlags) {
        var mh$ = NCryptExportKey$MH();
        try {
            return (int)mh$.invokeExact(hKey, hExportKey, pszBlobType, pParameterList, pbOutput, cbOutput, pcbResult, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptSignHash$MH() {
        return RuntimeHelper.requireNonNull(constants$2000.const$1,"NCryptSignHash");
    }
    /**
     * {@snippet :
     * SECURITY_STATUS NCryptSignHash(NCRYPT_KEY_HANDLE hKey, void* pPaddingInfo, PBYTE pbHashValue, DWORD cbHashValue, PBYTE pbSignature, DWORD cbSignature, DWORD* pcbResult, DWORD dwFlags);
     * }
     */
    public static int NCryptSignHash(long hKey, MemorySegment pPaddingInfo, MemorySegment pbHashValue, int cbHashValue, MemorySegment pbSignature, int cbSignature, MemorySegment pcbResult, int dwFlags) {
        var mh$ = NCryptSignHash$MH();
        try {
            return (int)mh$.invokeExact(hKey, pPaddingInfo, pbHashValue, cbHashValue, pbSignature, cbSignature, pcbResult, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptVerifySignature$MH() {
        return RuntimeHelper.requireNonNull(constants$2000.const$3,"NCryptVerifySignature");
    }
    /**
     * {@snippet :
     * SECURITY_STATUS NCryptVerifySignature(NCRYPT_KEY_HANDLE hKey, void* pPaddingInfo, PBYTE pbHashValue, DWORD cbHashValue, PBYTE pbSignature, DWORD cbSignature, DWORD dwFlags);
     * }
     */
    public static int NCryptVerifySignature(long hKey, MemorySegment pPaddingInfo, MemorySegment pbHashValue, int cbHashValue, MemorySegment pbSignature, int cbSignature, int dwFlags) {
        var mh$ = NCryptVerifySignature$MH();
        try {
            return (int)mh$.invokeExact(hKey, pPaddingInfo, pbHashValue, cbHashValue, pbSignature, cbSignature, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptDeleteKey$MH() {
        return RuntimeHelper.requireNonNull(constants$2000.const$4,"NCryptDeleteKey");
    }
    /**
     * {@snippet :
     * SECURITY_STATUS NCryptDeleteKey(NCRYPT_KEY_HANDLE hKey, DWORD dwFlags);
     * }
     */
    public static int NCryptDeleteKey(long hKey, int dwFlags) {
        var mh$ = NCryptDeleteKey$MH();
        try {
            return (int)mh$.invokeExact(hKey, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptFreeObject$MH() {
        return RuntimeHelper.requireNonNull(constants$2000.const$5,"NCryptFreeObject");
    }
    /**
     * {@snippet :
     * SECURITY_STATUS NCryptFreeObject(NCRYPT_HANDLE hObject);
     * }
     */
    public static int NCryptFreeObject(long hObject) {
        var mh$ = NCryptFreeObject$MH();
        try {
            return (int)mh$.invokeExact(hObject);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptIsKeyHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$2001.const$0,"NCryptIsKeyHandle");
    }
    /**
     * {@snippet :
     * BOOL NCryptIsKeyHandle(NCRYPT_KEY_HANDLE hKey);
     * }
     */
    public static int NCryptIsKeyHandle(long hKey) {
        var mh$ = NCryptIsKeyHandle$MH();
        try {
            return (int)mh$.invokeExact(hKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptTranslateHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$2001.const$2,"NCryptTranslateHandle");
    }
    /**
     * {@snippet :
     * SECURITY_STATUS NCryptTranslateHandle(NCRYPT_PROV_HANDLE* phProvider, NCRYPT_KEY_HANDLE* phKey, HCRYPTPROV hLegacyProv, HCRYPTKEY hLegacyKey, DWORD dwLegacyKeySpec, DWORD dwFlags);
     * }
     */
    public static int NCryptTranslateHandle(MemorySegment phProvider, MemorySegment phKey, long hLegacyProv, long hLegacyKey, int dwLegacyKeySpec, int dwFlags) {
        var mh$ = NCryptTranslateHandle$MH();
        try {
            return (int)mh$.invokeExact(phProvider, phKey, hLegacyProv, hLegacyKey, dwLegacyKeySpec, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptNotifyChangeKey$MH() {
        return RuntimeHelper.requireNonNull(constants$2001.const$3,"NCryptNotifyChangeKey");
    }
    /**
     * {@snippet :
     * SECURITY_STATUS NCryptNotifyChangeKey(NCRYPT_PROV_HANDLE hProvider, HANDLE* phEvent, DWORD dwFlags);
     * }
     */
    public static int NCryptNotifyChangeKey(long hProvider, MemorySegment phEvent, int dwFlags) {
        var mh$ = NCryptNotifyChangeKey$MH();
        try {
            return (int)mh$.invokeExact(hProvider, phEvent, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptSecretAgreement$MH() {
        return RuntimeHelper.requireNonNull(constants$2001.const$5,"NCryptSecretAgreement");
    }
    /**
     * {@snippet :
     * SECURITY_STATUS NCryptSecretAgreement(NCRYPT_KEY_HANDLE hPrivKey, NCRYPT_KEY_HANDLE hPubKey, NCRYPT_SECRET_HANDLE* phAgreedSecret, DWORD dwFlags);
     * }
     */
    public static int NCryptSecretAgreement(long hPrivKey, long hPubKey, MemorySegment phAgreedSecret, int dwFlags) {
        var mh$ = NCryptSecretAgreement$MH();
        try {
            return (int)mh$.invokeExact(hPrivKey, hPubKey, phAgreedSecret, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptDeriveKey$MH() {
        return RuntimeHelper.requireNonNull(constants$2002.const$1,"NCryptDeriveKey");
    }
    /**
     * {@snippet :
     * SECURITY_STATUS NCryptDeriveKey(NCRYPT_SECRET_HANDLE hSharedSecret, LPCWSTR pwszKDF, NCryptBufferDesc* pParameterList, PBYTE pbDerivedKey, DWORD cbDerivedKey, DWORD* pcbResult, ULONG dwFlags);
     * }
     */
    public static int NCryptDeriveKey(long hSharedSecret, MemorySegment pwszKDF, MemorySegment pParameterList, MemorySegment pbDerivedKey, int cbDerivedKey, MemorySegment pcbResult, int dwFlags) {
        var mh$ = NCryptDeriveKey$MH();
        try {
            return (int)mh$.invokeExact(hSharedSecret, pwszKDF, pParameterList, pbDerivedKey, cbDerivedKey, pcbResult, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptKeyDerivation$MH() {
        return RuntimeHelper.requireNonNull(constants$2002.const$2,"NCryptKeyDerivation");
    }
    /**
     * {@snippet :
     * SECURITY_STATUS NCryptKeyDerivation(NCRYPT_KEY_HANDLE hKey, NCryptBufferDesc* pParameterList, PUCHAR pbDerivedKey, DWORD cbDerivedKey, DWORD* pcbResult, ULONG dwFlags);
     * }
     */
    public static int NCryptKeyDerivation(long hKey, MemorySegment pParameterList, MemorySegment pbDerivedKey, int cbDerivedKey, MemorySegment pcbResult, int dwFlags) {
        var mh$ = NCryptKeyDerivation$MH();
        try {
            return (int)mh$.invokeExact(hKey, pParameterList, pbDerivedKey, cbDerivedKey, pcbResult, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptCreateClaim$MH() {
        return RuntimeHelper.requireNonNull(constants$2002.const$4,"NCryptCreateClaim");
    }
    /**
     * {@snippet :
     * SECURITY_STATUS NCryptCreateClaim(NCRYPT_KEY_HANDLE hSubjectKey, NCRYPT_KEY_HANDLE hAuthorityKey, DWORD dwClaimType, NCryptBufferDesc* pParameterList, PBYTE pbClaimBlob, DWORD cbClaimBlob, DWORD* pcbResult, DWORD dwFlags);
     * }
     */
    public static int NCryptCreateClaim(long hSubjectKey, long hAuthorityKey, int dwClaimType, MemorySegment pParameterList, MemorySegment pbClaimBlob, int cbClaimBlob, MemorySegment pcbResult, int dwFlags) {
        var mh$ = NCryptCreateClaim$MH();
        try {
            return (int)mh$.invokeExact(hSubjectKey, hAuthorityKey, dwClaimType, pParameterList, pbClaimBlob, cbClaimBlob, pcbResult, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptVerifyClaim$MH() {
        return RuntimeHelper.requireNonNull(constants$2002.const$5,"NCryptVerifyClaim");
    }
    /**
     * {@snippet :
     * SECURITY_STATUS NCryptVerifyClaim(NCRYPT_KEY_HANDLE hSubjectKey, NCRYPT_KEY_HANDLE hAuthorityKey, DWORD dwClaimType, NCryptBufferDesc* pParameterList, PBYTE pbClaimBlob, DWORD cbClaimBlob, NCryptBufferDesc* pOutput, DWORD dwFlags);
     * }
     */
    public static int NCryptVerifyClaim(long hSubjectKey, long hAuthorityKey, int dwClaimType, MemorySegment pParameterList, MemorySegment pbClaimBlob, int cbClaimBlob, MemorySegment pOutput, int dwFlags) {
        var mh$ = NCryptVerifyClaim$MH();
        try {
            return (int)mh$.invokeExact(hSubjectKey, hAuthorityKey, dwClaimType, pParameterList, pbClaimBlob, cbClaimBlob, pOutput, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned long long HCRYPTPROV_OR_NCRYPT_KEY_HANDLE;
     * }
     */
    public static final OfLong HCRYPTPROV_OR_NCRYPT_KEY_HANDLE = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long HCRYPTPROV_LEGACY;
     * }
     */
    public static final OfLong HCRYPTPROV_LEGACY = JAVA_LONG;
    /**
     * {@snippet :
     * typedef struct _CRYPT_BIT_BLOB* PCRYPT_BIT_BLOB;
     * }
     */
    public static final AddressLayout PCRYPT_BIT_BLOB = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPT_ALGORITHM_IDENTIFIER* PCRYPT_ALGORITHM_IDENTIFIER;
     * }
     */
    public static final AddressLayout PCRYPT_ALGORITHM_IDENTIFIER = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPT_OBJID_TABLE* PCRYPT_OBJID_TABLE;
     * }
     */
    public static final AddressLayout PCRYPT_OBJID_TABLE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPT_HASH_INFO* PCRYPT_HASH_INFO;
     * }
     */
    public static final AddressLayout PCRYPT_HASH_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_EXTENSION* PCERT_EXTENSION;
     * }
     */
    public static final AddressLayout PCERT_EXTENSION = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_EXTENSION* PCCERT_EXTENSION;
     * }
     */
    public static final AddressLayout PCCERT_EXTENSION = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPT_ATTRIBUTE_TYPE_VALUE* PCRYPT_ATTRIBUTE_TYPE_VALUE;
     * }
     */
    public static final AddressLayout PCRYPT_ATTRIBUTE_TYPE_VALUE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPT_ATTRIBUTE* PCRYPT_ATTRIBUTE;
     * }
     */
    public static final AddressLayout PCRYPT_ATTRIBUTE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPT_ATTRIBUTES* PCRYPT_ATTRIBUTES;
     * }
     */
    public static final AddressLayout PCRYPT_ATTRIBUTES = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_RDN_ATTR* PCERT_RDN_ATTR;
     * }
     */
    public static final AddressLayout PCERT_RDN_ATTR = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_RDN* PCERT_RDN;
     * }
     */
    public static final AddressLayout PCERT_RDN = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_NAME_INFO* PCERT_NAME_INFO;
     * }
     */
    public static final AddressLayout PCERT_NAME_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_NAME_VALUE* PCERT_NAME_VALUE;
     * }
     */
    public static final AddressLayout PCERT_NAME_VALUE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_PUBLIC_KEY_INFO* PCERT_PUBLIC_KEY_INFO;
     * }
     */
    public static final AddressLayout PCERT_PUBLIC_KEY_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPT_ECC_PRIVATE_KEY_INFO* PCRYPT_ECC_PRIVATE_KEY_INFO;
     * }
     */
    public static final AddressLayout PCRYPT_ECC_PRIVATE_KEY_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPT_PRIVATE_KEY_INFO* PCRYPT_PRIVATE_KEY_INFO;
     * }
     */
    public static final AddressLayout PCRYPT_PRIVATE_KEY_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPT_ENCRYPTED_PRIVATE_KEY_INFO* PCRYPT_ENCRYPTED_PRIVATE_KEY_INFO;
     * }
     */
    public static final AddressLayout PCRYPT_ENCRYPTED_PRIVATE_KEY_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPT_PKCS8_IMPORT_PARAMS* PCRYPT_PKCS8_IMPORT_PARAMS;
     * }
     */
    public static final AddressLayout PCRYPT_PKCS8_IMPORT_PARAMS = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPT_PKCS8_IMPORT_PARAMS* PCRYPT_PRIVATE_KEY_BLOB_AND_PARAMS;
     * }
     */
    public static final AddressLayout PCRYPT_PRIVATE_KEY_BLOB_AND_PARAMS = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPT_PKCS8_EXPORT_PARAMS* PCRYPT_PKCS8_EXPORT_PARAMS;
     * }
     */
    public static final AddressLayout PCRYPT_PKCS8_EXPORT_PARAMS = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_INFO* PCERT_INFO;
     * }
     */
    public static final AddressLayout PCERT_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRL_ENTRY* PCRL_ENTRY;
     * }
     */
    public static final AddressLayout PCRL_ENTRY = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRL_INFO* PCRL_INFO;
     * }
     */
    public static final AddressLayout PCRL_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_OR_CRL_BLOB* PCERT_OR_CRL_BLOB;
     * }
     */
    public static final AddressLayout PCERT_OR_CRL_BLOB = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_OR_CRL_BUNDLE* PCERT_OR_CRL_BUNDLE;
     * }
     */
    public static final AddressLayout PCERT_OR_CRL_BUNDLE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_REQUEST_INFO* PCERT_REQUEST_INFO;
     * }
     */
    public static final AddressLayout PCERT_REQUEST_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_KEYGEN_REQUEST_INFO* PCERT_KEYGEN_REQUEST_INFO;
     * }
     */
    public static final AddressLayout PCERT_KEYGEN_REQUEST_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_SIGNED_CONTENT_INFO* PCERT_SIGNED_CONTENT_INFO;
     * }
     */
    public static final AddressLayout PCERT_SIGNED_CONTENT_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CTL_USAGE* PCTL_USAGE;
     * }
     */
    public static final AddressLayout PCTL_USAGE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CTL_USAGE* PCERT_ENHKEY_USAGE;
     * }
     */
    public static final AddressLayout PCERT_ENHKEY_USAGE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CTL_USAGE* PCCTL_USAGE;
     * }
     */
    public static final AddressLayout PCCTL_USAGE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CTL_USAGE* PCCERT_ENHKEY_USAGE;
     * }
     */
    public static final AddressLayout PCCERT_ENHKEY_USAGE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CTL_ENTRY* PCTL_ENTRY;
     * }
     */
    public static final AddressLayout PCTL_ENTRY = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CTL_INFO* PCTL_INFO;
     * }
     */
    public static final AddressLayout PCTL_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPT_TIME_STAMP_REQUEST_INFO* PCRYPT_TIME_STAMP_REQUEST_INFO;
     * }
     */
    public static final AddressLayout PCRYPT_TIME_STAMP_REQUEST_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPT_ENROLLMENT_NAME_VALUE_PAIR* PCRYPT_ENROLLMENT_NAME_VALUE_PAIR;
     * }
     */
    public static final AddressLayout PCRYPT_ENROLLMENT_NAME_VALUE_PAIR = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPT_CSP_PROVIDER* PCRYPT_CSP_PROVIDER;
     * }
     */
    public static final AddressLayout PCRYPT_CSP_PROVIDER = RuntimeHelper.POINTER;
    public static MethodHandle CryptFormatObject$MH() {
        return RuntimeHelper.requireNonNull(constants$2021.const$1,"CryptFormatObject");
    }
    /**
     * {@snippet :
     * BOOL CryptFormatObject(DWORD dwCertEncodingType, DWORD dwFormatType, DWORD dwFormatStrType, void* pFormatStruct, LPCSTR lpszStructType, const BYTE* pbEncoded, DWORD cbEncoded, void* pbFormat, DWORD* pcbFormat);
     * }
     */
    public static int CryptFormatObject(int dwCertEncodingType, int dwFormatType, int dwFormatStrType, MemorySegment pFormatStruct, MemorySegment lpszStructType, MemorySegment pbEncoded, int cbEncoded, MemorySegment pbFormat, MemorySegment pcbFormat) {
        var mh$ = CryptFormatObject$MH();
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, dwFormatType, dwFormatStrType, pFormatStruct, lpszStructType, pbEncoded, cbEncoded, pbFormat, pcbFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _CRYPT_ENCODE_PARA* PCRYPT_ENCODE_PARA;
     * }
     */
    public static final AddressLayout PCRYPT_ENCODE_PARA = RuntimeHelper.POINTER;
    public static MethodHandle CryptEncodeObjectEx$MH() {
        return RuntimeHelper.requireNonNull(constants$2022.const$3,"CryptEncodeObjectEx");
    }
    /**
     * {@snippet :
     * BOOL CryptEncodeObjectEx(DWORD dwCertEncodingType, LPCSTR lpszStructType, void* pvStructInfo, DWORD dwFlags, PCRYPT_ENCODE_PARA pEncodePara, void* pvEncoded, DWORD* pcbEncoded);
     * }
     */
    public static int CryptEncodeObjectEx(int dwCertEncodingType, MemorySegment lpszStructType, MemorySegment pvStructInfo, int dwFlags, MemorySegment pEncodePara, MemorySegment pvEncoded, MemorySegment pcbEncoded) {
        var mh$ = CryptEncodeObjectEx$MH();
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, lpszStructType, pvStructInfo, dwFlags, pEncodePara, pvEncoded, pcbEncoded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptEncodeObject$MH() {
        return RuntimeHelper.requireNonNull(constants$2022.const$4,"CryptEncodeObject");
    }
    /**
     * {@snippet :
     * BOOL CryptEncodeObject(DWORD dwCertEncodingType, LPCSTR lpszStructType, void* pvStructInfo, BYTE* pbEncoded, DWORD* pcbEncoded);
     * }
     */
    public static int CryptEncodeObject(int dwCertEncodingType, MemorySegment lpszStructType, MemorySegment pvStructInfo, MemorySegment pbEncoded, MemorySegment pcbEncoded) {
        var mh$ = CryptEncodeObject$MH();
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, lpszStructType, pvStructInfo, pbEncoded, pcbEncoded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _CRYPT_DECODE_PARA* PCRYPT_DECODE_PARA;
     * }
     */
    public static final AddressLayout PCRYPT_DECODE_PARA = RuntimeHelper.POINTER;
    public static MethodHandle CryptDecodeObjectEx$MH() {
        return RuntimeHelper.requireNonNull(constants$2023.const$4,"CryptDecodeObjectEx");
    }
    /**
     * {@snippet :
     * BOOL CryptDecodeObjectEx(DWORD dwCertEncodingType, LPCSTR lpszStructType, const BYTE* pbEncoded, DWORD cbEncoded, DWORD dwFlags, PCRYPT_DECODE_PARA pDecodePara, void* pvStructInfo, DWORD* pcbStructInfo);
     * }
     */
    public static int CryptDecodeObjectEx(int dwCertEncodingType, MemorySegment lpszStructType, MemorySegment pbEncoded, int cbEncoded, int dwFlags, MemorySegment pDecodePara, MemorySegment pvStructInfo, MemorySegment pcbStructInfo) {
        var mh$ = CryptDecodeObjectEx$MH();
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, lpszStructType, pbEncoded, cbEncoded, dwFlags, pDecodePara, pvStructInfo, pcbStructInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptDecodeObject$MH() {
        return RuntimeHelper.requireNonNull(constants$2023.const$6,"CryptDecodeObject");
    }
    /**
     * {@snippet :
     * BOOL CryptDecodeObject(DWORD dwCertEncodingType, LPCSTR lpszStructType, const BYTE* pbEncoded, DWORD cbEncoded, DWORD dwFlags, void* pvStructInfo, DWORD* pcbStructInfo);
     * }
     */
    public static int CryptDecodeObject(int dwCertEncodingType, MemorySegment lpszStructType, MemorySegment pbEncoded, int cbEncoded, int dwFlags, MemorySegment pvStructInfo, MemorySegment pcbStructInfo) {
        var mh$ = CryptDecodeObject$MH();
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, lpszStructType, pbEncoded, cbEncoded, dwFlags, pvStructInfo, pcbStructInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _CERT_EXTENSIONS* PCERT_EXTENSIONS;
     * }
     */
    public static final AddressLayout PCERT_EXTENSIONS = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_AUTHORITY_KEY_ID_INFO* PCERT_AUTHORITY_KEY_ID_INFO;
     * }
     */
    public static final AddressLayout PCERT_AUTHORITY_KEY_ID_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_PRIVATE_KEY_VALIDITY* PCERT_PRIVATE_KEY_VALIDITY;
     * }
     */
    public static final AddressLayout PCERT_PRIVATE_KEY_VALIDITY = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_KEY_ATTRIBUTES_INFO* PCERT_KEY_ATTRIBUTES_INFO;
     * }
     */
    public static final AddressLayout PCERT_KEY_ATTRIBUTES_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_POLICY_ID* PCERT_POLICY_ID;
     * }
     */
    public static final AddressLayout PCERT_POLICY_ID = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_KEY_USAGE_RESTRICTION_INFO* PCERT_KEY_USAGE_RESTRICTION_INFO;
     * }
     */
    public static final AddressLayout PCERT_KEY_USAGE_RESTRICTION_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_OTHER_NAME* PCERT_OTHER_NAME;
     * }
     */
    public static final AddressLayout PCERT_OTHER_NAME = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_ALT_NAME_ENTRY* PCERT_ALT_NAME_ENTRY;
     * }
     */
    public static final AddressLayout PCERT_ALT_NAME_ENTRY = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_ALT_NAME_INFO* PCERT_ALT_NAME_INFO;
     * }
     */
    public static final AddressLayout PCERT_ALT_NAME_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_BASIC_CONSTRAINTS_INFO* PCERT_BASIC_CONSTRAINTS_INFO;
     * }
     */
    public static final AddressLayout PCERT_BASIC_CONSTRAINTS_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_BASIC_CONSTRAINTS2_INFO* PCERT_BASIC_CONSTRAINTS2_INFO;
     * }
     */
    public static final AddressLayout PCERT_BASIC_CONSTRAINTS2_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_POLICY_QUALIFIER_INFO* PCERT_POLICY_QUALIFIER_INFO;
     * }
     */
    public static final AddressLayout PCERT_POLICY_QUALIFIER_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_POLICY_INFO* PCERT_POLICY_INFO;
     * }
     */
    public static final AddressLayout PCERT_POLICY_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_POLICIES_INFO* PCERT_POLICIES_INFO;
     * }
     */
    public static final AddressLayout PCERT_POLICIES_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE* PCERT_POLICY_QUALIFIER_NOTICE_REFERENCE;
     * }
     */
    public static final AddressLayout PCERT_POLICY_QUALIFIER_NOTICE_REFERENCE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_POLICY_QUALIFIER_USER_NOTICE* PCERT_POLICY_QUALIFIER_USER_NOTICE;
     * }
     */
    public static final AddressLayout PCERT_POLICY_QUALIFIER_USER_NOTICE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CPS_URLS* PCPS_URLS;
     * }
     */
    public static final AddressLayout PCPS_URLS = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_POLICY95_QUALIFIER1* PCERT_POLICY95_QUALIFIER1;
     * }
     */
    public static final AddressLayout PCERT_POLICY95_QUALIFIER1 = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_POLICY_MAPPING* PCERT_POLICY_MAPPING;
     * }
     */
    public static final AddressLayout PCERT_POLICY_MAPPING = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_POLICY_MAPPINGS_INFO* PCERT_POLICY_MAPPINGS_INFO;
     * }
     */
    public static final AddressLayout PCERT_POLICY_MAPPINGS_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_POLICY_CONSTRAINTS_INFO* PCERT_POLICY_CONSTRAINTS_INFO;
     * }
     */
    public static final AddressLayout PCERT_POLICY_CONSTRAINTS_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY* PCRYPT_CONTENT_INFO_SEQUENCE_OF_ANY;
     * }
     */
    public static final AddressLayout PCRYPT_CONTENT_INFO_SEQUENCE_OF_ANY = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPT_CONTENT_INFO* PCRYPT_CONTENT_INFO;
     * }
     */
    public static final AddressLayout PCRYPT_CONTENT_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPT_SEQUENCE_OF_ANY* PCRYPT_SEQUENCE_OF_ANY;
     * }
     */
    public static final AddressLayout PCRYPT_SEQUENCE_OF_ANY = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_AUTHORITY_KEY_ID2_INFO* PCERT_AUTHORITY_KEY_ID2_INFO;
     * }
     */
    public static final AddressLayout PCERT_AUTHORITY_KEY_ID2_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_ACCESS_DESCRIPTION* PCERT_ACCESS_DESCRIPTION;
     * }
     */
    public static final AddressLayout PCERT_ACCESS_DESCRIPTION = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_AUTHORITY_INFO_ACCESS* PCERT_AUTHORITY_INFO_ACCESS;
     * }
     */
    public static final AddressLayout PCERT_AUTHORITY_INFO_ACCESS = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_AUTHORITY_INFO_ACCESS* PCERT_SUBJECT_INFO_ACCESS;
     * }
     */
    public static final AddressLayout PCERT_SUBJECT_INFO_ACCESS = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRL_DIST_POINT_NAME* PCRL_DIST_POINT_NAME;
     * }
     */
    public static final AddressLayout PCRL_DIST_POINT_NAME = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRL_DIST_POINT* PCRL_DIST_POINT;
     * }
     */
    public static final AddressLayout PCRL_DIST_POINT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRL_DIST_POINTS_INFO* PCRL_DIST_POINTS_INFO;
     * }
     */
    public static final AddressLayout PCRL_DIST_POINTS_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CROSS_CERT_DIST_POINTS_INFO* PCROSS_CERT_DIST_POINTS_INFO;
     * }
     */
    public static final AddressLayout PCROSS_CERT_DIST_POINTS_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_PAIR* PCERT_PAIR;
     * }
     */
    public static final AddressLayout PCERT_PAIR = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRL_ISSUING_DIST_POINT* PCRL_ISSUING_DIST_POINT;
     * }
     */
    public static final AddressLayout PCRL_ISSUING_DIST_POINT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_GENERAL_SUBTREE* PCERT_GENERAL_SUBTREE;
     * }
     */
    public static final AddressLayout PCERT_GENERAL_SUBTREE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_NAME_CONSTRAINTS_INFO* PCERT_NAME_CONSTRAINTS_INFO;
     * }
     */
    public static final AddressLayout PCERT_NAME_CONSTRAINTS_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_DSS_PARAMETERS* PCERT_DSS_PARAMETERS;
     * }
     */
    public static final AddressLayout PCERT_DSS_PARAMETERS = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_DH_PARAMETERS* PCERT_DH_PARAMETERS;
     * }
     */
    public static final AddressLayout PCERT_DH_PARAMETERS = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_ECC_SIGNATURE* PCERT_ECC_SIGNATURE;
     * }
     */
    public static final AddressLayout PCERT_ECC_SIGNATURE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_X942_DH_VALIDATION_PARAMS* PCERT_X942_DH_VALIDATION_PARAMS;
     * }
     */
    public static final AddressLayout PCERT_X942_DH_VALIDATION_PARAMS = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_X942_DH_PARAMETERS* PCERT_X942_DH_PARAMETERS;
     * }
     */
    public static final AddressLayout PCERT_X942_DH_PARAMETERS = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPT_X942_OTHER_INFO* PCRYPT_X942_OTHER_INFO;
     * }
     */
    public static final AddressLayout PCRYPT_X942_OTHER_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPT_ECC_CMS_SHARED_INFO* PCRYPT_ECC_CMS_SHARED_INFO;
     * }
     */
    public static final AddressLayout PCRYPT_ECC_CMS_SHARED_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPT_RC2_CBC_PARAMETERS* PCRYPT_RC2_CBC_PARAMETERS;
     * }
     */
    public static final AddressLayout PCRYPT_RC2_CBC_PARAMETERS = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPT_SMIME_CAPABILITY* PCRYPT_SMIME_CAPABILITY;
     * }
     */
    public static final AddressLayout PCRYPT_SMIME_CAPABILITY = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPT_SMIME_CAPABILITIES* PCRYPT_SMIME_CAPABILITIES;
     * }
     */
    public static final AddressLayout PCRYPT_SMIME_CAPABILITIES = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_QC_STATEMENT* PCERT_QC_STATEMENT;
     * }
     */
    public static final AddressLayout PCERT_QC_STATEMENT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_QC_STATEMENTS_EXT_INFO* PCERT_QC_STATEMENTS_EXT_INFO;
     * }
     */
    public static final AddressLayout PCERT_QC_STATEMENTS_EXT_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPT_MASK_GEN_ALGORITHM* PCRYPT_MASK_GEN_ALGORITHM;
     * }
     */
    public static final AddressLayout PCRYPT_MASK_GEN_ALGORITHM = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPT_RSA_SSA_PSS_PARAMETERS* PCRYPT_RSA_SSA_PSS_PARAMETERS;
     * }
     */
    public static final AddressLayout PCRYPT_RSA_SSA_PSS_PARAMETERS = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPT_PSOURCE_ALGORITHM* PCRYPT_PSOURCE_ALGORITHM;
     * }
     */
    public static final AddressLayout PCRYPT_PSOURCE_ALGORITHM = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPT_RSAES_OAEP_PARAMETERS* PCRYPT_RSAES_OAEP_PARAMETERS;
     * }
     */
    public static final AddressLayout PCRYPT_RSAES_OAEP_PARAMETERS = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CMC_TAGGED_ATTRIBUTE* PCMC_TAGGED_ATTRIBUTE;
     * }
     */
    public static final AddressLayout PCMC_TAGGED_ATTRIBUTE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CMC_TAGGED_CERT_REQUEST* PCMC_TAGGED_CERT_REQUEST;
     * }
     */
    public static final AddressLayout PCMC_TAGGED_CERT_REQUEST = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CMC_TAGGED_REQUEST* PCMC_TAGGED_REQUEST;
     * }
     */
    public static final AddressLayout PCMC_TAGGED_REQUEST = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CMC_TAGGED_CONTENT_INFO* PCMC_TAGGED_CONTENT_INFO;
     * }
     */
    public static final AddressLayout PCMC_TAGGED_CONTENT_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CMC_TAGGED_OTHER_MSG* PCMC_TAGGED_OTHER_MSG;
     * }
     */
    public static final AddressLayout PCMC_TAGGED_OTHER_MSG = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CMC_DATA_INFO* PCMC_DATA_INFO;
     * }
     */
    public static final AddressLayout PCMC_DATA_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CMC_RESPONSE_INFO* PCMC_RESPONSE_INFO;
     * }
     */
    public static final AddressLayout PCMC_RESPONSE_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CMC_PEND_INFO* PCMC_PEND_INFO;
     * }
     */
    public static final AddressLayout PCMC_PEND_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CMC_STATUS_INFO* PCMC_STATUS_INFO;
     * }
     */
    public static final AddressLayout PCMC_STATUS_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CMC_ADD_EXTENSIONS_INFO* PCMC_ADD_EXTENSIONS_INFO;
     * }
     */
    public static final AddressLayout PCMC_ADD_EXTENSIONS_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CMC_ADD_ATTRIBUTES_INFO* PCMC_ADD_ATTRIBUTES_INFO;
     * }
     */
    public static final AddressLayout PCMC_ADD_ATTRIBUTES_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_TEMPLATE_EXT* PCERT_TEMPLATE_EXT;
     * }
     */
    public static final AddressLayout PCERT_TEMPLATE_EXT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_HASHED_URL* PCERT_HASHED_URL;
     * }
     */
    public static final AddressLayout PCERT_HASHED_URL = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_LOGOTYPE_DETAILS* PCERT_LOGOTYPE_DETAILS;
     * }
     */
    public static final AddressLayout PCERT_LOGOTYPE_DETAILS = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_LOGOTYPE_REFERENCE* PCERT_LOGOTYPE_REFERENCE;
     * }
     */
    public static final AddressLayout PCERT_LOGOTYPE_REFERENCE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_LOGOTYPE_IMAGE_INFO* PCERT_LOGOTYPE_IMAGE_INFO;
     * }
     */
    public static final AddressLayout PCERT_LOGOTYPE_IMAGE_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_LOGOTYPE_IMAGE* PCERT_LOGOTYPE_IMAGE;
     * }
     */
    public static final AddressLayout PCERT_LOGOTYPE_IMAGE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_LOGOTYPE_AUDIO_INFO* PCERT_LOGOTYPE_AUDIO_INFO;
     * }
     */
    public static final AddressLayout PCERT_LOGOTYPE_AUDIO_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_LOGOTYPE_AUDIO* PCERT_LOGOTYPE_AUDIO;
     * }
     */
    public static final AddressLayout PCERT_LOGOTYPE_AUDIO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_LOGOTYPE_DATA* PCERT_LOGOTYPE_DATA;
     * }
     */
    public static final AddressLayout PCERT_LOGOTYPE_DATA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_LOGOTYPE_INFO* PCERT_LOGOTYPE_INFO;
     * }
     */
    public static final AddressLayout PCERT_LOGOTYPE_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_OTHER_LOGOTYPE_INFO* PCERT_OTHER_LOGOTYPE_INFO;
     * }
     */
    public static final AddressLayout PCERT_OTHER_LOGOTYPE_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_LOGOTYPE_EXT_INFO* PCERT_LOGOTYPE_EXT_INFO;
     * }
     */
    public static final AddressLayout PCERT_LOGOTYPE_EXT_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_BIOMETRIC_DATA* PCERT_BIOMETRIC_DATA;
     * }
     */
    public static final AddressLayout PCERT_BIOMETRIC_DATA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_BIOMETRIC_EXT_INFO* PCERT_BIOMETRIC_EXT_INFO;
     * }
     */
    public static final AddressLayout PCERT_BIOMETRIC_EXT_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _OCSP_SIGNATURE_INFO* POCSP_SIGNATURE_INFO;
     * }
     */
    public static final AddressLayout POCSP_SIGNATURE_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _OCSP_SIGNED_REQUEST_INFO* POCSP_SIGNED_REQUEST_INFO;
     * }
     */
    public static final AddressLayout POCSP_SIGNED_REQUEST_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _OCSP_CERT_ID* POCSP_CERT_ID;
     * }
     */
    public static final AddressLayout POCSP_CERT_ID = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _OCSP_REQUEST_ENTRY* POCSP_REQUEST_ENTRY;
     * }
     */
    public static final AddressLayout POCSP_REQUEST_ENTRY = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _OCSP_REQUEST_INFO* POCSP_REQUEST_INFO;
     * }
     */
    public static final AddressLayout POCSP_REQUEST_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _OCSP_RESPONSE_INFO* POCSP_RESPONSE_INFO;
     * }
     */
    public static final AddressLayout POCSP_RESPONSE_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _OCSP_BASIC_SIGNED_RESPONSE_INFO* POCSP_BASIC_SIGNED_RESPONSE_INFO;
     * }
     */
    public static final AddressLayout POCSP_BASIC_SIGNED_RESPONSE_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _OCSP_BASIC_REVOKED_INFO* POCSP_BASIC_REVOKED_INFO;
     * }
     */
    public static final AddressLayout POCSP_BASIC_REVOKED_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _OCSP_BASIC_RESPONSE_ENTRY* POCSP_BASIC_RESPONSE_ENTRY;
     * }
     */
    public static final AddressLayout POCSP_BASIC_RESPONSE_ENTRY = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _OCSP_BASIC_RESPONSE_INFO* POCSP_BASIC_RESPONSE_INFO;
     * }
     */
    public static final AddressLayout POCSP_BASIC_RESPONSE_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_SUPPORTED_ALGORITHM_INFO* PCERT_SUPPORTED_ALGORITHM_INFO;
     * }
     */
    public static final AddressLayout PCERT_SUPPORTED_ALGORITHM_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_TPM_SPECIFICATION_INFO* PCERT_TPM_SPECIFICATION_INFO;
     * }
     */
    public static final AddressLayout PCERT_TPM_SPECIFICATION_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef void* HCRYPTOIDFUNCSET;
     * }
     */
    public static final AddressLayout HCRYPTOIDFUNCSET = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef void* HCRYPTOIDFUNCADDR;
     * }
     */
    public static final AddressLayout HCRYPTOIDFUNCADDR = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPT_OID_FUNC_ENTRY* PCRYPT_OID_FUNC_ENTRY;
     * }
     */
    public static final AddressLayout PCRYPT_OID_FUNC_ENTRY = RuntimeHelper.POINTER;
    public static MethodHandle CryptInstallOIDFunctionAddress$MH() {
        return RuntimeHelper.requireNonNull(constants$2072.const$3,"CryptInstallOIDFunctionAddress");
    }
    /**
     * {@snippet :
     * BOOL CryptInstallOIDFunctionAddress(HMODULE hModule, DWORD dwEncodingType, LPCSTR pszFuncName, DWORD cFuncEntry, const CRYPT_OID_FUNC_ENTRY rgFuncEntry[], DWORD dwFlags);
     * }
     */
    public static int CryptInstallOIDFunctionAddress(MemorySegment hModule, int dwEncodingType, MemorySegment pszFuncName, int cFuncEntry, MemorySegment rgFuncEntry, int dwFlags) {
        var mh$ = CryptInstallOIDFunctionAddress$MH();
        try {
            return (int)mh$.invokeExact(hModule, dwEncodingType, pszFuncName, cFuncEntry, rgFuncEntry, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptInitOIDFunctionSet$MH() {
        return RuntimeHelper.requireNonNull(constants$2072.const$4,"CryptInitOIDFunctionSet");
    }
    /**
     * {@snippet :
     * HCRYPTOIDFUNCSET CryptInitOIDFunctionSet(LPCSTR pszFuncName, DWORD dwFlags);
     * }
     */
    public static MemorySegment CryptInitOIDFunctionSet(MemorySegment pszFuncName, int dwFlags) {
        var mh$ = CryptInitOIDFunctionSet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(pszFuncName, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptGetOIDFunctionAddress$MH() {
        return RuntimeHelper.requireNonNull(constants$2072.const$5,"CryptGetOIDFunctionAddress");
    }
    /**
     * {@snippet :
     * BOOL CryptGetOIDFunctionAddress(HCRYPTOIDFUNCSET hFuncSet, DWORD dwEncodingType, LPCSTR pszOID, DWORD dwFlags, void** ppvFuncAddr, HCRYPTOIDFUNCADDR* phFuncAddr);
     * }
     */
    public static int CryptGetOIDFunctionAddress(MemorySegment hFuncSet, int dwEncodingType, MemorySegment pszOID, int dwFlags, MemorySegment ppvFuncAddr, MemorySegment phFuncAddr) {
        var mh$ = CryptGetOIDFunctionAddress$MH();
        try {
            return (int)mh$.invokeExact(hFuncSet, dwEncodingType, pszOID, dwFlags, ppvFuncAddr, phFuncAddr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptGetDefaultOIDDllList$MH() {
        return RuntimeHelper.requireNonNull(constants$2073.const$0,"CryptGetDefaultOIDDllList");
    }
    /**
     * {@snippet :
     * BOOL CryptGetDefaultOIDDllList(HCRYPTOIDFUNCSET hFuncSet, DWORD dwEncodingType, WCHAR* pwszDllList, DWORD* pcchDllList);
     * }
     */
    public static int CryptGetDefaultOIDDllList(MemorySegment hFuncSet, int dwEncodingType, MemorySegment pwszDllList, MemorySegment pcchDllList) {
        var mh$ = CryptGetDefaultOIDDllList$MH();
        try {
            return (int)mh$.invokeExact(hFuncSet, dwEncodingType, pwszDllList, pcchDllList);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptGetDefaultOIDFunctionAddress$MH() {
        return RuntimeHelper.requireNonNull(constants$2073.const$1,"CryptGetDefaultOIDFunctionAddress");
    }
    /**
     * {@snippet :
     * BOOL CryptGetDefaultOIDFunctionAddress(HCRYPTOIDFUNCSET hFuncSet, DWORD dwEncodingType, LPCWSTR pwszDll, DWORD dwFlags, void** ppvFuncAddr, HCRYPTOIDFUNCADDR* phFuncAddr);
     * }
     */
    public static int CryptGetDefaultOIDFunctionAddress(MemorySegment hFuncSet, int dwEncodingType, MemorySegment pwszDll, int dwFlags, MemorySegment ppvFuncAddr, MemorySegment phFuncAddr) {
        var mh$ = CryptGetDefaultOIDFunctionAddress$MH();
        try {
            return (int)mh$.invokeExact(hFuncSet, dwEncodingType, pwszDll, dwFlags, ppvFuncAddr, phFuncAddr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptFreeOIDFunctionAddress$MH() {
        return RuntimeHelper.requireNonNull(constants$2073.const$2,"CryptFreeOIDFunctionAddress");
    }
    /**
     * {@snippet :
     * BOOL CryptFreeOIDFunctionAddress(HCRYPTOIDFUNCADDR hFuncAddr, DWORD dwFlags);
     * }
     */
    public static int CryptFreeOIDFunctionAddress(MemorySegment hFuncAddr, int dwFlags) {
        var mh$ = CryptFreeOIDFunctionAddress$MH();
        try {
            return (int)mh$.invokeExact(hFuncAddr, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptRegisterOIDFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$2073.const$3,"CryptRegisterOIDFunction");
    }
    /**
     * {@snippet :
     * BOOL CryptRegisterOIDFunction(DWORD dwEncodingType, LPCSTR pszFuncName, LPCSTR pszOID, LPCWSTR pwszDll, LPCSTR pszOverrideFuncName);
     * }
     */
    public static int CryptRegisterOIDFunction(int dwEncodingType, MemorySegment pszFuncName, MemorySegment pszOID, MemorySegment pwszDll, MemorySegment pszOverrideFuncName) {
        var mh$ = CryptRegisterOIDFunction$MH();
        try {
            return (int)mh$.invokeExact(dwEncodingType, pszFuncName, pszOID, pwszDll, pszOverrideFuncName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptUnregisterOIDFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$2073.const$4,"CryptUnregisterOIDFunction");
    }
    /**
     * {@snippet :
     * BOOL CryptUnregisterOIDFunction(DWORD dwEncodingType, LPCSTR pszFuncName, LPCSTR pszOID);
     * }
     */
    public static int CryptUnregisterOIDFunction(int dwEncodingType, MemorySegment pszFuncName, MemorySegment pszOID) {
        var mh$ = CryptUnregisterOIDFunction$MH();
        try {
            return (int)mh$.invokeExact(dwEncodingType, pszFuncName, pszOID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptRegisterDefaultOIDFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$2073.const$5,"CryptRegisterDefaultOIDFunction");
    }
    /**
     * {@snippet :
     * BOOL CryptRegisterDefaultOIDFunction(DWORD dwEncodingType, LPCSTR pszFuncName, DWORD dwIndex, LPCWSTR pwszDll);
     * }
     */
    public static int CryptRegisterDefaultOIDFunction(int dwEncodingType, MemorySegment pszFuncName, int dwIndex, MemorySegment pwszDll) {
        var mh$ = CryptRegisterDefaultOIDFunction$MH();
        try {
            return (int)mh$.invokeExact(dwEncodingType, pszFuncName, dwIndex, pwszDll);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptUnregisterDefaultOIDFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$2074.const$0,"CryptUnregisterDefaultOIDFunction");
    }
    /**
     * {@snippet :
     * BOOL CryptUnregisterDefaultOIDFunction(DWORD dwEncodingType, LPCSTR pszFuncName, LPCWSTR pwszDll);
     * }
     */
    public static int CryptUnregisterDefaultOIDFunction(int dwEncodingType, MemorySegment pszFuncName, MemorySegment pwszDll) {
        var mh$ = CryptUnregisterDefaultOIDFunction$MH();
        try {
            return (int)mh$.invokeExact(dwEncodingType, pszFuncName, pwszDll);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptSetOIDFunctionValue$MH() {
        return RuntimeHelper.requireNonNull(constants$2074.const$2,"CryptSetOIDFunctionValue");
    }
    /**
     * {@snippet :
     * BOOL CryptSetOIDFunctionValue(DWORD dwEncodingType, LPCSTR pszFuncName, LPCSTR pszOID, LPCWSTR pwszValueName, DWORD dwValueType, const BYTE* pbValueData, DWORD cbValueData);
     * }
     */
    public static int CryptSetOIDFunctionValue(int dwEncodingType, MemorySegment pszFuncName, MemorySegment pszOID, MemorySegment pwszValueName, int dwValueType, MemorySegment pbValueData, int cbValueData) {
        var mh$ = CryptSetOIDFunctionValue$MH();
        try {
            return (int)mh$.invokeExact(dwEncodingType, pszFuncName, pszOID, pwszValueName, dwValueType, pbValueData, cbValueData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptGetOIDFunctionValue$MH() {
        return RuntimeHelper.requireNonNull(constants$2074.const$3,"CryptGetOIDFunctionValue");
    }
    /**
     * {@snippet :
     * BOOL CryptGetOIDFunctionValue(DWORD dwEncodingType, LPCSTR pszFuncName, LPCSTR pszOID, LPCWSTR pwszValueName, DWORD* pdwValueType, BYTE* pbValueData, DWORD* pcbValueData);
     * }
     */
    public static int CryptGetOIDFunctionValue(int dwEncodingType, MemorySegment pszFuncName, MemorySegment pszOID, MemorySegment pwszValueName, MemorySegment pdwValueType, MemorySegment pbValueData, MemorySegment pcbValueData) {
        var mh$ = CryptGetOIDFunctionValue$MH();
        try {
            return (int)mh$.invokeExact(dwEncodingType, pszFuncName, pszOID, pwszValueName, pdwValueType, pbValueData, pcbValueData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptEnumOIDFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$2075.const$1,"CryptEnumOIDFunction");
    }
    /**
     * {@snippet :
     * BOOL CryptEnumOIDFunction(DWORD dwEncodingType, LPCSTR pszFuncName, LPCSTR pszOID, DWORD dwFlags, void* pvArg, PFN_CRYPT_ENUM_OID_FUNC pfnEnumOIDFunc);
     * }
     */
    public static int CryptEnumOIDFunction(int dwEncodingType, MemorySegment pszFuncName, MemorySegment pszOID, int dwFlags, MemorySegment pvArg, MemorySegment pfnEnumOIDFunc) {
        var mh$ = CryptEnumOIDFunction$MH();
        try {
            return (int)mh$.invokeExact(dwEncodingType, pszFuncName, pszOID, dwFlags, pvArg, pfnEnumOIDFunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _CRYPT_OID_INFO* PCRYPT_OID_INFO;
     * }
     */
    public static final AddressLayout PCRYPT_OID_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPT_OID_INFO* PCCRYPT_OID_INFO;
     * }
     */
    public static final AddressLayout PCCRYPT_OID_INFO = RuntimeHelper.POINTER;
    public static MethodHandle CryptFindOIDInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$2076.const$4,"CryptFindOIDInfo");
    }
    /**
     * {@snippet :
     * PCCRYPT_OID_INFO CryptFindOIDInfo(DWORD dwKeyType, void* pvKey, DWORD dwGroupId);
     * }
     */
    public static MemorySegment CryptFindOIDInfo(int dwKeyType, MemorySegment pvKey, int dwGroupId) {
        var mh$ = CryptFindOIDInfo$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(dwKeyType, pvKey, dwGroupId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptRegisterOIDInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$2076.const$5,"CryptRegisterOIDInfo");
    }
    /**
     * {@snippet :
     * BOOL CryptRegisterOIDInfo(PCCRYPT_OID_INFO pInfo, DWORD dwFlags);
     * }
     */
    public static int CryptRegisterOIDInfo(MemorySegment pInfo, int dwFlags) {
        var mh$ = CryptRegisterOIDInfo$MH();
        try {
            return (int)mh$.invokeExact(pInfo, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptUnregisterOIDInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$2077.const$0,"CryptUnregisterOIDInfo");
    }
    /**
     * {@snippet :
     * BOOL CryptUnregisterOIDInfo(PCCRYPT_OID_INFO pInfo);
     * }
     */
    public static int CryptUnregisterOIDInfo(MemorySegment pInfo) {
        var mh$ = CryptUnregisterOIDInfo$MH();
        try {
            return (int)mh$.invokeExact(pInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptEnumOIDInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$2077.const$3,"CryptEnumOIDInfo");
    }
    /**
     * {@snippet :
     * BOOL CryptEnumOIDInfo(DWORD dwGroupId, DWORD dwFlags, void* pvArg, PFN_CRYPT_ENUM_OID_INFO pfnEnumOIDInfo);
     * }
     */
    public static int CryptEnumOIDInfo(int dwGroupId, int dwFlags, MemorySegment pvArg, MemorySegment pfnEnumOIDInfo) {
        var mh$ = CryptEnumOIDInfo$MH();
        try {
            return (int)mh$.invokeExact(dwGroupId, dwFlags, pvArg, pfnEnumOIDInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptFindLocalizedName$MH() {
        return RuntimeHelper.requireNonNull(constants$2077.const$4,"CryptFindLocalizedName");
    }
    /**
     * {@snippet :
     * LPCWSTR CryptFindLocalizedName(LPCWSTR pwszCryptName);
     * }
     */
    public static MemorySegment CryptFindLocalizedName(MemorySegment pwszCryptName) {
        var mh$ = CryptFindLocalizedName$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(pwszCryptName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _CERT_STRONG_SIGN_SERIALIZED_INFO* PCERT_STRONG_SIGN_SERIALIZED_INFO;
     * }
     */
    public static final AddressLayout PCERT_STRONG_SIGN_SERIALIZED_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_STRONG_SIGN_PARA* PCERT_STRONG_SIGN_PARA;
     * }
     */
    public static final AddressLayout PCERT_STRONG_SIGN_PARA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_STRONG_SIGN_PARA* PCCERT_STRONG_SIGN_PARA;
     * }
     */
    public static final AddressLayout PCCERT_STRONG_SIGN_PARA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef void* HCRYPTMSG;
     * }
     */
    public static final AddressLayout HCRYPTMSG = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_ISSUER_SERIAL_NUMBER* PCERT_ISSUER_SERIAL_NUMBER;
     * }
     */
    public static final AddressLayout PCERT_ISSUER_SERIAL_NUMBER = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_ID* PCERT_ID;
     * }
     */
    public static final AddressLayout PCERT_ID = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CMSG_SIGNER_ENCODE_INFO* PCMSG_SIGNER_ENCODE_INFO;
     * }
     */
    public static final AddressLayout PCMSG_SIGNER_ENCODE_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CMSG_SIGNED_ENCODE_INFO* PCMSG_SIGNED_ENCODE_INFO;
     * }
     */
    public static final AddressLayout PCMSG_SIGNED_ENCODE_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CMSG_RECIPIENT_ENCODE_INFO* PCMSG_RECIPIENT_ENCODE_INFO;
     * }
     */
    public static final AddressLayout PCMSG_RECIPIENT_ENCODE_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CMSG_ENVELOPED_ENCODE_INFO* PCMSG_ENVELOPED_ENCODE_INFO;
     * }
     */
    public static final AddressLayout PCMSG_ENVELOPED_ENCODE_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO* PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO;
     * }
     */
    public static final AddressLayout PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO* PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO;
     * }
     */
    public static final AddressLayout PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO* PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO;
     * }
     */
    public static final AddressLayout PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO* PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO;
     * }
     */
    public static final AddressLayout PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CMSG_RC2_AUX_INFO* PCMSG_RC2_AUX_INFO;
     * }
     */
    public static final AddressLayout PCMSG_RC2_AUX_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CMSG_SP3_COMPATIBLE_AUX_INFO* PCMSG_SP3_COMPATIBLE_AUX_INFO;
     * }
     */
    public static final AddressLayout PCMSG_SP3_COMPATIBLE_AUX_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CMSG_RC4_AUX_INFO* PCMSG_RC4_AUX_INFO;
     * }
     */
    public static final AddressLayout PCMSG_RC4_AUX_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO* PCMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO;
     * }
     */
    public static final AddressLayout PCMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CMSG_HASHED_ENCODE_INFO* PCMSG_HASHED_ENCODE_INFO;
     * }
     */
    public static final AddressLayout PCMSG_HASHED_ENCODE_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CMSG_ENCRYPTED_ENCODE_INFO* PCMSG_ENCRYPTED_ENCODE_INFO;
     * }
     */
    public static final AddressLayout PCMSG_ENCRYPTED_ENCODE_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CMSG_STREAM_INFO* PCMSG_STREAM_INFO;
     * }
     */
    public static final AddressLayout PCMSG_STREAM_INFO = RuntimeHelper.POINTER;
    public static MethodHandle CryptMsgOpenToEncode$MH() {
        return RuntimeHelper.requireNonNull(constants$2093.const$3,"CryptMsgOpenToEncode");
    }
    /**
     * {@snippet :
     * HCRYPTMSG CryptMsgOpenToEncode(DWORD dwMsgEncodingType, DWORD dwFlags, DWORD dwMsgType, void* pvMsgEncodeInfo, LPSTR pszInnerContentObjID, PCMSG_STREAM_INFO pStreamInfo);
     * }
     */
    public static MemorySegment CryptMsgOpenToEncode(int dwMsgEncodingType, int dwFlags, int dwMsgType, MemorySegment pvMsgEncodeInfo, MemorySegment pszInnerContentObjID, MemorySegment pStreamInfo) {
        var mh$ = CryptMsgOpenToEncode$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(dwMsgEncodingType, dwFlags, dwMsgType, pvMsgEncodeInfo, pszInnerContentObjID, pStreamInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptMsgCalculateEncodedLength$MH() {
        return RuntimeHelper.requireNonNull(constants$2093.const$5,"CryptMsgCalculateEncodedLength");
    }
    /**
     * {@snippet :
     * DWORD CryptMsgCalculateEncodedLength(DWORD dwMsgEncodingType, DWORD dwFlags, DWORD dwMsgType, void* pvMsgEncodeInfo, LPSTR pszInnerContentObjID, DWORD cbData);
     * }
     */
    public static int CryptMsgCalculateEncodedLength(int dwMsgEncodingType, int dwFlags, int dwMsgType, MemorySegment pvMsgEncodeInfo, MemorySegment pszInnerContentObjID, int cbData) {
        var mh$ = CryptMsgCalculateEncodedLength$MH();
        try {
            return (int)mh$.invokeExact(dwMsgEncodingType, dwFlags, dwMsgType, pvMsgEncodeInfo, pszInnerContentObjID, cbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptMsgOpenToDecode$MH() {
        return RuntimeHelper.requireNonNull(constants$2094.const$1,"CryptMsgOpenToDecode");
    }
    /**
     * {@snippet :
     * HCRYPTMSG CryptMsgOpenToDecode(DWORD dwMsgEncodingType, DWORD dwFlags, DWORD dwMsgType, HCRYPTPROV_LEGACY hCryptProv, PCERT_INFO pRecipientInfo, PCMSG_STREAM_INFO pStreamInfo);
     * }
     */
    public static MemorySegment CryptMsgOpenToDecode(int dwMsgEncodingType, int dwFlags, int dwMsgType, long hCryptProv, MemorySegment pRecipientInfo, MemorySegment pStreamInfo) {
        var mh$ = CryptMsgOpenToDecode$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(dwMsgEncodingType, dwFlags, dwMsgType, hCryptProv, pRecipientInfo, pStreamInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptMsgDuplicate$MH() {
        return RuntimeHelper.requireNonNull(constants$2094.const$2,"CryptMsgDuplicate");
    }
    /**
     * {@snippet :
     * HCRYPTMSG CryptMsgDuplicate(HCRYPTMSG hCryptMsg);
     * }
     */
    public static MemorySegment CryptMsgDuplicate(MemorySegment hCryptMsg) {
        var mh$ = CryptMsgDuplicate$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hCryptMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptMsgClose$MH() {
        return RuntimeHelper.requireNonNull(constants$2094.const$3,"CryptMsgClose");
    }
    /**
     * {@snippet :
     * BOOL CryptMsgClose(HCRYPTMSG hCryptMsg);
     * }
     */
    public static int CryptMsgClose(MemorySegment hCryptMsg) {
        var mh$ = CryptMsgClose$MH();
        try {
            return (int)mh$.invokeExact(hCryptMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptMsgUpdate$MH() {
        return RuntimeHelper.requireNonNull(constants$2094.const$4,"CryptMsgUpdate");
    }
    /**
     * {@snippet :
     * BOOL CryptMsgUpdate(HCRYPTMSG hCryptMsg, const BYTE* pbData, DWORD cbData, BOOL fFinal);
     * }
     */
    public static int CryptMsgUpdate(MemorySegment hCryptMsg, MemorySegment pbData, int cbData, int fFinal) {
        var mh$ = CryptMsgUpdate$MH();
        try {
            return (int)mh$.invokeExact(hCryptMsg, pbData, cbData, fFinal);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptMsgGetParam$MH() {
        return RuntimeHelper.requireNonNull(constants$2094.const$5,"CryptMsgGetParam");
    }
    /**
     * {@snippet :
     * BOOL CryptMsgGetParam(HCRYPTMSG hCryptMsg, DWORD dwParamType, DWORD dwIndex, void* pvData, DWORD* pcbData);
     * }
     */
    public static int CryptMsgGetParam(MemorySegment hCryptMsg, int dwParamType, int dwIndex, MemorySegment pvData, MemorySegment pcbData) {
        var mh$ = CryptMsgGetParam$MH();
        try {
            return (int)mh$.invokeExact(hCryptMsg, dwParamType, dwIndex, pvData, pcbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _CMSG_SIGNER_INFO* PCMSG_SIGNER_INFO;
     * }
     */
    public static final AddressLayout PCMSG_SIGNER_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CMSG_CMS_SIGNER_INFO* PCMSG_CMS_SIGNER_INFO;
     * }
     */
    public static final AddressLayout PCMSG_CMS_SIGNER_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPT_ATTRIBUTES* PCMSG_ATTR;
     * }
     */
    public static final AddressLayout PCMSG_ATTR = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CMSG_KEY_TRANS_RECIPIENT_INFO* PCMSG_KEY_TRANS_RECIPIENT_INFO;
     * }
     */
    public static final AddressLayout PCMSG_KEY_TRANS_RECIPIENT_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CMSG_RECIPIENT_ENCRYPTED_KEY_INFO* PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO;
     * }
     */
    public static final AddressLayout PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CMSG_KEY_AGREE_RECIPIENT_INFO* PCMSG_KEY_AGREE_RECIPIENT_INFO;
     * }
     */
    public static final AddressLayout PCMSG_KEY_AGREE_RECIPIENT_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CMSG_MAIL_LIST_RECIPIENT_INFO* PCMSG_MAIL_LIST_RECIPIENT_INFO;
     * }
     */
    public static final AddressLayout PCMSG_MAIL_LIST_RECIPIENT_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CMSG_CMS_RECIPIENT_INFO* PCMSG_CMS_RECIPIENT_INFO;
     * }
     */
    public static final AddressLayout PCMSG_CMS_RECIPIENT_INFO = RuntimeHelper.POINTER;
    public static MethodHandle CryptMsgControl$MH() {
        return RuntimeHelper.requireNonNull(constants$2098.const$3,"CryptMsgControl");
    }
    /**
     * {@snippet :
     * BOOL CryptMsgControl(HCRYPTMSG hCryptMsg, DWORD dwFlags, DWORD dwCtrlType, void* pvCtrlPara);
     * }
     */
    public static int CryptMsgControl(MemorySegment hCryptMsg, int dwFlags, int dwCtrlType, MemorySegment pvCtrlPara) {
        var mh$ = CryptMsgControl$MH();
        try {
            return (int)mh$.invokeExact(hCryptMsg, dwFlags, dwCtrlType, pvCtrlPara);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA* PCMSG_CTRL_VERIFY_SIGNATURE_EX_PARA;
     * }
     */
    public static final AddressLayout PCMSG_CTRL_VERIFY_SIGNATURE_EX_PARA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CMSG_CTRL_DECRYPT_PARA* PCMSG_CTRL_DECRYPT_PARA;
     * }
     */
    public static final AddressLayout PCMSG_CTRL_DECRYPT_PARA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CMSG_CTRL_KEY_TRANS_DECRYPT_PARA* PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA;
     * }
     */
    public static final AddressLayout PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CMSG_CTRL_KEY_AGREE_DECRYPT_PARA* PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA;
     * }
     */
    public static final AddressLayout PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA* PCMSG_CTRL_MAIL_LIST_DECRYPT_PARA;
     * }
     */
    public static final AddressLayout PCMSG_CTRL_MAIL_LIST_DECRYPT_PARA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA* PCMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA;
     * }
     */
    public static final AddressLayout PCMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA* PCMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA;
     * }
     */
    public static final AddressLayout PCMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA = RuntimeHelper.POINTER;
    public static MethodHandle CryptMsgVerifyCountersignatureEncoded$MH() {
        return RuntimeHelper.requireNonNull(constants$2105.const$5,"CryptMsgVerifyCountersignatureEncoded");
    }
    /**
     * {@snippet :
     * BOOL CryptMsgVerifyCountersignatureEncoded(HCRYPTPROV_LEGACY hCryptProv, DWORD dwEncodingType, PBYTE pbSignerInfo, DWORD cbSignerInfo, PBYTE pbSignerInfoCountersignature, DWORD cbSignerInfoCountersignature, PCERT_INFO pciCountersigner);
     * }
     */
    public static int CryptMsgVerifyCountersignatureEncoded(long hCryptProv, int dwEncodingType, MemorySegment pbSignerInfo, int cbSignerInfo, MemorySegment pbSignerInfoCountersignature, int cbSignerInfoCountersignature, MemorySegment pciCountersigner) {
        var mh$ = CryptMsgVerifyCountersignatureEncoded$MH();
        try {
            return (int)mh$.invokeExact(hCryptProv, dwEncodingType, pbSignerInfo, cbSignerInfo, pbSignerInfoCountersignature, cbSignerInfoCountersignature, pciCountersigner);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptMsgVerifyCountersignatureEncodedEx$MH() {
        return RuntimeHelper.requireNonNull(constants$2106.const$1,"CryptMsgVerifyCountersignatureEncodedEx");
    }
    /**
     * {@snippet :
     * BOOL CryptMsgVerifyCountersignatureEncodedEx(HCRYPTPROV_LEGACY hCryptProv, DWORD dwEncodingType, PBYTE pbSignerInfo, DWORD cbSignerInfo, PBYTE pbSignerInfoCountersignature, DWORD cbSignerInfoCountersignature, DWORD dwSignerType, void* pvSigner, DWORD dwFlags, void* pvExtra);
     * }
     */
    public static int CryptMsgVerifyCountersignatureEncodedEx(long hCryptProv, int dwEncodingType, MemorySegment pbSignerInfo, int cbSignerInfo, MemorySegment pbSignerInfoCountersignature, int cbSignerInfoCountersignature, int dwSignerType, MemorySegment pvSigner, int dwFlags, MemorySegment pvExtra) {
        var mh$ = CryptMsgVerifyCountersignatureEncodedEx$MH();
        try {
            return (int)mh$.invokeExact(hCryptProv, dwEncodingType, pbSignerInfo, cbSignerInfo, pbSignerInfoCountersignature, cbSignerInfoCountersignature, dwSignerType, pvSigner, dwFlags, pvExtra);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptMsgCountersign$MH() {
        return RuntimeHelper.requireNonNull(constants$2106.const$2,"CryptMsgCountersign");
    }
    /**
     * {@snippet :
     * BOOL CryptMsgCountersign(HCRYPTMSG hCryptMsg, DWORD dwIndex, DWORD cCountersigners, PCMSG_SIGNER_ENCODE_INFO rgCountersigners);
     * }
     */
    public static int CryptMsgCountersign(MemorySegment hCryptMsg, int dwIndex, int cCountersigners, MemorySegment rgCountersigners) {
        var mh$ = CryptMsgCountersign$MH();
        try {
            return (int)mh$.invokeExact(hCryptMsg, dwIndex, cCountersigners, rgCountersigners);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptMsgCountersignEncoded$MH() {
        return RuntimeHelper.requireNonNull(constants$2106.const$4,"CryptMsgCountersignEncoded");
    }
    /**
     * {@snippet :
     * BOOL CryptMsgCountersignEncoded(DWORD dwEncodingType, PBYTE pbSignerInfo, DWORD cbSignerInfo, DWORD cCountersigners, PCMSG_SIGNER_ENCODE_INFO rgCountersigners, PBYTE pbCountersignature, PDWORD pcbCountersignature);
     * }
     */
    public static int CryptMsgCountersignEncoded(int dwEncodingType, MemorySegment pbSignerInfo, int cbSignerInfo, int cCountersigners, MemorySegment rgCountersigners, MemorySegment pbCountersignature, MemorySegment pcbCountersignature) {
        var mh$ = CryptMsgCountersignEncoded$MH();
        try {
            return (int)mh$.invokeExact(dwEncodingType, pbSignerInfo, cbSignerInfo, cCountersigners, rgCountersigners, pbCountersignature, pcbCountersignature);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _CMSG_CONTENT_ENCRYPT_INFO* PCMSG_CONTENT_ENCRYPT_INFO;
     * }
     */
    public static final AddressLayout PCMSG_CONTENT_ENCRYPT_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CMSG_KEY_TRANS_ENCRYPT_INFO* PCMSG_KEY_TRANS_ENCRYPT_INFO;
     * }
     */
    public static final AddressLayout PCMSG_KEY_TRANS_ENCRYPT_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CMSG_KEY_AGREE_KEY_ENCRYPT_INFO* PCMSG_KEY_AGREE_KEY_ENCRYPT_INFO;
     * }
     */
    public static final AddressLayout PCMSG_KEY_AGREE_KEY_ENCRYPT_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CMSG_KEY_AGREE_ENCRYPT_INFO* PCMSG_KEY_AGREE_ENCRYPT_INFO;
     * }
     */
    public static final AddressLayout PCMSG_KEY_AGREE_ENCRYPT_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CMSG_MAIL_LIST_ENCRYPT_INFO* PCMSG_MAIL_LIST_ENCRYPT_INFO;
     * }
     */
    public static final AddressLayout PCMSG_MAIL_LIST_ENCRYPT_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CMSG_CNG_CONTENT_DECRYPT_INFO* PCMSG_CNG_CONTENT_DECRYPT_INFO;
     * }
     */
    public static final AddressLayout PCMSG_CNG_CONTENT_DECRYPT_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef void* HCERTSTORE;
     * }
     */
    public static final AddressLayout HCERTSTORE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_CONTEXT* PCERT_CONTEXT;
     * }
     */
    public static final AddressLayout PCERT_CONTEXT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_CONTEXT* PCCERT_CONTEXT;
     * }
     */
    public static final AddressLayout PCCERT_CONTEXT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRL_CONTEXT* PCRL_CONTEXT;
     * }
     */
    public static final AddressLayout PCRL_CONTEXT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRL_CONTEXT* PCCRL_CONTEXT;
     * }
     */
    public static final AddressLayout PCCRL_CONTEXT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CTL_CONTEXT* PCTL_CONTEXT;
     * }
     */
    public static final AddressLayout PCTL_CONTEXT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CTL_CONTEXT* PCCTL_CONTEXT;
     * }
     */
    public static final AddressLayout PCCTL_CONTEXT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * enum CertKeyType.KeyTypeOther = 0;
     * }
     */
    public static int KeyTypeOther() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum CertKeyType.KeyTypeVirtualSmartCard = 1;
     * }
     */
    public static int KeyTypeVirtualSmartCard() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum CertKeyType.KeyTypePhysicalSmartCard = 2;
     * }
     */
    public static int KeyTypePhysicalSmartCard() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum CertKeyType.KeyTypePassport = 3;
     * }
     */
    public static int KeyTypePassport() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum CertKeyType.KeyTypePassportRemote = 4;
     * }
     */
    public static int KeyTypePassportRemote() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum CertKeyType.KeyTypePassportSmartCard = 5;
     * }
     */
    public static int KeyTypePassportSmartCard() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum CertKeyType.KeyTypeHardware = 6;
     * }
     */
    public static int KeyTypeHardware() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum CertKeyType.KeyTypeSoftware = 7;
     * }
     */
    public static int KeyTypeSoftware() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum CertKeyType.KeyTypeSelfSigned = 8;
     * }
     */
    public static int KeyTypeSelfSigned() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * typedef struct _CRYPT_KEY_PROV_PARAM* PCRYPT_KEY_PROV_PARAM;
     * }
     */
    public static final AddressLayout PCRYPT_KEY_PROV_PARAM = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPT_KEY_PROV_INFO* PCRYPT_KEY_PROV_INFO;
     * }
     */
    public static final AddressLayout PCRYPT_KEY_PROV_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_KEY_CONTEXT* PCERT_KEY_CONTEXT;
     * }
     */
    public static final AddressLayout PCERT_KEY_CONTEXT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _ROOT_INFO_LUID* PROOT_INFO_LUID;
     * }
     */
    public static final AddressLayout PROOT_INFO_LUID = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPT_SMART_CARD_ROOT_INFO* PCRYPT_SMART_CARD_ROOT_INFO;
     * }
     */
    public static final AddressLayout PCRYPT_SMART_CARD_ROOT_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_SYSTEM_STORE_RELOCATE_PARA* PCERT_SYSTEM_STORE_RELOCATE_PARA;
     * }
     */
    public static final AddressLayout PCERT_SYSTEM_STORE_RELOCATE_PARA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_REGISTRY_STORE_CLIENT_GPT_PARA* PCERT_REGISTRY_STORE_CLIENT_GPT_PARA;
     * }
     */
    public static final AddressLayout PCERT_REGISTRY_STORE_CLIENT_GPT_PARA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_REGISTRY_STORE_ROAMING_PARA* PCERT_REGISTRY_STORE_ROAMING_PARA;
     * }
     */
    public static final AddressLayout PCERT_REGISTRY_STORE_ROAMING_PARA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_LDAP_STORE_OPENED_PARA* PCERT_LDAP_STORE_OPENED_PARA;
     * }
     */
    public static final AddressLayout PCERT_LDAP_STORE_OPENED_PARA = RuntimeHelper.POINTER;
    public static MethodHandle CertOpenStore$MH() {
        return RuntimeHelper.requireNonNull(constants$2127.const$3,"CertOpenStore");
    }
    /**
     * {@snippet :
     * HCERTSTORE CertOpenStore(LPCSTR lpszStoreProvider, DWORD dwEncodingType, HCRYPTPROV_LEGACY hCryptProv, DWORD dwFlags, void* pvPara);
     * }
     */
    public static MemorySegment CertOpenStore(MemorySegment lpszStoreProvider, int dwEncodingType, long hCryptProv, int dwFlags, MemorySegment pvPara) {
        var mh$ = CertOpenStore$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpszStoreProvider, dwEncodingType, hCryptProv, dwFlags, pvPara);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef void* HCERTSTOREPROV;
     * }
     */
    public static final AddressLayout HCERTSTOREPROV = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_STORE_PROV_INFO* PCERT_STORE_PROV_INFO;
     * }
     */
    public static final AddressLayout PCERT_STORE_PROV_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_STORE_PROV_FIND_INFO* PCERT_STORE_PROV_FIND_INFO;
     * }
     */
    public static final AddressLayout PCERT_STORE_PROV_FIND_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_STORE_PROV_FIND_INFO* PCCERT_STORE_PROV_FIND_INFO;
     * }
     */
    public static final AddressLayout PCCERT_STORE_PROV_FIND_INFO = RuntimeHelper.POINTER;
    public static MethodHandle CertDuplicateStore$MH() {
        return RuntimeHelper.requireNonNull(constants$2135.const$0,"CertDuplicateStore");
    }
    /**
     * {@snippet :
     * HCERTSTORE CertDuplicateStore(HCERTSTORE hCertStore);
     * }
     */
    public static MemorySegment CertDuplicateStore(MemorySegment hCertStore) {
        var mh$ = CertDuplicateStore$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hCertStore);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertSaveStore$MH() {
        return RuntimeHelper.requireNonNull(constants$2135.const$2,"CertSaveStore");
    }
    /**
     * {@snippet :
     * BOOL CertSaveStore(HCERTSTORE hCertStore, DWORD dwEncodingType, DWORD dwSaveAs, DWORD dwSaveTo, void* pvSaveToPara, DWORD dwFlags);
     * }
     */
    public static int CertSaveStore(MemorySegment hCertStore, int dwEncodingType, int dwSaveAs, int dwSaveTo, MemorySegment pvSaveToPara, int dwFlags) {
        var mh$ = CertSaveStore$MH();
        try {
            return (int)mh$.invokeExact(hCertStore, dwEncodingType, dwSaveAs, dwSaveTo, pvSaveToPara, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertCloseStore$MH() {
        return RuntimeHelper.requireNonNull(constants$2135.const$3,"CertCloseStore");
    }
    /**
     * {@snippet :
     * BOOL CertCloseStore(HCERTSTORE hCertStore, DWORD dwFlags);
     * }
     */
    public static int CertCloseStore(MemorySegment hCertStore, int dwFlags) {
        var mh$ = CertCloseStore$MH();
        try {
            return (int)mh$.invokeExact(hCertStore, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertGetSubjectCertificateFromStore$MH() {
        return RuntimeHelper.requireNonNull(constants$2135.const$4,"CertGetSubjectCertificateFromStore");
    }
    /**
     * {@snippet :
     * PCCERT_CONTEXT CertGetSubjectCertificateFromStore(HCERTSTORE hCertStore, DWORD dwCertEncodingType, PCERT_INFO pCertId);
     * }
     */
    public static MemorySegment CertGetSubjectCertificateFromStore(MemorySegment hCertStore, int dwCertEncodingType, MemorySegment pCertId) {
        var mh$ = CertGetSubjectCertificateFromStore$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hCertStore, dwCertEncodingType, pCertId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertEnumCertificatesInStore$MH() {
        return RuntimeHelper.requireNonNull(constants$2135.const$5,"CertEnumCertificatesInStore");
    }
    /**
     * {@snippet :
     * PCCERT_CONTEXT CertEnumCertificatesInStore(HCERTSTORE hCertStore, PCCERT_CONTEXT pPrevCertContext);
     * }
     */
    public static MemorySegment CertEnumCertificatesInStore(MemorySegment hCertStore, MemorySegment pPrevCertContext) {
        var mh$ = CertEnumCertificatesInStore$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hCertStore, pPrevCertContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertFindCertificateInStore$MH() {
        return RuntimeHelper.requireNonNull(constants$2136.const$1,"CertFindCertificateInStore");
    }
    /**
     * {@snippet :
     * PCCERT_CONTEXT CertFindCertificateInStore(HCERTSTORE hCertStore, DWORD dwCertEncodingType, DWORD dwFindFlags, DWORD dwFindType, void* pvFindPara, PCCERT_CONTEXT pPrevCertContext);
     * }
     */
    public static MemorySegment CertFindCertificateInStore(MemorySegment hCertStore, int dwCertEncodingType, int dwFindFlags, int dwFindType, MemorySegment pvFindPara, MemorySegment pPrevCertContext) {
        var mh$ = CertFindCertificateInStore$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hCertStore, dwCertEncodingType, dwFindFlags, dwFindType, pvFindPara, pPrevCertContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertGetIssuerCertificateFromStore$MH() {
        return RuntimeHelper.requireNonNull(constants$2136.const$2,"CertGetIssuerCertificateFromStore");
    }
    /**
     * {@snippet :
     * PCCERT_CONTEXT CertGetIssuerCertificateFromStore(HCERTSTORE hCertStore, PCCERT_CONTEXT pSubjectContext, PCCERT_CONTEXT pPrevIssuerContext, DWORD* pdwFlags);
     * }
     */
    public static MemorySegment CertGetIssuerCertificateFromStore(MemorySegment hCertStore, MemorySegment pSubjectContext, MemorySegment pPrevIssuerContext, MemorySegment pdwFlags) {
        var mh$ = CertGetIssuerCertificateFromStore$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hCertStore, pSubjectContext, pPrevIssuerContext, pdwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertVerifySubjectCertificateContext$MH() {
        return RuntimeHelper.requireNonNull(constants$2136.const$3,"CertVerifySubjectCertificateContext");
    }
    /**
     * {@snippet :
     * BOOL CertVerifySubjectCertificateContext(PCCERT_CONTEXT pSubject, PCCERT_CONTEXT pIssuer, DWORD* pdwFlags);
     * }
     */
    public static int CertVerifySubjectCertificateContext(MemorySegment pSubject, MemorySegment pIssuer, MemorySegment pdwFlags) {
        var mh$ = CertVerifySubjectCertificateContext$MH();
        try {
            return (int)mh$.invokeExact(pSubject, pIssuer, pdwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertDuplicateCertificateContext$MH() {
        return RuntimeHelper.requireNonNull(constants$2136.const$4,"CertDuplicateCertificateContext");
    }
    /**
     * {@snippet :
     * PCCERT_CONTEXT CertDuplicateCertificateContext(PCCERT_CONTEXT pCertContext);
     * }
     */
    public static MemorySegment CertDuplicateCertificateContext(MemorySegment pCertContext) {
        var mh$ = CertDuplicateCertificateContext$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(pCertContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertCreateCertificateContext$MH() {
        return RuntimeHelper.requireNonNull(constants$2136.const$5,"CertCreateCertificateContext");
    }
    /**
     * {@snippet :
     * PCCERT_CONTEXT CertCreateCertificateContext(DWORD dwCertEncodingType, const BYTE* pbCertEncoded, DWORD cbCertEncoded);
     * }
     */
    public static MemorySegment CertCreateCertificateContext(int dwCertEncodingType, MemorySegment pbCertEncoded, int cbCertEncoded) {
        var mh$ = CertCreateCertificateContext$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(dwCertEncodingType, pbCertEncoded, cbCertEncoded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertFreeCertificateContext$MH() {
        return RuntimeHelper.requireNonNull(constants$2137.const$0,"CertFreeCertificateContext");
    }
    /**
     * {@snippet :
     * BOOL CertFreeCertificateContext(PCCERT_CONTEXT pCertContext);
     * }
     */
    public static int CertFreeCertificateContext(MemorySegment pCertContext) {
        var mh$ = CertFreeCertificateContext$MH();
        try {
            return (int)mh$.invokeExact(pCertContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertSetCertificateContextProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$2137.const$1,"CertSetCertificateContextProperty");
    }
    /**
     * {@snippet :
     * BOOL CertSetCertificateContextProperty(PCCERT_CONTEXT pCertContext, DWORD dwPropId, DWORD dwFlags, void* pvData);
     * }
     */
    public static int CertSetCertificateContextProperty(MemorySegment pCertContext, int dwPropId, int dwFlags, MemorySegment pvData) {
        var mh$ = CertSetCertificateContextProperty$MH();
        try {
            return (int)mh$.invokeExact(pCertContext, dwPropId, dwFlags, pvData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertGetCertificateContextProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$2137.const$2,"CertGetCertificateContextProperty");
    }
    /**
     * {@snippet :
     * BOOL CertGetCertificateContextProperty(PCCERT_CONTEXT pCertContext, DWORD dwPropId, void* pvData, DWORD* pcbData);
     * }
     */
    public static int CertGetCertificateContextProperty(MemorySegment pCertContext, int dwPropId, MemorySegment pvData, MemorySegment pcbData) {
        var mh$ = CertGetCertificateContextProperty$MH();
        try {
            return (int)mh$.invokeExact(pCertContext, dwPropId, pvData, pcbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertEnumCertificateContextProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$2137.const$3,"CertEnumCertificateContextProperties");
    }
    /**
     * {@snippet :
     * DWORD CertEnumCertificateContextProperties(PCCERT_CONTEXT pCertContext, DWORD dwPropId);
     * }
     */
    public static int CertEnumCertificateContextProperties(MemorySegment pCertContext, int dwPropId) {
        var mh$ = CertEnumCertificateContextProperties$MH();
        try {
            return (int)mh$.invokeExact(pCertContext, dwPropId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertCreateCTLEntryFromCertificateContextProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$2137.const$5,"CertCreateCTLEntryFromCertificateContextProperties");
    }
    /**
     * {@snippet :
     * BOOL CertCreateCTLEntryFromCertificateContextProperties(PCCERT_CONTEXT pCertContext, DWORD cOptAttr, PCRYPT_ATTRIBUTE rgOptAttr, DWORD dwFlags, void* pvReserved, PCTL_ENTRY pCtlEntry, DWORD* pcbCtlEntry);
     * }
     */
    public static int CertCreateCTLEntryFromCertificateContextProperties(MemorySegment pCertContext, int cOptAttr, MemorySegment rgOptAttr, int dwFlags, MemorySegment pvReserved, MemorySegment pCtlEntry, MemorySegment pcbCtlEntry) {
        var mh$ = CertCreateCTLEntryFromCertificateContextProperties$MH();
        try {
            return (int)mh$.invokeExact(pCertContext, cOptAttr, rgOptAttr, dwFlags, pvReserved, pCtlEntry, pcbCtlEntry);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertSetCertificateContextPropertiesFromCTLEntry$MH() {
        return RuntimeHelper.requireNonNull(constants$2138.const$0,"CertSetCertificateContextPropertiesFromCTLEntry");
    }
    /**
     * {@snippet :
     * BOOL CertSetCertificateContextPropertiesFromCTLEntry(PCCERT_CONTEXT pCertContext, PCTL_ENTRY pCtlEntry, DWORD dwFlags);
     * }
     */
    public static int CertSetCertificateContextPropertiesFromCTLEntry(MemorySegment pCertContext, MemorySegment pCtlEntry, int dwFlags) {
        var mh$ = CertSetCertificateContextPropertiesFromCTLEntry$MH();
        try {
            return (int)mh$.invokeExact(pCertContext, pCtlEntry, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertGetCRLFromStore$MH() {
        return RuntimeHelper.requireNonNull(constants$2138.const$1,"CertGetCRLFromStore");
    }
    /**
     * {@snippet :
     * PCCRL_CONTEXT CertGetCRLFromStore(HCERTSTORE hCertStore, PCCERT_CONTEXT pIssuerContext, PCCRL_CONTEXT pPrevCrlContext, DWORD* pdwFlags);
     * }
     */
    public static MemorySegment CertGetCRLFromStore(MemorySegment hCertStore, MemorySegment pIssuerContext, MemorySegment pPrevCrlContext, MemorySegment pdwFlags) {
        var mh$ = CertGetCRLFromStore$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hCertStore, pIssuerContext, pPrevCrlContext, pdwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertEnumCRLsInStore$MH() {
        return RuntimeHelper.requireNonNull(constants$2138.const$2,"CertEnumCRLsInStore");
    }
    /**
     * {@snippet :
     * PCCRL_CONTEXT CertEnumCRLsInStore(HCERTSTORE hCertStore, PCCRL_CONTEXT pPrevCrlContext);
     * }
     */
    public static MemorySegment CertEnumCRLsInStore(MemorySegment hCertStore, MemorySegment pPrevCrlContext) {
        var mh$ = CertEnumCRLsInStore$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hCertStore, pPrevCrlContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertFindCRLInStore$MH() {
        return RuntimeHelper.requireNonNull(constants$2138.const$3,"CertFindCRLInStore");
    }
    /**
     * {@snippet :
     * PCCRL_CONTEXT CertFindCRLInStore(HCERTSTORE hCertStore, DWORD dwCertEncodingType, DWORD dwFindFlags, DWORD dwFindType, void* pvFindPara, PCCRL_CONTEXT pPrevCrlContext);
     * }
     */
    public static MemorySegment CertFindCRLInStore(MemorySegment hCertStore, int dwCertEncodingType, int dwFindFlags, int dwFindType, MemorySegment pvFindPara, MemorySegment pPrevCrlContext) {
        var mh$ = CertFindCRLInStore$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hCertStore, dwCertEncodingType, dwFindFlags, dwFindType, pvFindPara, pPrevCrlContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _CRL_FIND_ISSUED_FOR_PARA* PCRL_FIND_ISSUED_FOR_PARA;
     * }
     */
    public static final AddressLayout PCRL_FIND_ISSUED_FOR_PARA = RuntimeHelper.POINTER;
    public static MethodHandle CertDuplicateCRLContext$MH() {
        return RuntimeHelper.requireNonNull(constants$2139.const$1,"CertDuplicateCRLContext");
    }
    /**
     * {@snippet :
     * PCCRL_CONTEXT CertDuplicateCRLContext(PCCRL_CONTEXT pCrlContext);
     * }
     */
    public static MemorySegment CertDuplicateCRLContext(MemorySegment pCrlContext) {
        var mh$ = CertDuplicateCRLContext$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(pCrlContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertCreateCRLContext$MH() {
        return RuntimeHelper.requireNonNull(constants$2139.const$2,"CertCreateCRLContext");
    }
    /**
     * {@snippet :
     * PCCRL_CONTEXT CertCreateCRLContext(DWORD dwCertEncodingType, const BYTE* pbCrlEncoded, DWORD cbCrlEncoded);
     * }
     */
    public static MemorySegment CertCreateCRLContext(int dwCertEncodingType, MemorySegment pbCrlEncoded, int cbCrlEncoded) {
        var mh$ = CertCreateCRLContext$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(dwCertEncodingType, pbCrlEncoded, cbCrlEncoded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertFreeCRLContext$MH() {
        return RuntimeHelper.requireNonNull(constants$2139.const$3,"CertFreeCRLContext");
    }
    /**
     * {@snippet :
     * BOOL CertFreeCRLContext(PCCRL_CONTEXT pCrlContext);
     * }
     */
    public static int CertFreeCRLContext(MemorySegment pCrlContext) {
        var mh$ = CertFreeCRLContext$MH();
        try {
            return (int)mh$.invokeExact(pCrlContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertSetCRLContextProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$2139.const$4,"CertSetCRLContextProperty");
    }
    /**
     * {@snippet :
     * BOOL CertSetCRLContextProperty(PCCRL_CONTEXT pCrlContext, DWORD dwPropId, DWORD dwFlags, void* pvData);
     * }
     */
    public static int CertSetCRLContextProperty(MemorySegment pCrlContext, int dwPropId, int dwFlags, MemorySegment pvData) {
        var mh$ = CertSetCRLContextProperty$MH();
        try {
            return (int)mh$.invokeExact(pCrlContext, dwPropId, dwFlags, pvData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertGetCRLContextProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$2139.const$5,"CertGetCRLContextProperty");
    }
    /**
     * {@snippet :
     * BOOL CertGetCRLContextProperty(PCCRL_CONTEXT pCrlContext, DWORD dwPropId, void* pvData, DWORD* pcbData);
     * }
     */
    public static int CertGetCRLContextProperty(MemorySegment pCrlContext, int dwPropId, MemorySegment pvData, MemorySegment pcbData) {
        var mh$ = CertGetCRLContextProperty$MH();
        try {
            return (int)mh$.invokeExact(pCrlContext, dwPropId, pvData, pcbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertEnumCRLContextProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$2140.const$0,"CertEnumCRLContextProperties");
    }
    /**
     * {@snippet :
     * DWORD CertEnumCRLContextProperties(PCCRL_CONTEXT pCrlContext, DWORD dwPropId);
     * }
     */
    public static int CertEnumCRLContextProperties(MemorySegment pCrlContext, int dwPropId) {
        var mh$ = CertEnumCRLContextProperties$MH();
        try {
            return (int)mh$.invokeExact(pCrlContext, dwPropId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertFindCertificateInCRL$MH() {
        return RuntimeHelper.requireNonNull(constants$2140.const$1,"CertFindCertificateInCRL");
    }
    /**
     * {@snippet :
     * BOOL CertFindCertificateInCRL(PCCERT_CONTEXT pCert, PCCRL_CONTEXT pCrlContext, DWORD dwFlags, void* pvReserved, PCRL_ENTRY* ppCrlEntry);
     * }
     */
    public static int CertFindCertificateInCRL(MemorySegment pCert, MemorySegment pCrlContext, int dwFlags, MemorySegment pvReserved, MemorySegment ppCrlEntry) {
        var mh$ = CertFindCertificateInCRL$MH();
        try {
            return (int)mh$.invokeExact(pCert, pCrlContext, dwFlags, pvReserved, ppCrlEntry);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertIsValidCRLForCertificate$MH() {
        return RuntimeHelper.requireNonNull(constants$2140.const$2,"CertIsValidCRLForCertificate");
    }
    /**
     * {@snippet :
     * BOOL CertIsValidCRLForCertificate(PCCERT_CONTEXT pCert, PCCRL_CONTEXT pCrl, DWORD dwFlags, void* pvReserved);
     * }
     */
    public static int CertIsValidCRLForCertificate(MemorySegment pCert, MemorySegment pCrl, int dwFlags, MemorySegment pvReserved) {
        var mh$ = CertIsValidCRLForCertificate$MH();
        try {
            return (int)mh$.invokeExact(pCert, pCrl, dwFlags, pvReserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAddEncodedCertificateToStore$MH() {
        return RuntimeHelper.requireNonNull(constants$2140.const$3,"CertAddEncodedCertificateToStore");
    }
    /**
     * {@snippet :
     * BOOL CertAddEncodedCertificateToStore(HCERTSTORE hCertStore, DWORD dwCertEncodingType, const BYTE* pbCertEncoded, DWORD cbCertEncoded, DWORD dwAddDisposition, PCCERT_CONTEXT* ppCertContext);
     * }
     */
    public static int CertAddEncodedCertificateToStore(MemorySegment hCertStore, int dwCertEncodingType, MemorySegment pbCertEncoded, int cbCertEncoded, int dwAddDisposition, MemorySegment ppCertContext) {
        var mh$ = CertAddEncodedCertificateToStore$MH();
        try {
            return (int)mh$.invokeExact(hCertStore, dwCertEncodingType, pbCertEncoded, cbCertEncoded, dwAddDisposition, ppCertContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAddCertificateContextToStore$MH() {
        return RuntimeHelper.requireNonNull(constants$2140.const$4,"CertAddCertificateContextToStore");
    }
    /**
     * {@snippet :
     * BOOL CertAddCertificateContextToStore(HCERTSTORE hCertStore, PCCERT_CONTEXT pCertContext, DWORD dwAddDisposition, PCCERT_CONTEXT* ppStoreContext);
     * }
     */
    public static int CertAddCertificateContextToStore(MemorySegment hCertStore, MemorySegment pCertContext, int dwAddDisposition, MemorySegment ppStoreContext) {
        var mh$ = CertAddCertificateContextToStore$MH();
        try {
            return (int)mh$.invokeExact(hCertStore, pCertContext, dwAddDisposition, ppStoreContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAddSerializedElementToStore$MH() {
        return RuntimeHelper.requireNonNull(constants$2140.const$6,"CertAddSerializedElementToStore");
    }
    /**
     * {@snippet :
     * BOOL CertAddSerializedElementToStore(HCERTSTORE hCertStore, const BYTE* pbElement, DWORD cbElement, DWORD dwAddDisposition, DWORD dwFlags, DWORD dwContextTypeFlags, DWORD* pdwContextType, void** ppvContext);
     * }
     */
    public static int CertAddSerializedElementToStore(MemorySegment hCertStore, MemorySegment pbElement, int cbElement, int dwAddDisposition, int dwFlags, int dwContextTypeFlags, MemorySegment pdwContextType, MemorySegment ppvContext) {
        var mh$ = CertAddSerializedElementToStore$MH();
        try {
            return (int)mh$.invokeExact(hCertStore, pbElement, cbElement, dwAddDisposition, dwFlags, dwContextTypeFlags, pdwContextType, ppvContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertDeleteCertificateFromStore$MH() {
        return RuntimeHelper.requireNonNull(constants$2141.const$0,"CertDeleteCertificateFromStore");
    }
    /**
     * {@snippet :
     * BOOL CertDeleteCertificateFromStore(PCCERT_CONTEXT pCertContext);
     * }
     */
    public static int CertDeleteCertificateFromStore(MemorySegment pCertContext) {
        var mh$ = CertDeleteCertificateFromStore$MH();
        try {
            return (int)mh$.invokeExact(pCertContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAddEncodedCRLToStore$MH() {
        return RuntimeHelper.requireNonNull(constants$2141.const$1,"CertAddEncodedCRLToStore");
    }
    /**
     * {@snippet :
     * BOOL CertAddEncodedCRLToStore(HCERTSTORE hCertStore, DWORD dwCertEncodingType, const BYTE* pbCrlEncoded, DWORD cbCrlEncoded, DWORD dwAddDisposition, PCCRL_CONTEXT* ppCrlContext);
     * }
     */
    public static int CertAddEncodedCRLToStore(MemorySegment hCertStore, int dwCertEncodingType, MemorySegment pbCrlEncoded, int cbCrlEncoded, int dwAddDisposition, MemorySegment ppCrlContext) {
        var mh$ = CertAddEncodedCRLToStore$MH();
        try {
            return (int)mh$.invokeExact(hCertStore, dwCertEncodingType, pbCrlEncoded, cbCrlEncoded, dwAddDisposition, ppCrlContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAddCRLContextToStore$MH() {
        return RuntimeHelper.requireNonNull(constants$2141.const$2,"CertAddCRLContextToStore");
    }
    /**
     * {@snippet :
     * BOOL CertAddCRLContextToStore(HCERTSTORE hCertStore, PCCRL_CONTEXT pCrlContext, DWORD dwAddDisposition, PCCRL_CONTEXT* ppStoreContext);
     * }
     */
    public static int CertAddCRLContextToStore(MemorySegment hCertStore, MemorySegment pCrlContext, int dwAddDisposition, MemorySegment ppStoreContext) {
        var mh$ = CertAddCRLContextToStore$MH();
        try {
            return (int)mh$.invokeExact(hCertStore, pCrlContext, dwAddDisposition, ppStoreContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertDeleteCRLFromStore$MH() {
        return RuntimeHelper.requireNonNull(constants$2141.const$3,"CertDeleteCRLFromStore");
    }
    /**
     * {@snippet :
     * BOOL CertDeleteCRLFromStore(PCCRL_CONTEXT pCrlContext);
     * }
     */
    public static int CertDeleteCRLFromStore(MemorySegment pCrlContext) {
        var mh$ = CertDeleteCRLFromStore$MH();
        try {
            return (int)mh$.invokeExact(pCrlContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertSerializeCertificateStoreElement$MH() {
        return RuntimeHelper.requireNonNull(constants$2141.const$4,"CertSerializeCertificateStoreElement");
    }
    /**
     * {@snippet :
     * BOOL CertSerializeCertificateStoreElement(PCCERT_CONTEXT pCertContext, DWORD dwFlags, BYTE* pbElement, DWORD* pcbElement);
     * }
     */
    public static int CertSerializeCertificateStoreElement(MemorySegment pCertContext, int dwFlags, MemorySegment pbElement, MemorySegment pcbElement) {
        var mh$ = CertSerializeCertificateStoreElement$MH();
        try {
            return (int)mh$.invokeExact(pCertContext, dwFlags, pbElement, pcbElement);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertSerializeCRLStoreElement$MH() {
        return RuntimeHelper.requireNonNull(constants$2141.const$5,"CertSerializeCRLStoreElement");
    }
    /**
     * {@snippet :
     * BOOL CertSerializeCRLStoreElement(PCCRL_CONTEXT pCrlContext, DWORD dwFlags, BYTE* pbElement, DWORD* pcbElement);
     * }
     */
    public static int CertSerializeCRLStoreElement(MemorySegment pCrlContext, int dwFlags, MemorySegment pbElement, MemorySegment pcbElement) {
        var mh$ = CertSerializeCRLStoreElement$MH();
        try {
            return (int)mh$.invokeExact(pCrlContext, dwFlags, pbElement, pcbElement);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertDuplicateCTLContext$MH() {
        return RuntimeHelper.requireNonNull(constants$2142.const$0,"CertDuplicateCTLContext");
    }
    /**
     * {@snippet :
     * PCCTL_CONTEXT CertDuplicateCTLContext(PCCTL_CONTEXT pCtlContext);
     * }
     */
    public static MemorySegment CertDuplicateCTLContext(MemorySegment pCtlContext) {
        var mh$ = CertDuplicateCTLContext$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(pCtlContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertCreateCTLContext$MH() {
        return RuntimeHelper.requireNonNull(constants$2142.const$1,"CertCreateCTLContext");
    }
    /**
     * {@snippet :
     * PCCTL_CONTEXT CertCreateCTLContext(DWORD dwMsgAndCertEncodingType, const BYTE* pbCtlEncoded, DWORD cbCtlEncoded);
     * }
     */
    public static MemorySegment CertCreateCTLContext(int dwMsgAndCertEncodingType, MemorySegment pbCtlEncoded, int cbCtlEncoded) {
        var mh$ = CertCreateCTLContext$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(dwMsgAndCertEncodingType, pbCtlEncoded, cbCtlEncoded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertFreeCTLContext$MH() {
        return RuntimeHelper.requireNonNull(constants$2142.const$2,"CertFreeCTLContext");
    }
    /**
     * {@snippet :
     * BOOL CertFreeCTLContext(PCCTL_CONTEXT pCtlContext);
     * }
     */
    public static int CertFreeCTLContext(MemorySegment pCtlContext) {
        var mh$ = CertFreeCTLContext$MH();
        try {
            return (int)mh$.invokeExact(pCtlContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertSetCTLContextProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$2142.const$3,"CertSetCTLContextProperty");
    }
    /**
     * {@snippet :
     * BOOL CertSetCTLContextProperty(PCCTL_CONTEXT pCtlContext, DWORD dwPropId, DWORD dwFlags, void* pvData);
     * }
     */
    public static int CertSetCTLContextProperty(MemorySegment pCtlContext, int dwPropId, int dwFlags, MemorySegment pvData) {
        var mh$ = CertSetCTLContextProperty$MH();
        try {
            return (int)mh$.invokeExact(pCtlContext, dwPropId, dwFlags, pvData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertGetCTLContextProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$2142.const$4,"CertGetCTLContextProperty");
    }
    /**
     * {@snippet :
     * BOOL CertGetCTLContextProperty(PCCTL_CONTEXT pCtlContext, DWORD dwPropId, void* pvData, DWORD* pcbData);
     * }
     */
    public static int CertGetCTLContextProperty(MemorySegment pCtlContext, int dwPropId, MemorySegment pvData, MemorySegment pcbData) {
        var mh$ = CertGetCTLContextProperty$MH();
        try {
            return (int)mh$.invokeExact(pCtlContext, dwPropId, pvData, pcbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertEnumCTLContextProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$2142.const$5,"CertEnumCTLContextProperties");
    }
    /**
     * {@snippet :
     * DWORD CertEnumCTLContextProperties(PCCTL_CONTEXT pCtlContext, DWORD dwPropId);
     * }
     */
    public static int CertEnumCTLContextProperties(MemorySegment pCtlContext, int dwPropId) {
        var mh$ = CertEnumCTLContextProperties$MH();
        try {
            return (int)mh$.invokeExact(pCtlContext, dwPropId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertEnumCTLsInStore$MH() {
        return RuntimeHelper.requireNonNull(constants$2143.const$0,"CertEnumCTLsInStore");
    }
    /**
     * {@snippet :
     * PCCTL_CONTEXT CertEnumCTLsInStore(HCERTSTORE hCertStore, PCCTL_CONTEXT pPrevCtlContext);
     * }
     */
    public static MemorySegment CertEnumCTLsInStore(MemorySegment hCertStore, MemorySegment pPrevCtlContext) {
        var mh$ = CertEnumCTLsInStore$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hCertStore, pPrevCtlContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertFindSubjectInCTL$MH() {
        return RuntimeHelper.requireNonNull(constants$2143.const$2,"CertFindSubjectInCTL");
    }
    /**
     * {@snippet :
     * PCTL_ENTRY CertFindSubjectInCTL(DWORD dwEncodingType, DWORD dwSubjectType, void* pvSubject, PCCTL_CONTEXT pCtlContext, DWORD dwFlags);
     * }
     */
    public static MemorySegment CertFindSubjectInCTL(int dwEncodingType, int dwSubjectType, MemorySegment pvSubject, MemorySegment pCtlContext, int dwFlags) {
        var mh$ = CertFindSubjectInCTL$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(dwEncodingType, dwSubjectType, pvSubject, pCtlContext, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _CTL_ANY_SUBJECT_INFO* PCTL_ANY_SUBJECT_INFO;
     * }
     */
    public static final AddressLayout PCTL_ANY_SUBJECT_INFO = RuntimeHelper.POINTER;
    public static MethodHandle CertFindCTLInStore$MH() {
        return RuntimeHelper.requireNonNull(constants$2143.const$4,"CertFindCTLInStore");
    }
    /**
     * {@snippet :
     * PCCTL_CONTEXT CertFindCTLInStore(HCERTSTORE hCertStore, DWORD dwMsgAndCertEncodingType, DWORD dwFindFlags, DWORD dwFindType, void* pvFindPara, PCCTL_CONTEXT pPrevCtlContext);
     * }
     */
    public static MemorySegment CertFindCTLInStore(MemorySegment hCertStore, int dwMsgAndCertEncodingType, int dwFindFlags, int dwFindType, MemorySegment pvFindPara, MemorySegment pPrevCtlContext) {
        var mh$ = CertFindCTLInStore$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hCertStore, dwMsgAndCertEncodingType, dwFindFlags, dwFindType, pvFindPara, pPrevCtlContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _CTL_FIND_USAGE_PARA* PCTL_FIND_USAGE_PARA;
     * }
     */
    public static final AddressLayout PCTL_FIND_USAGE_PARA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CTL_FIND_SUBJECT_PARA* PCTL_FIND_SUBJECT_PARA;
     * }
     */
    public static final AddressLayout PCTL_FIND_SUBJECT_PARA = RuntimeHelper.POINTER;
    public static MethodHandle CertAddEncodedCTLToStore$MH() {
        return RuntimeHelper.requireNonNull(constants$2145.const$1,"CertAddEncodedCTLToStore");
    }
    /**
     * {@snippet :
     * BOOL CertAddEncodedCTLToStore(HCERTSTORE hCertStore, DWORD dwMsgAndCertEncodingType, const BYTE* pbCtlEncoded, DWORD cbCtlEncoded, DWORD dwAddDisposition, PCCTL_CONTEXT* ppCtlContext);
     * }
     */
    public static int CertAddEncodedCTLToStore(MemorySegment hCertStore, int dwMsgAndCertEncodingType, MemorySegment pbCtlEncoded, int cbCtlEncoded, int dwAddDisposition, MemorySegment ppCtlContext) {
        var mh$ = CertAddEncodedCTLToStore$MH();
        try {
            return (int)mh$.invokeExact(hCertStore, dwMsgAndCertEncodingType, pbCtlEncoded, cbCtlEncoded, dwAddDisposition, ppCtlContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAddCTLContextToStore$MH() {
        return RuntimeHelper.requireNonNull(constants$2145.const$2,"CertAddCTLContextToStore");
    }
    /**
     * {@snippet :
     * BOOL CertAddCTLContextToStore(HCERTSTORE hCertStore, PCCTL_CONTEXT pCtlContext, DWORD dwAddDisposition, PCCTL_CONTEXT* ppStoreContext);
     * }
     */
    public static int CertAddCTLContextToStore(MemorySegment hCertStore, MemorySegment pCtlContext, int dwAddDisposition, MemorySegment ppStoreContext) {
        var mh$ = CertAddCTLContextToStore$MH();
        try {
            return (int)mh$.invokeExact(hCertStore, pCtlContext, dwAddDisposition, ppStoreContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertSerializeCTLStoreElement$MH() {
        return RuntimeHelper.requireNonNull(constants$2145.const$3,"CertSerializeCTLStoreElement");
    }
    /**
     * {@snippet :
     * BOOL CertSerializeCTLStoreElement(PCCTL_CONTEXT pCtlContext, DWORD dwFlags, BYTE* pbElement, DWORD* pcbElement);
     * }
     */
    public static int CertSerializeCTLStoreElement(MemorySegment pCtlContext, int dwFlags, MemorySegment pbElement, MemorySegment pcbElement) {
        var mh$ = CertSerializeCTLStoreElement$MH();
        try {
            return (int)mh$.invokeExact(pCtlContext, dwFlags, pbElement, pcbElement);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertDeleteCTLFromStore$MH() {
        return RuntimeHelper.requireNonNull(constants$2145.const$4,"CertDeleteCTLFromStore");
    }
    /**
     * {@snippet :
     * BOOL CertDeleteCTLFromStore(PCCTL_CONTEXT pCtlContext);
     * }
     */
    public static int CertDeleteCTLFromStore(MemorySegment pCtlContext) {
        var mh$ = CertDeleteCTLFromStore$MH();
        try {
            return (int)mh$.invokeExact(pCtlContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAddCertificateLinkToStore$MH() {
        return RuntimeHelper.requireNonNull(constants$2145.const$5,"CertAddCertificateLinkToStore");
    }
    /**
     * {@snippet :
     * BOOL CertAddCertificateLinkToStore(HCERTSTORE hCertStore, PCCERT_CONTEXT pCertContext, DWORD dwAddDisposition, PCCERT_CONTEXT* ppStoreContext);
     * }
     */
    public static int CertAddCertificateLinkToStore(MemorySegment hCertStore, MemorySegment pCertContext, int dwAddDisposition, MemorySegment ppStoreContext) {
        var mh$ = CertAddCertificateLinkToStore$MH();
        try {
            return (int)mh$.invokeExact(hCertStore, pCertContext, dwAddDisposition, ppStoreContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAddCRLLinkToStore$MH() {
        return RuntimeHelper.requireNonNull(constants$2146.const$0,"CertAddCRLLinkToStore");
    }
    /**
     * {@snippet :
     * BOOL CertAddCRLLinkToStore(HCERTSTORE hCertStore, PCCRL_CONTEXT pCrlContext, DWORD dwAddDisposition, PCCRL_CONTEXT* ppStoreContext);
     * }
     */
    public static int CertAddCRLLinkToStore(MemorySegment hCertStore, MemorySegment pCrlContext, int dwAddDisposition, MemorySegment ppStoreContext) {
        var mh$ = CertAddCRLLinkToStore$MH();
        try {
            return (int)mh$.invokeExact(hCertStore, pCrlContext, dwAddDisposition, ppStoreContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAddCTLLinkToStore$MH() {
        return RuntimeHelper.requireNonNull(constants$2146.const$1,"CertAddCTLLinkToStore");
    }
    /**
     * {@snippet :
     * BOOL CertAddCTLLinkToStore(HCERTSTORE hCertStore, PCCTL_CONTEXT pCtlContext, DWORD dwAddDisposition, PCCTL_CONTEXT* ppStoreContext);
     * }
     */
    public static int CertAddCTLLinkToStore(MemorySegment hCertStore, MemorySegment pCtlContext, int dwAddDisposition, MemorySegment ppStoreContext) {
        var mh$ = CertAddCTLLinkToStore$MH();
        try {
            return (int)mh$.invokeExact(hCertStore, pCtlContext, dwAddDisposition, ppStoreContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAddStoreToCollection$MH() {
        return RuntimeHelper.requireNonNull(constants$2146.const$2,"CertAddStoreToCollection");
    }
    /**
     * {@snippet :
     * BOOL CertAddStoreToCollection(HCERTSTORE hCollectionStore, HCERTSTORE hSiblingStore, DWORD dwUpdateFlags, DWORD dwPriority);
     * }
     */
    public static int CertAddStoreToCollection(MemorySegment hCollectionStore, MemorySegment hSiblingStore, int dwUpdateFlags, int dwPriority) {
        var mh$ = CertAddStoreToCollection$MH();
        try {
            return (int)mh$.invokeExact(hCollectionStore, hSiblingStore, dwUpdateFlags, dwPriority);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertRemoveStoreFromCollection$MH() {
        return RuntimeHelper.requireNonNull(constants$2146.const$3,"CertRemoveStoreFromCollection");
    }
    /**
     * {@snippet :
     * void CertRemoveStoreFromCollection(HCERTSTORE hCollectionStore, HCERTSTORE hSiblingStore);
     * }
     */
    public static void CertRemoveStoreFromCollection(MemorySegment hCollectionStore, MemorySegment hSiblingStore) {
        var mh$ = CertRemoveStoreFromCollection$MH();
        try {
            mh$.invokeExact(hCollectionStore, hSiblingStore);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertControlStore$MH() {
        return RuntimeHelper.requireNonNull(constants$2146.const$4,"CertControlStore");
    }
    /**
     * {@snippet :
     * BOOL CertControlStore(HCERTSTORE hCertStore, DWORD dwFlags, DWORD dwCtrlType, void* pvCtrlPara);
     * }
     */
    public static int CertControlStore(MemorySegment hCertStore, int dwFlags, int dwCtrlType, MemorySegment pvCtrlPara) {
        var mh$ = CertControlStore$MH();
        try {
            return (int)mh$.invokeExact(hCertStore, dwFlags, dwCtrlType, pvCtrlPara);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertSetStoreProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$2146.const$5,"CertSetStoreProperty");
    }
    /**
     * {@snippet :
     * BOOL CertSetStoreProperty(HCERTSTORE hCertStore, DWORD dwPropId, DWORD dwFlags, void* pvData);
     * }
     */
    public static int CertSetStoreProperty(MemorySegment hCertStore, int dwPropId, int dwFlags, MemorySegment pvData) {
        var mh$ = CertSetStoreProperty$MH();
        try {
            return (int)mh$.invokeExact(hCertStore, dwPropId, dwFlags, pvData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertGetStoreProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$2147.const$0,"CertGetStoreProperty");
    }
    /**
     * {@snippet :
     * BOOL CertGetStoreProperty(HCERTSTORE hCertStore, DWORD dwPropId, void* pvData, DWORD* pcbData);
     * }
     */
    public static int CertGetStoreProperty(MemorySegment hCertStore, int dwPropId, MemorySegment pvData, MemorySegment pcbData) {
        var mh$ = CertGetStoreProperty$MH();
        try {
            return (int)mh$.invokeExact(hCertStore, dwPropId, pvData, pcbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _CERT_CREATE_CONTEXT_PARA* PCERT_CREATE_CONTEXT_PARA;
     * }
     */
    public static final AddressLayout PCERT_CREATE_CONTEXT_PARA = RuntimeHelper.POINTER;
    public static MethodHandle CertCreateContext$MH() {
        return RuntimeHelper.requireNonNull(constants$2148.const$4,"CertCreateContext");
    }
    /**
     * {@snippet :
     * void* CertCreateContext(DWORD dwContextType, DWORD dwEncodingType, const BYTE* pbEncoded, DWORD cbEncoded, DWORD dwFlags, PCERT_CREATE_CONTEXT_PARA pCreatePara);
     * }
     */
    public static MemorySegment CertCreateContext(int dwContextType, int dwEncodingType, MemorySegment pbEncoded, int cbEncoded, int dwFlags, MemorySegment pCreatePara) {
        var mh$ = CertCreateContext$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(dwContextType, dwEncodingType, pbEncoded, cbEncoded, dwFlags, pCreatePara);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _CERT_SYSTEM_STORE_INFO* PCERT_SYSTEM_STORE_INFO;
     * }
     */
    public static final AddressLayout PCERT_SYSTEM_STORE_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_PHYSICAL_STORE_INFO* PCERT_PHYSICAL_STORE_INFO;
     * }
     */
    public static final AddressLayout PCERT_PHYSICAL_STORE_INFO = RuntimeHelper.POINTER;
    public static MethodHandle CertRegisterSystemStore$MH() {
        return RuntimeHelper.requireNonNull(constants$2150.const$2,"CertRegisterSystemStore");
    }
    /**
     * {@snippet :
     * BOOL CertRegisterSystemStore(void* pvSystemStore, DWORD dwFlags, PCERT_SYSTEM_STORE_INFO pStoreInfo, void* pvReserved);
     * }
     */
    public static int CertRegisterSystemStore(MemorySegment pvSystemStore, int dwFlags, MemorySegment pStoreInfo, MemorySegment pvReserved) {
        var mh$ = CertRegisterSystemStore$MH();
        try {
            return (int)mh$.invokeExact(pvSystemStore, dwFlags, pStoreInfo, pvReserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertRegisterPhysicalStore$MH() {
        return RuntimeHelper.requireNonNull(constants$2150.const$3,"CertRegisterPhysicalStore");
    }
    /**
     * {@snippet :
     * BOOL CertRegisterPhysicalStore(void* pvSystemStore, DWORD dwFlags, LPCWSTR pwszStoreName, PCERT_PHYSICAL_STORE_INFO pStoreInfo, void* pvReserved);
     * }
     */
    public static int CertRegisterPhysicalStore(MemorySegment pvSystemStore, int dwFlags, MemorySegment pwszStoreName, MemorySegment pStoreInfo, MemorySegment pvReserved) {
        var mh$ = CertRegisterPhysicalStore$MH();
        try {
            return (int)mh$.invokeExact(pvSystemStore, dwFlags, pwszStoreName, pStoreInfo, pvReserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertUnregisterSystemStore$MH() {
        return RuntimeHelper.requireNonNull(constants$2150.const$4,"CertUnregisterSystemStore");
    }
    /**
     * {@snippet :
     * BOOL CertUnregisterSystemStore(void* pvSystemStore, DWORD dwFlags);
     * }
     */
    public static int CertUnregisterSystemStore(MemorySegment pvSystemStore, int dwFlags) {
        var mh$ = CertUnregisterSystemStore$MH();
        try {
            return (int)mh$.invokeExact(pvSystemStore, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertUnregisterPhysicalStore$MH() {
        return RuntimeHelper.requireNonNull(constants$2150.const$5,"CertUnregisterPhysicalStore");
    }
    /**
     * {@snippet :
     * BOOL CertUnregisterPhysicalStore(void* pvSystemStore, DWORD dwFlags, LPCWSTR pwszStoreName);
     * }
     */
    public static int CertUnregisterPhysicalStore(MemorySegment pvSystemStore, int dwFlags, MemorySegment pwszStoreName) {
        var mh$ = CertUnregisterPhysicalStore$MH();
        try {
            return (int)mh$.invokeExact(pvSystemStore, dwFlags, pwszStoreName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertEnumSystemStoreLocation$MH() {
        return RuntimeHelper.requireNonNull(constants$2152.const$1,"CertEnumSystemStoreLocation");
    }
    /**
     * {@snippet :
     * BOOL CertEnumSystemStoreLocation(DWORD dwFlags, void* pvArg, PFN_CERT_ENUM_SYSTEM_STORE_LOCATION pfnEnum);
     * }
     */
    public static int CertEnumSystemStoreLocation(int dwFlags, MemorySegment pvArg, MemorySegment pfnEnum) {
        var mh$ = CertEnumSystemStoreLocation$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, pvArg, pfnEnum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertEnumSystemStore$MH() {
        return RuntimeHelper.requireNonNull(constants$2152.const$2,"CertEnumSystemStore");
    }
    /**
     * {@snippet :
     * BOOL CertEnumSystemStore(DWORD dwFlags, void* pvSystemStoreLocationPara, void* pvArg, PFN_CERT_ENUM_SYSTEM_STORE pfnEnum);
     * }
     */
    public static int CertEnumSystemStore(int dwFlags, MemorySegment pvSystemStoreLocationPara, MemorySegment pvArg, MemorySegment pfnEnum) {
        var mh$ = CertEnumSystemStore$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, pvSystemStoreLocationPara, pvArg, pfnEnum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertEnumPhysicalStore$MH() {
        return RuntimeHelper.requireNonNull(constants$2152.const$3,"CertEnumPhysicalStore");
    }
    /**
     * {@snippet :
     * BOOL CertEnumPhysicalStore(void* pvSystemStore, DWORD dwFlags, void* pvArg, PFN_CERT_ENUM_PHYSICAL_STORE pfnEnum);
     * }
     */
    public static int CertEnumPhysicalStore(MemorySegment pvSystemStore, int dwFlags, MemorySegment pvArg, MemorySegment pfnEnum) {
        var mh$ = CertEnumPhysicalStore$MH();
        try {
            return (int)mh$.invokeExact(pvSystemStore, dwFlags, pvArg, pfnEnum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertGetEnhancedKeyUsage$MH() {
        return RuntimeHelper.requireNonNull(constants$2152.const$4,"CertGetEnhancedKeyUsage");
    }
    /**
     * {@snippet :
     * BOOL CertGetEnhancedKeyUsage(PCCERT_CONTEXT pCertContext, DWORD dwFlags, PCERT_ENHKEY_USAGE pUsage, DWORD* pcbUsage);
     * }
     */
    public static int CertGetEnhancedKeyUsage(MemorySegment pCertContext, int dwFlags, MemorySegment pUsage, MemorySegment pcbUsage) {
        var mh$ = CertGetEnhancedKeyUsage$MH();
        try {
            return (int)mh$.invokeExact(pCertContext, dwFlags, pUsage, pcbUsage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertSetEnhancedKeyUsage$MH() {
        return RuntimeHelper.requireNonNull(constants$2152.const$5,"CertSetEnhancedKeyUsage");
    }
    /**
     * {@snippet :
     * BOOL CertSetEnhancedKeyUsage(PCCERT_CONTEXT pCertContext, PCERT_ENHKEY_USAGE pUsage);
     * }
     */
    public static int CertSetEnhancedKeyUsage(MemorySegment pCertContext, MemorySegment pUsage) {
        var mh$ = CertSetEnhancedKeyUsage$MH();
        try {
            return (int)mh$.invokeExact(pCertContext, pUsage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAddEnhancedKeyUsageIdentifier$MH() {
        return RuntimeHelper.requireNonNull(constants$2153.const$0,"CertAddEnhancedKeyUsageIdentifier");
    }
    /**
     * {@snippet :
     * BOOL CertAddEnhancedKeyUsageIdentifier(PCCERT_CONTEXT pCertContext, LPCSTR pszUsageIdentifier);
     * }
     */
    public static int CertAddEnhancedKeyUsageIdentifier(MemorySegment pCertContext, MemorySegment pszUsageIdentifier) {
        var mh$ = CertAddEnhancedKeyUsageIdentifier$MH();
        try {
            return (int)mh$.invokeExact(pCertContext, pszUsageIdentifier);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertRemoveEnhancedKeyUsageIdentifier$MH() {
        return RuntimeHelper.requireNonNull(constants$2153.const$1,"CertRemoveEnhancedKeyUsageIdentifier");
    }
    /**
     * {@snippet :
     * BOOL CertRemoveEnhancedKeyUsageIdentifier(PCCERT_CONTEXT pCertContext, LPCSTR pszUsageIdentifier);
     * }
     */
    public static int CertRemoveEnhancedKeyUsageIdentifier(MemorySegment pCertContext, MemorySegment pszUsageIdentifier) {
        var mh$ = CertRemoveEnhancedKeyUsageIdentifier$MH();
        try {
            return (int)mh$.invokeExact(pCertContext, pszUsageIdentifier);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertGetValidUsages$MH() {
        return RuntimeHelper.requireNonNull(constants$2153.const$2,"CertGetValidUsages");
    }
    /**
     * {@snippet :
     * BOOL CertGetValidUsages(DWORD cCerts, PCCERT_CONTEXT* rghCerts, int* cNumOIDs, LPSTR* rghOIDs, DWORD* pcbOIDs);
     * }
     */
    public static int CertGetValidUsages(int cCerts, MemorySegment rghCerts, MemorySegment cNumOIDs, MemorySegment rghOIDs, MemorySegment pcbOIDs) {
        var mh$ = CertGetValidUsages$MH();
        try {
            return (int)mh$.invokeExact(cCerts, rghCerts, cNumOIDs, rghOIDs, pcbOIDs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptMsgGetAndVerifySigner$MH() {
        return RuntimeHelper.requireNonNull(constants$2153.const$3,"CryptMsgGetAndVerifySigner");
    }
    /**
     * {@snippet :
     * BOOL CryptMsgGetAndVerifySigner(HCRYPTMSG hCryptMsg, DWORD cSignerStore, HCERTSTORE* rghSignerStore, DWORD dwFlags, PCCERT_CONTEXT* ppSigner, DWORD* pdwSignerIndex);
     * }
     */
    public static int CryptMsgGetAndVerifySigner(MemorySegment hCryptMsg, int cSignerStore, MemorySegment rghSignerStore, int dwFlags, MemorySegment ppSigner, MemorySegment pdwSignerIndex) {
        var mh$ = CryptMsgGetAndVerifySigner$MH();
        try {
            return (int)mh$.invokeExact(hCryptMsg, cSignerStore, rghSignerStore, dwFlags, ppSigner, pdwSignerIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptMsgSignCTL$MH() {
        return RuntimeHelper.requireNonNull(constants$2153.const$5,"CryptMsgSignCTL");
    }
    /**
     * {@snippet :
     * BOOL CryptMsgSignCTL(DWORD dwMsgEncodingType, BYTE* pbCtlContent, DWORD cbCtlContent, PCMSG_SIGNED_ENCODE_INFO pSignInfo, DWORD dwFlags, BYTE* pbEncoded, DWORD* pcbEncoded);
     * }
     */
    public static int CryptMsgSignCTL(int dwMsgEncodingType, MemorySegment pbCtlContent, int cbCtlContent, MemorySegment pSignInfo, int dwFlags, MemorySegment pbEncoded, MemorySegment pcbEncoded) {
        var mh$ = CryptMsgSignCTL$MH();
        try {
            return (int)mh$.invokeExact(dwMsgEncodingType, pbCtlContent, cbCtlContent, pSignInfo, dwFlags, pbEncoded, pcbEncoded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptMsgEncodeAndSignCTL$MH() {
        return RuntimeHelper.requireNonNull(constants$2154.const$0,"CryptMsgEncodeAndSignCTL");
    }
    /**
     * {@snippet :
     * BOOL CryptMsgEncodeAndSignCTL(DWORD dwMsgEncodingType, PCTL_INFO pCtlInfo, PCMSG_SIGNED_ENCODE_INFO pSignInfo, DWORD dwFlags, BYTE* pbEncoded, DWORD* pcbEncoded);
     * }
     */
    public static int CryptMsgEncodeAndSignCTL(int dwMsgEncodingType, MemorySegment pCtlInfo, MemorySegment pSignInfo, int dwFlags, MemorySegment pbEncoded, MemorySegment pcbEncoded) {
        var mh$ = CryptMsgEncodeAndSignCTL$MH();
        try {
            return (int)mh$.invokeExact(dwMsgEncodingType, pCtlInfo, pSignInfo, dwFlags, pbEncoded, pcbEncoded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertFindSubjectInSortedCTL$MH() {
        return RuntimeHelper.requireNonNull(constants$2154.const$1,"CertFindSubjectInSortedCTL");
    }
    /**
     * {@snippet :
     * BOOL CertFindSubjectInSortedCTL(PCRYPT_DATA_BLOB pSubjectIdentifier, PCCTL_CONTEXT pCtlContext, DWORD dwFlags, void* pvReserved, PCRYPT_DER_BLOB pEncodedAttributes);
     * }
     */
    public static int CertFindSubjectInSortedCTL(MemorySegment pSubjectIdentifier, MemorySegment pCtlContext, int dwFlags, MemorySegment pvReserved, MemorySegment pEncodedAttributes) {
        var mh$ = CertFindSubjectInSortedCTL$MH();
        try {
            return (int)mh$.invokeExact(pSubjectIdentifier, pCtlContext, dwFlags, pvReserved, pEncodedAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertEnumSubjectInSortedCTL$MH() {
        return RuntimeHelper.requireNonNull(constants$2154.const$2,"CertEnumSubjectInSortedCTL");
    }
    /**
     * {@snippet :
     * BOOL CertEnumSubjectInSortedCTL(PCCTL_CONTEXT pCtlContext, void** ppvNextSubject, PCRYPT_DER_BLOB pSubjectIdentifier, PCRYPT_DER_BLOB pEncodedAttributes);
     * }
     */
    public static int CertEnumSubjectInSortedCTL(MemorySegment pCtlContext, MemorySegment ppvNextSubject, MemorySegment pSubjectIdentifier, MemorySegment pEncodedAttributes) {
        var mh$ = CertEnumSubjectInSortedCTL$MH();
        try {
            return (int)mh$.invokeExact(pCtlContext, ppvNextSubject, pSubjectIdentifier, pEncodedAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _CTL_VERIFY_USAGE_PARA* PCTL_VERIFY_USAGE_PARA;
     * }
     */
    public static final AddressLayout PCTL_VERIFY_USAGE_PARA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CTL_VERIFY_USAGE_STATUS* PCTL_VERIFY_USAGE_STATUS;
     * }
     */
    public static final AddressLayout PCTL_VERIFY_USAGE_STATUS = RuntimeHelper.POINTER;
    public static MethodHandle CertVerifyCTLUsage$MH() {
        return RuntimeHelper.requireNonNull(constants$2156.const$6,"CertVerifyCTLUsage");
    }
    /**
     * {@snippet :
     * BOOL CertVerifyCTLUsage(DWORD dwEncodingType, DWORD dwSubjectType, void* pvSubject, PCTL_USAGE pSubjectUsage, DWORD dwFlags, PCTL_VERIFY_USAGE_PARA pVerifyUsagePara, PCTL_VERIFY_USAGE_STATUS pVerifyUsageStatus);
     * }
     */
    public static int CertVerifyCTLUsage(int dwEncodingType, int dwSubjectType, MemorySegment pvSubject, MemorySegment pSubjectUsage, int dwFlags, MemorySegment pVerifyUsagePara, MemorySegment pVerifyUsageStatus) {
        var mh$ = CertVerifyCTLUsage$MH();
        try {
            return (int)mh$.invokeExact(dwEncodingType, dwSubjectType, pvSubject, pSubjectUsage, dwFlags, pVerifyUsagePara, pVerifyUsageStatus);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _CERT_REVOCATION_CRL_INFO* PCERT_REVOCATION_CRL_INFO;
     * }
     */
    public static final AddressLayout PCERT_REVOCATION_CRL_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_REVOCATION_CHAIN_PARA* PCERT_REVOCATION_CHAIN_PARA;
     * }
     */
    public static final AddressLayout PCERT_REVOCATION_CHAIN_PARA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_REVOCATION_PARA* PCERT_REVOCATION_PARA;
     * }
     */
    public static final AddressLayout PCERT_REVOCATION_PARA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CERT_REVOCATION_STATUS* PCERT_REVOCATION_STATUS;
     * }
     */
    public static final AddressLayout PCERT_REVOCATION_STATUS = RuntimeHelper.POINTER;
    public static MethodHandle CertVerifyRevocation$MH() {
        return RuntimeHelper.requireNonNull(constants$2160.const$3,"CertVerifyRevocation");
    }
    /**
     * {@snippet :
     * BOOL CertVerifyRevocation(DWORD dwEncodingType, DWORD dwRevType, DWORD cContext, PVOID rgpvContext[], DWORD dwFlags, PCERT_REVOCATION_PARA pRevPara, PCERT_REVOCATION_STATUS pRevStatus);
     * }
     */
    public static int CertVerifyRevocation(int dwEncodingType, int dwRevType, int cContext, MemorySegment rgpvContext, int dwFlags, MemorySegment pRevPara, MemorySegment pRevStatus) {
        var mh$ = CertVerifyRevocation$MH();
        try {
            return (int)mh$.invokeExact(dwEncodingType, dwRevType, cContext, rgpvContext, dwFlags, pRevPara, pRevStatus);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertCompareIntegerBlob$MH() {
        return RuntimeHelper.requireNonNull(constants$2160.const$4,"CertCompareIntegerBlob");
    }
    /**
     * {@snippet :
     * BOOL CertCompareIntegerBlob(PCRYPT_INTEGER_BLOB pInt1, PCRYPT_INTEGER_BLOB pInt2);
     * }
     */
    public static int CertCompareIntegerBlob(MemorySegment pInt1, MemorySegment pInt2) {
        var mh$ = CertCompareIntegerBlob$MH();
        try {
            return (int)mh$.invokeExact(pInt1, pInt2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertCompareCertificate$MH() {
        return RuntimeHelper.requireNonNull(constants$2160.const$5,"CertCompareCertificate");
    }
    /**
     * {@snippet :
     * BOOL CertCompareCertificate(DWORD dwCertEncodingType, PCERT_INFO pCertId1, PCERT_INFO pCertId2);
     * }
     */
    public static int CertCompareCertificate(int dwCertEncodingType, MemorySegment pCertId1, MemorySegment pCertId2) {
        var mh$ = CertCompareCertificate$MH();
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, pCertId1, pCertId2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertCompareCertificateName$MH() {
        return RuntimeHelper.requireNonNull(constants$2161.const$0,"CertCompareCertificateName");
    }
    /**
     * {@snippet :
     * BOOL CertCompareCertificateName(DWORD dwCertEncodingType, PCERT_NAME_BLOB pCertName1, PCERT_NAME_BLOB pCertName2);
     * }
     */
    public static int CertCompareCertificateName(int dwCertEncodingType, MemorySegment pCertName1, MemorySegment pCertName2) {
        var mh$ = CertCompareCertificateName$MH();
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, pCertName1, pCertName2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertIsRDNAttrsInCertificateName$MH() {
        return RuntimeHelper.requireNonNull(constants$2161.const$1,"CertIsRDNAttrsInCertificateName");
    }
    /**
     * {@snippet :
     * BOOL CertIsRDNAttrsInCertificateName(DWORD dwCertEncodingType, DWORD dwFlags, PCERT_NAME_BLOB pCertName, PCERT_RDN pRDN);
     * }
     */
    public static int CertIsRDNAttrsInCertificateName(int dwCertEncodingType, int dwFlags, MemorySegment pCertName, MemorySegment pRDN) {
        var mh$ = CertIsRDNAttrsInCertificateName$MH();
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, dwFlags, pCertName, pRDN);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertComparePublicKeyInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$2161.const$2,"CertComparePublicKeyInfo");
    }
    /**
     * {@snippet :
     * BOOL CertComparePublicKeyInfo(DWORD dwCertEncodingType, PCERT_PUBLIC_KEY_INFO pPublicKey1, PCERT_PUBLIC_KEY_INFO pPublicKey2);
     * }
     */
    public static int CertComparePublicKeyInfo(int dwCertEncodingType, MemorySegment pPublicKey1, MemorySegment pPublicKey2) {
        var mh$ = CertComparePublicKeyInfo$MH();
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, pPublicKey1, pPublicKey2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertGetPublicKeyLength$MH() {
        return RuntimeHelper.requireNonNull(constants$2161.const$3,"CertGetPublicKeyLength");
    }
    /**
     * {@snippet :
     * DWORD CertGetPublicKeyLength(DWORD dwCertEncodingType, PCERT_PUBLIC_KEY_INFO pPublicKey);
     * }
     */
    public static int CertGetPublicKeyLength(int dwCertEncodingType, MemorySegment pPublicKey) {
        var mh$ = CertGetPublicKeyLength$MH();
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, pPublicKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptVerifyCertificateSignature$MH() {
        return RuntimeHelper.requireNonNull(constants$2161.const$5,"CryptVerifyCertificateSignature");
    }
    /**
     * {@snippet :
     * BOOL CryptVerifyCertificateSignature(HCRYPTPROV_LEGACY hCryptProv, DWORD dwCertEncodingType, const BYTE* pbEncoded, DWORD cbEncoded, PCERT_PUBLIC_KEY_INFO pPublicKey);
     * }
     */
    public static int CryptVerifyCertificateSignature(long hCryptProv, int dwCertEncodingType, MemorySegment pbEncoded, int cbEncoded, MemorySegment pPublicKey) {
        var mh$ = CryptVerifyCertificateSignature$MH();
        try {
            return (int)mh$.invokeExact(hCryptProv, dwCertEncodingType, pbEncoded, cbEncoded, pPublicKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptVerifyCertificateSignatureEx$MH() {
        return RuntimeHelper.requireNonNull(constants$2162.const$1,"CryptVerifyCertificateSignatureEx");
    }
    /**
     * {@snippet :
     * BOOL CryptVerifyCertificateSignatureEx(HCRYPTPROV_LEGACY hCryptProv, DWORD dwCertEncodingType, DWORD dwSubjectType, void* pvSubject, DWORD dwIssuerType, void* pvIssuer, DWORD dwFlags, void* pvExtra);
     * }
     */
    public static int CryptVerifyCertificateSignatureEx(long hCryptProv, int dwCertEncodingType, int dwSubjectType, MemorySegment pvSubject, int dwIssuerType, MemorySegment pvIssuer, int dwFlags, MemorySegment pvExtra) {
        var mh$ = CryptVerifyCertificateSignatureEx$MH();
        try {
            return (int)mh$.invokeExact(hCryptProv, dwCertEncodingType, dwSubjectType, pvSubject, dwIssuerType, pvIssuer, dwFlags, pvExtra);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO* PCRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO;
     * }
     */
    public static final AddressLayout PCRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO* PCRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO;
     * }
     */
    public static final AddressLayout PCRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO = RuntimeHelper.POINTER;
    public static MethodHandle CertIsStrongHashToSign$MH() {
        return RuntimeHelper.requireNonNull(constants$2163.const$1,"CertIsStrongHashToSign");
    }
    /**
     * {@snippet :
     * BOOL CertIsStrongHashToSign(PCCERT_STRONG_SIGN_PARA pStrongSignPara, LPCWSTR pwszCNGHashAlgid, PCCERT_CONTEXT pSigningCert);
     * }
     */
    public static int CertIsStrongHashToSign(MemorySegment pStrongSignPara, MemorySegment pwszCNGHashAlgid, MemorySegment pSigningCert) {
        var mh$ = CertIsStrongHashToSign$MH();
        try {
            return (int)mh$.invokeExact(pStrongSignPara, pwszCNGHashAlgid, pSigningCert);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptHashToBeSigned$MH() {
        return RuntimeHelper.requireNonNull(constants$2163.const$2,"CryptHashToBeSigned");
    }
    /**
     * {@snippet :
     * BOOL CryptHashToBeSigned(HCRYPTPROV_LEGACY hCryptProv, DWORD dwCertEncodingType, const BYTE* pbEncoded, DWORD cbEncoded, BYTE* pbComputedHash, DWORD* pcbComputedHash);
     * }
     */
    public static int CryptHashToBeSigned(long hCryptProv, int dwCertEncodingType, MemorySegment pbEncoded, int cbEncoded, MemorySegment pbComputedHash, MemorySegment pcbComputedHash) {
        var mh$ = CryptHashToBeSigned$MH();
        try {
            return (int)mh$.invokeExact(hCryptProv, dwCertEncodingType, pbEncoded, cbEncoded, pbComputedHash, pcbComputedHash);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptHashCertificate$MH() {
        return RuntimeHelper.requireNonNull(constants$2163.const$4,"CryptHashCertificate");
    }
    /**
     * {@snippet :
     * BOOL CryptHashCertificate(HCRYPTPROV_LEGACY hCryptProv, ALG_ID Algid, DWORD dwFlags, const BYTE* pbEncoded, DWORD cbEncoded, BYTE* pbComputedHash, DWORD* pcbComputedHash);
     * }
     */
    public static int CryptHashCertificate(long hCryptProv, int Algid, int dwFlags, MemorySegment pbEncoded, int cbEncoded, MemorySegment pbComputedHash, MemorySegment pcbComputedHash) {
        var mh$ = CryptHashCertificate$MH();
        try {
            return (int)mh$.invokeExact(hCryptProv, Algid, dwFlags, pbEncoded, cbEncoded, pbComputedHash, pcbComputedHash);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptHashCertificate2$MH() {
        return RuntimeHelper.requireNonNull(constants$2163.const$6,"CryptHashCertificate2");
    }
    /**
     * {@snippet :
     * BOOL CryptHashCertificate2(LPCWSTR pwszCNGHashAlgid, DWORD dwFlags, void* pvReserved, const BYTE* pbEncoded, DWORD cbEncoded, BYTE* pbComputedHash, DWORD* pcbComputedHash);
     * }
     */
    public static int CryptHashCertificate2(MemorySegment pwszCNGHashAlgid, int dwFlags, MemorySegment pvReserved, MemorySegment pbEncoded, int cbEncoded, MemorySegment pbComputedHash, MemorySegment pcbComputedHash) {
        var mh$ = CryptHashCertificate2$MH();
        try {
            return (int)mh$.invokeExact(pwszCNGHashAlgid, dwFlags, pvReserved, pbEncoded, cbEncoded, pbComputedHash, pcbComputedHash);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptSignCertificate$MH() {
        return RuntimeHelper.requireNonNull(constants$2164.const$1,"CryptSignCertificate");
    }
    /**
     * {@snippet :
     * BOOL CryptSignCertificate(HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey, DWORD dwKeySpec, DWORD dwCertEncodingType, const BYTE* pbEncodedToBeSigned, DWORD cbEncodedToBeSigned, PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm, void* pvHashAuxInfo, BYTE* pbSignature, DWORD* pcbSignature);
     * }
     */
    public static int CryptSignCertificate(long hCryptProvOrNCryptKey, int dwKeySpec, int dwCertEncodingType, MemorySegment pbEncodedToBeSigned, int cbEncodedToBeSigned, MemorySegment pSignatureAlgorithm, MemorySegment pvHashAuxInfo, MemorySegment pbSignature, MemorySegment pcbSignature) {
        var mh$ = CryptSignCertificate$MH();
        try {
            return (int)mh$.invokeExact(hCryptProvOrNCryptKey, dwKeySpec, dwCertEncodingType, pbEncodedToBeSigned, cbEncodedToBeSigned, pSignatureAlgorithm, pvHashAuxInfo, pbSignature, pcbSignature);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptSignAndEncodeCertificate$MH() {
        return RuntimeHelper.requireNonNull(constants$2164.const$3,"CryptSignAndEncodeCertificate");
    }
    /**
     * {@snippet :
     * BOOL CryptSignAndEncodeCertificate(HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey, DWORD dwKeySpec, DWORD dwCertEncodingType, LPCSTR lpszStructType, void* pvStructInfo, PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm, void* pvHashAuxInfo, BYTE* pbEncoded, DWORD* pcbEncoded);
     * }
     */
    public static int CryptSignAndEncodeCertificate(long hCryptProvOrNCryptKey, int dwKeySpec, int dwCertEncodingType, MemorySegment lpszStructType, MemorySegment pvStructInfo, MemorySegment pSignatureAlgorithm, MemorySegment pvHashAuxInfo, MemorySegment pbEncoded, MemorySegment pcbEncoded) {
        var mh$ = CryptSignAndEncodeCertificate$MH();
        try {
            return (int)mh$.invokeExact(hCryptProvOrNCryptKey, dwKeySpec, dwCertEncodingType, lpszStructType, pvStructInfo, pSignatureAlgorithm, pvHashAuxInfo, pbEncoded, pcbEncoded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertVerifyTimeValidity$MH() {
        return RuntimeHelper.requireNonNull(constants$2166.const$0,"CertVerifyTimeValidity");
    }
    /**
     * {@snippet :
     * LONG CertVerifyTimeValidity(LPFILETIME pTimeToVerify, PCERT_INFO pCertInfo);
     * }
     */
    public static int CertVerifyTimeValidity(MemorySegment pTimeToVerify, MemorySegment pCertInfo) {
        var mh$ = CertVerifyTimeValidity$MH();
        try {
            return (int)mh$.invokeExact(pTimeToVerify, pCertInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertVerifyCRLTimeValidity$MH() {
        return RuntimeHelper.requireNonNull(constants$2166.const$1,"CertVerifyCRLTimeValidity");
    }
    /**
     * {@snippet :
     * LONG CertVerifyCRLTimeValidity(LPFILETIME pTimeToVerify, PCRL_INFO pCrlInfo);
     * }
     */
    public static int CertVerifyCRLTimeValidity(MemorySegment pTimeToVerify, MemorySegment pCrlInfo) {
        var mh$ = CertVerifyCRLTimeValidity$MH();
        try {
            return (int)mh$.invokeExact(pTimeToVerify, pCrlInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertVerifyValidityNesting$MH() {
        return RuntimeHelper.requireNonNull(constants$2166.const$2,"CertVerifyValidityNesting");
    }
    /**
     * {@snippet :
     * BOOL CertVerifyValidityNesting(PCERT_INFO pSubjectInfo, PCERT_INFO pIssuerInfo);
     * }
     */
    public static int CertVerifyValidityNesting(MemorySegment pSubjectInfo, MemorySegment pIssuerInfo) {
        var mh$ = CertVerifyValidityNesting$MH();
        try {
            return (int)mh$.invokeExact(pSubjectInfo, pIssuerInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertVerifyCRLRevocation$MH() {
        return RuntimeHelper.requireNonNull(constants$2166.const$3,"CertVerifyCRLRevocation");
    }
    /**
     * {@snippet :
     * BOOL CertVerifyCRLRevocation(DWORD dwCertEncodingType, PCERT_INFO pCertId, DWORD cCrlInfo, PCRL_INFO rgpCrlInfo[]);
     * }
     */
    public static int CertVerifyCRLRevocation(int dwCertEncodingType, MemorySegment pCertId, int cCrlInfo, MemorySegment rgpCrlInfo) {
        var mh$ = CertVerifyCRLRevocation$MH();
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, pCertId, cCrlInfo, rgpCrlInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAlgIdToOID$MH() {
        return RuntimeHelper.requireNonNull(constants$2166.const$4,"CertAlgIdToOID");
    }
    /**
     * {@snippet :
     * LPCSTR CertAlgIdToOID(DWORD dwAlgId);
     * }
     */
    public static MemorySegment CertAlgIdToOID(int dwAlgId) {
        var mh$ = CertAlgIdToOID$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(dwAlgId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertOIDToAlgId$MH() {
        return RuntimeHelper.requireNonNull(constants$2166.const$5,"CertOIDToAlgId");
    }
    /**
     * {@snippet :
     * DWORD CertOIDToAlgId(LPCSTR pszObjId);
     * }
     */
    public static int CertOIDToAlgId(MemorySegment pszObjId) {
        var mh$ = CertOIDToAlgId$MH();
        try {
            return (int)mh$.invokeExact(pszObjId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertFindExtension$MH() {
        return RuntimeHelper.requireNonNull(constants$2167.const$0,"CertFindExtension");
    }
    /**
     * {@snippet :
     * PCERT_EXTENSION CertFindExtension(LPCSTR pszObjId, DWORD cExtensions, CERT_EXTENSION rgExtensions[]);
     * }
     */
    public static MemorySegment CertFindExtension(MemorySegment pszObjId, int cExtensions, MemorySegment rgExtensions) {
        var mh$ = CertFindExtension$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(pszObjId, cExtensions, rgExtensions);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertFindAttribute$MH() {
        return RuntimeHelper.requireNonNull(constants$2167.const$1,"CertFindAttribute");
    }
    /**
     * {@snippet :
     * PCRYPT_ATTRIBUTE CertFindAttribute(LPCSTR pszObjId, DWORD cAttr, CRYPT_ATTRIBUTE rgAttr[]);
     * }
     */
    public static MemorySegment CertFindAttribute(MemorySegment pszObjId, int cAttr, MemorySegment rgAttr) {
        var mh$ = CertFindAttribute$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(pszObjId, cAttr, rgAttr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertFindRDNAttr$MH() {
        return RuntimeHelper.requireNonNull(constants$2167.const$2,"CertFindRDNAttr");
    }
    /**
     * {@snippet :
     * PCERT_RDN_ATTR CertFindRDNAttr(LPCSTR pszObjId, PCERT_NAME_INFO pName);
     * }
     */
    public static MemorySegment CertFindRDNAttr(MemorySegment pszObjId, MemorySegment pName) {
        var mh$ = CertFindRDNAttr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(pszObjId, pName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertGetIntendedKeyUsage$MH() {
        return RuntimeHelper.requireNonNull(constants$2167.const$3,"CertGetIntendedKeyUsage");
    }
    /**
     * {@snippet :
     * BOOL CertGetIntendedKeyUsage(DWORD dwCertEncodingType, PCERT_INFO pCertInfo, BYTE* pbKeyUsage, DWORD cbKeyUsage);
     * }
     */
    public static int CertGetIntendedKeyUsage(int dwCertEncodingType, MemorySegment pCertInfo, MemorySegment pbKeyUsage, int cbKeyUsage) {
        var mh$ = CertGetIntendedKeyUsage$MH();
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, pCertInfo, pbKeyUsage, cbKeyUsage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef void* HCRYPTDEFAULTCONTEXT;
     * }
     */
    public static final AddressLayout HCRYPTDEFAULTCONTEXT = RuntimeHelper.POINTER;
    public static MethodHandle CryptInstallDefaultContext$MH() {
        return RuntimeHelper.requireNonNull(constants$2167.const$4,"CryptInstallDefaultContext");
    }
    /**
     * {@snippet :
     * BOOL CryptInstallDefaultContext(HCRYPTPROV hCryptProv, DWORD dwDefaultType, void* pvDefaultPara, DWORD dwFlags, void* pvReserved, HCRYPTDEFAULTCONTEXT* phDefaultContext);
     * }
     */
    public static int CryptInstallDefaultContext(long hCryptProv, int dwDefaultType, MemorySegment pvDefaultPara, int dwFlags, MemorySegment pvReserved, MemorySegment phDefaultContext) {
        var mh$ = CryptInstallDefaultContext$MH();
        try {
            return (int)mh$.invokeExact(hCryptProv, dwDefaultType, pvDefaultPara, dwFlags, pvReserved, phDefaultContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA* PCRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA;
     * }
     */
    public static final AddressLayout PCRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA = RuntimeHelper.POINTER;
    public static MethodHandle CryptUninstallDefaultContext$MH() {
        return RuntimeHelper.requireNonNull(constants$2168.const$2,"CryptUninstallDefaultContext");
    }
    /**
     * {@snippet :
     * BOOL CryptUninstallDefaultContext(HCRYPTDEFAULTCONTEXT hDefaultContext, DWORD dwFlags, void* pvReserved);
     * }
     */
    public static int CryptUninstallDefaultContext(MemorySegment hDefaultContext, int dwFlags, MemorySegment pvReserved) {
        var mh$ = CryptUninstallDefaultContext$MH();
        try {
            return (int)mh$.invokeExact(hDefaultContext, dwFlags, pvReserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptExportPublicKeyInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$2168.const$3,"CryptExportPublicKeyInfo");
    }
    /**
     * {@snippet :
     * BOOL CryptExportPublicKeyInfo(HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey, DWORD dwKeySpec, DWORD dwCertEncodingType, PCERT_PUBLIC_KEY_INFO pInfo, DWORD* pcbInfo);
     * }
     */
    public static int CryptExportPublicKeyInfo(long hCryptProvOrNCryptKey, int dwKeySpec, int dwCertEncodingType, MemorySegment pInfo, MemorySegment pcbInfo) {
        var mh$ = CryptExportPublicKeyInfo$MH();
        try {
            return (int)mh$.invokeExact(hCryptProvOrNCryptKey, dwKeySpec, dwCertEncodingType, pInfo, pcbInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptExportPublicKeyInfoEx$MH() {
        return RuntimeHelper.requireNonNull(constants$2168.const$5,"CryptExportPublicKeyInfoEx");
    }
    /**
     * {@snippet :
     * BOOL CryptExportPublicKeyInfoEx(HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey, DWORD dwKeySpec, DWORD dwCertEncodingType, LPSTR pszPublicKeyObjId, DWORD dwFlags, void* pvAuxInfo, PCERT_PUBLIC_KEY_INFO pInfo, DWORD* pcbInfo);
     * }
     */
    public static int CryptExportPublicKeyInfoEx(long hCryptProvOrNCryptKey, int dwKeySpec, int dwCertEncodingType, MemorySegment pszPublicKeyObjId, int dwFlags, MemorySegment pvAuxInfo, MemorySegment pInfo, MemorySegment pcbInfo) {
        var mh$ = CryptExportPublicKeyInfoEx$MH();
        try {
            return (int)mh$.invokeExact(hCryptProvOrNCryptKey, dwKeySpec, dwCertEncodingType, pszPublicKeyObjId, dwFlags, pvAuxInfo, pInfo, pcbInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptExportPublicKeyInfoFromBCryptKeyHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$2169.const$3,"CryptExportPublicKeyInfoFromBCryptKeyHandle");
    }
    /**
     * {@snippet :
     * BOOL CryptExportPublicKeyInfoFromBCryptKeyHandle(BCRYPT_KEY_HANDLE hBCryptKey, DWORD dwCertEncodingType, LPSTR pszPublicKeyObjId, DWORD dwFlags, void* pvAuxInfo, PCERT_PUBLIC_KEY_INFO pInfo, DWORD* pcbInfo);
     * }
     */
    public static int CryptExportPublicKeyInfoFromBCryptKeyHandle(MemorySegment hBCryptKey, int dwCertEncodingType, MemorySegment pszPublicKeyObjId, int dwFlags, MemorySegment pvAuxInfo, MemorySegment pInfo, MemorySegment pcbInfo) {
        var mh$ = CryptExportPublicKeyInfoFromBCryptKeyHandle$MH();
        try {
            return (int)mh$.invokeExact(hBCryptKey, dwCertEncodingType, pszPublicKeyObjId, dwFlags, pvAuxInfo, pInfo, pcbInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptImportPublicKeyInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$2170.const$1,"CryptImportPublicKeyInfo");
    }
    /**
     * {@snippet :
     * BOOL CryptImportPublicKeyInfo(HCRYPTPROV hCryptProv, DWORD dwCertEncodingType, PCERT_PUBLIC_KEY_INFO pInfo, HCRYPTKEY* phKey);
     * }
     */
    public static int CryptImportPublicKeyInfo(long hCryptProv, int dwCertEncodingType, MemorySegment pInfo, MemorySegment phKey) {
        var mh$ = CryptImportPublicKeyInfo$MH();
        try {
            return (int)mh$.invokeExact(hCryptProv, dwCertEncodingType, pInfo, phKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptImportPublicKeyInfoEx$MH() {
        return RuntimeHelper.requireNonNull(constants$2170.const$3,"CryptImportPublicKeyInfoEx");
    }
    /**
     * {@snippet :
     * BOOL CryptImportPublicKeyInfoEx(HCRYPTPROV hCryptProv, DWORD dwCertEncodingType, PCERT_PUBLIC_KEY_INFO pInfo, ALG_ID aiKeyAlg, DWORD dwFlags, void* pvAuxInfo, HCRYPTKEY* phKey);
     * }
     */
    public static int CryptImportPublicKeyInfoEx(long hCryptProv, int dwCertEncodingType, MemorySegment pInfo, int aiKeyAlg, int dwFlags, MemorySegment pvAuxInfo, MemorySegment phKey) {
        var mh$ = CryptImportPublicKeyInfoEx$MH();
        try {
            return (int)mh$.invokeExact(hCryptProv, dwCertEncodingType, pInfo, aiKeyAlg, dwFlags, pvAuxInfo, phKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptImportPublicKeyInfoEx2$MH() {
        return RuntimeHelper.requireNonNull(constants$2170.const$4,"CryptImportPublicKeyInfoEx2");
    }
    /**
     * {@snippet :
     * BOOL CryptImportPublicKeyInfoEx2(DWORD dwCertEncodingType, PCERT_PUBLIC_KEY_INFO pInfo, DWORD dwFlags, void* pvAuxInfo, BCRYPT_KEY_HANDLE* phKey);
     * }
     */
    public static int CryptImportPublicKeyInfoEx2(int dwCertEncodingType, MemorySegment pInfo, int dwFlags, MemorySegment pvAuxInfo, MemorySegment phKey) {
        var mh$ = CryptImportPublicKeyInfoEx2$MH();
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, pInfo, dwFlags, pvAuxInfo, phKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptAcquireCertificatePrivateKey$MH() {
        return RuntimeHelper.requireNonNull(constants$2171.const$1,"CryptAcquireCertificatePrivateKey");
    }
    /**
     * {@snippet :
     * BOOL CryptAcquireCertificatePrivateKey(PCCERT_CONTEXT pCert, DWORD dwFlags, void* pvParameters, HCRYPTPROV_OR_NCRYPT_KEY_HANDLE* phCryptProvOrNCryptKey, DWORD* pdwKeySpec, BOOL* pfCallerFreeProvOrNCryptKey);
     * }
     */
    public static int CryptAcquireCertificatePrivateKey(MemorySegment pCert, int dwFlags, MemorySegment pvParameters, MemorySegment phCryptProvOrNCryptKey, MemorySegment pdwKeySpec, MemorySegment pfCallerFreeProvOrNCryptKey) {
        var mh$ = CryptAcquireCertificatePrivateKey$MH();
        try {
            return (int)mh$.invokeExact(pCert, dwFlags, pvParameters, phCryptProvOrNCryptKey, pdwKeySpec, pfCallerFreeProvOrNCryptKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptFindCertificateKeyProvInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$2171.const$2,"CryptFindCertificateKeyProvInfo");
    }
    /**
     * {@snippet :
     * BOOL CryptFindCertificateKeyProvInfo(PCCERT_CONTEXT pCert, DWORD dwFlags, void* pvReserved);
     * }
     */
    public static int CryptFindCertificateKeyProvInfo(MemorySegment pCert, int dwFlags, MemorySegment pvReserved) {
        var mh$ = CryptFindCertificateKeyProvInfo$MH();
        try {
            return (int)mh$.invokeExact(pCert, dwFlags, pvReserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptImportPKCS8$MH() {
        return RuntimeHelper.requireNonNull(constants$2171.const$6,"CryptImportPKCS8");
    }
    /**
     * {@snippet :
     * BOOL CryptImportPKCS8(CRYPT_PKCS8_IMPORT_PARAMS sPrivateKeyAndParams, DWORD dwFlags, HCRYPTPROV* phCryptProv, void* pvAuxInfo);
     * }
     */
    public static int CryptImportPKCS8(MemorySegment sPrivateKeyAndParams, int dwFlags, MemorySegment phCryptProv, MemorySegment pvAuxInfo) {
        var mh$ = CryptImportPKCS8$MH();
        try {
            return (int)mh$.invokeExact(sPrivateKeyAndParams, dwFlags, phCryptProv, pvAuxInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptExportPKCS8$MH() {
        return RuntimeHelper.requireNonNull(constants$2172.const$1,"CryptExportPKCS8");
    }
    /**
     * {@snippet :
     * BOOL CryptExportPKCS8(HCRYPTPROV hCryptProv, DWORD dwKeySpec, LPSTR pszPrivateKeyObjId, DWORD dwFlags, void* pvAuxInfo, BYTE* pbPrivateKeyBlob, DWORD* pcbPrivateKeyBlob);
     * }
     */
    public static int CryptExportPKCS8(long hCryptProv, int dwKeySpec, MemorySegment pszPrivateKeyObjId, int dwFlags, MemorySegment pvAuxInfo, MemorySegment pbPrivateKeyBlob, MemorySegment pcbPrivateKeyBlob) {
        var mh$ = CryptExportPKCS8$MH();
        try {
            return (int)mh$.invokeExact(hCryptProv, dwKeySpec, pszPrivateKeyObjId, dwFlags, pvAuxInfo, pbPrivateKeyBlob, pcbPrivateKeyBlob);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptExportPKCS8Ex$MH() {
        return RuntimeHelper.requireNonNull(constants$2172.const$2,"CryptExportPKCS8Ex");
    }
    /**
     * {@snippet :
     * BOOL CryptExportPKCS8Ex(CRYPT_PKCS8_EXPORT_PARAMS* psExportParams, DWORD dwFlags, void* pvAuxInfo, BYTE* pbPrivateKeyBlob, DWORD* pcbPrivateKeyBlob);
     * }
     */
    public static int CryptExportPKCS8Ex(MemorySegment psExportParams, int dwFlags, MemorySegment pvAuxInfo, MemorySegment pbPrivateKeyBlob, MemorySegment pcbPrivateKeyBlob) {
        var mh$ = CryptExportPKCS8Ex$MH();
        try {
            return (int)mh$.invokeExact(psExportParams, dwFlags, pvAuxInfo, pbPrivateKeyBlob, pcbPrivateKeyBlob);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptHashPublicKeyInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$2172.const$4,"CryptHashPublicKeyInfo");
    }
    /**
     * {@snippet :
     * BOOL CryptHashPublicKeyInfo(HCRYPTPROV_LEGACY hCryptProv, ALG_ID Algid, DWORD dwFlags, DWORD dwCertEncodingType, PCERT_PUBLIC_KEY_INFO pInfo, BYTE* pbComputedHash, DWORD* pcbComputedHash);
     * }
     */
    public static int CryptHashPublicKeyInfo(long hCryptProv, int Algid, int dwFlags, int dwCertEncodingType, MemorySegment pInfo, MemorySegment pbComputedHash, MemorySegment pcbComputedHash) {
        var mh$ = CryptHashPublicKeyInfo$MH();
        try {
            return (int)mh$.invokeExact(hCryptProv, Algid, dwFlags, dwCertEncodingType, pInfo, pbComputedHash, pcbComputedHash);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertRDNValueToStrA$MH() {
        return RuntimeHelper.requireNonNull(constants$2172.const$5,"CertRDNValueToStrA");
    }
    /**
     * {@snippet :
     * DWORD CertRDNValueToStrA(DWORD dwValueType, PCERT_RDN_VALUE_BLOB pValue, LPSTR psz, DWORD csz);
     * }
     */
    public static int CertRDNValueToStrA(int dwValueType, MemorySegment pValue, MemorySegment psz, int csz) {
        var mh$ = CertRDNValueToStrA$MH();
        try {
            return (int)mh$.invokeExact(dwValueType, pValue, psz, csz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertRDNValueToStrW$MH() {
        return RuntimeHelper.requireNonNull(constants$2173.const$0,"CertRDNValueToStrW");
    }
    /**
     * {@snippet :
     * DWORD CertRDNValueToStrW(DWORD dwValueType, PCERT_RDN_VALUE_BLOB pValue, LPWSTR psz, DWORD csz);
     * }
     */
    public static int CertRDNValueToStrW(int dwValueType, MemorySegment pValue, MemorySegment psz, int csz) {
        var mh$ = CertRDNValueToStrW$MH();
        try {
            return (int)mh$.invokeExact(dwValueType, pValue, psz, csz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertNameToStrA$MH() {
        return RuntimeHelper.requireNonNull(constants$2173.const$1,"CertNameToStrA");
    }
    /**
     * {@snippet :
     * DWORD CertNameToStrA(DWORD dwCertEncodingType, PCERT_NAME_BLOB pName, DWORD dwStrType, LPSTR psz, DWORD csz);
     * }
     */
    public static int CertNameToStrA(int dwCertEncodingType, MemorySegment pName, int dwStrType, MemorySegment psz, int csz) {
        var mh$ = CertNameToStrA$MH();
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, pName, dwStrType, psz, csz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertNameToStrW$MH() {
        return RuntimeHelper.requireNonNull(constants$2173.const$2,"CertNameToStrW");
    }
    /**
     * {@snippet :
     * DWORD CertNameToStrW(DWORD dwCertEncodingType, PCERT_NAME_BLOB pName, DWORD dwStrType, LPWSTR psz, DWORD csz);
     * }
     */
    public static int CertNameToStrW(int dwCertEncodingType, MemorySegment pName, int dwStrType, MemorySegment psz, int csz) {
        var mh$ = CertNameToStrW$MH();
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, pName, dwStrType, psz, csz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertStrToNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$2173.const$3,"CertStrToNameA");
    }
    /**
     * {@snippet :
     * BOOL CertStrToNameA(DWORD dwCertEncodingType, LPCSTR pszX500, DWORD dwStrType, void* pvReserved, BYTE* pbEncoded, DWORD* pcbEncoded, LPCSTR* ppszError);
     * }
     */
    public static int CertStrToNameA(int dwCertEncodingType, MemorySegment pszX500, int dwStrType, MemorySegment pvReserved, MemorySegment pbEncoded, MemorySegment pcbEncoded, MemorySegment ppszError) {
        var mh$ = CertStrToNameA$MH();
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, pszX500, dwStrType, pvReserved, pbEncoded, pcbEncoded, ppszError);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertStrToNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$2173.const$4,"CertStrToNameW");
    }
    /**
     * {@snippet :
     * BOOL CertStrToNameW(DWORD dwCertEncodingType, LPCWSTR pszX500, DWORD dwStrType, void* pvReserved, BYTE* pbEncoded, DWORD* pcbEncoded, LPCWSTR* ppszError);
     * }
     */
    public static int CertStrToNameW(int dwCertEncodingType, MemorySegment pszX500, int dwStrType, MemorySegment pvReserved, MemorySegment pbEncoded, MemorySegment pcbEncoded, MemorySegment ppszError) {
        var mh$ = CertStrToNameW$MH();
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, pszX500, dwStrType, pvReserved, pbEncoded, pcbEncoded, ppszError);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertGetNameStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$2173.const$5,"CertGetNameStringA");
    }
    /**
     * {@snippet :
     * DWORD CertGetNameStringA(PCCERT_CONTEXT pCertContext, DWORD dwType, DWORD dwFlags, void* pvTypePara, LPSTR pszNameString, DWORD cchNameString);
     * }
     */
    public static int CertGetNameStringA(MemorySegment pCertContext, int dwType, int dwFlags, MemorySegment pvTypePara, MemorySegment pszNameString, int cchNameString) {
        var mh$ = CertGetNameStringA$MH();
        try {
            return (int)mh$.invokeExact(pCertContext, dwType, dwFlags, pvTypePara, pszNameString, cchNameString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertGetNameStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$2174.const$0,"CertGetNameStringW");
    }
    /**
     * {@snippet :
     * DWORD CertGetNameStringW(PCCERT_CONTEXT pCertContext, DWORD dwType, DWORD dwFlags, void* pvTypePara, LPWSTR pszNameString, DWORD cchNameString);
     * }
     */
    public static int CertGetNameStringW(MemorySegment pCertContext, int dwType, int dwFlags, MemorySegment pvTypePara, MemorySegment pszNameString, int cchNameString) {
        var mh$ = CertGetNameStringW$MH();
        try {
            return (int)mh$.invokeExact(pCertContext, dwType, dwFlags, pvTypePara, pszNameString, cchNameString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _CRYPT_SIGN_MESSAGE_PARA* PCRYPT_SIGN_MESSAGE_PARA;
     * }
     */
    public static final AddressLayout PCRYPT_SIGN_MESSAGE_PARA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPT_VERIFY_MESSAGE_PARA* PCRYPT_VERIFY_MESSAGE_PARA;
     * }
     */
    public static final AddressLayout PCRYPT_VERIFY_MESSAGE_PARA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPT_ENCRYPT_MESSAGE_PARA* PCRYPT_ENCRYPT_MESSAGE_PARA;
     * }
     */
    public static final AddressLayout PCRYPT_ENCRYPT_MESSAGE_PARA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPT_DECRYPT_MESSAGE_PARA* PCRYPT_DECRYPT_MESSAGE_PARA;
     * }
     */
    public static final AddressLayout PCRYPT_DECRYPT_MESSAGE_PARA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPT_HASH_MESSAGE_PARA* PCRYPT_HASH_MESSAGE_PARA;
     * }
     */
    public static final AddressLayout PCRYPT_HASH_MESSAGE_PARA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPT_KEY_SIGN_MESSAGE_PARA* PCRYPT_KEY_SIGN_MESSAGE_PARA;
     * }
     */
    public static final AddressLayout PCRYPT_KEY_SIGN_MESSAGE_PARA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _CRYPT_KEY_VERIFY_MESSAGE_PARA* PCRYPT_KEY_VERIFY_MESSAGE_PARA;
     * }
     */
    public static final AddressLayout PCRYPT_KEY_VERIFY_MESSAGE_PARA = RuntimeHelper.POINTER;
    public static MethodHandle CryptSignMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$2182.const$4,"CryptSignMessage");
    }
    /**
     * {@snippet :
     * BOOL CryptSignMessage(PCRYPT_SIGN_MESSAGE_PARA pSignPara, BOOL fDetachedSignature, DWORD cToBeSigned, const BYTE* rgpbToBeSigned[], DWORD rgcbToBeSigned[], BYTE* pbSignedBlob, DWORD* pcbSignedBlob);
     * }
     */
    public static int CryptSignMessage(MemorySegment pSignPara, int fDetachedSignature, int cToBeSigned, MemorySegment rgpbToBeSigned, MemorySegment rgcbToBeSigned, MemorySegment pbSignedBlob, MemorySegment pcbSignedBlob) {
        var mh$ = CryptSignMessage$MH();
        try {
            return (int)mh$.invokeExact(pSignPara, fDetachedSignature, cToBeSigned, rgpbToBeSigned, rgcbToBeSigned, pbSignedBlob, pcbSignedBlob);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptVerifyMessageSignature$MH() {
        return RuntimeHelper.requireNonNull(constants$2182.const$5,"CryptVerifyMessageSignature");
    }
    /**
     * {@snippet :
     * BOOL CryptVerifyMessageSignature(PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara, DWORD dwSignerIndex, const BYTE* pbSignedBlob, DWORD cbSignedBlob, BYTE* pbDecoded, DWORD* pcbDecoded, PCCERT_CONTEXT* ppSignerCert);
     * }
     */
    public static int CryptVerifyMessageSignature(MemorySegment pVerifyPara, int dwSignerIndex, MemorySegment pbSignedBlob, int cbSignedBlob, MemorySegment pbDecoded, MemorySegment pcbDecoded, MemorySegment ppSignerCert) {
        var mh$ = CryptVerifyMessageSignature$MH();
        try {
            return (int)mh$.invokeExact(pVerifyPara, dwSignerIndex, pbSignedBlob, cbSignedBlob, pbDecoded, pcbDecoded, ppSignerCert);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptGetMessageSignerCount$MH() {
        return RuntimeHelper.requireNonNull(constants$2183.const$0,"CryptGetMessageSignerCount");
    }
    /**
     * {@snippet :
     * LONG CryptGetMessageSignerCount(DWORD dwMsgEncodingType, const BYTE* pbSignedBlob, DWORD cbSignedBlob);
     * }
     */
    public static int CryptGetMessageSignerCount(int dwMsgEncodingType, MemorySegment pbSignedBlob, int cbSignedBlob) {
        var mh$ = CryptGetMessageSignerCount$MH();
        try {
            return (int)mh$.invokeExact(dwMsgEncodingType, pbSignedBlob, cbSignedBlob);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptGetMessageCertificates$MH() {
        return RuntimeHelper.requireNonNull(constants$2183.const$2,"CryptGetMessageCertificates");
    }
    /**
     * {@snippet :
     * HCERTSTORE CryptGetMessageCertificates(DWORD dwMsgAndCertEncodingType, HCRYPTPROV_LEGACY hCryptProv, DWORD dwFlags, const BYTE* pbSignedBlob, DWORD cbSignedBlob);
     * }
     */
    public static MemorySegment CryptGetMessageCertificates(int dwMsgAndCertEncodingType, long hCryptProv, int dwFlags, MemorySegment pbSignedBlob, int cbSignedBlob) {
        var mh$ = CryptGetMessageCertificates$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(dwMsgAndCertEncodingType, hCryptProv, dwFlags, pbSignedBlob, cbSignedBlob);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptVerifyDetachedMessageSignature$MH() {
        return RuntimeHelper.requireNonNull(constants$2183.const$3,"CryptVerifyDetachedMessageSignature");
    }
    /**
     * {@snippet :
     * BOOL CryptVerifyDetachedMessageSignature(PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara, DWORD dwSignerIndex, const BYTE* pbDetachedSignBlob, DWORD cbDetachedSignBlob, DWORD cToBeSigned, const BYTE* rgpbToBeSigned[], DWORD rgcbToBeSigned[], PCCERT_CONTEXT* ppSignerCert);
     * }
     */
    public static int CryptVerifyDetachedMessageSignature(MemorySegment pVerifyPara, int dwSignerIndex, MemorySegment pbDetachedSignBlob, int cbDetachedSignBlob, int cToBeSigned, MemorySegment rgpbToBeSigned, MemorySegment rgcbToBeSigned, MemorySegment ppSignerCert) {
        var mh$ = CryptVerifyDetachedMessageSignature$MH();
        try {
            return (int)mh$.invokeExact(pVerifyPara, dwSignerIndex, pbDetachedSignBlob, cbDetachedSignBlob, cToBeSigned, rgpbToBeSigned, rgcbToBeSigned, ppSignerCert);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptEncryptMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$2183.const$4,"CryptEncryptMessage");
    }
    /**
     * {@snippet :
     * BOOL CryptEncryptMessage(PCRYPT_ENCRYPT_MESSAGE_PARA pEncryptPara, DWORD cRecipientCert, PCCERT_CONTEXT rgpRecipientCert[], const BYTE* pbToBeEncrypted, DWORD cbToBeEncrypted, BYTE* pbEncryptedBlob, DWORD* pcbEncryptedBlob);
     * }
     */
    public static int CryptEncryptMessage(MemorySegment pEncryptPara, int cRecipientCert, MemorySegment rgpRecipientCert, MemorySegment pbToBeEncrypted, int cbToBeEncrypted, MemorySegment pbEncryptedBlob, MemorySegment pcbEncryptedBlob) {
        var mh$ = CryptEncryptMessage$MH();
        try {
            return (int)mh$.invokeExact(pEncryptPara, cRecipientCert, rgpRecipientCert, pbToBeEncrypted, cbToBeEncrypted, pbEncryptedBlob, pcbEncryptedBlob);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptDecryptMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$2183.const$5,"CryptDecryptMessage");
    }
    /**
     * {@snippet :
     * BOOL CryptDecryptMessage(PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara, const BYTE* pbEncryptedBlob, DWORD cbEncryptedBlob, BYTE* pbDecrypted, DWORD* pcbDecrypted, PCCERT_CONTEXT* ppXchgCert);
     * }
     */
    public static int CryptDecryptMessage(MemorySegment pDecryptPara, MemorySegment pbEncryptedBlob, int cbEncryptedBlob, MemorySegment pbDecrypted, MemorySegment pcbDecrypted, MemorySegment ppXchgCert) {
        var mh$ = CryptDecryptMessage$MH();
        try {
            return (int)mh$.invokeExact(pDecryptPara, pbEncryptedBlob, cbEncryptedBlob, pbDecrypted, pcbDecrypted, ppXchgCert);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptSignAndEncryptMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$2184.const$1,"CryptSignAndEncryptMessage");
    }
    /**
     * {@snippet :
     * BOOL CryptSignAndEncryptMessage(PCRYPT_SIGN_MESSAGE_PARA pSignPara, PCRYPT_ENCRYPT_MESSAGE_PARA pEncryptPara, DWORD cRecipientCert, PCCERT_CONTEXT rgpRecipientCert[], const BYTE* pbToBeSignedAndEncrypted, DWORD cbToBeSignedAndEncrypted, BYTE* pbSignedAndEncryptedBlob, DWORD* pcbSignedAndEncryptedBlob);
     * }
     */
    public static int CryptSignAndEncryptMessage(MemorySegment pSignPara, MemorySegment pEncryptPara, int cRecipientCert, MemorySegment rgpRecipientCert, MemorySegment pbToBeSignedAndEncrypted, int cbToBeSignedAndEncrypted, MemorySegment pbSignedAndEncryptedBlob, MemorySegment pcbSignedAndEncryptedBlob) {
        var mh$ = CryptSignAndEncryptMessage$MH();
        try {
            return (int)mh$.invokeExact(pSignPara, pEncryptPara, cRecipientCert, rgpRecipientCert, pbToBeSignedAndEncrypted, cbToBeSignedAndEncrypted, pbSignedAndEncryptedBlob, pcbSignedAndEncryptedBlob);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptDecryptAndVerifyMessageSignature$MH() {
        return RuntimeHelper.requireNonNull(constants$2184.const$3,"CryptDecryptAndVerifyMessageSignature");
    }
    /**
     * {@snippet :
     * BOOL CryptDecryptAndVerifyMessageSignature(PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara, PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara, DWORD dwSignerIndex, const BYTE* pbEncryptedBlob, DWORD cbEncryptedBlob, BYTE* pbDecrypted, DWORD* pcbDecrypted, PCCERT_CONTEXT* ppXchgCert, PCCERT_CONTEXT* ppSignerCert);
     * }
     */
    public static int CryptDecryptAndVerifyMessageSignature(MemorySegment pDecryptPara, MemorySegment pVerifyPara, int dwSignerIndex, MemorySegment pbEncryptedBlob, int cbEncryptedBlob, MemorySegment pbDecrypted, MemorySegment pcbDecrypted, MemorySegment ppXchgCert, MemorySegment ppSignerCert) {
        var mh$ = CryptDecryptAndVerifyMessageSignature$MH();
        try {
            return (int)mh$.invokeExact(pDecryptPara, pVerifyPara, dwSignerIndex, pbEncryptedBlob, cbEncryptedBlob, pbDecrypted, pcbDecrypted, ppXchgCert, ppSignerCert);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptDecodeMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$2184.const$5,"CryptDecodeMessage");
    }
    /**
     * {@snippet :
     * BOOL CryptDecodeMessage(DWORD dwMsgTypeFlags, PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara, PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara, DWORD dwSignerIndex, const BYTE* pbEncodedBlob, DWORD cbEncodedBlob, DWORD dwPrevInnerContentType, DWORD* pdwMsgType, DWORD* pdwInnerContentType, BYTE* pbDecoded, DWORD* pcbDecoded, PCCERT_CONTEXT* ppXchgCert, PCCERT_CONTEXT* ppSignerCert);
     * }
     */
    public static int CryptDecodeMessage(int dwMsgTypeFlags, MemorySegment pDecryptPara, MemorySegment pVerifyPara, int dwSignerIndex, MemorySegment pbEncodedBlob, int cbEncodedBlob, int dwPrevInnerContentType, MemorySegment pdwMsgType, MemorySegment pdwInnerContentType, MemorySegment pbDecoded, MemorySegment pcbDecoded, MemorySegment ppXchgCert, MemorySegment ppSignerCert) {
        var mh$ = CryptDecodeMessage$MH();
        try {
            return (int)mh$.invokeExact(dwMsgTypeFlags, pDecryptPara, pVerifyPara, dwSignerIndex, pbEncodedBlob, cbEncodedBlob, dwPrevInnerContentType, pdwMsgType, pdwInnerContentType, pbDecoded, pcbDecoded, ppXchgCert, ppSignerCert);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptHashMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$2185.const$1,"CryptHashMessage");
    }
    /**
     * {@snippet :
     * BOOL CryptHashMessage(PCRYPT_HASH_MESSAGE_PARA pHashPara, BOOL fDetachedHash, DWORD cToBeHashed, const BYTE* rgpbToBeHashed[], DWORD rgcbToBeHashed[], BYTE* pbHashedBlob, DWORD* pcbHashedBlob, BYTE* pbComputedHash, DWORD* pcbComputedHash);
     * }
     */
    public static int CryptHashMessage(MemorySegment pHashPara, int fDetachedHash, int cToBeHashed, MemorySegment rgpbToBeHashed, MemorySegment rgcbToBeHashed, MemorySegment pbHashedBlob, MemorySegment pcbHashedBlob, MemorySegment pbComputedHash, MemorySegment pcbComputedHash) {
        var mh$ = CryptHashMessage$MH();
        try {
            return (int)mh$.invokeExact(pHashPara, fDetachedHash, cToBeHashed, rgpbToBeHashed, rgcbToBeHashed, pbHashedBlob, pcbHashedBlob, pbComputedHash, pcbComputedHash);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptVerifyMessageHash$MH() {
        return RuntimeHelper.requireNonNull(constants$2185.const$3,"CryptVerifyMessageHash");
    }
    /**
     * {@snippet :
     * BOOL CryptVerifyMessageHash(PCRYPT_HASH_MESSAGE_PARA pHashPara, BYTE* pbHashedBlob, DWORD cbHashedBlob, BYTE* pbToBeHashed, DWORD* pcbToBeHashed, BYTE* pbComputedHash, DWORD* pcbComputedHash);
     * }
     */
    public static int CryptVerifyMessageHash(MemorySegment pHashPara, MemorySegment pbHashedBlob, int cbHashedBlob, MemorySegment pbToBeHashed, MemorySegment pcbToBeHashed, MemorySegment pbComputedHash, MemorySegment pcbComputedHash) {
        var mh$ = CryptVerifyMessageHash$MH();
        try {
            return (int)mh$.invokeExact(pHashPara, pbHashedBlob, cbHashedBlob, pbToBeHashed, pcbToBeHashed, pbComputedHash, pcbComputedHash);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptVerifyDetachedMessageHash$MH() {
        return RuntimeHelper.requireNonNull(constants$2185.const$5,"CryptVerifyDetachedMessageHash");
    }
    /**
     * {@snippet :
     * BOOL CryptVerifyDetachedMessageHash(PCRYPT_HASH_MESSAGE_PARA pHashPara, BYTE* pbDetachedHashBlob, DWORD cbDetachedHashBlob, DWORD cToBeHashed, const BYTE* rgpbToBeHashed[], DWORD rgcbToBeHashed[], BYTE* pbComputedHash, DWORD* pcbComputedHash);
     * }
     */
    public static int CryptVerifyDetachedMessageHash(MemorySegment pHashPara, MemorySegment pbDetachedHashBlob, int cbDetachedHashBlob, int cToBeHashed, MemorySegment rgpbToBeHashed, MemorySegment rgcbToBeHashed, MemorySegment pbComputedHash, MemorySegment pcbComputedHash) {
        var mh$ = CryptVerifyDetachedMessageHash$MH();
        try {
            return (int)mh$.invokeExact(pHashPara, pbDetachedHashBlob, cbDetachedHashBlob, cToBeHashed, rgpbToBeHashed, rgcbToBeHashed, pbComputedHash, pcbComputedHash);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptSignMessageWithKey$MH() {
        return RuntimeHelper.requireNonNull(constants$2186.const$0,"CryptSignMessageWithKey");
    }
    /**
     * {@snippet :
     * BOOL CryptSignMessageWithKey(PCRYPT_KEY_SIGN_MESSAGE_PARA pSignPara, const BYTE* pbToBeSigned, DWORD cbToBeSigned, BYTE* pbSignedBlob, DWORD* pcbSignedBlob);
     * }
     */
    public static int CryptSignMessageWithKey(MemorySegment pSignPara, MemorySegment pbToBeSigned, int cbToBeSigned, MemorySegment pbSignedBlob, MemorySegment pcbSignedBlob) {
        var mh$ = CryptSignMessageWithKey$MH();
        try {
            return (int)mh$.invokeExact(pSignPara, pbToBeSigned, cbToBeSigned, pbSignedBlob, pcbSignedBlob);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptVerifyMessageSignatureWithKey$MH() {
        return RuntimeHelper.requireNonNull(constants$2186.const$1,"CryptVerifyMessageSignatureWithKey");
    }
    /**
     * {@snippet :
     * BOOL CryptVerifyMessageSignatureWithKey(PCRYPT_KEY_VERIFY_MESSAGE_PARA pVerifyPara, PCERT_PUBLIC_KEY_INFO pPublicKeyInfo, const BYTE* pbSignedBlob, DWORD cbSignedBlob, BYTE* pbDecoded, DWORD* pcbDecoded);
     * }
     */
    public static int CryptVerifyMessageSignatureWithKey(MemorySegment pVerifyPara, MemorySegment pPublicKeyInfo, MemorySegment pbSignedBlob, int cbSignedBlob, MemorySegment pbDecoded, MemorySegment pcbDecoded) {
        var mh$ = CryptVerifyMessageSignatureWithKey$MH();
        try {
            return (int)mh$.invokeExact(pVerifyPara, pPublicKeyInfo, pbSignedBlob, cbSignedBlob, pbDecoded, pcbDecoded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertOpenSystemStoreA$MH() {
        return RuntimeHelper.requireNonNull(constants$2186.const$2,"CertOpenSystemStoreA");
    }
    /**
     * {@snippet :
     * HCERTSTORE CertOpenSystemStoreA(HCRYPTPROV_LEGACY hProv, LPCSTR szSubsystemProtocol);
     * }
     */
    public static MemorySegment CertOpenSystemStoreA(long hProv, MemorySegment szSubsystemProtocol) {
        var mh$ = CertOpenSystemStoreA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hProv, szSubsystemProtocol);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertOpenSystemStoreW$MH() {
        return RuntimeHelper.requireNonNull(constants$2186.const$3,"CertOpenSystemStoreW");
    }
    /**
     * {@snippet :
     * HCERTSTORE CertOpenSystemStoreW(HCRYPTPROV_LEGACY hProv, LPCWSTR szSubsystemProtocol);
     * }
     */
    public static MemorySegment CertOpenSystemStoreW(long hProv, MemorySegment szSubsystemProtocol) {
        var mh$ = CertOpenSystemStoreW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hProv, szSubsystemProtocol);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAddEncodedCertificateToSystemStoreA$MH() {
        return RuntimeHelper.requireNonNull(constants$2186.const$4,"CertAddEncodedCertificateToSystemStoreA");
    }
    /**
     * {@snippet :
     * BOOL CertAddEncodedCertificateToSystemStoreA(LPCSTR szCertStoreName, const BYTE* pbCertEncoded, DWORD cbCertEncoded);
     * }
     */
    public static int CertAddEncodedCertificateToSystemStoreA(MemorySegment szCertStoreName, MemorySegment pbCertEncoded, int cbCertEncoded) {
        var mh$ = CertAddEncodedCertificateToSystemStoreA$MH();
        try {
            return (int)mh$.invokeExact(szCertStoreName, pbCertEncoded, cbCertEncoded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAddEncodedCertificateToSystemStoreW$MH() {
        return RuntimeHelper.requireNonNull(constants$2186.const$5,"CertAddEncodedCertificateToSystemStoreW");
    }
    /**
     * {@snippet :
     * BOOL CertAddEncodedCertificateToSystemStoreW(LPCWSTR szCertStoreName, const BYTE* pbCertEncoded, DWORD cbCertEncoded);
     * }
     */
    public static int CertAddEncodedCertificateToSystemStoreW(MemorySegment szCertStoreName, MemorySegment pbCertEncoded, int cbCertEncoded) {
        var mh$ = CertAddEncodedCertificateToSystemStoreW$MH();
        try {
            return (int)mh$.invokeExact(szCertStoreName, pbCertEncoded, cbCertEncoded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _CERT_CHAIN* PCERT_CHAIN;
     * }
     */
    public static final AddressLayout PCERT_CHAIN = RuntimeHelper.POINTER;
    public static MethodHandle FindCertsByIssuer$MH() {
        return RuntimeHelper.requireNonNull(constants$2187.const$3,"FindCertsByIssuer");
    }
    /**
     * {@snippet :
     * HRESULT FindCertsByIssuer(PCERT_CHAIN pCertChains, DWORD* pcbCertChains, DWORD* pcCertChains, BYTE* pbEncodedIssuerName, DWORD cbEncodedIssuerName, LPCWSTR pwszPurpose, DWORD dwKeySpec);
     * }
     */
    public static int FindCertsByIssuer(MemorySegment pCertChains, MemorySegment pcbCertChains, MemorySegment pcCertChains, MemorySegment pbEncodedIssuerName, int cbEncodedIssuerName, MemorySegment pwszPurpose, int dwKeySpec) {
        var mh$ = FindCertsByIssuer$MH();
        try {
            return (int)mh$.invokeExact(pCertChains, pcbCertChains, pcCertChains, pbEncodedIssuerName, cbEncodedIssuerName, pwszPurpose, dwKeySpec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptQueryObject$MH() {
        return RuntimeHelper.requireNonNull(constants$2187.const$5,"CryptQueryObject");
    }
    /**
     * {@snippet :
     * BOOL CryptQueryObject(DWORD dwObjectType, void* pvObject, DWORD dwExpectedContentTypeFlags, DWORD dwExpectedFormatTypeFlags, DWORD dwFlags, DWORD* pdwMsgAndCertEncodingType, DWORD* pdwContentType, DWORD* pdwFormatType, HCERTSTORE* phCertStore, HCRYPTMSG* phMsg, void** ppvContext);
     * }
     */
    public static int CryptQueryObject(int dwObjectType, MemorySegment pvObject, int dwExpectedContentTypeFlags, int dwExpectedFormatTypeFlags, int dwFlags, MemorySegment pdwMsgAndCertEncodingType, MemorySegment pdwContentType, MemorySegment pdwFormatType, MemorySegment phCertStore, MemorySegment phMsg, MemorySegment ppvContext) {
        var mh$ = CryptQueryObject$MH();
        try {
            return (int)mh$.invokeExact(dwObjectType, pvObject, dwExpectedContentTypeFlags, dwExpectedFormatTypeFlags, dwFlags, pdwMsgAndCertEncodingType, pdwContentType, pdwFormatType, phCertStore, phMsg, ppvContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptMemAlloc$MH() {
        return RuntimeHelper.requireNonNull(constants$2188.const$0,"CryptMemAlloc");
    }
    /**
     * {@snippet :
     * LPVOID CryptMemAlloc(ULONG cbSize);
     * }
     */
    public static MemorySegment CryptMemAlloc(int cbSize) {
        var mh$ = CryptMemAlloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(cbSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}



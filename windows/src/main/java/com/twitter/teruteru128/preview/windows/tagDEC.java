// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tagDEC {
 *     USHORT wReserved;
 *     union {
 *         struct {
 *             BYTE scale;
 *             BYTE sign;
 *         };
 *         USHORT signscale;
 *     };
 *     ULONG Hi32;
 *     union {
 *         struct {
 *             ULONG Lo32;
 *             ULONG Mid32;
 *         };
 *         ULONGLONG Lo64;
 *     };
 * };
 * }
 */
public class tagDEC {

    public static MemoryLayout $LAYOUT() {
        return constants$2361.const$4;
    }
    public static VarHandle wReserved$VH() {
        return constants$2361.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * USHORT wReserved;
     * }
     */
    public static short wReserved$get(MemorySegment seg) {
        return (short)constants$2361.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * USHORT wReserved;
     * }
     */
    public static void wReserved$set(MemorySegment seg, short x) {
        constants$2361.const$5.set(seg, x);
    }
    public static short wReserved$get(MemorySegment seg, long index) {
        return (short)constants$2361.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void wReserved$set(MemorySegment seg, long index, short x) {
        constants$2361.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle scale$VH() {
        return constants$2362.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE scale;
     * }
     */
    public static byte scale$get(MemorySegment seg) {
        return (byte)constants$2362.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE scale;
     * }
     */
    public static void scale$set(MemorySegment seg, byte x) {
        constants$2362.const$0.set(seg, x);
    }
    public static byte scale$get(MemorySegment seg, long index) {
        return (byte)constants$2362.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void scale$set(MemorySegment seg, long index, byte x) {
        constants$2362.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle sign$VH() {
        return constants$2362.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE sign;
     * }
     */
    public static byte sign$get(MemorySegment seg) {
        return (byte)constants$2362.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE sign;
     * }
     */
    public static void sign$set(MemorySegment seg, byte x) {
        constants$2362.const$1.set(seg, x);
    }
    public static byte sign$get(MemorySegment seg, long index) {
        return (byte)constants$2362.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void sign$set(MemorySegment seg, long index, byte x) {
        constants$2362.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle signscale$VH() {
        return constants$2362.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * USHORT signscale;
     * }
     */
    public static short signscale$get(MemorySegment seg) {
        return (short)constants$2362.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * USHORT signscale;
     * }
     */
    public static void signscale$set(MemorySegment seg, short x) {
        constants$2362.const$2.set(seg, x);
    }
    public static short signscale$get(MemorySegment seg, long index) {
        return (short)constants$2362.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void signscale$set(MemorySegment seg, long index, short x) {
        constants$2362.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Hi32$VH() {
        return constants$2362.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG Hi32;
     * }
     */
    public static int Hi32$get(MemorySegment seg) {
        return (int)constants$2362.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG Hi32;
     * }
     */
    public static void Hi32$set(MemorySegment seg, int x) {
        constants$2362.const$3.set(seg, x);
    }
    public static int Hi32$get(MemorySegment seg, long index) {
        return (int)constants$2362.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void Hi32$set(MemorySegment seg, long index, int x) {
        constants$2362.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Lo32$VH() {
        return constants$2362.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG Lo32;
     * }
     */
    public static int Lo32$get(MemorySegment seg) {
        return (int)constants$2362.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG Lo32;
     * }
     */
    public static void Lo32$set(MemorySegment seg, int x) {
        constants$2362.const$4.set(seg, x);
    }
    public static int Lo32$get(MemorySegment seg, long index) {
        return (int)constants$2362.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void Lo32$set(MemorySegment seg, long index, int x) {
        constants$2362.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Mid32$VH() {
        return constants$2362.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG Mid32;
     * }
     */
    public static int Mid32$get(MemorySegment seg) {
        return (int)constants$2362.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG Mid32;
     * }
     */
    public static void Mid32$set(MemorySegment seg, int x) {
        constants$2362.const$5.set(seg, x);
    }
    public static int Mid32$get(MemorySegment seg, long index) {
        return (int)constants$2362.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void Mid32$set(MemorySegment seg, long index, int x) {
        constants$2362.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Lo64$VH() {
        return constants$2363.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONGLONG Lo64;
     * }
     */
    public static long Lo64$get(MemorySegment seg) {
        return (long)constants$2363.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONGLONG Lo64;
     * }
     */
    public static void Lo64$set(MemorySegment seg, long x) {
        constants$2363.const$0.set(seg, x);
    }
    public static long Lo64$get(MemorySegment seg, long index) {
        return (long)constants$2363.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Lo64$set(MemorySegment seg, long index, long x) {
        constants$2363.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



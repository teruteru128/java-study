// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tagGUITHREADINFO {
 *     DWORD cbSize;
 *     DWORD flags;
 *     HWND hwndActive;
 *     HWND hwndFocus;
 *     HWND hwndCapture;
 *     HWND hwndMenuOwner;
 *     HWND hwndMoveSize;
 *     HWND hwndCaret;
 *     RECT rcCaret;
 * };
 * }
 */
public class tagGUITHREADINFO {

    public static MemoryLayout $LAYOUT() {
        return constants$1370.const$0;
    }
    public static VarHandle cbSize$VH() {
        return constants$1370.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD cbSize;
     * }
     */
    public static int cbSize$get(MemorySegment seg) {
        return (int)constants$1370.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD cbSize;
     * }
     */
    public static void cbSize$set(MemorySegment seg, int x) {
        constants$1370.const$1.set(seg, x);
    }
    public static int cbSize$get(MemorySegment seg, long index) {
        return (int)constants$1370.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void cbSize$set(MemorySegment seg, long index, int x) {
        constants$1370.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle flags$VH() {
        return constants$1370.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD flags;
     * }
     */
    public static int flags$get(MemorySegment seg) {
        return (int)constants$1370.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD flags;
     * }
     */
    public static void flags$set(MemorySegment seg, int x) {
        constants$1370.const$2.set(seg, x);
    }
    public static int flags$get(MemorySegment seg, long index) {
        return (int)constants$1370.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void flags$set(MemorySegment seg, long index, int x) {
        constants$1370.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hwndActive$VH() {
        return constants$1370.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HWND hwndActive;
     * }
     */
    public static MemorySegment hwndActive$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1370.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HWND hwndActive;
     * }
     */
    public static void hwndActive$set(MemorySegment seg, MemorySegment x) {
        constants$1370.const$3.set(seg, x);
    }
    public static MemorySegment hwndActive$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1370.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void hwndActive$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1370.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hwndFocus$VH() {
        return constants$1370.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HWND hwndFocus;
     * }
     */
    public static MemorySegment hwndFocus$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1370.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HWND hwndFocus;
     * }
     */
    public static void hwndFocus$set(MemorySegment seg, MemorySegment x) {
        constants$1370.const$4.set(seg, x);
    }
    public static MemorySegment hwndFocus$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1370.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void hwndFocus$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1370.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hwndCapture$VH() {
        return constants$1370.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HWND hwndCapture;
     * }
     */
    public static MemorySegment hwndCapture$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1370.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HWND hwndCapture;
     * }
     */
    public static void hwndCapture$set(MemorySegment seg, MemorySegment x) {
        constants$1370.const$5.set(seg, x);
    }
    public static MemorySegment hwndCapture$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1370.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void hwndCapture$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1370.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hwndMenuOwner$VH() {
        return constants$1371.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HWND hwndMenuOwner;
     * }
     */
    public static MemorySegment hwndMenuOwner$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1371.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HWND hwndMenuOwner;
     * }
     */
    public static void hwndMenuOwner$set(MemorySegment seg, MemorySegment x) {
        constants$1371.const$0.set(seg, x);
    }
    public static MemorySegment hwndMenuOwner$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1371.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void hwndMenuOwner$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1371.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hwndMoveSize$VH() {
        return constants$1371.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HWND hwndMoveSize;
     * }
     */
    public static MemorySegment hwndMoveSize$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1371.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HWND hwndMoveSize;
     * }
     */
    public static void hwndMoveSize$set(MemorySegment seg, MemorySegment x) {
        constants$1371.const$1.set(seg, x);
    }
    public static MemorySegment hwndMoveSize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1371.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void hwndMoveSize$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1371.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hwndCaret$VH() {
        return constants$1371.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HWND hwndCaret;
     * }
     */
    public static MemorySegment hwndCaret$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1371.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HWND hwndCaret;
     * }
     */
    public static void hwndCaret$set(MemorySegment seg, MemorySegment x) {
        constants$1371.const$2.set(seg, x);
    }
    public static MemorySegment hwndCaret$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1371.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void hwndCaret$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1371.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment rcCaret$slice(MemorySegment seg) {
        return seg.asSlice(56, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



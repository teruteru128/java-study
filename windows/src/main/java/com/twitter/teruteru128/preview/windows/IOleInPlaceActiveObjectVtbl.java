// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IOleInPlaceActiveObjectVtbl {
 *     HRESULT (*QueryInterface)(IOleInPlaceActiveObject*,const IID*,void**);
 *     ULONG (*AddRef)(IOleInPlaceActiveObject*);
 *     ULONG (*Release)(IOleInPlaceActiveObject*);
 *     HRESULT (*GetWindow)(IOleInPlaceActiveObject*,HWND*);
 *     HRESULT (*ContextSensitiveHelp)(IOleInPlaceActiveObject*,BOOL);
 *     HRESULT (*TranslateAcceleratorA)(IOleInPlaceActiveObject*,LPMSG);
 *     HRESULT (*OnFrameWindowActivate)(IOleInPlaceActiveObject*,BOOL);
 *     HRESULT (*OnDocWindowActivate)(IOleInPlaceActiveObject*,BOOL);
 *     HRESULT (*ResizeBorder)(IOleInPlaceActiveObject*,LPCRECT,IOleInPlaceUIWindow*,BOOL);
 *     HRESULT (*EnableModeless)(IOleInPlaceActiveObject*,BOOL);
 * };
 * }
 */
public class IOleInPlaceActiveObjectVtbl {

    public static MemoryLayout $LAYOUT() {
        return constants$3683.const$3;
    }
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IOleInPlaceActiveObject*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3683.const$4, fi, constants$37.const$3, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle QueryInterface$VH() {
        return constants$3683.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IOleInPlaceActiveObject*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3683.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IOleInPlaceActiveObject*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        constants$3683.const$5.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3683.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3683.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, Arena scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*AddRef)(IOleInPlaceActiveObject*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3684.const$0, fi, constants$18.const$5, scope);
        }
        static AddRef ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle AddRef$VH() {
        return constants$3684.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IOleInPlaceActiveObject*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3684.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IOleInPlaceActiveObject*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        constants$3684.const$1.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3684.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3684.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, Arena scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*Release)(IOleInPlaceActiveObject*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3684.const$2, fi, constants$18.const$5, scope);
        }
        static Release ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Release$VH() {
        return constants$3684.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IOleInPlaceActiveObject*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3684.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IOleInPlaceActiveObject*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        constants$3684.const$3.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3684.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3684.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, Arena scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetWindow)(IOleInPlaceActiveObject*,HWND*);
     * }
     */
    public interface GetWindow {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetWindow fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3684.const$4, fi, constants$34.const$0, scope);
        }
        static GetWindow ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetWindow$VH() {
        return constants$3684.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetWindow)(IOleInPlaceActiveObject*,HWND*);
     * }
     */
    public static MemorySegment GetWindow$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3684.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetWindow)(IOleInPlaceActiveObject*,HWND*);
     * }
     */
    public static void GetWindow$set(MemorySegment seg, MemorySegment x) {
        constants$3684.const$5.set(seg, x);
    }
    public static MemorySegment GetWindow$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3684.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GetWindow$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3684.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetWindow GetWindow(MemorySegment segment, Arena scope) {
        return GetWindow.ofAddress(GetWindow$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*ContextSensitiveHelp)(IOleInPlaceActiveObject*,BOOL);
     * }
     */
    public interface ContextSensitiveHelp {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(ContextSensitiveHelp fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3685.const$0, fi, constants$65.const$2, scope);
        }
        static ContextSensitiveHelp ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)constants$800.const$4.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle ContextSensitiveHelp$VH() {
        return constants$3685.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*ContextSensitiveHelp)(IOleInPlaceActiveObject*,BOOL);
     * }
     */
    public static MemorySegment ContextSensitiveHelp$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3685.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*ContextSensitiveHelp)(IOleInPlaceActiveObject*,BOOL);
     * }
     */
    public static void ContextSensitiveHelp$set(MemorySegment seg, MemorySegment x) {
        constants$3685.const$1.set(seg, x);
    }
    public static MemorySegment ContextSensitiveHelp$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3685.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void ContextSensitiveHelp$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3685.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static ContextSensitiveHelp ContextSensitiveHelp(MemorySegment segment, Arena scope) {
        return ContextSensitiveHelp.ofAddress(ContextSensitiveHelp$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*TranslateAcceleratorA)(IOleInPlaceActiveObject*,LPMSG);
     * }
     */
    public interface TranslateAcceleratorA {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(TranslateAcceleratorA fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3685.const$2, fi, constants$34.const$0, scope);
        }
        static TranslateAcceleratorA ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle TranslateAcceleratorA$VH() {
        return constants$3685.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*TranslateAcceleratorA)(IOleInPlaceActiveObject*,LPMSG);
     * }
     */
    public static MemorySegment TranslateAcceleratorA$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3685.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*TranslateAcceleratorA)(IOleInPlaceActiveObject*,LPMSG);
     * }
     */
    public static void TranslateAcceleratorA$set(MemorySegment seg, MemorySegment x) {
        constants$3685.const$3.set(seg, x);
    }
    public static MemorySegment TranslateAcceleratorA$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3685.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void TranslateAcceleratorA$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3685.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static TranslateAcceleratorA TranslateAcceleratorA(MemorySegment segment, Arena scope) {
        return TranslateAcceleratorA.ofAddress(TranslateAcceleratorA$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*OnFrameWindowActivate)(IOleInPlaceActiveObject*,BOOL);
     * }
     */
    public interface OnFrameWindowActivate {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(OnFrameWindowActivate fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3685.const$4, fi, constants$65.const$2, scope);
        }
        static OnFrameWindowActivate ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)constants$800.const$4.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle OnFrameWindowActivate$VH() {
        return constants$3685.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*OnFrameWindowActivate)(IOleInPlaceActiveObject*,BOOL);
     * }
     */
    public static MemorySegment OnFrameWindowActivate$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3685.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*OnFrameWindowActivate)(IOleInPlaceActiveObject*,BOOL);
     * }
     */
    public static void OnFrameWindowActivate$set(MemorySegment seg, MemorySegment x) {
        constants$3685.const$5.set(seg, x);
    }
    public static MemorySegment OnFrameWindowActivate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3685.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void OnFrameWindowActivate$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3685.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static OnFrameWindowActivate OnFrameWindowActivate(MemorySegment segment, Arena scope) {
        return OnFrameWindowActivate.ofAddress(OnFrameWindowActivate$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*OnDocWindowActivate)(IOleInPlaceActiveObject*,BOOL);
     * }
     */
    public interface OnDocWindowActivate {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(OnDocWindowActivate fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3686.const$0, fi, constants$65.const$2, scope);
        }
        static OnDocWindowActivate ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)constants$800.const$4.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle OnDocWindowActivate$VH() {
        return constants$3686.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*OnDocWindowActivate)(IOleInPlaceActiveObject*,BOOL);
     * }
     */
    public static MemorySegment OnDocWindowActivate$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3686.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*OnDocWindowActivate)(IOleInPlaceActiveObject*,BOOL);
     * }
     */
    public static void OnDocWindowActivate$set(MemorySegment seg, MemorySegment x) {
        constants$3686.const$1.set(seg, x);
    }
    public static MemorySegment OnDocWindowActivate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3686.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void OnDocWindowActivate$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3686.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static OnDocWindowActivate OnDocWindowActivate(MemorySegment segment, Arena scope) {
        return OnDocWindowActivate.ofAddress(OnDocWindowActivate$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*ResizeBorder)(IOleInPlaceActiveObject*,LPCRECT,IOleInPlaceUIWindow*,BOOL);
     * }
     */
    public interface ResizeBorder {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3);
        static MemorySegment allocate(ResizeBorder fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3686.const$2, fi, constants$607.const$3, scope);
        }
        static ResizeBorder ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3) -> {
                try {
                    return (int)constants$2133.const$3.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle ResizeBorder$VH() {
        return constants$3686.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*ResizeBorder)(IOleInPlaceActiveObject*,LPCRECT,IOleInPlaceUIWindow*,BOOL);
     * }
     */
    public static MemorySegment ResizeBorder$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3686.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*ResizeBorder)(IOleInPlaceActiveObject*,LPCRECT,IOleInPlaceUIWindow*,BOOL);
     * }
     */
    public static void ResizeBorder$set(MemorySegment seg, MemorySegment x) {
        constants$3686.const$3.set(seg, x);
    }
    public static MemorySegment ResizeBorder$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3686.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void ResizeBorder$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3686.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static ResizeBorder ResizeBorder(MemorySegment segment, Arena scope) {
        return ResizeBorder.ofAddress(ResizeBorder$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*EnableModeless)(IOleInPlaceActiveObject*,BOOL);
     * }
     */
    public interface EnableModeless {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(EnableModeless fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3686.const$4, fi, constants$65.const$2, scope);
        }
        static EnableModeless ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)constants$800.const$4.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle EnableModeless$VH() {
        return constants$3686.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*EnableModeless)(IOleInPlaceActiveObject*,BOOL);
     * }
     */
    public static MemorySegment EnableModeless$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3686.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*EnableModeless)(IOleInPlaceActiveObject*,BOOL);
     * }
     */
    public static void EnableModeless$set(MemorySegment seg, MemorySegment x) {
        constants$3686.const$5.set(seg, x);
    }
    public static MemorySegment EnableModeless$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3686.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void EnableModeless$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3686.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static EnableModeless EnableModeless(MemorySegment segment, Arena scope) {
        return EnableModeless.ofAddress(EnableModeless$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



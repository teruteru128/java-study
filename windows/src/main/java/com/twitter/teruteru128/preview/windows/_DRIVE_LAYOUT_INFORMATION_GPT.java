// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _DRIVE_LAYOUT_INFORMATION_GPT {
 *     GUID DiskId;
 *     LARGE_INTEGER StartingUsableOffset;
 *     LARGE_INTEGER UsableLength;
 *     DWORD MaxPartitionCount;
 * };
 * }
 */
public class _DRIVE_LAYOUT_INFORMATION_GPT {

    public static MemoryLayout $LAYOUT() {
        return constants$2541.const$5;
    }
    public static MemorySegment DiskId$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    public static MemorySegment StartingUsableOffset$slice(MemorySegment seg) {
        return seg.asSlice(16, 8);
    }
    public static MemorySegment UsableLength$slice(MemorySegment seg) {
        return seg.asSlice(24, 8);
    }
    public static VarHandle MaxPartitionCount$VH() {
        return constants$2542.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD MaxPartitionCount;
     * }
     */
    public static int MaxPartitionCount$get(MemorySegment seg) {
        return (int)constants$2542.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD MaxPartitionCount;
     * }
     */
    public static void MaxPartitionCount$set(MemorySegment seg, int x) {
        constants$2542.const$0.set(seg, x);
    }
    public static int MaxPartitionCount$get(MemorySegment seg, long index) {
        return (int)constants$2542.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void MaxPartitionCount$set(MemorySegment seg, long index, int x) {
        constants$2542.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



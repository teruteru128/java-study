// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IXMLDOMDocumentVtbl {
 *     HRESULT (*QueryInterface)(IXMLDOMDocument*,const IID*,void**);
 *     ULONG (*AddRef)(IXMLDOMDocument*);
 *     ULONG (*Release)(IXMLDOMDocument*);
 *     HRESULT (*GetTypeInfoCount)(IXMLDOMDocument*,UINT*);
 *     HRESULT (*GetTypeInfo)(IXMLDOMDocument*,UINT,LCID,ITypeInfo**);
 *     HRESULT (*GetIDsOfNames)(IXMLDOMDocument*,const IID*,LPOLESTR*,UINT,LCID,DISPID*);
 *     HRESULT (*Invoke)(IXMLDOMDocument*,DISPID,const IID*,LCID,WORD,DISPPARAMS*,VARIANT*,EXCEPINFO*,UINT*);
 *     HRESULT (*get_nodeName)(IXMLDOMDocument*,BSTR*);
 *     HRESULT (*get_nodeValue)(IXMLDOMDocument*,VARIANT*);
 *     HRESULT (*put_nodeValue)(IXMLDOMDocument*,VARIANT);
 *     HRESULT (*get_nodeType)(IXMLDOMDocument*,DOMNodeType*);
 *     HRESULT (*get_parentNode)(IXMLDOMDocument*,IXMLDOMNode**);
 *     HRESULT (*get_childNodes)(IXMLDOMDocument*,IXMLDOMNodeList**);
 *     HRESULT (*get_firstChild)(IXMLDOMDocument*,IXMLDOMNode**);
 *     HRESULT (*get_lastChild)(IXMLDOMDocument*,IXMLDOMNode**);
 *     HRESULT (*get_previousSibling)(IXMLDOMDocument*,IXMLDOMNode**);
 *     HRESULT (*get_nextSibling)(IXMLDOMDocument*,IXMLDOMNode**);
 *     HRESULT (*get_attributes)(IXMLDOMDocument*,IXMLDOMNamedNodeMap**);
 *     HRESULT (*insertBefore)(IXMLDOMDocument*,IXMLDOMNode*,VARIANT,IXMLDOMNode**);
 *     HRESULT (*replaceChild)(IXMLDOMDocument*,IXMLDOMNode*,IXMLDOMNode*,IXMLDOMNode**);
 *     HRESULT (*removeChild)(IXMLDOMDocument*,IXMLDOMNode*,IXMLDOMNode**);
 *     HRESULT (*appendChild)(IXMLDOMDocument*,IXMLDOMNode*,IXMLDOMNode**);
 *     HRESULT (*hasChildNodes)(IXMLDOMDocument*,VARIANT_BOOL*);
 *     HRESULT (*get_ownerDocument)(IXMLDOMDocument*,IXMLDOMDocument**);
 *     HRESULT (*cloneNode)(IXMLDOMDocument*,VARIANT_BOOL,IXMLDOMNode**);
 *     HRESULT (*get_nodeTypeString)(IXMLDOMDocument*,BSTR*);
 *     HRESULT (*get_text)(IXMLDOMDocument*,BSTR*);
 *     HRESULT (*put_text)(IXMLDOMDocument*,BSTR);
 *     HRESULT (*get_specified)(IXMLDOMDocument*,VARIANT_BOOL*);
 *     HRESULT (*get_definition)(IXMLDOMDocument*,IXMLDOMNode**);
 *     HRESULT (*get_nodeTypedValue)(IXMLDOMDocument*,VARIANT*);
 *     HRESULT (*put_nodeTypedValue)(IXMLDOMDocument*,VARIANT);
 *     HRESULT (*get_dataType)(IXMLDOMDocument*,VARIANT*);
 *     HRESULT (*put_dataType)(IXMLDOMDocument*,BSTR);
 *     HRESULT (*get_xml)(IXMLDOMDocument*,BSTR*);
 *     HRESULT (*transformNode)(IXMLDOMDocument*,IXMLDOMNode*,BSTR*);
 *     HRESULT (*selectNodes)(IXMLDOMDocument*,BSTR,IXMLDOMNodeList**);
 *     HRESULT (*selectSingleNode)(IXMLDOMDocument*,BSTR,IXMLDOMNode**);
 *     HRESULT (*get_parsed)(IXMLDOMDocument*,VARIANT_BOOL*);
 *     HRESULT (*get_namespaceURI)(IXMLDOMDocument*,BSTR*);
 *     HRESULT (*get_prefix)(IXMLDOMDocument*,BSTR*);
 *     HRESULT (*get_baseName)(IXMLDOMDocument*,BSTR*);
 *     HRESULT (*transformNodeToObject)(IXMLDOMDocument*,IXMLDOMNode*,VARIANT);
 *     HRESULT (*get_doctype)(IXMLDOMDocument*,IXMLDOMDocumentType**);
 *     HRESULT (*get_implementation)(IXMLDOMDocument*,IXMLDOMImplementation**);
 *     HRESULT (*get_documentElement)(IXMLDOMDocument*,IXMLDOMElement**);
 *     HRESULT (*putref_documentElement)(IXMLDOMDocument*,IXMLDOMElement*);
 *     HRESULT (*createElement)(IXMLDOMDocument*,BSTR,IXMLDOMElement**);
 *     HRESULT (*createDocumentFragment)(IXMLDOMDocument*,IXMLDOMDocumentFragment**);
 *     HRESULT (*createTextNode)(IXMLDOMDocument*,BSTR,IXMLDOMText**);
 *     HRESULT (*createComment)(IXMLDOMDocument*,BSTR,IXMLDOMComment**);
 *     HRESULT (*createCDATASection)(IXMLDOMDocument*,BSTR,IXMLDOMCDATASection**);
 *     HRESULT (*createProcessingInstruction)(IXMLDOMDocument*,BSTR,BSTR,IXMLDOMProcessingInstruction**);
 *     HRESULT (*createAttribute)(IXMLDOMDocument*,BSTR,IXMLDOMAttribute**);
 *     HRESULT (*createEntityReference)(IXMLDOMDocument*,BSTR,IXMLDOMEntityReference**);
 *     HRESULT (*getElementsByTagName)(IXMLDOMDocument*,BSTR,IXMLDOMNodeList**);
 *     HRESULT (*createNode)(IXMLDOMDocument*,VARIANT,BSTR,BSTR,IXMLDOMNode**);
 *     HRESULT (*nodeFromID)(IXMLDOMDocument*,BSTR,IXMLDOMNode**);
 *     HRESULT (*load)(IXMLDOMDocument*,VARIANT,VARIANT_BOOL*);
 *     HRESULT (*get_readyState)(IXMLDOMDocument*,long*);
 *     HRESULT (*get_parseError)(IXMLDOMDocument*,IXMLDOMParseError**);
 *     HRESULT (*get_url)(IXMLDOMDocument*,BSTR*);
 *     HRESULT (*get_async)(IXMLDOMDocument*,VARIANT_BOOL*);
 *     HRESULT (*put_async)(IXMLDOMDocument*,VARIANT_BOOL);
 *     HRESULT (*abort)(IXMLDOMDocument*);
 *     HRESULT (*loadXML)(IXMLDOMDocument*,BSTR,VARIANT_BOOL*);
 *     HRESULT (*save)(IXMLDOMDocument*,VARIANT);
 *     HRESULT (*get_validateOnParse)(IXMLDOMDocument*,VARIANT_BOOL*);
 *     HRESULT (*put_validateOnParse)(IXMLDOMDocument*,VARIANT_BOOL);
 *     HRESULT (*get_resolveExternals)(IXMLDOMDocument*,VARIANT_BOOL*);
 *     HRESULT (*put_resolveExternals)(IXMLDOMDocument*,VARIANT_BOOL);
 *     HRESULT (*get_preserveWhiteSpace)(IXMLDOMDocument*,VARIANT_BOOL*);
 *     HRESULT (*put_preserveWhiteSpace)(IXMLDOMDocument*,VARIANT_BOOL);
 *     HRESULT (*put_onreadystatechange)(IXMLDOMDocument*,VARIANT);
 *     HRESULT (*put_ondataavailable)(IXMLDOMDocument*,VARIANT);
 *     HRESULT (*put_ontransformnode)(IXMLDOMDocument*,VARIANT);
 * };
 * }
 */
public class IXMLDOMDocumentVtbl {

    public static MemoryLayout $LAYOUT() {
        return constants$3780.const$1;
    }
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IXMLDOMDocument*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3780.const$2, fi, constants$37.const$3, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle QueryInterface$VH() {
        return constants$3780.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IXMLDOMDocument*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3780.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IXMLDOMDocument*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        constants$3780.const$3.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3780.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3780.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, Arena scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*AddRef)(IXMLDOMDocument*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3780.const$4, fi, constants$18.const$5, scope);
        }
        static AddRef ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle AddRef$VH() {
        return constants$3780.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IXMLDOMDocument*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3780.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IXMLDOMDocument*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        constants$3780.const$5.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3780.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3780.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, Arena scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*Release)(IXMLDOMDocument*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3781.const$0, fi, constants$18.const$5, scope);
        }
        static Release ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Release$VH() {
        return constants$3781.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IXMLDOMDocument*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3781.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IXMLDOMDocument*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        constants$3781.const$1.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3781.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3781.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, Arena scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetTypeInfoCount)(IXMLDOMDocument*,UINT*);
     * }
     */
    public interface GetTypeInfoCount {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetTypeInfoCount fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3781.const$2, fi, constants$34.const$0, scope);
        }
        static GetTypeInfoCount ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetTypeInfoCount$VH() {
        return constants$3781.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetTypeInfoCount)(IXMLDOMDocument*,UINT*);
     * }
     */
    public static MemorySegment GetTypeInfoCount$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3781.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetTypeInfoCount)(IXMLDOMDocument*,UINT*);
     * }
     */
    public static void GetTypeInfoCount$set(MemorySegment seg, MemorySegment x) {
        constants$3781.const$3.set(seg, x);
    }
    public static MemorySegment GetTypeInfoCount$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3781.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeInfoCount$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3781.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeInfoCount GetTypeInfoCount(MemorySegment segment, Arena scope) {
        return GetTypeInfoCount.ofAddress(GetTypeInfoCount$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetTypeInfo)(IXMLDOMDocument*,UINT,LCID,ITypeInfo**);
     * }
     */
    public interface GetTypeInfo {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(GetTypeInfo fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3781.const$4, fi, constants$644.const$5, scope);
        }
        static GetTypeInfo ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)constants$2131.const$5.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetTypeInfo$VH() {
        return constants$3781.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetTypeInfo)(IXMLDOMDocument*,UINT,LCID,ITypeInfo**);
     * }
     */
    public static MemorySegment GetTypeInfo$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3781.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetTypeInfo)(IXMLDOMDocument*,UINT,LCID,ITypeInfo**);
     * }
     */
    public static void GetTypeInfo$set(MemorySegment seg, MemorySegment x) {
        constants$3781.const$5.set(seg, x);
    }
    public static MemorySegment GetTypeInfo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3781.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeInfo$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3781.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeInfo GetTypeInfo(MemorySegment segment, Arena scope) {
        return GetTypeInfo.ofAddress(GetTypeInfo$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetIDsOfNames)(IXMLDOMDocument*,const IID*,LPOLESTR*,UINT,LCID,DISPID*);
     * }
     */
    public interface GetIDsOfNames {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3, int _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(GetIDsOfNames fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3782.const$0, fi, constants$836.const$2, scope);
        }
        static GetIDsOfNames ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3, int __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    return (int)constants$3267.const$1.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetIDsOfNames$VH() {
        return constants$3782.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetIDsOfNames)(IXMLDOMDocument*,const IID*,LPOLESTR*,UINT,LCID,DISPID*);
     * }
     */
    public static MemorySegment GetIDsOfNames$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3782.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetIDsOfNames)(IXMLDOMDocument*,const IID*,LPOLESTR*,UINT,LCID,DISPID*);
     * }
     */
    public static void GetIDsOfNames$set(MemorySegment seg, MemorySegment x) {
        constants$3782.const$1.set(seg, x);
    }
    public static MemorySegment GetIDsOfNames$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3782.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void GetIDsOfNames$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3782.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetIDsOfNames GetIDsOfNames(MemorySegment segment, Arena scope) {
        return GetIDsOfNames.ofAddress(GetIDsOfNames$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*Invoke)(IXMLDOMDocument*,DISPID,const IID*,LCID,WORD,DISPPARAMS*,VARIANT*,EXCEPINFO*,UINT*);
     * }
     */
    public interface Invoke {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, int _x3, short _x4, java.lang.foreign.MemorySegment _x5, java.lang.foreign.MemorySegment _x6, java.lang.foreign.MemorySegment _x7, java.lang.foreign.MemorySegment _x8);
        static MemorySegment allocate(Invoke fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3782.const$2, fi, constants$3484.const$0, scope);
        }
        static Invoke ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, int __x3, short __x4, java.lang.foreign.MemorySegment __x5, java.lang.foreign.MemorySegment __x6, java.lang.foreign.MemorySegment __x7, java.lang.foreign.MemorySegment __x8) -> {
                try {
                    return (int)constants$3484.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7, __x8);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Invoke$VH() {
        return constants$3782.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Invoke)(IXMLDOMDocument*,DISPID,const IID*,LCID,WORD,DISPPARAMS*,VARIANT*,EXCEPINFO*,UINT*);
     * }
     */
    public static MemorySegment Invoke$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3782.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Invoke)(IXMLDOMDocument*,DISPID,const IID*,LCID,WORD,DISPPARAMS*,VARIANT*,EXCEPINFO*,UINT*);
     * }
     */
    public static void Invoke$set(MemorySegment seg, MemorySegment x) {
        constants$3782.const$3.set(seg, x);
    }
    public static MemorySegment Invoke$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3782.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void Invoke$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3782.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static Invoke Invoke(MemorySegment segment, Arena scope) {
        return Invoke.ofAddress(Invoke$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_nodeName)(IXMLDOMDocument*,BSTR*);
     * }
     */
    public interface get_nodeName {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_nodeName fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3782.const$4, fi, constants$34.const$0, scope);
        }
        static get_nodeName ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_nodeName$VH() {
        return constants$3782.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_nodeName)(IXMLDOMDocument*,BSTR*);
     * }
     */
    public static MemorySegment get_nodeName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3782.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_nodeName)(IXMLDOMDocument*,BSTR*);
     * }
     */
    public static void get_nodeName$set(MemorySegment seg, MemorySegment x) {
        constants$3782.const$5.set(seg, x);
    }
    public static MemorySegment get_nodeName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3782.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_nodeName$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3782.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_nodeName get_nodeName(MemorySegment segment, Arena scope) {
        return get_nodeName.ofAddress(get_nodeName$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_nodeValue)(IXMLDOMDocument*,VARIANT*);
     * }
     */
    public interface get_nodeValue {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_nodeValue fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3783.const$0, fi, constants$34.const$0, scope);
        }
        static get_nodeValue ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_nodeValue$VH() {
        return constants$3783.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_nodeValue)(IXMLDOMDocument*,VARIANT*);
     * }
     */
    public static MemorySegment get_nodeValue$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3783.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_nodeValue)(IXMLDOMDocument*,VARIANT*);
     * }
     */
    public static void get_nodeValue$set(MemorySegment seg, MemorySegment x) {
        constants$3783.const$1.set(seg, x);
    }
    public static MemorySegment get_nodeValue$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3783.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_nodeValue$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3783.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_nodeValue get_nodeValue(MemorySegment segment, Arena scope) {
        return get_nodeValue.ofAddress(get_nodeValue$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*put_nodeValue)(IXMLDOMDocument*,VARIANT);
     * }
     */
    public interface put_nodeValue {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(put_nodeValue fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3783.const$2, fi, constants$3752.const$1, scope);
        }
        static put_nodeValue ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$3752.const$3.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle put_nodeValue$VH() {
        return constants$3783.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*put_nodeValue)(IXMLDOMDocument*,VARIANT);
     * }
     */
    public static MemorySegment put_nodeValue$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3783.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*put_nodeValue)(IXMLDOMDocument*,VARIANT);
     * }
     */
    public static void put_nodeValue$set(MemorySegment seg, MemorySegment x) {
        constants$3783.const$3.set(seg, x);
    }
    public static MemorySegment put_nodeValue$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3783.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void put_nodeValue$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3783.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static put_nodeValue put_nodeValue(MemorySegment segment, Arena scope) {
        return put_nodeValue.ofAddress(put_nodeValue$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_nodeType)(IXMLDOMDocument*,DOMNodeType*);
     * }
     */
    public interface get_nodeType {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_nodeType fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3783.const$4, fi, constants$34.const$0, scope);
        }
        static get_nodeType ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_nodeType$VH() {
        return constants$3783.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_nodeType)(IXMLDOMDocument*,DOMNodeType*);
     * }
     */
    public static MemorySegment get_nodeType$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3783.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_nodeType)(IXMLDOMDocument*,DOMNodeType*);
     * }
     */
    public static void get_nodeType$set(MemorySegment seg, MemorySegment x) {
        constants$3783.const$5.set(seg, x);
    }
    public static MemorySegment get_nodeType$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3783.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_nodeType$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3783.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_nodeType get_nodeType(MemorySegment segment, Arena scope) {
        return get_nodeType.ofAddress(get_nodeType$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_parentNode)(IXMLDOMDocument*,IXMLDOMNode**);
     * }
     */
    public interface get_parentNode {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_parentNode fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3784.const$0, fi, constants$34.const$0, scope);
        }
        static get_parentNode ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_parentNode$VH() {
        return constants$3784.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_parentNode)(IXMLDOMDocument*,IXMLDOMNode**);
     * }
     */
    public static MemorySegment get_parentNode$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3784.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_parentNode)(IXMLDOMDocument*,IXMLDOMNode**);
     * }
     */
    public static void get_parentNode$set(MemorySegment seg, MemorySegment x) {
        constants$3784.const$1.set(seg, x);
    }
    public static MemorySegment get_parentNode$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3784.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_parentNode$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3784.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_parentNode get_parentNode(MemorySegment segment, Arena scope) {
        return get_parentNode.ofAddress(get_parentNode$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_childNodes)(IXMLDOMDocument*,IXMLDOMNodeList**);
     * }
     */
    public interface get_childNodes {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_childNodes fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3784.const$2, fi, constants$34.const$0, scope);
        }
        static get_childNodes ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_childNodes$VH() {
        return constants$3784.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_childNodes)(IXMLDOMDocument*,IXMLDOMNodeList**);
     * }
     */
    public static MemorySegment get_childNodes$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3784.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_childNodes)(IXMLDOMDocument*,IXMLDOMNodeList**);
     * }
     */
    public static void get_childNodes$set(MemorySegment seg, MemorySegment x) {
        constants$3784.const$3.set(seg, x);
    }
    public static MemorySegment get_childNodes$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3784.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void get_childNodes$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3784.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_childNodes get_childNodes(MemorySegment segment, Arena scope) {
        return get_childNodes.ofAddress(get_childNodes$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_firstChild)(IXMLDOMDocument*,IXMLDOMNode**);
     * }
     */
    public interface get_firstChild {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_firstChild fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3784.const$4, fi, constants$34.const$0, scope);
        }
        static get_firstChild ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_firstChild$VH() {
        return constants$3784.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_firstChild)(IXMLDOMDocument*,IXMLDOMNode**);
     * }
     */
    public static MemorySegment get_firstChild$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3784.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_firstChild)(IXMLDOMDocument*,IXMLDOMNode**);
     * }
     */
    public static void get_firstChild$set(MemorySegment seg, MemorySegment x) {
        constants$3784.const$5.set(seg, x);
    }
    public static MemorySegment get_firstChild$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3784.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_firstChild$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3784.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_firstChild get_firstChild(MemorySegment segment, Arena scope) {
        return get_firstChild.ofAddress(get_firstChild$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_lastChild)(IXMLDOMDocument*,IXMLDOMNode**);
     * }
     */
    public interface get_lastChild {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_lastChild fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3785.const$0, fi, constants$34.const$0, scope);
        }
        static get_lastChild ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_lastChild$VH() {
        return constants$3785.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_lastChild)(IXMLDOMDocument*,IXMLDOMNode**);
     * }
     */
    public static MemorySegment get_lastChild$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3785.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_lastChild)(IXMLDOMDocument*,IXMLDOMNode**);
     * }
     */
    public static void get_lastChild$set(MemorySegment seg, MemorySegment x) {
        constants$3785.const$1.set(seg, x);
    }
    public static MemorySegment get_lastChild$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3785.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_lastChild$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3785.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_lastChild get_lastChild(MemorySegment segment, Arena scope) {
        return get_lastChild.ofAddress(get_lastChild$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_previousSibling)(IXMLDOMDocument*,IXMLDOMNode**);
     * }
     */
    public interface get_previousSibling {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_previousSibling fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3785.const$2, fi, constants$34.const$0, scope);
        }
        static get_previousSibling ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_previousSibling$VH() {
        return constants$3785.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_previousSibling)(IXMLDOMDocument*,IXMLDOMNode**);
     * }
     */
    public static MemorySegment get_previousSibling$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3785.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_previousSibling)(IXMLDOMDocument*,IXMLDOMNode**);
     * }
     */
    public static void get_previousSibling$set(MemorySegment seg, MemorySegment x) {
        constants$3785.const$3.set(seg, x);
    }
    public static MemorySegment get_previousSibling$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3785.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void get_previousSibling$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3785.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_previousSibling get_previousSibling(MemorySegment segment, Arena scope) {
        return get_previousSibling.ofAddress(get_previousSibling$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_nextSibling)(IXMLDOMDocument*,IXMLDOMNode**);
     * }
     */
    public interface get_nextSibling {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_nextSibling fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3785.const$4, fi, constants$34.const$0, scope);
        }
        static get_nextSibling ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_nextSibling$VH() {
        return constants$3785.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_nextSibling)(IXMLDOMDocument*,IXMLDOMNode**);
     * }
     */
    public static MemorySegment get_nextSibling$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3785.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_nextSibling)(IXMLDOMDocument*,IXMLDOMNode**);
     * }
     */
    public static void get_nextSibling$set(MemorySegment seg, MemorySegment x) {
        constants$3785.const$5.set(seg, x);
    }
    public static MemorySegment get_nextSibling$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3785.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_nextSibling$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3785.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_nextSibling get_nextSibling(MemorySegment segment, Arena scope) {
        return get_nextSibling.ofAddress(get_nextSibling$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_attributes)(IXMLDOMDocument*,IXMLDOMNamedNodeMap**);
     * }
     */
    public interface get_attributes {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_attributes fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3786.const$0, fi, constants$34.const$0, scope);
        }
        static get_attributes ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_attributes$VH() {
        return constants$3786.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_attributes)(IXMLDOMDocument*,IXMLDOMNamedNodeMap**);
     * }
     */
    public static MemorySegment get_attributes$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3786.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_attributes)(IXMLDOMDocument*,IXMLDOMNamedNodeMap**);
     * }
     */
    public static void get_attributes$set(MemorySegment seg, MemorySegment x) {
        constants$3786.const$1.set(seg, x);
    }
    public static MemorySegment get_attributes$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3786.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_attributes$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3786.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_attributes get_attributes(MemorySegment segment, Arena scope) {
        return get_attributes.ofAddress(get_attributes$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*insertBefore)(IXMLDOMDocument*,IXMLDOMNode*,VARIANT,IXMLDOMNode**);
     * }
     */
    public interface insertBefore {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(insertBefore fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3786.const$2, fi, constants$3755.const$3, scope);
        }
        static insertBefore ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)constants$3755.const$5.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle insertBefore$VH() {
        return constants$3786.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*insertBefore)(IXMLDOMDocument*,IXMLDOMNode*,VARIANT,IXMLDOMNode**);
     * }
     */
    public static MemorySegment insertBefore$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3786.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*insertBefore)(IXMLDOMDocument*,IXMLDOMNode*,VARIANT,IXMLDOMNode**);
     * }
     */
    public static void insertBefore$set(MemorySegment seg, MemorySegment x) {
        constants$3786.const$3.set(seg, x);
    }
    public static MemorySegment insertBefore$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3786.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void insertBefore$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3786.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static insertBefore insertBefore(MemorySegment segment, Arena scope) {
        return insertBefore.ofAddress(insertBefore$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*replaceChild)(IXMLDOMDocument*,IXMLDOMNode*,IXMLDOMNode*,IXMLDOMNode**);
     * }
     */
    public interface replaceChild {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(replaceChild fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3786.const$4, fi, constants$1.const$3, scope);
        }
        static replaceChild ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)constants$55.const$1.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle replaceChild$VH() {
        return constants$3786.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*replaceChild)(IXMLDOMDocument*,IXMLDOMNode*,IXMLDOMNode*,IXMLDOMNode**);
     * }
     */
    public static MemorySegment replaceChild$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3786.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*replaceChild)(IXMLDOMDocument*,IXMLDOMNode*,IXMLDOMNode*,IXMLDOMNode**);
     * }
     */
    public static void replaceChild$set(MemorySegment seg, MemorySegment x) {
        constants$3786.const$5.set(seg, x);
    }
    public static MemorySegment replaceChild$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3786.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void replaceChild$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3786.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static replaceChild replaceChild(MemorySegment segment, Arena scope) {
        return replaceChild.ofAddress(replaceChild$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*removeChild)(IXMLDOMDocument*,IXMLDOMNode*,IXMLDOMNode**);
     * }
     */
    public interface removeChild {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(removeChild fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3787.const$0, fi, constants$37.const$3, scope);
        }
        static removeChild ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle removeChild$VH() {
        return constants$3787.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*removeChild)(IXMLDOMDocument*,IXMLDOMNode*,IXMLDOMNode**);
     * }
     */
    public static MemorySegment removeChild$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3787.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*removeChild)(IXMLDOMDocument*,IXMLDOMNode*,IXMLDOMNode**);
     * }
     */
    public static void removeChild$set(MemorySegment seg, MemorySegment x) {
        constants$3787.const$1.set(seg, x);
    }
    public static MemorySegment removeChild$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3787.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void removeChild$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3787.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static removeChild removeChild(MemorySegment segment, Arena scope) {
        return removeChild.ofAddress(removeChild$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*appendChild)(IXMLDOMDocument*,IXMLDOMNode*,IXMLDOMNode**);
     * }
     */
    public interface appendChild {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(appendChild fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3787.const$2, fi, constants$37.const$3, scope);
        }
        static appendChild ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle appendChild$VH() {
        return constants$3787.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*appendChild)(IXMLDOMDocument*,IXMLDOMNode*,IXMLDOMNode**);
     * }
     */
    public static MemorySegment appendChild$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3787.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*appendChild)(IXMLDOMDocument*,IXMLDOMNode*,IXMLDOMNode**);
     * }
     */
    public static void appendChild$set(MemorySegment seg, MemorySegment x) {
        constants$3787.const$3.set(seg, x);
    }
    public static MemorySegment appendChild$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3787.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void appendChild$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3787.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static appendChild appendChild(MemorySegment segment, Arena scope) {
        return appendChild.ofAddress(appendChild$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*hasChildNodes)(IXMLDOMDocument*,VARIANT_BOOL*);
     * }
     */
    public interface hasChildNodes {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(hasChildNodes fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3787.const$4, fi, constants$34.const$0, scope);
        }
        static hasChildNodes ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle hasChildNodes$VH() {
        return constants$3787.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*hasChildNodes)(IXMLDOMDocument*,VARIANT_BOOL*);
     * }
     */
    public static MemorySegment hasChildNodes$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3787.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*hasChildNodes)(IXMLDOMDocument*,VARIANT_BOOL*);
     * }
     */
    public static void hasChildNodes$set(MemorySegment seg, MemorySegment x) {
        constants$3787.const$5.set(seg, x);
    }
    public static MemorySegment hasChildNodes$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3787.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void hasChildNodes$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3787.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static hasChildNodes hasChildNodes(MemorySegment segment, Arena scope) {
        return hasChildNodes.ofAddress(hasChildNodes$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_ownerDocument)(IXMLDOMDocument*,IXMLDOMDocument**);
     * }
     */
    public interface get_ownerDocument {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_ownerDocument fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3788.const$0, fi, constants$34.const$0, scope);
        }
        static get_ownerDocument ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_ownerDocument$VH() {
        return constants$3788.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_ownerDocument)(IXMLDOMDocument*,IXMLDOMDocument**);
     * }
     */
    public static MemorySegment get_ownerDocument$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3788.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_ownerDocument)(IXMLDOMDocument*,IXMLDOMDocument**);
     * }
     */
    public static void get_ownerDocument$set(MemorySegment seg, MemorySegment x) {
        constants$3788.const$1.set(seg, x);
    }
    public static MemorySegment get_ownerDocument$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3788.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_ownerDocument$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3788.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_ownerDocument get_ownerDocument(MemorySegment segment, Arena scope) {
        return get_ownerDocument.ofAddress(get_ownerDocument$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*cloneNode)(IXMLDOMDocument*,VARIANT_BOOL,IXMLDOMNode**);
     * }
     */
    public interface cloneNode {

        int apply(java.lang.foreign.MemorySegment _x0, short _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(cloneNode fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3788.const$2, fi, constants$647.const$0, scope);
        }
        static cloneNode ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, short __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$3758.const$0.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle cloneNode$VH() {
        return constants$3788.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*cloneNode)(IXMLDOMDocument*,VARIANT_BOOL,IXMLDOMNode**);
     * }
     */
    public static MemorySegment cloneNode$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3788.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*cloneNode)(IXMLDOMDocument*,VARIANT_BOOL,IXMLDOMNode**);
     * }
     */
    public static void cloneNode$set(MemorySegment seg, MemorySegment x) {
        constants$3788.const$3.set(seg, x);
    }
    public static MemorySegment cloneNode$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3788.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void cloneNode$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3788.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static cloneNode cloneNode(MemorySegment segment, Arena scope) {
        return cloneNode.ofAddress(cloneNode$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_nodeTypeString)(IXMLDOMDocument*,BSTR*);
     * }
     */
    public interface get_nodeTypeString {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_nodeTypeString fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3788.const$4, fi, constants$34.const$0, scope);
        }
        static get_nodeTypeString ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_nodeTypeString$VH() {
        return constants$3788.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_nodeTypeString)(IXMLDOMDocument*,BSTR*);
     * }
     */
    public static MemorySegment get_nodeTypeString$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3788.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_nodeTypeString)(IXMLDOMDocument*,BSTR*);
     * }
     */
    public static void get_nodeTypeString$set(MemorySegment seg, MemorySegment x) {
        constants$3788.const$5.set(seg, x);
    }
    public static MemorySegment get_nodeTypeString$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3788.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_nodeTypeString$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3788.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_nodeTypeString get_nodeTypeString(MemorySegment segment, Arena scope) {
        return get_nodeTypeString.ofAddress(get_nodeTypeString$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_text)(IXMLDOMDocument*,BSTR*);
     * }
     */
    public interface get_text {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_text fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3789.const$0, fi, constants$34.const$0, scope);
        }
        static get_text ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_text$VH() {
        return constants$3789.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_text)(IXMLDOMDocument*,BSTR*);
     * }
     */
    public static MemorySegment get_text$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3789.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_text)(IXMLDOMDocument*,BSTR*);
     * }
     */
    public static void get_text$set(MemorySegment seg, MemorySegment x) {
        constants$3789.const$1.set(seg, x);
    }
    public static MemorySegment get_text$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3789.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_text$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3789.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_text get_text(MemorySegment segment, Arena scope) {
        return get_text.ofAddress(get_text$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*put_text)(IXMLDOMDocument*,BSTR);
     * }
     */
    public interface put_text {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(put_text fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3789.const$2, fi, constants$34.const$0, scope);
        }
        static put_text ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle put_text$VH() {
        return constants$3789.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*put_text)(IXMLDOMDocument*,BSTR);
     * }
     */
    public static MemorySegment put_text$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3789.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*put_text)(IXMLDOMDocument*,BSTR);
     * }
     */
    public static void put_text$set(MemorySegment seg, MemorySegment x) {
        constants$3789.const$3.set(seg, x);
    }
    public static MemorySegment put_text$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3789.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void put_text$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3789.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static put_text put_text(MemorySegment segment, Arena scope) {
        return put_text.ofAddress(put_text$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_specified)(IXMLDOMDocument*,VARIANT_BOOL*);
     * }
     */
    public interface get_specified {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_specified fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3789.const$4, fi, constants$34.const$0, scope);
        }
        static get_specified ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_specified$VH() {
        return constants$3789.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_specified)(IXMLDOMDocument*,VARIANT_BOOL*);
     * }
     */
    public static MemorySegment get_specified$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3789.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_specified)(IXMLDOMDocument*,VARIANT_BOOL*);
     * }
     */
    public static void get_specified$set(MemorySegment seg, MemorySegment x) {
        constants$3789.const$5.set(seg, x);
    }
    public static MemorySegment get_specified$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3789.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_specified$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3789.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_specified get_specified(MemorySegment segment, Arena scope) {
        return get_specified.ofAddress(get_specified$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_definition)(IXMLDOMDocument*,IXMLDOMNode**);
     * }
     */
    public interface get_definition {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_definition fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3790.const$0, fi, constants$34.const$0, scope);
        }
        static get_definition ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_definition$VH() {
        return constants$3790.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_definition)(IXMLDOMDocument*,IXMLDOMNode**);
     * }
     */
    public static MemorySegment get_definition$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3790.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_definition)(IXMLDOMDocument*,IXMLDOMNode**);
     * }
     */
    public static void get_definition$set(MemorySegment seg, MemorySegment x) {
        constants$3790.const$1.set(seg, x);
    }
    public static MemorySegment get_definition$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3790.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_definition$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3790.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_definition get_definition(MemorySegment segment, Arena scope) {
        return get_definition.ofAddress(get_definition$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_nodeTypedValue)(IXMLDOMDocument*,VARIANT*);
     * }
     */
    public interface get_nodeTypedValue {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_nodeTypedValue fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3790.const$2, fi, constants$34.const$0, scope);
        }
        static get_nodeTypedValue ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_nodeTypedValue$VH() {
        return constants$3790.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_nodeTypedValue)(IXMLDOMDocument*,VARIANT*);
     * }
     */
    public static MemorySegment get_nodeTypedValue$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3790.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_nodeTypedValue)(IXMLDOMDocument*,VARIANT*);
     * }
     */
    public static void get_nodeTypedValue$set(MemorySegment seg, MemorySegment x) {
        constants$3790.const$3.set(seg, x);
    }
    public static MemorySegment get_nodeTypedValue$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3790.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void get_nodeTypedValue$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3790.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_nodeTypedValue get_nodeTypedValue(MemorySegment segment, Arena scope) {
        return get_nodeTypedValue.ofAddress(get_nodeTypedValue$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*put_nodeTypedValue)(IXMLDOMDocument*,VARIANT);
     * }
     */
    public interface put_nodeTypedValue {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(put_nodeTypedValue fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3790.const$4, fi, constants$3752.const$1, scope);
        }
        static put_nodeTypedValue ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$3752.const$3.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle put_nodeTypedValue$VH() {
        return constants$3790.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*put_nodeTypedValue)(IXMLDOMDocument*,VARIANT);
     * }
     */
    public static MemorySegment put_nodeTypedValue$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3790.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*put_nodeTypedValue)(IXMLDOMDocument*,VARIANT);
     * }
     */
    public static void put_nodeTypedValue$set(MemorySegment seg, MemorySegment x) {
        constants$3790.const$5.set(seg, x);
    }
    public static MemorySegment put_nodeTypedValue$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3790.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void put_nodeTypedValue$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3790.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static put_nodeTypedValue put_nodeTypedValue(MemorySegment segment, Arena scope) {
        return put_nodeTypedValue.ofAddress(put_nodeTypedValue$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_dataType)(IXMLDOMDocument*,VARIANT*);
     * }
     */
    public interface get_dataType {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_dataType fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3791.const$0, fi, constants$34.const$0, scope);
        }
        static get_dataType ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_dataType$VH() {
        return constants$3791.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_dataType)(IXMLDOMDocument*,VARIANT*);
     * }
     */
    public static MemorySegment get_dataType$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3791.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_dataType)(IXMLDOMDocument*,VARIANT*);
     * }
     */
    public static void get_dataType$set(MemorySegment seg, MemorySegment x) {
        constants$3791.const$1.set(seg, x);
    }
    public static MemorySegment get_dataType$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3791.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_dataType$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3791.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_dataType get_dataType(MemorySegment segment, Arena scope) {
        return get_dataType.ofAddress(get_dataType$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*put_dataType)(IXMLDOMDocument*,BSTR);
     * }
     */
    public interface put_dataType {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(put_dataType fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3791.const$2, fi, constants$34.const$0, scope);
        }
        static put_dataType ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle put_dataType$VH() {
        return constants$3791.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*put_dataType)(IXMLDOMDocument*,BSTR);
     * }
     */
    public static MemorySegment put_dataType$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3791.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*put_dataType)(IXMLDOMDocument*,BSTR);
     * }
     */
    public static void put_dataType$set(MemorySegment seg, MemorySegment x) {
        constants$3791.const$3.set(seg, x);
    }
    public static MemorySegment put_dataType$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3791.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void put_dataType$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3791.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static put_dataType put_dataType(MemorySegment segment, Arena scope) {
        return put_dataType.ofAddress(put_dataType$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_xml)(IXMLDOMDocument*,BSTR*);
     * }
     */
    public interface get_xml {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_xml fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3791.const$4, fi, constants$34.const$0, scope);
        }
        static get_xml ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_xml$VH() {
        return constants$3791.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_xml)(IXMLDOMDocument*,BSTR*);
     * }
     */
    public static MemorySegment get_xml$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3791.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_xml)(IXMLDOMDocument*,BSTR*);
     * }
     */
    public static void get_xml$set(MemorySegment seg, MemorySegment x) {
        constants$3791.const$5.set(seg, x);
    }
    public static MemorySegment get_xml$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3791.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_xml$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3791.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_xml get_xml(MemorySegment segment, Arena scope) {
        return get_xml.ofAddress(get_xml$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*transformNode)(IXMLDOMDocument*,IXMLDOMNode*,BSTR*);
     * }
     */
    public interface transformNode {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(transformNode fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3792.const$0, fi, constants$37.const$3, scope);
        }
        static transformNode ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle transformNode$VH() {
        return constants$3792.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*transformNode)(IXMLDOMDocument*,IXMLDOMNode*,BSTR*);
     * }
     */
    public static MemorySegment transformNode$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3792.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*transformNode)(IXMLDOMDocument*,IXMLDOMNode*,BSTR*);
     * }
     */
    public static void transformNode$set(MemorySegment seg, MemorySegment x) {
        constants$3792.const$1.set(seg, x);
    }
    public static MemorySegment transformNode$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3792.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void transformNode$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3792.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static transformNode transformNode(MemorySegment segment, Arena scope) {
        return transformNode.ofAddress(transformNode$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*selectNodes)(IXMLDOMDocument*,BSTR,IXMLDOMNodeList**);
     * }
     */
    public interface selectNodes {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(selectNodes fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3792.const$2, fi, constants$37.const$3, scope);
        }
        static selectNodes ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle selectNodes$VH() {
        return constants$3792.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*selectNodes)(IXMLDOMDocument*,BSTR,IXMLDOMNodeList**);
     * }
     */
    public static MemorySegment selectNodes$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3792.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*selectNodes)(IXMLDOMDocument*,BSTR,IXMLDOMNodeList**);
     * }
     */
    public static void selectNodes$set(MemorySegment seg, MemorySegment x) {
        constants$3792.const$3.set(seg, x);
    }
    public static MemorySegment selectNodes$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3792.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void selectNodes$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3792.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static selectNodes selectNodes(MemorySegment segment, Arena scope) {
        return selectNodes.ofAddress(selectNodes$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*selectSingleNode)(IXMLDOMDocument*,BSTR,IXMLDOMNode**);
     * }
     */
    public interface selectSingleNode {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(selectSingleNode fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3792.const$4, fi, constants$37.const$3, scope);
        }
        static selectSingleNode ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle selectSingleNode$VH() {
        return constants$3792.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*selectSingleNode)(IXMLDOMDocument*,BSTR,IXMLDOMNode**);
     * }
     */
    public static MemorySegment selectSingleNode$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3792.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*selectSingleNode)(IXMLDOMDocument*,BSTR,IXMLDOMNode**);
     * }
     */
    public static void selectSingleNode$set(MemorySegment seg, MemorySegment x) {
        constants$3792.const$5.set(seg, x);
    }
    public static MemorySegment selectSingleNode$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3792.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void selectSingleNode$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3792.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static selectSingleNode selectSingleNode(MemorySegment segment, Arena scope) {
        return selectSingleNode.ofAddress(selectSingleNode$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_parsed)(IXMLDOMDocument*,VARIANT_BOOL*);
     * }
     */
    public interface get_parsed {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_parsed fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3793.const$0, fi, constants$34.const$0, scope);
        }
        static get_parsed ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_parsed$VH() {
        return constants$3793.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_parsed)(IXMLDOMDocument*,VARIANT_BOOL*);
     * }
     */
    public static MemorySegment get_parsed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3793.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_parsed)(IXMLDOMDocument*,VARIANT_BOOL*);
     * }
     */
    public static void get_parsed$set(MemorySegment seg, MemorySegment x) {
        constants$3793.const$1.set(seg, x);
    }
    public static MemorySegment get_parsed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3793.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_parsed$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3793.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_parsed get_parsed(MemorySegment segment, Arena scope) {
        return get_parsed.ofAddress(get_parsed$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_namespaceURI)(IXMLDOMDocument*,BSTR*);
     * }
     */
    public interface get_namespaceURI {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_namespaceURI fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3793.const$2, fi, constants$34.const$0, scope);
        }
        static get_namespaceURI ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_namespaceURI$VH() {
        return constants$3793.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_namespaceURI)(IXMLDOMDocument*,BSTR*);
     * }
     */
    public static MemorySegment get_namespaceURI$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3793.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_namespaceURI)(IXMLDOMDocument*,BSTR*);
     * }
     */
    public static void get_namespaceURI$set(MemorySegment seg, MemorySegment x) {
        constants$3793.const$3.set(seg, x);
    }
    public static MemorySegment get_namespaceURI$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3793.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void get_namespaceURI$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3793.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_namespaceURI get_namespaceURI(MemorySegment segment, Arena scope) {
        return get_namespaceURI.ofAddress(get_namespaceURI$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_prefix)(IXMLDOMDocument*,BSTR*);
     * }
     */
    public interface get_prefix {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_prefix fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3793.const$4, fi, constants$34.const$0, scope);
        }
        static get_prefix ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_prefix$VH() {
        return constants$3793.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_prefix)(IXMLDOMDocument*,BSTR*);
     * }
     */
    public static MemorySegment get_prefix$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3793.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_prefix)(IXMLDOMDocument*,BSTR*);
     * }
     */
    public static void get_prefix$set(MemorySegment seg, MemorySegment x) {
        constants$3793.const$5.set(seg, x);
    }
    public static MemorySegment get_prefix$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3793.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_prefix$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3793.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_prefix get_prefix(MemorySegment segment, Arena scope) {
        return get_prefix.ofAddress(get_prefix$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_baseName)(IXMLDOMDocument*,BSTR*);
     * }
     */
    public interface get_baseName {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_baseName fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3794.const$0, fi, constants$34.const$0, scope);
        }
        static get_baseName ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_baseName$VH() {
        return constants$3794.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_baseName)(IXMLDOMDocument*,BSTR*);
     * }
     */
    public static MemorySegment get_baseName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3794.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_baseName)(IXMLDOMDocument*,BSTR*);
     * }
     */
    public static void get_baseName$set(MemorySegment seg, MemorySegment x) {
        constants$3794.const$1.set(seg, x);
    }
    public static MemorySegment get_baseName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3794.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_baseName$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3794.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_baseName get_baseName(MemorySegment segment, Arena scope) {
        return get_baseName.ofAddress(get_baseName$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*transformNodeToObject)(IXMLDOMDocument*,IXMLDOMNode*,VARIANT);
     * }
     */
    public interface transformNodeToObject {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(transformNodeToObject fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3794.const$2, fi, constants$3764.const$0, scope);
        }
        static transformNodeToObject ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$3764.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle transformNodeToObject$VH() {
        return constants$3794.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*transformNodeToObject)(IXMLDOMDocument*,IXMLDOMNode*,VARIANT);
     * }
     */
    public static MemorySegment transformNodeToObject$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3794.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*transformNodeToObject)(IXMLDOMDocument*,IXMLDOMNode*,VARIANT);
     * }
     */
    public static void transformNodeToObject$set(MemorySegment seg, MemorySegment x) {
        constants$3794.const$3.set(seg, x);
    }
    public static MemorySegment transformNodeToObject$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3794.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void transformNodeToObject$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3794.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static transformNodeToObject transformNodeToObject(MemorySegment segment, Arena scope) {
        return transformNodeToObject.ofAddress(transformNodeToObject$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_doctype)(IXMLDOMDocument*,IXMLDOMDocumentType**);
     * }
     */
    public interface get_doctype {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_doctype fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3794.const$4, fi, constants$34.const$0, scope);
        }
        static get_doctype ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_doctype$VH() {
        return constants$3794.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_doctype)(IXMLDOMDocument*,IXMLDOMDocumentType**);
     * }
     */
    public static MemorySegment get_doctype$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3794.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_doctype)(IXMLDOMDocument*,IXMLDOMDocumentType**);
     * }
     */
    public static void get_doctype$set(MemorySegment seg, MemorySegment x) {
        constants$3794.const$5.set(seg, x);
    }
    public static MemorySegment get_doctype$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3794.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_doctype$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3794.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_doctype get_doctype(MemorySegment segment, Arena scope) {
        return get_doctype.ofAddress(get_doctype$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_implementation)(IXMLDOMDocument*,IXMLDOMImplementation**);
     * }
     */
    public interface get_implementation {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_implementation fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3795.const$0, fi, constants$34.const$0, scope);
        }
        static get_implementation ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_implementation$VH() {
        return constants$3795.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_implementation)(IXMLDOMDocument*,IXMLDOMImplementation**);
     * }
     */
    public static MemorySegment get_implementation$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3795.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_implementation)(IXMLDOMDocument*,IXMLDOMImplementation**);
     * }
     */
    public static void get_implementation$set(MemorySegment seg, MemorySegment x) {
        constants$3795.const$1.set(seg, x);
    }
    public static MemorySegment get_implementation$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3795.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_implementation$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3795.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_implementation get_implementation(MemorySegment segment, Arena scope) {
        return get_implementation.ofAddress(get_implementation$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_documentElement)(IXMLDOMDocument*,IXMLDOMElement**);
     * }
     */
    public interface get_documentElement {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_documentElement fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3795.const$2, fi, constants$34.const$0, scope);
        }
        static get_documentElement ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_documentElement$VH() {
        return constants$3795.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_documentElement)(IXMLDOMDocument*,IXMLDOMElement**);
     * }
     */
    public static MemorySegment get_documentElement$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3795.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_documentElement)(IXMLDOMDocument*,IXMLDOMElement**);
     * }
     */
    public static void get_documentElement$set(MemorySegment seg, MemorySegment x) {
        constants$3795.const$3.set(seg, x);
    }
    public static MemorySegment get_documentElement$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3795.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void get_documentElement$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3795.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_documentElement get_documentElement(MemorySegment segment, Arena scope) {
        return get_documentElement.ofAddress(get_documentElement$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*putref_documentElement)(IXMLDOMDocument*,IXMLDOMElement*);
     * }
     */
    public interface putref_documentElement {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(putref_documentElement fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3795.const$4, fi, constants$34.const$0, scope);
        }
        static putref_documentElement ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle putref_documentElement$VH() {
        return constants$3795.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*putref_documentElement)(IXMLDOMDocument*,IXMLDOMElement*);
     * }
     */
    public static MemorySegment putref_documentElement$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3795.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*putref_documentElement)(IXMLDOMDocument*,IXMLDOMElement*);
     * }
     */
    public static void putref_documentElement$set(MemorySegment seg, MemorySegment x) {
        constants$3795.const$5.set(seg, x);
    }
    public static MemorySegment putref_documentElement$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3795.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void putref_documentElement$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3795.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static putref_documentElement putref_documentElement(MemorySegment segment, Arena scope) {
        return putref_documentElement.ofAddress(putref_documentElement$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*createElement)(IXMLDOMDocument*,BSTR,IXMLDOMElement**);
     * }
     */
    public interface createElement {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(createElement fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3796.const$0, fi, constants$37.const$3, scope);
        }
        static createElement ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle createElement$VH() {
        return constants$3796.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*createElement)(IXMLDOMDocument*,BSTR,IXMLDOMElement**);
     * }
     */
    public static MemorySegment createElement$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3796.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*createElement)(IXMLDOMDocument*,BSTR,IXMLDOMElement**);
     * }
     */
    public static void createElement$set(MemorySegment seg, MemorySegment x) {
        constants$3796.const$1.set(seg, x);
    }
    public static MemorySegment createElement$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3796.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void createElement$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3796.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static createElement createElement(MemorySegment segment, Arena scope) {
        return createElement.ofAddress(createElement$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*createDocumentFragment)(IXMLDOMDocument*,IXMLDOMDocumentFragment**);
     * }
     */
    public interface createDocumentFragment {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(createDocumentFragment fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3796.const$2, fi, constants$34.const$0, scope);
        }
        static createDocumentFragment ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle createDocumentFragment$VH() {
        return constants$3796.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*createDocumentFragment)(IXMLDOMDocument*,IXMLDOMDocumentFragment**);
     * }
     */
    public static MemorySegment createDocumentFragment$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3796.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*createDocumentFragment)(IXMLDOMDocument*,IXMLDOMDocumentFragment**);
     * }
     */
    public static void createDocumentFragment$set(MemorySegment seg, MemorySegment x) {
        constants$3796.const$3.set(seg, x);
    }
    public static MemorySegment createDocumentFragment$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3796.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void createDocumentFragment$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3796.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static createDocumentFragment createDocumentFragment(MemorySegment segment, Arena scope) {
        return createDocumentFragment.ofAddress(createDocumentFragment$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*createTextNode)(IXMLDOMDocument*,BSTR,IXMLDOMText**);
     * }
     */
    public interface createTextNode {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(createTextNode fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3796.const$4, fi, constants$37.const$3, scope);
        }
        static createTextNode ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle createTextNode$VH() {
        return constants$3796.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*createTextNode)(IXMLDOMDocument*,BSTR,IXMLDOMText**);
     * }
     */
    public static MemorySegment createTextNode$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3796.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*createTextNode)(IXMLDOMDocument*,BSTR,IXMLDOMText**);
     * }
     */
    public static void createTextNode$set(MemorySegment seg, MemorySegment x) {
        constants$3796.const$5.set(seg, x);
    }
    public static MemorySegment createTextNode$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3796.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void createTextNode$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3796.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static createTextNode createTextNode(MemorySegment segment, Arena scope) {
        return createTextNode.ofAddress(createTextNode$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*createComment)(IXMLDOMDocument*,BSTR,IXMLDOMComment**);
     * }
     */
    public interface createComment {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(createComment fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3797.const$0, fi, constants$37.const$3, scope);
        }
        static createComment ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle createComment$VH() {
        return constants$3797.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*createComment)(IXMLDOMDocument*,BSTR,IXMLDOMComment**);
     * }
     */
    public static MemorySegment createComment$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3797.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*createComment)(IXMLDOMDocument*,BSTR,IXMLDOMComment**);
     * }
     */
    public static void createComment$set(MemorySegment seg, MemorySegment x) {
        constants$3797.const$1.set(seg, x);
    }
    public static MemorySegment createComment$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3797.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void createComment$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3797.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static createComment createComment(MemorySegment segment, Arena scope) {
        return createComment.ofAddress(createComment$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*createCDATASection)(IXMLDOMDocument*,BSTR,IXMLDOMCDATASection**);
     * }
     */
    public interface createCDATASection {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(createCDATASection fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3797.const$2, fi, constants$37.const$3, scope);
        }
        static createCDATASection ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle createCDATASection$VH() {
        return constants$3797.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*createCDATASection)(IXMLDOMDocument*,BSTR,IXMLDOMCDATASection**);
     * }
     */
    public static MemorySegment createCDATASection$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3797.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*createCDATASection)(IXMLDOMDocument*,BSTR,IXMLDOMCDATASection**);
     * }
     */
    public static void createCDATASection$set(MemorySegment seg, MemorySegment x) {
        constants$3797.const$3.set(seg, x);
    }
    public static MemorySegment createCDATASection$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3797.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void createCDATASection$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3797.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static createCDATASection createCDATASection(MemorySegment segment, Arena scope) {
        return createCDATASection.ofAddress(createCDATASection$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*createProcessingInstruction)(IXMLDOMDocument*,BSTR,BSTR,IXMLDOMProcessingInstruction**);
     * }
     */
    public interface createProcessingInstruction {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(createProcessingInstruction fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3797.const$4, fi, constants$1.const$3, scope);
        }
        static createProcessingInstruction ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)constants$55.const$1.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle createProcessingInstruction$VH() {
        return constants$3797.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*createProcessingInstruction)(IXMLDOMDocument*,BSTR,BSTR,IXMLDOMProcessingInstruction**);
     * }
     */
    public static MemorySegment createProcessingInstruction$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3797.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*createProcessingInstruction)(IXMLDOMDocument*,BSTR,BSTR,IXMLDOMProcessingInstruction**);
     * }
     */
    public static void createProcessingInstruction$set(MemorySegment seg, MemorySegment x) {
        constants$3797.const$5.set(seg, x);
    }
    public static MemorySegment createProcessingInstruction$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3797.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void createProcessingInstruction$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3797.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static createProcessingInstruction createProcessingInstruction(MemorySegment segment, Arena scope) {
        return createProcessingInstruction.ofAddress(createProcessingInstruction$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*createAttribute)(IXMLDOMDocument*,BSTR,IXMLDOMAttribute**);
     * }
     */
    public interface createAttribute {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(createAttribute fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3798.const$0, fi, constants$37.const$3, scope);
        }
        static createAttribute ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle createAttribute$VH() {
        return constants$3798.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*createAttribute)(IXMLDOMDocument*,BSTR,IXMLDOMAttribute**);
     * }
     */
    public static MemorySegment createAttribute$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3798.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*createAttribute)(IXMLDOMDocument*,BSTR,IXMLDOMAttribute**);
     * }
     */
    public static void createAttribute$set(MemorySegment seg, MemorySegment x) {
        constants$3798.const$1.set(seg, x);
    }
    public static MemorySegment createAttribute$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3798.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void createAttribute$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3798.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static createAttribute createAttribute(MemorySegment segment, Arena scope) {
        return createAttribute.ofAddress(createAttribute$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*createEntityReference)(IXMLDOMDocument*,BSTR,IXMLDOMEntityReference**);
     * }
     */
    public interface createEntityReference {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(createEntityReference fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3798.const$2, fi, constants$37.const$3, scope);
        }
        static createEntityReference ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle createEntityReference$VH() {
        return constants$3798.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*createEntityReference)(IXMLDOMDocument*,BSTR,IXMLDOMEntityReference**);
     * }
     */
    public static MemorySegment createEntityReference$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3798.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*createEntityReference)(IXMLDOMDocument*,BSTR,IXMLDOMEntityReference**);
     * }
     */
    public static void createEntityReference$set(MemorySegment seg, MemorySegment x) {
        constants$3798.const$3.set(seg, x);
    }
    public static MemorySegment createEntityReference$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3798.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void createEntityReference$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3798.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static createEntityReference createEntityReference(MemorySegment segment, Arena scope) {
        return createEntityReference.ofAddress(createEntityReference$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*getElementsByTagName)(IXMLDOMDocument*,BSTR,IXMLDOMNodeList**);
     * }
     */
    public interface getElementsByTagName {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(getElementsByTagName fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3798.const$4, fi, constants$37.const$3, scope);
        }
        static getElementsByTagName ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle getElementsByTagName$VH() {
        return constants$3798.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*getElementsByTagName)(IXMLDOMDocument*,BSTR,IXMLDOMNodeList**);
     * }
     */
    public static MemorySegment getElementsByTagName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3798.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*getElementsByTagName)(IXMLDOMDocument*,BSTR,IXMLDOMNodeList**);
     * }
     */
    public static void getElementsByTagName$set(MemorySegment seg, MemorySegment x) {
        constants$3798.const$5.set(seg, x);
    }
    public static MemorySegment getElementsByTagName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3798.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void getElementsByTagName$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3798.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static getElementsByTagName getElementsByTagName(MemorySegment segment, Arena scope) {
        return getElementsByTagName.ofAddress(getElementsByTagName$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*createNode)(IXMLDOMDocument*,VARIANT,BSTR,BSTR,IXMLDOMNode**);
     * }
     */
    public interface createNode {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(createNode fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3799.const$1, fi, constants$3799.const$0, scope);
        }
        static createNode ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)constants$3799.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle createNode$VH() {
        return constants$3799.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*createNode)(IXMLDOMDocument*,VARIANT,BSTR,BSTR,IXMLDOMNode**);
     * }
     */
    public static MemorySegment createNode$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3799.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*createNode)(IXMLDOMDocument*,VARIANT,BSTR,BSTR,IXMLDOMNode**);
     * }
     */
    public static void createNode$set(MemorySegment seg, MemorySegment x) {
        constants$3799.const$3.set(seg, x);
    }
    public static MemorySegment createNode$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3799.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void createNode$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3799.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static createNode createNode(MemorySegment segment, Arena scope) {
        return createNode.ofAddress(createNode$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*nodeFromID)(IXMLDOMDocument*,BSTR,IXMLDOMNode**);
     * }
     */
    public interface nodeFromID {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(nodeFromID fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3799.const$4, fi, constants$37.const$3, scope);
        }
        static nodeFromID ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle nodeFromID$VH() {
        return constants$3799.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*nodeFromID)(IXMLDOMDocument*,BSTR,IXMLDOMNode**);
     * }
     */
    public static MemorySegment nodeFromID$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3799.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*nodeFromID)(IXMLDOMDocument*,BSTR,IXMLDOMNode**);
     * }
     */
    public static void nodeFromID$set(MemorySegment seg, MemorySegment x) {
        constants$3799.const$5.set(seg, x);
    }
    public static MemorySegment nodeFromID$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3799.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void nodeFromID$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3799.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static nodeFromID nodeFromID(MemorySegment segment, Arena scope) {
        return nodeFromID.ofAddress(nodeFromID$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*load)(IXMLDOMDocument*,VARIANT,VARIANT_BOOL*);
     * }
     */
    public interface load {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(load fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3800.const$1, fi, constants$3800.const$0, scope);
        }
        static load ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$3800.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle load$VH() {
        return constants$3800.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*load)(IXMLDOMDocument*,VARIANT,VARIANT_BOOL*);
     * }
     */
    public static MemorySegment load$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3800.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*load)(IXMLDOMDocument*,VARIANT,VARIANT_BOOL*);
     * }
     */
    public static void load$set(MemorySegment seg, MemorySegment x) {
        constants$3800.const$3.set(seg, x);
    }
    public static MemorySegment load$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3800.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void load$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3800.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static load load(MemorySegment segment, Arena scope) {
        return load.ofAddress(load$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_readyState)(IXMLDOMDocument*,long*);
     * }
     */
    public interface get_readyState {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_readyState fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3800.const$4, fi, constants$34.const$0, scope);
        }
        static get_readyState ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_readyState$VH() {
        return constants$3800.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_readyState)(IXMLDOMDocument*,long*);
     * }
     */
    public static MemorySegment get_readyState$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3800.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_readyState)(IXMLDOMDocument*,long*);
     * }
     */
    public static void get_readyState$set(MemorySegment seg, MemorySegment x) {
        constants$3800.const$5.set(seg, x);
    }
    public static MemorySegment get_readyState$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3800.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_readyState$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3800.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_readyState get_readyState(MemorySegment segment, Arena scope) {
        return get_readyState.ofAddress(get_readyState$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_parseError)(IXMLDOMDocument*,IXMLDOMParseError**);
     * }
     */
    public interface get_parseError {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_parseError fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3801.const$0, fi, constants$34.const$0, scope);
        }
        static get_parseError ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_parseError$VH() {
        return constants$3801.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_parseError)(IXMLDOMDocument*,IXMLDOMParseError**);
     * }
     */
    public static MemorySegment get_parseError$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3801.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_parseError)(IXMLDOMDocument*,IXMLDOMParseError**);
     * }
     */
    public static void get_parseError$set(MemorySegment seg, MemorySegment x) {
        constants$3801.const$1.set(seg, x);
    }
    public static MemorySegment get_parseError$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3801.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_parseError$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3801.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_parseError get_parseError(MemorySegment segment, Arena scope) {
        return get_parseError.ofAddress(get_parseError$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_url)(IXMLDOMDocument*,BSTR*);
     * }
     */
    public interface get_url {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_url fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3801.const$2, fi, constants$34.const$0, scope);
        }
        static get_url ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_url$VH() {
        return constants$3801.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_url)(IXMLDOMDocument*,BSTR*);
     * }
     */
    public static MemorySegment get_url$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3801.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_url)(IXMLDOMDocument*,BSTR*);
     * }
     */
    public static void get_url$set(MemorySegment seg, MemorySegment x) {
        constants$3801.const$3.set(seg, x);
    }
    public static MemorySegment get_url$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3801.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void get_url$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3801.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_url get_url(MemorySegment segment, Arena scope) {
        return get_url.ofAddress(get_url$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_async)(IXMLDOMDocument*,VARIANT_BOOL*);
     * }
     */
    public interface get_async {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_async fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3801.const$4, fi, constants$34.const$0, scope);
        }
        static get_async ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_async$VH() {
        return constants$3801.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_async)(IXMLDOMDocument*,VARIANT_BOOL*);
     * }
     */
    public static MemorySegment get_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3801.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_async)(IXMLDOMDocument*,VARIANT_BOOL*);
     * }
     */
    public static void get_async$set(MemorySegment seg, MemorySegment x) {
        constants$3801.const$5.set(seg, x);
    }
    public static MemorySegment get_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3801.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_async$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3801.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_async get_async(MemorySegment segment, Arena scope) {
        return get_async.ofAddress(get_async$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*put_async)(IXMLDOMDocument*,VARIANT_BOOL);
     * }
     */
    public interface put_async {

        int apply(java.lang.foreign.MemorySegment _x0, short _x1);
        static MemorySegment allocate(put_async fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3802.const$0, fi, constants$1463.const$0, scope);
        }
        static put_async ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, short __x1) -> {
                try {
                    return (int)constants$3450.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle put_async$VH() {
        return constants$3802.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*put_async)(IXMLDOMDocument*,VARIANT_BOOL);
     * }
     */
    public static MemorySegment put_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3802.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*put_async)(IXMLDOMDocument*,VARIANT_BOOL);
     * }
     */
    public static void put_async$set(MemorySegment seg, MemorySegment x) {
        constants$3802.const$1.set(seg, x);
    }
    public static MemorySegment put_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3802.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void put_async$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3802.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static put_async put_async(MemorySegment segment, Arena scope) {
        return put_async.ofAddress(put_async$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*abort)(IXMLDOMDocument*);
     * }
     */
    public interface abort {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(abort fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3802.const$2, fi, constants$18.const$5, scope);
        }
        static abort ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle abort$VH() {
        return constants$3802.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*abort)(IXMLDOMDocument*);
     * }
     */
    public static MemorySegment abort$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3802.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*abort)(IXMLDOMDocument*);
     * }
     */
    public static void abort$set(MemorySegment seg, MemorySegment x) {
        constants$3802.const$3.set(seg, x);
    }
    public static MemorySegment abort$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3802.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void abort$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3802.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static abort abort(MemorySegment segment, Arena scope) {
        return abort.ofAddress(abort$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*loadXML)(IXMLDOMDocument*,BSTR,VARIANT_BOOL*);
     * }
     */
    public interface loadXML {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(loadXML fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3802.const$4, fi, constants$37.const$3, scope);
        }
        static loadXML ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle loadXML$VH() {
        return constants$3802.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*loadXML)(IXMLDOMDocument*,BSTR,VARIANT_BOOL*);
     * }
     */
    public static MemorySegment loadXML$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3802.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*loadXML)(IXMLDOMDocument*,BSTR,VARIANT_BOOL*);
     * }
     */
    public static void loadXML$set(MemorySegment seg, MemorySegment x) {
        constants$3802.const$5.set(seg, x);
    }
    public static MemorySegment loadXML$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3802.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void loadXML$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3802.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static loadXML loadXML(MemorySegment segment, Arena scope) {
        return loadXML.ofAddress(loadXML$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*save)(IXMLDOMDocument*,VARIANT);
     * }
     */
    public interface save {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(save fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3803.const$0, fi, constants$3752.const$1, scope);
        }
        static save ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$3752.const$3.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle save$VH() {
        return constants$3803.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*save)(IXMLDOMDocument*,VARIANT);
     * }
     */
    public static MemorySegment save$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3803.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*save)(IXMLDOMDocument*,VARIANT);
     * }
     */
    public static void save$set(MemorySegment seg, MemorySegment x) {
        constants$3803.const$1.set(seg, x);
    }
    public static MemorySegment save$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3803.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void save$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3803.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static save save(MemorySegment segment, Arena scope) {
        return save.ofAddress(save$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_validateOnParse)(IXMLDOMDocument*,VARIANT_BOOL*);
     * }
     */
    public interface get_validateOnParse {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_validateOnParse fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3803.const$2, fi, constants$34.const$0, scope);
        }
        static get_validateOnParse ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_validateOnParse$VH() {
        return constants$3803.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_validateOnParse)(IXMLDOMDocument*,VARIANT_BOOL*);
     * }
     */
    public static MemorySegment get_validateOnParse$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3803.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_validateOnParse)(IXMLDOMDocument*,VARIANT_BOOL*);
     * }
     */
    public static void get_validateOnParse$set(MemorySegment seg, MemorySegment x) {
        constants$3803.const$3.set(seg, x);
    }
    public static MemorySegment get_validateOnParse$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3803.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void get_validateOnParse$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3803.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_validateOnParse get_validateOnParse(MemorySegment segment, Arena scope) {
        return get_validateOnParse.ofAddress(get_validateOnParse$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*put_validateOnParse)(IXMLDOMDocument*,VARIANT_BOOL);
     * }
     */
    public interface put_validateOnParse {

        int apply(java.lang.foreign.MemorySegment _x0, short _x1);
        static MemorySegment allocate(put_validateOnParse fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3803.const$4, fi, constants$1463.const$0, scope);
        }
        static put_validateOnParse ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, short __x1) -> {
                try {
                    return (int)constants$3450.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle put_validateOnParse$VH() {
        return constants$3803.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*put_validateOnParse)(IXMLDOMDocument*,VARIANT_BOOL);
     * }
     */
    public static MemorySegment put_validateOnParse$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3803.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*put_validateOnParse)(IXMLDOMDocument*,VARIANT_BOOL);
     * }
     */
    public static void put_validateOnParse$set(MemorySegment seg, MemorySegment x) {
        constants$3803.const$5.set(seg, x);
    }
    public static MemorySegment put_validateOnParse$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3803.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void put_validateOnParse$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3803.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static put_validateOnParse put_validateOnParse(MemorySegment segment, Arena scope) {
        return put_validateOnParse.ofAddress(put_validateOnParse$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_resolveExternals)(IXMLDOMDocument*,VARIANT_BOOL*);
     * }
     */
    public interface get_resolveExternals {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_resolveExternals fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3804.const$0, fi, constants$34.const$0, scope);
        }
        static get_resolveExternals ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_resolveExternals$VH() {
        return constants$3804.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_resolveExternals)(IXMLDOMDocument*,VARIANT_BOOL*);
     * }
     */
    public static MemorySegment get_resolveExternals$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3804.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_resolveExternals)(IXMLDOMDocument*,VARIANT_BOOL*);
     * }
     */
    public static void get_resolveExternals$set(MemorySegment seg, MemorySegment x) {
        constants$3804.const$1.set(seg, x);
    }
    public static MemorySegment get_resolveExternals$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3804.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_resolveExternals$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3804.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_resolveExternals get_resolveExternals(MemorySegment segment, Arena scope) {
        return get_resolveExternals.ofAddress(get_resolveExternals$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*put_resolveExternals)(IXMLDOMDocument*,VARIANT_BOOL);
     * }
     */
    public interface put_resolveExternals {

        int apply(java.lang.foreign.MemorySegment _x0, short _x1);
        static MemorySegment allocate(put_resolveExternals fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3804.const$2, fi, constants$1463.const$0, scope);
        }
        static put_resolveExternals ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, short __x1) -> {
                try {
                    return (int)constants$3450.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle put_resolveExternals$VH() {
        return constants$3804.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*put_resolveExternals)(IXMLDOMDocument*,VARIANT_BOOL);
     * }
     */
    public static MemorySegment put_resolveExternals$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3804.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*put_resolveExternals)(IXMLDOMDocument*,VARIANT_BOOL);
     * }
     */
    public static void put_resolveExternals$set(MemorySegment seg, MemorySegment x) {
        constants$3804.const$3.set(seg, x);
    }
    public static MemorySegment put_resolveExternals$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3804.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void put_resolveExternals$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3804.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static put_resolveExternals put_resolveExternals(MemorySegment segment, Arena scope) {
        return put_resolveExternals.ofAddress(put_resolveExternals$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*get_preserveWhiteSpace)(IXMLDOMDocument*,VARIANT_BOOL*);
     * }
     */
    public interface get_preserveWhiteSpace {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_preserveWhiteSpace fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3804.const$4, fi, constants$34.const$0, scope);
        }
        static get_preserveWhiteSpace ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_preserveWhiteSpace$VH() {
        return constants$3804.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_preserveWhiteSpace)(IXMLDOMDocument*,VARIANT_BOOL*);
     * }
     */
    public static MemorySegment get_preserveWhiteSpace$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3804.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_preserveWhiteSpace)(IXMLDOMDocument*,VARIANT_BOOL*);
     * }
     */
    public static void get_preserveWhiteSpace$set(MemorySegment seg, MemorySegment x) {
        constants$3804.const$5.set(seg, x);
    }
    public static MemorySegment get_preserveWhiteSpace$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3804.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_preserveWhiteSpace$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3804.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_preserveWhiteSpace get_preserveWhiteSpace(MemorySegment segment, Arena scope) {
        return get_preserveWhiteSpace.ofAddress(get_preserveWhiteSpace$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*put_preserveWhiteSpace)(IXMLDOMDocument*,VARIANT_BOOL);
     * }
     */
    public interface put_preserveWhiteSpace {

        int apply(java.lang.foreign.MemorySegment _x0, short _x1);
        static MemorySegment allocate(put_preserveWhiteSpace fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3805.const$0, fi, constants$1463.const$0, scope);
        }
        static put_preserveWhiteSpace ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, short __x1) -> {
                try {
                    return (int)constants$3450.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle put_preserveWhiteSpace$VH() {
        return constants$3805.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*put_preserveWhiteSpace)(IXMLDOMDocument*,VARIANT_BOOL);
     * }
     */
    public static MemorySegment put_preserveWhiteSpace$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3805.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*put_preserveWhiteSpace)(IXMLDOMDocument*,VARIANT_BOOL);
     * }
     */
    public static void put_preserveWhiteSpace$set(MemorySegment seg, MemorySegment x) {
        constants$3805.const$1.set(seg, x);
    }
    public static MemorySegment put_preserveWhiteSpace$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3805.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void put_preserveWhiteSpace$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3805.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static put_preserveWhiteSpace put_preserveWhiteSpace(MemorySegment segment, Arena scope) {
        return put_preserveWhiteSpace.ofAddress(put_preserveWhiteSpace$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*put_onreadystatechange)(IXMLDOMDocument*,VARIANT);
     * }
     */
    public interface put_onreadystatechange {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(put_onreadystatechange fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3805.const$2, fi, constants$3752.const$1, scope);
        }
        static put_onreadystatechange ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$3752.const$3.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle put_onreadystatechange$VH() {
        return constants$3805.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*put_onreadystatechange)(IXMLDOMDocument*,VARIANT);
     * }
     */
    public static MemorySegment put_onreadystatechange$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3805.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*put_onreadystatechange)(IXMLDOMDocument*,VARIANT);
     * }
     */
    public static void put_onreadystatechange$set(MemorySegment seg, MemorySegment x) {
        constants$3805.const$3.set(seg, x);
    }
    public static MemorySegment put_onreadystatechange$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3805.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void put_onreadystatechange$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3805.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static put_onreadystatechange put_onreadystatechange(MemorySegment segment, Arena scope) {
        return put_onreadystatechange.ofAddress(put_onreadystatechange$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*put_ondataavailable)(IXMLDOMDocument*,VARIANT);
     * }
     */
    public interface put_ondataavailable {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(put_ondataavailable fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3805.const$4, fi, constants$3752.const$1, scope);
        }
        static put_ondataavailable ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$3752.const$3.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle put_ondataavailable$VH() {
        return constants$3805.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*put_ondataavailable)(IXMLDOMDocument*,VARIANT);
     * }
     */
    public static MemorySegment put_ondataavailable$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3805.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*put_ondataavailable)(IXMLDOMDocument*,VARIANT);
     * }
     */
    public static void put_ondataavailable$set(MemorySegment seg, MemorySegment x) {
        constants$3805.const$5.set(seg, x);
    }
    public static MemorySegment put_ondataavailable$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3805.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void put_ondataavailable$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3805.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static put_ondataavailable put_ondataavailable(MemorySegment segment, Arena scope) {
        return put_ondataavailable.ofAddress(put_ondataavailable$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*put_ontransformnode)(IXMLDOMDocument*,VARIANT);
     * }
     */
    public interface put_ontransformnode {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(put_ontransformnode fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3806.const$0, fi, constants$3752.const$1, scope);
        }
        static put_ontransformnode ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$3752.const$3.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle put_ontransformnode$VH() {
        return constants$3806.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*put_ontransformnode)(IXMLDOMDocument*,VARIANT);
     * }
     */
    public static MemorySegment put_ontransformnode$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3806.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*put_ontransformnode)(IXMLDOMDocument*,VARIANT);
     * }
     */
    public static void put_ontransformnode$set(MemorySegment seg, MemorySegment x) {
        constants$3806.const$1.set(seg, x);
    }
    public static MemorySegment put_ontransformnode$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3806.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void put_ontransformnode$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3806.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static put_ontransformnode put_ontransformnode(MemorySegment segment, Arena scope) {
        return put_ontransformnode.ofAddress(put_ontransformnode$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



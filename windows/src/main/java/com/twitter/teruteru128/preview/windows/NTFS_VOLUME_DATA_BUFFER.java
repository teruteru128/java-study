// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct {
 *     LARGE_INTEGER VolumeSerialNumber;
 *     LARGE_INTEGER NumberSectors;
 *     LARGE_INTEGER TotalClusters;
 *     LARGE_INTEGER FreeClusters;
 *     LARGE_INTEGER TotalReserved;
 *     DWORD BytesPerSector;
 *     DWORD BytesPerCluster;
 *     DWORD BytesPerFileRecordSegment;
 *     DWORD ClustersPerFileRecordSegment;
 *     LARGE_INTEGER MftValidDataLength;
 *     LARGE_INTEGER MftStartLcn;
 *     LARGE_INTEGER Mft2StartLcn;
 *     LARGE_INTEGER MftZoneStart;
 *     LARGE_INTEGER MftZoneEnd;
 * };
 * }
 */
public class NTFS_VOLUME_DATA_BUFFER {

    public static MemoryLayout $LAYOUT() {
        return constants$2572.const$3;
    }
    public static MemorySegment VolumeSerialNumber$slice(MemorySegment seg) {
        return seg.asSlice(0, 8);
    }
    public static MemorySegment NumberSectors$slice(MemorySegment seg) {
        return seg.asSlice(8, 8);
    }
    public static MemorySegment TotalClusters$slice(MemorySegment seg) {
        return seg.asSlice(16, 8);
    }
    public static MemorySegment FreeClusters$slice(MemorySegment seg) {
        return seg.asSlice(24, 8);
    }
    public static MemorySegment TotalReserved$slice(MemorySegment seg) {
        return seg.asSlice(32, 8);
    }
    public static VarHandle BytesPerSector$VH() {
        return constants$2572.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD BytesPerSector;
     * }
     */
    public static int BytesPerSector$get(MemorySegment seg) {
        return (int)constants$2572.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD BytesPerSector;
     * }
     */
    public static void BytesPerSector$set(MemorySegment seg, int x) {
        constants$2572.const$4.set(seg, x);
    }
    public static int BytesPerSector$get(MemorySegment seg, long index) {
        return (int)constants$2572.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void BytesPerSector$set(MemorySegment seg, long index, int x) {
        constants$2572.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle BytesPerCluster$VH() {
        return constants$2572.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD BytesPerCluster;
     * }
     */
    public static int BytesPerCluster$get(MemorySegment seg) {
        return (int)constants$2572.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD BytesPerCluster;
     * }
     */
    public static void BytesPerCluster$set(MemorySegment seg, int x) {
        constants$2572.const$5.set(seg, x);
    }
    public static int BytesPerCluster$get(MemorySegment seg, long index) {
        return (int)constants$2572.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void BytesPerCluster$set(MemorySegment seg, long index, int x) {
        constants$2572.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle BytesPerFileRecordSegment$VH() {
        return constants$2573.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD BytesPerFileRecordSegment;
     * }
     */
    public static int BytesPerFileRecordSegment$get(MemorySegment seg) {
        return (int)constants$2573.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD BytesPerFileRecordSegment;
     * }
     */
    public static void BytesPerFileRecordSegment$set(MemorySegment seg, int x) {
        constants$2573.const$0.set(seg, x);
    }
    public static int BytesPerFileRecordSegment$get(MemorySegment seg, long index) {
        return (int)constants$2573.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void BytesPerFileRecordSegment$set(MemorySegment seg, long index, int x) {
        constants$2573.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ClustersPerFileRecordSegment$VH() {
        return constants$2573.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD ClustersPerFileRecordSegment;
     * }
     */
    public static int ClustersPerFileRecordSegment$get(MemorySegment seg) {
        return (int)constants$2573.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD ClustersPerFileRecordSegment;
     * }
     */
    public static void ClustersPerFileRecordSegment$set(MemorySegment seg, int x) {
        constants$2573.const$1.set(seg, x);
    }
    public static int ClustersPerFileRecordSegment$get(MemorySegment seg, long index) {
        return (int)constants$2573.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void ClustersPerFileRecordSegment$set(MemorySegment seg, long index, int x) {
        constants$2573.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment MftValidDataLength$slice(MemorySegment seg) {
        return seg.asSlice(56, 8);
    }
    public static MemorySegment MftStartLcn$slice(MemorySegment seg) {
        return seg.asSlice(64, 8);
    }
    public static MemorySegment Mft2StartLcn$slice(MemorySegment seg) {
        return seg.asSlice(72, 8);
    }
    public static MemorySegment MftZoneStart$slice(MemorySegment seg) {
        return seg.asSlice(80, 8);
    }
    public static MemorySegment MftZoneEnd$slice(MemorySegment seg) {
        return seg.asSlice(88, 8);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



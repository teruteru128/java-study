// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _STREAM_INFORMATION_ENTRY {
 *     DWORD Version;
 *     DWORD Flags;
 *     union _StreamInformation StreamInformation;
 * };
 * }
 */
public class _STREAM_INFORMATION_ENTRY {

    public static MemoryLayout $LAYOUT() {
        return constants$2710.const$4;
    }
    public static VarHandle Version$VH() {
        return constants$2710.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Version;
     * }
     */
    public static int Version$get(MemorySegment seg) {
        return (int)constants$2710.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Version;
     * }
     */
    public static void Version$set(MemorySegment seg, int x) {
        constants$2710.const$5.set(seg, x);
    }
    public static int Version$get(MemorySegment seg, long index) {
        return (int)constants$2710.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, int x) {
        constants$2710.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Flags$VH() {
        return constants$2711.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Flags;
     * }
     */
    public static int Flags$get(MemorySegment seg) {
        return (int)constants$2711.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Flags;
     * }
     */
    public static void Flags$set(MemorySegment seg, int x) {
        constants$2711.const$0.set(seg, x);
    }
    public static int Flags$get(MemorySegment seg, long index) {
        return (int)constants$2711.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, int x) {
        constants$2711.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
     * union _StreamInformation {
     *     struct _DesiredStorageClass DesiredStorageClass;
     *     struct _DataStream DataStream;
     *     struct _Reparse Reparse;
     *     struct _Ea Ea;
     * };
     * }
     */
    public static final class _StreamInformation {

        // Suppresses default constructor, ensuring non-instantiability.
        private _StreamInformation() {}
        public static MemoryLayout $LAYOUT() {
            return constants$2711.const$1;
        }
        /**
         * {@snippet :
         * struct _DesiredStorageClass {
         *     FILE_STORAGE_TIER_CLASS Class;
         *     DWORD Flags;
         * };
         * }
         */
        public static final class _DesiredStorageClass {

            // Suppresses default constructor, ensuring non-instantiability.
            private _DesiredStorageClass() {}
            public static MemoryLayout $LAYOUT() {
                return constants$2711.const$2;
            }
            public static VarHandle Class$VH() {
                return constants$2711.const$3;
            }
            /**
             * Getter for field:
             * {@snippet :
             * FILE_STORAGE_TIER_CLASS Class;
             * }
             */
            public static int Class$get(MemorySegment seg) {
                return (int)constants$2711.const$3.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * FILE_STORAGE_TIER_CLASS Class;
             * }
             */
            public static void Class$set(MemorySegment seg, int x) {
                constants$2711.const$3.set(seg, x);
            }
            public static int Class$get(MemorySegment seg, long index) {
                return (int)constants$2711.const$3.get(seg.asSlice(index*sizeof()));
            }
            public static void Class$set(MemorySegment seg, long index, int x) {
                constants$2711.const$3.set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle Flags$VH() {
                return constants$2711.const$4;
            }
            /**
             * Getter for field:
             * {@snippet :
             * DWORD Flags;
             * }
             */
            public static int Flags$get(MemorySegment seg) {
                return (int)constants$2711.const$4.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * DWORD Flags;
             * }
             */
            public static void Flags$set(MemorySegment seg, int x) {
                constants$2711.const$4.set(seg, x);
            }
            public static int Flags$get(MemorySegment seg, long index) {
                return (int)constants$2711.const$4.get(seg.asSlice(index*sizeof()));
            }
            public static void Flags$set(MemorySegment seg, long index, int x) {
                constants$2711.const$4.set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
        }

        public static MemorySegment DesiredStorageClass$slice(MemorySegment seg) {
            return seg.asSlice(0, 8);
        }
        /**
         * {@snippet :
         * struct _DataStream {
         *     WORD Length;
         *     WORD Flags;
         *     DWORD Reserved;
         *     DWORDLONG Vdl;
         * };
         * }
         */
        public static final class _DataStream {

            // Suppresses default constructor, ensuring non-instantiability.
            private _DataStream() {}
            public static MemoryLayout $LAYOUT() {
                return constants$2711.const$5;
            }
            public static VarHandle Length$VH() {
                return constants$2712.const$0;
            }
            /**
             * Getter for field:
             * {@snippet :
             * WORD Length;
             * }
             */
            public static short Length$get(MemorySegment seg) {
                return (short)constants$2712.const$0.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * WORD Length;
             * }
             */
            public static void Length$set(MemorySegment seg, short x) {
                constants$2712.const$0.set(seg, x);
            }
            public static short Length$get(MemorySegment seg, long index) {
                return (short)constants$2712.const$0.get(seg.asSlice(index*sizeof()));
            }
            public static void Length$set(MemorySegment seg, long index, short x) {
                constants$2712.const$0.set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle Flags$VH() {
                return constants$2712.const$1;
            }
            /**
             * Getter for field:
             * {@snippet :
             * WORD Flags;
             * }
             */
            public static short Flags$get(MemorySegment seg) {
                return (short)constants$2712.const$1.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * WORD Flags;
             * }
             */
            public static void Flags$set(MemorySegment seg, short x) {
                constants$2712.const$1.set(seg, x);
            }
            public static short Flags$get(MemorySegment seg, long index) {
                return (short)constants$2712.const$1.get(seg.asSlice(index*sizeof()));
            }
            public static void Flags$set(MemorySegment seg, long index, short x) {
                constants$2712.const$1.set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle Reserved$VH() {
                return constants$2712.const$2;
            }
            /**
             * Getter for field:
             * {@snippet :
             * DWORD Reserved;
             * }
             */
            public static int Reserved$get(MemorySegment seg) {
                return (int)constants$2712.const$2.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * DWORD Reserved;
             * }
             */
            public static void Reserved$set(MemorySegment seg, int x) {
                constants$2712.const$2.set(seg, x);
            }
            public static int Reserved$get(MemorySegment seg, long index) {
                return (int)constants$2712.const$2.get(seg.asSlice(index*sizeof()));
            }
            public static void Reserved$set(MemorySegment seg, long index, int x) {
                constants$2712.const$2.set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle Vdl$VH() {
                return constants$2712.const$3;
            }
            /**
             * Getter for field:
             * {@snippet :
             * DWORDLONG Vdl;
             * }
             */
            public static long Vdl$get(MemorySegment seg) {
                return (long)constants$2712.const$3.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * DWORDLONG Vdl;
             * }
             */
            public static void Vdl$set(MemorySegment seg, long x) {
                constants$2712.const$3.set(seg, x);
            }
            public static long Vdl$get(MemorySegment seg, long index) {
                return (long)constants$2712.const$3.get(seg.asSlice(index*sizeof()));
            }
            public static void Vdl$set(MemorySegment seg, long index, long x) {
                constants$2712.const$3.set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
        }

        public static MemorySegment DataStream$slice(MemorySegment seg) {
            return seg.asSlice(0, 16);
        }
        /**
         * {@snippet :
         * struct _Reparse {
         *     WORD Length;
         *     WORD Flags;
         *     DWORD ReparseDataSize;
         *     DWORD ReparseDataOffset;
         * };
         * }
         */
        public static final class _Reparse {

            // Suppresses default constructor, ensuring non-instantiability.
            private _Reparse() {}
            public static MemoryLayout $LAYOUT() {
                return constants$2712.const$4;
            }
            public static VarHandle Length$VH() {
                return constants$2712.const$5;
            }
            /**
             * Getter for field:
             * {@snippet :
             * WORD Length;
             * }
             */
            public static short Length$get(MemorySegment seg) {
                return (short)constants$2712.const$5.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * WORD Length;
             * }
             */
            public static void Length$set(MemorySegment seg, short x) {
                constants$2712.const$5.set(seg, x);
            }
            public static short Length$get(MemorySegment seg, long index) {
                return (short)constants$2712.const$5.get(seg.asSlice(index*sizeof()));
            }
            public static void Length$set(MemorySegment seg, long index, short x) {
                constants$2712.const$5.set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle Flags$VH() {
                return constants$2713.const$0;
            }
            /**
             * Getter for field:
             * {@snippet :
             * WORD Flags;
             * }
             */
            public static short Flags$get(MemorySegment seg) {
                return (short)constants$2713.const$0.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * WORD Flags;
             * }
             */
            public static void Flags$set(MemorySegment seg, short x) {
                constants$2713.const$0.set(seg, x);
            }
            public static short Flags$get(MemorySegment seg, long index) {
                return (short)constants$2713.const$0.get(seg.asSlice(index*sizeof()));
            }
            public static void Flags$set(MemorySegment seg, long index, short x) {
                constants$2713.const$0.set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle ReparseDataSize$VH() {
                return constants$2713.const$1;
            }
            /**
             * Getter for field:
             * {@snippet :
             * DWORD ReparseDataSize;
             * }
             */
            public static int ReparseDataSize$get(MemorySegment seg) {
                return (int)constants$2713.const$1.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * DWORD ReparseDataSize;
             * }
             */
            public static void ReparseDataSize$set(MemorySegment seg, int x) {
                constants$2713.const$1.set(seg, x);
            }
            public static int ReparseDataSize$get(MemorySegment seg, long index) {
                return (int)constants$2713.const$1.get(seg.asSlice(index*sizeof()));
            }
            public static void ReparseDataSize$set(MemorySegment seg, long index, int x) {
                constants$2713.const$1.set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle ReparseDataOffset$VH() {
                return constants$2713.const$2;
            }
            /**
             * Getter for field:
             * {@snippet :
             * DWORD ReparseDataOffset;
             * }
             */
            public static int ReparseDataOffset$get(MemorySegment seg) {
                return (int)constants$2713.const$2.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * DWORD ReparseDataOffset;
             * }
             */
            public static void ReparseDataOffset$set(MemorySegment seg, int x) {
                constants$2713.const$2.set(seg, x);
            }
            public static int ReparseDataOffset$get(MemorySegment seg, long index) {
                return (int)constants$2713.const$2.get(seg.asSlice(index*sizeof()));
            }
            public static void ReparseDataOffset$set(MemorySegment seg, long index, int x) {
                constants$2713.const$2.set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
        }

        public static MemorySegment Reparse$slice(MemorySegment seg) {
            return seg.asSlice(0, 12);
        }
        /**
         * {@snippet :
         * struct _Ea {
         *     WORD Length;
         *     WORD Flags;
         *     DWORD EaSize;
         *     DWORD EaInformationOffset;
         * };
         * }
         */
        public static final class _Ea {

            // Suppresses default constructor, ensuring non-instantiability.
            private _Ea() {}
            public static MemoryLayout $LAYOUT() {
                return constants$2713.const$3;
            }
            public static VarHandle Length$VH() {
                return constants$2713.const$4;
            }
            /**
             * Getter for field:
             * {@snippet :
             * WORD Length;
             * }
             */
            public static short Length$get(MemorySegment seg) {
                return (short)constants$2713.const$4.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * WORD Length;
             * }
             */
            public static void Length$set(MemorySegment seg, short x) {
                constants$2713.const$4.set(seg, x);
            }
            public static short Length$get(MemorySegment seg, long index) {
                return (short)constants$2713.const$4.get(seg.asSlice(index*sizeof()));
            }
            public static void Length$set(MemorySegment seg, long index, short x) {
                constants$2713.const$4.set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle Flags$VH() {
                return constants$2713.const$5;
            }
            /**
             * Getter for field:
             * {@snippet :
             * WORD Flags;
             * }
             */
            public static short Flags$get(MemorySegment seg) {
                return (short)constants$2713.const$5.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * WORD Flags;
             * }
             */
            public static void Flags$set(MemorySegment seg, short x) {
                constants$2713.const$5.set(seg, x);
            }
            public static short Flags$get(MemorySegment seg, long index) {
                return (short)constants$2713.const$5.get(seg.asSlice(index*sizeof()));
            }
            public static void Flags$set(MemorySegment seg, long index, short x) {
                constants$2713.const$5.set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle EaSize$VH() {
                return constants$2714.const$0;
            }
            /**
             * Getter for field:
             * {@snippet :
             * DWORD EaSize;
             * }
             */
            public static int EaSize$get(MemorySegment seg) {
                return (int)constants$2714.const$0.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * DWORD EaSize;
             * }
             */
            public static void EaSize$set(MemorySegment seg, int x) {
                constants$2714.const$0.set(seg, x);
            }
            public static int EaSize$get(MemorySegment seg, long index) {
                return (int)constants$2714.const$0.get(seg.asSlice(index*sizeof()));
            }
            public static void EaSize$set(MemorySegment seg, long index, int x) {
                constants$2714.const$0.set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle EaInformationOffset$VH() {
                return constants$2714.const$1;
            }
            /**
             * Getter for field:
             * {@snippet :
             * DWORD EaInformationOffset;
             * }
             */
            public static int EaInformationOffset$get(MemorySegment seg) {
                return (int)constants$2714.const$1.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * DWORD EaInformationOffset;
             * }
             */
            public static void EaInformationOffset$set(MemorySegment seg, int x) {
                constants$2714.const$1.set(seg, x);
            }
            public static int EaInformationOffset$get(MemorySegment seg, long index) {
                return (int)constants$2714.const$1.get(seg.asSlice(index*sizeof()));
            }
            public static void EaInformationOffset$set(MemorySegment seg, long index, int x) {
                constants$2714.const$1.set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
        }

        public static MemorySegment Ea$slice(MemorySegment seg) {
            return seg.asSlice(0, 12);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment StreamInformation$slice(MemorySegment seg) {
        return seg.asSlice(8, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



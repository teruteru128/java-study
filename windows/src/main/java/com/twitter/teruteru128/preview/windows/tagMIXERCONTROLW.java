// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tagMIXERCONTROLW {
 *     DWORD cbStruct;
 *     DWORD dwControlID;
 *     DWORD dwControlType;
 *     DWORD fdwControl;
 *     DWORD cMultipleItems;
 *     WCHAR szShortName[16];
 *     WCHAR szName[64];
 *     union  Bounds;
 *     union  Metrics;
 * };
 * }
 */
public class tagMIXERCONTROLW {

    public static MemoryLayout $LAYOUT() {
        return constants$1670.const$5;
    }
    public static VarHandle cbStruct$VH() {
        return constants$1671.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD cbStruct;
     * }
     */
    public static int cbStruct$get(MemorySegment seg) {
        return (int)constants$1671.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD cbStruct;
     * }
     */
    public static void cbStruct$set(MemorySegment seg, int x) {
        constants$1671.const$0.set(seg, x);
    }
    public static int cbStruct$get(MemorySegment seg, long index) {
        return (int)constants$1671.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void cbStruct$set(MemorySegment seg, long index, int x) {
        constants$1671.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwControlID$VH() {
        return constants$1671.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwControlID;
     * }
     */
    public static int dwControlID$get(MemorySegment seg) {
        return (int)constants$1671.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwControlID;
     * }
     */
    public static void dwControlID$set(MemorySegment seg, int x) {
        constants$1671.const$1.set(seg, x);
    }
    public static int dwControlID$get(MemorySegment seg, long index) {
        return (int)constants$1671.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void dwControlID$set(MemorySegment seg, long index, int x) {
        constants$1671.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwControlType$VH() {
        return constants$1671.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwControlType;
     * }
     */
    public static int dwControlType$get(MemorySegment seg) {
        return (int)constants$1671.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwControlType;
     * }
     */
    public static void dwControlType$set(MemorySegment seg, int x) {
        constants$1671.const$2.set(seg, x);
    }
    public static int dwControlType$get(MemorySegment seg, long index) {
        return (int)constants$1671.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void dwControlType$set(MemorySegment seg, long index, int x) {
        constants$1671.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle fdwControl$VH() {
        return constants$1671.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD fdwControl;
     * }
     */
    public static int fdwControl$get(MemorySegment seg) {
        return (int)constants$1671.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD fdwControl;
     * }
     */
    public static void fdwControl$set(MemorySegment seg, int x) {
        constants$1671.const$3.set(seg, x);
    }
    public static int fdwControl$get(MemorySegment seg, long index) {
        return (int)constants$1671.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void fdwControl$set(MemorySegment seg, long index, int x) {
        constants$1671.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cMultipleItems$VH() {
        return constants$1671.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD cMultipleItems;
     * }
     */
    public static int cMultipleItems$get(MemorySegment seg) {
        return (int)constants$1671.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD cMultipleItems;
     * }
     */
    public static void cMultipleItems$set(MemorySegment seg, int x) {
        constants$1671.const$4.set(seg, x);
    }
    public static int cMultipleItems$get(MemorySegment seg, long index) {
        return (int)constants$1671.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void cMultipleItems$set(MemorySegment seg, long index, int x) {
        constants$1671.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment szShortName$slice(MemorySegment seg) {
        return seg.asSlice(20, 32);
    }
    public static MemorySegment szName$slice(MemorySegment seg) {
        return seg.asSlice(52, 128);
    }
    /**
     * {@snippet :
     * union {
     *     struct {
     *         LONG lMinimum;
     *         LONG lMaximum;
     *     };
     *     struct {
     *         DWORD dwMinimum;
     *         DWORD dwMaximum;
     *     };
     *     DWORD dwReserved[6];
     * };
     * }
     */
    public static final class Bounds {

        // Suppresses default constructor, ensuring non-instantiability.
        private Bounds() {}
        public static MemoryLayout $LAYOUT() {
            return constants$1669.const$3;
        }
        public static VarHandle lMinimum$VH() {
            return constants$1671.const$5;
        }
        /**
         * Getter for field:
         * {@snippet :
         * LONG lMinimum;
         * }
         */
        public static int lMinimum$get(MemorySegment seg) {
            return (int)constants$1671.const$5.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * LONG lMinimum;
         * }
         */
        public static void lMinimum$set(MemorySegment seg, int x) {
            constants$1671.const$5.set(seg, x);
        }
        public static int lMinimum$get(MemorySegment seg, long index) {
            return (int)constants$1671.const$5.get(seg.asSlice(index*sizeof()));
        }
        public static void lMinimum$set(MemorySegment seg, long index, int x) {
            constants$1671.const$5.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle lMaximum$VH() {
            return constants$1672.const$0;
        }
        /**
         * Getter for field:
         * {@snippet :
         * LONG lMaximum;
         * }
         */
        public static int lMaximum$get(MemorySegment seg) {
            return (int)constants$1672.const$0.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * LONG lMaximum;
         * }
         */
        public static void lMaximum$set(MemorySegment seg, int x) {
            constants$1672.const$0.set(seg, x);
        }
        public static int lMaximum$get(MemorySegment seg, long index) {
            return (int)constants$1672.const$0.get(seg.asSlice(index*sizeof()));
        }
        public static void lMaximum$set(MemorySegment seg, long index, int x) {
            constants$1672.const$0.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dwMinimum$VH() {
            return constants$1672.const$1;
        }
        /**
         * Getter for field:
         * {@snippet :
         * DWORD dwMinimum;
         * }
         */
        public static int dwMinimum$get(MemorySegment seg) {
            return (int)constants$1672.const$1.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * DWORD dwMinimum;
         * }
         */
        public static void dwMinimum$set(MemorySegment seg, int x) {
            constants$1672.const$1.set(seg, x);
        }
        public static int dwMinimum$get(MemorySegment seg, long index) {
            return (int)constants$1672.const$1.get(seg.asSlice(index*sizeof()));
        }
        public static void dwMinimum$set(MemorySegment seg, long index, int x) {
            constants$1672.const$1.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dwMaximum$VH() {
            return constants$1672.const$2;
        }
        /**
         * Getter for field:
         * {@snippet :
         * DWORD dwMaximum;
         * }
         */
        public static int dwMaximum$get(MemorySegment seg) {
            return (int)constants$1672.const$2.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * DWORD dwMaximum;
         * }
         */
        public static void dwMaximum$set(MemorySegment seg, int x) {
            constants$1672.const$2.set(seg, x);
        }
        public static int dwMaximum$get(MemorySegment seg, long index) {
            return (int)constants$1672.const$2.get(seg.asSlice(index*sizeof()));
        }
        public static void dwMaximum$set(MemorySegment seg, long index, int x) {
            constants$1672.const$2.set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment dwReserved$slice(MemorySegment seg) {
            return seg.asSlice(0, 24);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment Bounds$slice(MemorySegment seg) {
        return seg.asSlice(180, 24);
    }
    /**
     * {@snippet :
     * union {
     *     DWORD cSteps;
     *     DWORD cbCustomData;
     *     DWORD dwReserved[6];
     * };
     * }
     */
    public static final class Metrics {

        // Suppresses default constructor, ensuring non-instantiability.
        private Metrics() {}
        public static MemoryLayout $LAYOUT() {
            return constants$1670.const$2;
        }
        public static VarHandle cSteps$VH() {
            return constants$1672.const$3;
        }
        /**
         * Getter for field:
         * {@snippet :
         * DWORD cSteps;
         * }
         */
        public static int cSteps$get(MemorySegment seg) {
            return (int)constants$1672.const$3.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * DWORD cSteps;
         * }
         */
        public static void cSteps$set(MemorySegment seg, int x) {
            constants$1672.const$3.set(seg, x);
        }
        public static int cSteps$get(MemorySegment seg, long index) {
            return (int)constants$1672.const$3.get(seg.asSlice(index*sizeof()));
        }
        public static void cSteps$set(MemorySegment seg, long index, int x) {
            constants$1672.const$3.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle cbCustomData$VH() {
            return constants$1672.const$4;
        }
        /**
         * Getter for field:
         * {@snippet :
         * DWORD cbCustomData;
         * }
         */
        public static int cbCustomData$get(MemorySegment seg) {
            return (int)constants$1672.const$4.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * DWORD cbCustomData;
         * }
         */
        public static void cbCustomData$set(MemorySegment seg, int x) {
            constants$1672.const$4.set(seg, x);
        }
        public static int cbCustomData$get(MemorySegment seg, long index) {
            return (int)constants$1672.const$4.get(seg.asSlice(index*sizeof()));
        }
        public static void cbCustomData$set(MemorySegment seg, long index, int x) {
            constants$1672.const$4.set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment dwReserved$slice(MemorySegment seg) {
            return seg.asSlice(0, 24);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment Metrics$slice(MemorySegment seg) {
        return seg.asSlice(204, 24);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



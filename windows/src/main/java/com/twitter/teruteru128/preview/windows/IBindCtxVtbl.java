// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IBindCtxVtbl {
 *     HRESULT (*QueryInterface)(IBindCtx*,const IID*,void**);
 *     ULONG (*AddRef)(IBindCtx*);
 *     ULONG (*Release)(IBindCtx*);
 *     HRESULT (*RegisterObjectBound)(IBindCtx*,IUnknown*);
 *     HRESULT (*RevokeObjectBound)(IBindCtx*,IUnknown*);
 *     HRESULT (*ReleaseBoundObjects)(IBindCtx*);
 *     HRESULT (*SetBindOptions)(IBindCtx*,BIND_OPTS*);
 *     HRESULT (*GetBindOptions)(IBindCtx*,BIND_OPTS*);
 *     HRESULT (*GetRunningObjectTable)(IBindCtx*,IRunningObjectTable**);
 *     HRESULT (*RegisterObjectParam)(IBindCtx*,LPOLESTR,IUnknown*);
 *     HRESULT (*GetObjectParam)(IBindCtx*,LPOLESTR,IUnknown**);
 *     HRESULT (*EnumObjectParam)(IBindCtx*,IEnumString**);
 *     HRESULT (*RevokeObjectParam)(IBindCtx*,LPOLESTR);
 * };
 * }
 */
public class IBindCtxVtbl {

    public static MemoryLayout $LAYOUT() {
        return constants$3226.const$5;
    }
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IBindCtx*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3227.const$0, fi, constants$37.const$3, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle QueryInterface$VH() {
        return constants$3227.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IBindCtx*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3227.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IBindCtx*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        constants$3227.const$1.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3227.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3227.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, Arena scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*AddRef)(IBindCtx*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3227.const$2, fi, constants$18.const$5, scope);
        }
        static AddRef ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle AddRef$VH() {
        return constants$3227.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IBindCtx*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3227.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IBindCtx*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        constants$3227.const$3.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3227.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3227.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, Arena scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*Release)(IBindCtx*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3227.const$4, fi, constants$18.const$5, scope);
        }
        static Release ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Release$VH() {
        return constants$3227.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IBindCtx*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3227.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IBindCtx*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        constants$3227.const$5.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3227.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3227.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, Arena scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*RegisterObjectBound)(IBindCtx*,IUnknown*);
     * }
     */
    public interface RegisterObjectBound {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(RegisterObjectBound fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3228.const$0, fi, constants$34.const$0, scope);
        }
        static RegisterObjectBound ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle RegisterObjectBound$VH() {
        return constants$3228.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*RegisterObjectBound)(IBindCtx*,IUnknown*);
     * }
     */
    public static MemorySegment RegisterObjectBound$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3228.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*RegisterObjectBound)(IBindCtx*,IUnknown*);
     * }
     */
    public static void RegisterObjectBound$set(MemorySegment seg, MemorySegment x) {
        constants$3228.const$1.set(seg, x);
    }
    public static MemorySegment RegisterObjectBound$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3228.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void RegisterObjectBound$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3228.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static RegisterObjectBound RegisterObjectBound(MemorySegment segment, Arena scope) {
        return RegisterObjectBound.ofAddress(RegisterObjectBound$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*RevokeObjectBound)(IBindCtx*,IUnknown*);
     * }
     */
    public interface RevokeObjectBound {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(RevokeObjectBound fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3228.const$2, fi, constants$34.const$0, scope);
        }
        static RevokeObjectBound ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle RevokeObjectBound$VH() {
        return constants$3228.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*RevokeObjectBound)(IBindCtx*,IUnknown*);
     * }
     */
    public static MemorySegment RevokeObjectBound$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3228.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*RevokeObjectBound)(IBindCtx*,IUnknown*);
     * }
     */
    public static void RevokeObjectBound$set(MemorySegment seg, MemorySegment x) {
        constants$3228.const$3.set(seg, x);
    }
    public static MemorySegment RevokeObjectBound$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3228.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void RevokeObjectBound$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3228.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static RevokeObjectBound RevokeObjectBound(MemorySegment segment, Arena scope) {
        return RevokeObjectBound.ofAddress(RevokeObjectBound$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*ReleaseBoundObjects)(IBindCtx*);
     * }
     */
    public interface ReleaseBoundObjects {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(ReleaseBoundObjects fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3228.const$4, fi, constants$18.const$5, scope);
        }
        static ReleaseBoundObjects ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle ReleaseBoundObjects$VH() {
        return constants$3228.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*ReleaseBoundObjects)(IBindCtx*);
     * }
     */
    public static MemorySegment ReleaseBoundObjects$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3228.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*ReleaseBoundObjects)(IBindCtx*);
     * }
     */
    public static void ReleaseBoundObjects$set(MemorySegment seg, MemorySegment x) {
        constants$3228.const$5.set(seg, x);
    }
    public static MemorySegment ReleaseBoundObjects$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3228.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void ReleaseBoundObjects$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3228.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static ReleaseBoundObjects ReleaseBoundObjects(MemorySegment segment, Arena scope) {
        return ReleaseBoundObjects.ofAddress(ReleaseBoundObjects$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetBindOptions)(IBindCtx*,BIND_OPTS*);
     * }
     */
    public interface SetBindOptions {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetBindOptions fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3229.const$0, fi, constants$34.const$0, scope);
        }
        static SetBindOptions ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetBindOptions$VH() {
        return constants$3229.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetBindOptions)(IBindCtx*,BIND_OPTS*);
     * }
     */
    public static MemorySegment SetBindOptions$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3229.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetBindOptions)(IBindCtx*,BIND_OPTS*);
     * }
     */
    public static void SetBindOptions$set(MemorySegment seg, MemorySegment x) {
        constants$3229.const$1.set(seg, x);
    }
    public static MemorySegment SetBindOptions$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3229.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void SetBindOptions$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3229.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetBindOptions SetBindOptions(MemorySegment segment, Arena scope) {
        return SetBindOptions.ofAddress(SetBindOptions$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetBindOptions)(IBindCtx*,BIND_OPTS*);
     * }
     */
    public interface GetBindOptions {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetBindOptions fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3229.const$2, fi, constants$34.const$0, scope);
        }
        static GetBindOptions ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetBindOptions$VH() {
        return constants$3229.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetBindOptions)(IBindCtx*,BIND_OPTS*);
     * }
     */
    public static MemorySegment GetBindOptions$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3229.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetBindOptions)(IBindCtx*,BIND_OPTS*);
     * }
     */
    public static void GetBindOptions$set(MemorySegment seg, MemorySegment x) {
        constants$3229.const$3.set(seg, x);
    }
    public static MemorySegment GetBindOptions$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3229.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void GetBindOptions$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3229.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetBindOptions GetBindOptions(MemorySegment segment, Arena scope) {
        return GetBindOptions.ofAddress(GetBindOptions$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetRunningObjectTable)(IBindCtx*,IRunningObjectTable**);
     * }
     */
    public interface GetRunningObjectTable {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetRunningObjectTable fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3229.const$4, fi, constants$34.const$0, scope);
        }
        static GetRunningObjectTable ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetRunningObjectTable$VH() {
        return constants$3229.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetRunningObjectTable)(IBindCtx*,IRunningObjectTable**);
     * }
     */
    public static MemorySegment GetRunningObjectTable$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3229.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetRunningObjectTable)(IBindCtx*,IRunningObjectTable**);
     * }
     */
    public static void GetRunningObjectTable$set(MemorySegment seg, MemorySegment x) {
        constants$3229.const$5.set(seg, x);
    }
    public static MemorySegment GetRunningObjectTable$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3229.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GetRunningObjectTable$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3229.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetRunningObjectTable GetRunningObjectTable(MemorySegment segment, Arena scope) {
        return GetRunningObjectTable.ofAddress(GetRunningObjectTable$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*RegisterObjectParam)(IBindCtx*,LPOLESTR,IUnknown*);
     * }
     */
    public interface RegisterObjectParam {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(RegisterObjectParam fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3230.const$0, fi, constants$37.const$3, scope);
        }
        static RegisterObjectParam ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle RegisterObjectParam$VH() {
        return constants$3230.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*RegisterObjectParam)(IBindCtx*,LPOLESTR,IUnknown*);
     * }
     */
    public static MemorySegment RegisterObjectParam$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3230.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*RegisterObjectParam)(IBindCtx*,LPOLESTR,IUnknown*);
     * }
     */
    public static void RegisterObjectParam$set(MemorySegment seg, MemorySegment x) {
        constants$3230.const$1.set(seg, x);
    }
    public static MemorySegment RegisterObjectParam$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3230.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void RegisterObjectParam$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3230.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static RegisterObjectParam RegisterObjectParam(MemorySegment segment, Arena scope) {
        return RegisterObjectParam.ofAddress(RegisterObjectParam$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetObjectParam)(IBindCtx*,LPOLESTR,IUnknown**);
     * }
     */
    public interface GetObjectParam {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetObjectParam fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3230.const$2, fi, constants$37.const$3, scope);
        }
        static GetObjectParam ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetObjectParam$VH() {
        return constants$3230.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetObjectParam)(IBindCtx*,LPOLESTR,IUnknown**);
     * }
     */
    public static MemorySegment GetObjectParam$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3230.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetObjectParam)(IBindCtx*,LPOLESTR,IUnknown**);
     * }
     */
    public static void GetObjectParam$set(MemorySegment seg, MemorySegment x) {
        constants$3230.const$3.set(seg, x);
    }
    public static MemorySegment GetObjectParam$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3230.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void GetObjectParam$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3230.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetObjectParam GetObjectParam(MemorySegment segment, Arena scope) {
        return GetObjectParam.ofAddress(GetObjectParam$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*EnumObjectParam)(IBindCtx*,IEnumString**);
     * }
     */
    public interface EnumObjectParam {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(EnumObjectParam fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3230.const$4, fi, constants$34.const$0, scope);
        }
        static EnumObjectParam ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle EnumObjectParam$VH() {
        return constants$3230.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*EnumObjectParam)(IBindCtx*,IEnumString**);
     * }
     */
    public static MemorySegment EnumObjectParam$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3230.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*EnumObjectParam)(IBindCtx*,IEnumString**);
     * }
     */
    public static void EnumObjectParam$set(MemorySegment seg, MemorySegment x) {
        constants$3230.const$5.set(seg, x);
    }
    public static MemorySegment EnumObjectParam$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3230.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void EnumObjectParam$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3230.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static EnumObjectParam EnumObjectParam(MemorySegment segment, Arena scope) {
        return EnumObjectParam.ofAddress(EnumObjectParam$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*RevokeObjectParam)(IBindCtx*,LPOLESTR);
     * }
     */
    public interface RevokeObjectParam {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(RevokeObjectParam fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3231.const$0, fi, constants$34.const$0, scope);
        }
        static RevokeObjectParam ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle RevokeObjectParam$VH() {
        return constants$3231.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*RevokeObjectParam)(IBindCtx*,LPOLESTR);
     * }
     */
    public static MemorySegment RevokeObjectParam$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3231.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*RevokeObjectParam)(IBindCtx*,LPOLESTR);
     * }
     */
    public static void RevokeObjectParam$set(MemorySegment seg, MemorySegment x) {
        constants$3231.const$1.set(seg, x);
    }
    public static MemorySegment RevokeObjectParam$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3231.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void RevokeObjectParam$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3231.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static RevokeObjectParam RevokeObjectParam(MemorySegment segment, Arena scope) {
        return RevokeObjectParam.ofAddress(RevokeObjectParam$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _BCRYPT_DSA_KEY_BLOB_V2 {
 *     ULONG dwMagic;
 *     ULONG cbKey;
 *     HASHALGORITHM_ENUM hashAlgorithm;
 *     DSAFIPSVERSION_ENUM standardVersion;
 *     ULONG cbSeedLength;
 *     ULONG cbGroupSize;
 *     UCHAR Count[4];
 * };
 * }
 */
public class _BCRYPT_DSA_KEY_BLOB_V2 {

    public static MemoryLayout $LAYOUT() {
        return constants$1951.const$1;
    }
    public static VarHandle dwMagic$VH() {
        return constants$1951.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG dwMagic;
     * }
     */
    public static int dwMagic$get(MemorySegment seg) {
        return (int)constants$1951.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG dwMagic;
     * }
     */
    public static void dwMagic$set(MemorySegment seg, int x) {
        constants$1951.const$2.set(seg, x);
    }
    public static int dwMagic$get(MemorySegment seg, long index) {
        return (int)constants$1951.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void dwMagic$set(MemorySegment seg, long index, int x) {
        constants$1951.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cbKey$VH() {
        return constants$1951.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG cbKey;
     * }
     */
    public static int cbKey$get(MemorySegment seg) {
        return (int)constants$1951.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG cbKey;
     * }
     */
    public static void cbKey$set(MemorySegment seg, int x) {
        constants$1951.const$3.set(seg, x);
    }
    public static int cbKey$get(MemorySegment seg, long index) {
        return (int)constants$1951.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void cbKey$set(MemorySegment seg, long index, int x) {
        constants$1951.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hashAlgorithm$VH() {
        return constants$1951.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HASHALGORITHM_ENUM hashAlgorithm;
     * }
     */
    public static int hashAlgorithm$get(MemorySegment seg) {
        return (int)constants$1951.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HASHALGORITHM_ENUM hashAlgorithm;
     * }
     */
    public static void hashAlgorithm$set(MemorySegment seg, int x) {
        constants$1951.const$4.set(seg, x);
    }
    public static int hashAlgorithm$get(MemorySegment seg, long index) {
        return (int)constants$1951.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void hashAlgorithm$set(MemorySegment seg, long index, int x) {
        constants$1951.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle standardVersion$VH() {
        return constants$1951.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DSAFIPSVERSION_ENUM standardVersion;
     * }
     */
    public static int standardVersion$get(MemorySegment seg) {
        return (int)constants$1951.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DSAFIPSVERSION_ENUM standardVersion;
     * }
     */
    public static void standardVersion$set(MemorySegment seg, int x) {
        constants$1951.const$5.set(seg, x);
    }
    public static int standardVersion$get(MemorySegment seg, long index) {
        return (int)constants$1951.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void standardVersion$set(MemorySegment seg, long index, int x) {
        constants$1951.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cbSeedLength$VH() {
        return constants$1952.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG cbSeedLength;
     * }
     */
    public static int cbSeedLength$get(MemorySegment seg) {
        return (int)constants$1952.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG cbSeedLength;
     * }
     */
    public static void cbSeedLength$set(MemorySegment seg, int x) {
        constants$1952.const$0.set(seg, x);
    }
    public static int cbSeedLength$get(MemorySegment seg, long index) {
        return (int)constants$1952.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void cbSeedLength$set(MemorySegment seg, long index, int x) {
        constants$1952.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cbGroupSize$VH() {
        return constants$1952.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG cbGroupSize;
     * }
     */
    public static int cbGroupSize$get(MemorySegment seg) {
        return (int)constants$1952.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG cbGroupSize;
     * }
     */
    public static void cbGroupSize$set(MemorySegment seg, int x) {
        constants$1952.const$1.set(seg, x);
    }
    public static int cbGroupSize$get(MemorySegment seg, long index) {
        return (int)constants$1952.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void cbGroupSize$set(MemorySegment seg, long index, int x) {
        constants$1952.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Count$slice(MemorySegment seg) {
        return seg.asSlice(24, 4);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * union _ARM64_NT_NEON128 {
 *     struct {
 *         ULONGLONG Low;
 *         LONGLONG High;
 *     };
 *     double D[2];
 *     float S[4];
 *     WORD H[8];
 *     BYTE B[16];
 * }
 * }
 */
public class _ARM64_NT_NEON128 {

    _ARM64_NT_NEON128() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
        MemoryLayout.structLayout(
            Windows_h.C_LONG_LONG.withName("Low"),
            Windows_h.C_LONG_LONG.withName("High")
        ).withName("$anon$6490:5"),
        MemoryLayout.sequenceLayout(2, Windows_h.C_DOUBLE).withName("D"),
        MemoryLayout.sequenceLayout(4, Windows_h.C_FLOAT).withName("S"),
        MemoryLayout.sequenceLayout(8, Windows_h.C_SHORT).withName("H"),
        MemoryLayout.sequenceLayout(16, Windows_h.C_CHAR).withName("B")
    ).withName("_ARM64_NT_NEON128");

    /**
     * The layout of this union
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong Low$LAYOUT = (OfLong)$LAYOUT.select(groupElement("$anon$6490:5"), groupElement("Low"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONGLONG Low
     * }
     */
    public static final OfLong Low$layout() {
        return Low$LAYOUT;
    }

    private static final long Low$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONGLONG Low
     * }
     */
    public static final long Low$offset() {
        return Low$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONGLONG Low
     * }
     */
    public static long Low(MemorySegment union) {
        return union.get(Low$LAYOUT, Low$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONGLONG Low
     * }
     */
    public static void Low(MemorySegment union, long fieldValue) {
        union.set(Low$LAYOUT, Low$OFFSET, fieldValue);
    }

    private static final OfLong High$LAYOUT = (OfLong)$LAYOUT.select(groupElement("$anon$6490:5"), groupElement("High"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LONGLONG High
     * }
     */
    public static final OfLong High$layout() {
        return High$LAYOUT;
    }

    private static final long High$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LONGLONG High
     * }
     */
    public static final long High$offset() {
        return High$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LONGLONG High
     * }
     */
    public static long High(MemorySegment union) {
        return union.get(High$LAYOUT, High$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LONGLONG High
     * }
     */
    public static void High(MemorySegment union, long fieldValue) {
        union.set(High$LAYOUT, High$OFFSET, fieldValue);
    }

    private static final SequenceLayout D$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("D"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double D[2]
     * }
     */
    public static final SequenceLayout D$layout() {
        return D$LAYOUT;
    }

    private static final long D$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double D[2]
     * }
     */
    public static final long D$offset() {
        return D$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double D[2]
     * }
     */
    public static MemorySegment D(MemorySegment union) {
        return union.asSlice(D$OFFSET, D$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double D[2]
     * }
     */
    public static void D(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, D$OFFSET, D$LAYOUT.byteSize());
    }

    private static long[] D$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * double D[2]
     * }
     */
    public static long[] D$dimensions() {
        return D$DIMS;
    }
    private static final VarHandle D$ELEM_HANDLE = D$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * double D[2]
     * }
     */
    public static double D(MemorySegment union, long index0) {
        return (double)D$ELEM_HANDLE.get(union, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * double D[2]
     * }
     */
    public static void D(MemorySegment union, long index0, double fieldValue) {
        D$ELEM_HANDLE.set(union, 0L, index0, fieldValue);
    }

    private static final SequenceLayout S$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("S"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float S[4]
     * }
     */
    public static final SequenceLayout S$layout() {
        return S$LAYOUT;
    }

    private static final long S$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float S[4]
     * }
     */
    public static final long S$offset() {
        return S$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float S[4]
     * }
     */
    public static MemorySegment S(MemorySegment union) {
        return union.asSlice(S$OFFSET, S$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float S[4]
     * }
     */
    public static void S(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, S$OFFSET, S$LAYOUT.byteSize());
    }

    private static long[] S$DIMS = { 4 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * float S[4]
     * }
     */
    public static long[] S$dimensions() {
        return S$DIMS;
    }
    private static final VarHandle S$ELEM_HANDLE = S$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * float S[4]
     * }
     */
    public static float S(MemorySegment union, long index0) {
        return (float)S$ELEM_HANDLE.get(union, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * float S[4]
     * }
     */
    public static void S(MemorySegment union, long index0, float fieldValue) {
        S$ELEM_HANDLE.set(union, 0L, index0, fieldValue);
    }

    private static final SequenceLayout H$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("H"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD H[8]
     * }
     */
    public static final SequenceLayout H$layout() {
        return H$LAYOUT;
    }

    private static final long H$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD H[8]
     * }
     */
    public static final long H$offset() {
        return H$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD H[8]
     * }
     */
    public static MemorySegment H(MemorySegment union) {
        return union.asSlice(H$OFFSET, H$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD H[8]
     * }
     */
    public static void H(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, H$OFFSET, H$LAYOUT.byteSize());
    }

    private static long[] H$DIMS = { 8 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * WORD H[8]
     * }
     */
    public static long[] H$dimensions() {
        return H$DIMS;
    }
    private static final VarHandle H$ELEM_HANDLE = H$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * WORD H[8]
     * }
     */
    public static short H(MemorySegment union, long index0) {
        return (short)H$ELEM_HANDLE.get(union, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * WORD H[8]
     * }
     */
    public static void H(MemorySegment union, long index0, short fieldValue) {
        H$ELEM_HANDLE.set(union, 0L, index0, fieldValue);
    }

    private static final SequenceLayout B$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("B"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE B[16]
     * }
     */
    public static final SequenceLayout B$layout() {
        return B$LAYOUT;
    }

    private static final long B$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE B[16]
     * }
     */
    public static final long B$offset() {
        return B$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE B[16]
     * }
     */
    public static MemorySegment B(MemorySegment union) {
        return union.asSlice(B$OFFSET, B$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE B[16]
     * }
     */
    public static void B(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, B$OFFSET, B$LAYOUT.byteSize());
    }

    private static long[] B$DIMS = { 16 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * BYTE B[16]
     * }
     */
    public static long[] B$dimensions() {
        return B$DIMS;
    }
    private static final VarHandle B$ELEM_HANDLE = B$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * BYTE B[16]
     * }
     */
    public static byte B(MemorySegment union, long index0) {
        return (byte)B$ELEM_HANDLE.get(union, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * BYTE B[16]
     * }
     */
    public static void B(MemorySegment union, long index0, byte fieldValue) {
        B$ELEM_HANDLE.set(union, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this union
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IUriBuilderVtbl {
 *     HRESULT (*QueryInterface)(IUriBuilder*,const IID*,void**);
 *     ULONG (*AddRef)(IUriBuilder*);
 *     ULONG (*Release)(IUriBuilder*);
 *     HRESULT (*CreateUriSimple)(IUriBuilder*,DWORD,DWORD_PTR,IUri**);
 *     HRESULT (*CreateUri)(IUriBuilder*,DWORD,DWORD,DWORD_PTR,IUri**);
 *     HRESULT (*CreateUriWithFlags)(IUriBuilder*,DWORD,DWORD,DWORD,DWORD_PTR,IUri**);
 *     HRESULT (*GetIUri)(IUriBuilder*,IUri**);
 *     HRESULT (*SetIUri)(IUriBuilder*,IUri*);
 *     HRESULT (*GetFragment)(IUriBuilder*,DWORD*,LPCWSTR*);
 *     HRESULT (*GetHost)(IUriBuilder*,DWORD*,LPCWSTR*);
 *     HRESULT (*GetPassword)(IUriBuilder*,DWORD*,LPCWSTR*);
 *     HRESULT (*GetPath)(IUriBuilder*,DWORD*,LPCWSTR*);
 *     HRESULT (*GetPort)(IUriBuilder*,BOOL*,DWORD*);
 *     HRESULT (*GetQuery)(IUriBuilder*,DWORD*,LPCWSTR*);
 *     HRESULT (*GetSchemeName)(IUriBuilder*,DWORD*,LPCWSTR*);
 *     HRESULT (*GetUserNameA)(IUriBuilder*,DWORD*,LPCWSTR*);
 *     HRESULT (*SetFragment)(IUriBuilder*,LPCWSTR);
 *     HRESULT (*SetHost)(IUriBuilder*,LPCWSTR);
 *     HRESULT (*SetPassword)(IUriBuilder*,LPCWSTR);
 *     HRESULT (*SetPath)(IUriBuilder*,LPCWSTR);
 *     HRESULT (*SetPortA)(IUriBuilder*,BOOL,DWORD);
 *     HRESULT (*SetQuery)(IUriBuilder*,LPCWSTR);
 *     HRESULT (*SetSchemeName)(IUriBuilder*,LPCWSTR);
 *     HRESULT (*SetUserName)(IUriBuilder*,LPCWSTR);
 *     HRESULT (*RemoveProperties)(IUriBuilder*,DWORD);
 *     HRESULT (*HasBeenModified)(IUriBuilder*,BOOL*);
 * };
 * }
 */
public class IUriBuilderVtbl {

    public static MemoryLayout $LAYOUT() {
        return constants$4159.const$1;
    }
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IUriBuilder*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4159.const$2, fi, constants$37.const$3, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle QueryInterface$VH() {
        return constants$4159.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IUriBuilder*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4159.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IUriBuilder*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        constants$4159.const$3.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4159.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4159.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, Arena scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*AddRef)(IUriBuilder*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4159.const$4, fi, constants$18.const$5, scope);
        }
        static AddRef ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle AddRef$VH() {
        return constants$4159.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IUriBuilder*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4159.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IUriBuilder*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        constants$4159.const$5.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4159.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4159.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, Arena scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*Release)(IUriBuilder*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4160.const$0, fi, constants$18.const$5, scope);
        }
        static Release ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$495.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Release$VH() {
        return constants$4160.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IUriBuilder*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4160.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IUriBuilder*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        constants$4160.const$1.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4160.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4160.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, Arena scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*CreateUriSimple)(IUriBuilder*,DWORD,DWORD_PTR,IUri**);
     * }
     */
    public interface CreateUriSimple {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, long _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(CreateUriSimple fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4160.const$2, fi, constants$616.const$4, scope);
        }
        static CreateUriSimple ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, long __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)constants$4160.const$3.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CreateUriSimple$VH() {
        return constants$4160.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*CreateUriSimple)(IUriBuilder*,DWORD,DWORD_PTR,IUri**);
     * }
     */
    public static MemorySegment CreateUriSimple$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4160.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*CreateUriSimple)(IUriBuilder*,DWORD,DWORD_PTR,IUri**);
     * }
     */
    public static void CreateUriSimple$set(MemorySegment seg, MemorySegment x) {
        constants$4160.const$4.set(seg, x);
    }
    public static MemorySegment CreateUriSimple$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4160.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void CreateUriSimple$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4160.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static CreateUriSimple CreateUriSimple(MemorySegment segment, Arena scope) {
        return CreateUriSimple.ofAddress(CreateUriSimple$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*CreateUri)(IUriBuilder*,DWORD,DWORD,DWORD_PTR,IUri**);
     * }
     */
    public interface CreateUri {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, long _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(CreateUri fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4160.const$5, fi, constants$1261.const$2, scope);
        }
        static CreateUri ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, long __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)constants$4161.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CreateUri$VH() {
        return constants$4161.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*CreateUri)(IUriBuilder*,DWORD,DWORD,DWORD_PTR,IUri**);
     * }
     */
    public static MemorySegment CreateUri$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4161.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*CreateUri)(IUriBuilder*,DWORD,DWORD,DWORD_PTR,IUri**);
     * }
     */
    public static void CreateUri$set(MemorySegment seg, MemorySegment x) {
        constants$4161.const$1.set(seg, x);
    }
    public static MemorySegment CreateUri$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4161.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void CreateUri$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4161.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static CreateUri CreateUri(MemorySegment segment, Arena scope) {
        return CreateUri.ofAddress(CreateUri$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*CreateUriWithFlags)(IUriBuilder*,DWORD,DWORD,DWORD,DWORD_PTR,IUri**);
     * }
     */
    public interface CreateUriWithFlags {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, int _x3, long _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(CreateUriWithFlags fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4161.const$2, fi, constants$4156.const$2, scope);
        }
        static CreateUriWithFlags ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, int __x3, long __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    return (int)constants$4161.const$3.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CreateUriWithFlags$VH() {
        return constants$4161.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*CreateUriWithFlags)(IUriBuilder*,DWORD,DWORD,DWORD,DWORD_PTR,IUri**);
     * }
     */
    public static MemorySegment CreateUriWithFlags$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4161.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*CreateUriWithFlags)(IUriBuilder*,DWORD,DWORD,DWORD,DWORD_PTR,IUri**);
     * }
     */
    public static void CreateUriWithFlags$set(MemorySegment seg, MemorySegment x) {
        constants$4161.const$4.set(seg, x);
    }
    public static MemorySegment CreateUriWithFlags$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4161.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void CreateUriWithFlags$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4161.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static CreateUriWithFlags CreateUriWithFlags(MemorySegment segment, Arena scope) {
        return CreateUriWithFlags.ofAddress(CreateUriWithFlags$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetIUri)(IUriBuilder*,IUri**);
     * }
     */
    public interface GetIUri {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetIUri fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4161.const$5, fi, constants$34.const$0, scope);
        }
        static GetIUri ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetIUri$VH() {
        return constants$4162.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetIUri)(IUriBuilder*,IUri**);
     * }
     */
    public static MemorySegment GetIUri$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4162.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetIUri)(IUriBuilder*,IUri**);
     * }
     */
    public static void GetIUri$set(MemorySegment seg, MemorySegment x) {
        constants$4162.const$0.set(seg, x);
    }
    public static MemorySegment GetIUri$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4162.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void GetIUri$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4162.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetIUri GetIUri(MemorySegment segment, Arena scope) {
        return GetIUri.ofAddress(GetIUri$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetIUri)(IUriBuilder*,IUri*);
     * }
     */
    public interface SetIUri {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetIUri fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4162.const$1, fi, constants$34.const$0, scope);
        }
        static SetIUri ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetIUri$VH() {
        return constants$4162.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetIUri)(IUriBuilder*,IUri*);
     * }
     */
    public static MemorySegment SetIUri$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4162.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetIUri)(IUriBuilder*,IUri*);
     * }
     */
    public static void SetIUri$set(MemorySegment seg, MemorySegment x) {
        constants$4162.const$2.set(seg, x);
    }
    public static MemorySegment SetIUri$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4162.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void SetIUri$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4162.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetIUri SetIUri(MemorySegment segment, Arena scope) {
        return SetIUri.ofAddress(SetIUri$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetFragment)(IUriBuilder*,DWORD*,LPCWSTR*);
     * }
     */
    public interface GetFragment {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetFragment fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4162.const$3, fi, constants$37.const$3, scope);
        }
        static GetFragment ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetFragment$VH() {
        return constants$4162.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetFragment)(IUriBuilder*,DWORD*,LPCWSTR*);
     * }
     */
    public static MemorySegment GetFragment$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4162.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetFragment)(IUriBuilder*,DWORD*,LPCWSTR*);
     * }
     */
    public static void GetFragment$set(MemorySegment seg, MemorySegment x) {
        constants$4162.const$4.set(seg, x);
    }
    public static MemorySegment GetFragment$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4162.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void GetFragment$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4162.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetFragment GetFragment(MemorySegment segment, Arena scope) {
        return GetFragment.ofAddress(GetFragment$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetHost)(IUriBuilder*,DWORD*,LPCWSTR*);
     * }
     */
    public interface GetHost {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetHost fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4162.const$5, fi, constants$37.const$3, scope);
        }
        static GetHost ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetHost$VH() {
        return constants$4163.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetHost)(IUriBuilder*,DWORD*,LPCWSTR*);
     * }
     */
    public static MemorySegment GetHost$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4163.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetHost)(IUriBuilder*,DWORD*,LPCWSTR*);
     * }
     */
    public static void GetHost$set(MemorySegment seg, MemorySegment x) {
        constants$4163.const$0.set(seg, x);
    }
    public static MemorySegment GetHost$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4163.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void GetHost$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4163.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetHost GetHost(MemorySegment segment, Arena scope) {
        return GetHost.ofAddress(GetHost$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetPassword)(IUriBuilder*,DWORD*,LPCWSTR*);
     * }
     */
    public interface GetPassword {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetPassword fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4163.const$1, fi, constants$37.const$3, scope);
        }
        static GetPassword ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetPassword$VH() {
        return constants$4163.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetPassword)(IUriBuilder*,DWORD*,LPCWSTR*);
     * }
     */
    public static MemorySegment GetPassword$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4163.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetPassword)(IUriBuilder*,DWORD*,LPCWSTR*);
     * }
     */
    public static void GetPassword$set(MemorySegment seg, MemorySegment x) {
        constants$4163.const$2.set(seg, x);
    }
    public static MemorySegment GetPassword$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4163.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void GetPassword$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4163.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetPassword GetPassword(MemorySegment segment, Arena scope) {
        return GetPassword.ofAddress(GetPassword$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetPath)(IUriBuilder*,DWORD*,LPCWSTR*);
     * }
     */
    public interface GetPath {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetPath fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4163.const$3, fi, constants$37.const$3, scope);
        }
        static GetPath ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetPath$VH() {
        return constants$4163.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetPath)(IUriBuilder*,DWORD*,LPCWSTR*);
     * }
     */
    public static MemorySegment GetPath$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4163.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetPath)(IUriBuilder*,DWORD*,LPCWSTR*);
     * }
     */
    public static void GetPath$set(MemorySegment seg, MemorySegment x) {
        constants$4163.const$4.set(seg, x);
    }
    public static MemorySegment GetPath$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4163.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void GetPath$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4163.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetPath GetPath(MemorySegment segment, Arena scope) {
        return GetPath.ofAddress(GetPath$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetPort)(IUriBuilder*,BOOL*,DWORD*);
     * }
     */
    public interface GetPort {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetPort fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4163.const$5, fi, constants$37.const$3, scope);
        }
        static GetPort ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetPort$VH() {
        return constants$4164.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetPort)(IUriBuilder*,BOOL*,DWORD*);
     * }
     */
    public static MemorySegment GetPort$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4164.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetPort)(IUriBuilder*,BOOL*,DWORD*);
     * }
     */
    public static void GetPort$set(MemorySegment seg, MemorySegment x) {
        constants$4164.const$0.set(seg, x);
    }
    public static MemorySegment GetPort$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4164.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void GetPort$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4164.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetPort GetPort(MemorySegment segment, Arena scope) {
        return GetPort.ofAddress(GetPort$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetQuery)(IUriBuilder*,DWORD*,LPCWSTR*);
     * }
     */
    public interface GetQuery {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetQuery fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4164.const$1, fi, constants$37.const$3, scope);
        }
        static GetQuery ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetQuery$VH() {
        return constants$4164.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetQuery)(IUriBuilder*,DWORD*,LPCWSTR*);
     * }
     */
    public static MemorySegment GetQuery$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4164.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetQuery)(IUriBuilder*,DWORD*,LPCWSTR*);
     * }
     */
    public static void GetQuery$set(MemorySegment seg, MemorySegment x) {
        constants$4164.const$2.set(seg, x);
    }
    public static MemorySegment GetQuery$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4164.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void GetQuery$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4164.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetQuery GetQuery(MemorySegment segment, Arena scope) {
        return GetQuery.ofAddress(GetQuery$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetSchemeName)(IUriBuilder*,DWORD*,LPCWSTR*);
     * }
     */
    public interface GetSchemeName {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetSchemeName fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4164.const$3, fi, constants$37.const$3, scope);
        }
        static GetSchemeName ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetSchemeName$VH() {
        return constants$4164.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetSchemeName)(IUriBuilder*,DWORD*,LPCWSTR*);
     * }
     */
    public static MemorySegment GetSchemeName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4164.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetSchemeName)(IUriBuilder*,DWORD*,LPCWSTR*);
     * }
     */
    public static void GetSchemeName$set(MemorySegment seg, MemorySegment x) {
        constants$4164.const$4.set(seg, x);
    }
    public static MemorySegment GetSchemeName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4164.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void GetSchemeName$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4164.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetSchemeName GetSchemeName(MemorySegment segment, Arena scope) {
        return GetSchemeName.ofAddress(GetSchemeName$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*GetUserNameA)(IUriBuilder*,DWORD*,LPCWSTR*);
     * }
     */
    public interface GetUserNameA {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetUserNameA fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4164.const$5, fi, constants$37.const$3, scope);
        }
        static GetUserNameA ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$620.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetUserNameA$VH() {
        return constants$4165.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetUserNameA)(IUriBuilder*,DWORD*,LPCWSTR*);
     * }
     */
    public static MemorySegment GetUserNameA$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4165.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetUserNameA)(IUriBuilder*,DWORD*,LPCWSTR*);
     * }
     */
    public static void GetUserNameA$set(MemorySegment seg, MemorySegment x) {
        constants$4165.const$0.set(seg, x);
    }
    public static MemorySegment GetUserNameA$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4165.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void GetUserNameA$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4165.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetUserNameA GetUserNameA(MemorySegment segment, Arena scope) {
        return GetUserNameA.ofAddress(GetUserNameA$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetFragment)(IUriBuilder*,LPCWSTR);
     * }
     */
    public interface SetFragment {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetFragment fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4165.const$1, fi, constants$34.const$0, scope);
        }
        static SetFragment ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetFragment$VH() {
        return constants$4165.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetFragment)(IUriBuilder*,LPCWSTR);
     * }
     */
    public static MemorySegment SetFragment$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4165.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetFragment)(IUriBuilder*,LPCWSTR);
     * }
     */
    public static void SetFragment$set(MemorySegment seg, MemorySegment x) {
        constants$4165.const$2.set(seg, x);
    }
    public static MemorySegment SetFragment$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4165.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void SetFragment$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4165.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetFragment SetFragment(MemorySegment segment, Arena scope) {
        return SetFragment.ofAddress(SetFragment$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetHost)(IUriBuilder*,LPCWSTR);
     * }
     */
    public interface SetHost {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetHost fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4165.const$3, fi, constants$34.const$0, scope);
        }
        static SetHost ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetHost$VH() {
        return constants$4165.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetHost)(IUriBuilder*,LPCWSTR);
     * }
     */
    public static MemorySegment SetHost$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4165.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetHost)(IUriBuilder*,LPCWSTR);
     * }
     */
    public static void SetHost$set(MemorySegment seg, MemorySegment x) {
        constants$4165.const$4.set(seg, x);
    }
    public static MemorySegment SetHost$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4165.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void SetHost$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4165.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetHost SetHost(MemorySegment segment, Arena scope) {
        return SetHost.ofAddress(SetHost$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetPassword)(IUriBuilder*,LPCWSTR);
     * }
     */
    public interface SetPassword {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetPassword fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4165.const$5, fi, constants$34.const$0, scope);
        }
        static SetPassword ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetPassword$VH() {
        return constants$4166.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetPassword)(IUriBuilder*,LPCWSTR);
     * }
     */
    public static MemorySegment SetPassword$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4166.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetPassword)(IUriBuilder*,LPCWSTR);
     * }
     */
    public static void SetPassword$set(MemorySegment seg, MemorySegment x) {
        constants$4166.const$0.set(seg, x);
    }
    public static MemorySegment SetPassword$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4166.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void SetPassword$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4166.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetPassword SetPassword(MemorySegment segment, Arena scope) {
        return SetPassword.ofAddress(SetPassword$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetPath)(IUriBuilder*,LPCWSTR);
     * }
     */
    public interface SetPath {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetPath fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4166.const$1, fi, constants$34.const$0, scope);
        }
        static SetPath ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetPath$VH() {
        return constants$4166.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetPath)(IUriBuilder*,LPCWSTR);
     * }
     */
    public static MemorySegment SetPath$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4166.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetPath)(IUriBuilder*,LPCWSTR);
     * }
     */
    public static void SetPath$set(MemorySegment seg, MemorySegment x) {
        constants$4166.const$2.set(seg, x);
    }
    public static MemorySegment SetPath$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4166.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void SetPath$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4166.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetPath SetPath(MemorySegment segment, Arena scope) {
        return SetPath.ofAddress(SetPath$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetPortA)(IUriBuilder*,BOOL,DWORD);
     * }
     */
    public interface SetPortA {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2);
        static MemorySegment allocate(SetPortA fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4166.const$3, fi, constants$67.const$1, scope);
        }
        static SetPortA ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2) -> {
                try {
                    return (int)constants$3030.const$1.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetPortA$VH() {
        return constants$4166.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetPortA)(IUriBuilder*,BOOL,DWORD);
     * }
     */
    public static MemorySegment SetPortA$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4166.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetPortA)(IUriBuilder*,BOOL,DWORD);
     * }
     */
    public static void SetPortA$set(MemorySegment seg, MemorySegment x) {
        constants$4166.const$4.set(seg, x);
    }
    public static MemorySegment SetPortA$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4166.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void SetPortA$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4166.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetPortA SetPortA(MemorySegment segment, Arena scope) {
        return SetPortA.ofAddress(SetPortA$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetQuery)(IUriBuilder*,LPCWSTR);
     * }
     */
    public interface SetQuery {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetQuery fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4166.const$5, fi, constants$34.const$0, scope);
        }
        static SetQuery ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetQuery$VH() {
        return constants$4167.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetQuery)(IUriBuilder*,LPCWSTR);
     * }
     */
    public static MemorySegment SetQuery$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4167.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetQuery)(IUriBuilder*,LPCWSTR);
     * }
     */
    public static void SetQuery$set(MemorySegment seg, MemorySegment x) {
        constants$4167.const$0.set(seg, x);
    }
    public static MemorySegment SetQuery$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4167.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void SetQuery$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4167.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetQuery SetQuery(MemorySegment segment, Arena scope) {
        return SetQuery.ofAddress(SetQuery$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetSchemeName)(IUriBuilder*,LPCWSTR);
     * }
     */
    public interface SetSchemeName {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetSchemeName fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4167.const$1, fi, constants$34.const$0, scope);
        }
        static SetSchemeName ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetSchemeName$VH() {
        return constants$4167.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetSchemeName)(IUriBuilder*,LPCWSTR);
     * }
     */
    public static MemorySegment SetSchemeName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4167.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetSchemeName)(IUriBuilder*,LPCWSTR);
     * }
     */
    public static void SetSchemeName$set(MemorySegment seg, MemorySegment x) {
        constants$4167.const$2.set(seg, x);
    }
    public static MemorySegment SetSchemeName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4167.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void SetSchemeName$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4167.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetSchemeName SetSchemeName(MemorySegment segment, Arena scope) {
        return SetSchemeName.ofAddress(SetSchemeName$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*SetUserName)(IUriBuilder*,LPCWSTR);
     * }
     */
    public interface SetUserName {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetUserName fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4167.const$3, fi, constants$34.const$0, scope);
        }
        static SetUserName ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetUserName$VH() {
        return constants$4167.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetUserName)(IUriBuilder*,LPCWSTR);
     * }
     */
    public static MemorySegment SetUserName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4167.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetUserName)(IUriBuilder*,LPCWSTR);
     * }
     */
    public static void SetUserName$set(MemorySegment seg, MemorySegment x) {
        constants$4167.const$4.set(seg, x);
    }
    public static MemorySegment SetUserName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4167.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void SetUserName$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4167.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetUserName SetUserName(MemorySegment segment, Arena scope) {
        return SetUserName.ofAddress(SetUserName$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*RemoveProperties)(IUriBuilder*,DWORD);
     * }
     */
    public interface RemoveProperties {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(RemoveProperties fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4167.const$5, fi, constants$65.const$2, scope);
        }
        static RemoveProperties ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)constants$800.const$4.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle RemoveProperties$VH() {
        return constants$4168.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*RemoveProperties)(IUriBuilder*,DWORD);
     * }
     */
    public static MemorySegment RemoveProperties$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4168.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*RemoveProperties)(IUriBuilder*,DWORD);
     * }
     */
    public static void RemoveProperties$set(MemorySegment seg, MemorySegment x) {
        constants$4168.const$0.set(seg, x);
    }
    public static MemorySegment RemoveProperties$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4168.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void RemoveProperties$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4168.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static RemoveProperties RemoveProperties(MemorySegment segment, Arena scope) {
        return RemoveProperties.ofAddress(RemoveProperties$get(segment), scope);
    }
    /**
     * {@snippet :
 * HRESULT (*HasBeenModified)(IUriBuilder*,BOOL*);
     * }
     */
    public interface HasBeenModified {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(HasBeenModified fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$4168.const$1, fi, constants$34.const$0, scope);
        }
        static HasBeenModified ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$92.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle HasBeenModified$VH() {
        return constants$4168.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*HasBeenModified)(IUriBuilder*,BOOL*);
     * }
     */
    public static MemorySegment HasBeenModified$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4168.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*HasBeenModified)(IUriBuilder*,BOOL*);
     * }
     */
    public static void HasBeenModified$set(MemorySegment seg, MemorySegment x) {
        constants$4168.const$2.set(seg, x);
    }
    public static MemorySegment HasBeenModified$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4168.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void HasBeenModified$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4168.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static HasBeenModified HasBeenModified(MemorySegment segment, Arena scope) {
        return HasBeenModified.ofAddress(HasBeenModified$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



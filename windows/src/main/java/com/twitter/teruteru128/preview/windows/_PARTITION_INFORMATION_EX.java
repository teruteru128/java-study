// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _PARTITION_INFORMATION_EX {
 *     PARTITION_STYLE PartitionStyle;
 *     LARGE_INTEGER StartingOffset;
 *     LARGE_INTEGER PartitionLength;
 *     DWORD PartitionNumber;
 *     BOOLEAN RewritePartition;
 *     BOOLEAN IsServicePartition;
 *     union {
 *         PARTITION_INFORMATION_MBR Mbr;
 *         PARTITION_INFORMATION_GPT Gpt;
 *     };
 * };
 * }
 */
public class _PARTITION_INFORMATION_EX {

    public static MemoryLayout $LAYOUT() {
        return constants$2541.const$0;
    }
    public static VarHandle PartitionStyle$VH() {
        return constants$2541.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PARTITION_STYLE PartitionStyle;
     * }
     */
    public static int PartitionStyle$get(MemorySegment seg) {
        return (int)constants$2541.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PARTITION_STYLE PartitionStyle;
     * }
     */
    public static void PartitionStyle$set(MemorySegment seg, int x) {
        constants$2541.const$1.set(seg, x);
    }
    public static int PartitionStyle$get(MemorySegment seg, long index) {
        return (int)constants$2541.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void PartitionStyle$set(MemorySegment seg, long index, int x) {
        constants$2541.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment StartingOffset$slice(MemorySegment seg) {
        return seg.asSlice(8, 8);
    }
    public static MemorySegment PartitionLength$slice(MemorySegment seg) {
        return seg.asSlice(16, 8);
    }
    public static VarHandle PartitionNumber$VH() {
        return constants$2541.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD PartitionNumber;
     * }
     */
    public static int PartitionNumber$get(MemorySegment seg) {
        return (int)constants$2541.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD PartitionNumber;
     * }
     */
    public static void PartitionNumber$set(MemorySegment seg, int x) {
        constants$2541.const$2.set(seg, x);
    }
    public static int PartitionNumber$get(MemorySegment seg, long index) {
        return (int)constants$2541.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void PartitionNumber$set(MemorySegment seg, long index, int x) {
        constants$2541.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle RewritePartition$VH() {
        return constants$2541.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BOOLEAN RewritePartition;
     * }
     */
    public static byte RewritePartition$get(MemorySegment seg) {
        return (byte)constants$2541.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BOOLEAN RewritePartition;
     * }
     */
    public static void RewritePartition$set(MemorySegment seg, byte x) {
        constants$2541.const$3.set(seg, x);
    }
    public static byte RewritePartition$get(MemorySegment seg, long index) {
        return (byte)constants$2541.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void RewritePartition$set(MemorySegment seg, long index, byte x) {
        constants$2541.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle IsServicePartition$VH() {
        return constants$2541.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BOOLEAN IsServicePartition;
     * }
     */
    public static byte IsServicePartition$get(MemorySegment seg) {
        return (byte)constants$2541.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BOOLEAN IsServicePartition;
     * }
     */
    public static void IsServicePartition$set(MemorySegment seg, byte x) {
        constants$2541.const$4.set(seg, x);
    }
    public static byte IsServicePartition$get(MemorySegment seg, long index) {
        return (byte)constants$2541.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void IsServicePartition$set(MemorySegment seg, long index, byte x) {
        constants$2541.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Mbr$slice(MemorySegment seg) {
        return seg.asSlice(32, 24);
    }
    public static MemorySegment Gpt$slice(MemorySegment seg) {
        return seg.asSlice(32, 112);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _FILE_FULL_DIR_INFO {
 *     ULONG NextEntryOffset;
 *     ULONG FileIndex;
 *     LARGE_INTEGER CreationTime;
 *     LARGE_INTEGER LastAccessTime;
 *     LARGE_INTEGER LastWriteTime;
 *     LARGE_INTEGER ChangeTime;
 *     LARGE_INTEGER EndOfFile;
 *     LARGE_INTEGER AllocationSize;
 *     ULONG FileAttributes;
 *     ULONG FileNameLength;
 *     ULONG EaSize;
 *     WCHAR FileName[1];
 * };
 * }
 */
public class _FILE_FULL_DIR_INFO {

    public static MemoryLayout $LAYOUT() {
        return constants$871.const$4;
    }
    public static VarHandle NextEntryOffset$VH() {
        return constants$871.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG NextEntryOffset;
     * }
     */
    public static int NextEntryOffset$get(MemorySegment seg) {
        return (int)constants$871.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG NextEntryOffset;
     * }
     */
    public static void NextEntryOffset$set(MemorySegment seg, int x) {
        constants$871.const$5.set(seg, x);
    }
    public static int NextEntryOffset$get(MemorySegment seg, long index) {
        return (int)constants$871.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void NextEntryOffset$set(MemorySegment seg, long index, int x) {
        constants$871.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle FileIndex$VH() {
        return constants$872.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG FileIndex;
     * }
     */
    public static int FileIndex$get(MemorySegment seg) {
        return (int)constants$872.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG FileIndex;
     * }
     */
    public static void FileIndex$set(MemorySegment seg, int x) {
        constants$872.const$0.set(seg, x);
    }
    public static int FileIndex$get(MemorySegment seg, long index) {
        return (int)constants$872.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void FileIndex$set(MemorySegment seg, long index, int x) {
        constants$872.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment CreationTime$slice(MemorySegment seg) {
        return seg.asSlice(8, 8);
    }
    public static MemorySegment LastAccessTime$slice(MemorySegment seg) {
        return seg.asSlice(16, 8);
    }
    public static MemorySegment LastWriteTime$slice(MemorySegment seg) {
        return seg.asSlice(24, 8);
    }
    public static MemorySegment ChangeTime$slice(MemorySegment seg) {
        return seg.asSlice(32, 8);
    }
    public static MemorySegment EndOfFile$slice(MemorySegment seg) {
        return seg.asSlice(40, 8);
    }
    public static MemorySegment AllocationSize$slice(MemorySegment seg) {
        return seg.asSlice(48, 8);
    }
    public static VarHandle FileAttributes$VH() {
        return constants$872.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG FileAttributes;
     * }
     */
    public static int FileAttributes$get(MemorySegment seg) {
        return (int)constants$872.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG FileAttributes;
     * }
     */
    public static void FileAttributes$set(MemorySegment seg, int x) {
        constants$872.const$1.set(seg, x);
    }
    public static int FileAttributes$get(MemorySegment seg, long index) {
        return (int)constants$872.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void FileAttributes$set(MemorySegment seg, long index, int x) {
        constants$872.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle FileNameLength$VH() {
        return constants$872.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG FileNameLength;
     * }
     */
    public static int FileNameLength$get(MemorySegment seg) {
        return (int)constants$872.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG FileNameLength;
     * }
     */
    public static void FileNameLength$set(MemorySegment seg, int x) {
        constants$872.const$2.set(seg, x);
    }
    public static int FileNameLength$get(MemorySegment seg, long index) {
        return (int)constants$872.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void FileNameLength$set(MemorySegment seg, long index, int x) {
        constants$872.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle EaSize$VH() {
        return constants$872.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG EaSize;
     * }
     */
    public static int EaSize$get(MemorySegment seg) {
        return (int)constants$872.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG EaSize;
     * }
     */
    public static void EaSize$set(MemorySegment seg, int x) {
        constants$872.const$3.set(seg, x);
    }
    public static int EaSize$get(MemorySegment seg, long index) {
        return (int)constants$872.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void EaSize$set(MemorySegment seg, long index, int x) {
        constants$872.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment FileName$slice(MemorySegment seg) {
        return seg.asSlice(68, 2);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



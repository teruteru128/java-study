// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _IMAGE_OS2_HEADER {
 *     WORD ne_magic;
 *     CHAR ne_ver;
 *     CHAR ne_rev;
 *     WORD ne_enttab;
 *     WORD ne_cbenttab;
 *     LONG ne_crc;
 *     WORD ne_flags;
 *     WORD ne_autodata;
 *     WORD ne_heap;
 *     WORD ne_stack;
 *     LONG ne_csip;
 *     LONG ne_sssp;
 *     WORD ne_cseg;
 *     WORD ne_cmod;
 *     WORD ne_cbnrestab;
 *     WORD ne_segtab;
 *     WORD ne_rsrctab;
 *     WORD ne_restab;
 *     WORD ne_modtab;
 *     WORD ne_imptab;
 *     LONG ne_nrestab;
 *     WORD ne_cmovent;
 *     WORD ne_align;
 *     WORD ne_cres;
 *     BYTE ne_exetyp;
 *     BYTE ne_flagsothers;
 *     WORD ne_pretthunks;
 *     WORD ne_psegrefbytes;
 *     WORD ne_swaparea;
 *     WORD ne_expver;
 * };
 * }
 */
public class _IMAGE_OS2_HEADER {

    public static MemoryLayout $LAYOUT() {
        return constants$353.const$3;
    }
    public static VarHandle ne_magic$VH() {
        return constants$353.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD ne_magic;
     * }
     */
    public static short ne_magic$get(MemorySegment seg) {
        return (short)constants$353.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD ne_magic;
     * }
     */
    public static void ne_magic$set(MemorySegment seg, short x) {
        constants$353.const$4.set(seg, x);
    }
    public static short ne_magic$get(MemorySegment seg, long index) {
        return (short)constants$353.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void ne_magic$set(MemorySegment seg, long index, short x) {
        constants$353.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ne_ver$VH() {
        return constants$353.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * CHAR ne_ver;
     * }
     */
    public static byte ne_ver$get(MemorySegment seg) {
        return (byte)constants$353.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * CHAR ne_ver;
     * }
     */
    public static void ne_ver$set(MemorySegment seg, byte x) {
        constants$353.const$5.set(seg, x);
    }
    public static byte ne_ver$get(MemorySegment seg, long index) {
        return (byte)constants$353.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void ne_ver$set(MemorySegment seg, long index, byte x) {
        constants$353.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ne_rev$VH() {
        return constants$354.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * CHAR ne_rev;
     * }
     */
    public static byte ne_rev$get(MemorySegment seg) {
        return (byte)constants$354.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * CHAR ne_rev;
     * }
     */
    public static void ne_rev$set(MemorySegment seg, byte x) {
        constants$354.const$0.set(seg, x);
    }
    public static byte ne_rev$get(MemorySegment seg, long index) {
        return (byte)constants$354.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void ne_rev$set(MemorySegment seg, long index, byte x) {
        constants$354.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ne_enttab$VH() {
        return constants$354.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD ne_enttab;
     * }
     */
    public static short ne_enttab$get(MemorySegment seg) {
        return (short)constants$354.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD ne_enttab;
     * }
     */
    public static void ne_enttab$set(MemorySegment seg, short x) {
        constants$354.const$1.set(seg, x);
    }
    public static short ne_enttab$get(MemorySegment seg, long index) {
        return (short)constants$354.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void ne_enttab$set(MemorySegment seg, long index, short x) {
        constants$354.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ne_cbenttab$VH() {
        return constants$354.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD ne_cbenttab;
     * }
     */
    public static short ne_cbenttab$get(MemorySegment seg) {
        return (short)constants$354.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD ne_cbenttab;
     * }
     */
    public static void ne_cbenttab$set(MemorySegment seg, short x) {
        constants$354.const$2.set(seg, x);
    }
    public static short ne_cbenttab$get(MemorySegment seg, long index) {
        return (short)constants$354.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void ne_cbenttab$set(MemorySegment seg, long index, short x) {
        constants$354.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ne_crc$VH() {
        return constants$354.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LONG ne_crc;
     * }
     */
    public static int ne_crc$get(MemorySegment seg) {
        return (int)constants$354.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LONG ne_crc;
     * }
     */
    public static void ne_crc$set(MemorySegment seg, int x) {
        constants$354.const$3.set(seg, x);
    }
    public static int ne_crc$get(MemorySegment seg, long index) {
        return (int)constants$354.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void ne_crc$set(MemorySegment seg, long index, int x) {
        constants$354.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ne_flags$VH() {
        return constants$354.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD ne_flags;
     * }
     */
    public static short ne_flags$get(MemorySegment seg) {
        return (short)constants$354.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD ne_flags;
     * }
     */
    public static void ne_flags$set(MemorySegment seg, short x) {
        constants$354.const$4.set(seg, x);
    }
    public static short ne_flags$get(MemorySegment seg, long index) {
        return (short)constants$354.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void ne_flags$set(MemorySegment seg, long index, short x) {
        constants$354.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ne_autodata$VH() {
        return constants$354.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD ne_autodata;
     * }
     */
    public static short ne_autodata$get(MemorySegment seg) {
        return (short)constants$354.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD ne_autodata;
     * }
     */
    public static void ne_autodata$set(MemorySegment seg, short x) {
        constants$354.const$5.set(seg, x);
    }
    public static short ne_autodata$get(MemorySegment seg, long index) {
        return (short)constants$354.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void ne_autodata$set(MemorySegment seg, long index, short x) {
        constants$354.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ne_heap$VH() {
        return constants$355.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD ne_heap;
     * }
     */
    public static short ne_heap$get(MemorySegment seg) {
        return (short)constants$355.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD ne_heap;
     * }
     */
    public static void ne_heap$set(MemorySegment seg, short x) {
        constants$355.const$0.set(seg, x);
    }
    public static short ne_heap$get(MemorySegment seg, long index) {
        return (short)constants$355.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void ne_heap$set(MemorySegment seg, long index, short x) {
        constants$355.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ne_stack$VH() {
        return constants$355.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD ne_stack;
     * }
     */
    public static short ne_stack$get(MemorySegment seg) {
        return (short)constants$355.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD ne_stack;
     * }
     */
    public static void ne_stack$set(MemorySegment seg, short x) {
        constants$355.const$1.set(seg, x);
    }
    public static short ne_stack$get(MemorySegment seg, long index) {
        return (short)constants$355.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void ne_stack$set(MemorySegment seg, long index, short x) {
        constants$355.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ne_csip$VH() {
        return constants$355.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LONG ne_csip;
     * }
     */
    public static int ne_csip$get(MemorySegment seg) {
        return (int)constants$355.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LONG ne_csip;
     * }
     */
    public static void ne_csip$set(MemorySegment seg, int x) {
        constants$355.const$2.set(seg, x);
    }
    public static int ne_csip$get(MemorySegment seg, long index) {
        return (int)constants$355.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void ne_csip$set(MemorySegment seg, long index, int x) {
        constants$355.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ne_sssp$VH() {
        return constants$355.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LONG ne_sssp;
     * }
     */
    public static int ne_sssp$get(MemorySegment seg) {
        return (int)constants$355.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LONG ne_sssp;
     * }
     */
    public static void ne_sssp$set(MemorySegment seg, int x) {
        constants$355.const$3.set(seg, x);
    }
    public static int ne_sssp$get(MemorySegment seg, long index) {
        return (int)constants$355.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void ne_sssp$set(MemorySegment seg, long index, int x) {
        constants$355.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ne_cseg$VH() {
        return constants$355.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD ne_cseg;
     * }
     */
    public static short ne_cseg$get(MemorySegment seg) {
        return (short)constants$355.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD ne_cseg;
     * }
     */
    public static void ne_cseg$set(MemorySegment seg, short x) {
        constants$355.const$4.set(seg, x);
    }
    public static short ne_cseg$get(MemorySegment seg, long index) {
        return (short)constants$355.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void ne_cseg$set(MemorySegment seg, long index, short x) {
        constants$355.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ne_cmod$VH() {
        return constants$355.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD ne_cmod;
     * }
     */
    public static short ne_cmod$get(MemorySegment seg) {
        return (short)constants$355.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD ne_cmod;
     * }
     */
    public static void ne_cmod$set(MemorySegment seg, short x) {
        constants$355.const$5.set(seg, x);
    }
    public static short ne_cmod$get(MemorySegment seg, long index) {
        return (short)constants$355.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void ne_cmod$set(MemorySegment seg, long index, short x) {
        constants$355.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ne_cbnrestab$VH() {
        return constants$356.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD ne_cbnrestab;
     * }
     */
    public static short ne_cbnrestab$get(MemorySegment seg) {
        return (short)constants$356.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD ne_cbnrestab;
     * }
     */
    public static void ne_cbnrestab$set(MemorySegment seg, short x) {
        constants$356.const$0.set(seg, x);
    }
    public static short ne_cbnrestab$get(MemorySegment seg, long index) {
        return (short)constants$356.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void ne_cbnrestab$set(MemorySegment seg, long index, short x) {
        constants$356.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ne_segtab$VH() {
        return constants$356.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD ne_segtab;
     * }
     */
    public static short ne_segtab$get(MemorySegment seg) {
        return (short)constants$356.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD ne_segtab;
     * }
     */
    public static void ne_segtab$set(MemorySegment seg, short x) {
        constants$356.const$1.set(seg, x);
    }
    public static short ne_segtab$get(MemorySegment seg, long index) {
        return (short)constants$356.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void ne_segtab$set(MemorySegment seg, long index, short x) {
        constants$356.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ne_rsrctab$VH() {
        return constants$356.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD ne_rsrctab;
     * }
     */
    public static short ne_rsrctab$get(MemorySegment seg) {
        return (short)constants$356.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD ne_rsrctab;
     * }
     */
    public static void ne_rsrctab$set(MemorySegment seg, short x) {
        constants$356.const$2.set(seg, x);
    }
    public static short ne_rsrctab$get(MemorySegment seg, long index) {
        return (short)constants$356.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void ne_rsrctab$set(MemorySegment seg, long index, short x) {
        constants$356.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ne_restab$VH() {
        return constants$356.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD ne_restab;
     * }
     */
    public static short ne_restab$get(MemorySegment seg) {
        return (short)constants$356.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD ne_restab;
     * }
     */
    public static void ne_restab$set(MemorySegment seg, short x) {
        constants$356.const$3.set(seg, x);
    }
    public static short ne_restab$get(MemorySegment seg, long index) {
        return (short)constants$356.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void ne_restab$set(MemorySegment seg, long index, short x) {
        constants$356.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ne_modtab$VH() {
        return constants$356.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD ne_modtab;
     * }
     */
    public static short ne_modtab$get(MemorySegment seg) {
        return (short)constants$356.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD ne_modtab;
     * }
     */
    public static void ne_modtab$set(MemorySegment seg, short x) {
        constants$356.const$4.set(seg, x);
    }
    public static short ne_modtab$get(MemorySegment seg, long index) {
        return (short)constants$356.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void ne_modtab$set(MemorySegment seg, long index, short x) {
        constants$356.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ne_imptab$VH() {
        return constants$356.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD ne_imptab;
     * }
     */
    public static short ne_imptab$get(MemorySegment seg) {
        return (short)constants$356.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD ne_imptab;
     * }
     */
    public static void ne_imptab$set(MemorySegment seg, short x) {
        constants$356.const$5.set(seg, x);
    }
    public static short ne_imptab$get(MemorySegment seg, long index) {
        return (short)constants$356.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void ne_imptab$set(MemorySegment seg, long index, short x) {
        constants$356.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ne_nrestab$VH() {
        return constants$357.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LONG ne_nrestab;
     * }
     */
    public static int ne_nrestab$get(MemorySegment seg) {
        return (int)constants$357.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LONG ne_nrestab;
     * }
     */
    public static void ne_nrestab$set(MemorySegment seg, int x) {
        constants$357.const$0.set(seg, x);
    }
    public static int ne_nrestab$get(MemorySegment seg, long index) {
        return (int)constants$357.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void ne_nrestab$set(MemorySegment seg, long index, int x) {
        constants$357.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ne_cmovent$VH() {
        return constants$357.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD ne_cmovent;
     * }
     */
    public static short ne_cmovent$get(MemorySegment seg) {
        return (short)constants$357.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD ne_cmovent;
     * }
     */
    public static void ne_cmovent$set(MemorySegment seg, short x) {
        constants$357.const$1.set(seg, x);
    }
    public static short ne_cmovent$get(MemorySegment seg, long index) {
        return (short)constants$357.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void ne_cmovent$set(MemorySegment seg, long index, short x) {
        constants$357.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ne_align$VH() {
        return constants$357.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD ne_align;
     * }
     */
    public static short ne_align$get(MemorySegment seg) {
        return (short)constants$357.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD ne_align;
     * }
     */
    public static void ne_align$set(MemorySegment seg, short x) {
        constants$357.const$2.set(seg, x);
    }
    public static short ne_align$get(MemorySegment seg, long index) {
        return (short)constants$357.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void ne_align$set(MemorySegment seg, long index, short x) {
        constants$357.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ne_cres$VH() {
        return constants$357.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD ne_cres;
     * }
     */
    public static short ne_cres$get(MemorySegment seg) {
        return (short)constants$357.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD ne_cres;
     * }
     */
    public static void ne_cres$set(MemorySegment seg, short x) {
        constants$357.const$3.set(seg, x);
    }
    public static short ne_cres$get(MemorySegment seg, long index) {
        return (short)constants$357.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void ne_cres$set(MemorySegment seg, long index, short x) {
        constants$357.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ne_exetyp$VH() {
        return constants$357.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE ne_exetyp;
     * }
     */
    public static byte ne_exetyp$get(MemorySegment seg) {
        return (byte)constants$357.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE ne_exetyp;
     * }
     */
    public static void ne_exetyp$set(MemorySegment seg, byte x) {
        constants$357.const$4.set(seg, x);
    }
    public static byte ne_exetyp$get(MemorySegment seg, long index) {
        return (byte)constants$357.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void ne_exetyp$set(MemorySegment seg, long index, byte x) {
        constants$357.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ne_flagsothers$VH() {
        return constants$357.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE ne_flagsothers;
     * }
     */
    public static byte ne_flagsothers$get(MemorySegment seg) {
        return (byte)constants$357.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE ne_flagsothers;
     * }
     */
    public static void ne_flagsothers$set(MemorySegment seg, byte x) {
        constants$357.const$5.set(seg, x);
    }
    public static byte ne_flagsothers$get(MemorySegment seg, long index) {
        return (byte)constants$357.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void ne_flagsothers$set(MemorySegment seg, long index, byte x) {
        constants$357.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ne_pretthunks$VH() {
        return constants$358.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD ne_pretthunks;
     * }
     */
    public static short ne_pretthunks$get(MemorySegment seg) {
        return (short)constants$358.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD ne_pretthunks;
     * }
     */
    public static void ne_pretthunks$set(MemorySegment seg, short x) {
        constants$358.const$0.set(seg, x);
    }
    public static short ne_pretthunks$get(MemorySegment seg, long index) {
        return (short)constants$358.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void ne_pretthunks$set(MemorySegment seg, long index, short x) {
        constants$358.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ne_psegrefbytes$VH() {
        return constants$358.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD ne_psegrefbytes;
     * }
     */
    public static short ne_psegrefbytes$get(MemorySegment seg) {
        return (short)constants$358.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD ne_psegrefbytes;
     * }
     */
    public static void ne_psegrefbytes$set(MemorySegment seg, short x) {
        constants$358.const$1.set(seg, x);
    }
    public static short ne_psegrefbytes$get(MemorySegment seg, long index) {
        return (short)constants$358.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void ne_psegrefbytes$set(MemorySegment seg, long index, short x) {
        constants$358.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ne_swaparea$VH() {
        return constants$358.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD ne_swaparea;
     * }
     */
    public static short ne_swaparea$get(MemorySegment seg) {
        return (short)constants$358.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD ne_swaparea;
     * }
     */
    public static void ne_swaparea$set(MemorySegment seg, short x) {
        constants$358.const$2.set(seg, x);
    }
    public static short ne_swaparea$get(MemorySegment seg, long index) {
        return (short)constants$358.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void ne_swaparea$set(MemorySegment seg, long index, short x) {
        constants$358.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ne_expver$VH() {
        return constants$358.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD ne_expver;
     * }
     */
    public static short ne_expver$get(MemorySegment seg) {
        return (short)constants$358.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD ne_expver;
     * }
     */
    public static void ne_expver$set(MemorySegment seg, short x) {
        constants$358.const$3.set(seg, x);
    }
    public static short ne_expver$get(MemorySegment seg, long index) {
        return (short)constants$358.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void ne_expver$set(MemorySegment seg, long index, short x) {
        constants$358.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



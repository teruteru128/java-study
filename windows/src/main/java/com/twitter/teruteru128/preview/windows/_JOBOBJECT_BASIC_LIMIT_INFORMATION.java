// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _JOBOBJECT_BASIC_LIMIT_INFORMATION {
 *     LARGE_INTEGER PerProcessUserTimeLimit;
 *     LARGE_INTEGER PerJobUserTimeLimit;
 *     DWORD LimitFlags;
 *     SIZE_T MinimumWorkingSetSize;
 *     SIZE_T MaximumWorkingSetSize;
 *     DWORD ActiveProcessLimit;
 *     ULONG_PTR Affinity;
 *     DWORD PriorityClass;
 *     DWORD SchedulingClass;
 * };
 * }
 */
public class _JOBOBJECT_BASIC_LIMIT_INFORMATION {

    public static MemoryLayout $LAYOUT() {
        return constants$203.const$0;
    }
    public static MemorySegment PerProcessUserTimeLimit$slice(MemorySegment seg) {
        return seg.asSlice(0, 8);
    }
    public static MemorySegment PerJobUserTimeLimit$slice(MemorySegment seg) {
        return seg.asSlice(8, 8);
    }
    public static VarHandle LimitFlags$VH() {
        return constants$203.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD LimitFlags;
     * }
     */
    public static int LimitFlags$get(MemorySegment seg) {
        return (int)constants$203.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD LimitFlags;
     * }
     */
    public static void LimitFlags$set(MemorySegment seg, int x) {
        constants$203.const$1.set(seg, x);
    }
    public static int LimitFlags$get(MemorySegment seg, long index) {
        return (int)constants$203.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void LimitFlags$set(MemorySegment seg, long index, int x) {
        constants$203.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MinimumWorkingSetSize$VH() {
        return constants$203.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * SIZE_T MinimumWorkingSetSize;
     * }
     */
    public static long MinimumWorkingSetSize$get(MemorySegment seg) {
        return (long)constants$203.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * SIZE_T MinimumWorkingSetSize;
     * }
     */
    public static void MinimumWorkingSetSize$set(MemorySegment seg, long x) {
        constants$203.const$2.set(seg, x);
    }
    public static long MinimumWorkingSetSize$get(MemorySegment seg, long index) {
        return (long)constants$203.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void MinimumWorkingSetSize$set(MemorySegment seg, long index, long x) {
        constants$203.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MaximumWorkingSetSize$VH() {
        return constants$203.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * SIZE_T MaximumWorkingSetSize;
     * }
     */
    public static long MaximumWorkingSetSize$get(MemorySegment seg) {
        return (long)constants$203.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * SIZE_T MaximumWorkingSetSize;
     * }
     */
    public static void MaximumWorkingSetSize$set(MemorySegment seg, long x) {
        constants$203.const$3.set(seg, x);
    }
    public static long MaximumWorkingSetSize$get(MemorySegment seg, long index) {
        return (long)constants$203.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void MaximumWorkingSetSize$set(MemorySegment seg, long index, long x) {
        constants$203.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ActiveProcessLimit$VH() {
        return constants$203.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD ActiveProcessLimit;
     * }
     */
    public static int ActiveProcessLimit$get(MemorySegment seg) {
        return (int)constants$203.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD ActiveProcessLimit;
     * }
     */
    public static void ActiveProcessLimit$set(MemorySegment seg, int x) {
        constants$203.const$4.set(seg, x);
    }
    public static int ActiveProcessLimit$get(MemorySegment seg, long index) {
        return (int)constants$203.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void ActiveProcessLimit$set(MemorySegment seg, long index, int x) {
        constants$203.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Affinity$VH() {
        return constants$203.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG_PTR Affinity;
     * }
     */
    public static long Affinity$get(MemorySegment seg) {
        return (long)constants$203.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG_PTR Affinity;
     * }
     */
    public static void Affinity$set(MemorySegment seg, long x) {
        constants$203.const$5.set(seg, x);
    }
    public static long Affinity$get(MemorySegment seg, long index) {
        return (long)constants$203.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void Affinity$set(MemorySegment seg, long index, long x) {
        constants$203.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle PriorityClass$VH() {
        return constants$204.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD PriorityClass;
     * }
     */
    public static int PriorityClass$get(MemorySegment seg) {
        return (int)constants$204.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD PriorityClass;
     * }
     */
    public static void PriorityClass$set(MemorySegment seg, int x) {
        constants$204.const$0.set(seg, x);
    }
    public static int PriorityClass$get(MemorySegment seg, long index) {
        return (int)constants$204.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void PriorityClass$set(MemorySegment seg, long index, int x) {
        constants$204.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle SchedulingClass$VH() {
        return constants$204.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD SchedulingClass;
     * }
     */
    public static int SchedulingClass$get(MemorySegment seg) {
        return (int)constants$204.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD SchedulingClass;
     * }
     */
    public static void SchedulingClass$set(MemorySegment seg, int x) {
        constants$204.const$1.set(seg, x);
    }
    public static int SchedulingClass$get(MemorySegment seg, long index) {
        return (int)constants$204.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void SchedulingClass$set(MemorySegment seg, long index, int x) {
        constants$204.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



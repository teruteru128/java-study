// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _ENCRYPTED_DATA_INFO {
 *     DWORDLONG StartingFileOffset;
 *     DWORD OutputBufferOffset;
 *     DWORD BytesWithinFileSize;
 *     DWORD BytesWithinValidDataLength;
 *     WORD CompressionFormat;
 *     BYTE DataUnitShift;
 *     BYTE ChunkShift;
 *     BYTE ClusterShift;
 *     BYTE EncryptionFormat;
 *     WORD NumberOfDataBlocks;
 *     DWORD DataBlockSize[1];
 * };
 * }
 */
public class _ENCRYPTED_DATA_INFO {

    public static MemoryLayout $LAYOUT() {
        return constants$2639.const$3;
    }
    public static VarHandle StartingFileOffset$VH() {
        return constants$2639.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORDLONG StartingFileOffset;
     * }
     */
    public static long StartingFileOffset$get(MemorySegment seg) {
        return (long)constants$2639.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORDLONG StartingFileOffset;
     * }
     */
    public static void StartingFileOffset$set(MemorySegment seg, long x) {
        constants$2639.const$4.set(seg, x);
    }
    public static long StartingFileOffset$get(MemorySegment seg, long index) {
        return (long)constants$2639.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void StartingFileOffset$set(MemorySegment seg, long index, long x) {
        constants$2639.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle OutputBufferOffset$VH() {
        return constants$2639.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD OutputBufferOffset;
     * }
     */
    public static int OutputBufferOffset$get(MemorySegment seg) {
        return (int)constants$2639.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD OutputBufferOffset;
     * }
     */
    public static void OutputBufferOffset$set(MemorySegment seg, int x) {
        constants$2639.const$5.set(seg, x);
    }
    public static int OutputBufferOffset$get(MemorySegment seg, long index) {
        return (int)constants$2639.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void OutputBufferOffset$set(MemorySegment seg, long index, int x) {
        constants$2639.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle BytesWithinFileSize$VH() {
        return constants$2640.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD BytesWithinFileSize;
     * }
     */
    public static int BytesWithinFileSize$get(MemorySegment seg) {
        return (int)constants$2640.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD BytesWithinFileSize;
     * }
     */
    public static void BytesWithinFileSize$set(MemorySegment seg, int x) {
        constants$2640.const$0.set(seg, x);
    }
    public static int BytesWithinFileSize$get(MemorySegment seg, long index) {
        return (int)constants$2640.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void BytesWithinFileSize$set(MemorySegment seg, long index, int x) {
        constants$2640.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle BytesWithinValidDataLength$VH() {
        return constants$2640.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD BytesWithinValidDataLength;
     * }
     */
    public static int BytesWithinValidDataLength$get(MemorySegment seg) {
        return (int)constants$2640.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD BytesWithinValidDataLength;
     * }
     */
    public static void BytesWithinValidDataLength$set(MemorySegment seg, int x) {
        constants$2640.const$1.set(seg, x);
    }
    public static int BytesWithinValidDataLength$get(MemorySegment seg, long index) {
        return (int)constants$2640.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void BytesWithinValidDataLength$set(MemorySegment seg, long index, int x) {
        constants$2640.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle CompressionFormat$VH() {
        return constants$2640.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD CompressionFormat;
     * }
     */
    public static short CompressionFormat$get(MemorySegment seg) {
        return (short)constants$2640.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD CompressionFormat;
     * }
     */
    public static void CompressionFormat$set(MemorySegment seg, short x) {
        constants$2640.const$2.set(seg, x);
    }
    public static short CompressionFormat$get(MemorySegment seg, long index) {
        return (short)constants$2640.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void CompressionFormat$set(MemorySegment seg, long index, short x) {
        constants$2640.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle DataUnitShift$VH() {
        return constants$2640.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE DataUnitShift;
     * }
     */
    public static byte DataUnitShift$get(MemorySegment seg) {
        return (byte)constants$2640.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE DataUnitShift;
     * }
     */
    public static void DataUnitShift$set(MemorySegment seg, byte x) {
        constants$2640.const$3.set(seg, x);
    }
    public static byte DataUnitShift$get(MemorySegment seg, long index) {
        return (byte)constants$2640.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void DataUnitShift$set(MemorySegment seg, long index, byte x) {
        constants$2640.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ChunkShift$VH() {
        return constants$2640.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE ChunkShift;
     * }
     */
    public static byte ChunkShift$get(MemorySegment seg) {
        return (byte)constants$2640.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE ChunkShift;
     * }
     */
    public static void ChunkShift$set(MemorySegment seg, byte x) {
        constants$2640.const$4.set(seg, x);
    }
    public static byte ChunkShift$get(MemorySegment seg, long index) {
        return (byte)constants$2640.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void ChunkShift$set(MemorySegment seg, long index, byte x) {
        constants$2640.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ClusterShift$VH() {
        return constants$2640.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE ClusterShift;
     * }
     */
    public static byte ClusterShift$get(MemorySegment seg) {
        return (byte)constants$2640.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE ClusterShift;
     * }
     */
    public static void ClusterShift$set(MemorySegment seg, byte x) {
        constants$2640.const$5.set(seg, x);
    }
    public static byte ClusterShift$get(MemorySegment seg, long index) {
        return (byte)constants$2640.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void ClusterShift$set(MemorySegment seg, long index, byte x) {
        constants$2640.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle EncryptionFormat$VH() {
        return constants$2641.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE EncryptionFormat;
     * }
     */
    public static byte EncryptionFormat$get(MemorySegment seg) {
        return (byte)constants$2641.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE EncryptionFormat;
     * }
     */
    public static void EncryptionFormat$set(MemorySegment seg, byte x) {
        constants$2641.const$0.set(seg, x);
    }
    public static byte EncryptionFormat$get(MemorySegment seg, long index) {
        return (byte)constants$2641.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void EncryptionFormat$set(MemorySegment seg, long index, byte x) {
        constants$2641.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle NumberOfDataBlocks$VH() {
        return constants$2641.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD NumberOfDataBlocks;
     * }
     */
    public static short NumberOfDataBlocks$get(MemorySegment seg) {
        return (short)constants$2641.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD NumberOfDataBlocks;
     * }
     */
    public static void NumberOfDataBlocks$set(MemorySegment seg, short x) {
        constants$2641.const$1.set(seg, x);
    }
    public static short NumberOfDataBlocks$get(MemorySegment seg, long index) {
        return (short)constants$2641.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void NumberOfDataBlocks$set(MemorySegment seg, long index, short x) {
        constants$2641.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment DataBlockSize$slice(MemorySegment seg) {
        return seg.asSlice(28, 4);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



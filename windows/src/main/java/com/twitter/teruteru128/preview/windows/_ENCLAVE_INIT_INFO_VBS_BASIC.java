// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _ENCLAVE_INIT_INFO_VBS_BASIC {
 *     BYTE FamilyId[16];
 *     BYTE ImageId[16];
 *     ULONGLONG EnclaveSize;
 *     DWORD EnclaveSvn;
 *     DWORD Reserved;
 *     union {
 *         HANDLE SignatureInfoHandle;
 *         ULONGLONG Unused;
 *     };
 * };
 * }
 */
public class _ENCLAVE_INIT_INFO_VBS_BASIC {

    public static MemoryLayout $LAYOUT() {
        return constants$248.const$5;
    }
    public static MemorySegment FamilyId$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    public static MemorySegment ImageId$slice(MemorySegment seg) {
        return seg.asSlice(16, 16);
    }
    public static VarHandle EnclaveSize$VH() {
        return constants$249.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONGLONG EnclaveSize;
     * }
     */
    public static long EnclaveSize$get(MemorySegment seg) {
        return (long)constants$249.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONGLONG EnclaveSize;
     * }
     */
    public static void EnclaveSize$set(MemorySegment seg, long x) {
        constants$249.const$0.set(seg, x);
    }
    public static long EnclaveSize$get(MemorySegment seg, long index) {
        return (long)constants$249.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void EnclaveSize$set(MemorySegment seg, long index, long x) {
        constants$249.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle EnclaveSvn$VH() {
        return constants$249.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD EnclaveSvn;
     * }
     */
    public static int EnclaveSvn$get(MemorySegment seg) {
        return (int)constants$249.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD EnclaveSvn;
     * }
     */
    public static void EnclaveSvn$set(MemorySegment seg, int x) {
        constants$249.const$1.set(seg, x);
    }
    public static int EnclaveSvn$get(MemorySegment seg, long index) {
        return (int)constants$249.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void EnclaveSvn$set(MemorySegment seg, long index, int x) {
        constants$249.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Reserved$VH() {
        return constants$249.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Reserved;
     * }
     */
    public static int Reserved$get(MemorySegment seg) {
        return (int)constants$249.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Reserved;
     * }
     */
    public static void Reserved$set(MemorySegment seg, int x) {
        constants$249.const$2.set(seg, x);
    }
    public static int Reserved$get(MemorySegment seg, long index) {
        return (int)constants$249.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void Reserved$set(MemorySegment seg, long index, int x) {
        constants$249.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle SignatureInfoHandle$VH() {
        return constants$249.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HANDLE SignatureInfoHandle;
     * }
     */
    public static MemorySegment SignatureInfoHandle$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$249.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HANDLE SignatureInfoHandle;
     * }
     */
    public static void SignatureInfoHandle$set(MemorySegment seg, MemorySegment x) {
        constants$249.const$3.set(seg, x);
    }
    public static MemorySegment SignatureInfoHandle$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$249.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void SignatureInfoHandle$set(MemorySegment seg, long index, MemorySegment x) {
        constants$249.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Unused$VH() {
        return constants$249.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONGLONG Unused;
     * }
     */
    public static long Unused$get(MemorySegment seg) {
        return (long)constants$249.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONGLONG Unused;
     * }
     */
    public static void Unused$set(MemorySegment seg, long x) {
        constants$249.const$4.set(seg, x);
    }
    public static long Unused$get(MemorySegment seg, long index) {
        return (long)constants$249.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void Unused$set(MemorySegment seg, long index, long x) {
        constants$249.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



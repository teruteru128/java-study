// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _MEMORYSTATUS {
 *     DWORD dwLength;
 *     DWORD dwMemoryLoad;
 *     SIZE_T dwTotalPhys;
 *     SIZE_T dwAvailPhys;
 *     SIZE_T dwTotalPageFile;
 *     SIZE_T dwAvailPageFile;
 *     SIZE_T dwTotalVirtual;
 *     SIZE_T dwAvailVirtual;
 * };
 * }
 */
public class _MEMORYSTATUS {

    public static MemoryLayout $LAYOUT() {
        return constants$751.const$3;
    }
    public static VarHandle dwLength$VH() {
        return constants$751.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwLength;
     * }
     */
    public static int dwLength$get(MemorySegment seg) {
        return (int)constants$751.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwLength;
     * }
     */
    public static void dwLength$set(MemorySegment seg, int x) {
        constants$751.const$4.set(seg, x);
    }
    public static int dwLength$get(MemorySegment seg, long index) {
        return (int)constants$751.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void dwLength$set(MemorySegment seg, long index, int x) {
        constants$751.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwMemoryLoad$VH() {
        return constants$751.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwMemoryLoad;
     * }
     */
    public static int dwMemoryLoad$get(MemorySegment seg) {
        return (int)constants$751.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwMemoryLoad;
     * }
     */
    public static void dwMemoryLoad$set(MemorySegment seg, int x) {
        constants$751.const$5.set(seg, x);
    }
    public static int dwMemoryLoad$get(MemorySegment seg, long index) {
        return (int)constants$751.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void dwMemoryLoad$set(MemorySegment seg, long index, int x) {
        constants$751.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwTotalPhys$VH() {
        return constants$752.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * SIZE_T dwTotalPhys;
     * }
     */
    public static long dwTotalPhys$get(MemorySegment seg) {
        return (long)constants$752.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * SIZE_T dwTotalPhys;
     * }
     */
    public static void dwTotalPhys$set(MemorySegment seg, long x) {
        constants$752.const$0.set(seg, x);
    }
    public static long dwTotalPhys$get(MemorySegment seg, long index) {
        return (long)constants$752.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void dwTotalPhys$set(MemorySegment seg, long index, long x) {
        constants$752.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwAvailPhys$VH() {
        return constants$752.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * SIZE_T dwAvailPhys;
     * }
     */
    public static long dwAvailPhys$get(MemorySegment seg) {
        return (long)constants$752.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * SIZE_T dwAvailPhys;
     * }
     */
    public static void dwAvailPhys$set(MemorySegment seg, long x) {
        constants$752.const$1.set(seg, x);
    }
    public static long dwAvailPhys$get(MemorySegment seg, long index) {
        return (long)constants$752.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void dwAvailPhys$set(MemorySegment seg, long index, long x) {
        constants$752.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwTotalPageFile$VH() {
        return constants$752.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * SIZE_T dwTotalPageFile;
     * }
     */
    public static long dwTotalPageFile$get(MemorySegment seg) {
        return (long)constants$752.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * SIZE_T dwTotalPageFile;
     * }
     */
    public static void dwTotalPageFile$set(MemorySegment seg, long x) {
        constants$752.const$2.set(seg, x);
    }
    public static long dwTotalPageFile$get(MemorySegment seg, long index) {
        return (long)constants$752.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void dwTotalPageFile$set(MemorySegment seg, long index, long x) {
        constants$752.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwAvailPageFile$VH() {
        return constants$752.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * SIZE_T dwAvailPageFile;
     * }
     */
    public static long dwAvailPageFile$get(MemorySegment seg) {
        return (long)constants$752.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * SIZE_T dwAvailPageFile;
     * }
     */
    public static void dwAvailPageFile$set(MemorySegment seg, long x) {
        constants$752.const$3.set(seg, x);
    }
    public static long dwAvailPageFile$get(MemorySegment seg, long index) {
        return (long)constants$752.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void dwAvailPageFile$set(MemorySegment seg, long index, long x) {
        constants$752.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwTotalVirtual$VH() {
        return constants$752.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * SIZE_T dwTotalVirtual;
     * }
     */
    public static long dwTotalVirtual$get(MemorySegment seg) {
        return (long)constants$752.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * SIZE_T dwTotalVirtual;
     * }
     */
    public static void dwTotalVirtual$set(MemorySegment seg, long x) {
        constants$752.const$4.set(seg, x);
    }
    public static long dwTotalVirtual$get(MemorySegment seg, long index) {
        return (long)constants$752.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void dwTotalVirtual$set(MemorySegment seg, long index, long x) {
        constants$752.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwAvailVirtual$VH() {
        return constants$752.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * SIZE_T dwAvailVirtual;
     * }
     */
    public static long dwAvailVirtual$get(MemorySegment seg) {
        return (long)constants$752.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * SIZE_T dwAvailVirtual;
     * }
     */
    public static void dwAvailVirtual$set(MemorySegment seg, long x) {
        constants$752.const$5.set(seg, x);
    }
    public static long dwAvailVirtual$get(MemorySegment seg, long index) {
        return (long)constants$752.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void dwAvailVirtual$set(MemorySegment seg, long index, long x) {
        constants$752.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



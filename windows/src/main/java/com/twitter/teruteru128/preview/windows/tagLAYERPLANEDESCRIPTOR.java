// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tagLAYERPLANEDESCRIPTOR {
 *     WORD nSize;
 *     WORD nVersion;
 *     DWORD dwFlags;
 *     BYTE iPixelType;
 *     BYTE cColorBits;
 *     BYTE cRedBits;
 *     BYTE cRedShift;
 *     BYTE cGreenBits;
 *     BYTE cGreenShift;
 *     BYTE cBlueBits;
 *     BYTE cBlueShift;
 *     BYTE cAlphaBits;
 *     BYTE cAlphaShift;
 *     BYTE cAccumBits;
 *     BYTE cAccumRedBits;
 *     BYTE cAccumGreenBits;
 *     BYTE cAccumBlueBits;
 *     BYTE cAccumAlphaBits;
 *     BYTE cDepthBits;
 *     BYTE cStencilBits;
 *     BYTE cAuxBuffers;
 *     BYTE iLayerPlane;
 *     BYTE bReserved;
 *     COLORREF crTransparent;
 * };
 * }
 */
public class tagLAYERPLANEDESCRIPTOR {

    public static MemoryLayout $LAYOUT() {
        return constants$1126.const$0;
    }
    public static VarHandle nSize$VH() {
        return constants$1126.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD nSize;
     * }
     */
    public static short nSize$get(MemorySegment seg) {
        return (short)constants$1126.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD nSize;
     * }
     */
    public static void nSize$set(MemorySegment seg, short x) {
        constants$1126.const$1.set(seg, x);
    }
    public static short nSize$get(MemorySegment seg, long index) {
        return (short)constants$1126.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void nSize$set(MemorySegment seg, long index, short x) {
        constants$1126.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nVersion$VH() {
        return constants$1126.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD nVersion;
     * }
     */
    public static short nVersion$get(MemorySegment seg) {
        return (short)constants$1126.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD nVersion;
     * }
     */
    public static void nVersion$set(MemorySegment seg, short x) {
        constants$1126.const$2.set(seg, x);
    }
    public static short nVersion$get(MemorySegment seg, long index) {
        return (short)constants$1126.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void nVersion$set(MemorySegment seg, long index, short x) {
        constants$1126.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwFlags$VH() {
        return constants$1126.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwFlags;
     * }
     */
    public static int dwFlags$get(MemorySegment seg) {
        return (int)constants$1126.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwFlags;
     * }
     */
    public static void dwFlags$set(MemorySegment seg, int x) {
        constants$1126.const$3.set(seg, x);
    }
    public static int dwFlags$get(MemorySegment seg, long index) {
        return (int)constants$1126.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void dwFlags$set(MemorySegment seg, long index, int x) {
        constants$1126.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle iPixelType$VH() {
        return constants$1126.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE iPixelType;
     * }
     */
    public static byte iPixelType$get(MemorySegment seg) {
        return (byte)constants$1126.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE iPixelType;
     * }
     */
    public static void iPixelType$set(MemorySegment seg, byte x) {
        constants$1126.const$4.set(seg, x);
    }
    public static byte iPixelType$get(MemorySegment seg, long index) {
        return (byte)constants$1126.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void iPixelType$set(MemorySegment seg, long index, byte x) {
        constants$1126.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cColorBits$VH() {
        return constants$1126.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE cColorBits;
     * }
     */
    public static byte cColorBits$get(MemorySegment seg) {
        return (byte)constants$1126.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE cColorBits;
     * }
     */
    public static void cColorBits$set(MemorySegment seg, byte x) {
        constants$1126.const$5.set(seg, x);
    }
    public static byte cColorBits$get(MemorySegment seg, long index) {
        return (byte)constants$1126.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void cColorBits$set(MemorySegment seg, long index, byte x) {
        constants$1126.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cRedBits$VH() {
        return constants$1127.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE cRedBits;
     * }
     */
    public static byte cRedBits$get(MemorySegment seg) {
        return (byte)constants$1127.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE cRedBits;
     * }
     */
    public static void cRedBits$set(MemorySegment seg, byte x) {
        constants$1127.const$0.set(seg, x);
    }
    public static byte cRedBits$get(MemorySegment seg, long index) {
        return (byte)constants$1127.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void cRedBits$set(MemorySegment seg, long index, byte x) {
        constants$1127.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cRedShift$VH() {
        return constants$1127.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE cRedShift;
     * }
     */
    public static byte cRedShift$get(MemorySegment seg) {
        return (byte)constants$1127.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE cRedShift;
     * }
     */
    public static void cRedShift$set(MemorySegment seg, byte x) {
        constants$1127.const$1.set(seg, x);
    }
    public static byte cRedShift$get(MemorySegment seg, long index) {
        return (byte)constants$1127.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void cRedShift$set(MemorySegment seg, long index, byte x) {
        constants$1127.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cGreenBits$VH() {
        return constants$1127.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE cGreenBits;
     * }
     */
    public static byte cGreenBits$get(MemorySegment seg) {
        return (byte)constants$1127.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE cGreenBits;
     * }
     */
    public static void cGreenBits$set(MemorySegment seg, byte x) {
        constants$1127.const$2.set(seg, x);
    }
    public static byte cGreenBits$get(MemorySegment seg, long index) {
        return (byte)constants$1127.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void cGreenBits$set(MemorySegment seg, long index, byte x) {
        constants$1127.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cGreenShift$VH() {
        return constants$1127.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE cGreenShift;
     * }
     */
    public static byte cGreenShift$get(MemorySegment seg) {
        return (byte)constants$1127.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE cGreenShift;
     * }
     */
    public static void cGreenShift$set(MemorySegment seg, byte x) {
        constants$1127.const$3.set(seg, x);
    }
    public static byte cGreenShift$get(MemorySegment seg, long index) {
        return (byte)constants$1127.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void cGreenShift$set(MemorySegment seg, long index, byte x) {
        constants$1127.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cBlueBits$VH() {
        return constants$1127.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE cBlueBits;
     * }
     */
    public static byte cBlueBits$get(MemorySegment seg) {
        return (byte)constants$1127.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE cBlueBits;
     * }
     */
    public static void cBlueBits$set(MemorySegment seg, byte x) {
        constants$1127.const$4.set(seg, x);
    }
    public static byte cBlueBits$get(MemorySegment seg, long index) {
        return (byte)constants$1127.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void cBlueBits$set(MemorySegment seg, long index, byte x) {
        constants$1127.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cBlueShift$VH() {
        return constants$1127.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE cBlueShift;
     * }
     */
    public static byte cBlueShift$get(MemorySegment seg) {
        return (byte)constants$1127.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE cBlueShift;
     * }
     */
    public static void cBlueShift$set(MemorySegment seg, byte x) {
        constants$1127.const$5.set(seg, x);
    }
    public static byte cBlueShift$get(MemorySegment seg, long index) {
        return (byte)constants$1127.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void cBlueShift$set(MemorySegment seg, long index, byte x) {
        constants$1127.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cAlphaBits$VH() {
        return constants$1128.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE cAlphaBits;
     * }
     */
    public static byte cAlphaBits$get(MemorySegment seg) {
        return (byte)constants$1128.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE cAlphaBits;
     * }
     */
    public static void cAlphaBits$set(MemorySegment seg, byte x) {
        constants$1128.const$0.set(seg, x);
    }
    public static byte cAlphaBits$get(MemorySegment seg, long index) {
        return (byte)constants$1128.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void cAlphaBits$set(MemorySegment seg, long index, byte x) {
        constants$1128.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cAlphaShift$VH() {
        return constants$1128.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE cAlphaShift;
     * }
     */
    public static byte cAlphaShift$get(MemorySegment seg) {
        return (byte)constants$1128.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE cAlphaShift;
     * }
     */
    public static void cAlphaShift$set(MemorySegment seg, byte x) {
        constants$1128.const$1.set(seg, x);
    }
    public static byte cAlphaShift$get(MemorySegment seg, long index) {
        return (byte)constants$1128.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void cAlphaShift$set(MemorySegment seg, long index, byte x) {
        constants$1128.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cAccumBits$VH() {
        return constants$1128.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE cAccumBits;
     * }
     */
    public static byte cAccumBits$get(MemorySegment seg) {
        return (byte)constants$1128.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE cAccumBits;
     * }
     */
    public static void cAccumBits$set(MemorySegment seg, byte x) {
        constants$1128.const$2.set(seg, x);
    }
    public static byte cAccumBits$get(MemorySegment seg, long index) {
        return (byte)constants$1128.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void cAccumBits$set(MemorySegment seg, long index, byte x) {
        constants$1128.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cAccumRedBits$VH() {
        return constants$1128.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE cAccumRedBits;
     * }
     */
    public static byte cAccumRedBits$get(MemorySegment seg) {
        return (byte)constants$1128.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE cAccumRedBits;
     * }
     */
    public static void cAccumRedBits$set(MemorySegment seg, byte x) {
        constants$1128.const$3.set(seg, x);
    }
    public static byte cAccumRedBits$get(MemorySegment seg, long index) {
        return (byte)constants$1128.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void cAccumRedBits$set(MemorySegment seg, long index, byte x) {
        constants$1128.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cAccumGreenBits$VH() {
        return constants$1128.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE cAccumGreenBits;
     * }
     */
    public static byte cAccumGreenBits$get(MemorySegment seg) {
        return (byte)constants$1128.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE cAccumGreenBits;
     * }
     */
    public static void cAccumGreenBits$set(MemorySegment seg, byte x) {
        constants$1128.const$4.set(seg, x);
    }
    public static byte cAccumGreenBits$get(MemorySegment seg, long index) {
        return (byte)constants$1128.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void cAccumGreenBits$set(MemorySegment seg, long index, byte x) {
        constants$1128.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cAccumBlueBits$VH() {
        return constants$1128.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE cAccumBlueBits;
     * }
     */
    public static byte cAccumBlueBits$get(MemorySegment seg) {
        return (byte)constants$1128.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE cAccumBlueBits;
     * }
     */
    public static void cAccumBlueBits$set(MemorySegment seg, byte x) {
        constants$1128.const$5.set(seg, x);
    }
    public static byte cAccumBlueBits$get(MemorySegment seg, long index) {
        return (byte)constants$1128.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void cAccumBlueBits$set(MemorySegment seg, long index, byte x) {
        constants$1128.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cAccumAlphaBits$VH() {
        return constants$1129.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE cAccumAlphaBits;
     * }
     */
    public static byte cAccumAlphaBits$get(MemorySegment seg) {
        return (byte)constants$1129.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE cAccumAlphaBits;
     * }
     */
    public static void cAccumAlphaBits$set(MemorySegment seg, byte x) {
        constants$1129.const$0.set(seg, x);
    }
    public static byte cAccumAlphaBits$get(MemorySegment seg, long index) {
        return (byte)constants$1129.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void cAccumAlphaBits$set(MemorySegment seg, long index, byte x) {
        constants$1129.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cDepthBits$VH() {
        return constants$1129.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE cDepthBits;
     * }
     */
    public static byte cDepthBits$get(MemorySegment seg) {
        return (byte)constants$1129.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE cDepthBits;
     * }
     */
    public static void cDepthBits$set(MemorySegment seg, byte x) {
        constants$1129.const$1.set(seg, x);
    }
    public static byte cDepthBits$get(MemorySegment seg, long index) {
        return (byte)constants$1129.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void cDepthBits$set(MemorySegment seg, long index, byte x) {
        constants$1129.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cStencilBits$VH() {
        return constants$1129.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE cStencilBits;
     * }
     */
    public static byte cStencilBits$get(MemorySegment seg) {
        return (byte)constants$1129.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE cStencilBits;
     * }
     */
    public static void cStencilBits$set(MemorySegment seg, byte x) {
        constants$1129.const$2.set(seg, x);
    }
    public static byte cStencilBits$get(MemorySegment seg, long index) {
        return (byte)constants$1129.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void cStencilBits$set(MemorySegment seg, long index, byte x) {
        constants$1129.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cAuxBuffers$VH() {
        return constants$1129.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE cAuxBuffers;
     * }
     */
    public static byte cAuxBuffers$get(MemorySegment seg) {
        return (byte)constants$1129.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE cAuxBuffers;
     * }
     */
    public static void cAuxBuffers$set(MemorySegment seg, byte x) {
        constants$1129.const$3.set(seg, x);
    }
    public static byte cAuxBuffers$get(MemorySegment seg, long index) {
        return (byte)constants$1129.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void cAuxBuffers$set(MemorySegment seg, long index, byte x) {
        constants$1129.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle iLayerPlane$VH() {
        return constants$1129.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE iLayerPlane;
     * }
     */
    public static byte iLayerPlane$get(MemorySegment seg) {
        return (byte)constants$1129.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE iLayerPlane;
     * }
     */
    public static void iLayerPlane$set(MemorySegment seg, byte x) {
        constants$1129.const$4.set(seg, x);
    }
    public static byte iLayerPlane$get(MemorySegment seg, long index) {
        return (byte)constants$1129.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void iLayerPlane$set(MemorySegment seg, long index, byte x) {
        constants$1129.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bReserved$VH() {
        return constants$1129.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE bReserved;
     * }
     */
    public static byte bReserved$get(MemorySegment seg) {
        return (byte)constants$1129.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE bReserved;
     * }
     */
    public static void bReserved$set(MemorySegment seg, byte x) {
        constants$1129.const$5.set(seg, x);
    }
    public static byte bReserved$get(MemorySegment seg, long index) {
        return (byte)constants$1129.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void bReserved$set(MemorySegment seg, long index, byte x) {
        constants$1129.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle crTransparent$VH() {
        return constants$1130.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * COLORREF crTransparent;
     * }
     */
    public static int crTransparent$get(MemorySegment seg) {
        return (int)constants$1130.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * COLORREF crTransparent;
     * }
     */
    public static void crTransparent$set(MemorySegment seg, int x) {
        constants$1130.const$0.set(seg, x);
    }
    public static int crTransparent$get(MemorySegment seg, long index) {
        return (int)constants$1130.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void crTransparent$set(MemorySegment seg, long index, int x) {
        constants$1130.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



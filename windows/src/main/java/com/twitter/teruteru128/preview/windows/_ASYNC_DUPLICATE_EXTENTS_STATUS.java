// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _ASYNC_DUPLICATE_EXTENTS_STATUS {
 *     DWORD Version;
 *     DUPLICATE_EXTENTS_STATE State;
 *     DWORDLONG SourceFileOffset;
 *     DWORDLONG TargetFileOffset;
 *     DWORDLONG ByteCount;
 *     DWORDLONG BytesDuplicated;
 * };
 * }
 */
public class _ASYNC_DUPLICATE_EXTENTS_STATUS {

    public static MemoryLayout $LAYOUT() {
        return constants$2719.const$3;
    }
    public static VarHandle Version$VH() {
        return constants$2719.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Version;
     * }
     */
    public static int Version$get(MemorySegment seg) {
        return (int)constants$2719.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Version;
     * }
     */
    public static void Version$set(MemorySegment seg, int x) {
        constants$2719.const$4.set(seg, x);
    }
    public static int Version$get(MemorySegment seg, long index) {
        return (int)constants$2719.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, int x) {
        constants$2719.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle State$VH() {
        return constants$2719.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DUPLICATE_EXTENTS_STATE State;
     * }
     */
    public static int State$get(MemorySegment seg) {
        return (int)constants$2719.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DUPLICATE_EXTENTS_STATE State;
     * }
     */
    public static void State$set(MemorySegment seg, int x) {
        constants$2719.const$5.set(seg, x);
    }
    public static int State$get(MemorySegment seg, long index) {
        return (int)constants$2719.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void State$set(MemorySegment seg, long index, int x) {
        constants$2719.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle SourceFileOffset$VH() {
        return constants$2720.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORDLONG SourceFileOffset;
     * }
     */
    public static long SourceFileOffset$get(MemorySegment seg) {
        return (long)constants$2720.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORDLONG SourceFileOffset;
     * }
     */
    public static void SourceFileOffset$set(MemorySegment seg, long x) {
        constants$2720.const$0.set(seg, x);
    }
    public static long SourceFileOffset$get(MemorySegment seg, long index) {
        return (long)constants$2720.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void SourceFileOffset$set(MemorySegment seg, long index, long x) {
        constants$2720.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle TargetFileOffset$VH() {
        return constants$2720.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORDLONG TargetFileOffset;
     * }
     */
    public static long TargetFileOffset$get(MemorySegment seg) {
        return (long)constants$2720.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORDLONG TargetFileOffset;
     * }
     */
    public static void TargetFileOffset$set(MemorySegment seg, long x) {
        constants$2720.const$1.set(seg, x);
    }
    public static long TargetFileOffset$get(MemorySegment seg, long index) {
        return (long)constants$2720.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void TargetFileOffset$set(MemorySegment seg, long index, long x) {
        constants$2720.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ByteCount$VH() {
        return constants$2720.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORDLONG ByteCount;
     * }
     */
    public static long ByteCount$get(MemorySegment seg) {
        return (long)constants$2720.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORDLONG ByteCount;
     * }
     */
    public static void ByteCount$set(MemorySegment seg, long x) {
        constants$2720.const$2.set(seg, x);
    }
    public static long ByteCount$get(MemorySegment seg, long index) {
        return (long)constants$2720.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void ByteCount$set(MemorySegment seg, long index, long x) {
        constants$2720.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle BytesDuplicated$VH() {
        return constants$2720.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORDLONG BytesDuplicated;
     * }
     */
    public static long BytesDuplicated$get(MemorySegment seg) {
        return (long)constants$2720.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORDLONG BytesDuplicated;
     * }
     */
    public static void BytesDuplicated$set(MemorySegment seg, long x) {
        constants$2720.const$3.set(seg, x);
    }
    public static long BytesDuplicated$get(MemorySegment seg, long index) {
        return (long)constants$2720.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void BytesDuplicated$set(MemorySegment seg, long index, long x) {
        constants$2720.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



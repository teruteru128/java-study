// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct {
 *     long Dimension;
 *     unsigned long* BufferConformanceMark;
 *     unsigned long* BufferVarianceMark;
 *     unsigned long* MaxCountArray;
 *     unsigned long* OffsetArray;
 *     unsigned long* ActualCountArray;
 * };
 * }
 */
public class ARRAY_INFO {

    public static MemoryLayout $LAYOUT() {
        return constants$2265.const$2;
    }
    public static VarHandle Dimension$VH() {
        return constants$2265.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long Dimension;
     * }
     */
    public static int Dimension$get(MemorySegment seg) {
        return (int)constants$2265.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long Dimension;
     * }
     */
    public static void Dimension$set(MemorySegment seg, int x) {
        constants$2265.const$3.set(seg, x);
    }
    public static int Dimension$get(MemorySegment seg, long index) {
        return (int)constants$2265.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void Dimension$set(MemorySegment seg, long index, int x) {
        constants$2265.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle BufferConformanceMark$VH() {
        return constants$2265.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long* BufferConformanceMark;
     * }
     */
    public static MemorySegment BufferConformanceMark$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2265.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long* BufferConformanceMark;
     * }
     */
    public static void BufferConformanceMark$set(MemorySegment seg, MemorySegment x) {
        constants$2265.const$4.set(seg, x);
    }
    public static MemorySegment BufferConformanceMark$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2265.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void BufferConformanceMark$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2265.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle BufferVarianceMark$VH() {
        return constants$2265.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long* BufferVarianceMark;
     * }
     */
    public static MemorySegment BufferVarianceMark$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2265.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long* BufferVarianceMark;
     * }
     */
    public static void BufferVarianceMark$set(MemorySegment seg, MemorySegment x) {
        constants$2265.const$5.set(seg, x);
    }
    public static MemorySegment BufferVarianceMark$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2265.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void BufferVarianceMark$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2265.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MaxCountArray$VH() {
        return constants$2266.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long* MaxCountArray;
     * }
     */
    public static MemorySegment MaxCountArray$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2266.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long* MaxCountArray;
     * }
     */
    public static void MaxCountArray$set(MemorySegment seg, MemorySegment x) {
        constants$2266.const$0.set(seg, x);
    }
    public static MemorySegment MaxCountArray$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2266.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void MaxCountArray$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2266.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle OffsetArray$VH() {
        return constants$2266.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long* OffsetArray;
     * }
     */
    public static MemorySegment OffsetArray$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2266.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long* OffsetArray;
     * }
     */
    public static void OffsetArray$set(MemorySegment seg, MemorySegment x) {
        constants$2266.const$1.set(seg, x);
    }
    public static MemorySegment OffsetArray$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2266.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void OffsetArray$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2266.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ActualCountArray$VH() {
        return constants$2266.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long* ActualCountArray;
     * }
     */
    public static MemorySegment ActualCountArray$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2266.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long* ActualCountArray;
     * }
     */
    public static void ActualCountArray$set(MemorySegment seg, MemorySegment x) {
        constants$2266.const$2.set(seg, x);
    }
    public static MemorySegment ActualCountArray$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2266.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void ActualCountArray$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2266.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



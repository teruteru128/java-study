// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _PROCESS_HEAP_ENTRY {
 *     PVOID lpData;
 *     DWORD cbData;
 *     BYTE cbOverhead;
 *     BYTE iRegionIndex;
 *     WORD wFlags;
 *     union {
 *         struct  Block;
 *         struct  Region;
 *     };
 * };
 * }
 */
public class _PROCESS_HEAP_ENTRY {

    public static MemoryLayout $LAYOUT() {
        return constants$557.const$2;
    }
    public static VarHandle lpData$VH() {
        return constants$557.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PVOID lpData;
     * }
     */
    public static MemorySegment lpData$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$557.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PVOID lpData;
     * }
     */
    public static void lpData$set(MemorySegment seg, MemorySegment x) {
        constants$557.const$3.set(seg, x);
    }
    public static MemorySegment lpData$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$557.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void lpData$set(MemorySegment seg, long index, MemorySegment x) {
        constants$557.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cbData$VH() {
        return constants$557.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD cbData;
     * }
     */
    public static int cbData$get(MemorySegment seg) {
        return (int)constants$557.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD cbData;
     * }
     */
    public static void cbData$set(MemorySegment seg, int x) {
        constants$557.const$4.set(seg, x);
    }
    public static int cbData$get(MemorySegment seg, long index) {
        return (int)constants$557.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void cbData$set(MemorySegment seg, long index, int x) {
        constants$557.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cbOverhead$VH() {
        return constants$557.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE cbOverhead;
     * }
     */
    public static byte cbOverhead$get(MemorySegment seg) {
        return (byte)constants$557.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE cbOverhead;
     * }
     */
    public static void cbOverhead$set(MemorySegment seg, byte x) {
        constants$557.const$5.set(seg, x);
    }
    public static byte cbOverhead$get(MemorySegment seg, long index) {
        return (byte)constants$557.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void cbOverhead$set(MemorySegment seg, long index, byte x) {
        constants$557.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle iRegionIndex$VH() {
        return constants$558.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE iRegionIndex;
     * }
     */
    public static byte iRegionIndex$get(MemorySegment seg) {
        return (byte)constants$558.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE iRegionIndex;
     * }
     */
    public static void iRegionIndex$set(MemorySegment seg, byte x) {
        constants$558.const$0.set(seg, x);
    }
    public static byte iRegionIndex$get(MemorySegment seg, long index) {
        return (byte)constants$558.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void iRegionIndex$set(MemorySegment seg, long index, byte x) {
        constants$558.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle wFlags$VH() {
        return constants$558.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD wFlags;
     * }
     */
    public static short wFlags$get(MemorySegment seg) {
        return (short)constants$558.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD wFlags;
     * }
     */
    public static void wFlags$set(MemorySegment seg, short x) {
        constants$558.const$1.set(seg, x);
    }
    public static short wFlags$get(MemorySegment seg, long index) {
        return (short)constants$558.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void wFlags$set(MemorySegment seg, long index, short x) {
        constants$558.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
     * struct {
     *     HANDLE hMem;
     *     DWORD dwReserved[3];
     * };
     * }
     */
    public static final class Block {

        // Suppresses default constructor, ensuring non-instantiability.
        private Block() {}
        public static MemoryLayout $LAYOUT() {
            return constants$558.const$2;
        }
        public static VarHandle hMem$VH() {
            return constants$558.const$3;
        }
        /**
         * Getter for field:
         * {@snippet :
         * HANDLE hMem;
         * }
         */
        public static MemorySegment hMem$get(MemorySegment seg) {
            return (java.lang.foreign.MemorySegment)constants$558.const$3.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * HANDLE hMem;
         * }
         */
        public static void hMem$set(MemorySegment seg, MemorySegment x) {
            constants$558.const$3.set(seg, x);
        }
        public static MemorySegment hMem$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemorySegment)constants$558.const$3.get(seg.asSlice(index*sizeof()));
        }
        public static void hMem$set(MemorySegment seg, long index, MemorySegment x) {
            constants$558.const$3.set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment dwReserved$slice(MemorySegment seg) {
            return seg.asSlice(8, 12);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment Block$slice(MemorySegment seg) {
        return seg.asSlice(16, 24);
    }
    /**
     * {@snippet :
     * struct {
     *     DWORD dwCommittedSize;
     *     DWORD dwUnCommittedSize;
     *     LPVOID lpFirstBlock;
     *     LPVOID lpLastBlock;
     * };
     * }
     */
    public static final class Region {

        // Suppresses default constructor, ensuring non-instantiability.
        private Region() {}
        public static MemoryLayout $LAYOUT() {
            return constants$558.const$4;
        }
        public static VarHandle dwCommittedSize$VH() {
            return constants$558.const$5;
        }
        /**
         * Getter for field:
         * {@snippet :
         * DWORD dwCommittedSize;
         * }
         */
        public static int dwCommittedSize$get(MemorySegment seg) {
            return (int)constants$558.const$5.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * DWORD dwCommittedSize;
         * }
         */
        public static void dwCommittedSize$set(MemorySegment seg, int x) {
            constants$558.const$5.set(seg, x);
        }
        public static int dwCommittedSize$get(MemorySegment seg, long index) {
            return (int)constants$558.const$5.get(seg.asSlice(index*sizeof()));
        }
        public static void dwCommittedSize$set(MemorySegment seg, long index, int x) {
            constants$558.const$5.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dwUnCommittedSize$VH() {
            return constants$559.const$0;
        }
        /**
         * Getter for field:
         * {@snippet :
         * DWORD dwUnCommittedSize;
         * }
         */
        public static int dwUnCommittedSize$get(MemorySegment seg) {
            return (int)constants$559.const$0.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * DWORD dwUnCommittedSize;
         * }
         */
        public static void dwUnCommittedSize$set(MemorySegment seg, int x) {
            constants$559.const$0.set(seg, x);
        }
        public static int dwUnCommittedSize$get(MemorySegment seg, long index) {
            return (int)constants$559.const$0.get(seg.asSlice(index*sizeof()));
        }
        public static void dwUnCommittedSize$set(MemorySegment seg, long index, int x) {
            constants$559.const$0.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle lpFirstBlock$VH() {
            return constants$559.const$1;
        }
        /**
         * Getter for field:
         * {@snippet :
         * LPVOID lpFirstBlock;
         * }
         */
        public static MemorySegment lpFirstBlock$get(MemorySegment seg) {
            return (java.lang.foreign.MemorySegment)constants$559.const$1.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * LPVOID lpFirstBlock;
         * }
         */
        public static void lpFirstBlock$set(MemorySegment seg, MemorySegment x) {
            constants$559.const$1.set(seg, x);
        }
        public static MemorySegment lpFirstBlock$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemorySegment)constants$559.const$1.get(seg.asSlice(index*sizeof()));
        }
        public static void lpFirstBlock$set(MemorySegment seg, long index, MemorySegment x) {
            constants$559.const$1.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle lpLastBlock$VH() {
            return constants$559.const$2;
        }
        /**
         * Getter for field:
         * {@snippet :
         * LPVOID lpLastBlock;
         * }
         */
        public static MemorySegment lpLastBlock$get(MemorySegment seg) {
            return (java.lang.foreign.MemorySegment)constants$559.const$2.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * LPVOID lpLastBlock;
         * }
         */
        public static void lpLastBlock$set(MemorySegment seg, MemorySegment x) {
            constants$559.const$2.set(seg, x);
        }
        public static MemorySegment lpLastBlock$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemorySegment)constants$559.const$2.get(seg.asSlice(index*sizeof()));
        }
        public static void lpLastBlock$set(MemorySegment seg, long index, MemorySegment x) {
            constants$559.const$2.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment Region$slice(MemorySegment seg) {
        return seg.asSlice(16, 24);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



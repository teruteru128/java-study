// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _STORAGE_REINITIALIZE_MEDIA {
 *     DWORD Version;
 *     DWORD Size;
 *     DWORD TimeoutInSeconds;
 *     struct {
 *         DWORD SanitizeMethod : 4;
 *         DWORD DisallowUnrestrictedSanitizeExit : 1;
 *         DWORD Reserved : 27;
 *     } SanitizeOption;
 * }
 * }
 */
public class _STORAGE_REINITIALIZE_MEDIA {

    _STORAGE_REINITIALIZE_MEDIA() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        Windows_h.C_LONG.withName("Version"),
        Windows_h.C_LONG.withName("Size"),
        Windows_h.C_LONG.withName("TimeoutInSeconds"),
        _STORAGE_REINITIALIZE_MEDIA.SanitizeOption.layout().withName("SanitizeOption")
    ).withName("_STORAGE_REINITIALIZE_MEDIA");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt Version$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD Version
     * }
     */
    public static final OfInt Version$layout() {
        return Version$LAYOUT;
    }

    private static final long Version$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD Version
     * }
     */
    public static final long Version$offset() {
        return Version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD Version
     * }
     */
    public static int Version(MemorySegment struct) {
        return struct.get(Version$LAYOUT, Version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD Version
     * }
     */
    public static void Version(MemorySegment struct, int fieldValue) {
        struct.set(Version$LAYOUT, Version$OFFSET, fieldValue);
    }

    private static final OfInt Size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD Size
     * }
     */
    public static final OfInt Size$layout() {
        return Size$LAYOUT;
    }

    private static final long Size$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD Size
     * }
     */
    public static final long Size$offset() {
        return Size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD Size
     * }
     */
    public static int Size(MemorySegment struct) {
        return struct.get(Size$LAYOUT, Size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD Size
     * }
     */
    public static void Size(MemorySegment struct, int fieldValue) {
        struct.set(Size$LAYOUT, Size$OFFSET, fieldValue);
    }

    private static final OfInt TimeoutInSeconds$LAYOUT = (OfInt)$LAYOUT.select(groupElement("TimeoutInSeconds"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD TimeoutInSeconds
     * }
     */
    public static final OfInt TimeoutInSeconds$layout() {
        return TimeoutInSeconds$LAYOUT;
    }

    private static final long TimeoutInSeconds$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD TimeoutInSeconds
     * }
     */
    public static final long TimeoutInSeconds$offset() {
        return TimeoutInSeconds$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD TimeoutInSeconds
     * }
     */
    public static int TimeoutInSeconds(MemorySegment struct) {
        return struct.get(TimeoutInSeconds$LAYOUT, TimeoutInSeconds$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD TimeoutInSeconds
     * }
     */
    public static void TimeoutInSeconds(MemorySegment struct, int fieldValue) {
        struct.set(TimeoutInSeconds$LAYOUT, TimeoutInSeconds$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     DWORD SanitizeMethod : 4;
     *     DWORD DisallowUnrestrictedSanitizeExit : 1;
     *     DWORD Reserved : 27;
     * }
     * }
     */
    public static class SanitizeOption {

        SanitizeOption() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            MemoryLayout.paddingLayout(4)
        ).withName("$anon$5596:5");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout SanitizeOption$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("SanitizeOption"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     DWORD SanitizeMethod : 4;
     *     DWORD DisallowUnrestrictedSanitizeExit : 1;
     *     DWORD Reserved : 27;
     * } SanitizeOption
     * }
     */
    public static final GroupLayout SanitizeOption$layout() {
        return SanitizeOption$LAYOUT;
    }

    private static final long SanitizeOption$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     DWORD SanitizeMethod : 4;
     *     DWORD DisallowUnrestrictedSanitizeExit : 1;
     *     DWORD Reserved : 27;
     * } SanitizeOption
     * }
     */
    public static final long SanitizeOption$offset() {
        return SanitizeOption$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     DWORD SanitizeMethod : 4;
     *     DWORD DisallowUnrestrictedSanitizeExit : 1;
     *     DWORD Reserved : 27;
     * } SanitizeOption
     * }
     */
    public static MemorySegment SanitizeOption(MemorySegment struct) {
        return struct.asSlice(SanitizeOption$OFFSET, SanitizeOption$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     DWORD SanitizeMethod : 4;
     *     DWORD DisallowUnrestrictedSanitizeExit : 1;
     *     DWORD Reserved : 27;
     * } SanitizeOption
     * }
     */
    public static void SanitizeOption(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, SanitizeOption$OFFSET, SanitizeOption$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


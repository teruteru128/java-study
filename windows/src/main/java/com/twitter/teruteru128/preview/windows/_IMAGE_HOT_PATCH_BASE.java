// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _IMAGE_HOT_PATCH_BASE {
 *     DWORD SequenceNumber;
 *     DWORD Flags;
 *     DWORD OriginalTimeDateStamp;
 *     DWORD OriginalCheckSum;
 *     DWORD CodeIntegrityInfo;
 *     DWORD CodeIntegritySize;
 *     DWORD PatchTable;
 *     DWORD BufferOffset;
 * };
 * }
 */
public class _IMAGE_HOT_PATCH_BASE {

    public static MemoryLayout $LAYOUT() {
        return constants$440.const$1;
    }
    public static VarHandle SequenceNumber$VH() {
        return constants$440.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD SequenceNumber;
     * }
     */
    public static int SequenceNumber$get(MemorySegment seg) {
        return (int)constants$440.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD SequenceNumber;
     * }
     */
    public static void SequenceNumber$set(MemorySegment seg, int x) {
        constants$440.const$2.set(seg, x);
    }
    public static int SequenceNumber$get(MemorySegment seg, long index) {
        return (int)constants$440.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void SequenceNumber$set(MemorySegment seg, long index, int x) {
        constants$440.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Flags$VH() {
        return constants$440.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Flags;
     * }
     */
    public static int Flags$get(MemorySegment seg) {
        return (int)constants$440.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Flags;
     * }
     */
    public static void Flags$set(MemorySegment seg, int x) {
        constants$440.const$3.set(seg, x);
    }
    public static int Flags$get(MemorySegment seg, long index) {
        return (int)constants$440.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, int x) {
        constants$440.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle OriginalTimeDateStamp$VH() {
        return constants$440.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD OriginalTimeDateStamp;
     * }
     */
    public static int OriginalTimeDateStamp$get(MemorySegment seg) {
        return (int)constants$440.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD OriginalTimeDateStamp;
     * }
     */
    public static void OriginalTimeDateStamp$set(MemorySegment seg, int x) {
        constants$440.const$4.set(seg, x);
    }
    public static int OriginalTimeDateStamp$get(MemorySegment seg, long index) {
        return (int)constants$440.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void OriginalTimeDateStamp$set(MemorySegment seg, long index, int x) {
        constants$440.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle OriginalCheckSum$VH() {
        return constants$440.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD OriginalCheckSum;
     * }
     */
    public static int OriginalCheckSum$get(MemorySegment seg) {
        return (int)constants$440.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD OriginalCheckSum;
     * }
     */
    public static void OriginalCheckSum$set(MemorySegment seg, int x) {
        constants$440.const$5.set(seg, x);
    }
    public static int OriginalCheckSum$get(MemorySegment seg, long index) {
        return (int)constants$440.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void OriginalCheckSum$set(MemorySegment seg, long index, int x) {
        constants$440.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle CodeIntegrityInfo$VH() {
        return constants$441.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD CodeIntegrityInfo;
     * }
     */
    public static int CodeIntegrityInfo$get(MemorySegment seg) {
        return (int)constants$441.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD CodeIntegrityInfo;
     * }
     */
    public static void CodeIntegrityInfo$set(MemorySegment seg, int x) {
        constants$441.const$0.set(seg, x);
    }
    public static int CodeIntegrityInfo$get(MemorySegment seg, long index) {
        return (int)constants$441.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void CodeIntegrityInfo$set(MemorySegment seg, long index, int x) {
        constants$441.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle CodeIntegritySize$VH() {
        return constants$441.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD CodeIntegritySize;
     * }
     */
    public static int CodeIntegritySize$get(MemorySegment seg) {
        return (int)constants$441.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD CodeIntegritySize;
     * }
     */
    public static void CodeIntegritySize$set(MemorySegment seg, int x) {
        constants$441.const$1.set(seg, x);
    }
    public static int CodeIntegritySize$get(MemorySegment seg, long index) {
        return (int)constants$441.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void CodeIntegritySize$set(MemorySegment seg, long index, int x) {
        constants$441.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle PatchTable$VH() {
        return constants$441.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD PatchTable;
     * }
     */
    public static int PatchTable$get(MemorySegment seg) {
        return (int)constants$441.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD PatchTable;
     * }
     */
    public static void PatchTable$set(MemorySegment seg, int x) {
        constants$441.const$2.set(seg, x);
    }
    public static int PatchTable$get(MemorySegment seg, long index) {
        return (int)constants$441.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void PatchTable$set(MemorySegment seg, long index, int x) {
        constants$441.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle BufferOffset$VH() {
        return constants$441.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD BufferOffset;
     * }
     */
    public static int BufferOffset$get(MemorySegment seg) {
        return (int)constants$441.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD BufferOffset;
     * }
     */
    public static void BufferOffset$set(MemorySegment seg, int x) {
        constants$441.const$3.set(seg, x);
    }
    public static int BufferOffset$get(MemorySegment seg, long index) {
        return (int)constants$441.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void BufferOffset$set(MemorySegment seg, long index, int x) {
        constants$441.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



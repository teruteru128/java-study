// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tagEXTLOGFONTA {
 *     LOGFONTA elfLogFont;
 *     BYTE elfFullName[64];
 *     BYTE elfStyle[32];
 *     DWORD elfVersion;
 *     DWORD elfStyleSize;
 *     DWORD elfMatch;
 *     DWORD elfReserved;
 *     BYTE elfVendorId[4];
 *     DWORD elfCulture;
 *     PANOSE elfPanose;
 * };
 * }
 */
public class tagEXTLOGFONTA {

    public static MemoryLayout $LAYOUT() {
        return constants$942.const$3;
    }
    public static MemorySegment elfLogFont$slice(MemorySegment seg) {
        return seg.asSlice(0, 60);
    }
    public static MemorySegment elfFullName$slice(MemorySegment seg) {
        return seg.asSlice(60, 64);
    }
    public static MemorySegment elfStyle$slice(MemorySegment seg) {
        return seg.asSlice(124, 32);
    }
    public static VarHandle elfVersion$VH() {
        return constants$942.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD elfVersion;
     * }
     */
    public static int elfVersion$get(MemorySegment seg) {
        return (int)constants$942.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD elfVersion;
     * }
     */
    public static void elfVersion$set(MemorySegment seg, int x) {
        constants$942.const$4.set(seg, x);
    }
    public static int elfVersion$get(MemorySegment seg, long index) {
        return (int)constants$942.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void elfVersion$set(MemorySegment seg, long index, int x) {
        constants$942.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle elfStyleSize$VH() {
        return constants$942.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD elfStyleSize;
     * }
     */
    public static int elfStyleSize$get(MemorySegment seg) {
        return (int)constants$942.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD elfStyleSize;
     * }
     */
    public static void elfStyleSize$set(MemorySegment seg, int x) {
        constants$942.const$5.set(seg, x);
    }
    public static int elfStyleSize$get(MemorySegment seg, long index) {
        return (int)constants$942.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void elfStyleSize$set(MemorySegment seg, long index, int x) {
        constants$942.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle elfMatch$VH() {
        return constants$943.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD elfMatch;
     * }
     */
    public static int elfMatch$get(MemorySegment seg) {
        return (int)constants$943.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD elfMatch;
     * }
     */
    public static void elfMatch$set(MemorySegment seg, int x) {
        constants$943.const$0.set(seg, x);
    }
    public static int elfMatch$get(MemorySegment seg, long index) {
        return (int)constants$943.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void elfMatch$set(MemorySegment seg, long index, int x) {
        constants$943.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle elfReserved$VH() {
        return constants$943.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD elfReserved;
     * }
     */
    public static int elfReserved$get(MemorySegment seg) {
        return (int)constants$943.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD elfReserved;
     * }
     */
    public static void elfReserved$set(MemorySegment seg, int x) {
        constants$943.const$1.set(seg, x);
    }
    public static int elfReserved$get(MemorySegment seg, long index) {
        return (int)constants$943.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void elfReserved$set(MemorySegment seg, long index, int x) {
        constants$943.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment elfVendorId$slice(MemorySegment seg) {
        return seg.asSlice(172, 4);
    }
    public static VarHandle elfCulture$VH() {
        return constants$943.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD elfCulture;
     * }
     */
    public static int elfCulture$get(MemorySegment seg) {
        return (int)constants$943.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD elfCulture;
     * }
     */
    public static void elfCulture$set(MemorySegment seg, int x) {
        constants$943.const$2.set(seg, x);
    }
    public static int elfCulture$get(MemorySegment seg, long index) {
        return (int)constants$943.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void elfCulture$set(MemorySegment seg, long index, int x) {
        constants$943.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment elfPanose$slice(MemorySegment seg) {
        return seg.asSlice(180, 10);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



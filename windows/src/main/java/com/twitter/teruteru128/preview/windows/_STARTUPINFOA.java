// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _STARTUPINFOA {
 *     DWORD cb;
 *     LPSTR lpReserved;
 *     LPSTR lpDesktop;
 *     LPSTR lpTitle;
 *     DWORD dwX;
 *     DWORD dwY;
 *     DWORD dwXSize;
 *     DWORD dwYSize;
 *     DWORD dwXCountChars;
 *     DWORD dwYCountChars;
 *     DWORD dwFillAttribute;
 *     DWORD dwFlags;
 *     WORD wShowWindow;
 *     WORD cbReserved2;
 *     LPBYTE lpReserved2;
 *     HANDLE hStdInput;
 *     HANDLE hStdOutput;
 *     HANDLE hStdError;
 * };
 * }
 */
public class _STARTUPINFOA {

    public static MemoryLayout $LAYOUT() {
        return constants$632.const$0;
    }
    public static VarHandle cb$VH() {
        return constants$632.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD cb;
     * }
     */
    public static int cb$get(MemorySegment seg) {
        return (int)constants$632.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD cb;
     * }
     */
    public static void cb$set(MemorySegment seg, int x) {
        constants$632.const$1.set(seg, x);
    }
    public static int cb$get(MemorySegment seg, long index) {
        return (int)constants$632.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void cb$set(MemorySegment seg, long index, int x) {
        constants$632.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lpReserved$VH() {
        return constants$632.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPSTR lpReserved;
     * }
     */
    public static MemorySegment lpReserved$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$632.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPSTR lpReserved;
     * }
     */
    public static void lpReserved$set(MemorySegment seg, MemorySegment x) {
        constants$632.const$2.set(seg, x);
    }
    public static MemorySegment lpReserved$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$632.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void lpReserved$set(MemorySegment seg, long index, MemorySegment x) {
        constants$632.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lpDesktop$VH() {
        return constants$632.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPSTR lpDesktop;
     * }
     */
    public static MemorySegment lpDesktop$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$632.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPSTR lpDesktop;
     * }
     */
    public static void lpDesktop$set(MemorySegment seg, MemorySegment x) {
        constants$632.const$3.set(seg, x);
    }
    public static MemorySegment lpDesktop$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$632.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void lpDesktop$set(MemorySegment seg, long index, MemorySegment x) {
        constants$632.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lpTitle$VH() {
        return constants$632.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPSTR lpTitle;
     * }
     */
    public static MemorySegment lpTitle$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$632.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPSTR lpTitle;
     * }
     */
    public static void lpTitle$set(MemorySegment seg, MemorySegment x) {
        constants$632.const$4.set(seg, x);
    }
    public static MemorySegment lpTitle$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$632.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void lpTitle$set(MemorySegment seg, long index, MemorySegment x) {
        constants$632.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwX$VH() {
        return constants$632.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwX;
     * }
     */
    public static int dwX$get(MemorySegment seg) {
        return (int)constants$632.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwX;
     * }
     */
    public static void dwX$set(MemorySegment seg, int x) {
        constants$632.const$5.set(seg, x);
    }
    public static int dwX$get(MemorySegment seg, long index) {
        return (int)constants$632.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void dwX$set(MemorySegment seg, long index, int x) {
        constants$632.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwY$VH() {
        return constants$633.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwY;
     * }
     */
    public static int dwY$get(MemorySegment seg) {
        return (int)constants$633.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwY;
     * }
     */
    public static void dwY$set(MemorySegment seg, int x) {
        constants$633.const$0.set(seg, x);
    }
    public static int dwY$get(MemorySegment seg, long index) {
        return (int)constants$633.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void dwY$set(MemorySegment seg, long index, int x) {
        constants$633.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwXSize$VH() {
        return constants$633.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwXSize;
     * }
     */
    public static int dwXSize$get(MemorySegment seg) {
        return (int)constants$633.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwXSize;
     * }
     */
    public static void dwXSize$set(MemorySegment seg, int x) {
        constants$633.const$1.set(seg, x);
    }
    public static int dwXSize$get(MemorySegment seg, long index) {
        return (int)constants$633.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void dwXSize$set(MemorySegment seg, long index, int x) {
        constants$633.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwYSize$VH() {
        return constants$633.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwYSize;
     * }
     */
    public static int dwYSize$get(MemorySegment seg) {
        return (int)constants$633.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwYSize;
     * }
     */
    public static void dwYSize$set(MemorySegment seg, int x) {
        constants$633.const$2.set(seg, x);
    }
    public static int dwYSize$get(MemorySegment seg, long index) {
        return (int)constants$633.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void dwYSize$set(MemorySegment seg, long index, int x) {
        constants$633.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwXCountChars$VH() {
        return constants$633.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwXCountChars;
     * }
     */
    public static int dwXCountChars$get(MemorySegment seg) {
        return (int)constants$633.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwXCountChars;
     * }
     */
    public static void dwXCountChars$set(MemorySegment seg, int x) {
        constants$633.const$3.set(seg, x);
    }
    public static int dwXCountChars$get(MemorySegment seg, long index) {
        return (int)constants$633.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void dwXCountChars$set(MemorySegment seg, long index, int x) {
        constants$633.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwYCountChars$VH() {
        return constants$633.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwYCountChars;
     * }
     */
    public static int dwYCountChars$get(MemorySegment seg) {
        return (int)constants$633.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwYCountChars;
     * }
     */
    public static void dwYCountChars$set(MemorySegment seg, int x) {
        constants$633.const$4.set(seg, x);
    }
    public static int dwYCountChars$get(MemorySegment seg, long index) {
        return (int)constants$633.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void dwYCountChars$set(MemorySegment seg, long index, int x) {
        constants$633.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwFillAttribute$VH() {
        return constants$633.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwFillAttribute;
     * }
     */
    public static int dwFillAttribute$get(MemorySegment seg) {
        return (int)constants$633.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwFillAttribute;
     * }
     */
    public static void dwFillAttribute$set(MemorySegment seg, int x) {
        constants$633.const$5.set(seg, x);
    }
    public static int dwFillAttribute$get(MemorySegment seg, long index) {
        return (int)constants$633.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void dwFillAttribute$set(MemorySegment seg, long index, int x) {
        constants$633.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dwFlags$VH() {
        return constants$634.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwFlags;
     * }
     */
    public static int dwFlags$get(MemorySegment seg) {
        return (int)constants$634.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwFlags;
     * }
     */
    public static void dwFlags$set(MemorySegment seg, int x) {
        constants$634.const$0.set(seg, x);
    }
    public static int dwFlags$get(MemorySegment seg, long index) {
        return (int)constants$634.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void dwFlags$set(MemorySegment seg, long index, int x) {
        constants$634.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle wShowWindow$VH() {
        return constants$634.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD wShowWindow;
     * }
     */
    public static short wShowWindow$get(MemorySegment seg) {
        return (short)constants$634.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD wShowWindow;
     * }
     */
    public static void wShowWindow$set(MemorySegment seg, short x) {
        constants$634.const$1.set(seg, x);
    }
    public static short wShowWindow$get(MemorySegment seg, long index) {
        return (short)constants$634.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void wShowWindow$set(MemorySegment seg, long index, short x) {
        constants$634.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cbReserved2$VH() {
        return constants$634.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD cbReserved2;
     * }
     */
    public static short cbReserved2$get(MemorySegment seg) {
        return (short)constants$634.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD cbReserved2;
     * }
     */
    public static void cbReserved2$set(MemorySegment seg, short x) {
        constants$634.const$2.set(seg, x);
    }
    public static short cbReserved2$get(MemorySegment seg, long index) {
        return (short)constants$634.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void cbReserved2$set(MemorySegment seg, long index, short x) {
        constants$634.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lpReserved2$VH() {
        return constants$634.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPBYTE lpReserved2;
     * }
     */
    public static MemorySegment lpReserved2$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$634.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPBYTE lpReserved2;
     * }
     */
    public static void lpReserved2$set(MemorySegment seg, MemorySegment x) {
        constants$634.const$3.set(seg, x);
    }
    public static MemorySegment lpReserved2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$634.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void lpReserved2$set(MemorySegment seg, long index, MemorySegment x) {
        constants$634.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hStdInput$VH() {
        return constants$634.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HANDLE hStdInput;
     * }
     */
    public static MemorySegment hStdInput$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$634.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HANDLE hStdInput;
     * }
     */
    public static void hStdInput$set(MemorySegment seg, MemorySegment x) {
        constants$634.const$4.set(seg, x);
    }
    public static MemorySegment hStdInput$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$634.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void hStdInput$set(MemorySegment seg, long index, MemorySegment x) {
        constants$634.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hStdOutput$VH() {
        return constants$634.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HANDLE hStdOutput;
     * }
     */
    public static MemorySegment hStdOutput$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$634.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HANDLE hStdOutput;
     * }
     */
    public static void hStdOutput$set(MemorySegment seg, MemorySegment x) {
        constants$634.const$5.set(seg, x);
    }
    public static MemorySegment hStdOutput$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$634.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void hStdOutput$set(MemorySegment seg, long index, MemorySegment x) {
        constants$634.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hStdError$VH() {
        return constants$635.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HANDLE hStdError;
     * }
     */
    public static MemorySegment hStdError$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$635.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HANDLE hStdError;
     * }
     */
    public static void hStdError$set(MemorySegment seg, MemorySegment x) {
        constants$635.const$0.set(seg, x);
    }
    public static MemorySegment hStdError$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$635.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void hStdError$set(MemorySegment seg, long index, MemorySegment x) {
        constants$635.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



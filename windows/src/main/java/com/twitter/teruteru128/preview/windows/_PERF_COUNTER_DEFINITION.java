// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _PERF_COUNTER_DEFINITION {
 *     DWORD ByteLength;
 *     DWORD CounterNameTitleIndex;
 *     DWORD CounterNameTitle;
 *     DWORD CounterHelpTitleIndex;
 *     DWORD CounterHelpTitle;
 *     LONG DefaultScale;
 *     DWORD DetailLevel;
 *     DWORD CounterType;
 *     DWORD CounterSize;
 *     DWORD CounterOffset;
 * };
 * }
 */
public class _PERF_COUNTER_DEFINITION {

    public static MemoryLayout $LAYOUT() {
        return constants$1893.const$0;
    }
    public static VarHandle ByteLength$VH() {
        return constants$1893.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD ByteLength;
     * }
     */
    public static int ByteLength$get(MemorySegment seg) {
        return (int)constants$1893.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD ByteLength;
     * }
     */
    public static void ByteLength$set(MemorySegment seg, int x) {
        constants$1893.const$1.set(seg, x);
    }
    public static int ByteLength$get(MemorySegment seg, long index) {
        return (int)constants$1893.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void ByteLength$set(MemorySegment seg, long index, int x) {
        constants$1893.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle CounterNameTitleIndex$VH() {
        return constants$1893.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD CounterNameTitleIndex;
     * }
     */
    public static int CounterNameTitleIndex$get(MemorySegment seg) {
        return (int)constants$1893.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD CounterNameTitleIndex;
     * }
     */
    public static void CounterNameTitleIndex$set(MemorySegment seg, int x) {
        constants$1893.const$2.set(seg, x);
    }
    public static int CounterNameTitleIndex$get(MemorySegment seg, long index) {
        return (int)constants$1893.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void CounterNameTitleIndex$set(MemorySegment seg, long index, int x) {
        constants$1893.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle CounterNameTitle$VH() {
        return constants$1893.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD CounterNameTitle;
     * }
     */
    public static int CounterNameTitle$get(MemorySegment seg) {
        return (int)constants$1893.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD CounterNameTitle;
     * }
     */
    public static void CounterNameTitle$set(MemorySegment seg, int x) {
        constants$1893.const$3.set(seg, x);
    }
    public static int CounterNameTitle$get(MemorySegment seg, long index) {
        return (int)constants$1893.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void CounterNameTitle$set(MemorySegment seg, long index, int x) {
        constants$1893.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle CounterHelpTitleIndex$VH() {
        return constants$1893.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD CounterHelpTitleIndex;
     * }
     */
    public static int CounterHelpTitleIndex$get(MemorySegment seg) {
        return (int)constants$1893.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD CounterHelpTitleIndex;
     * }
     */
    public static void CounterHelpTitleIndex$set(MemorySegment seg, int x) {
        constants$1893.const$4.set(seg, x);
    }
    public static int CounterHelpTitleIndex$get(MemorySegment seg, long index) {
        return (int)constants$1893.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void CounterHelpTitleIndex$set(MemorySegment seg, long index, int x) {
        constants$1893.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle CounterHelpTitle$VH() {
        return constants$1893.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD CounterHelpTitle;
     * }
     */
    public static int CounterHelpTitle$get(MemorySegment seg) {
        return (int)constants$1893.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD CounterHelpTitle;
     * }
     */
    public static void CounterHelpTitle$set(MemorySegment seg, int x) {
        constants$1893.const$5.set(seg, x);
    }
    public static int CounterHelpTitle$get(MemorySegment seg, long index) {
        return (int)constants$1893.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void CounterHelpTitle$set(MemorySegment seg, long index, int x) {
        constants$1893.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle DefaultScale$VH() {
        return constants$1894.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LONG DefaultScale;
     * }
     */
    public static int DefaultScale$get(MemorySegment seg) {
        return (int)constants$1894.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LONG DefaultScale;
     * }
     */
    public static void DefaultScale$set(MemorySegment seg, int x) {
        constants$1894.const$0.set(seg, x);
    }
    public static int DefaultScale$get(MemorySegment seg, long index) {
        return (int)constants$1894.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void DefaultScale$set(MemorySegment seg, long index, int x) {
        constants$1894.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle DetailLevel$VH() {
        return constants$1894.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD DetailLevel;
     * }
     */
    public static int DetailLevel$get(MemorySegment seg) {
        return (int)constants$1894.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD DetailLevel;
     * }
     */
    public static void DetailLevel$set(MemorySegment seg, int x) {
        constants$1894.const$1.set(seg, x);
    }
    public static int DetailLevel$get(MemorySegment seg, long index) {
        return (int)constants$1894.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void DetailLevel$set(MemorySegment seg, long index, int x) {
        constants$1894.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle CounterType$VH() {
        return constants$1894.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD CounterType;
     * }
     */
    public static int CounterType$get(MemorySegment seg) {
        return (int)constants$1894.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD CounterType;
     * }
     */
    public static void CounterType$set(MemorySegment seg, int x) {
        constants$1894.const$2.set(seg, x);
    }
    public static int CounterType$get(MemorySegment seg, long index) {
        return (int)constants$1894.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void CounterType$set(MemorySegment seg, long index, int x) {
        constants$1894.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle CounterSize$VH() {
        return constants$1894.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD CounterSize;
     * }
     */
    public static int CounterSize$get(MemorySegment seg) {
        return (int)constants$1894.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD CounterSize;
     * }
     */
    public static void CounterSize$set(MemorySegment seg, int x) {
        constants$1894.const$3.set(seg, x);
    }
    public static int CounterSize$get(MemorySegment seg, long index) {
        return (int)constants$1894.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void CounterSize$set(MemorySegment seg, long index, int x) {
        constants$1894.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle CounterOffset$VH() {
        return constants$1894.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD CounterOffset;
     * }
     */
    public static int CounterOffset$get(MemorySegment seg) {
        return (int)constants$1894.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD CounterOffset;
     * }
     */
    public static void CounterOffset$set(MemorySegment seg, int x) {
        constants$1894.const$4.set(seg, x);
    }
    public static int CounterOffset$get(MemorySegment seg, long index) {
        return (int)constants$1894.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void CounterOffset$set(MemorySegment seg, long index, int x) {
        constants$1894.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _ADMINISTRATOR_POWER_POLICY {
 *     SYSTEM_POWER_STATE MinSleep;
 *     SYSTEM_POWER_STATE MaxSleep;
 *     DWORD MinVideoTimeout;
 *     DWORD MaxVideoTimeout;
 *     DWORD MinSpindownTimeout;
 *     DWORD MaxSpindownTimeout;
 * };
 * }
 */
public class _ADMINISTRATOR_POWER_POLICY {

    public static MemoryLayout $LAYOUT() {
        return constants$341.const$4;
    }
    public static VarHandle MinSleep$VH() {
        return constants$341.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * SYSTEM_POWER_STATE MinSleep;
     * }
     */
    public static int MinSleep$get(MemorySegment seg) {
        return (int)constants$341.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * SYSTEM_POWER_STATE MinSleep;
     * }
     */
    public static void MinSleep$set(MemorySegment seg, int x) {
        constants$341.const$5.set(seg, x);
    }
    public static int MinSleep$get(MemorySegment seg, long index) {
        return (int)constants$341.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void MinSleep$set(MemorySegment seg, long index, int x) {
        constants$341.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MaxSleep$VH() {
        return constants$342.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * SYSTEM_POWER_STATE MaxSleep;
     * }
     */
    public static int MaxSleep$get(MemorySegment seg) {
        return (int)constants$342.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * SYSTEM_POWER_STATE MaxSleep;
     * }
     */
    public static void MaxSleep$set(MemorySegment seg, int x) {
        constants$342.const$0.set(seg, x);
    }
    public static int MaxSleep$get(MemorySegment seg, long index) {
        return (int)constants$342.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void MaxSleep$set(MemorySegment seg, long index, int x) {
        constants$342.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MinVideoTimeout$VH() {
        return constants$342.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD MinVideoTimeout;
     * }
     */
    public static int MinVideoTimeout$get(MemorySegment seg) {
        return (int)constants$342.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD MinVideoTimeout;
     * }
     */
    public static void MinVideoTimeout$set(MemorySegment seg, int x) {
        constants$342.const$1.set(seg, x);
    }
    public static int MinVideoTimeout$get(MemorySegment seg, long index) {
        return (int)constants$342.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void MinVideoTimeout$set(MemorySegment seg, long index, int x) {
        constants$342.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MaxVideoTimeout$VH() {
        return constants$342.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD MaxVideoTimeout;
     * }
     */
    public static int MaxVideoTimeout$get(MemorySegment seg) {
        return (int)constants$342.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD MaxVideoTimeout;
     * }
     */
    public static void MaxVideoTimeout$set(MemorySegment seg, int x) {
        constants$342.const$2.set(seg, x);
    }
    public static int MaxVideoTimeout$get(MemorySegment seg, long index) {
        return (int)constants$342.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void MaxVideoTimeout$set(MemorySegment seg, long index, int x) {
        constants$342.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MinSpindownTimeout$VH() {
        return constants$342.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD MinSpindownTimeout;
     * }
     */
    public static int MinSpindownTimeout$get(MemorySegment seg) {
        return (int)constants$342.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD MinSpindownTimeout;
     * }
     */
    public static void MinSpindownTimeout$set(MemorySegment seg, int x) {
        constants$342.const$3.set(seg, x);
    }
    public static int MinSpindownTimeout$get(MemorySegment seg, long index) {
        return (int)constants$342.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void MinSpindownTimeout$set(MemorySegment seg, long index, int x) {
        constants$342.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MaxSpindownTimeout$VH() {
        return constants$342.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD MaxSpindownTimeout;
     * }
     */
    public static int MaxSpindownTimeout$get(MemorySegment seg) {
        return (int)constants$342.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD MaxSpindownTimeout;
     * }
     */
    public static void MaxSpindownTimeout$set(MemorySegment seg, int x) {
        constants$342.const$4.set(seg, x);
    }
    public static int MaxSpindownTimeout$get(MemorySegment seg, long index) {
        return (int)constants$342.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void MaxSpindownTimeout$set(MemorySegment seg, long index, int x) {
        constants$342.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



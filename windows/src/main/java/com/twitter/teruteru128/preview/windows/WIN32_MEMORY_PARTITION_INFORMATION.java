// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct WIN32_MEMORY_PARTITION_INFORMATION {
 *     ULONG Flags;
 *     ULONG NumaNode;
 *     ULONG Channel;
 *     ULONG NumberOfNumaNodes;
 *     ULONG64 ResidentAvailablePages;
 *     ULONG64 CommittedPages;
 *     ULONG64 CommitLimit;
 *     ULONG64 PeakCommitment;
 *     ULONG64 TotalNumberOfPages;
 *     ULONG64 AvailablePages;
 *     ULONG64 ZeroPages;
 *     ULONG64 FreePages;
 *     ULONG64 StandbyPages;
 *     ULONG64 Reserved[16];
 *     ULONG64 MaximumCommitLimit;
 *     ULONG64 Reserved2;
 *     ULONG PartitionId;
 * }
 * }
 */
public class WIN32_MEMORY_PARTITION_INFORMATION {

    WIN32_MEMORY_PARTITION_INFORMATION() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        Windows_h.C_LONG.withName("Flags"),
        Windows_h.C_LONG.withName("NumaNode"),
        Windows_h.C_LONG.withName("Channel"),
        Windows_h.C_LONG.withName("NumberOfNumaNodes"),
        Windows_h.C_LONG_LONG.withName("ResidentAvailablePages"),
        Windows_h.C_LONG_LONG.withName("CommittedPages"),
        Windows_h.C_LONG_LONG.withName("CommitLimit"),
        Windows_h.C_LONG_LONG.withName("PeakCommitment"),
        Windows_h.C_LONG_LONG.withName("TotalNumberOfPages"),
        Windows_h.C_LONG_LONG.withName("AvailablePages"),
        Windows_h.C_LONG_LONG.withName("ZeroPages"),
        Windows_h.C_LONG_LONG.withName("FreePages"),
        Windows_h.C_LONG_LONG.withName("StandbyPages"),
        MemoryLayout.sequenceLayout(16, Windows_h.C_LONG_LONG).withName("Reserved"),
        Windows_h.C_LONG_LONG.withName("MaximumCommitLimit"),
        Windows_h.C_LONG_LONG.withName("Reserved2"),
        Windows_h.C_LONG.withName("PartitionId"),
        MemoryLayout.paddingLayout(4)
    ).withName("WIN32_MEMORY_PARTITION_INFORMATION");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt Flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG Flags
     * }
     */
    public static final OfInt Flags$layout() {
        return Flags$LAYOUT;
    }

    private static final long Flags$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG Flags
     * }
     */
    public static final long Flags$offset() {
        return Flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG Flags
     * }
     */
    public static int Flags(MemorySegment struct) {
        return struct.get(Flags$LAYOUT, Flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG Flags
     * }
     */
    public static void Flags(MemorySegment struct, int fieldValue) {
        struct.set(Flags$LAYOUT, Flags$OFFSET, fieldValue);
    }

    private static final OfInt NumaNode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("NumaNode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG NumaNode
     * }
     */
    public static final OfInt NumaNode$layout() {
        return NumaNode$LAYOUT;
    }

    private static final long NumaNode$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG NumaNode
     * }
     */
    public static final long NumaNode$offset() {
        return NumaNode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG NumaNode
     * }
     */
    public static int NumaNode(MemorySegment struct) {
        return struct.get(NumaNode$LAYOUT, NumaNode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG NumaNode
     * }
     */
    public static void NumaNode(MemorySegment struct, int fieldValue) {
        struct.set(NumaNode$LAYOUT, NumaNode$OFFSET, fieldValue);
    }

    private static final OfInt Channel$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Channel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG Channel
     * }
     */
    public static final OfInt Channel$layout() {
        return Channel$LAYOUT;
    }

    private static final long Channel$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG Channel
     * }
     */
    public static final long Channel$offset() {
        return Channel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG Channel
     * }
     */
    public static int Channel(MemorySegment struct) {
        return struct.get(Channel$LAYOUT, Channel$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG Channel
     * }
     */
    public static void Channel(MemorySegment struct, int fieldValue) {
        struct.set(Channel$LAYOUT, Channel$OFFSET, fieldValue);
    }

    private static final OfInt NumberOfNumaNodes$LAYOUT = (OfInt)$LAYOUT.select(groupElement("NumberOfNumaNodes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG NumberOfNumaNodes
     * }
     */
    public static final OfInt NumberOfNumaNodes$layout() {
        return NumberOfNumaNodes$LAYOUT;
    }

    private static final long NumberOfNumaNodes$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG NumberOfNumaNodes
     * }
     */
    public static final long NumberOfNumaNodes$offset() {
        return NumberOfNumaNodes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG NumberOfNumaNodes
     * }
     */
    public static int NumberOfNumaNodes(MemorySegment struct) {
        return struct.get(NumberOfNumaNodes$LAYOUT, NumberOfNumaNodes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG NumberOfNumaNodes
     * }
     */
    public static void NumberOfNumaNodes(MemorySegment struct, int fieldValue) {
        struct.set(NumberOfNumaNodes$LAYOUT, NumberOfNumaNodes$OFFSET, fieldValue);
    }

    private static final OfLong ResidentAvailablePages$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ResidentAvailablePages"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG64 ResidentAvailablePages
     * }
     */
    public static final OfLong ResidentAvailablePages$layout() {
        return ResidentAvailablePages$LAYOUT;
    }

    private static final long ResidentAvailablePages$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG64 ResidentAvailablePages
     * }
     */
    public static final long ResidentAvailablePages$offset() {
        return ResidentAvailablePages$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG64 ResidentAvailablePages
     * }
     */
    public static long ResidentAvailablePages(MemorySegment struct) {
        return struct.get(ResidentAvailablePages$LAYOUT, ResidentAvailablePages$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG64 ResidentAvailablePages
     * }
     */
    public static void ResidentAvailablePages(MemorySegment struct, long fieldValue) {
        struct.set(ResidentAvailablePages$LAYOUT, ResidentAvailablePages$OFFSET, fieldValue);
    }

    private static final OfLong CommittedPages$LAYOUT = (OfLong)$LAYOUT.select(groupElement("CommittedPages"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG64 CommittedPages
     * }
     */
    public static final OfLong CommittedPages$layout() {
        return CommittedPages$LAYOUT;
    }

    private static final long CommittedPages$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG64 CommittedPages
     * }
     */
    public static final long CommittedPages$offset() {
        return CommittedPages$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG64 CommittedPages
     * }
     */
    public static long CommittedPages(MemorySegment struct) {
        return struct.get(CommittedPages$LAYOUT, CommittedPages$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG64 CommittedPages
     * }
     */
    public static void CommittedPages(MemorySegment struct, long fieldValue) {
        struct.set(CommittedPages$LAYOUT, CommittedPages$OFFSET, fieldValue);
    }

    private static final OfLong CommitLimit$LAYOUT = (OfLong)$LAYOUT.select(groupElement("CommitLimit"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG64 CommitLimit
     * }
     */
    public static final OfLong CommitLimit$layout() {
        return CommitLimit$LAYOUT;
    }

    private static final long CommitLimit$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG64 CommitLimit
     * }
     */
    public static final long CommitLimit$offset() {
        return CommitLimit$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG64 CommitLimit
     * }
     */
    public static long CommitLimit(MemorySegment struct) {
        return struct.get(CommitLimit$LAYOUT, CommitLimit$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG64 CommitLimit
     * }
     */
    public static void CommitLimit(MemorySegment struct, long fieldValue) {
        struct.set(CommitLimit$LAYOUT, CommitLimit$OFFSET, fieldValue);
    }

    private static final OfLong PeakCommitment$LAYOUT = (OfLong)$LAYOUT.select(groupElement("PeakCommitment"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG64 PeakCommitment
     * }
     */
    public static final OfLong PeakCommitment$layout() {
        return PeakCommitment$LAYOUT;
    }

    private static final long PeakCommitment$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG64 PeakCommitment
     * }
     */
    public static final long PeakCommitment$offset() {
        return PeakCommitment$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG64 PeakCommitment
     * }
     */
    public static long PeakCommitment(MemorySegment struct) {
        return struct.get(PeakCommitment$LAYOUT, PeakCommitment$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG64 PeakCommitment
     * }
     */
    public static void PeakCommitment(MemorySegment struct, long fieldValue) {
        struct.set(PeakCommitment$LAYOUT, PeakCommitment$OFFSET, fieldValue);
    }

    private static final OfLong TotalNumberOfPages$LAYOUT = (OfLong)$LAYOUT.select(groupElement("TotalNumberOfPages"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG64 TotalNumberOfPages
     * }
     */
    public static final OfLong TotalNumberOfPages$layout() {
        return TotalNumberOfPages$LAYOUT;
    }

    private static final long TotalNumberOfPages$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG64 TotalNumberOfPages
     * }
     */
    public static final long TotalNumberOfPages$offset() {
        return TotalNumberOfPages$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG64 TotalNumberOfPages
     * }
     */
    public static long TotalNumberOfPages(MemorySegment struct) {
        return struct.get(TotalNumberOfPages$LAYOUT, TotalNumberOfPages$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG64 TotalNumberOfPages
     * }
     */
    public static void TotalNumberOfPages(MemorySegment struct, long fieldValue) {
        struct.set(TotalNumberOfPages$LAYOUT, TotalNumberOfPages$OFFSET, fieldValue);
    }

    private static final OfLong AvailablePages$LAYOUT = (OfLong)$LAYOUT.select(groupElement("AvailablePages"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG64 AvailablePages
     * }
     */
    public static final OfLong AvailablePages$layout() {
        return AvailablePages$LAYOUT;
    }

    private static final long AvailablePages$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG64 AvailablePages
     * }
     */
    public static final long AvailablePages$offset() {
        return AvailablePages$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG64 AvailablePages
     * }
     */
    public static long AvailablePages(MemorySegment struct) {
        return struct.get(AvailablePages$LAYOUT, AvailablePages$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG64 AvailablePages
     * }
     */
    public static void AvailablePages(MemorySegment struct, long fieldValue) {
        struct.set(AvailablePages$LAYOUT, AvailablePages$OFFSET, fieldValue);
    }

    private static final OfLong ZeroPages$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ZeroPages"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG64 ZeroPages
     * }
     */
    public static final OfLong ZeroPages$layout() {
        return ZeroPages$LAYOUT;
    }

    private static final long ZeroPages$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG64 ZeroPages
     * }
     */
    public static final long ZeroPages$offset() {
        return ZeroPages$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG64 ZeroPages
     * }
     */
    public static long ZeroPages(MemorySegment struct) {
        return struct.get(ZeroPages$LAYOUT, ZeroPages$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG64 ZeroPages
     * }
     */
    public static void ZeroPages(MemorySegment struct, long fieldValue) {
        struct.set(ZeroPages$LAYOUT, ZeroPages$OFFSET, fieldValue);
    }

    private static final OfLong FreePages$LAYOUT = (OfLong)$LAYOUT.select(groupElement("FreePages"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG64 FreePages
     * }
     */
    public static final OfLong FreePages$layout() {
        return FreePages$LAYOUT;
    }

    private static final long FreePages$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG64 FreePages
     * }
     */
    public static final long FreePages$offset() {
        return FreePages$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG64 FreePages
     * }
     */
    public static long FreePages(MemorySegment struct) {
        return struct.get(FreePages$LAYOUT, FreePages$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG64 FreePages
     * }
     */
    public static void FreePages(MemorySegment struct, long fieldValue) {
        struct.set(FreePages$LAYOUT, FreePages$OFFSET, fieldValue);
    }

    private static final OfLong StandbyPages$LAYOUT = (OfLong)$LAYOUT.select(groupElement("StandbyPages"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG64 StandbyPages
     * }
     */
    public static final OfLong StandbyPages$layout() {
        return StandbyPages$LAYOUT;
    }

    private static final long StandbyPages$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG64 StandbyPages
     * }
     */
    public static final long StandbyPages$offset() {
        return StandbyPages$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG64 StandbyPages
     * }
     */
    public static long StandbyPages(MemorySegment struct) {
        return struct.get(StandbyPages$LAYOUT, StandbyPages$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG64 StandbyPages
     * }
     */
    public static void StandbyPages(MemorySegment struct, long fieldValue) {
        struct.set(StandbyPages$LAYOUT, StandbyPages$OFFSET, fieldValue);
    }

    private static final SequenceLayout Reserved$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("Reserved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG64 Reserved[16]
     * }
     */
    public static final SequenceLayout Reserved$layout() {
        return Reserved$LAYOUT;
    }

    private static final long Reserved$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG64 Reserved[16]
     * }
     */
    public static final long Reserved$offset() {
        return Reserved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG64 Reserved[16]
     * }
     */
    public static MemorySegment Reserved(MemorySegment struct) {
        return struct.asSlice(Reserved$OFFSET, Reserved$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG64 Reserved[16]
     * }
     */
    public static void Reserved(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Reserved$OFFSET, Reserved$LAYOUT.byteSize());
    }

    private static long[] Reserved$DIMS = { 16 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * ULONG64 Reserved[16]
     * }
     */
    public static long[] Reserved$dimensions() {
        return Reserved$DIMS;
    }
    private static final VarHandle Reserved$ELEM_HANDLE = Reserved$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * ULONG64 Reserved[16]
     * }
     */
    public static long Reserved(MemorySegment struct, long index0) {
        return (long)Reserved$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * ULONG64 Reserved[16]
     * }
     */
    public static void Reserved(MemorySegment struct, long index0, long fieldValue) {
        Reserved$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfLong MaximumCommitLimit$LAYOUT = (OfLong)$LAYOUT.select(groupElement("MaximumCommitLimit"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG64 MaximumCommitLimit
     * }
     */
    public static final OfLong MaximumCommitLimit$layout() {
        return MaximumCommitLimit$LAYOUT;
    }

    private static final long MaximumCommitLimit$OFFSET = 216;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG64 MaximumCommitLimit
     * }
     */
    public static final long MaximumCommitLimit$offset() {
        return MaximumCommitLimit$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG64 MaximumCommitLimit
     * }
     */
    public static long MaximumCommitLimit(MemorySegment struct) {
        return struct.get(MaximumCommitLimit$LAYOUT, MaximumCommitLimit$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG64 MaximumCommitLimit
     * }
     */
    public static void MaximumCommitLimit(MemorySegment struct, long fieldValue) {
        struct.set(MaximumCommitLimit$LAYOUT, MaximumCommitLimit$OFFSET, fieldValue);
    }

    private static final OfLong Reserved2$LAYOUT = (OfLong)$LAYOUT.select(groupElement("Reserved2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG64 Reserved2
     * }
     */
    public static final OfLong Reserved2$layout() {
        return Reserved2$LAYOUT;
    }

    private static final long Reserved2$OFFSET = 224;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG64 Reserved2
     * }
     */
    public static final long Reserved2$offset() {
        return Reserved2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG64 Reserved2
     * }
     */
    public static long Reserved2(MemorySegment struct) {
        return struct.get(Reserved2$LAYOUT, Reserved2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG64 Reserved2
     * }
     */
    public static void Reserved2(MemorySegment struct, long fieldValue) {
        struct.set(Reserved2$LAYOUT, Reserved2$OFFSET, fieldValue);
    }

    private static final OfInt PartitionId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("PartitionId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG PartitionId
     * }
     */
    public static final OfInt PartitionId$layout() {
        return PartitionId$LAYOUT;
    }

    private static final long PartitionId$OFFSET = 232;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG PartitionId
     * }
     */
    public static final long PartitionId$offset() {
        return PartitionId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG PartitionId
     * }
     */
    public static int PartitionId(MemorySegment struct) {
        return struct.get(PartitionId$LAYOUT, PartitionId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG PartitionId
     * }
     */
    public static void PartitionId(MemorySegment struct, int fieldValue) {
        struct.set(PartitionId$LAYOUT, PartitionId$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


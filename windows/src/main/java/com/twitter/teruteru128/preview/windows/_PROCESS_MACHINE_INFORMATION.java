// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _PROCESS_MACHINE_INFORMATION {
 *     USHORT ProcessMachine;
 *     USHORT Res0;
 *     MACHINE_ATTRIBUTES MachineAttributes;
 * }
 * }
 */
public class _PROCESS_MACHINE_INFORMATION {

    _PROCESS_MACHINE_INFORMATION() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        Windows_h.C_SHORT.withName("ProcessMachine"),
        Windows_h.C_SHORT.withName("Res0"),
        Windows_h.C_INT.withName("MachineAttributes")
    ).withName("_PROCESS_MACHINE_INFORMATION");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfShort ProcessMachine$LAYOUT = (OfShort)$LAYOUT.select(groupElement("ProcessMachine"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * USHORT ProcessMachine
     * }
     */
    public static final OfShort ProcessMachine$layout() {
        return ProcessMachine$LAYOUT;
    }

    private static final long ProcessMachine$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * USHORT ProcessMachine
     * }
     */
    public static final long ProcessMachine$offset() {
        return ProcessMachine$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * USHORT ProcessMachine
     * }
     */
    public static short ProcessMachine(MemorySegment struct) {
        return struct.get(ProcessMachine$LAYOUT, ProcessMachine$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * USHORT ProcessMachine
     * }
     */
    public static void ProcessMachine(MemorySegment struct, short fieldValue) {
        struct.set(ProcessMachine$LAYOUT, ProcessMachine$OFFSET, fieldValue);
    }

    private static final OfShort Res0$LAYOUT = (OfShort)$LAYOUT.select(groupElement("Res0"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * USHORT Res0
     * }
     */
    public static final OfShort Res0$layout() {
        return Res0$LAYOUT;
    }

    private static final long Res0$OFFSET = 2;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * USHORT Res0
     * }
     */
    public static final long Res0$offset() {
        return Res0$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * USHORT Res0
     * }
     */
    public static short Res0(MemorySegment struct) {
        return struct.get(Res0$LAYOUT, Res0$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * USHORT Res0
     * }
     */
    public static void Res0(MemorySegment struct, short fieldValue) {
        struct.set(Res0$LAYOUT, Res0$OFFSET, fieldValue);
    }

    private static final OfInt MachineAttributes$LAYOUT = (OfInt)$LAYOUT.select(groupElement("MachineAttributes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * MACHINE_ATTRIBUTES MachineAttributes
     * }
     */
    public static final OfInt MachineAttributes$layout() {
        return MachineAttributes$LAYOUT;
    }

    private static final long MachineAttributes$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * MACHINE_ATTRIBUTES MachineAttributes
     * }
     */
    public static final long MachineAttributes$offset() {
        return MachineAttributes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * MACHINE_ATTRIBUTES MachineAttributes
     * }
     */
    public static int MachineAttributes(MemorySegment struct) {
        return struct.get(MachineAttributes$LAYOUT, MachineAttributes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * MACHINE_ATTRIBUTES MachineAttributes
     * }
     */
    public static void MachineAttributes(MemorySegment struct, int fieldValue) {
        struct.set(MachineAttributes$LAYOUT, MachineAttributes$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


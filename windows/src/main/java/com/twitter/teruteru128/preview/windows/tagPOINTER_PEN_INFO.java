// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tagPOINTER_PEN_INFO {
 *     POINTER_INFO pointerInfo;
 *     PEN_FLAGS penFlags;
 *     PEN_MASK penMask;
 *     UINT32 pressure;
 *     UINT32 rotation;
 *     INT32 tiltX;
 *     INT32 tiltY;
 * };
 * }
 */
public class tagPOINTER_PEN_INFO {

    public static MemoryLayout $LAYOUT() {
        return constants$1238.const$1;
    }
    public static MemorySegment pointerInfo$slice(MemorySegment seg) {
        return seg.asSlice(0, 96);
    }
    public static VarHandle penFlags$VH() {
        return constants$1238.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PEN_FLAGS penFlags;
     * }
     */
    public static int penFlags$get(MemorySegment seg) {
        return (int)constants$1238.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PEN_FLAGS penFlags;
     * }
     */
    public static void penFlags$set(MemorySegment seg, int x) {
        constants$1238.const$2.set(seg, x);
    }
    public static int penFlags$get(MemorySegment seg, long index) {
        return (int)constants$1238.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void penFlags$set(MemorySegment seg, long index, int x) {
        constants$1238.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle penMask$VH() {
        return constants$1238.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PEN_MASK penMask;
     * }
     */
    public static int penMask$get(MemorySegment seg) {
        return (int)constants$1238.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PEN_MASK penMask;
     * }
     */
    public static void penMask$set(MemorySegment seg, int x) {
        constants$1238.const$3.set(seg, x);
    }
    public static int penMask$get(MemorySegment seg, long index) {
        return (int)constants$1238.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void penMask$set(MemorySegment seg, long index, int x) {
        constants$1238.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pressure$VH() {
        return constants$1238.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * UINT32 pressure;
     * }
     */
    public static int pressure$get(MemorySegment seg) {
        return (int)constants$1238.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * UINT32 pressure;
     * }
     */
    public static void pressure$set(MemorySegment seg, int x) {
        constants$1238.const$4.set(seg, x);
    }
    public static int pressure$get(MemorySegment seg, long index) {
        return (int)constants$1238.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void pressure$set(MemorySegment seg, long index, int x) {
        constants$1238.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle rotation$VH() {
        return constants$1238.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * UINT32 rotation;
     * }
     */
    public static int rotation$get(MemorySegment seg) {
        return (int)constants$1238.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * UINT32 rotation;
     * }
     */
    public static void rotation$set(MemorySegment seg, int x) {
        constants$1238.const$5.set(seg, x);
    }
    public static int rotation$get(MemorySegment seg, long index) {
        return (int)constants$1238.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void rotation$set(MemorySegment seg, long index, int x) {
        constants$1238.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle tiltX$VH() {
        return constants$1239.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * INT32 tiltX;
     * }
     */
    public static int tiltX$get(MemorySegment seg) {
        return (int)constants$1239.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * INT32 tiltX;
     * }
     */
    public static void tiltX$set(MemorySegment seg, int x) {
        constants$1239.const$0.set(seg, x);
    }
    public static int tiltX$get(MemorySegment seg, long index) {
        return (int)constants$1239.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void tiltX$set(MemorySegment seg, long index, int x) {
        constants$1239.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle tiltY$VH() {
        return constants$1239.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * INT32 tiltY;
     * }
     */
    public static int tiltY$get(MemorySegment seg) {
        return (int)constants$1239.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * INT32 tiltY;
     * }
     */
    public static void tiltY$set(MemorySegment seg, int x) {
        constants$1239.const$1.set(seg, x);
    }
    public static int tiltY$get(MemorySegment seg, long index) {
        return (int)constants$1239.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void tiltY$set(MemorySegment seg, long index, int x) {
        constants$1239.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



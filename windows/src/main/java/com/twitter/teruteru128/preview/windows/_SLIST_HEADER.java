// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * union _SLIST_HEADER {
 *     struct {
 *         ULONGLONG Alignment;
 *         ULONGLONG Region;
 *     };
 *     struct  HeaderX64;
 * };
 * }
 */
public class _SLIST_HEADER {

    public static MemoryLayout $LAYOUT() {
        return constants$471.const$1;
    }
    public static VarHandle Alignment$VH() {
        return constants$471.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONGLONG Alignment;
     * }
     */
    public static long Alignment$get(MemorySegment seg) {
        return (long)constants$471.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONGLONG Alignment;
     * }
     */
    public static void Alignment$set(MemorySegment seg, long x) {
        constants$471.const$2.set(seg, x);
    }
    public static long Alignment$get(MemorySegment seg, long index) {
        return (long)constants$471.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void Alignment$set(MemorySegment seg, long index, long x) {
        constants$471.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Region$VH() {
        return constants$471.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONGLONG Region;
     * }
     */
    public static long Region$get(MemorySegment seg) {
        return (long)constants$471.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONGLONG Region;
     * }
     */
    public static void Region$set(MemorySegment seg, long x) {
        constants$471.const$3.set(seg, x);
    }
    public static long Region$get(MemorySegment seg, long index) {
        return (long)constants$471.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void Region$set(MemorySegment seg, long index, long x) {
        constants$471.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
     * struct {
     *          *     ULONGLONG Depth;
     *     ULONGLONG Sequence;
     *     ULONGLONG Reserved;
     *     ULONGLONG NextEntry;
     * };
     * }
     */
    public static final class HeaderX64 {

        // Suppresses default constructor, ensuring non-instantiability.
        private HeaderX64() {}
        public static MemoryLayout $LAYOUT() {
            return constants$471.const$4;
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment HeaderX64$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



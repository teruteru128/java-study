// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _UMS_SCHEDULER_STARTUP_INFO {
 *     ULONG UmsVersion;
 *     PUMS_COMPLETION_LIST CompletionList;
 *     PUMS_SCHEDULER_ENTRY_POINT SchedulerProc;
 *     PVOID SchedulerParam;
 * };
 * }
 */
public class _UMS_SCHEDULER_STARTUP_INFO {

    public static MemoryLayout $LAYOUT() {
        return constants$763.const$1;
    }
    public static VarHandle UmsVersion$VH() {
        return constants$763.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG UmsVersion;
     * }
     */
    public static int UmsVersion$get(MemorySegment seg) {
        return (int)constants$763.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG UmsVersion;
     * }
     */
    public static void UmsVersion$set(MemorySegment seg, int x) {
        constants$763.const$2.set(seg, x);
    }
    public static int UmsVersion$get(MemorySegment seg, long index) {
        return (int)constants$763.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void UmsVersion$set(MemorySegment seg, long index, int x) {
        constants$763.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle CompletionList$VH() {
        return constants$763.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PUMS_COMPLETION_LIST CompletionList;
     * }
     */
    public static MemorySegment CompletionList$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$763.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PUMS_COMPLETION_LIST CompletionList;
     * }
     */
    public static void CompletionList$set(MemorySegment seg, MemorySegment x) {
        constants$763.const$3.set(seg, x);
    }
    public static MemorySegment CompletionList$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$763.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void CompletionList$set(MemorySegment seg, long index, MemorySegment x) {
        constants$763.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle SchedulerProc$VH() {
        return constants$763.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PUMS_SCHEDULER_ENTRY_POINT SchedulerProc;
     * }
     */
    public static MemorySegment SchedulerProc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$763.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PUMS_SCHEDULER_ENTRY_POINT SchedulerProc;
     * }
     */
    public static void SchedulerProc$set(MemorySegment seg, MemorySegment x) {
        constants$763.const$4.set(seg, x);
    }
    public static MemorySegment SchedulerProc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$763.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void SchedulerProc$set(MemorySegment seg, long index, MemorySegment x) {
        constants$763.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static PUMS_SCHEDULER_ENTRY_POINT SchedulerProc(MemorySegment segment, Arena scope) {
        return PUMS_SCHEDULER_ENTRY_POINT.ofAddress(SchedulerProc$get(segment), scope);
    }
    public static VarHandle SchedulerParam$VH() {
        return constants$763.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PVOID SchedulerParam;
     * }
     */
    public static MemorySegment SchedulerParam$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$763.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PVOID SchedulerParam;
     * }
     */
    public static void SchedulerParam$set(MemorySegment seg, MemorySegment x) {
        constants$763.const$5.set(seg, x);
    }
    public static MemorySegment SchedulerParam$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$763.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void SchedulerParam$set(MemorySegment seg, long index, MemorySegment x) {
        constants$763.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}



// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class Windows_h_15 extends Windows_h_16 {

    Windows_h_15() {
        // Should not be called directly
    }
    /**
     * {@snippet lang=c :
     * typedef struct tagOLEVERB {
     *     LONG lVerb;
     *     LPOLESTR lpszVerbName;
     *     DWORD fuFlags;
     *     DWORD grfAttribs;
     * } *LPOLEVERB
     * }
     */
    public static final AddressLayout LPOLEVERB = Windows_h.C_POINTER;
    private static final int OLEVERBATTRIB_NEVERDIRTIES = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagOLEVERBATTRIB.OLEVERBATTRIB_NEVERDIRTIES = 1
     * }
     */
    public static int OLEVERBATTRIB_NEVERDIRTIES() {
        return OLEVERBATTRIB_NEVERDIRTIES;
    }
    private static final int OLEVERBATTRIB_ONCONTAINERMENU = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagOLEVERBATTRIB.OLEVERBATTRIB_ONCONTAINERMENU = 2
     * }
     */
    public static int OLEVERBATTRIB_ONCONTAINERMENU() {
        return OLEVERBATTRIB_ONCONTAINERMENU;
    }

    private static class IID_IEnumOLEVERB$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IEnumOLEVERB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumOLEVERB
     * }
     */
    public static GroupLayout IID_IEnumOLEVERB$layout() {
        return IID_IEnumOLEVERB$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumOLEVERB
     * }
     */
    public static MemorySegment IID_IEnumOLEVERB() {
        return IID_IEnumOLEVERB$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumOLEVERB
     * }
     */
    public static void IID_IEnumOLEVERB(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IEnumOLEVERB$constants.SEGMENT, 0L, IID_IEnumOLEVERB$constants.LAYOUT.byteSize());
    }

    private static class IEnumOLEVERB_RemoteNext_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("IEnumOLEVERB_RemoteNext_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumOLEVERB_RemoteNext_Proxy(IEnumOLEVERB *This, ULONG celt, LPOLEVERB rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumOLEVERB_RemoteNext_Proxy$descriptor() {
        return IEnumOLEVERB_RemoteNext_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumOLEVERB_RemoteNext_Proxy(IEnumOLEVERB *This, ULONG celt, LPOLEVERB rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumOLEVERB_RemoteNext_Proxy$handle() {
        return IEnumOLEVERB_RemoteNext_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IEnumOLEVERB_RemoteNext_Proxy(IEnumOLEVERB *This, ULONG celt, LPOLEVERB rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumOLEVERB_RemoteNext_Proxy(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumOLEVERB_RemoteNext_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumOLEVERB_RemoteNext_Proxy", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumOLEVERB_RemoteNext_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("IEnumOLEVERB_RemoteNext_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IEnumOLEVERB_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IEnumOLEVERB_RemoteNext_Stub$descriptor() {
        return IEnumOLEVERB_RemoteNext_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IEnumOLEVERB_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IEnumOLEVERB_RemoteNext_Stub$handle() {
        return IEnumOLEVERB_RemoteNext_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void IEnumOLEVERB_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IEnumOLEVERB_RemoteNext_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IEnumOLEVERB_RemoteNext_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumOLEVERB_RemoteNext_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_oleidl_0000_0025_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_oleidl_0000_0025_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0025_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_oleidl_0000_0025_v0_0_c_ifspec$layout() {
        return __MIDL_itf_oleidl_0000_0025_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0025_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oleidl_0000_0025_v0_0_c_ifspec$segment() {
        return __MIDL_itf_oleidl_0000_0025_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0025_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oleidl_0000_0025_v0_0_c_ifspec() {
        return __MIDL_itf_oleidl_0000_0025_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_oleidl_0000_0025_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0025_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_oleidl_0000_0025_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_oleidl_0000_0025_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_oleidl_0000_0025_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_oleidl_0000_0025_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_oleidl_0000_0025_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0025_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_oleidl_0000_0025_v0_0_s_ifspec$layout() {
        return __MIDL_itf_oleidl_0000_0025_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0025_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oleidl_0000_0025_v0_0_s_ifspec$segment() {
        return __MIDL_itf_oleidl_0000_0025_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0025_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oleidl_0000_0025_v0_0_s_ifspec() {
        return __MIDL_itf_oleidl_0000_0025_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_oleidl_0000_0025_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0025_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_oleidl_0000_0025_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_oleidl_0000_0025_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_oleidl_0000_0025_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class HACCEL_UserSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("HACCEL_UserSize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long HACCEL_UserSize(unsigned long *, unsigned long, HACCEL *)
     * }
     */
    public static FunctionDescriptor HACCEL_UserSize$descriptor() {
        return HACCEL_UserSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long HACCEL_UserSize(unsigned long *, unsigned long, HACCEL *)
     * }
     */
    public static MethodHandle HACCEL_UserSize$handle() {
        return HACCEL_UserSize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned long HACCEL_UserSize(unsigned long *, unsigned long, HACCEL *)
     * }
     */
    public static int HACCEL_UserSize(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = HACCEL_UserSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HACCEL_UserSize", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HACCEL_UserMarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("HACCEL_UserMarshal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HACCEL_UserMarshal(unsigned long *, unsigned char *, HACCEL *)
     * }
     */
    public static FunctionDescriptor HACCEL_UserMarshal$descriptor() {
        return HACCEL_UserMarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HACCEL_UserMarshal(unsigned long *, unsigned char *, HACCEL *)
     * }
     */
    public static MethodHandle HACCEL_UserMarshal$handle() {
        return HACCEL_UserMarshal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *HACCEL_UserMarshal(unsigned long *, unsigned char *, HACCEL *)
     * }
     */
    public static MemorySegment HACCEL_UserMarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HACCEL_UserMarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HACCEL_UserMarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HACCEL_UserUnmarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("HACCEL_UserUnmarshal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HACCEL_UserUnmarshal(unsigned long *, unsigned char *, HACCEL *)
     * }
     */
    public static FunctionDescriptor HACCEL_UserUnmarshal$descriptor() {
        return HACCEL_UserUnmarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HACCEL_UserUnmarshal(unsigned long *, unsigned char *, HACCEL *)
     * }
     */
    public static MethodHandle HACCEL_UserUnmarshal$handle() {
        return HACCEL_UserUnmarshal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *HACCEL_UserUnmarshal(unsigned long *, unsigned char *, HACCEL *)
     * }
     */
    public static MemorySegment HACCEL_UserUnmarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HACCEL_UserUnmarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HACCEL_UserUnmarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HACCEL_UserFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("HACCEL_UserFree"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void HACCEL_UserFree(unsigned long *, HACCEL *)
     * }
     */
    public static FunctionDescriptor HACCEL_UserFree$descriptor() {
        return HACCEL_UserFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void HACCEL_UserFree(unsigned long *, HACCEL *)
     * }
     */
    public static MethodHandle HACCEL_UserFree$handle() {
        return HACCEL_UserFree.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void HACCEL_UserFree(unsigned long *, HACCEL *)
     * }
     */
    public static void HACCEL_UserFree(MemorySegment x0, MemorySegment x1) {
        var mh$ = HACCEL_UserFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HACCEL_UserFree", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HGLOBAL_UserSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("HGLOBAL_UserSize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long HGLOBAL_UserSize(unsigned long *, unsigned long, HGLOBAL *)
     * }
     */
    public static FunctionDescriptor HGLOBAL_UserSize$descriptor() {
        return HGLOBAL_UserSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long HGLOBAL_UserSize(unsigned long *, unsigned long, HGLOBAL *)
     * }
     */
    public static MethodHandle HGLOBAL_UserSize$handle() {
        return HGLOBAL_UserSize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned long HGLOBAL_UserSize(unsigned long *, unsigned long, HGLOBAL *)
     * }
     */
    public static int HGLOBAL_UserSize(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = HGLOBAL_UserSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HGLOBAL_UserSize", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HGLOBAL_UserMarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("HGLOBAL_UserMarshal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HGLOBAL_UserMarshal(unsigned long *, unsigned char *, HGLOBAL *)
     * }
     */
    public static FunctionDescriptor HGLOBAL_UserMarshal$descriptor() {
        return HGLOBAL_UserMarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HGLOBAL_UserMarshal(unsigned long *, unsigned char *, HGLOBAL *)
     * }
     */
    public static MethodHandle HGLOBAL_UserMarshal$handle() {
        return HGLOBAL_UserMarshal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *HGLOBAL_UserMarshal(unsigned long *, unsigned char *, HGLOBAL *)
     * }
     */
    public static MemorySegment HGLOBAL_UserMarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HGLOBAL_UserMarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HGLOBAL_UserMarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HGLOBAL_UserUnmarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("HGLOBAL_UserUnmarshal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HGLOBAL_UserUnmarshal(unsigned long *, unsigned char *, HGLOBAL *)
     * }
     */
    public static FunctionDescriptor HGLOBAL_UserUnmarshal$descriptor() {
        return HGLOBAL_UserUnmarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HGLOBAL_UserUnmarshal(unsigned long *, unsigned char *, HGLOBAL *)
     * }
     */
    public static MethodHandle HGLOBAL_UserUnmarshal$handle() {
        return HGLOBAL_UserUnmarshal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *HGLOBAL_UserUnmarshal(unsigned long *, unsigned char *, HGLOBAL *)
     * }
     */
    public static MemorySegment HGLOBAL_UserUnmarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HGLOBAL_UserUnmarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HGLOBAL_UserUnmarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HGLOBAL_UserFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("HGLOBAL_UserFree"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void HGLOBAL_UserFree(unsigned long *, HGLOBAL *)
     * }
     */
    public static FunctionDescriptor HGLOBAL_UserFree$descriptor() {
        return HGLOBAL_UserFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void HGLOBAL_UserFree(unsigned long *, HGLOBAL *)
     * }
     */
    public static MethodHandle HGLOBAL_UserFree$handle() {
        return HGLOBAL_UserFree.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void HGLOBAL_UserFree(unsigned long *, HGLOBAL *)
     * }
     */
    public static void HGLOBAL_UserFree(MemorySegment x0, MemorySegment x1) {
        var mh$ = HGLOBAL_UserFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HGLOBAL_UserFree", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HMENU_UserSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("HMENU_UserSize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long HMENU_UserSize(unsigned long *, unsigned long, HMENU *)
     * }
     */
    public static FunctionDescriptor HMENU_UserSize$descriptor() {
        return HMENU_UserSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long HMENU_UserSize(unsigned long *, unsigned long, HMENU *)
     * }
     */
    public static MethodHandle HMENU_UserSize$handle() {
        return HMENU_UserSize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned long HMENU_UserSize(unsigned long *, unsigned long, HMENU *)
     * }
     */
    public static int HMENU_UserSize(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = HMENU_UserSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HMENU_UserSize", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HMENU_UserMarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("HMENU_UserMarshal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HMENU_UserMarshal(unsigned long *, unsigned char *, HMENU *)
     * }
     */
    public static FunctionDescriptor HMENU_UserMarshal$descriptor() {
        return HMENU_UserMarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HMENU_UserMarshal(unsigned long *, unsigned char *, HMENU *)
     * }
     */
    public static MethodHandle HMENU_UserMarshal$handle() {
        return HMENU_UserMarshal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *HMENU_UserMarshal(unsigned long *, unsigned char *, HMENU *)
     * }
     */
    public static MemorySegment HMENU_UserMarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HMENU_UserMarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HMENU_UserMarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HMENU_UserUnmarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("HMENU_UserUnmarshal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HMENU_UserUnmarshal(unsigned long *, unsigned char *, HMENU *)
     * }
     */
    public static FunctionDescriptor HMENU_UserUnmarshal$descriptor() {
        return HMENU_UserUnmarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HMENU_UserUnmarshal(unsigned long *, unsigned char *, HMENU *)
     * }
     */
    public static MethodHandle HMENU_UserUnmarshal$handle() {
        return HMENU_UserUnmarshal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *HMENU_UserUnmarshal(unsigned long *, unsigned char *, HMENU *)
     * }
     */
    public static MemorySegment HMENU_UserUnmarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HMENU_UserUnmarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HMENU_UserUnmarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HMENU_UserFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("HMENU_UserFree"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void HMENU_UserFree(unsigned long *, HMENU *)
     * }
     */
    public static FunctionDescriptor HMENU_UserFree$descriptor() {
        return HMENU_UserFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void HMENU_UserFree(unsigned long *, HMENU *)
     * }
     */
    public static MethodHandle HMENU_UserFree$handle() {
        return HMENU_UserFree.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void HMENU_UserFree(unsigned long *, HMENU *)
     * }
     */
    public static void HMENU_UserFree(MemorySegment x0, MemorySegment x1) {
        var mh$ = HMENU_UserFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HMENU_UserFree", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HWND_UserSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("HWND_UserSize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long HWND_UserSize(unsigned long *, unsigned long, HWND *)
     * }
     */
    public static FunctionDescriptor HWND_UserSize$descriptor() {
        return HWND_UserSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long HWND_UserSize(unsigned long *, unsigned long, HWND *)
     * }
     */
    public static MethodHandle HWND_UserSize$handle() {
        return HWND_UserSize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned long HWND_UserSize(unsigned long *, unsigned long, HWND *)
     * }
     */
    public static int HWND_UserSize(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = HWND_UserSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HWND_UserSize", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HWND_UserMarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("HWND_UserMarshal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HWND_UserMarshal(unsigned long *, unsigned char *, HWND *)
     * }
     */
    public static FunctionDescriptor HWND_UserMarshal$descriptor() {
        return HWND_UserMarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HWND_UserMarshal(unsigned long *, unsigned char *, HWND *)
     * }
     */
    public static MethodHandle HWND_UserMarshal$handle() {
        return HWND_UserMarshal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *HWND_UserMarshal(unsigned long *, unsigned char *, HWND *)
     * }
     */
    public static MemorySegment HWND_UserMarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HWND_UserMarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HWND_UserMarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HWND_UserUnmarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("HWND_UserUnmarshal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HWND_UserUnmarshal(unsigned long *, unsigned char *, HWND *)
     * }
     */
    public static FunctionDescriptor HWND_UserUnmarshal$descriptor() {
        return HWND_UserUnmarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HWND_UserUnmarshal(unsigned long *, unsigned char *, HWND *)
     * }
     */
    public static MethodHandle HWND_UserUnmarshal$handle() {
        return HWND_UserUnmarshal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *HWND_UserUnmarshal(unsigned long *, unsigned char *, HWND *)
     * }
     */
    public static MemorySegment HWND_UserUnmarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HWND_UserUnmarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HWND_UserUnmarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HWND_UserFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("HWND_UserFree"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void HWND_UserFree(unsigned long *, HWND *)
     * }
     */
    public static FunctionDescriptor HWND_UserFree$descriptor() {
        return HWND_UserFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void HWND_UserFree(unsigned long *, HWND *)
     * }
     */
    public static MethodHandle HWND_UserFree$handle() {
        return HWND_UserFree.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void HWND_UserFree(unsigned long *, HWND *)
     * }
     */
    public static void HWND_UserFree(MemorySegment x0, MemorySegment x1) {
        var mh$ = HWND_UserFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HWND_UserFree", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HACCEL_UserSize64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("HACCEL_UserSize64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long HACCEL_UserSize64(unsigned long *, unsigned long, HACCEL *)
     * }
     */
    public static FunctionDescriptor HACCEL_UserSize64$descriptor() {
        return HACCEL_UserSize64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long HACCEL_UserSize64(unsigned long *, unsigned long, HACCEL *)
     * }
     */
    public static MethodHandle HACCEL_UserSize64$handle() {
        return HACCEL_UserSize64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned long HACCEL_UserSize64(unsigned long *, unsigned long, HACCEL *)
     * }
     */
    public static int HACCEL_UserSize64(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = HACCEL_UserSize64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HACCEL_UserSize64", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HACCEL_UserMarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("HACCEL_UserMarshal64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HACCEL_UserMarshal64(unsigned long *, unsigned char *, HACCEL *)
     * }
     */
    public static FunctionDescriptor HACCEL_UserMarshal64$descriptor() {
        return HACCEL_UserMarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HACCEL_UserMarshal64(unsigned long *, unsigned char *, HACCEL *)
     * }
     */
    public static MethodHandle HACCEL_UserMarshal64$handle() {
        return HACCEL_UserMarshal64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *HACCEL_UserMarshal64(unsigned long *, unsigned char *, HACCEL *)
     * }
     */
    public static MemorySegment HACCEL_UserMarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HACCEL_UserMarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HACCEL_UserMarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HACCEL_UserUnmarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("HACCEL_UserUnmarshal64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HACCEL_UserUnmarshal64(unsigned long *, unsigned char *, HACCEL *)
     * }
     */
    public static FunctionDescriptor HACCEL_UserUnmarshal64$descriptor() {
        return HACCEL_UserUnmarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HACCEL_UserUnmarshal64(unsigned long *, unsigned char *, HACCEL *)
     * }
     */
    public static MethodHandle HACCEL_UserUnmarshal64$handle() {
        return HACCEL_UserUnmarshal64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *HACCEL_UserUnmarshal64(unsigned long *, unsigned char *, HACCEL *)
     * }
     */
    public static MemorySegment HACCEL_UserUnmarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HACCEL_UserUnmarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HACCEL_UserUnmarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HACCEL_UserFree64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("HACCEL_UserFree64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void HACCEL_UserFree64(unsigned long *, HACCEL *)
     * }
     */
    public static FunctionDescriptor HACCEL_UserFree64$descriptor() {
        return HACCEL_UserFree64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void HACCEL_UserFree64(unsigned long *, HACCEL *)
     * }
     */
    public static MethodHandle HACCEL_UserFree64$handle() {
        return HACCEL_UserFree64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void HACCEL_UserFree64(unsigned long *, HACCEL *)
     * }
     */
    public static void HACCEL_UserFree64(MemorySegment x0, MemorySegment x1) {
        var mh$ = HACCEL_UserFree64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HACCEL_UserFree64", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HGLOBAL_UserSize64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("HGLOBAL_UserSize64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long HGLOBAL_UserSize64(unsigned long *, unsigned long, HGLOBAL *)
     * }
     */
    public static FunctionDescriptor HGLOBAL_UserSize64$descriptor() {
        return HGLOBAL_UserSize64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long HGLOBAL_UserSize64(unsigned long *, unsigned long, HGLOBAL *)
     * }
     */
    public static MethodHandle HGLOBAL_UserSize64$handle() {
        return HGLOBAL_UserSize64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned long HGLOBAL_UserSize64(unsigned long *, unsigned long, HGLOBAL *)
     * }
     */
    public static int HGLOBAL_UserSize64(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = HGLOBAL_UserSize64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HGLOBAL_UserSize64", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HGLOBAL_UserMarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("HGLOBAL_UserMarshal64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HGLOBAL_UserMarshal64(unsigned long *, unsigned char *, HGLOBAL *)
     * }
     */
    public static FunctionDescriptor HGLOBAL_UserMarshal64$descriptor() {
        return HGLOBAL_UserMarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HGLOBAL_UserMarshal64(unsigned long *, unsigned char *, HGLOBAL *)
     * }
     */
    public static MethodHandle HGLOBAL_UserMarshal64$handle() {
        return HGLOBAL_UserMarshal64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *HGLOBAL_UserMarshal64(unsigned long *, unsigned char *, HGLOBAL *)
     * }
     */
    public static MemorySegment HGLOBAL_UserMarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HGLOBAL_UserMarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HGLOBAL_UserMarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HGLOBAL_UserUnmarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("HGLOBAL_UserUnmarshal64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HGLOBAL_UserUnmarshal64(unsigned long *, unsigned char *, HGLOBAL *)
     * }
     */
    public static FunctionDescriptor HGLOBAL_UserUnmarshal64$descriptor() {
        return HGLOBAL_UserUnmarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HGLOBAL_UserUnmarshal64(unsigned long *, unsigned char *, HGLOBAL *)
     * }
     */
    public static MethodHandle HGLOBAL_UserUnmarshal64$handle() {
        return HGLOBAL_UserUnmarshal64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *HGLOBAL_UserUnmarshal64(unsigned long *, unsigned char *, HGLOBAL *)
     * }
     */
    public static MemorySegment HGLOBAL_UserUnmarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HGLOBAL_UserUnmarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HGLOBAL_UserUnmarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HGLOBAL_UserFree64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("HGLOBAL_UserFree64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void HGLOBAL_UserFree64(unsigned long *, HGLOBAL *)
     * }
     */
    public static FunctionDescriptor HGLOBAL_UserFree64$descriptor() {
        return HGLOBAL_UserFree64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void HGLOBAL_UserFree64(unsigned long *, HGLOBAL *)
     * }
     */
    public static MethodHandle HGLOBAL_UserFree64$handle() {
        return HGLOBAL_UserFree64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void HGLOBAL_UserFree64(unsigned long *, HGLOBAL *)
     * }
     */
    public static void HGLOBAL_UserFree64(MemorySegment x0, MemorySegment x1) {
        var mh$ = HGLOBAL_UserFree64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HGLOBAL_UserFree64", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HMENU_UserSize64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("HMENU_UserSize64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long HMENU_UserSize64(unsigned long *, unsigned long, HMENU *)
     * }
     */
    public static FunctionDescriptor HMENU_UserSize64$descriptor() {
        return HMENU_UserSize64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long HMENU_UserSize64(unsigned long *, unsigned long, HMENU *)
     * }
     */
    public static MethodHandle HMENU_UserSize64$handle() {
        return HMENU_UserSize64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned long HMENU_UserSize64(unsigned long *, unsigned long, HMENU *)
     * }
     */
    public static int HMENU_UserSize64(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = HMENU_UserSize64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HMENU_UserSize64", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HMENU_UserMarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("HMENU_UserMarshal64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HMENU_UserMarshal64(unsigned long *, unsigned char *, HMENU *)
     * }
     */
    public static FunctionDescriptor HMENU_UserMarshal64$descriptor() {
        return HMENU_UserMarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HMENU_UserMarshal64(unsigned long *, unsigned char *, HMENU *)
     * }
     */
    public static MethodHandle HMENU_UserMarshal64$handle() {
        return HMENU_UserMarshal64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *HMENU_UserMarshal64(unsigned long *, unsigned char *, HMENU *)
     * }
     */
    public static MemorySegment HMENU_UserMarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HMENU_UserMarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HMENU_UserMarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HMENU_UserUnmarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("HMENU_UserUnmarshal64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HMENU_UserUnmarshal64(unsigned long *, unsigned char *, HMENU *)
     * }
     */
    public static FunctionDescriptor HMENU_UserUnmarshal64$descriptor() {
        return HMENU_UserUnmarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HMENU_UserUnmarshal64(unsigned long *, unsigned char *, HMENU *)
     * }
     */
    public static MethodHandle HMENU_UserUnmarshal64$handle() {
        return HMENU_UserUnmarshal64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *HMENU_UserUnmarshal64(unsigned long *, unsigned char *, HMENU *)
     * }
     */
    public static MemorySegment HMENU_UserUnmarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HMENU_UserUnmarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HMENU_UserUnmarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HMENU_UserFree64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("HMENU_UserFree64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void HMENU_UserFree64(unsigned long *, HMENU *)
     * }
     */
    public static FunctionDescriptor HMENU_UserFree64$descriptor() {
        return HMENU_UserFree64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void HMENU_UserFree64(unsigned long *, HMENU *)
     * }
     */
    public static MethodHandle HMENU_UserFree64$handle() {
        return HMENU_UserFree64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void HMENU_UserFree64(unsigned long *, HMENU *)
     * }
     */
    public static void HMENU_UserFree64(MemorySegment x0, MemorySegment x1) {
        var mh$ = HMENU_UserFree64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HMENU_UserFree64", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HWND_UserSize64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("HWND_UserSize64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long HWND_UserSize64(unsigned long *, unsigned long, HWND *)
     * }
     */
    public static FunctionDescriptor HWND_UserSize64$descriptor() {
        return HWND_UserSize64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long HWND_UserSize64(unsigned long *, unsigned long, HWND *)
     * }
     */
    public static MethodHandle HWND_UserSize64$handle() {
        return HWND_UserSize64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned long HWND_UserSize64(unsigned long *, unsigned long, HWND *)
     * }
     */
    public static int HWND_UserSize64(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = HWND_UserSize64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HWND_UserSize64", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HWND_UserMarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("HWND_UserMarshal64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HWND_UserMarshal64(unsigned long *, unsigned char *, HWND *)
     * }
     */
    public static FunctionDescriptor HWND_UserMarshal64$descriptor() {
        return HWND_UserMarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HWND_UserMarshal64(unsigned long *, unsigned char *, HWND *)
     * }
     */
    public static MethodHandle HWND_UserMarshal64$handle() {
        return HWND_UserMarshal64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *HWND_UserMarshal64(unsigned long *, unsigned char *, HWND *)
     * }
     */
    public static MemorySegment HWND_UserMarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HWND_UserMarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HWND_UserMarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HWND_UserUnmarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("HWND_UserUnmarshal64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HWND_UserUnmarshal64(unsigned long *, unsigned char *, HWND *)
     * }
     */
    public static FunctionDescriptor HWND_UserUnmarshal64$descriptor() {
        return HWND_UserUnmarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HWND_UserUnmarshal64(unsigned long *, unsigned char *, HWND *)
     * }
     */
    public static MethodHandle HWND_UserUnmarshal64$handle() {
        return HWND_UserUnmarshal64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *HWND_UserUnmarshal64(unsigned long *, unsigned char *, HWND *)
     * }
     */
    public static MemorySegment HWND_UserUnmarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HWND_UserUnmarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HWND_UserUnmarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HWND_UserFree64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("HWND_UserFree64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void HWND_UserFree64(unsigned long *, HWND *)
     * }
     */
    public static FunctionDescriptor HWND_UserFree64$descriptor() {
        return HWND_UserFree64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void HWND_UserFree64(unsigned long *, HWND *)
     * }
     */
    public static MethodHandle HWND_UserFree64$handle() {
        return HWND_UserFree64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void HWND_UserFree64(unsigned long *, HWND *)
     * }
     */
    public static void HWND_UserFree64(MemorySegment x0, MemorySegment x1) {
        var mh$ = HWND_UserFree64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HWND_UserFree64", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IOleCache2_UpdateCache_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("IOleCache2_UpdateCache_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IOleCache2_UpdateCache_Proxy(IOleCache2 *This, LPDATAOBJECT pDataObject, DWORD grfUpdf, LPVOID pReserved)
     * }
     */
    public static FunctionDescriptor IOleCache2_UpdateCache_Proxy$descriptor() {
        return IOleCache2_UpdateCache_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IOleCache2_UpdateCache_Proxy(IOleCache2 *This, LPDATAOBJECT pDataObject, DWORD grfUpdf, LPVOID pReserved)
     * }
     */
    public static MethodHandle IOleCache2_UpdateCache_Proxy$handle() {
        return IOleCache2_UpdateCache_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IOleCache2_UpdateCache_Proxy(IOleCache2 *This, LPDATAOBJECT pDataObject, DWORD grfUpdf, LPVOID pReserved)
     * }
     */
    public static int IOleCache2_UpdateCache_Proxy(MemorySegment This, MemorySegment pDataObject, int grfUpdf, MemorySegment pReserved) {
        var mh$ = IOleCache2_UpdateCache_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IOleCache2_UpdateCache_Proxy", This, pDataObject, grfUpdf, pReserved);
            }
            return (int)mh$.invokeExact(This, pDataObject, grfUpdf, pReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IOleCache2_UpdateCache_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("IOleCache2_UpdateCache_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IOleCache2_UpdateCache_Stub(IOleCache2 *This, LPDATAOBJECT pDataObject, DWORD grfUpdf, LONG_PTR pReserved)
     * }
     */
    public static FunctionDescriptor IOleCache2_UpdateCache_Stub$descriptor() {
        return IOleCache2_UpdateCache_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IOleCache2_UpdateCache_Stub(IOleCache2 *This, LPDATAOBJECT pDataObject, DWORD grfUpdf, LONG_PTR pReserved)
     * }
     */
    public static MethodHandle IOleCache2_UpdateCache_Stub$handle() {
        return IOleCache2_UpdateCache_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IOleCache2_UpdateCache_Stub(IOleCache2 *This, LPDATAOBJECT pDataObject, DWORD grfUpdf, LONG_PTR pReserved)
     * }
     */
    public static int IOleCache2_UpdateCache_Stub(MemorySegment This, MemorySegment pDataObject, int grfUpdf, long pReserved) {
        var mh$ = IOleCache2_UpdateCache_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IOleCache2_UpdateCache_Stub", This, pDataObject, grfUpdf, pReserved);
            }
            return (int)mh$.invokeExact(This, pDataObject, grfUpdf, pReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IOleInPlaceActiveObject_TranslateAccelerator_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("IOleInPlaceActiveObject_TranslateAccelerator_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IOleInPlaceActiveObject_TranslateAccelerator_Proxy(IOleInPlaceActiveObject *This, LPMSG lpmsg)
     * }
     */
    public static FunctionDescriptor IOleInPlaceActiveObject_TranslateAccelerator_Proxy$descriptor() {
        return IOleInPlaceActiveObject_TranslateAccelerator_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IOleInPlaceActiveObject_TranslateAccelerator_Proxy(IOleInPlaceActiveObject *This, LPMSG lpmsg)
     * }
     */
    public static MethodHandle IOleInPlaceActiveObject_TranslateAccelerator_Proxy$handle() {
        return IOleInPlaceActiveObject_TranslateAccelerator_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IOleInPlaceActiveObject_TranslateAccelerator_Proxy(IOleInPlaceActiveObject *This, LPMSG lpmsg)
     * }
     */
    public static int IOleInPlaceActiveObject_TranslateAccelerator_Proxy(MemorySegment This, MemorySegment lpmsg) {
        var mh$ = IOleInPlaceActiveObject_TranslateAccelerator_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IOleInPlaceActiveObject_TranslateAccelerator_Proxy", This, lpmsg);
            }
            return (int)mh$.invokeExact(This, lpmsg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IOleInPlaceActiveObject_TranslateAccelerator_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("IOleInPlaceActiveObject_TranslateAccelerator_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IOleInPlaceActiveObject_TranslateAccelerator_Stub(IOleInPlaceActiveObject *This)
     * }
     */
    public static FunctionDescriptor IOleInPlaceActiveObject_TranslateAccelerator_Stub$descriptor() {
        return IOleInPlaceActiveObject_TranslateAccelerator_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IOleInPlaceActiveObject_TranslateAccelerator_Stub(IOleInPlaceActiveObject *This)
     * }
     */
    public static MethodHandle IOleInPlaceActiveObject_TranslateAccelerator_Stub$handle() {
        return IOleInPlaceActiveObject_TranslateAccelerator_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IOleInPlaceActiveObject_TranslateAccelerator_Stub(IOleInPlaceActiveObject *This)
     * }
     */
    public static int IOleInPlaceActiveObject_TranslateAccelerator_Stub(MemorySegment This) {
        var mh$ = IOleInPlaceActiveObject_TranslateAccelerator_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IOleInPlaceActiveObject_TranslateAccelerator_Stub", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IOleInPlaceActiveObject_ResizeBorder_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("IOleInPlaceActiveObject_ResizeBorder_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IOleInPlaceActiveObject_ResizeBorder_Proxy(IOleInPlaceActiveObject *This, LPCRECT prcBorder, IOleInPlaceUIWindow *pUIWindow, BOOL fFrameWindow)
     * }
     */
    public static FunctionDescriptor IOleInPlaceActiveObject_ResizeBorder_Proxy$descriptor() {
        return IOleInPlaceActiveObject_ResizeBorder_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IOleInPlaceActiveObject_ResizeBorder_Proxy(IOleInPlaceActiveObject *This, LPCRECT prcBorder, IOleInPlaceUIWindow *pUIWindow, BOOL fFrameWindow)
     * }
     */
    public static MethodHandle IOleInPlaceActiveObject_ResizeBorder_Proxy$handle() {
        return IOleInPlaceActiveObject_ResizeBorder_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IOleInPlaceActiveObject_ResizeBorder_Proxy(IOleInPlaceActiveObject *This, LPCRECT prcBorder, IOleInPlaceUIWindow *pUIWindow, BOOL fFrameWindow)
     * }
     */
    public static int IOleInPlaceActiveObject_ResizeBorder_Proxy(MemorySegment This, MemorySegment prcBorder, MemorySegment pUIWindow, int fFrameWindow) {
        var mh$ = IOleInPlaceActiveObject_ResizeBorder_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IOleInPlaceActiveObject_ResizeBorder_Proxy", This, prcBorder, pUIWindow, fFrameWindow);
            }
            return (int)mh$.invokeExact(This, prcBorder, pUIWindow, fFrameWindow);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IOleInPlaceActiveObject_ResizeBorder_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("IOleInPlaceActiveObject_ResizeBorder_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IOleInPlaceActiveObject_ResizeBorder_Stub(IOleInPlaceActiveObject *This, LPCRECT prcBorder, const IID *const riid, IOleInPlaceUIWindow *pUIWindow, BOOL fFrameWindow)
     * }
     */
    public static FunctionDescriptor IOleInPlaceActiveObject_ResizeBorder_Stub$descriptor() {
        return IOleInPlaceActiveObject_ResizeBorder_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IOleInPlaceActiveObject_ResizeBorder_Stub(IOleInPlaceActiveObject *This, LPCRECT prcBorder, const IID *const riid, IOleInPlaceUIWindow *pUIWindow, BOOL fFrameWindow)
     * }
     */
    public static MethodHandle IOleInPlaceActiveObject_ResizeBorder_Stub$handle() {
        return IOleInPlaceActiveObject_ResizeBorder_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IOleInPlaceActiveObject_ResizeBorder_Stub(IOleInPlaceActiveObject *This, LPCRECT prcBorder, const IID *const riid, IOleInPlaceUIWindow *pUIWindow, BOOL fFrameWindow)
     * }
     */
    public static int IOleInPlaceActiveObject_ResizeBorder_Stub(MemorySegment This, MemorySegment prcBorder, MemorySegment riid, MemorySegment pUIWindow, int fFrameWindow) {
        var mh$ = IOleInPlaceActiveObject_ResizeBorder_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IOleInPlaceActiveObject_ResizeBorder_Stub", This, prcBorder, riid, pUIWindow, fFrameWindow);
            }
            return (int)mh$.invokeExact(This, prcBorder, riid, pUIWindow, fFrameWindow);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IViewObject_Draw_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("IViewObject_Draw_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IViewObject_Draw_Proxy(IViewObject *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DVTARGETDEVICE *ptd, HDC hdcTargetDev, HDC hdcDraw, LPCRECTL lprcBounds, LPCRECTL lprcWBounds, BOOL (*pfnContinue)(ULONG_PTR) __attribute__((stdcall)), ULONG_PTR dwContinue)
     * }
     */
    public static FunctionDescriptor IViewObject_Draw_Proxy$descriptor() {
        return IViewObject_Draw_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IViewObject_Draw_Proxy(IViewObject *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DVTARGETDEVICE *ptd, HDC hdcTargetDev, HDC hdcDraw, LPCRECTL lprcBounds, LPCRECTL lprcWBounds, BOOL (*pfnContinue)(ULONG_PTR) __attribute__((stdcall)), ULONG_PTR dwContinue)
     * }
     */
    public static MethodHandle IViewObject_Draw_Proxy$handle() {
        return IViewObject_Draw_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IViewObject_Draw_Proxy(IViewObject *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DVTARGETDEVICE *ptd, HDC hdcTargetDev, HDC hdcDraw, LPCRECTL lprcBounds, LPCRECTL lprcWBounds, BOOL (*pfnContinue)(ULONG_PTR) __attribute__((stdcall)), ULONG_PTR dwContinue)
     * }
     */
    public static int IViewObject_Draw_Proxy(MemorySegment This, int dwDrawAspect, int lindex, MemorySegment pvAspect, MemorySegment ptd, MemorySegment hdcTargetDev, MemorySegment hdcDraw, MemorySegment lprcBounds, MemorySegment lprcWBounds, MemorySegment pfnContinue, long dwContinue) {
        var mh$ = IViewObject_Draw_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IViewObject_Draw_Proxy", This, dwDrawAspect, lindex, pvAspect, ptd, hdcTargetDev, hdcDraw, lprcBounds, lprcWBounds, pfnContinue, dwContinue);
            }
            return (int)mh$.invokeExact(This, dwDrawAspect, lindex, pvAspect, ptd, hdcTargetDev, hdcDraw, lprcBounds, lprcWBounds, pfnContinue, dwContinue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IViewObject_Draw_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_LONG,
            Windows_h.C_LONG_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("IViewObject_Draw_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IViewObject_Draw_Stub(IViewObject *This, DWORD dwDrawAspect, LONG lindex, ULONG_PTR pvAspect, DVTARGETDEVICE *ptd, HDC hdcTargetDev, HDC hdcDraw, LPCRECTL lprcBounds, LPCRECTL lprcWBounds, IContinue *pContinue)
     * }
     */
    public static FunctionDescriptor IViewObject_Draw_Stub$descriptor() {
        return IViewObject_Draw_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IViewObject_Draw_Stub(IViewObject *This, DWORD dwDrawAspect, LONG lindex, ULONG_PTR pvAspect, DVTARGETDEVICE *ptd, HDC hdcTargetDev, HDC hdcDraw, LPCRECTL lprcBounds, LPCRECTL lprcWBounds, IContinue *pContinue)
     * }
     */
    public static MethodHandle IViewObject_Draw_Stub$handle() {
        return IViewObject_Draw_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IViewObject_Draw_Stub(IViewObject *This, DWORD dwDrawAspect, LONG lindex, ULONG_PTR pvAspect, DVTARGETDEVICE *ptd, HDC hdcTargetDev, HDC hdcDraw, LPCRECTL lprcBounds, LPCRECTL lprcWBounds, IContinue *pContinue)
     * }
     */
    public static int IViewObject_Draw_Stub(MemorySegment This, int dwDrawAspect, int lindex, long pvAspect, MemorySegment ptd, MemorySegment hdcTargetDev, MemorySegment hdcDraw, MemorySegment lprcBounds, MemorySegment lprcWBounds, MemorySegment pContinue) {
        var mh$ = IViewObject_Draw_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IViewObject_Draw_Stub", This, dwDrawAspect, lindex, pvAspect, ptd, hdcTargetDev, hdcDraw, lprcBounds, lprcWBounds, pContinue);
            }
            return (int)mh$.invokeExact(This, dwDrawAspect, lindex, pvAspect, ptd, hdcTargetDev, hdcDraw, lprcBounds, lprcWBounds, pContinue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IViewObject_GetColorSet_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("IViewObject_GetColorSet_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IViewObject_GetColorSet_Proxy(IViewObject *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DVTARGETDEVICE *ptd, HDC hicTargetDev, LOGPALETTE **ppColorSet)
     * }
     */
    public static FunctionDescriptor IViewObject_GetColorSet_Proxy$descriptor() {
        return IViewObject_GetColorSet_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IViewObject_GetColorSet_Proxy(IViewObject *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DVTARGETDEVICE *ptd, HDC hicTargetDev, LOGPALETTE **ppColorSet)
     * }
     */
    public static MethodHandle IViewObject_GetColorSet_Proxy$handle() {
        return IViewObject_GetColorSet_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IViewObject_GetColorSet_Proxy(IViewObject *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DVTARGETDEVICE *ptd, HDC hicTargetDev, LOGPALETTE **ppColorSet)
     * }
     */
    public static int IViewObject_GetColorSet_Proxy(MemorySegment This, int dwDrawAspect, int lindex, MemorySegment pvAspect, MemorySegment ptd, MemorySegment hicTargetDev, MemorySegment ppColorSet) {
        var mh$ = IViewObject_GetColorSet_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IViewObject_GetColorSet_Proxy", This, dwDrawAspect, lindex, pvAspect, ptd, hicTargetDev, ppColorSet);
            }
            return (int)mh$.invokeExact(This, dwDrawAspect, lindex, pvAspect, ptd, hicTargetDev, ppColorSet);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IViewObject_GetColorSet_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_LONG,
            Windows_h.C_LONG_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_LONG_LONG,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("IViewObject_GetColorSet_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IViewObject_GetColorSet_Stub(IViewObject *This, DWORD dwDrawAspect, LONG lindex, ULONG_PTR pvAspect, DVTARGETDEVICE *ptd, ULONG_PTR hicTargetDev, LOGPALETTE **ppColorSet)
     * }
     */
    public static FunctionDescriptor IViewObject_GetColorSet_Stub$descriptor() {
        return IViewObject_GetColorSet_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IViewObject_GetColorSet_Stub(IViewObject *This, DWORD dwDrawAspect, LONG lindex, ULONG_PTR pvAspect, DVTARGETDEVICE *ptd, ULONG_PTR hicTargetDev, LOGPALETTE **ppColorSet)
     * }
     */
    public static MethodHandle IViewObject_GetColorSet_Stub$handle() {
        return IViewObject_GetColorSet_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IViewObject_GetColorSet_Stub(IViewObject *This, DWORD dwDrawAspect, LONG lindex, ULONG_PTR pvAspect, DVTARGETDEVICE *ptd, ULONG_PTR hicTargetDev, LOGPALETTE **ppColorSet)
     * }
     */
    public static int IViewObject_GetColorSet_Stub(MemorySegment This, int dwDrawAspect, int lindex, long pvAspect, MemorySegment ptd, long hicTargetDev, MemorySegment ppColorSet) {
        var mh$ = IViewObject_GetColorSet_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IViewObject_GetColorSet_Stub", This, dwDrawAspect, lindex, pvAspect, ptd, hicTargetDev, ppColorSet);
            }
            return (int)mh$.invokeExact(This, dwDrawAspect, lindex, pvAspect, ptd, hicTargetDev, ppColorSet);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IViewObject_Freeze_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("IViewObject_Freeze_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IViewObject_Freeze_Proxy(IViewObject *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DWORD *pdwFreeze)
     * }
     */
    public static FunctionDescriptor IViewObject_Freeze_Proxy$descriptor() {
        return IViewObject_Freeze_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IViewObject_Freeze_Proxy(IViewObject *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DWORD *pdwFreeze)
     * }
     */
    public static MethodHandle IViewObject_Freeze_Proxy$handle() {
        return IViewObject_Freeze_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IViewObject_Freeze_Proxy(IViewObject *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DWORD *pdwFreeze)
     * }
     */
    public static int IViewObject_Freeze_Proxy(MemorySegment This, int dwDrawAspect, int lindex, MemorySegment pvAspect, MemorySegment pdwFreeze) {
        var mh$ = IViewObject_Freeze_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IViewObject_Freeze_Proxy", This, dwDrawAspect, lindex, pvAspect, pdwFreeze);
            }
            return (int)mh$.invokeExact(This, dwDrawAspect, lindex, pvAspect, pdwFreeze);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IViewObject_Freeze_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_LONG,
            Windows_h.C_LONG_LONG,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("IViewObject_Freeze_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IViewObject_Freeze_Stub(IViewObject *This, DWORD dwDrawAspect, LONG lindex, ULONG_PTR pvAspect, DWORD *pdwFreeze)
     * }
     */
    public static FunctionDescriptor IViewObject_Freeze_Stub$descriptor() {
        return IViewObject_Freeze_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IViewObject_Freeze_Stub(IViewObject *This, DWORD dwDrawAspect, LONG lindex, ULONG_PTR pvAspect, DWORD *pdwFreeze)
     * }
     */
    public static MethodHandle IViewObject_Freeze_Stub$handle() {
        return IViewObject_Freeze_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IViewObject_Freeze_Stub(IViewObject *This, DWORD dwDrawAspect, LONG lindex, ULONG_PTR pvAspect, DWORD *pdwFreeze)
     * }
     */
    public static int IViewObject_Freeze_Stub(MemorySegment This, int dwDrawAspect, int lindex, long pvAspect, MemorySegment pdwFreeze) {
        var mh$ = IViewObject_Freeze_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IViewObject_Freeze_Stub", This, dwDrawAspect, lindex, pvAspect, pdwFreeze);
            }
            return (int)mh$.invokeExact(This, dwDrawAspect, lindex, pvAspect, pdwFreeze);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IViewObject_GetAdvise_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("IViewObject_GetAdvise_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IViewObject_GetAdvise_Proxy(IViewObject *This, DWORD *pAspects, DWORD *pAdvf, IAdviseSink **ppAdvSink)
     * }
     */
    public static FunctionDescriptor IViewObject_GetAdvise_Proxy$descriptor() {
        return IViewObject_GetAdvise_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IViewObject_GetAdvise_Proxy(IViewObject *This, DWORD *pAspects, DWORD *pAdvf, IAdviseSink **ppAdvSink)
     * }
     */
    public static MethodHandle IViewObject_GetAdvise_Proxy$handle() {
        return IViewObject_GetAdvise_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IViewObject_GetAdvise_Proxy(IViewObject *This, DWORD *pAspects, DWORD *pAdvf, IAdviseSink **ppAdvSink)
     * }
     */
    public static int IViewObject_GetAdvise_Proxy(MemorySegment This, MemorySegment pAspects, MemorySegment pAdvf, MemorySegment ppAdvSink) {
        var mh$ = IViewObject_GetAdvise_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IViewObject_GetAdvise_Proxy", This, pAspects, pAdvf, ppAdvSink);
            }
            return (int)mh$.invokeExact(This, pAspects, pAdvf, ppAdvSink);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IViewObject_GetAdvise_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("IViewObject_GetAdvise_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IViewObject_GetAdvise_Stub(IViewObject *This, DWORD *pAspects, DWORD *pAdvf, IAdviseSink **ppAdvSink)
     * }
     */
    public static FunctionDescriptor IViewObject_GetAdvise_Stub$descriptor() {
        return IViewObject_GetAdvise_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IViewObject_GetAdvise_Stub(IViewObject *This, DWORD *pAspects, DWORD *pAdvf, IAdviseSink **ppAdvSink)
     * }
     */
    public static MethodHandle IViewObject_GetAdvise_Stub$handle() {
        return IViewObject_GetAdvise_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IViewObject_GetAdvise_Stub(IViewObject *This, DWORD *pAspects, DWORD *pAdvf, IAdviseSink **ppAdvSink)
     * }
     */
    public static int IViewObject_GetAdvise_Stub(MemorySegment This, MemorySegment pAspects, MemorySegment pAdvf, MemorySegment ppAdvSink) {
        var mh$ = IViewObject_GetAdvise_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IViewObject_GetAdvise_Stub", This, pAspects, pAdvf, ppAdvSink);
            }
            return (int)mh$.invokeExact(This, pAspects, pAdvf, ppAdvSink);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumOLEVERB_Next_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("IEnumOLEVERB_Next_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumOLEVERB_Next_Proxy(IEnumOLEVERB *This, ULONG celt, LPOLEVERB rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumOLEVERB_Next_Proxy$descriptor() {
        return IEnumOLEVERB_Next_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumOLEVERB_Next_Proxy(IEnumOLEVERB *This, ULONG celt, LPOLEVERB rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumOLEVERB_Next_Proxy$handle() {
        return IEnumOLEVERB_Next_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IEnumOLEVERB_Next_Proxy(IEnumOLEVERB *This, ULONG celt, LPOLEVERB rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumOLEVERB_Next_Proxy(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumOLEVERB_Next_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumOLEVERB_Next_Proxy", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumOLEVERB_Next_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("IEnumOLEVERB_Next_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumOLEVERB_Next_Stub(IEnumOLEVERB *This, ULONG celt, LPOLEVERB rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumOLEVERB_Next_Stub$descriptor() {
        return IEnumOLEVERB_Next_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumOLEVERB_Next_Stub(IEnumOLEVERB *This, ULONG celt, LPOLEVERB rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumOLEVERB_Next_Stub$handle() {
        return IEnumOLEVERB_Next_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IEnumOLEVERB_Next_Stub(IEnumOLEVERB *This, ULONG celt, LPOLEVERB rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumOLEVERB_Next_Stub(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumOLEVERB_Next_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumOLEVERB_Next_Stub", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_servprov_0000_0000_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_servprov_0000_0000_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0000_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_servprov_0000_0000_v0_0_c_ifspec$layout() {
        return __MIDL_itf_servprov_0000_0000_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0000_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_servprov_0000_0000_v0_0_c_ifspec$segment() {
        return __MIDL_itf_servprov_0000_0000_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0000_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_servprov_0000_0000_v0_0_c_ifspec() {
        return __MIDL_itf_servprov_0000_0000_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_servprov_0000_0000_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0000_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_servprov_0000_0000_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_servprov_0000_0000_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_servprov_0000_0000_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_servprov_0000_0000_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_servprov_0000_0000_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0000_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_servprov_0000_0000_v0_0_s_ifspec$layout() {
        return __MIDL_itf_servprov_0000_0000_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0000_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_servprov_0000_0000_v0_0_s_ifspec$segment() {
        return __MIDL_itf_servprov_0000_0000_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0000_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_servprov_0000_0000_v0_0_s_ifspec() {
        return __MIDL_itf_servprov_0000_0000_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_servprov_0000_0000_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0000_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_servprov_0000_0000_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_servprov_0000_0000_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_servprov_0000_0000_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IServiceProvider *LPSERVICEPROVIDER
     * }
     */
    public static final AddressLayout LPSERVICEPROVIDER = Windows_h.C_POINTER;

    private static class IID_IServiceProvider$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IServiceProvider").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IServiceProvider
     * }
     */
    public static GroupLayout IID_IServiceProvider$layout() {
        return IID_IServiceProvider$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IServiceProvider
     * }
     */
    public static MemorySegment IID_IServiceProvider() {
        return IID_IServiceProvider$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IServiceProvider
     * }
     */
    public static void IID_IServiceProvider(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IServiceProvider$constants.SEGMENT, 0L, IID_IServiceProvider$constants.LAYOUT.byteSize());
    }

    private static class IServiceProvider_RemoteQueryService_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("IServiceProvider_RemoteQueryService_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IServiceProvider_RemoteQueryService_Proxy(IServiceProvider *This, const GUID *const guidService, const IID *const riid, IUnknown **ppvObject)
     * }
     */
    public static FunctionDescriptor IServiceProvider_RemoteQueryService_Proxy$descriptor() {
        return IServiceProvider_RemoteQueryService_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IServiceProvider_RemoteQueryService_Proxy(IServiceProvider *This, const GUID *const guidService, const IID *const riid, IUnknown **ppvObject)
     * }
     */
    public static MethodHandle IServiceProvider_RemoteQueryService_Proxy$handle() {
        return IServiceProvider_RemoteQueryService_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IServiceProvider_RemoteQueryService_Proxy(IServiceProvider *This, const GUID *const guidService, const IID *const riid, IUnknown **ppvObject)
     * }
     */
    public static int IServiceProvider_RemoteQueryService_Proxy(MemorySegment This, MemorySegment guidService, MemorySegment riid, MemorySegment ppvObject) {
        var mh$ = IServiceProvider_RemoteQueryService_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IServiceProvider_RemoteQueryService_Proxy", This, guidService, riid, ppvObject);
            }
            return (int)mh$.invokeExact(This, guidService, riid, ppvObject);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IServiceProvider_RemoteQueryService_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("IServiceProvider_RemoteQueryService_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IServiceProvider_RemoteQueryService_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IServiceProvider_RemoteQueryService_Stub$descriptor() {
        return IServiceProvider_RemoteQueryService_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IServiceProvider_RemoteQueryService_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IServiceProvider_RemoteQueryService_Stub$handle() {
        return IServiceProvider_RemoteQueryService_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void IServiceProvider_RemoteQueryService_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IServiceProvider_RemoteQueryService_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IServiceProvider_RemoteQueryService_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IServiceProvider_RemoteQueryService_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_servprov_0000_0001_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_servprov_0000_0001_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0001_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_servprov_0000_0001_v0_0_c_ifspec$layout() {
        return __MIDL_itf_servprov_0000_0001_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0001_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_servprov_0000_0001_v0_0_c_ifspec$segment() {
        return __MIDL_itf_servprov_0000_0001_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0001_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_servprov_0000_0001_v0_0_c_ifspec() {
        return __MIDL_itf_servprov_0000_0001_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_servprov_0000_0001_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0001_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_servprov_0000_0001_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_servprov_0000_0001_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_servprov_0000_0001_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_servprov_0000_0001_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_servprov_0000_0001_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0001_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_servprov_0000_0001_v0_0_s_ifspec$layout() {
        return __MIDL_itf_servprov_0000_0001_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0001_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_servprov_0000_0001_v0_0_s_ifspec$segment() {
        return __MIDL_itf_servprov_0000_0001_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0001_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_servprov_0000_0001_v0_0_s_ifspec() {
        return __MIDL_itf_servprov_0000_0001_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_servprov_0000_0001_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0001_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_servprov_0000_0001_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_servprov_0000_0001_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_servprov_0000_0001_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IServiceProvider_QueryService_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("IServiceProvider_QueryService_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IServiceProvider_QueryService_Proxy(IServiceProvider *This, const GUID *const guidService, const IID *const riid, void **ppvObject)
     * }
     */
    public static FunctionDescriptor IServiceProvider_QueryService_Proxy$descriptor() {
        return IServiceProvider_QueryService_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IServiceProvider_QueryService_Proxy(IServiceProvider *This, const GUID *const guidService, const IID *const riid, void **ppvObject)
     * }
     */
    public static MethodHandle IServiceProvider_QueryService_Proxy$handle() {
        return IServiceProvider_QueryService_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IServiceProvider_QueryService_Proxy(IServiceProvider *This, const GUID *const guidService, const IID *const riid, void **ppvObject)
     * }
     */
    public static int IServiceProvider_QueryService_Proxy(MemorySegment This, MemorySegment guidService, MemorySegment riid, MemorySegment ppvObject) {
        var mh$ = IServiceProvider_QueryService_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IServiceProvider_QueryService_Proxy", This, guidService, riid, ppvObject);
            }
            return (int)mh$.invokeExact(This, guidService, riid, ppvObject);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IServiceProvider_QueryService_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("IServiceProvider_QueryService_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IServiceProvider_QueryService_Stub(IServiceProvider *This, const GUID *const guidService, const IID *const riid, IUnknown **ppvObject)
     * }
     */
    public static FunctionDescriptor IServiceProvider_QueryService_Stub$descriptor() {
        return IServiceProvider_QueryService_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IServiceProvider_QueryService_Stub(IServiceProvider *This, const GUID *const guidService, const IID *const riid, IUnknown **ppvObject)
     * }
     */
    public static MethodHandle IServiceProvider_QueryService_Stub$handle() {
        return IServiceProvider_QueryService_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IServiceProvider_QueryService_Stub(IServiceProvider *This, const GUID *const guidService, const IID *const riid, IUnknown **ppvObject)
     * }
     */
    public static int IServiceProvider_QueryService_Stub(MemorySegment This, MemorySegment guidService, MemorySegment riid, MemorySegment ppvObject) {
        var mh$ = IServiceProvider_QueryService_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IServiceProvider_QueryService_Stub", This, guidService, riid, ppvObject);
            }
            return (int)mh$.invokeExact(This, guidService, riid, ppvObject);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_msxml_0000_0000_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_msxml_0000_0000_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_0000_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_msxml_0000_0000_v0_0_c_ifspec$layout() {
        return __MIDL_itf_msxml_0000_0000_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_0000_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_msxml_0000_0000_v0_0_c_ifspec$segment() {
        return __MIDL_itf_msxml_0000_0000_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_0000_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_msxml_0000_0000_v0_0_c_ifspec() {
        return __MIDL_itf_msxml_0000_0000_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_msxml_0000_0000_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_0000_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_msxml_0000_0000_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_msxml_0000_0000_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_msxml_0000_0000_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_msxml_0000_0000_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_msxml_0000_0000_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_0000_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_msxml_0000_0000_v0_0_s_ifspec$layout() {
        return __MIDL_itf_msxml_0000_0000_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_0000_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_msxml_0000_0000_v0_0_s_ifspec$segment() {
        return __MIDL_itf_msxml_0000_0000_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_0000_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_msxml_0000_0000_v0_0_s_ifspec() {
        return __MIDL_itf_msxml_0000_0000_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_msxml_0000_0000_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_0000_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_msxml_0000_0000_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_msxml_0000_0000_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_msxml_0000_0000_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    private static final int NODE_INVALID = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagDOMNodeType.NODE_INVALID = 0
     * }
     */
    public static int NODE_INVALID() {
        return NODE_INVALID;
    }
    private static final int NODE_ELEMENT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagDOMNodeType.NODE_ELEMENT = 1
     * }
     */
    public static int NODE_ELEMENT() {
        return NODE_ELEMENT;
    }
    private static final int NODE_ATTRIBUTE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagDOMNodeType.NODE_ATTRIBUTE = 2
     * }
     */
    public static int NODE_ATTRIBUTE() {
        return NODE_ATTRIBUTE;
    }
    private static final int NODE_TEXT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagDOMNodeType.NODE_TEXT = 3
     * }
     */
    public static int NODE_TEXT() {
        return NODE_TEXT;
    }
    private static final int NODE_CDATA_SECTION = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagDOMNodeType.NODE_CDATA_SECTION = 4
     * }
     */
    public static int NODE_CDATA_SECTION() {
        return NODE_CDATA_SECTION;
    }
    private static final int NODE_ENTITY_REFERENCE = (int)5L;
    /**
     * {@snippet lang=c :
     * enum tagDOMNodeType.NODE_ENTITY_REFERENCE = 5
     * }
     */
    public static int NODE_ENTITY_REFERENCE() {
        return NODE_ENTITY_REFERENCE;
    }
    private static final int NODE_ENTITY = (int)6L;
    /**
     * {@snippet lang=c :
     * enum tagDOMNodeType.NODE_ENTITY = 6
     * }
     */
    public static int NODE_ENTITY() {
        return NODE_ENTITY;
    }
    private static final int NODE_PROCESSING_INSTRUCTION = (int)7L;
    /**
     * {@snippet lang=c :
     * enum tagDOMNodeType.NODE_PROCESSING_INSTRUCTION = 7
     * }
     */
    public static int NODE_PROCESSING_INSTRUCTION() {
        return NODE_PROCESSING_INSTRUCTION;
    }
    private static final int NODE_COMMENT = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagDOMNodeType.NODE_COMMENT = 8
     * }
     */
    public static int NODE_COMMENT() {
        return NODE_COMMENT;
    }
    private static final int NODE_DOCUMENT = (int)9L;
    /**
     * {@snippet lang=c :
     * enum tagDOMNodeType.NODE_DOCUMENT = 9
     * }
     */
    public static int NODE_DOCUMENT() {
        return NODE_DOCUMENT;
    }
    private static final int NODE_DOCUMENT_TYPE = (int)10L;
    /**
     * {@snippet lang=c :
     * enum tagDOMNodeType.NODE_DOCUMENT_TYPE = 10
     * }
     */
    public static int NODE_DOCUMENT_TYPE() {
        return NODE_DOCUMENT_TYPE;
    }
    private static final int NODE_DOCUMENT_FRAGMENT = (int)11L;
    /**
     * {@snippet lang=c :
     * enum tagDOMNodeType.NODE_DOCUMENT_FRAGMENT = 11
     * }
     */
    public static int NODE_DOCUMENT_FRAGMENT() {
        return NODE_DOCUMENT_FRAGMENT;
    }
    private static final int NODE_NOTATION = (int)12L;
    /**
     * {@snippet lang=c :
     * enum tagDOMNodeType.NODE_NOTATION = 12
     * }
     */
    public static int NODE_NOTATION() {
        return NODE_NOTATION;
    }
    private static final int XMLELEMTYPE_ELEMENT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagXMLEMEM_TYPE.XMLELEMTYPE_ELEMENT = 0
     * }
     */
    public static int XMLELEMTYPE_ELEMENT() {
        return XMLELEMTYPE_ELEMENT;
    }
    private static final int XMLELEMTYPE_TEXT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagXMLEMEM_TYPE.XMLELEMTYPE_TEXT = 1
     * }
     */
    public static int XMLELEMTYPE_TEXT() {
        return XMLELEMTYPE_TEXT;
    }
    private static final int XMLELEMTYPE_COMMENT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagXMLEMEM_TYPE.XMLELEMTYPE_COMMENT = 2
     * }
     */
    public static int XMLELEMTYPE_COMMENT() {
        return XMLELEMTYPE_COMMENT;
    }
    private static final int XMLELEMTYPE_DOCUMENT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagXMLEMEM_TYPE.XMLELEMTYPE_DOCUMENT = 3
     * }
     */
    public static int XMLELEMTYPE_DOCUMENT() {
        return XMLELEMTYPE_DOCUMENT;
    }
    private static final int XMLELEMTYPE_DTD = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagXMLEMEM_TYPE.XMLELEMTYPE_DTD = 4
     * }
     */
    public static int XMLELEMTYPE_DTD() {
        return XMLELEMTYPE_DTD;
    }
    private static final int XMLELEMTYPE_PI = (int)5L;
    /**
     * {@snippet lang=c :
     * enum tagXMLEMEM_TYPE.XMLELEMTYPE_PI = 5
     * }
     */
    public static int XMLELEMTYPE_PI() {
        return XMLELEMTYPE_PI;
    }
    private static final int XMLELEMTYPE_OTHER = (int)6L;
    /**
     * {@snippet lang=c :
     * enum tagXMLEMEM_TYPE.XMLELEMTYPE_OTHER = 6
     * }
     */
    public static int XMLELEMTYPE_OTHER() {
        return XMLELEMTYPE_OTHER;
    }

    private static class LIBID_MSXML$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("LIBID_MSXML").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID LIBID_MSXML
     * }
     */
    public static GroupLayout LIBID_MSXML$layout() {
        return LIBID_MSXML$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID LIBID_MSXML
     * }
     */
    public static MemorySegment LIBID_MSXML() {
        return LIBID_MSXML$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID LIBID_MSXML
     * }
     */
    public static void LIBID_MSXML(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, LIBID_MSXML$constants.SEGMENT, 0L, LIBID_MSXML$constants.LAYOUT.byteSize());
    }

    private static class IID_IXMLDOMImplementation$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IXMLDOMImplementation").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMImplementation
     * }
     */
    public static GroupLayout IID_IXMLDOMImplementation$layout() {
        return IID_IXMLDOMImplementation$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMImplementation
     * }
     */
    public static MemorySegment IID_IXMLDOMImplementation() {
        return IID_IXMLDOMImplementation$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMImplementation
     * }
     */
    public static void IID_IXMLDOMImplementation(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IXMLDOMImplementation$constants.SEGMENT, 0L, IID_IXMLDOMImplementation$constants.LAYOUT.byteSize());
    }

    private static class IID_IXMLDOMNode$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IXMLDOMNode").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMNode
     * }
     */
    public static GroupLayout IID_IXMLDOMNode$layout() {
        return IID_IXMLDOMNode$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMNode
     * }
     */
    public static MemorySegment IID_IXMLDOMNode() {
        return IID_IXMLDOMNode$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMNode
     * }
     */
    public static void IID_IXMLDOMNode(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IXMLDOMNode$constants.SEGMENT, 0L, IID_IXMLDOMNode$constants.LAYOUT.byteSize());
    }

    private static class IID_IXMLDOMDocumentFragment$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IXMLDOMDocumentFragment").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMDocumentFragment
     * }
     */
    public static GroupLayout IID_IXMLDOMDocumentFragment$layout() {
        return IID_IXMLDOMDocumentFragment$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMDocumentFragment
     * }
     */
    public static MemorySegment IID_IXMLDOMDocumentFragment() {
        return IID_IXMLDOMDocumentFragment$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMDocumentFragment
     * }
     */
    public static void IID_IXMLDOMDocumentFragment(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IXMLDOMDocumentFragment$constants.SEGMENT, 0L, IID_IXMLDOMDocumentFragment$constants.LAYOUT.byteSize());
    }

    private static class IID_IXMLDOMDocument$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IXMLDOMDocument").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMDocument
     * }
     */
    public static GroupLayout IID_IXMLDOMDocument$layout() {
        return IID_IXMLDOMDocument$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMDocument
     * }
     */
    public static MemorySegment IID_IXMLDOMDocument() {
        return IID_IXMLDOMDocument$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMDocument
     * }
     */
    public static void IID_IXMLDOMDocument(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IXMLDOMDocument$constants.SEGMENT, 0L, IID_IXMLDOMDocument$constants.LAYOUT.byteSize());
    }

    private static class IID_IXMLDOMNodeList$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IXMLDOMNodeList").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMNodeList
     * }
     */
    public static GroupLayout IID_IXMLDOMNodeList$layout() {
        return IID_IXMLDOMNodeList$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMNodeList
     * }
     */
    public static MemorySegment IID_IXMLDOMNodeList() {
        return IID_IXMLDOMNodeList$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMNodeList
     * }
     */
    public static void IID_IXMLDOMNodeList(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IXMLDOMNodeList$constants.SEGMENT, 0L, IID_IXMLDOMNodeList$constants.LAYOUT.byteSize());
    }

    private static class IID_IXMLDOMNamedNodeMap$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IXMLDOMNamedNodeMap").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMNamedNodeMap
     * }
     */
    public static GroupLayout IID_IXMLDOMNamedNodeMap$layout() {
        return IID_IXMLDOMNamedNodeMap$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMNamedNodeMap
     * }
     */
    public static MemorySegment IID_IXMLDOMNamedNodeMap() {
        return IID_IXMLDOMNamedNodeMap$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMNamedNodeMap
     * }
     */
    public static void IID_IXMLDOMNamedNodeMap(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IXMLDOMNamedNodeMap$constants.SEGMENT, 0L, IID_IXMLDOMNamedNodeMap$constants.LAYOUT.byteSize());
    }

    private static class IID_IXMLDOMCharacterData$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IXMLDOMCharacterData").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMCharacterData
     * }
     */
    public static GroupLayout IID_IXMLDOMCharacterData$layout() {
        return IID_IXMLDOMCharacterData$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMCharacterData
     * }
     */
    public static MemorySegment IID_IXMLDOMCharacterData() {
        return IID_IXMLDOMCharacterData$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMCharacterData
     * }
     */
    public static void IID_IXMLDOMCharacterData(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IXMLDOMCharacterData$constants.SEGMENT, 0L, IID_IXMLDOMCharacterData$constants.LAYOUT.byteSize());
    }

    private static class IID_IXMLDOMAttribute$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IXMLDOMAttribute").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMAttribute
     * }
     */
    public static GroupLayout IID_IXMLDOMAttribute$layout() {
        return IID_IXMLDOMAttribute$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMAttribute
     * }
     */
    public static MemorySegment IID_IXMLDOMAttribute() {
        return IID_IXMLDOMAttribute$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMAttribute
     * }
     */
    public static void IID_IXMLDOMAttribute(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IXMLDOMAttribute$constants.SEGMENT, 0L, IID_IXMLDOMAttribute$constants.LAYOUT.byteSize());
    }

    private static class IID_IXMLDOMElement$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IXMLDOMElement").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMElement
     * }
     */
    public static GroupLayout IID_IXMLDOMElement$layout() {
        return IID_IXMLDOMElement$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMElement
     * }
     */
    public static MemorySegment IID_IXMLDOMElement() {
        return IID_IXMLDOMElement$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMElement
     * }
     */
    public static void IID_IXMLDOMElement(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IXMLDOMElement$constants.SEGMENT, 0L, IID_IXMLDOMElement$constants.LAYOUT.byteSize());
    }

    private static class IID_IXMLDOMText$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IXMLDOMText").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMText
     * }
     */
    public static GroupLayout IID_IXMLDOMText$layout() {
        return IID_IXMLDOMText$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMText
     * }
     */
    public static MemorySegment IID_IXMLDOMText() {
        return IID_IXMLDOMText$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMText
     * }
     */
    public static void IID_IXMLDOMText(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IXMLDOMText$constants.SEGMENT, 0L, IID_IXMLDOMText$constants.LAYOUT.byteSize());
    }

    private static class IID_IXMLDOMComment$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IXMLDOMComment").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMComment
     * }
     */
    public static GroupLayout IID_IXMLDOMComment$layout() {
        return IID_IXMLDOMComment$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMComment
     * }
     */
    public static MemorySegment IID_IXMLDOMComment() {
        return IID_IXMLDOMComment$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMComment
     * }
     */
    public static void IID_IXMLDOMComment(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IXMLDOMComment$constants.SEGMENT, 0L, IID_IXMLDOMComment$constants.LAYOUT.byteSize());
    }

    private static class IID_IXMLDOMProcessingInstruction$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IXMLDOMProcessingInstruction").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMProcessingInstruction
     * }
     */
    public static GroupLayout IID_IXMLDOMProcessingInstruction$layout() {
        return IID_IXMLDOMProcessingInstruction$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMProcessingInstruction
     * }
     */
    public static MemorySegment IID_IXMLDOMProcessingInstruction() {
        return IID_IXMLDOMProcessingInstruction$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMProcessingInstruction
     * }
     */
    public static void IID_IXMLDOMProcessingInstruction(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IXMLDOMProcessingInstruction$constants.SEGMENT, 0L, IID_IXMLDOMProcessingInstruction$constants.LAYOUT.byteSize());
    }

    private static class IID_IXMLDOMCDATASection$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IXMLDOMCDATASection").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMCDATASection
     * }
     */
    public static GroupLayout IID_IXMLDOMCDATASection$layout() {
        return IID_IXMLDOMCDATASection$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMCDATASection
     * }
     */
    public static MemorySegment IID_IXMLDOMCDATASection() {
        return IID_IXMLDOMCDATASection$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMCDATASection
     * }
     */
    public static void IID_IXMLDOMCDATASection(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IXMLDOMCDATASection$constants.SEGMENT, 0L, IID_IXMLDOMCDATASection$constants.LAYOUT.byteSize());
    }

    private static class IID_IXMLDOMDocumentType$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IXMLDOMDocumentType").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMDocumentType
     * }
     */
    public static GroupLayout IID_IXMLDOMDocumentType$layout() {
        return IID_IXMLDOMDocumentType$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMDocumentType
     * }
     */
    public static MemorySegment IID_IXMLDOMDocumentType() {
        return IID_IXMLDOMDocumentType$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMDocumentType
     * }
     */
    public static void IID_IXMLDOMDocumentType(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IXMLDOMDocumentType$constants.SEGMENT, 0L, IID_IXMLDOMDocumentType$constants.LAYOUT.byteSize());
    }

    private static class IID_IXMLDOMNotation$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IXMLDOMNotation").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMNotation
     * }
     */
    public static GroupLayout IID_IXMLDOMNotation$layout() {
        return IID_IXMLDOMNotation$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMNotation
     * }
     */
    public static MemorySegment IID_IXMLDOMNotation() {
        return IID_IXMLDOMNotation$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMNotation
     * }
     */
    public static void IID_IXMLDOMNotation(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IXMLDOMNotation$constants.SEGMENT, 0L, IID_IXMLDOMNotation$constants.LAYOUT.byteSize());
    }

    private static class IID_IXMLDOMEntity$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IXMLDOMEntity").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMEntity
     * }
     */
    public static GroupLayout IID_IXMLDOMEntity$layout() {
        return IID_IXMLDOMEntity$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMEntity
     * }
     */
    public static MemorySegment IID_IXMLDOMEntity() {
        return IID_IXMLDOMEntity$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMEntity
     * }
     */
    public static void IID_IXMLDOMEntity(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IXMLDOMEntity$constants.SEGMENT, 0L, IID_IXMLDOMEntity$constants.LAYOUT.byteSize());
    }

    private static class IID_IXMLDOMEntityReference$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IXMLDOMEntityReference").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMEntityReference
     * }
     */
    public static GroupLayout IID_IXMLDOMEntityReference$layout() {
        return IID_IXMLDOMEntityReference$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMEntityReference
     * }
     */
    public static MemorySegment IID_IXMLDOMEntityReference() {
        return IID_IXMLDOMEntityReference$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMEntityReference
     * }
     */
    public static void IID_IXMLDOMEntityReference(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IXMLDOMEntityReference$constants.SEGMENT, 0L, IID_IXMLDOMEntityReference$constants.LAYOUT.byteSize());
    }

    private static class IID_IXMLDOMParseError$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IXMLDOMParseError").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMParseError
     * }
     */
    public static GroupLayout IID_IXMLDOMParseError$layout() {
        return IID_IXMLDOMParseError$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMParseError
     * }
     */
    public static MemorySegment IID_IXMLDOMParseError() {
        return IID_IXMLDOMParseError$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMParseError
     * }
     */
    public static void IID_IXMLDOMParseError(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IXMLDOMParseError$constants.SEGMENT, 0L, IID_IXMLDOMParseError$constants.LAYOUT.byteSize());
    }

    private static class IID_IXTLRuntime$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IXTLRuntime").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXTLRuntime
     * }
     */
    public static GroupLayout IID_IXTLRuntime$layout() {
        return IID_IXTLRuntime$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXTLRuntime
     * }
     */
    public static MemorySegment IID_IXTLRuntime() {
        return IID_IXTLRuntime$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXTLRuntime
     * }
     */
    public static void IID_IXTLRuntime(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IXTLRuntime$constants.SEGMENT, 0L, IID_IXTLRuntime$constants.LAYOUT.byteSize());
    }

    private static class DIID_XMLDOMDocumentEvents$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("DIID_XMLDOMDocumentEvents").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID DIID_XMLDOMDocumentEvents
     * }
     */
    public static GroupLayout DIID_XMLDOMDocumentEvents$layout() {
        return DIID_XMLDOMDocumentEvents$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID DIID_XMLDOMDocumentEvents
     * }
     */
    public static MemorySegment DIID_XMLDOMDocumentEvents() {
        return DIID_XMLDOMDocumentEvents$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID DIID_XMLDOMDocumentEvents
     * }
     */
    public static void DIID_XMLDOMDocumentEvents(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, DIID_XMLDOMDocumentEvents$constants.SEGMENT, 0L, DIID_XMLDOMDocumentEvents$constants.LAYOUT.byteSize());
    }

    private static class CLSID_DOMDocument$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("CLSID_DOMDocument").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_DOMDocument
     * }
     */
    public static GroupLayout CLSID_DOMDocument$layout() {
        return CLSID_DOMDocument$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_DOMDocument
     * }
     */
    public static MemorySegment CLSID_DOMDocument() {
        return CLSID_DOMDocument$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_DOMDocument
     * }
     */
    public static void CLSID_DOMDocument(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_DOMDocument$constants.SEGMENT, 0L, CLSID_DOMDocument$constants.LAYOUT.byteSize());
    }

    private static class CLSID_DOMFreeThreadedDocument$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("CLSID_DOMFreeThreadedDocument").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_DOMFreeThreadedDocument
     * }
     */
    public static GroupLayout CLSID_DOMFreeThreadedDocument$layout() {
        return CLSID_DOMFreeThreadedDocument$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_DOMFreeThreadedDocument
     * }
     */
    public static MemorySegment CLSID_DOMFreeThreadedDocument() {
        return CLSID_DOMFreeThreadedDocument$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_DOMFreeThreadedDocument
     * }
     */
    public static void CLSID_DOMFreeThreadedDocument(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_DOMFreeThreadedDocument$constants.SEGMENT, 0L, CLSID_DOMFreeThreadedDocument$constants.LAYOUT.byteSize());
    }

    private static class IID_IXMLHttpRequest$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IXMLHttpRequest").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLHttpRequest
     * }
     */
    public static GroupLayout IID_IXMLHttpRequest$layout() {
        return IID_IXMLHttpRequest$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLHttpRequest
     * }
     */
    public static MemorySegment IID_IXMLHttpRequest() {
        return IID_IXMLHttpRequest$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLHttpRequest
     * }
     */
    public static void IID_IXMLHttpRequest(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IXMLHttpRequest$constants.SEGMENT, 0L, IID_IXMLHttpRequest$constants.LAYOUT.byteSize());
    }

    private static class CLSID_XMLHTTPRequest$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("CLSID_XMLHTTPRequest").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_XMLHTTPRequest
     * }
     */
    public static GroupLayout CLSID_XMLHTTPRequest$layout() {
        return CLSID_XMLHTTPRequest$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_XMLHTTPRequest
     * }
     */
    public static MemorySegment CLSID_XMLHTTPRequest() {
        return CLSID_XMLHTTPRequest$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_XMLHTTPRequest
     * }
     */
    public static void CLSID_XMLHTTPRequest(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_XMLHTTPRequest$constants.SEGMENT, 0L, CLSID_XMLHTTPRequest$constants.LAYOUT.byteSize());
    }

    private static class IID_IXMLDSOControl$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IXMLDSOControl").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDSOControl
     * }
     */
    public static GroupLayout IID_IXMLDSOControl$layout() {
        return IID_IXMLDSOControl$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDSOControl
     * }
     */
    public static MemorySegment IID_IXMLDSOControl() {
        return IID_IXMLDSOControl$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDSOControl
     * }
     */
    public static void IID_IXMLDSOControl(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IXMLDSOControl$constants.SEGMENT, 0L, IID_IXMLDSOControl$constants.LAYOUT.byteSize());
    }

    private static class CLSID_XMLDSOControl$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("CLSID_XMLDSOControl").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_XMLDSOControl
     * }
     */
    public static GroupLayout CLSID_XMLDSOControl$layout() {
        return CLSID_XMLDSOControl$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_XMLDSOControl
     * }
     */
    public static MemorySegment CLSID_XMLDSOControl() {
        return CLSID_XMLDSOControl$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_XMLDSOControl
     * }
     */
    public static void CLSID_XMLDSOControl(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_XMLDSOControl$constants.SEGMENT, 0L, CLSID_XMLDSOControl$constants.LAYOUT.byteSize());
    }

    private static class IID_IXMLElementCollection$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IXMLElementCollection").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLElementCollection
     * }
     */
    public static GroupLayout IID_IXMLElementCollection$layout() {
        return IID_IXMLElementCollection$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLElementCollection
     * }
     */
    public static MemorySegment IID_IXMLElementCollection() {
        return IID_IXMLElementCollection$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLElementCollection
     * }
     */
    public static void IID_IXMLElementCollection(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IXMLElementCollection$constants.SEGMENT, 0L, IID_IXMLElementCollection$constants.LAYOUT.byteSize());
    }

    private static class IID_IXMLDocument$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IXMLDocument").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDocument
     * }
     */
    public static GroupLayout IID_IXMLDocument$layout() {
        return IID_IXMLDocument$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDocument
     * }
     */
    public static MemorySegment IID_IXMLDocument() {
        return IID_IXMLDocument$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDocument
     * }
     */
    public static void IID_IXMLDocument(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IXMLDocument$constants.SEGMENT, 0L, IID_IXMLDocument$constants.LAYOUT.byteSize());
    }

    private static class IID_IXMLDocument2$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IXMLDocument2").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDocument2
     * }
     */
    public static GroupLayout IID_IXMLDocument2$layout() {
        return IID_IXMLDocument2$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDocument2
     * }
     */
    public static MemorySegment IID_IXMLDocument2() {
        return IID_IXMLDocument2$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDocument2
     * }
     */
    public static void IID_IXMLDocument2(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IXMLDocument2$constants.SEGMENT, 0L, IID_IXMLDocument2$constants.LAYOUT.byteSize());
    }

    private static class IID_IXMLElement$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IXMLElement").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLElement
     * }
     */
    public static GroupLayout IID_IXMLElement$layout() {
        return IID_IXMLElement$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLElement
     * }
     */
    public static MemorySegment IID_IXMLElement() {
        return IID_IXMLElement$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLElement
     * }
     */
    public static void IID_IXMLElement(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IXMLElement$constants.SEGMENT, 0L, IID_IXMLElement$constants.LAYOUT.byteSize());
    }

    private static class IID_IXMLElement2$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IXMLElement2").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLElement2
     * }
     */
    public static GroupLayout IID_IXMLElement2$layout() {
        return IID_IXMLElement2$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLElement2
     * }
     */
    public static MemorySegment IID_IXMLElement2() {
        return IID_IXMLElement2$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLElement2
     * }
     */
    public static void IID_IXMLElement2(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IXMLElement2$constants.SEGMENT, 0L, IID_IXMLElement2$constants.LAYOUT.byteSize());
    }

    private static class IID_IXMLAttribute$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IXMLAttribute").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLAttribute
     * }
     */
    public static GroupLayout IID_IXMLAttribute$layout() {
        return IID_IXMLAttribute$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLAttribute
     * }
     */
    public static MemorySegment IID_IXMLAttribute() {
        return IID_IXMLAttribute$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLAttribute
     * }
     */
    public static void IID_IXMLAttribute(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IXMLAttribute$constants.SEGMENT, 0L, IID_IXMLAttribute$constants.LAYOUT.byteSize());
    }

    private static class IID_IXMLError$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IXMLError").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLError
     * }
     */
    public static GroupLayout IID_IXMLError$layout() {
        return IID_IXMLError$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLError
     * }
     */
    public static MemorySegment IID_IXMLError() {
        return IID_IXMLError$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLError
     * }
     */
    public static void IID_IXMLError(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IXMLError$constants.SEGMENT, 0L, IID_IXMLError$constants.LAYOUT.byteSize());
    }

    private static class CLSID_XMLDocument$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("CLSID_XMLDocument").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_XMLDocument
     * }
     */
    public static GroupLayout CLSID_XMLDocument$layout() {
        return CLSID_XMLDocument$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_XMLDocument
     * }
     */
    public static MemorySegment CLSID_XMLDocument() {
        return CLSID_XMLDocument$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_XMLDocument
     * }
     */
    public static void CLSID_XMLDocument(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_XMLDocument$constants.SEGMENT, 0L, CLSID_XMLDocument$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_msxml_0000_0001_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_msxml_0000_0001_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_0001_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_msxml_0000_0001_v0_0_c_ifspec$layout() {
        return __MIDL_itf_msxml_0000_0001_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_0001_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_msxml_0000_0001_v0_0_c_ifspec$segment() {
        return __MIDL_itf_msxml_0000_0001_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_0001_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_msxml_0000_0001_v0_0_c_ifspec() {
        return __MIDL_itf_msxml_0000_0001_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_msxml_0000_0001_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_0001_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_msxml_0000_0001_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_msxml_0000_0001_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_msxml_0000_0001_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_msxml_0000_0001_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_msxml_0000_0001_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_0001_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_msxml_0000_0001_v0_0_s_ifspec$layout() {
        return __MIDL_itf_msxml_0000_0001_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_0001_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_msxml_0000_0001_v0_0_s_ifspec$segment() {
        return __MIDL_itf_msxml_0000_0001_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_0001_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_msxml_0000_0001_v0_0_s_ifspec() {
        return __MIDL_itf_msxml_0000_0001_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_msxml_0000_0001_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_0001_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_msxml_0000_0001_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_msxml_0000_0001_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_msxml_0000_0001_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class CLSID_SBS_StdURLMoniker$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("CLSID_SBS_StdURLMoniker").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_StdURLMoniker
     * }
     */
    public static GroupLayout CLSID_SBS_StdURLMoniker$layout() {
        return CLSID_SBS_StdURLMoniker$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_StdURLMoniker
     * }
     */
    public static MemorySegment CLSID_SBS_StdURLMoniker() {
        return CLSID_SBS_StdURLMoniker$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_StdURLMoniker
     * }
     */
    public static void CLSID_SBS_StdURLMoniker(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_SBS_StdURLMoniker$constants.SEGMENT, 0L, CLSID_SBS_StdURLMoniker$constants.LAYOUT.byteSize());
    }

    private static class CLSID_SBS_HttpProtocol$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("CLSID_SBS_HttpProtocol").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_HttpProtocol
     * }
     */
    public static GroupLayout CLSID_SBS_HttpProtocol$layout() {
        return CLSID_SBS_HttpProtocol$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_HttpProtocol
     * }
     */
    public static MemorySegment CLSID_SBS_HttpProtocol() {
        return CLSID_SBS_HttpProtocol$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_HttpProtocol
     * }
     */
    public static void CLSID_SBS_HttpProtocol(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_SBS_HttpProtocol$constants.SEGMENT, 0L, CLSID_SBS_HttpProtocol$constants.LAYOUT.byteSize());
    }

    private static class CLSID_SBS_FtpProtocol$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("CLSID_SBS_FtpProtocol").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_FtpProtocol
     * }
     */
    public static GroupLayout CLSID_SBS_FtpProtocol$layout() {
        return CLSID_SBS_FtpProtocol$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_FtpProtocol
     * }
     */
    public static MemorySegment CLSID_SBS_FtpProtocol() {
        return CLSID_SBS_FtpProtocol$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_FtpProtocol
     * }
     */
    public static void CLSID_SBS_FtpProtocol(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_SBS_FtpProtocol$constants.SEGMENT, 0L, CLSID_SBS_FtpProtocol$constants.LAYOUT.byteSize());
    }

    private static class CLSID_SBS_GopherProtocol$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("CLSID_SBS_GopherProtocol").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_GopherProtocol
     * }
     */
    public static GroupLayout CLSID_SBS_GopherProtocol$layout() {
        return CLSID_SBS_GopherProtocol$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_GopherProtocol
     * }
     */
    public static MemorySegment CLSID_SBS_GopherProtocol() {
        return CLSID_SBS_GopherProtocol$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_GopherProtocol
     * }
     */
    public static void CLSID_SBS_GopherProtocol(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_SBS_GopherProtocol$constants.SEGMENT, 0L, CLSID_SBS_GopherProtocol$constants.LAYOUT.byteSize());
    }

    private static class CLSID_SBS_HttpSProtocol$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("CLSID_SBS_HttpSProtocol").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_HttpSProtocol
     * }
     */
    public static GroupLayout CLSID_SBS_HttpSProtocol$layout() {
        return CLSID_SBS_HttpSProtocol$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_HttpSProtocol
     * }
     */
    public static MemorySegment CLSID_SBS_HttpSProtocol() {
        return CLSID_SBS_HttpSProtocol$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_HttpSProtocol
     * }
     */
    public static void CLSID_SBS_HttpSProtocol(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_SBS_HttpSProtocol$constants.SEGMENT, 0L, CLSID_SBS_HttpSProtocol$constants.LAYOUT.byteSize());
    }

    private static class CLSID_SBS_FileProtocol$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("CLSID_SBS_FileProtocol").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_FileProtocol
     * }
     */
    public static GroupLayout CLSID_SBS_FileProtocol$layout() {
        return CLSID_SBS_FileProtocol$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_FileProtocol
     * }
     */
    public static MemorySegment CLSID_SBS_FileProtocol() {
        return CLSID_SBS_FileProtocol$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_FileProtocol
     * }
     */
    public static void CLSID_SBS_FileProtocol(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_SBS_FileProtocol$constants.SEGMENT, 0L, CLSID_SBS_FileProtocol$constants.LAYOUT.byteSize());
    }

    private static class CLSID_SBS_MkProtocol$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("CLSID_SBS_MkProtocol").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_MkProtocol
     * }
     */
    public static GroupLayout CLSID_SBS_MkProtocol$layout() {
        return CLSID_SBS_MkProtocol$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_MkProtocol
     * }
     */
    public static MemorySegment CLSID_SBS_MkProtocol() {
        return CLSID_SBS_MkProtocol$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_MkProtocol
     * }
     */
    public static void CLSID_SBS_MkProtocol(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_SBS_MkProtocol$constants.SEGMENT, 0L, CLSID_SBS_MkProtocol$constants.LAYOUT.byteSize());
    }

    private static class CLSID_SBS_UrlMkBindCtx$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("CLSID_SBS_UrlMkBindCtx").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_UrlMkBindCtx
     * }
     */
    public static GroupLayout CLSID_SBS_UrlMkBindCtx$layout() {
        return CLSID_SBS_UrlMkBindCtx$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_UrlMkBindCtx
     * }
     */
    public static MemorySegment CLSID_SBS_UrlMkBindCtx() {
        return CLSID_SBS_UrlMkBindCtx$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_UrlMkBindCtx
     * }
     */
    public static void CLSID_SBS_UrlMkBindCtx(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_SBS_UrlMkBindCtx$constants.SEGMENT, 0L, CLSID_SBS_UrlMkBindCtx$constants.LAYOUT.byteSize());
    }

    private static class CLSID_SBS_SoftDistExt$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("CLSID_SBS_SoftDistExt").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_SoftDistExt
     * }
     */
    public static GroupLayout CLSID_SBS_SoftDistExt$layout() {
        return CLSID_SBS_SoftDistExt$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_SoftDistExt
     * }
     */
    public static MemorySegment CLSID_SBS_SoftDistExt() {
        return CLSID_SBS_SoftDistExt$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_SoftDistExt
     * }
     */
    public static void CLSID_SBS_SoftDistExt(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_SBS_SoftDistExt$constants.SEGMENT, 0L, CLSID_SBS_SoftDistExt$constants.LAYOUT.byteSize());
    }

    private static class CLSID_SBS_CdlProtocol$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("CLSID_SBS_CdlProtocol").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_CdlProtocol
     * }
     */
    public static GroupLayout CLSID_SBS_CdlProtocol$layout() {
        return CLSID_SBS_CdlProtocol$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_CdlProtocol
     * }
     */
    public static MemorySegment CLSID_SBS_CdlProtocol() {
        return CLSID_SBS_CdlProtocol$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_CdlProtocol
     * }
     */
    public static void CLSID_SBS_CdlProtocol(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_SBS_CdlProtocol$constants.SEGMENT, 0L, CLSID_SBS_CdlProtocol$constants.LAYOUT.byteSize());
    }

    private static class CLSID_SBS_ClassInstallFilter$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("CLSID_SBS_ClassInstallFilter").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_ClassInstallFilter
     * }
     */
    public static GroupLayout CLSID_SBS_ClassInstallFilter$layout() {
        return CLSID_SBS_ClassInstallFilter$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_ClassInstallFilter
     * }
     */
    public static MemorySegment CLSID_SBS_ClassInstallFilter() {
        return CLSID_SBS_ClassInstallFilter$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_ClassInstallFilter
     * }
     */
    public static void CLSID_SBS_ClassInstallFilter(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_SBS_ClassInstallFilter$constants.SEGMENT, 0L, CLSID_SBS_ClassInstallFilter$constants.LAYOUT.byteSize());
    }

    private static class CLSID_SBS_InternetSecurityManager$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("CLSID_SBS_InternetSecurityManager").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_InternetSecurityManager
     * }
     */
    public static GroupLayout CLSID_SBS_InternetSecurityManager$layout() {
        return CLSID_SBS_InternetSecurityManager$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_InternetSecurityManager
     * }
     */
    public static MemorySegment CLSID_SBS_InternetSecurityManager() {
        return CLSID_SBS_InternetSecurityManager$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_InternetSecurityManager
     * }
     */
    public static void CLSID_SBS_InternetSecurityManager(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_SBS_InternetSecurityManager$constants.SEGMENT, 0L, CLSID_SBS_InternetSecurityManager$constants.LAYOUT.byteSize());
    }

    private static class CLSID_SBS_InternetZoneManager$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("CLSID_SBS_InternetZoneManager").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_InternetZoneManager
     * }
     */
    public static GroupLayout CLSID_SBS_InternetZoneManager$layout() {
        return CLSID_SBS_InternetZoneManager$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_InternetZoneManager
     * }
     */
    public static MemorySegment CLSID_SBS_InternetZoneManager() {
        return CLSID_SBS_InternetZoneManager$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_InternetZoneManager
     * }
     */
    public static void CLSID_SBS_InternetZoneManager(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_SBS_InternetZoneManager$constants.SEGMENT, 0L, CLSID_SBS_InternetZoneManager$constants.LAYOUT.byteSize());
    }

    private static class IID_IAsyncMoniker$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IAsyncMoniker").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAsyncMoniker
     * }
     */
    public static GroupLayout IID_IAsyncMoniker$layout() {
        return IID_IAsyncMoniker$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAsyncMoniker
     * }
     */
    public static MemorySegment IID_IAsyncMoniker() {
        return IID_IAsyncMoniker$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAsyncMoniker
     * }
     */
    public static void IID_IAsyncMoniker(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IAsyncMoniker$constants.SEGMENT, 0L, IID_IAsyncMoniker$constants.LAYOUT.byteSize());
    }

    private static class CLSID_StdURLMoniker$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("CLSID_StdURLMoniker").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_StdURLMoniker
     * }
     */
    public static GroupLayout CLSID_StdURLMoniker$layout() {
        return CLSID_StdURLMoniker$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_StdURLMoniker
     * }
     */
    public static MemorySegment CLSID_StdURLMoniker() {
        return CLSID_StdURLMoniker$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_StdURLMoniker
     * }
     */
    public static void CLSID_StdURLMoniker(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_StdURLMoniker$constants.SEGMENT, 0L, CLSID_StdURLMoniker$constants.LAYOUT.byteSize());
    }

    private static class CLSID_HttpProtocol$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("CLSID_HttpProtocol").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_HttpProtocol
     * }
     */
    public static GroupLayout CLSID_HttpProtocol$layout() {
        return CLSID_HttpProtocol$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_HttpProtocol
     * }
     */
    public static MemorySegment CLSID_HttpProtocol() {
        return CLSID_HttpProtocol$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_HttpProtocol
     * }
     */
    public static void CLSID_HttpProtocol(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_HttpProtocol$constants.SEGMENT, 0L, CLSID_HttpProtocol$constants.LAYOUT.byteSize());
    }

    private static class CLSID_FtpProtocol$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("CLSID_FtpProtocol").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_FtpProtocol
     * }
     */
    public static GroupLayout CLSID_FtpProtocol$layout() {
        return CLSID_FtpProtocol$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_FtpProtocol
     * }
     */
    public static MemorySegment CLSID_FtpProtocol() {
        return CLSID_FtpProtocol$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_FtpProtocol
     * }
     */
    public static void CLSID_FtpProtocol(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_FtpProtocol$constants.SEGMENT, 0L, CLSID_FtpProtocol$constants.LAYOUT.byteSize());
    }

    private static class CLSID_GopherProtocol$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("CLSID_GopherProtocol").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_GopherProtocol
     * }
     */
    public static GroupLayout CLSID_GopherProtocol$layout() {
        return CLSID_GopherProtocol$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_GopherProtocol
     * }
     */
    public static MemorySegment CLSID_GopherProtocol() {
        return CLSID_GopherProtocol$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_GopherProtocol
     * }
     */
    public static void CLSID_GopherProtocol(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_GopherProtocol$constants.SEGMENT, 0L, CLSID_GopherProtocol$constants.LAYOUT.byteSize());
    }

    private static class CLSID_HttpSProtocol$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("CLSID_HttpSProtocol").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_HttpSProtocol
     * }
     */
    public static GroupLayout CLSID_HttpSProtocol$layout() {
        return CLSID_HttpSProtocol$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_HttpSProtocol
     * }
     */
    public static MemorySegment CLSID_HttpSProtocol() {
        return CLSID_HttpSProtocol$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_HttpSProtocol
     * }
     */
    public static void CLSID_HttpSProtocol(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_HttpSProtocol$constants.SEGMENT, 0L, CLSID_HttpSProtocol$constants.LAYOUT.byteSize());
    }

    private static class CLSID_FileProtocol$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("CLSID_FileProtocol").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_FileProtocol
     * }
     */
    public static GroupLayout CLSID_FileProtocol$layout() {
        return CLSID_FileProtocol$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_FileProtocol
     * }
     */
    public static MemorySegment CLSID_FileProtocol() {
        return CLSID_FileProtocol$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_FileProtocol
     * }
     */
    public static void CLSID_FileProtocol(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_FileProtocol$constants.SEGMENT, 0L, CLSID_FileProtocol$constants.LAYOUT.byteSize());
    }

    private static class CLSID_ResProtocol$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("CLSID_ResProtocol").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_ResProtocol
     * }
     */
    public static GroupLayout CLSID_ResProtocol$layout() {
        return CLSID_ResProtocol$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_ResProtocol
     * }
     */
    public static MemorySegment CLSID_ResProtocol() {
        return CLSID_ResProtocol$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_ResProtocol
     * }
     */
    public static void CLSID_ResProtocol(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_ResProtocol$constants.SEGMENT, 0L, CLSID_ResProtocol$constants.LAYOUT.byteSize());
    }

    private static class CLSID_AboutProtocol$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("CLSID_AboutProtocol").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_AboutProtocol
     * }
     */
    public static GroupLayout CLSID_AboutProtocol$layout() {
        return CLSID_AboutProtocol$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_AboutProtocol
     * }
     */
    public static MemorySegment CLSID_AboutProtocol() {
        return CLSID_AboutProtocol$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_AboutProtocol
     * }
     */
    public static void CLSID_AboutProtocol(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_AboutProtocol$constants.SEGMENT, 0L, CLSID_AboutProtocol$constants.LAYOUT.byteSize());
    }

    private static class CLSID_JSProtocol$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("CLSID_JSProtocol").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_JSProtocol
     * }
     */
    public static GroupLayout CLSID_JSProtocol$layout() {
        return CLSID_JSProtocol$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_JSProtocol
     * }
     */
    public static MemorySegment CLSID_JSProtocol() {
        return CLSID_JSProtocol$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_JSProtocol
     * }
     */
    public static void CLSID_JSProtocol(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_JSProtocol$constants.SEGMENT, 0L, CLSID_JSProtocol$constants.LAYOUT.byteSize());
    }

    private static class CLSID_MailtoProtocol$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("CLSID_MailtoProtocol").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_MailtoProtocol
     * }
     */
    public static GroupLayout CLSID_MailtoProtocol$layout() {
        return CLSID_MailtoProtocol$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_MailtoProtocol
     * }
     */
    public static MemorySegment CLSID_MailtoProtocol() {
        return CLSID_MailtoProtocol$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_MailtoProtocol
     * }
     */
    public static void CLSID_MailtoProtocol(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_MailtoProtocol$constants.SEGMENT, 0L, CLSID_MailtoProtocol$constants.LAYOUT.byteSize());
    }

    private static class CLSID_IE4_PROTOCOLS$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("CLSID_IE4_PROTOCOLS").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_IE4_PROTOCOLS
     * }
     */
    public static GroupLayout CLSID_IE4_PROTOCOLS$layout() {
        return CLSID_IE4_PROTOCOLS$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_IE4_PROTOCOLS
     * }
     */
    public static MemorySegment CLSID_IE4_PROTOCOLS() {
        return CLSID_IE4_PROTOCOLS$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_IE4_PROTOCOLS
     * }
     */
    public static void CLSID_IE4_PROTOCOLS(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_IE4_PROTOCOLS$constants.SEGMENT, 0L, CLSID_IE4_PROTOCOLS$constants.LAYOUT.byteSize());
    }

    private static class CLSID_MkProtocol$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("CLSID_MkProtocol").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_MkProtocol
     * }
     */
    public static GroupLayout CLSID_MkProtocol$layout() {
        return CLSID_MkProtocol$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_MkProtocol
     * }
     */
    public static MemorySegment CLSID_MkProtocol() {
        return CLSID_MkProtocol$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_MkProtocol
     * }
     */
    public static void CLSID_MkProtocol(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_MkProtocol$constants.SEGMENT, 0L, CLSID_MkProtocol$constants.LAYOUT.byteSize());
    }

    private static class CLSID_StdURLProtocol$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("CLSID_StdURLProtocol").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_StdURLProtocol
     * }
     */
    public static GroupLayout CLSID_StdURLProtocol$layout() {
        return CLSID_StdURLProtocol$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_StdURLProtocol
     * }
     */
    public static MemorySegment CLSID_StdURLProtocol() {
        return CLSID_StdURLProtocol$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_StdURLProtocol
     * }
     */
    public static void CLSID_StdURLProtocol(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_StdURLProtocol$constants.SEGMENT, 0L, CLSID_StdURLProtocol$constants.LAYOUT.byteSize());
    }

    private static class CLSID_TBAuthProtocol$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("CLSID_TBAuthProtocol").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_TBAuthProtocol
     * }
     */
    public static GroupLayout CLSID_TBAuthProtocol$layout() {
        return CLSID_TBAuthProtocol$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_TBAuthProtocol
     * }
     */
    public static MemorySegment CLSID_TBAuthProtocol() {
        return CLSID_TBAuthProtocol$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_TBAuthProtocol
     * }
     */
    public static void CLSID_TBAuthProtocol(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_TBAuthProtocol$constants.SEGMENT, 0L, CLSID_TBAuthProtocol$constants.LAYOUT.byteSize());
    }

    private static class CLSID_UrlMkBindCtx$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("CLSID_UrlMkBindCtx").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_UrlMkBindCtx
     * }
     */
    public static GroupLayout CLSID_UrlMkBindCtx$layout() {
        return CLSID_UrlMkBindCtx$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_UrlMkBindCtx
     * }
     */
    public static MemorySegment CLSID_UrlMkBindCtx() {
        return CLSID_UrlMkBindCtx$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_UrlMkBindCtx
     * }
     */
    public static void CLSID_UrlMkBindCtx(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_UrlMkBindCtx$constants.SEGMENT, 0L, CLSID_UrlMkBindCtx$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CdlProtocol$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("CLSID_CdlProtocol").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_CdlProtocol
     * }
     */
    public static GroupLayout CLSID_CdlProtocol$layout() {
        return CLSID_CdlProtocol$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_CdlProtocol
     * }
     */
    public static MemorySegment CLSID_CdlProtocol() {
        return CLSID_CdlProtocol$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_CdlProtocol
     * }
     */
    public static void CLSID_CdlProtocol(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CdlProtocol$constants.SEGMENT, 0L, CLSID_CdlProtocol$constants.LAYOUT.byteSize());
    }

    private static class CLSID_ClassInstallFilter$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("CLSID_ClassInstallFilter").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_ClassInstallFilter
     * }
     */
    public static GroupLayout CLSID_ClassInstallFilter$layout() {
        return CLSID_ClassInstallFilter$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_ClassInstallFilter
     * }
     */
    public static MemorySegment CLSID_ClassInstallFilter() {
        return CLSID_ClassInstallFilter$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_ClassInstallFilter
     * }
     */
    public static void CLSID_ClassInstallFilter(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_ClassInstallFilter$constants.SEGMENT, 0L, CLSID_ClassInstallFilter$constants.LAYOUT.byteSize());
    }

    private static class IID_IAsyncBindCtx$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IAsyncBindCtx").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAsyncBindCtx
     * }
     */
    public static GroupLayout IID_IAsyncBindCtx$layout() {
        return IID_IAsyncBindCtx$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAsyncBindCtx
     * }
     */
    public static MemorySegment IID_IAsyncBindCtx() {
        return IID_IAsyncBindCtx$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAsyncBindCtx
     * }
     */
    public static void IID_IAsyncBindCtx(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IAsyncBindCtx$constants.SEGMENT, 0L, IID_IAsyncBindCtx$constants.LAYOUT.byteSize());
    }

    private static class CreateURLMoniker {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("CreateURLMoniker"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateURLMoniker(LPMONIKER pMkCtx, LPCWSTR szURL, LPMONIKER *ppmk)
     * }
     */
    public static FunctionDescriptor CreateURLMoniker$descriptor() {
        return CreateURLMoniker.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateURLMoniker(LPMONIKER pMkCtx, LPCWSTR szURL, LPMONIKER *ppmk)
     * }
     */
    public static MethodHandle CreateURLMoniker$handle() {
        return CreateURLMoniker.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CreateURLMoniker(LPMONIKER pMkCtx, LPCWSTR szURL, LPMONIKER *ppmk)
     * }
     */
    public static int CreateURLMoniker(MemorySegment pMkCtx, MemorySegment szURL, MemorySegment ppmk) {
        var mh$ = CreateURLMoniker.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateURLMoniker", pMkCtx, szURL, ppmk);
            }
            return (int)mh$.invokeExact(pMkCtx, szURL, ppmk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateURLMonikerEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("CreateURLMonikerEx"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateURLMonikerEx(LPMONIKER pMkCtx, LPCWSTR szURL, LPMONIKER *ppmk, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor CreateURLMonikerEx$descriptor() {
        return CreateURLMonikerEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateURLMonikerEx(LPMONIKER pMkCtx, LPCWSTR szURL, LPMONIKER *ppmk, DWORD dwFlags)
     * }
     */
    public static MethodHandle CreateURLMonikerEx$handle() {
        return CreateURLMonikerEx.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CreateURLMonikerEx(LPMONIKER pMkCtx, LPCWSTR szURL, LPMONIKER *ppmk, DWORD dwFlags)
     * }
     */
    public static int CreateURLMonikerEx(MemorySegment pMkCtx, MemorySegment szURL, MemorySegment ppmk, int dwFlags) {
        var mh$ = CreateURLMonikerEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateURLMonikerEx", pMkCtx, szURL, ppmk, dwFlags);
            }
            return (int)mh$.invokeExact(pMkCtx, szURL, ppmk, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetClassURL {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("GetClassURL"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT GetClassURL(LPCWSTR szURL, CLSID *pClsID)
     * }
     */
    public static FunctionDescriptor GetClassURL$descriptor() {
        return GetClassURL.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT GetClassURL(LPCWSTR szURL, CLSID *pClsID)
     * }
     */
    public static MethodHandle GetClassURL$handle() {
        return GetClassURL.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT GetClassURL(LPCWSTR szURL, CLSID *pClsID)
     * }
     */
    public static int GetClassURL(MemorySegment szURL, MemorySegment pClsID) {
        var mh$ = GetClassURL.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetClassURL", szURL, pClsID);
            }
            return (int)mh$.invokeExact(szURL, pClsID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateAsyncBindCtx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("CreateAsyncBindCtx"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateAsyncBindCtx(DWORD reserved, IBindStatusCallback *pBSCb, IEnumFORMATETC *pEFetc, IBindCtx **ppBC)
     * }
     */
    public static FunctionDescriptor CreateAsyncBindCtx$descriptor() {
        return CreateAsyncBindCtx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateAsyncBindCtx(DWORD reserved, IBindStatusCallback *pBSCb, IEnumFORMATETC *pEFetc, IBindCtx **ppBC)
     * }
     */
    public static MethodHandle CreateAsyncBindCtx$handle() {
        return CreateAsyncBindCtx.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CreateAsyncBindCtx(DWORD reserved, IBindStatusCallback *pBSCb, IEnumFORMATETC *pEFetc, IBindCtx **ppBC)
     * }
     */
    public static int CreateAsyncBindCtx(int reserved, MemorySegment pBSCb, MemorySegment pEFetc, MemorySegment ppBC) {
        var mh$ = CreateAsyncBindCtx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateAsyncBindCtx", reserved, pBSCb, pEFetc, ppBC);
            }
            return (int)mh$.invokeExact(reserved, pBSCb, pEFetc, ppBC);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateURLMonikerEx2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("CreateURLMonikerEx2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateURLMonikerEx2(LPMONIKER pMkCtx, IUri *pUri, LPMONIKER *ppmk, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor CreateURLMonikerEx2$descriptor() {
        return CreateURLMonikerEx2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateURLMonikerEx2(LPMONIKER pMkCtx, IUri *pUri, LPMONIKER *ppmk, DWORD dwFlags)
     * }
     */
    public static MethodHandle CreateURLMonikerEx2$handle() {
        return CreateURLMonikerEx2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CreateURLMonikerEx2(LPMONIKER pMkCtx, IUri *pUri, LPMONIKER *ppmk, DWORD dwFlags)
     * }
     */
    public static int CreateURLMonikerEx2(MemorySegment pMkCtx, MemorySegment pUri, MemorySegment ppmk, int dwFlags) {
        var mh$ = CreateURLMonikerEx2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateURLMonikerEx2", pMkCtx, pUri, ppmk, dwFlags);
            }
            return (int)mh$.invokeExact(pMkCtx, pUri, ppmk, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateAsyncBindCtxEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("CreateAsyncBindCtxEx"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateAsyncBindCtxEx(IBindCtx *pbc, DWORD dwOptions, IBindStatusCallback *pBSCb, IEnumFORMATETC *pEnum, IBindCtx **ppBC, DWORD reserved)
     * }
     */
    public static FunctionDescriptor CreateAsyncBindCtxEx$descriptor() {
        return CreateAsyncBindCtxEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateAsyncBindCtxEx(IBindCtx *pbc, DWORD dwOptions, IBindStatusCallback *pBSCb, IEnumFORMATETC *pEnum, IBindCtx **ppBC, DWORD reserved)
     * }
     */
    public static MethodHandle CreateAsyncBindCtxEx$handle() {
        return CreateAsyncBindCtxEx.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CreateAsyncBindCtxEx(IBindCtx *pbc, DWORD dwOptions, IBindStatusCallback *pBSCb, IEnumFORMATETC *pEnum, IBindCtx **ppBC, DWORD reserved)
     * }
     */
    public static int CreateAsyncBindCtxEx(MemorySegment pbc, int dwOptions, MemorySegment pBSCb, MemorySegment pEnum, MemorySegment ppBC, int reserved) {
        var mh$ = CreateAsyncBindCtxEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateAsyncBindCtxEx", pbc, dwOptions, pBSCb, pEnum, ppBC, reserved);
            }
            return (int)mh$.invokeExact(pbc, dwOptions, pBSCb, pEnum, ppBC, reserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MkParseDisplayNameEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("MkParseDisplayNameEx"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT MkParseDisplayNameEx(IBindCtx *pbc, LPCWSTR szDisplayName, ULONG *pchEaten, LPMONIKER *ppmk)
     * }
     */
    public static FunctionDescriptor MkParseDisplayNameEx$descriptor() {
        return MkParseDisplayNameEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT MkParseDisplayNameEx(IBindCtx *pbc, LPCWSTR szDisplayName, ULONG *pchEaten, LPMONIKER *ppmk)
     * }
     */
    public static MethodHandle MkParseDisplayNameEx$handle() {
        return MkParseDisplayNameEx.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT MkParseDisplayNameEx(IBindCtx *pbc, LPCWSTR szDisplayName, ULONG *pchEaten, LPMONIKER *ppmk)
     * }
     */
    public static int MkParseDisplayNameEx(MemorySegment pbc, MemorySegment szDisplayName, MemorySegment pchEaten, MemorySegment ppmk) {
        var mh$ = MkParseDisplayNameEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MkParseDisplayNameEx", pbc, szDisplayName, pchEaten, ppmk);
            }
            return (int)mh$.invokeExact(pbc, szDisplayName, pchEaten, ppmk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RegisterBindStatusCallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("RegisterBindStatusCallback"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT RegisterBindStatusCallback(LPBC pBC, IBindStatusCallback *pBSCb, IBindStatusCallback **ppBSCBPrev, DWORD dwReserved)
     * }
     */
    public static FunctionDescriptor RegisterBindStatusCallback$descriptor() {
        return RegisterBindStatusCallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT RegisterBindStatusCallback(LPBC pBC, IBindStatusCallback *pBSCb, IBindStatusCallback **ppBSCBPrev, DWORD dwReserved)
     * }
     */
    public static MethodHandle RegisterBindStatusCallback$handle() {
        return RegisterBindStatusCallback.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT RegisterBindStatusCallback(LPBC pBC, IBindStatusCallback *pBSCb, IBindStatusCallback **ppBSCBPrev, DWORD dwReserved)
     * }
     */
    public static int RegisterBindStatusCallback(MemorySegment pBC, MemorySegment pBSCb, MemorySegment ppBSCBPrev, int dwReserved) {
        var mh$ = RegisterBindStatusCallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RegisterBindStatusCallback", pBC, pBSCb, ppBSCBPrev, dwReserved);
            }
            return (int)mh$.invokeExact(pBC, pBSCb, ppBSCBPrev, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RevokeBindStatusCallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("RevokeBindStatusCallback"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT RevokeBindStatusCallback(LPBC pBC, IBindStatusCallback *pBSCb)
     * }
     */
    public static FunctionDescriptor RevokeBindStatusCallback$descriptor() {
        return RevokeBindStatusCallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT RevokeBindStatusCallback(LPBC pBC, IBindStatusCallback *pBSCb)
     * }
     */
    public static MethodHandle RevokeBindStatusCallback$handle() {
        return RevokeBindStatusCallback.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT RevokeBindStatusCallback(LPBC pBC, IBindStatusCallback *pBSCb)
     * }
     */
    public static int RevokeBindStatusCallback(MemorySegment pBC, MemorySegment pBSCb) {
        var mh$ = RevokeBindStatusCallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RevokeBindStatusCallback", pBC, pBSCb);
            }
            return (int)mh$.invokeExact(pBC, pBSCb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetClassFileOrMime {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("GetClassFileOrMime"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT GetClassFileOrMime(LPBC pBC, LPCWSTR szFilename, LPVOID pBuffer, DWORD cbSize, LPCWSTR szMime, DWORD dwReserved, CLSID *pclsid)
     * }
     */
    public static FunctionDescriptor GetClassFileOrMime$descriptor() {
        return GetClassFileOrMime.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT GetClassFileOrMime(LPBC pBC, LPCWSTR szFilename, LPVOID pBuffer, DWORD cbSize, LPCWSTR szMime, DWORD dwReserved, CLSID *pclsid)
     * }
     */
    public static MethodHandle GetClassFileOrMime$handle() {
        return GetClassFileOrMime.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT GetClassFileOrMime(LPBC pBC, LPCWSTR szFilename, LPVOID pBuffer, DWORD cbSize, LPCWSTR szMime, DWORD dwReserved, CLSID *pclsid)
     * }
     */
    public static int GetClassFileOrMime(MemorySegment pBC, MemorySegment szFilename, MemorySegment pBuffer, int cbSize, MemorySegment szMime, int dwReserved, MemorySegment pclsid) {
        var mh$ = GetClassFileOrMime.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetClassFileOrMime", pBC, szFilename, pBuffer, cbSize, szMime, dwReserved, pclsid);
            }
            return (int)mh$.invokeExact(pBC, szFilename, pBuffer, cbSize, szMime, dwReserved, pclsid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IsValidURL {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("IsValidURL"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT IsValidURL(LPBC pBC, LPCWSTR szURL, DWORD dwReserved)
     * }
     */
    public static FunctionDescriptor IsValidURL$descriptor() {
        return IsValidURL.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT IsValidURL(LPBC pBC, LPCWSTR szURL, DWORD dwReserved)
     * }
     */
    public static MethodHandle IsValidURL$handle() {
        return IsValidURL.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT IsValidURL(LPBC pBC, LPCWSTR szURL, DWORD dwReserved)
     * }
     */
    public static int IsValidURL(MemorySegment pBC, MemorySegment szURL, int dwReserved) {
        var mh$ = IsValidURL.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IsValidURL", pBC, szURL, dwReserved);
            }
            return (int)mh$.invokeExact(pBC, szURL, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoGetClassObjectFromURL {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("CoGetClassObjectFromURL"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoGetClassObjectFromURL(const IID *const rCLASSID, LPCWSTR szCODE, DWORD dwFileVersionMS, DWORD dwFileVersionLS, LPCWSTR szTYPE, LPBINDCTX pBindCtx, DWORD dwClsContext, LPVOID pvReserved, const IID *const riid, LPVOID *ppv)
     * }
     */
    public static FunctionDescriptor CoGetClassObjectFromURL$descriptor() {
        return CoGetClassObjectFromURL.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoGetClassObjectFromURL(const IID *const rCLASSID, LPCWSTR szCODE, DWORD dwFileVersionMS, DWORD dwFileVersionLS, LPCWSTR szTYPE, LPBINDCTX pBindCtx, DWORD dwClsContext, LPVOID pvReserved, const IID *const riid, LPVOID *ppv)
     * }
     */
    public static MethodHandle CoGetClassObjectFromURL$handle() {
        return CoGetClassObjectFromURL.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CoGetClassObjectFromURL(const IID *const rCLASSID, LPCWSTR szCODE, DWORD dwFileVersionMS, DWORD dwFileVersionLS, LPCWSTR szTYPE, LPBINDCTX pBindCtx, DWORD dwClsContext, LPVOID pvReserved, const IID *const riid, LPVOID *ppv)
     * }
     */
    public static int CoGetClassObjectFromURL(MemorySegment rCLASSID, MemorySegment szCODE, int dwFileVersionMS, int dwFileVersionLS, MemorySegment szTYPE, MemorySegment pBindCtx, int dwClsContext, MemorySegment pvReserved, MemorySegment riid, MemorySegment ppv) {
        var mh$ = CoGetClassObjectFromURL.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoGetClassObjectFromURL", rCLASSID, szCODE, dwFileVersionMS, dwFileVersionLS, szTYPE, pBindCtx, dwClsContext, pvReserved, riid, ppv);
            }
            return (int)mh$.invokeExact(rCLASSID, szCODE, dwFileVersionMS, dwFileVersionLS, szTYPE, pBindCtx, dwClsContext, pvReserved, riid, ppv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEInstallScope {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("IEInstallScope"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT IEInstallScope(LPDWORD pdwScope)
     * }
     */
    public static FunctionDescriptor IEInstallScope$descriptor() {
        return IEInstallScope.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT IEInstallScope(LPDWORD pdwScope)
     * }
     */
    public static MethodHandle IEInstallScope$handle() {
        return IEInstallScope.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT IEInstallScope(LPDWORD pdwScope)
     * }
     */
    public static int IEInstallScope(MemorySegment pdwScope) {
        var mh$ = IEInstallScope.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEInstallScope", pdwScope);
            }
            return (int)mh$.invokeExact(pdwScope);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FaultInIEFeature {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("FaultInIEFeature"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT FaultInIEFeature(HWND hWnd, uCLSSPEC *pClassSpec, QUERYCONTEXT *pQuery, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor FaultInIEFeature$descriptor() {
        return FaultInIEFeature.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT FaultInIEFeature(HWND hWnd, uCLSSPEC *pClassSpec, QUERYCONTEXT *pQuery, DWORD dwFlags)
     * }
     */
    public static MethodHandle FaultInIEFeature$handle() {
        return FaultInIEFeature.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT FaultInIEFeature(HWND hWnd, uCLSSPEC *pClassSpec, QUERYCONTEXT *pQuery, DWORD dwFlags)
     * }
     */
    public static int FaultInIEFeature(MemorySegment hWnd, MemorySegment pClassSpec, MemorySegment pQuery, int dwFlags) {
        var mh$ = FaultInIEFeature.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FaultInIEFeature", hWnd, pClassSpec, pQuery, dwFlags);
            }
            return (int)mh$.invokeExact(hWnd, pClassSpec, pQuery, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetComponentIDFromCLSSPEC {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("GetComponentIDFromCLSSPEC"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT GetComponentIDFromCLSSPEC(uCLSSPEC *pClassspec, LPSTR *ppszComponentID)
     * }
     */
    public static FunctionDescriptor GetComponentIDFromCLSSPEC$descriptor() {
        return GetComponentIDFromCLSSPEC.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT GetComponentIDFromCLSSPEC(uCLSSPEC *pClassspec, LPSTR *ppszComponentID)
     * }
     */
    public static MethodHandle GetComponentIDFromCLSSPEC$handle() {
        return GetComponentIDFromCLSSPEC.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT GetComponentIDFromCLSSPEC(uCLSSPEC *pClassspec, LPSTR *ppszComponentID)
     * }
     */
    public static int GetComponentIDFromCLSSPEC(MemorySegment pClassspec, MemorySegment ppszComponentID) {
        var mh$ = GetComponentIDFromCLSSPEC.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetComponentIDFromCLSSPEC", pClassspec, ppszComponentID);
            }
            return (int)mh$.invokeExact(pClassspec, ppszComponentID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IsAsyncMoniker {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("IsAsyncMoniker"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT IsAsyncMoniker(IMoniker *pmk)
     * }
     */
    public static FunctionDescriptor IsAsyncMoniker$descriptor() {
        return IsAsyncMoniker.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT IsAsyncMoniker(IMoniker *pmk)
     * }
     */
    public static MethodHandle IsAsyncMoniker$handle() {
        return IsAsyncMoniker.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT IsAsyncMoniker(IMoniker *pmk)
     * }
     */
    public static int IsAsyncMoniker(MemorySegment pmk) {
        var mh$ = IsAsyncMoniker.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IsAsyncMoniker", pmk);
            }
            return (int)mh$.invokeExact(pmk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateURLBinding {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("CreateURLBinding"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateURLBinding(LPCWSTR lpszUrl, IBindCtx *pbc, IBinding **ppBdg)
     * }
     */
    public static FunctionDescriptor CreateURLBinding$descriptor() {
        return CreateURLBinding.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateURLBinding(LPCWSTR lpszUrl, IBindCtx *pbc, IBinding **ppBdg)
     * }
     */
    public static MethodHandle CreateURLBinding$handle() {
        return CreateURLBinding.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CreateURLBinding(LPCWSTR lpszUrl, IBindCtx *pbc, IBinding **ppBdg)
     * }
     */
    public static int CreateURLBinding(MemorySegment lpszUrl, MemorySegment pbc, MemorySegment ppBdg) {
        var mh$ = CreateURLBinding.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateURLBinding", lpszUrl, pbc, ppBdg);
            }
            return (int)mh$.invokeExact(lpszUrl, pbc, ppBdg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RegisterMediaTypes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_INT,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("RegisterMediaTypes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT RegisterMediaTypes(UINT ctypes, const LPCSTR *rgszTypes, CLIPFORMAT *rgcfTypes)
     * }
     */
    public static FunctionDescriptor RegisterMediaTypes$descriptor() {
        return RegisterMediaTypes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT RegisterMediaTypes(UINT ctypes, const LPCSTR *rgszTypes, CLIPFORMAT *rgcfTypes)
     * }
     */
    public static MethodHandle RegisterMediaTypes$handle() {
        return RegisterMediaTypes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT RegisterMediaTypes(UINT ctypes, const LPCSTR *rgszTypes, CLIPFORMAT *rgcfTypes)
     * }
     */
    public static int RegisterMediaTypes(int ctypes, MemorySegment rgszTypes, MemorySegment rgcfTypes) {
        var mh$ = RegisterMediaTypes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RegisterMediaTypes", ctypes, rgszTypes, rgcfTypes);
            }
            return (int)mh$.invokeExact(ctypes, rgszTypes, rgcfTypes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FindMediaType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("FindMediaType"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT FindMediaType(LPCSTR rgszTypes, CLIPFORMAT *rgcfTypes)
     * }
     */
    public static FunctionDescriptor FindMediaType$descriptor() {
        return FindMediaType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT FindMediaType(LPCSTR rgszTypes, CLIPFORMAT *rgcfTypes)
     * }
     */
    public static MethodHandle FindMediaType$handle() {
        return FindMediaType.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT FindMediaType(LPCSTR rgszTypes, CLIPFORMAT *rgcfTypes)
     * }
     */
    public static int FindMediaType(MemorySegment rgszTypes, MemorySegment rgcfTypes) {
        var mh$ = FindMediaType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FindMediaType", rgszTypes, rgcfTypes);
            }
            return (int)mh$.invokeExact(rgszTypes, rgcfTypes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateFormatEnumerator {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_INT,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("CreateFormatEnumerator"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateFormatEnumerator(UINT cfmtetc, FORMATETC *rgfmtetc, IEnumFORMATETC **ppenumfmtetc)
     * }
     */
    public static FunctionDescriptor CreateFormatEnumerator$descriptor() {
        return CreateFormatEnumerator.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateFormatEnumerator(UINT cfmtetc, FORMATETC *rgfmtetc, IEnumFORMATETC **ppenumfmtetc)
     * }
     */
    public static MethodHandle CreateFormatEnumerator$handle() {
        return CreateFormatEnumerator.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CreateFormatEnumerator(UINT cfmtetc, FORMATETC *rgfmtetc, IEnumFORMATETC **ppenumfmtetc)
     * }
     */
    public static int CreateFormatEnumerator(int cfmtetc, MemorySegment rgfmtetc, MemorySegment ppenumfmtetc) {
        var mh$ = CreateFormatEnumerator.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateFormatEnumerator", cfmtetc, rgfmtetc, ppenumfmtetc);
            }
            return (int)mh$.invokeExact(cfmtetc, rgfmtetc, ppenumfmtetc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RegisterFormatEnumerator {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("RegisterFormatEnumerator"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT RegisterFormatEnumerator(LPBC pBC, IEnumFORMATETC *pEFetc, DWORD reserved)
     * }
     */
    public static FunctionDescriptor RegisterFormatEnumerator$descriptor() {
        return RegisterFormatEnumerator.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT RegisterFormatEnumerator(LPBC pBC, IEnumFORMATETC *pEFetc, DWORD reserved)
     * }
     */
    public static MethodHandle RegisterFormatEnumerator$handle() {
        return RegisterFormatEnumerator.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT RegisterFormatEnumerator(LPBC pBC, IEnumFORMATETC *pEFetc, DWORD reserved)
     * }
     */
    public static int RegisterFormatEnumerator(MemorySegment pBC, MemorySegment pEFetc, int reserved) {
        var mh$ = RegisterFormatEnumerator.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RegisterFormatEnumerator", pBC, pEFetc, reserved);
            }
            return (int)mh$.invokeExact(pBC, pEFetc, reserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RevokeFormatEnumerator {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("RevokeFormatEnumerator"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT RevokeFormatEnumerator(LPBC pBC, IEnumFORMATETC *pEFetc)
     * }
     */
    public static FunctionDescriptor RevokeFormatEnumerator$descriptor() {
        return RevokeFormatEnumerator.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT RevokeFormatEnumerator(LPBC pBC, IEnumFORMATETC *pEFetc)
     * }
     */
    public static MethodHandle RevokeFormatEnumerator$handle() {
        return RevokeFormatEnumerator.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT RevokeFormatEnumerator(LPBC pBC, IEnumFORMATETC *pEFetc)
     * }
     */
    public static int RevokeFormatEnumerator(MemorySegment pBC, MemorySegment pEFetc) {
        var mh$ = RevokeFormatEnumerator.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RevokeFormatEnumerator", pBC, pEFetc);
            }
            return (int)mh$.invokeExact(pBC, pEFetc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RegisterMediaTypeClass {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_INT,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("RegisterMediaTypeClass"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT RegisterMediaTypeClass(LPBC pBC, UINT ctypes, const LPCSTR *rgszTypes, CLSID *rgclsID, DWORD reserved)
     * }
     */
    public static FunctionDescriptor RegisterMediaTypeClass$descriptor() {
        return RegisterMediaTypeClass.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT RegisterMediaTypeClass(LPBC pBC, UINT ctypes, const LPCSTR *rgszTypes, CLSID *rgclsID, DWORD reserved)
     * }
     */
    public static MethodHandle RegisterMediaTypeClass$handle() {
        return RegisterMediaTypeClass.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT RegisterMediaTypeClass(LPBC pBC, UINT ctypes, const LPCSTR *rgszTypes, CLSID *rgclsID, DWORD reserved)
     * }
     */
    public static int RegisterMediaTypeClass(MemorySegment pBC, int ctypes, MemorySegment rgszTypes, MemorySegment rgclsID, int reserved) {
        var mh$ = RegisterMediaTypeClass.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RegisterMediaTypeClass", pBC, ctypes, rgszTypes, rgclsID, reserved);
            }
            return (int)mh$.invokeExact(pBC, ctypes, rgszTypes, rgclsID, reserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FindMediaTypeClass {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("FindMediaTypeClass"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT FindMediaTypeClass(LPBC pBC, LPCSTR szType, CLSID *pclsID, DWORD reserved)
     * }
     */
    public static FunctionDescriptor FindMediaTypeClass$descriptor() {
        return FindMediaTypeClass.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT FindMediaTypeClass(LPBC pBC, LPCSTR szType, CLSID *pclsID, DWORD reserved)
     * }
     */
    public static MethodHandle FindMediaTypeClass$handle() {
        return FindMediaTypeClass.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT FindMediaTypeClass(LPBC pBC, LPCSTR szType, CLSID *pclsID, DWORD reserved)
     * }
     */
    public static int FindMediaTypeClass(MemorySegment pBC, MemorySegment szType, MemorySegment pclsID, int reserved) {
        var mh$ = FindMediaTypeClass.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FindMediaTypeClass", pBC, szType, pclsID, reserved);
            }
            return (int)mh$.invokeExact(pBC, szType, pclsID, reserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class UrlMkSetSessionOption {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("UrlMkSetSessionOption"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT UrlMkSetSessionOption(DWORD dwOption, LPVOID pBuffer, DWORD dwBufferLength, DWORD dwReserved)
     * }
     */
    public static FunctionDescriptor UrlMkSetSessionOption$descriptor() {
        return UrlMkSetSessionOption.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT UrlMkSetSessionOption(DWORD dwOption, LPVOID pBuffer, DWORD dwBufferLength, DWORD dwReserved)
     * }
     */
    public static MethodHandle UrlMkSetSessionOption$handle() {
        return UrlMkSetSessionOption.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT UrlMkSetSessionOption(DWORD dwOption, LPVOID pBuffer, DWORD dwBufferLength, DWORD dwReserved)
     * }
     */
    public static int UrlMkSetSessionOption(int dwOption, MemorySegment pBuffer, int dwBufferLength, int dwReserved) {
        var mh$ = UrlMkSetSessionOption.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("UrlMkSetSessionOption", dwOption, pBuffer, dwBufferLength, dwReserved);
            }
            return (int)mh$.invokeExact(dwOption, pBuffer, dwBufferLength, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class UrlMkGetSessionOption {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("UrlMkGetSessionOption"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT UrlMkGetSessionOption(DWORD dwOption, LPVOID pBuffer, DWORD dwBufferLength, DWORD *pdwBufferLengthOut, DWORD dwReserved)
     * }
     */
    public static FunctionDescriptor UrlMkGetSessionOption$descriptor() {
        return UrlMkGetSessionOption.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT UrlMkGetSessionOption(DWORD dwOption, LPVOID pBuffer, DWORD dwBufferLength, DWORD *pdwBufferLengthOut, DWORD dwReserved)
     * }
     */
    public static MethodHandle UrlMkGetSessionOption$handle() {
        return UrlMkGetSessionOption.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT UrlMkGetSessionOption(DWORD dwOption, LPVOID pBuffer, DWORD dwBufferLength, DWORD *pdwBufferLengthOut, DWORD dwReserved)
     * }
     */
    public static int UrlMkGetSessionOption(int dwOption, MemorySegment pBuffer, int dwBufferLength, MemorySegment pdwBufferLengthOut, int dwReserved) {
        var mh$ = UrlMkGetSessionOption.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("UrlMkGetSessionOption", dwOption, pBuffer, dwBufferLength, pdwBufferLengthOut, dwReserved);
            }
            return (int)mh$.invokeExact(dwOption, pBuffer, dwBufferLength, pdwBufferLengthOut, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FindMimeFromData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("FindMimeFromData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT FindMimeFromData(LPBC pBC, LPCWSTR pwzUrl, LPVOID pBuffer, DWORD cbSize, LPCWSTR pwzMimeProposed, DWORD dwMimeFlags, LPWSTR *ppwzMimeOut, DWORD dwReserved)
     * }
     */
    public static FunctionDescriptor FindMimeFromData$descriptor() {
        return FindMimeFromData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT FindMimeFromData(LPBC pBC, LPCWSTR pwzUrl, LPVOID pBuffer, DWORD cbSize, LPCWSTR pwzMimeProposed, DWORD dwMimeFlags, LPWSTR *ppwzMimeOut, DWORD dwReserved)
     * }
     */
    public static MethodHandle FindMimeFromData$handle() {
        return FindMimeFromData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT FindMimeFromData(LPBC pBC, LPCWSTR pwzUrl, LPVOID pBuffer, DWORD cbSize, LPCWSTR pwzMimeProposed, DWORD dwMimeFlags, LPWSTR *ppwzMimeOut, DWORD dwReserved)
     * }
     */
    public static int FindMimeFromData(MemorySegment pBC, MemorySegment pwzUrl, MemorySegment pBuffer, int cbSize, MemorySegment pwzMimeProposed, int dwMimeFlags, MemorySegment ppwzMimeOut, int dwReserved) {
        var mh$ = FindMimeFromData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FindMimeFromData", pBC, pwzUrl, pBuffer, cbSize, pwzMimeProposed, dwMimeFlags, ppwzMimeOut, dwReserved);
            }
            return (int)mh$.invokeExact(pBC, pwzUrl, pBuffer, cbSize, pwzMimeProposed, dwMimeFlags, ppwzMimeOut, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ObtainUserAgentString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("ObtainUserAgentString"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT ObtainUserAgentString(DWORD dwOption, LPSTR pszUAOut, DWORD *cbSize)
     * }
     */
    public static FunctionDescriptor ObtainUserAgentString$descriptor() {
        return ObtainUserAgentString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT ObtainUserAgentString(DWORD dwOption, LPSTR pszUAOut, DWORD *cbSize)
     * }
     */
    public static MethodHandle ObtainUserAgentString$handle() {
        return ObtainUserAgentString.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT ObtainUserAgentString(DWORD dwOption, LPSTR pszUAOut, DWORD *cbSize)
     * }
     */
    public static int ObtainUserAgentString(int dwOption, MemorySegment pszUAOut, MemorySegment cbSize) {
        var mh$ = ObtainUserAgentString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ObtainUserAgentString", dwOption, pszUAOut, cbSize);
            }
            return (int)mh$.invokeExact(dwOption, pszUAOut, cbSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CompareSecurityIds {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("CompareSecurityIds"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CompareSecurityIds(BYTE *pbSecurityId1, DWORD dwLen1, BYTE *pbSecurityId2, DWORD dwLen2, DWORD dwReserved)
     * }
     */
    public static FunctionDescriptor CompareSecurityIds$descriptor() {
        return CompareSecurityIds.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CompareSecurityIds(BYTE *pbSecurityId1, DWORD dwLen1, BYTE *pbSecurityId2, DWORD dwLen2, DWORD dwReserved)
     * }
     */
    public static MethodHandle CompareSecurityIds$handle() {
        return CompareSecurityIds.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CompareSecurityIds(BYTE *pbSecurityId1, DWORD dwLen1, BYTE *pbSecurityId2, DWORD dwLen2, DWORD dwReserved)
     * }
     */
    public static int CompareSecurityIds(MemorySegment pbSecurityId1, int dwLen1, MemorySegment pbSecurityId2, int dwLen2, int dwReserved) {
        var mh$ = CompareSecurityIds.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CompareSecurityIds", pbSecurityId1, dwLen1, pbSecurityId2, dwLen2, dwReserved);
            }
            return (int)mh$.invokeExact(pbSecurityId1, dwLen1, pbSecurityId2, dwLen2, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CompatFlagsFromClsid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("CompatFlagsFromClsid"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CompatFlagsFromClsid(CLSID *pclsid, LPDWORD pdwCompatFlags, LPDWORD pdwMiscStatusFlags)
     * }
     */
    public static FunctionDescriptor CompatFlagsFromClsid$descriptor() {
        return CompatFlagsFromClsid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CompatFlagsFromClsid(CLSID *pclsid, LPDWORD pdwCompatFlags, LPDWORD pdwMiscStatusFlags)
     * }
     */
    public static MethodHandle CompatFlagsFromClsid$handle() {
        return CompatFlagsFromClsid.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CompatFlagsFromClsid(CLSID *pclsid, LPDWORD pdwCompatFlags, LPDWORD pdwMiscStatusFlags)
     * }
     */
    public static int CompatFlagsFromClsid(MemorySegment pclsid, MemorySegment pdwCompatFlags, MemorySegment pdwMiscStatusFlags) {
        var mh$ = CompatFlagsFromClsid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CompatFlagsFromClsid", pclsid, pdwCompatFlags, pdwMiscStatusFlags);
            }
            return (int)mh$.invokeExact(pclsid, pdwCompatFlags, pdwMiscStatusFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int IE_EPM_OBJECT_EVENT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum IEObjectType.IE_EPM_OBJECT_EVENT = 0
     * }
     */
    public static int IE_EPM_OBJECT_EVENT() {
        return IE_EPM_OBJECT_EVENT;
    }
    private static final int IE_EPM_OBJECT_MUTEX = (int)1L;
    /**
     * {@snippet lang=c :
     * enum IEObjectType.IE_EPM_OBJECT_MUTEX = 1
     * }
     */
    public static int IE_EPM_OBJECT_MUTEX() {
        return IE_EPM_OBJECT_MUTEX;
    }
    private static final int IE_EPM_OBJECT_SEMAPHORE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum IEObjectType.IE_EPM_OBJECT_SEMAPHORE = 2
     * }
     */
    public static int IE_EPM_OBJECT_SEMAPHORE() {
        return IE_EPM_OBJECT_SEMAPHORE;
    }
    private static final int IE_EPM_OBJECT_SHARED_MEMORY = (int)3L;
    /**
     * {@snippet lang=c :
     * enum IEObjectType.IE_EPM_OBJECT_SHARED_MEMORY = 3
     * }
     */
    public static int IE_EPM_OBJECT_SHARED_MEMORY() {
        return IE_EPM_OBJECT_SHARED_MEMORY;
    }
    private static final int IE_EPM_OBJECT_WAITABLE_TIMER = (int)4L;
    /**
     * {@snippet lang=c :
     * enum IEObjectType.IE_EPM_OBJECT_WAITABLE_TIMER = 4
     * }
     */
    public static int IE_EPM_OBJECT_WAITABLE_TIMER() {
        return IE_EPM_OBJECT_WAITABLE_TIMER;
    }
    private static final int IE_EPM_OBJECT_FILE = (int)5L;
    /**
     * {@snippet lang=c :
     * enum IEObjectType.IE_EPM_OBJECT_FILE = 5
     * }
     */
    public static int IE_EPM_OBJECT_FILE() {
        return IE_EPM_OBJECT_FILE;
    }
    private static final int IE_EPM_OBJECT_NAMED_PIPE = (int)6L;
    /**
     * {@snippet lang=c :
     * enum IEObjectType.IE_EPM_OBJECT_NAMED_PIPE = 6
     * }
     */
    public static int IE_EPM_OBJECT_NAMED_PIPE() {
        return IE_EPM_OBJECT_NAMED_PIPE;
    }
    private static final int IE_EPM_OBJECT_REGISTRY = (int)7L;
    /**
     * {@snippet lang=c :
     * enum IEObjectType.IE_EPM_OBJECT_REGISTRY = 7
     * }
     */
    public static int IE_EPM_OBJECT_REGISTRY() {
        return IE_EPM_OBJECT_REGISTRY;
    }

    private static class SetAccessForIEAppContainer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_INT,
            Windows_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("SetAccessForIEAppContainer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SetAccessForIEAppContainer(HANDLE hObject, IEObjectType ieObjectType, DWORD dwAccessMask)
     * }
     */
    public static FunctionDescriptor SetAccessForIEAppContainer$descriptor() {
        return SetAccessForIEAppContainer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SetAccessForIEAppContainer(HANDLE hObject, IEObjectType ieObjectType, DWORD dwAccessMask)
     * }
     */
    public static MethodHandle SetAccessForIEAppContainer$handle() {
        return SetAccessForIEAppContainer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT SetAccessForIEAppContainer(HANDLE hObject, IEObjectType ieObjectType, DWORD dwAccessMask)
     * }
     */
    public static int SetAccessForIEAppContainer(MemorySegment hObject, int ieObjectType, int dwAccessMask) {
        var mh$ = SetAccessForIEAppContainer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SetAccessForIEAppContainer", hObject, ieObjectType, dwAccessMask);
            }
            return (int)mh$.invokeExact(hObject, ieObjectType, dwAccessMask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_urlmon_0000_0000_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0000_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0000_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0000_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0000_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0000_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0000_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0000_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0000_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0000_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0000_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0000_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0000_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0000_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0000_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0000_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0000_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0000_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0000_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0000_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0000_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0000_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0000_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0000_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0000_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0000_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0000_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0000_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0000_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0000_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0000_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0000_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IPersistMoniker *LPPERSISTMONIKER
     * }
     */
    public static final AddressLayout LPPERSISTMONIKER = Windows_h.C_POINTER;

    private static class IID_IPersistMoniker$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IPersistMoniker").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPersistMoniker
     * }
     */
    public static GroupLayout IID_IPersistMoniker$layout() {
        return IID_IPersistMoniker$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPersistMoniker
     * }
     */
    public static MemorySegment IID_IPersistMoniker() {
        return IID_IPersistMoniker$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPersistMoniker
     * }
     */
    public static void IID_IPersistMoniker(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IPersistMoniker$constants.SEGMENT, 0L, IID_IPersistMoniker$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0001_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0001_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0001_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0001_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0001_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0001_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0001_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0001_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0001_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0001_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0001_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0001_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0001_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0001_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0001_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0001_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0001_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0001_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0001_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0001_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0001_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0001_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0001_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0001_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0001_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0001_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0001_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0001_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0001_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0001_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0001_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0001_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IMonikerProp *LPMONIKERPROP
     * }
     */
    public static final AddressLayout LPMONIKERPROP = Windows_h.C_POINTER;
    private static final int MIMETYPEPROP = (int)0L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IMonikerProp_0001.MIMETYPEPROP = 0
     * }
     */
    public static int MIMETYPEPROP() {
        return MIMETYPEPROP;
    }
    private static final int USE_SRC_URL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IMonikerProp_0001.USE_SRC_URL = 1
     * }
     */
    public static int USE_SRC_URL() {
        return USE_SRC_URL;
    }
    private static final int CLASSIDPROP = (int)2L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IMonikerProp_0001.CLASSIDPROP = 2
     * }
     */
    public static int CLASSIDPROP() {
        return CLASSIDPROP;
    }
    private static final int TRUSTEDDOWNLOADPROP = (int)3L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IMonikerProp_0001.TRUSTEDDOWNLOADPROP = 3
     * }
     */
    public static int TRUSTEDDOWNLOADPROP() {
        return TRUSTEDDOWNLOADPROP;
    }
    private static final int POPUPLEVELPROP = (int)4L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IMonikerProp_0001.POPUPLEVELPROP = 4
     * }
     */
    public static int POPUPLEVELPROP() {
        return POPUPLEVELPROP;
    }

    private static class IID_IMonikerProp$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IMonikerProp").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMonikerProp
     * }
     */
    public static GroupLayout IID_IMonikerProp$layout() {
        return IID_IMonikerProp$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMonikerProp
     * }
     */
    public static MemorySegment IID_IMonikerProp() {
        return IID_IMonikerProp$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMonikerProp
     * }
     */
    public static void IID_IMonikerProp(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IMonikerProp$constants.SEGMENT, 0L, IID_IMonikerProp$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0002_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0002_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0002_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0002_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0002_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0002_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0002_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0002_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0002_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0002_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0002_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0002_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0002_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0002_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0002_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0002_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0002_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0002_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0002_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0002_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0002_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0002_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0002_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0002_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0002_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0002_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0002_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0002_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0002_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0002_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0002_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0002_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IBindProtocol *LPBINDPROTOCOL
     * }
     */
    public static final AddressLayout LPBINDPROTOCOL = Windows_h.C_POINTER;

    private static class IID_IBindProtocol$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IBindProtocol").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBindProtocol
     * }
     */
    public static GroupLayout IID_IBindProtocol$layout() {
        return IID_IBindProtocol$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBindProtocol
     * }
     */
    public static MemorySegment IID_IBindProtocol() {
        return IID_IBindProtocol$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBindProtocol
     * }
     */
    public static void IID_IBindProtocol(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IBindProtocol$constants.SEGMENT, 0L, IID_IBindProtocol$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0003_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0003_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0003_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0003_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0003_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0003_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0003_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0003_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0003_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0003_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0003_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0003_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0003_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0003_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0003_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0003_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0003_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0003_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0003_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0003_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0003_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0003_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0003_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0003_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0003_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0003_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0003_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0003_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0003_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0003_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0003_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0003_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IBinding *LPBINDING
     * }
     */
    public static final AddressLayout LPBINDING = Windows_h.C_POINTER;

    private static class IID_IBinding$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IBinding").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBinding
     * }
     */
    public static GroupLayout IID_IBinding$layout() {
        return IID_IBinding$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBinding
     * }
     */
    public static MemorySegment IID_IBinding() {
        return IID_IBinding$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBinding
     * }
     */
    public static void IID_IBinding(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IBinding$constants.SEGMENT, 0L, IID_IBinding$constants.LAYOUT.byteSize());
    }

    private static class IBinding_RemoteGetBindResult_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("IBinding_RemoteGetBindResult_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBinding_RemoteGetBindResult_Proxy(IBinding *This, CLSID *pclsidProtocol, DWORD *pdwResult, LPOLESTR *pszResult, DWORD dwReserved)
     * }
     */
    public static FunctionDescriptor IBinding_RemoteGetBindResult_Proxy$descriptor() {
        return IBinding_RemoteGetBindResult_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBinding_RemoteGetBindResult_Proxy(IBinding *This, CLSID *pclsidProtocol, DWORD *pdwResult, LPOLESTR *pszResult, DWORD dwReserved)
     * }
     */
    public static MethodHandle IBinding_RemoteGetBindResult_Proxy$handle() {
        return IBinding_RemoteGetBindResult_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IBinding_RemoteGetBindResult_Proxy(IBinding *This, CLSID *pclsidProtocol, DWORD *pdwResult, LPOLESTR *pszResult, DWORD dwReserved)
     * }
     */
    public static int IBinding_RemoteGetBindResult_Proxy(MemorySegment This, MemorySegment pclsidProtocol, MemorySegment pdwResult, MemorySegment pszResult, int dwReserved) {
        var mh$ = IBinding_RemoteGetBindResult_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBinding_RemoteGetBindResult_Proxy", This, pclsidProtocol, pdwResult, pszResult, dwReserved);
            }
            return (int)mh$.invokeExact(This, pclsidProtocol, pdwResult, pszResult, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBinding_RemoteGetBindResult_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("IBinding_RemoteGetBindResult_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IBinding_RemoteGetBindResult_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IBinding_RemoteGetBindResult_Stub$descriptor() {
        return IBinding_RemoteGetBindResult_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IBinding_RemoteGetBindResult_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IBinding_RemoteGetBindResult_Stub$handle() {
        return IBinding_RemoteGetBindResult_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void IBinding_RemoteGetBindResult_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IBinding_RemoteGetBindResult_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IBinding_RemoteGetBindResult_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBinding_RemoteGetBindResult_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_urlmon_0000_0004_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0004_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0004_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0004_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0004_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0004_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0004_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0004_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0004_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0004_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0004_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0004_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0004_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0004_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0004_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0004_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0004_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0004_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0004_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0004_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0004_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0004_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0004_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0004_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0004_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0004_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0004_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0004_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0004_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0004_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0004_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0004_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IBindStatusCallback *LPBINDSTATUSCALLBACK
     * }
     */
    public static final AddressLayout LPBINDSTATUSCALLBACK = Windows_h.C_POINTER;
    private static final int BINDVERB_GET = (int)0L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0001.BINDVERB_GET = 0
     * }
     */
    public static int BINDVERB_GET() {
        return BINDVERB_GET;
    }
    private static final int BINDVERB_POST = (int)1L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0001.BINDVERB_POST = 1
     * }
     */
    public static int BINDVERB_POST() {
        return BINDVERB_POST;
    }
    private static final int BINDVERB_PUT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0001.BINDVERB_PUT = 2
     * }
     */
    public static int BINDVERB_PUT() {
        return BINDVERB_PUT;
    }
    private static final int BINDVERB_CUSTOM = (int)3L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0001.BINDVERB_CUSTOM = 3
     * }
     */
    public static int BINDVERB_CUSTOM() {
        return BINDVERB_CUSTOM;
    }
    private static final int BINDVERB_RESERVED1 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0001.BINDVERB_RESERVED1 = 4
     * }
     */
    public static int BINDVERB_RESERVED1() {
        return BINDVERB_RESERVED1;
    }
    private static final int BINDINFOF_URLENCODESTGMEDDATA = (int)1L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0002.BINDINFOF_URLENCODESTGMEDDATA = 1
     * }
     */
    public static int BINDINFOF_URLENCODESTGMEDDATA() {
        return BINDINFOF_URLENCODESTGMEDDATA;
    }
    private static final int BINDINFOF_URLENCODEDEXTRAINFO = (int)2L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0002.BINDINFOF_URLENCODEDEXTRAINFO = 2
     * }
     */
    public static int BINDINFOF_URLENCODEDEXTRAINFO() {
        return BINDINFOF_URLENCODEDEXTRAINFO;
    }
    private static final int BINDF_ASYNCHRONOUS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_ASYNCHRONOUS = 1
     * }
     */
    public static int BINDF_ASYNCHRONOUS() {
        return BINDF_ASYNCHRONOUS;
    }
    private static final int BINDF_ASYNCSTORAGE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_ASYNCSTORAGE = 2
     * }
     */
    public static int BINDF_ASYNCSTORAGE() {
        return BINDF_ASYNCSTORAGE;
    }
    private static final int BINDF_NOPROGRESSIVERENDERING = (int)4L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_NOPROGRESSIVERENDERING = 4
     * }
     */
    public static int BINDF_NOPROGRESSIVERENDERING() {
        return BINDF_NOPROGRESSIVERENDERING;
    }
    private static final int BINDF_OFFLINEOPERATION = (int)8L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_OFFLINEOPERATION = 8
     * }
     */
    public static int BINDF_OFFLINEOPERATION() {
        return BINDF_OFFLINEOPERATION;
    }
    private static final int BINDF_GETNEWESTVERSION = (int)16L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_GETNEWESTVERSION = 16
     * }
     */
    public static int BINDF_GETNEWESTVERSION() {
        return BINDF_GETNEWESTVERSION;
    }
    private static final int BINDF_NOWRITECACHE = (int)32L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_NOWRITECACHE = 32
     * }
     */
    public static int BINDF_NOWRITECACHE() {
        return BINDF_NOWRITECACHE;
    }
    private static final int BINDF_NEEDFILE = (int)64L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_NEEDFILE = 64
     * }
     */
    public static int BINDF_NEEDFILE() {
        return BINDF_NEEDFILE;
    }
    private static final int BINDF_PULLDATA = (int)128L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_PULLDATA = 128
     * }
     */
    public static int BINDF_PULLDATA() {
        return BINDF_PULLDATA;
    }
    private static final int BINDF_IGNORESECURITYPROBLEM = (int)256L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_IGNORESECURITYPROBLEM = 256
     * }
     */
    public static int BINDF_IGNORESECURITYPROBLEM() {
        return BINDF_IGNORESECURITYPROBLEM;
    }
    private static final int BINDF_RESYNCHRONIZE = (int)512L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_RESYNCHRONIZE = 512
     * }
     */
    public static int BINDF_RESYNCHRONIZE() {
        return BINDF_RESYNCHRONIZE;
    }
    private static final int BINDF_HYPERLINK = (int)1024L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_HYPERLINK = 1024
     * }
     */
    public static int BINDF_HYPERLINK() {
        return BINDF_HYPERLINK;
    }
    private static final int BINDF_NO_UI = (int)2048L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_NO_UI = 2048
     * }
     */
    public static int BINDF_NO_UI() {
        return BINDF_NO_UI;
    }
    private static final int BINDF_SILENTOPERATION = (int)4096L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_SILENTOPERATION = 4096
     * }
     */
    public static int BINDF_SILENTOPERATION() {
        return BINDF_SILENTOPERATION;
    }
    private static final int BINDF_PRAGMA_NO_CACHE = (int)8192L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_PRAGMA_NO_CACHE = 8192
     * }
     */
    public static int BINDF_PRAGMA_NO_CACHE() {
        return BINDF_PRAGMA_NO_CACHE;
    }
    private static final int BINDF_GETCLASSOBJECT = (int)16384L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_GETCLASSOBJECT = 16384
     * }
     */
    public static int BINDF_GETCLASSOBJECT() {
        return BINDF_GETCLASSOBJECT;
    }
    private static final int BINDF_RESERVED_1 = (int)32768L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_RESERVED_1 = 32768
     * }
     */
    public static int BINDF_RESERVED_1() {
        return BINDF_RESERVED_1;
    }
    private static final int BINDF_FREE_THREADED = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_FREE_THREADED = 65536
     * }
     */
    public static int BINDF_FREE_THREADED() {
        return BINDF_FREE_THREADED;
    }
    private static final int BINDF_DIRECT_READ = (int)131072L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_DIRECT_READ = 131072
     * }
     */
    public static int BINDF_DIRECT_READ() {
        return BINDF_DIRECT_READ;
    }
    private static final int BINDF_FORMS_SUBMIT = (int)262144L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_FORMS_SUBMIT = 262144
     * }
     */
    public static int BINDF_FORMS_SUBMIT() {
        return BINDF_FORMS_SUBMIT;
    }
    private static final int BINDF_GETFROMCACHE_IF_NET_FAIL = (int)524288L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_GETFROMCACHE_IF_NET_FAIL = 524288
     * }
     */
    public static int BINDF_GETFROMCACHE_IF_NET_FAIL() {
        return BINDF_GETFROMCACHE_IF_NET_FAIL;
    }
    private static final int BINDF_FROMURLMON = (int)1048576L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_FROMURLMON = 1048576
     * }
     */
    public static int BINDF_FROMURLMON() {
        return BINDF_FROMURLMON;
    }
    private static final int BINDF_FWD_BACK = (int)2097152L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_FWD_BACK = 2097152
     * }
     */
    public static int BINDF_FWD_BACK() {
        return BINDF_FWD_BACK;
    }
    private static final int BINDF_PREFERDEFAULTHANDLER = (int)4194304L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_PREFERDEFAULTHANDLER = 4194304
     * }
     */
    public static int BINDF_PREFERDEFAULTHANDLER() {
        return BINDF_PREFERDEFAULTHANDLER;
    }
    private static final int BINDF_ENFORCERESTRICTED = (int)8388608L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_ENFORCERESTRICTED = 8388608
     * }
     */
    public static int BINDF_ENFORCERESTRICTED() {
        return BINDF_ENFORCERESTRICTED;
    }
    private static final int BINDF_RESERVED_2 = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_RESERVED_2 = -2147483648
     * }
     */
    public static int BINDF_RESERVED_2() {
        return BINDF_RESERVED_2;
    }
    private static final int BINDF_RESERVED_3 = (int)16777216L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_RESERVED_3 = 16777216
     * }
     */
    public static int BINDF_RESERVED_3() {
        return BINDF_RESERVED_3;
    }
    private static final int BINDF_RESERVED_4 = (int)33554432L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_RESERVED_4 = 33554432
     * }
     */
    public static int BINDF_RESERVED_4() {
        return BINDF_RESERVED_4;
    }
    private static final int BINDF_RESERVED_5 = (int)67108864L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_RESERVED_5 = 67108864
     * }
     */
    public static int BINDF_RESERVED_5() {
        return BINDF_RESERVED_5;
    }
    private static final int BINDF_RESERVED_6 = (int)134217728L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_RESERVED_6 = 134217728
     * }
     */
    public static int BINDF_RESERVED_6() {
        return BINDF_RESERVED_6;
    }
    private static final int BINDF_RESERVED_7 = (int)1073741824L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_RESERVED_7 = 1073741824
     * }
     */
    public static int BINDF_RESERVED_7() {
        return BINDF_RESERVED_7;
    }
    private static final int BINDF_RESERVED_8 = (int)536870912L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_RESERVED_8 = 536870912
     * }
     */
    public static int BINDF_RESERVED_8() {
        return BINDF_RESERVED_8;
    }
    private static final int URL_ENCODING_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0004.URL_ENCODING_NONE = 0
     * }
     */
    public static int URL_ENCODING_NONE() {
        return URL_ENCODING_NONE;
    }
    private static final int URL_ENCODING_ENABLE_UTF8 = (int)268435456L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0004.URL_ENCODING_ENABLE_UTF8 = 268435456
     * }
     */
    public static int URL_ENCODING_ENABLE_UTF8() {
        return URL_ENCODING_ENABLE_UTF8;
    }
    private static final int URL_ENCODING_DISABLE_UTF8 = (int)536870912L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0004.URL_ENCODING_DISABLE_UTF8 = 536870912
     * }
     */
    public static int URL_ENCODING_DISABLE_UTF8() {
        return URL_ENCODING_DISABLE_UTF8;
    }
    /**
     * {@snippet lang=c :
     * typedef struct _REMSECURITY_ATTRIBUTES {
     *     DWORD nLength;
     *     DWORD lpSecurityDescriptor;
     *     BOOL bInheritHandle;
     * } *PREMSECURITY_ATTRIBUTES
     * }
     */
    public static final AddressLayout PREMSECURITY_ATTRIBUTES = Windows_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _REMSECURITY_ATTRIBUTES {
     *     DWORD nLength;
     *     DWORD lpSecurityDescriptor;
     *     BOOL bInheritHandle;
     * } *LPREMSECURITY_ATTRIBUTES
     * }
     */
    public static final AddressLayout LPREMSECURITY_ATTRIBUTES = Windows_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagRemFORMATETC {
     *     DWORD cfFormat;
     *     DWORD ptd;
     *     DWORD dwAspect;
     *     LONG lindex;
     *     DWORD tymed;
     * } *LPREMFORMATETC
     * }
     */
    public static final AddressLayout LPREMFORMATETC = Windows_h.C_POINTER;
    private static final int BINDINFO_OPTIONS_WININETFLAG = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0005.BINDINFO_OPTIONS_WININETFLAG = 65536
     * }
     */
    public static int BINDINFO_OPTIONS_WININETFLAG() {
        return BINDINFO_OPTIONS_WININETFLAG;
    }
    private static final int BINDINFO_OPTIONS_ENABLE_UTF8 = (int)131072L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0005.BINDINFO_OPTIONS_ENABLE_UTF8 = 131072
     * }
     */
    public static int BINDINFO_OPTIONS_ENABLE_UTF8() {
        return BINDINFO_OPTIONS_ENABLE_UTF8;
    }
    private static final int BINDINFO_OPTIONS_DISABLE_UTF8 = (int)262144L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0005.BINDINFO_OPTIONS_DISABLE_UTF8 = 262144
     * }
     */
    public static int BINDINFO_OPTIONS_DISABLE_UTF8() {
        return BINDINFO_OPTIONS_DISABLE_UTF8;
    }
    private static final int BINDINFO_OPTIONS_USE_IE_ENCODING = (int)524288L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0005.BINDINFO_OPTIONS_USE_IE_ENCODING = 524288
     * }
     */
    public static int BINDINFO_OPTIONS_USE_IE_ENCODING() {
        return BINDINFO_OPTIONS_USE_IE_ENCODING;
    }
    private static final int BINDINFO_OPTIONS_BINDTOOBJECT = (int)1048576L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0005.BINDINFO_OPTIONS_BINDTOOBJECT = 1048576
     * }
     */
    public static int BINDINFO_OPTIONS_BINDTOOBJECT() {
        return BINDINFO_OPTIONS_BINDTOOBJECT;
    }
    private static final int BINDINFO_OPTIONS_SECURITYOPTOUT = (int)2097152L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0005.BINDINFO_OPTIONS_SECURITYOPTOUT = 2097152
     * }
     */
    public static int BINDINFO_OPTIONS_SECURITYOPTOUT() {
        return BINDINFO_OPTIONS_SECURITYOPTOUT;
    }
    private static final int BINDINFO_OPTIONS_IGNOREMIMETEXTPLAIN = (int)4194304L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0005.BINDINFO_OPTIONS_IGNOREMIMETEXTPLAIN = 4194304
     * }
     */
    public static int BINDINFO_OPTIONS_IGNOREMIMETEXTPLAIN() {
        return BINDINFO_OPTIONS_IGNOREMIMETEXTPLAIN;
    }
    private static final int BINDINFO_OPTIONS_USEBINDSTRINGCREDS = (int)8388608L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0005.BINDINFO_OPTIONS_USEBINDSTRINGCREDS = 8388608
     * }
     */
    public static int BINDINFO_OPTIONS_USEBINDSTRINGCREDS() {
        return BINDINFO_OPTIONS_USEBINDSTRINGCREDS;
    }
    private static final int BINDINFO_OPTIONS_IGNOREHTTPHTTPSREDIRECTS = (int)16777216L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0005.BINDINFO_OPTIONS_IGNOREHTTPHTTPSREDIRECTS = 16777216
     * }
     */
    public static int BINDINFO_OPTIONS_IGNOREHTTPHTTPSREDIRECTS() {
        return BINDINFO_OPTIONS_IGNOREHTTPHTTPSREDIRECTS;
    }
    private static final int BINDINFO_OPTIONS_IGNORE_SSLERRORS_ONCE = (int)33554432L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0005.BINDINFO_OPTIONS_IGNORE_SSLERRORS_ONCE = 33554432
     * }
     */
    public static int BINDINFO_OPTIONS_IGNORE_SSLERRORS_ONCE() {
        return BINDINFO_OPTIONS_IGNORE_SSLERRORS_ONCE;
    }
    private static final int BINDINFO_WPC_DOWNLOADBLOCKED = (int)134217728L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0005.BINDINFO_WPC_DOWNLOADBLOCKED = 134217728
     * }
     */
    public static int BINDINFO_WPC_DOWNLOADBLOCKED() {
        return BINDINFO_WPC_DOWNLOADBLOCKED;
    }
    private static final int BINDINFO_WPC_LOGGING_ENABLED = (int)268435456L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0005.BINDINFO_WPC_LOGGING_ENABLED = 268435456
     * }
     */
    public static int BINDINFO_WPC_LOGGING_ENABLED() {
        return BINDINFO_WPC_LOGGING_ENABLED;
    }
    private static final int BINDINFO_OPTIONS_ALLOWCONNECTDATA = (int)536870912L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0005.BINDINFO_OPTIONS_ALLOWCONNECTDATA = 536870912
     * }
     */
    public static int BINDINFO_OPTIONS_ALLOWCONNECTDATA() {
        return BINDINFO_OPTIONS_ALLOWCONNECTDATA;
    }
    private static final int BINDINFO_OPTIONS_DISABLEAUTOREDIRECTS = (int)1073741824L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0005.BINDINFO_OPTIONS_DISABLEAUTOREDIRECTS = 1073741824
     * }
     */
    public static int BINDINFO_OPTIONS_DISABLEAUTOREDIRECTS() {
        return BINDINFO_OPTIONS_DISABLEAUTOREDIRECTS;
    }
    private static final int BINDINFO_OPTIONS_SHDOCVW_NAVIGATE = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0005.BINDINFO_OPTIONS_SHDOCVW_NAVIGATE = -2147483648
     * }
     */
    public static int BINDINFO_OPTIONS_SHDOCVW_NAVIGATE() {
        return BINDINFO_OPTIONS_SHDOCVW_NAVIGATE;
    }
    private static final int BSCF_FIRSTDATANOTIFICATION = (int)1L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0006.BSCF_FIRSTDATANOTIFICATION = 1
     * }
     */
    public static int BSCF_FIRSTDATANOTIFICATION() {
        return BSCF_FIRSTDATANOTIFICATION;
    }
    private static final int BSCF_INTERMEDIATEDATANOTIFICATION = (int)2L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0006.BSCF_INTERMEDIATEDATANOTIFICATION = 2
     * }
     */
    public static int BSCF_INTERMEDIATEDATANOTIFICATION() {
        return BSCF_INTERMEDIATEDATANOTIFICATION;
    }
    private static final int BSCF_LASTDATANOTIFICATION = (int)4L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0006.BSCF_LASTDATANOTIFICATION = 4
     * }
     */
    public static int BSCF_LASTDATANOTIFICATION() {
        return BSCF_LASTDATANOTIFICATION;
    }
    private static final int BSCF_DATAFULLYAVAILABLE = (int)8L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0006.BSCF_DATAFULLYAVAILABLE = 8
     * }
     */
    public static int BSCF_DATAFULLYAVAILABLE() {
        return BSCF_DATAFULLYAVAILABLE;
    }
    private static final int BSCF_AVAILABLEDATASIZEUNKNOWN = (int)16L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0006.BSCF_AVAILABLEDATASIZEUNKNOWN = 16
     * }
     */
    public static int BSCF_AVAILABLEDATASIZEUNKNOWN() {
        return BSCF_AVAILABLEDATASIZEUNKNOWN;
    }
    private static final int BSCF_SKIPDRAINDATAFORFILEURLS = (int)32L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0006.BSCF_SKIPDRAINDATAFORFILEURLS = 32
     * }
     */
    public static int BSCF_SKIPDRAINDATAFORFILEURLS() {
        return BSCF_SKIPDRAINDATAFORFILEURLS;
    }
    private static final int BSCF_64BITLENGTHDOWNLOAD = (int)64L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0006.BSCF_64BITLENGTHDOWNLOAD = 64
     * }
     */
    public static int BSCF_64BITLENGTHDOWNLOAD() {
        return BSCF_64BITLENGTHDOWNLOAD;
    }
    private static final int BINDSTATUS_FINDINGRESOURCE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_FINDINGRESOURCE = 1
     * }
     */
    public static int BINDSTATUS_FINDINGRESOURCE() {
        return BINDSTATUS_FINDINGRESOURCE;
    }
    private static final int BINDSTATUS_CONNECTING = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_CONNECTING = 2
     * }
     */
    public static int BINDSTATUS_CONNECTING() {
        return BINDSTATUS_CONNECTING;
    }
    private static final int BINDSTATUS_REDIRECTING = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_REDIRECTING = 3
     * }
     */
    public static int BINDSTATUS_REDIRECTING() {
        return BINDSTATUS_REDIRECTING;
    }
    private static final int BINDSTATUS_BEGINDOWNLOADDATA = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_BEGINDOWNLOADDATA = 4
     * }
     */
    public static int BINDSTATUS_BEGINDOWNLOADDATA() {
        return BINDSTATUS_BEGINDOWNLOADDATA;
    }
    private static final int BINDSTATUS_DOWNLOADINGDATA = (int)5L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_DOWNLOADINGDATA = 5
     * }
     */
    public static int BINDSTATUS_DOWNLOADINGDATA() {
        return BINDSTATUS_DOWNLOADINGDATA;
    }
    private static final int BINDSTATUS_ENDDOWNLOADDATA = (int)6L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_ENDDOWNLOADDATA = 6
     * }
     */
    public static int BINDSTATUS_ENDDOWNLOADDATA() {
        return BINDSTATUS_ENDDOWNLOADDATA;
    }
    private static final int BINDSTATUS_BEGINDOWNLOADCOMPONENTS = (int)7L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_BEGINDOWNLOADCOMPONENTS = 7
     * }
     */
    public static int BINDSTATUS_BEGINDOWNLOADCOMPONENTS() {
        return BINDSTATUS_BEGINDOWNLOADCOMPONENTS;
    }
    private static final int BINDSTATUS_INSTALLINGCOMPONENTS = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_INSTALLINGCOMPONENTS = 8
     * }
     */
    public static int BINDSTATUS_INSTALLINGCOMPONENTS() {
        return BINDSTATUS_INSTALLINGCOMPONENTS;
    }
    private static final int BINDSTATUS_ENDDOWNLOADCOMPONENTS = (int)9L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_ENDDOWNLOADCOMPONENTS = 9
     * }
     */
    public static int BINDSTATUS_ENDDOWNLOADCOMPONENTS() {
        return BINDSTATUS_ENDDOWNLOADCOMPONENTS;
    }
    private static final int BINDSTATUS_USINGCACHEDCOPY = (int)10L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_USINGCACHEDCOPY = 10
     * }
     */
    public static int BINDSTATUS_USINGCACHEDCOPY() {
        return BINDSTATUS_USINGCACHEDCOPY;
    }
    private static final int BINDSTATUS_SENDINGREQUEST = (int)11L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_SENDINGREQUEST = 11
     * }
     */
    public static int BINDSTATUS_SENDINGREQUEST() {
        return BINDSTATUS_SENDINGREQUEST;
    }
    private static final int BINDSTATUS_CLASSIDAVAILABLE = (int)12L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_CLASSIDAVAILABLE = 12
     * }
     */
    public static int BINDSTATUS_CLASSIDAVAILABLE() {
        return BINDSTATUS_CLASSIDAVAILABLE;
    }
    private static final int BINDSTATUS_MIMETYPEAVAILABLE = (int)13L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_MIMETYPEAVAILABLE = 13
     * }
     */
    public static int BINDSTATUS_MIMETYPEAVAILABLE() {
        return BINDSTATUS_MIMETYPEAVAILABLE;
    }
    private static final int BINDSTATUS_CACHEFILENAMEAVAILABLE = (int)14L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_CACHEFILENAMEAVAILABLE = 14
     * }
     */
    public static int BINDSTATUS_CACHEFILENAMEAVAILABLE() {
        return BINDSTATUS_CACHEFILENAMEAVAILABLE;
    }
    private static final int BINDSTATUS_BEGINSYNCOPERATION = (int)15L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_BEGINSYNCOPERATION = 15
     * }
     */
    public static int BINDSTATUS_BEGINSYNCOPERATION() {
        return BINDSTATUS_BEGINSYNCOPERATION;
    }
    private static final int BINDSTATUS_ENDSYNCOPERATION = (int)16L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_ENDSYNCOPERATION = 16
     * }
     */
    public static int BINDSTATUS_ENDSYNCOPERATION() {
        return BINDSTATUS_ENDSYNCOPERATION;
    }
    private static final int BINDSTATUS_BEGINUPLOADDATA = (int)17L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_BEGINUPLOADDATA = 17
     * }
     */
    public static int BINDSTATUS_BEGINUPLOADDATA() {
        return BINDSTATUS_BEGINUPLOADDATA;
    }
    private static final int BINDSTATUS_UPLOADINGDATA = (int)18L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_UPLOADINGDATA = 18
     * }
     */
    public static int BINDSTATUS_UPLOADINGDATA() {
        return BINDSTATUS_UPLOADINGDATA;
    }
    private static final int BINDSTATUS_ENDUPLOADDATA = (int)19L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_ENDUPLOADDATA = 19
     * }
     */
    public static int BINDSTATUS_ENDUPLOADDATA() {
        return BINDSTATUS_ENDUPLOADDATA;
    }
    private static final int BINDSTATUS_PROTOCOLCLASSID = (int)20L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_PROTOCOLCLASSID = 20
     * }
     */
    public static int BINDSTATUS_PROTOCOLCLASSID() {
        return BINDSTATUS_PROTOCOLCLASSID;
    }
    private static final int BINDSTATUS_ENCODING = (int)21L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_ENCODING = 21
     * }
     */
    public static int BINDSTATUS_ENCODING() {
        return BINDSTATUS_ENCODING;
    }
    private static final int BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE = (int)22L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE = 22
     * }
     */
    public static int BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE() {
        return BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE;
    }
    private static final int BINDSTATUS_CLASSINSTALLLOCATION = (int)23L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_CLASSINSTALLLOCATION = 23
     * }
     */
    public static int BINDSTATUS_CLASSINSTALLLOCATION() {
        return BINDSTATUS_CLASSINSTALLLOCATION;
    }
    private static final int BINDSTATUS_DECODING = (int)24L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_DECODING = 24
     * }
     */
    public static int BINDSTATUS_DECODING() {
        return BINDSTATUS_DECODING;
    }
    private static final int BINDSTATUS_LOADINGMIMEHANDLER = (int)25L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_LOADINGMIMEHANDLER = 25
     * }
     */
    public static int BINDSTATUS_LOADINGMIMEHANDLER() {
        return BINDSTATUS_LOADINGMIMEHANDLER;
    }
    private static final int BINDSTATUS_CONTENTDISPOSITIONATTACH = (int)26L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_CONTENTDISPOSITIONATTACH = 26
     * }
     */
    public static int BINDSTATUS_CONTENTDISPOSITIONATTACH() {
        return BINDSTATUS_CONTENTDISPOSITIONATTACH;
    }
    private static final int BINDSTATUS_FILTERREPORTMIMETYPE = (int)27L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_FILTERREPORTMIMETYPE = 27
     * }
     */
    public static int BINDSTATUS_FILTERREPORTMIMETYPE() {
        return BINDSTATUS_FILTERREPORTMIMETYPE;
    }
    private static final int BINDSTATUS_CLSIDCANINSTANTIATE = (int)28L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_CLSIDCANINSTANTIATE = 28
     * }
     */
    public static int BINDSTATUS_CLSIDCANINSTANTIATE() {
        return BINDSTATUS_CLSIDCANINSTANTIATE;
    }
    private static final int BINDSTATUS_IUNKNOWNAVAILABLE = (int)29L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_IUNKNOWNAVAILABLE = 29
     * }
     */
    public static int BINDSTATUS_IUNKNOWNAVAILABLE() {
        return BINDSTATUS_IUNKNOWNAVAILABLE;
    }
    private static final int BINDSTATUS_DIRECTBIND = (int)30L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_DIRECTBIND = 30
     * }
     */
    public static int BINDSTATUS_DIRECTBIND() {
        return BINDSTATUS_DIRECTBIND;
    }
    private static final int BINDSTATUS_RAWMIMETYPE = (int)31L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_RAWMIMETYPE = 31
     * }
     */
    public static int BINDSTATUS_RAWMIMETYPE() {
        return BINDSTATUS_RAWMIMETYPE;
    }
    private static final int BINDSTATUS_PROXYDETECTING = (int)32L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_PROXYDETECTING = 32
     * }
     */
    public static int BINDSTATUS_PROXYDETECTING() {
        return BINDSTATUS_PROXYDETECTING;
    }
    private static final int BINDSTATUS_ACCEPTRANGES = (int)33L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_ACCEPTRANGES = 33
     * }
     */
    public static int BINDSTATUS_ACCEPTRANGES() {
        return BINDSTATUS_ACCEPTRANGES;
    }
    private static final int BINDSTATUS_COOKIE_SENT = (int)34L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_COOKIE_SENT = 34
     * }
     */
    public static int BINDSTATUS_COOKIE_SENT() {
        return BINDSTATUS_COOKIE_SENT;
    }
    private static final int BINDSTATUS_COMPACT_POLICY_RECEIVED = (int)35L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_COMPACT_POLICY_RECEIVED = 35
     * }
     */
    public static int BINDSTATUS_COMPACT_POLICY_RECEIVED() {
        return BINDSTATUS_COMPACT_POLICY_RECEIVED;
    }
    private static final int BINDSTATUS_COOKIE_SUPPRESSED = (int)36L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_COOKIE_SUPPRESSED = 36
     * }
     */
    public static int BINDSTATUS_COOKIE_SUPPRESSED() {
        return BINDSTATUS_COOKIE_SUPPRESSED;
    }
    private static final int BINDSTATUS_COOKIE_STATE_UNKNOWN = (int)37L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_COOKIE_STATE_UNKNOWN = 37
     * }
     */
    public static int BINDSTATUS_COOKIE_STATE_UNKNOWN() {
        return BINDSTATUS_COOKIE_STATE_UNKNOWN;
    }
    private static final int BINDSTATUS_COOKIE_STATE_ACCEPT = (int)38L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_COOKIE_STATE_ACCEPT = 38
     * }
     */
    public static int BINDSTATUS_COOKIE_STATE_ACCEPT() {
        return BINDSTATUS_COOKIE_STATE_ACCEPT;
    }
    private static final int BINDSTATUS_COOKIE_STATE_REJECT = (int)39L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_COOKIE_STATE_REJECT = 39
     * }
     */
    public static int BINDSTATUS_COOKIE_STATE_REJECT() {
        return BINDSTATUS_COOKIE_STATE_REJECT;
    }
    private static final int BINDSTATUS_COOKIE_STATE_PROMPT = (int)40L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_COOKIE_STATE_PROMPT = 40
     * }
     */
    public static int BINDSTATUS_COOKIE_STATE_PROMPT() {
        return BINDSTATUS_COOKIE_STATE_PROMPT;
    }
    private static final int BINDSTATUS_COOKIE_STATE_LEASH = (int)41L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_COOKIE_STATE_LEASH = 41
     * }
     */
    public static int BINDSTATUS_COOKIE_STATE_LEASH() {
        return BINDSTATUS_COOKIE_STATE_LEASH;
    }
    private static final int BINDSTATUS_COOKIE_STATE_DOWNGRADE = (int)42L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_COOKIE_STATE_DOWNGRADE = 42
     * }
     */
    public static int BINDSTATUS_COOKIE_STATE_DOWNGRADE() {
        return BINDSTATUS_COOKIE_STATE_DOWNGRADE;
    }
    private static final int BINDSTATUS_POLICY_HREF = (int)43L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_POLICY_HREF = 43
     * }
     */
    public static int BINDSTATUS_POLICY_HREF() {
        return BINDSTATUS_POLICY_HREF;
    }
    private static final int BINDSTATUS_P3P_HEADER = (int)44L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_P3P_HEADER = 44
     * }
     */
    public static int BINDSTATUS_P3P_HEADER() {
        return BINDSTATUS_P3P_HEADER;
    }
    private static final int BINDSTATUS_SESSION_COOKIE_RECEIVED = (int)45L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_SESSION_COOKIE_RECEIVED = 45
     * }
     */
    public static int BINDSTATUS_SESSION_COOKIE_RECEIVED() {
        return BINDSTATUS_SESSION_COOKIE_RECEIVED;
    }
    private static final int BINDSTATUS_PERSISTENT_COOKIE_RECEIVED = (int)46L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_PERSISTENT_COOKIE_RECEIVED = 46
     * }
     */
    public static int BINDSTATUS_PERSISTENT_COOKIE_RECEIVED() {
        return BINDSTATUS_PERSISTENT_COOKIE_RECEIVED;
    }
    private static final int BINDSTATUS_SESSION_COOKIES_ALLOWED = (int)47L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_SESSION_COOKIES_ALLOWED = 47
     * }
     */
    public static int BINDSTATUS_SESSION_COOKIES_ALLOWED() {
        return BINDSTATUS_SESSION_COOKIES_ALLOWED;
    }
    private static final int BINDSTATUS_CACHECONTROL = (int)48L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_CACHECONTROL = 48
     * }
     */
    public static int BINDSTATUS_CACHECONTROL() {
        return BINDSTATUS_CACHECONTROL;
    }
    private static final int BINDSTATUS_CONTENTDISPOSITIONFILENAME = (int)49L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_CONTENTDISPOSITIONFILENAME = 49
     * }
     */
    public static int BINDSTATUS_CONTENTDISPOSITIONFILENAME() {
        return BINDSTATUS_CONTENTDISPOSITIONFILENAME;
    }
    private static final int BINDSTATUS_MIMETEXTPLAINMISMATCH = (int)50L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_MIMETEXTPLAINMISMATCH = 50
     * }
     */
    public static int BINDSTATUS_MIMETEXTPLAINMISMATCH() {
        return BINDSTATUS_MIMETEXTPLAINMISMATCH;
    }
    private static final int BINDSTATUS_PUBLISHERAVAILABLE = (int)51L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_PUBLISHERAVAILABLE = 51
     * }
     */
    public static int BINDSTATUS_PUBLISHERAVAILABLE() {
        return BINDSTATUS_PUBLISHERAVAILABLE;
    }
    private static final int BINDSTATUS_DISPLAYNAMEAVAILABLE = (int)52L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_DISPLAYNAMEAVAILABLE = 52
     * }
     */
    public static int BINDSTATUS_DISPLAYNAMEAVAILABLE() {
        return BINDSTATUS_DISPLAYNAMEAVAILABLE;
    }
    private static final int BINDSTATUS_SSLUX_NAVBLOCKED = (int)53L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_SSLUX_NAVBLOCKED = 53
     * }
     */
    public static int BINDSTATUS_SSLUX_NAVBLOCKED() {
        return BINDSTATUS_SSLUX_NAVBLOCKED;
    }
    private static final int BINDSTATUS_SERVER_MIMETYPEAVAILABLE = (int)54L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_SERVER_MIMETYPEAVAILABLE = 54
     * }
     */
    public static int BINDSTATUS_SERVER_MIMETYPEAVAILABLE() {
        return BINDSTATUS_SERVER_MIMETYPEAVAILABLE;
    }
    private static final int BINDSTATUS_SNIFFED_CLASSIDAVAILABLE = (int)55L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_SNIFFED_CLASSIDAVAILABLE = 55
     * }
     */
    public static int BINDSTATUS_SNIFFED_CLASSIDAVAILABLE() {
        return BINDSTATUS_SNIFFED_CLASSIDAVAILABLE;
    }
    private static final int BINDSTATUS_64BIT_PROGRESS = (int)56L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_64BIT_PROGRESS = 56
     * }
     */
    public static int BINDSTATUS_64BIT_PROGRESS() {
        return BINDSTATUS_64BIT_PROGRESS;
    }
    private static final int BINDSTATUS_LAST = (int)56L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_LAST = 56
     * }
     */
    public static int BINDSTATUS_LAST() {
        return BINDSTATUS_LAST;
    }
    private static final int BINDSTATUS_RESERVED_0 = (int)57L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_RESERVED_0 = 57
     * }
     */
    public static int BINDSTATUS_RESERVED_0() {
        return BINDSTATUS_RESERVED_0;
    }
    private static final int BINDSTATUS_RESERVED_1 = (int)58L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_RESERVED_1 = 58
     * }
     */
    public static int BINDSTATUS_RESERVED_1() {
        return BINDSTATUS_RESERVED_1;
    }
    private static final int BINDSTATUS_RESERVED_2 = (int)59L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_RESERVED_2 = 59
     * }
     */
    public static int BINDSTATUS_RESERVED_2() {
        return BINDSTATUS_RESERVED_2;
    }
    private static final int BINDSTATUS_RESERVED_3 = (int)60L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_RESERVED_3 = 60
     * }
     */
    public static int BINDSTATUS_RESERVED_3() {
        return BINDSTATUS_RESERVED_3;
    }
    private static final int BINDSTATUS_RESERVED_4 = (int)61L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_RESERVED_4 = 61
     * }
     */
    public static int BINDSTATUS_RESERVED_4() {
        return BINDSTATUS_RESERVED_4;
    }
    private static final int BINDSTATUS_RESERVED_5 = (int)62L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_RESERVED_5 = 62
     * }
     */
    public static int BINDSTATUS_RESERVED_5() {
        return BINDSTATUS_RESERVED_5;
    }
    private static final int BINDSTATUS_RESERVED_6 = (int)63L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_RESERVED_6 = 63
     * }
     */
    public static int BINDSTATUS_RESERVED_6() {
        return BINDSTATUS_RESERVED_6;
    }
    private static final int BINDSTATUS_RESERVED_7 = (int)64L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_RESERVED_7 = 64
     * }
     */
    public static int BINDSTATUS_RESERVED_7() {
        return BINDSTATUS_RESERVED_7;
    }
    private static final int BINDSTATUS_RESERVED_8 = (int)65L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_RESERVED_8 = 65
     * }
     */
    public static int BINDSTATUS_RESERVED_8() {
        return BINDSTATUS_RESERVED_8;
    }
    private static final int BINDSTATUS_RESERVED_9 = (int)66L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_RESERVED_9 = 66
     * }
     */
    public static int BINDSTATUS_RESERVED_9() {
        return BINDSTATUS_RESERVED_9;
    }
    private static final int BINDSTATUS_RESERVED_A = (int)67L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_RESERVED_A = 67
     * }
     */
    public static int BINDSTATUS_RESERVED_A() {
        return BINDSTATUS_RESERVED_A;
    }
    private static final int BINDSTATUS_RESERVED_B = (int)68L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_RESERVED_B = 68
     * }
     */
    public static int BINDSTATUS_RESERVED_B() {
        return BINDSTATUS_RESERVED_B;
    }
    private static final int BINDSTATUS_RESERVED_C = (int)69L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_RESERVED_C = 69
     * }
     */
    public static int BINDSTATUS_RESERVED_C() {
        return BINDSTATUS_RESERVED_C;
    }
    private static final int BINDSTATUS_RESERVED_D = (int)70L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_RESERVED_D = 70
     * }
     */
    public static int BINDSTATUS_RESERVED_D() {
        return BINDSTATUS_RESERVED_D;
    }
    private static final int BINDSTATUS_RESERVED_E = (int)71L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_RESERVED_E = 71
     * }
     */
    public static int BINDSTATUS_RESERVED_E() {
        return BINDSTATUS_RESERVED_E;
    }
    private static final int BINDSTATUS_RESERVED_F = (int)72L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_RESERVED_F = 72
     * }
     */
    public static int BINDSTATUS_RESERVED_F() {
        return BINDSTATUS_RESERVED_F;
    }
    private static final int BINDSTATUS_RESERVED_10 = (int)73L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_RESERVED_10 = 73
     * }
     */
    public static int BINDSTATUS_RESERVED_10() {
        return BINDSTATUS_RESERVED_10;
    }
    private static final int BINDSTATUS_RESERVED_11 = (int)74L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_RESERVED_11 = 74
     * }
     */
    public static int BINDSTATUS_RESERVED_11() {
        return BINDSTATUS_RESERVED_11;
    }
    private static final int BINDSTATUS_RESERVED_12 = (int)75L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_RESERVED_12 = 75
     * }
     */
    public static int BINDSTATUS_RESERVED_12() {
        return BINDSTATUS_RESERVED_12;
    }
    private static final int BINDSTATUS_RESERVED_13 = (int)76L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_RESERVED_13 = 76
     * }
     */
    public static int BINDSTATUS_RESERVED_13() {
        return BINDSTATUS_RESERVED_13;
    }
    private static final int BINDSTATUS_RESERVED_14 = (int)77L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_RESERVED_14 = 77
     * }
     */
    public static int BINDSTATUS_RESERVED_14() {
        return BINDSTATUS_RESERVED_14;
    }
    private static final int BINDSTATUS_LAST_PRIVATE = (int)77L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_LAST_PRIVATE = 77
     * }
     */
    public static int BINDSTATUS_LAST_PRIVATE() {
        return BINDSTATUS_LAST_PRIVATE;
    }

    private static class IID_IBindStatusCallback$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IBindStatusCallback").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBindStatusCallback
     * }
     */
    public static GroupLayout IID_IBindStatusCallback$layout() {
        return IID_IBindStatusCallback$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBindStatusCallback
     * }
     */
    public static MemorySegment IID_IBindStatusCallback() {
        return IID_IBindStatusCallback$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBindStatusCallback
     * }
     */
    public static void IID_IBindStatusCallback(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IBindStatusCallback$constants.SEGMENT, 0L, IID_IBindStatusCallback$constants.LAYOUT.byteSize());
    }

    private static class IBindStatusCallback_RemoteGetBindInfo_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("IBindStatusCallback_RemoteGetBindInfo_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallback_RemoteGetBindInfo_Proxy(IBindStatusCallback *This, DWORD *grfBINDF, RemBINDINFO *pbindinfo, RemSTGMEDIUM *pstgmed)
     * }
     */
    public static FunctionDescriptor IBindStatusCallback_RemoteGetBindInfo_Proxy$descriptor() {
        return IBindStatusCallback_RemoteGetBindInfo_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallback_RemoteGetBindInfo_Proxy(IBindStatusCallback *This, DWORD *grfBINDF, RemBINDINFO *pbindinfo, RemSTGMEDIUM *pstgmed)
     * }
     */
    public static MethodHandle IBindStatusCallback_RemoteGetBindInfo_Proxy$handle() {
        return IBindStatusCallback_RemoteGetBindInfo_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IBindStatusCallback_RemoteGetBindInfo_Proxy(IBindStatusCallback *This, DWORD *grfBINDF, RemBINDINFO *pbindinfo, RemSTGMEDIUM *pstgmed)
     * }
     */
    public static int IBindStatusCallback_RemoteGetBindInfo_Proxy(MemorySegment This, MemorySegment grfBINDF, MemorySegment pbindinfo, MemorySegment pstgmed) {
        var mh$ = IBindStatusCallback_RemoteGetBindInfo_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindStatusCallback_RemoteGetBindInfo_Proxy", This, grfBINDF, pbindinfo, pstgmed);
            }
            return (int)mh$.invokeExact(This, grfBINDF, pbindinfo, pstgmed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindStatusCallback_RemoteGetBindInfo_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("IBindStatusCallback_RemoteGetBindInfo_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IBindStatusCallback_RemoteGetBindInfo_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IBindStatusCallback_RemoteGetBindInfo_Stub$descriptor() {
        return IBindStatusCallback_RemoteGetBindInfo_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IBindStatusCallback_RemoteGetBindInfo_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IBindStatusCallback_RemoteGetBindInfo_Stub$handle() {
        return IBindStatusCallback_RemoteGetBindInfo_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void IBindStatusCallback_RemoteGetBindInfo_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IBindStatusCallback_RemoteGetBindInfo_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IBindStatusCallback_RemoteGetBindInfo_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindStatusCallback_RemoteGetBindInfo_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindStatusCallback_RemoteOnDataAvailable_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("IBindStatusCallback_RemoteOnDataAvailable_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallback_RemoteOnDataAvailable_Proxy(IBindStatusCallback *This, DWORD grfBSCF, DWORD dwSize, RemFORMATETC *pformatetc, RemSTGMEDIUM *pstgmed)
     * }
     */
    public static FunctionDescriptor IBindStatusCallback_RemoteOnDataAvailable_Proxy$descriptor() {
        return IBindStatusCallback_RemoteOnDataAvailable_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallback_RemoteOnDataAvailable_Proxy(IBindStatusCallback *This, DWORD grfBSCF, DWORD dwSize, RemFORMATETC *pformatetc, RemSTGMEDIUM *pstgmed)
     * }
     */
    public static MethodHandle IBindStatusCallback_RemoteOnDataAvailable_Proxy$handle() {
        return IBindStatusCallback_RemoteOnDataAvailable_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IBindStatusCallback_RemoteOnDataAvailable_Proxy(IBindStatusCallback *This, DWORD grfBSCF, DWORD dwSize, RemFORMATETC *pformatetc, RemSTGMEDIUM *pstgmed)
     * }
     */
    public static int IBindStatusCallback_RemoteOnDataAvailable_Proxy(MemorySegment This, int grfBSCF, int dwSize, MemorySegment pformatetc, MemorySegment pstgmed) {
        var mh$ = IBindStatusCallback_RemoteOnDataAvailable_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindStatusCallback_RemoteOnDataAvailable_Proxy", This, grfBSCF, dwSize, pformatetc, pstgmed);
            }
            return (int)mh$.invokeExact(This, grfBSCF, dwSize, pformatetc, pstgmed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindStatusCallback_RemoteOnDataAvailable_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("IBindStatusCallback_RemoteOnDataAvailable_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IBindStatusCallback_RemoteOnDataAvailable_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IBindStatusCallback_RemoteOnDataAvailable_Stub$descriptor() {
        return IBindStatusCallback_RemoteOnDataAvailable_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IBindStatusCallback_RemoteOnDataAvailable_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IBindStatusCallback_RemoteOnDataAvailable_Stub$handle() {
        return IBindStatusCallback_RemoteOnDataAvailable_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void IBindStatusCallback_RemoteOnDataAvailable_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IBindStatusCallback_RemoteOnDataAvailable_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IBindStatusCallback_RemoteOnDataAvailable_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindStatusCallback_RemoteOnDataAvailable_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_urlmon_0000_0005_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0005_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0005_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0005_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0005_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0005_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0005_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0005_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0005_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0005_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0005_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0005_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0005_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0005_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0005_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0005_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0005_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0005_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0005_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0005_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0005_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0005_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0005_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0005_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0005_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0005_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0005_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0005_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0005_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0005_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0005_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0005_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IBindStatusCallbackEx *LPBINDSTATUSCALLBACKEX
     * }
     */
    public static final AddressLayout LPBINDSTATUSCALLBACKEX = Windows_h.C_POINTER;
    private static final int BINDF2_DISABLEBASICOVERHTTP = (int)1L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_DISABLEBASICOVERHTTP = 1
     * }
     */
    public static int BINDF2_DISABLEBASICOVERHTTP() {
        return BINDF2_DISABLEBASICOVERHTTP;
    }
    private static final int BINDF2_DISABLEAUTOCOOKIEHANDLING = (int)2L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_DISABLEAUTOCOOKIEHANDLING = 2
     * }
     */
    public static int BINDF2_DISABLEAUTOCOOKIEHANDLING() {
        return BINDF2_DISABLEAUTOCOOKIEHANDLING;
    }
    private static final int BINDF2_READ_DATA_GREATER_THAN_4GB = (int)4L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_READ_DATA_GREATER_THAN_4GB = 4
     * }
     */
    public static int BINDF2_READ_DATA_GREATER_THAN_4GB() {
        return BINDF2_READ_DATA_GREATER_THAN_4GB;
    }
    private static final int BINDF2_DISABLE_HTTP_REDIRECT_XSECURITYID = (int)8L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_DISABLE_HTTP_REDIRECT_XSECURITYID = 8
     * }
     */
    public static int BINDF2_DISABLE_HTTP_REDIRECT_XSECURITYID() {
        return BINDF2_DISABLE_HTTP_REDIRECT_XSECURITYID;
    }
    private static final int BINDF2_SETDOWNLOADMODE = (int)32L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_SETDOWNLOADMODE = 32
     * }
     */
    public static int BINDF2_SETDOWNLOADMODE() {
        return BINDF2_SETDOWNLOADMODE;
    }
    private static final int BINDF2_DISABLE_HTTP_REDIRECT_CACHING = (int)64L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_DISABLE_HTTP_REDIRECT_CACHING = 64
     * }
     */
    public static int BINDF2_DISABLE_HTTP_REDIRECT_CACHING() {
        return BINDF2_DISABLE_HTTP_REDIRECT_CACHING;
    }
    private static final int BINDF2_KEEP_CALLBACK_MODULE_LOADED = (int)128L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_KEEP_CALLBACK_MODULE_LOADED = 128
     * }
     */
    public static int BINDF2_KEEP_CALLBACK_MODULE_LOADED() {
        return BINDF2_KEEP_CALLBACK_MODULE_LOADED;
    }
    private static final int BINDF2_ALLOW_PROXY_CRED_PROMPT = (int)256L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_ALLOW_PROXY_CRED_PROMPT = 256
     * }
     */
    public static int BINDF2_ALLOW_PROXY_CRED_PROMPT() {
        return BINDF2_ALLOW_PROXY_CRED_PROMPT;
    }
    private static final int BINDF2_RESERVED_17 = (int)512L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_RESERVED_17 = 512
     * }
     */
    public static int BINDF2_RESERVED_17() {
        return BINDF2_RESERVED_17;
    }
    private static final int BINDF2_RESERVED_16 = (int)1024L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_RESERVED_16 = 1024
     * }
     */
    public static int BINDF2_RESERVED_16() {
        return BINDF2_RESERVED_16;
    }
    private static final int BINDF2_RESERVED_15 = (int)2048L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_RESERVED_15 = 2048
     * }
     */
    public static int BINDF2_RESERVED_15() {
        return BINDF2_RESERVED_15;
    }
    private static final int BINDF2_RESERVED_14 = (int)4096L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_RESERVED_14 = 4096
     * }
     */
    public static int BINDF2_RESERVED_14() {
        return BINDF2_RESERVED_14;
    }
    private static final int BINDF2_RESERVED_13 = (int)8192L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_RESERVED_13 = 8192
     * }
     */
    public static int BINDF2_RESERVED_13() {
        return BINDF2_RESERVED_13;
    }
    private static final int BINDF2_RESERVED_12 = (int)16384L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_RESERVED_12 = 16384
     * }
     */
    public static int BINDF2_RESERVED_12() {
        return BINDF2_RESERVED_12;
    }
    private static final int BINDF2_RESERVED_11 = (int)32768L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_RESERVED_11 = 32768
     * }
     */
    public static int BINDF2_RESERVED_11() {
        return BINDF2_RESERVED_11;
    }
    private static final int BINDF2_RESERVED_10 = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_RESERVED_10 = 65536
     * }
     */
    public static int BINDF2_RESERVED_10() {
        return BINDF2_RESERVED_10;
    }
    private static final int BINDF2_RESERVED_F = (int)131072L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_RESERVED_F = 131072
     * }
     */
    public static int BINDF2_RESERVED_F() {
        return BINDF2_RESERVED_F;
    }
    private static final int BINDF2_RESERVED_E = (int)262144L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_RESERVED_E = 262144
     * }
     */
    public static int BINDF2_RESERVED_E() {
        return BINDF2_RESERVED_E;
    }
    private static final int BINDF2_RESERVED_D = (int)524288L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_RESERVED_D = 524288
     * }
     */
    public static int BINDF2_RESERVED_D() {
        return BINDF2_RESERVED_D;
    }
    private static final int BINDF2_RESERVED_C = (int)1048576L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_RESERVED_C = 1048576
     * }
     */
    public static int BINDF2_RESERVED_C() {
        return BINDF2_RESERVED_C;
    }
    private static final int BINDF2_RESERVED_B = (int)2097152L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_RESERVED_B = 2097152
     * }
     */
    public static int BINDF2_RESERVED_B() {
        return BINDF2_RESERVED_B;
    }
    private static final int BINDF2_RESERVED_A = (int)4194304L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_RESERVED_A = 4194304
     * }
     */
    public static int BINDF2_RESERVED_A() {
        return BINDF2_RESERVED_A;
    }
    private static final int BINDF2_RESERVED_9 = (int)8388608L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_RESERVED_9 = 8388608
     * }
     */
    public static int BINDF2_RESERVED_9() {
        return BINDF2_RESERVED_9;
    }
    private static final int BINDF2_RESERVED_8 = (int)16777216L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_RESERVED_8 = 16777216
     * }
     */
    public static int BINDF2_RESERVED_8() {
        return BINDF2_RESERVED_8;
    }
    private static final int BINDF2_RESERVED_7 = (int)33554432L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_RESERVED_7 = 33554432
     * }
     */
    public static int BINDF2_RESERVED_7() {
        return BINDF2_RESERVED_7;
    }
    private static final int BINDF2_RESERVED_6 = (int)67108864L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_RESERVED_6 = 67108864
     * }
     */
    public static int BINDF2_RESERVED_6() {
        return BINDF2_RESERVED_6;
    }
    private static final int BINDF2_RESERVED_5 = (int)134217728L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_RESERVED_5 = 134217728
     * }
     */
    public static int BINDF2_RESERVED_5() {
        return BINDF2_RESERVED_5;
    }
    private static final int BINDF2_RESERVED_4 = (int)268435456L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_RESERVED_4 = 268435456
     * }
     */
    public static int BINDF2_RESERVED_4() {
        return BINDF2_RESERVED_4;
    }
    private static final int BINDF2_RESERVED_3 = (int)536870912L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_RESERVED_3 = 536870912
     * }
     */
    public static int BINDF2_RESERVED_3() {
        return BINDF2_RESERVED_3;
    }
    private static final int BINDF2_RESERVED_2 = (int)1073741824L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_RESERVED_2 = 1073741824
     * }
     */
    public static int BINDF2_RESERVED_2() {
        return BINDF2_RESERVED_2;
    }
    private static final int BINDF2_RESERVED_1 = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_RESERVED_1 = -2147483648
     * }
     */
    public static int BINDF2_RESERVED_1() {
        return BINDF2_RESERVED_1;
    }

    private static class IID_IBindStatusCallbackEx$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IBindStatusCallbackEx").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBindStatusCallbackEx
     * }
     */
    public static GroupLayout IID_IBindStatusCallbackEx$layout() {
        return IID_IBindStatusCallbackEx$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBindStatusCallbackEx
     * }
     */
    public static MemorySegment IID_IBindStatusCallbackEx() {
        return IID_IBindStatusCallbackEx$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBindStatusCallbackEx
     * }
     */
    public static void IID_IBindStatusCallbackEx(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IBindStatusCallbackEx$constants.SEGMENT, 0L, IID_IBindStatusCallbackEx$constants.LAYOUT.byteSize());
    }

    private static class IBindStatusCallbackEx_RemoteGetBindInfoEx_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("IBindStatusCallbackEx_RemoteGetBindInfoEx_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallbackEx_RemoteGetBindInfoEx_Proxy(IBindStatusCallbackEx *This, DWORD *grfBINDF, RemBINDINFO *pbindinfo, RemSTGMEDIUM *pstgmed, DWORD *grfBINDF2, DWORD *pdwReserved)
     * }
     */
    public static FunctionDescriptor IBindStatusCallbackEx_RemoteGetBindInfoEx_Proxy$descriptor() {
        return IBindStatusCallbackEx_RemoteGetBindInfoEx_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallbackEx_RemoteGetBindInfoEx_Proxy(IBindStatusCallbackEx *This, DWORD *grfBINDF, RemBINDINFO *pbindinfo, RemSTGMEDIUM *pstgmed, DWORD *grfBINDF2, DWORD *pdwReserved)
     * }
     */
    public static MethodHandle IBindStatusCallbackEx_RemoteGetBindInfoEx_Proxy$handle() {
        return IBindStatusCallbackEx_RemoteGetBindInfoEx_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IBindStatusCallbackEx_RemoteGetBindInfoEx_Proxy(IBindStatusCallbackEx *This, DWORD *grfBINDF, RemBINDINFO *pbindinfo, RemSTGMEDIUM *pstgmed, DWORD *grfBINDF2, DWORD *pdwReserved)
     * }
     */
    public static int IBindStatusCallbackEx_RemoteGetBindInfoEx_Proxy(MemorySegment This, MemorySegment grfBINDF, MemorySegment pbindinfo, MemorySegment pstgmed, MemorySegment grfBINDF2, MemorySegment pdwReserved) {
        var mh$ = IBindStatusCallbackEx_RemoteGetBindInfoEx_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindStatusCallbackEx_RemoteGetBindInfoEx_Proxy", This, grfBINDF, pbindinfo, pstgmed, grfBINDF2, pdwReserved);
            }
            return (int)mh$.invokeExact(This, grfBINDF, pbindinfo, pstgmed, grfBINDF2, pdwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindStatusCallbackEx_RemoteGetBindInfoEx_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("IBindStatusCallbackEx_RemoteGetBindInfoEx_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IBindStatusCallbackEx_RemoteGetBindInfoEx_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IBindStatusCallbackEx_RemoteGetBindInfoEx_Stub$descriptor() {
        return IBindStatusCallbackEx_RemoteGetBindInfoEx_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IBindStatusCallbackEx_RemoteGetBindInfoEx_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IBindStatusCallbackEx_RemoteGetBindInfoEx_Stub$handle() {
        return IBindStatusCallbackEx_RemoteGetBindInfoEx_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void IBindStatusCallbackEx_RemoteGetBindInfoEx_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IBindStatusCallbackEx_RemoteGetBindInfoEx_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IBindStatusCallbackEx_RemoteGetBindInfoEx_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindStatusCallbackEx_RemoteGetBindInfoEx_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_urlmon_0000_0006_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0006_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0006_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0006_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0006_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0006_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0006_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0006_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0006_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0006_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0006_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0006_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0006_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0006_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0006_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0006_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0006_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0006_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0006_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0006_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0006_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0006_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0006_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0006_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0006_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0006_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0006_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0006_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0006_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0006_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0006_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0006_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IAuthenticate *LPAUTHENTICATION
     * }
     */
    public static final AddressLayout LPAUTHENTICATION = Windows_h.C_POINTER;

    private static class IID_IAuthenticate$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IAuthenticate").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAuthenticate
     * }
     */
    public static GroupLayout IID_IAuthenticate$layout() {
        return IID_IAuthenticate$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAuthenticate
     * }
     */
    public static MemorySegment IID_IAuthenticate() {
        return IID_IAuthenticate$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAuthenticate
     * }
     */
    public static void IID_IAuthenticate(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IAuthenticate$constants.SEGMENT, 0L, IID_IAuthenticate$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0007_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0007_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0007_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0007_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0007_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0007_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0007_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0007_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0007_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0007_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0007_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0007_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0007_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0007_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0007_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0007_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0007_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0007_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0007_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0007_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0007_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0007_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0007_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0007_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0007_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0007_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0007_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0007_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0007_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0007_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0007_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0007_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IAuthenticateEx *LPAUTHENTICATIONEX
     * }
     */
    public static final AddressLayout LPAUTHENTICATIONEX = Windows_h.C_POINTER;
    private static final int AUTHENTICATEF_PROXY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IAuthenticateEx_0001.AUTHENTICATEF_PROXY = 1
     * }
     */
    public static int AUTHENTICATEF_PROXY() {
        return AUTHENTICATEF_PROXY;
    }
    private static final int AUTHENTICATEF_BASIC = (int)2L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IAuthenticateEx_0001.AUTHENTICATEF_BASIC = 2
     * }
     */
    public static int AUTHENTICATEF_BASIC() {
        return AUTHENTICATEF_BASIC;
    }
    private static final int AUTHENTICATEF_HTTP = (int)4L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IAuthenticateEx_0001.AUTHENTICATEF_HTTP = 4
     * }
     */
    public static int AUTHENTICATEF_HTTP() {
        return AUTHENTICATEF_HTTP;
    }

    private static class IID_IAuthenticateEx$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IAuthenticateEx").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAuthenticateEx
     * }
     */
    public static GroupLayout IID_IAuthenticateEx$layout() {
        return IID_IAuthenticateEx$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAuthenticateEx
     * }
     */
    public static MemorySegment IID_IAuthenticateEx() {
        return IID_IAuthenticateEx$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAuthenticateEx
     * }
     */
    public static void IID_IAuthenticateEx(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IAuthenticateEx$constants.SEGMENT, 0L, IID_IAuthenticateEx$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0008_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0008_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0008_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0008_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0008_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0008_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0008_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0008_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0008_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0008_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0008_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0008_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0008_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0008_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0008_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0008_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0008_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0008_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0008_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0008_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0008_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0008_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0008_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0008_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0008_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0008_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0008_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0008_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0008_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0008_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0008_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0008_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IHttpNegotiate *LPHTTPNEGOTIATE
     * }
     */
    public static final AddressLayout LPHTTPNEGOTIATE = Windows_h.C_POINTER;

    private static class IID_IHttpNegotiate$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IHttpNegotiate").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IHttpNegotiate
     * }
     */
    public static GroupLayout IID_IHttpNegotiate$layout() {
        return IID_IHttpNegotiate$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IHttpNegotiate
     * }
     */
    public static MemorySegment IID_IHttpNegotiate() {
        return IID_IHttpNegotiate$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IHttpNegotiate
     * }
     */
    public static void IID_IHttpNegotiate(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IHttpNegotiate$constants.SEGMENT, 0L, IID_IHttpNegotiate$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0009_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0009_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0009_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0009_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0009_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0009_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0009_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0009_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0009_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0009_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0009_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0009_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0009_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0009_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0009_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0009_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0009_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0009_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0009_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0009_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0009_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0009_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0009_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0009_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0009_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0009_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0009_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0009_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0009_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0009_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0009_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0009_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IHttpNegotiate2 *LPHTTPNEGOTIATE2
     * }
     */
    public static final AddressLayout LPHTTPNEGOTIATE2 = Windows_h.C_POINTER;

    private static class IID_IHttpNegotiate2$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IHttpNegotiate2").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IHttpNegotiate2
     * }
     */
    public static GroupLayout IID_IHttpNegotiate2$layout() {
        return IID_IHttpNegotiate2$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IHttpNegotiate2
     * }
     */
    public static MemorySegment IID_IHttpNegotiate2() {
        return IID_IHttpNegotiate2$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IHttpNegotiate2
     * }
     */
    public static void IID_IHttpNegotiate2(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IHttpNegotiate2$constants.SEGMENT, 0L, IID_IHttpNegotiate2$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0010_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0010_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0010_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0010_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0010_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0010_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0010_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0010_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0010_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0010_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0010_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0010_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0010_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0010_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0010_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0010_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0010_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0010_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0010_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0010_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0010_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0010_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0010_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0010_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0010_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0010_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0010_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0010_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0010_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0010_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0010_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0010_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IHttpNegotiate3 *LPHTTPNEGOTIATE3
     * }
     */
    public static final AddressLayout LPHTTPNEGOTIATE3 = Windows_h.C_POINTER;

    private static class IID_IHttpNegotiate3$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IHttpNegotiate3").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IHttpNegotiate3
     * }
     */
    public static GroupLayout IID_IHttpNegotiate3$layout() {
        return IID_IHttpNegotiate3$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IHttpNegotiate3
     * }
     */
    public static MemorySegment IID_IHttpNegotiate3() {
        return IID_IHttpNegotiate3$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IHttpNegotiate3
     * }
     */
    public static void IID_IHttpNegotiate3(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IHttpNegotiate3$constants.SEGMENT, 0L, IID_IHttpNegotiate3$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0011_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0011_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0011_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0011_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0011_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0011_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0011_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0011_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0011_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0011_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0011_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0011_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0011_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0011_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0011_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0011_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0011_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0011_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0011_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0011_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0011_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0011_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0011_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0011_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0011_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0011_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0011_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0011_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0011_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0011_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0011_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0011_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IWinInetFileStream *LPWININETFILESTREAM
     * }
     */
    public static final AddressLayout LPWININETFILESTREAM = Windows_h.C_POINTER;

    private static class IID_IWinInetFileStream$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IWinInetFileStream").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IWinInetFileStream
     * }
     */
    public static GroupLayout IID_IWinInetFileStream$layout() {
        return IID_IWinInetFileStream$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IWinInetFileStream
     * }
     */
    public static MemorySegment IID_IWinInetFileStream() {
        return IID_IWinInetFileStream$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IWinInetFileStream
     * }
     */
    public static void IID_IWinInetFileStream(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IWinInetFileStream$constants.SEGMENT, 0L, IID_IWinInetFileStream$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0012_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0012_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0012_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0012_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0012_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0012_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0012_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0012_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0012_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0012_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0012_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0012_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0012_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0012_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0012_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0012_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0012_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0012_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0012_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0012_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0012_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0012_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0012_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0012_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0012_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0012_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0012_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0012_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0012_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0012_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0012_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0012_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IWindowForBindingUI *LPWINDOWFORBINDINGUI
     * }
     */
    public static final AddressLayout LPWINDOWFORBINDINGUI = Windows_h.C_POINTER;

    private static class IID_IWindowForBindingUI$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IWindowForBindingUI").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IWindowForBindingUI
     * }
     */
    public static GroupLayout IID_IWindowForBindingUI$layout() {
        return IID_IWindowForBindingUI$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IWindowForBindingUI
     * }
     */
    public static MemorySegment IID_IWindowForBindingUI() {
        return IID_IWindowForBindingUI$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IWindowForBindingUI
     * }
     */
    public static void IID_IWindowForBindingUI(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IWindowForBindingUI$constants.SEGMENT, 0L, IID_IWindowForBindingUI$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0013_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0013_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0013_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0013_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0013_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0013_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0013_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0013_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0013_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0013_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0013_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0013_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0013_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0013_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0013_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0013_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0013_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0013_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0013_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0013_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0013_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0013_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0013_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0013_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0013_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0013_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0013_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0013_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0013_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0013_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0013_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0013_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef ICodeInstall *LPCODEINSTALL
     * }
     */
    public static final AddressLayout LPCODEINSTALL = Windows_h.C_POINTER;
    private static final int CIP_DISK_FULL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_ICodeInstall_0001.CIP_DISK_FULL = 0
     * }
     */
    public static int CIP_DISK_FULL() {
        return CIP_DISK_FULL;
    }
    private static final int CIP_ACCESS_DENIED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_ICodeInstall_0001.CIP_ACCESS_DENIED = 1
     * }
     */
    public static int CIP_ACCESS_DENIED() {
        return CIP_ACCESS_DENIED;
    }
    private static final int CIP_NEWER_VERSION_EXISTS = (int)2L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_ICodeInstall_0001.CIP_NEWER_VERSION_EXISTS = 2
     * }
     */
    public static int CIP_NEWER_VERSION_EXISTS() {
        return CIP_NEWER_VERSION_EXISTS;
    }
    private static final int CIP_OLDER_VERSION_EXISTS = (int)3L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_ICodeInstall_0001.CIP_OLDER_VERSION_EXISTS = 3
     * }
     */
    public static int CIP_OLDER_VERSION_EXISTS() {
        return CIP_OLDER_VERSION_EXISTS;
    }
    private static final int CIP_NAME_CONFLICT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_ICodeInstall_0001.CIP_NAME_CONFLICT = 4
     * }
     */
    public static int CIP_NAME_CONFLICT() {
        return CIP_NAME_CONFLICT;
    }
    private static final int CIP_TRUST_VERIFICATION_COMPONENT_MISSING = (int)5L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_ICodeInstall_0001.CIP_TRUST_VERIFICATION_COMPONENT_MISSING = 5
     * }
     */
    public static int CIP_TRUST_VERIFICATION_COMPONENT_MISSING() {
        return CIP_TRUST_VERIFICATION_COMPONENT_MISSING;
    }
    private static final int CIP_EXE_SELF_REGISTERATION_TIMEOUT = (int)6L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_ICodeInstall_0001.CIP_EXE_SELF_REGISTERATION_TIMEOUT = 6
     * }
     */
    public static int CIP_EXE_SELF_REGISTERATION_TIMEOUT() {
        return CIP_EXE_SELF_REGISTERATION_TIMEOUT;
    }
    private static final int CIP_UNSAFE_TO_ABORT = (int)7L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_ICodeInstall_0001.CIP_UNSAFE_TO_ABORT = 7
     * }
     */
    public static int CIP_UNSAFE_TO_ABORT() {
        return CIP_UNSAFE_TO_ABORT;
    }
    private static final int CIP_NEED_REBOOT = (int)8L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_ICodeInstall_0001.CIP_NEED_REBOOT = 8
     * }
     */
    public static int CIP_NEED_REBOOT() {
        return CIP_NEED_REBOOT;
    }
    private static final int CIP_NEED_REBOOT_UI_PERMISSION = (int)9L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_ICodeInstall_0001.CIP_NEED_REBOOT_UI_PERMISSION = 9
     * }
     */
    public static int CIP_NEED_REBOOT_UI_PERMISSION() {
        return CIP_NEED_REBOOT_UI_PERMISSION;
    }

    private static class IID_ICodeInstall$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_ICodeInstall").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICodeInstall
     * }
     */
    public static GroupLayout IID_ICodeInstall$layout() {
        return IID_ICodeInstall$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICodeInstall
     * }
     */
    public static MemorySegment IID_ICodeInstall() {
        return IID_ICodeInstall$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICodeInstall
     * }
     */
    public static void IID_ICodeInstall(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ICodeInstall$constants.SEGMENT, 0L, IID_ICodeInstall$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0014_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0014_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0014_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0014_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0014_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0014_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0014_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0014_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0014_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0014_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0014_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0014_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0014_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0014_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0014_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0014_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0014_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0014_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0014_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0014_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0014_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0014_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0014_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0014_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0014_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0014_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0014_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0014_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0014_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0014_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0014_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0014_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    private static final int Uri_PROPERTY_ABSOLUTE_URI = (int)0L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IUri_0001.Uri_PROPERTY_ABSOLUTE_URI = 0
     * }
     */
    public static int Uri_PROPERTY_ABSOLUTE_URI() {
        return Uri_PROPERTY_ABSOLUTE_URI;
    }
    private static final int Uri_PROPERTY_STRING_START = (int)0L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IUri_0001.Uri_PROPERTY_STRING_START = 0
     * }
     */
    public static int Uri_PROPERTY_STRING_START() {
        return Uri_PROPERTY_STRING_START;
    }
    private static final int Uri_PROPERTY_AUTHORITY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IUri_0001.Uri_PROPERTY_AUTHORITY = 1
     * }
     */
    public static int Uri_PROPERTY_AUTHORITY() {
        return Uri_PROPERTY_AUTHORITY;
    }
    private static final int Uri_PROPERTY_DISPLAY_URI = (int)2L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IUri_0001.Uri_PROPERTY_DISPLAY_URI = 2
     * }
     */
    public static int Uri_PROPERTY_DISPLAY_URI() {
        return Uri_PROPERTY_DISPLAY_URI;
    }
    private static final int Uri_PROPERTY_DOMAIN = (int)3L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IUri_0001.Uri_PROPERTY_DOMAIN = 3
     * }
     */
    public static int Uri_PROPERTY_DOMAIN() {
        return Uri_PROPERTY_DOMAIN;
    }
    private static final int Uri_PROPERTY_EXTENSION = (int)4L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IUri_0001.Uri_PROPERTY_EXTENSION = 4
     * }
     */
    public static int Uri_PROPERTY_EXTENSION() {
        return Uri_PROPERTY_EXTENSION;
    }
    private static final int Uri_PROPERTY_FRAGMENT = (int)5L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IUri_0001.Uri_PROPERTY_FRAGMENT = 5
     * }
     */
    public static int Uri_PROPERTY_FRAGMENT() {
        return Uri_PROPERTY_FRAGMENT;
    }
    private static final int Uri_PROPERTY_HOST = (int)6L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IUri_0001.Uri_PROPERTY_HOST = 6
     * }
     */
    public static int Uri_PROPERTY_HOST() {
        return Uri_PROPERTY_HOST;
    }
    private static final int Uri_PROPERTY_PASSWORD = (int)7L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IUri_0001.Uri_PROPERTY_PASSWORD = 7
     * }
     */
    public static int Uri_PROPERTY_PASSWORD() {
        return Uri_PROPERTY_PASSWORD;
    }
    private static final int Uri_PROPERTY_PATH = (int)8L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IUri_0001.Uri_PROPERTY_PATH = 8
     * }
     */
    public static int Uri_PROPERTY_PATH() {
        return Uri_PROPERTY_PATH;
    }
    private static final int Uri_PROPERTY_PATH_AND_QUERY = (int)9L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IUri_0001.Uri_PROPERTY_PATH_AND_QUERY = 9
     * }
     */
    public static int Uri_PROPERTY_PATH_AND_QUERY() {
        return Uri_PROPERTY_PATH_AND_QUERY;
    }
    private static final int Uri_PROPERTY_QUERY = (int)10L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IUri_0001.Uri_PROPERTY_QUERY = 10
     * }
     */
    public static int Uri_PROPERTY_QUERY() {
        return Uri_PROPERTY_QUERY;
    }
    private static final int Uri_PROPERTY_RAW_URI = (int)11L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IUri_0001.Uri_PROPERTY_RAW_URI = 11
     * }
     */
    public static int Uri_PROPERTY_RAW_URI() {
        return Uri_PROPERTY_RAW_URI;
    }
    private static final int Uri_PROPERTY_SCHEME_NAME = (int)12L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IUri_0001.Uri_PROPERTY_SCHEME_NAME = 12
     * }
     */
    public static int Uri_PROPERTY_SCHEME_NAME() {
        return Uri_PROPERTY_SCHEME_NAME;
    }
    private static final int Uri_PROPERTY_USER_INFO = (int)13L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IUri_0001.Uri_PROPERTY_USER_INFO = 13
     * }
     */
    public static int Uri_PROPERTY_USER_INFO() {
        return Uri_PROPERTY_USER_INFO;
    }
    private static final int Uri_PROPERTY_USER_NAME = (int)14L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IUri_0001.Uri_PROPERTY_USER_NAME = 14
     * }
     */
    public static int Uri_PROPERTY_USER_NAME() {
        return Uri_PROPERTY_USER_NAME;
    }
    private static final int Uri_PROPERTY_STRING_LAST = (int)14L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IUri_0001.Uri_PROPERTY_STRING_LAST = 14
     * }
     */
    public static int Uri_PROPERTY_STRING_LAST() {
        return Uri_PROPERTY_STRING_LAST;
    }
    private static final int Uri_PROPERTY_HOST_TYPE = (int)15L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IUri_0001.Uri_PROPERTY_HOST_TYPE = 15
     * }
     */
    public static int Uri_PROPERTY_HOST_TYPE() {
        return Uri_PROPERTY_HOST_TYPE;
    }
    private static final int Uri_PROPERTY_DWORD_START = (int)15L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IUri_0001.Uri_PROPERTY_DWORD_START = 15
     * }
     */
    public static int Uri_PROPERTY_DWORD_START() {
        return Uri_PROPERTY_DWORD_START;
    }
    private static final int Uri_PROPERTY_PORT = (int)16L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IUri_0001.Uri_PROPERTY_PORT = 16
     * }
     */
    public static int Uri_PROPERTY_PORT() {
        return Uri_PROPERTY_PORT;
    }
    private static final int Uri_PROPERTY_SCHEME = (int)17L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IUri_0001.Uri_PROPERTY_SCHEME = 17
     * }
     */
    public static int Uri_PROPERTY_SCHEME() {
        return Uri_PROPERTY_SCHEME;
    }
    private static final int Uri_PROPERTY_ZONE = (int)18L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IUri_0001.Uri_PROPERTY_ZONE = 18
     * }
     */
    public static int Uri_PROPERTY_ZONE() {
        return Uri_PROPERTY_ZONE;
    }
    private static final int Uri_PROPERTY_DWORD_LAST = (int)18L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IUri_0001.Uri_PROPERTY_DWORD_LAST = 18
     * }
     */
    public static int Uri_PROPERTY_DWORD_LAST() {
        return Uri_PROPERTY_DWORD_LAST;
    }
    private static final int Uri_HOST_UNKNOWN = (int)0L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IUri_0002.Uri_HOST_UNKNOWN = 0
     * }
     */
    public static int Uri_HOST_UNKNOWN() {
        return Uri_HOST_UNKNOWN;
    }
    private static final int Uri_HOST_DNS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IUri_0002.Uri_HOST_DNS = 1
     * }
     */
    public static int Uri_HOST_DNS() {
        return Uri_HOST_DNS;
    }
    private static final int Uri_HOST_IPV4 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IUri_0002.Uri_HOST_IPV4 = 2
     * }
     */
    public static int Uri_HOST_IPV4() {
        return Uri_HOST_IPV4;
    }
    private static final int Uri_HOST_IPV6 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IUri_0002.Uri_HOST_IPV6 = 3
     * }
     */
    public static int Uri_HOST_IPV6() {
        return Uri_HOST_IPV6;
    }
    private static final int Uri_HOST_IDN = (int)4L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IUri_0002.Uri_HOST_IDN = 4
     * }
     */
    public static int Uri_HOST_IDN() {
        return Uri_HOST_IDN;
    }

    private static class IID_IUri$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IUri").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IUri
     * }
     */
    public static GroupLayout IID_IUri$layout() {
        return IID_IUri$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IUri
     * }
     */
    public static MemorySegment IID_IUri() {
        return IID_IUri$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IUri
     * }
     */
    public static void IID_IUri(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IUri$constants.SEGMENT, 0L, IID_IUri$constants.LAYOUT.byteSize());
    }

    private static class CreateUri {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_LONG_LONG,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("CreateUri"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateUri(LPCWSTR pwzURI, DWORD dwFlags, DWORD_PTR dwReserved, IUri **ppURI)
     * }
     */
    public static FunctionDescriptor CreateUri$descriptor() {
        return CreateUri.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateUri(LPCWSTR pwzURI, DWORD dwFlags, DWORD_PTR dwReserved, IUri **ppURI)
     * }
     */
    public static MethodHandle CreateUri$handle() {
        return CreateUri.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CreateUri(LPCWSTR pwzURI, DWORD dwFlags, DWORD_PTR dwReserved, IUri **ppURI)
     * }
     */
    public static int CreateUri(MemorySegment pwzURI, int dwFlags, long dwReserved, MemorySegment ppURI) {
        var mh$ = CreateUri.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateUri", pwzURI, dwFlags, dwReserved, ppURI);
            }
            return (int)mh$.invokeExact(pwzURI, dwFlags, dwReserved, ppURI);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateUriWithFragment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_LONG_LONG,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("CreateUriWithFragment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateUriWithFragment(LPCWSTR pwzURI, LPCWSTR pwzFragment, DWORD dwFlags, DWORD_PTR dwReserved, IUri **ppURI)
     * }
     */
    public static FunctionDescriptor CreateUriWithFragment$descriptor() {
        return CreateUriWithFragment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateUriWithFragment(LPCWSTR pwzURI, LPCWSTR pwzFragment, DWORD dwFlags, DWORD_PTR dwReserved, IUri **ppURI)
     * }
     */
    public static MethodHandle CreateUriWithFragment$handle() {
        return CreateUriWithFragment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CreateUriWithFragment(LPCWSTR pwzURI, LPCWSTR pwzFragment, DWORD dwFlags, DWORD_PTR dwReserved, IUri **ppURI)
     * }
     */
    public static int CreateUriWithFragment(MemorySegment pwzURI, MemorySegment pwzFragment, int dwFlags, long dwReserved, MemorySegment ppURI) {
        var mh$ = CreateUriWithFragment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateUriWithFragment", pwzURI, pwzFragment, dwFlags, dwReserved, ppURI);
            }
            return (int)mh$.invokeExact(pwzURI, pwzFragment, dwFlags, dwReserved, ppURI);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateUriFromMultiByteString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_LONG,
            Windows_h.C_LONG,
            Windows_h.C_LONG_LONG,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("CreateUriFromMultiByteString"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateUriFromMultiByteString(LPCSTR pszANSIInputUri, DWORD dwEncodingFlags, DWORD dwCodePage, DWORD dwCreateFlags, DWORD_PTR dwReserved, IUri **ppUri)
     * }
     */
    public static FunctionDescriptor CreateUriFromMultiByteString$descriptor() {
        return CreateUriFromMultiByteString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateUriFromMultiByteString(LPCSTR pszANSIInputUri, DWORD dwEncodingFlags, DWORD dwCodePage, DWORD dwCreateFlags, DWORD_PTR dwReserved, IUri **ppUri)
     * }
     */
    public static MethodHandle CreateUriFromMultiByteString$handle() {
        return CreateUriFromMultiByteString.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CreateUriFromMultiByteString(LPCSTR pszANSIInputUri, DWORD dwEncodingFlags, DWORD dwCodePage, DWORD dwCreateFlags, DWORD_PTR dwReserved, IUri **ppUri)
     * }
     */
    public static int CreateUriFromMultiByteString(MemorySegment pszANSIInputUri, int dwEncodingFlags, int dwCodePage, int dwCreateFlags, long dwReserved, MemorySegment ppUri) {
        var mh$ = CreateUriFromMultiByteString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateUriFromMultiByteString", pszANSIInputUri, dwEncodingFlags, dwCodePage, dwCreateFlags, dwReserved, ppUri);
            }
            return (int)mh$.invokeExact(pszANSIInputUri, dwEncodingFlags, dwCodePage, dwCreateFlags, dwReserved, ppUri);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_urlmon_0000_0015_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0015_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0015_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0015_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0015_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0015_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0015_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0015_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0015_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0015_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0015_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0015_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0015_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0015_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0015_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0015_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0015_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0015_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0015_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0015_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0015_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0015_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0015_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0015_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0015_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0015_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0015_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0015_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0015_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0015_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0015_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0015_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IUriContainer$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IUriContainer").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IUriContainer
     * }
     */
    public static GroupLayout IID_IUriContainer$layout() {
        return IID_IUriContainer$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IUriContainer
     * }
     */
    public static MemorySegment IID_IUriContainer() {
        return IID_IUriContainer$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IUriContainer
     * }
     */
    public static void IID_IUriContainer(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IUriContainer$constants.SEGMENT, 0L, IID_IUriContainer$constants.LAYOUT.byteSize());
    }

    private static class IID_IUriBuilder$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IUriBuilder").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IUriBuilder
     * }
     */
    public static GroupLayout IID_IUriBuilder$layout() {
        return IID_IUriBuilder$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IUriBuilder
     * }
     */
    public static MemorySegment IID_IUriBuilder() {
        return IID_IUriBuilder$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IUriBuilder
     * }
     */
    public static void IID_IUriBuilder(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IUriBuilder$constants.SEGMENT, 0L, IID_IUriBuilder$constants.LAYOUT.byteSize());
    }

    private static class IID_IUriBuilderFactory$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IUriBuilderFactory").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IUriBuilderFactory
     * }
     */
    public static GroupLayout IID_IUriBuilderFactory$layout() {
        return IID_IUriBuilderFactory$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IUriBuilderFactory
     * }
     */
    public static MemorySegment IID_IUriBuilderFactory() {
        return IID_IUriBuilderFactory$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IUriBuilderFactory
     * }
     */
    public static void IID_IUriBuilderFactory(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IUriBuilderFactory$constants.SEGMENT, 0L, IID_IUriBuilderFactory$constants.LAYOUT.byteSize());
    }

    private static class CreateIUriBuilder {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_LONG_LONG,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("CreateIUriBuilder"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateIUriBuilder(IUri *pIUri, DWORD dwFlags, DWORD_PTR dwReserved, IUriBuilder **ppIUriBuilder)
     * }
     */
    public static FunctionDescriptor CreateIUriBuilder$descriptor() {
        return CreateIUriBuilder.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateIUriBuilder(IUri *pIUri, DWORD dwFlags, DWORD_PTR dwReserved, IUriBuilder **ppIUriBuilder)
     * }
     */
    public static MethodHandle CreateIUriBuilder$handle() {
        return CreateIUriBuilder.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CreateIUriBuilder(IUri *pIUri, DWORD dwFlags, DWORD_PTR dwReserved, IUriBuilder **ppIUriBuilder)
     * }
     */
    public static int CreateIUriBuilder(MemorySegment pIUri, int dwFlags, long dwReserved, MemorySegment ppIUriBuilder) {
        var mh$ = CreateIUriBuilder.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateIUriBuilder", pIUri, dwFlags, dwReserved, ppIUriBuilder);
            }
            return (int)mh$.invokeExact(pIUri, dwFlags, dwReserved, ppIUriBuilder);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_urlmon_0000_0018_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0018_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0018_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0018_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0018_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0018_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0018_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0018_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0018_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0018_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0018_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0018_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0018_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0018_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0018_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0018_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0018_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0018_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0018_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0018_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0018_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0018_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0018_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0018_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0018_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0018_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0018_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0018_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0018_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0018_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0018_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0018_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IWinInetInfo *LPWININETINFO
     * }
     */
    public static final AddressLayout LPWININETINFO = Windows_h.C_POINTER;

    private static class IID_IWinInetInfo$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IWinInetInfo").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IWinInetInfo
     * }
     */
    public static GroupLayout IID_IWinInetInfo$layout() {
        return IID_IWinInetInfo$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IWinInetInfo
     * }
     */
    public static MemorySegment IID_IWinInetInfo() {
        return IID_IWinInetInfo$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IWinInetInfo
     * }
     */
    public static void IID_IWinInetInfo(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IWinInetInfo$constants.SEGMENT, 0L, IID_IWinInetInfo$constants.LAYOUT.byteSize());
    }

    private static class IWinInetInfo_RemoteQueryOption_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("IWinInetInfo_RemoteQueryOption_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IWinInetInfo_RemoteQueryOption_Proxy(IWinInetInfo *This, DWORD dwOption, BYTE *pBuffer, DWORD *pcbBuf)
     * }
     */
    public static FunctionDescriptor IWinInetInfo_RemoteQueryOption_Proxy$descriptor() {
        return IWinInetInfo_RemoteQueryOption_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IWinInetInfo_RemoteQueryOption_Proxy(IWinInetInfo *This, DWORD dwOption, BYTE *pBuffer, DWORD *pcbBuf)
     * }
     */
    public static MethodHandle IWinInetInfo_RemoteQueryOption_Proxy$handle() {
        return IWinInetInfo_RemoteQueryOption_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IWinInetInfo_RemoteQueryOption_Proxy(IWinInetInfo *This, DWORD dwOption, BYTE *pBuffer, DWORD *pcbBuf)
     * }
     */
    public static int IWinInetInfo_RemoteQueryOption_Proxy(MemorySegment This, int dwOption, MemorySegment pBuffer, MemorySegment pcbBuf) {
        var mh$ = IWinInetInfo_RemoteQueryOption_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IWinInetInfo_RemoteQueryOption_Proxy", This, dwOption, pBuffer, pcbBuf);
            }
            return (int)mh$.invokeExact(This, dwOption, pBuffer, pcbBuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IWinInetInfo_RemoteQueryOption_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("IWinInetInfo_RemoteQueryOption_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IWinInetInfo_RemoteQueryOption_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IWinInetInfo_RemoteQueryOption_Stub$descriptor() {
        return IWinInetInfo_RemoteQueryOption_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IWinInetInfo_RemoteQueryOption_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IWinInetInfo_RemoteQueryOption_Stub$handle() {
        return IWinInetInfo_RemoteQueryOption_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void IWinInetInfo_RemoteQueryOption_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IWinInetInfo_RemoteQueryOption_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IWinInetInfo_RemoteQueryOption_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IWinInetInfo_RemoteQueryOption_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_urlmon_0000_0019_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0019_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0019_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0019_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0019_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0019_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0019_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0019_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0019_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0019_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0019_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0019_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0019_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0019_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0019_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0019_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0019_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0019_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0019_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0019_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0019_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0019_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0019_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0019_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0019_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0019_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0019_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0019_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0019_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0019_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0019_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0019_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IHttpSecurity *LPHTTPSECURITY
     * }
     */
    public static final AddressLayout LPHTTPSECURITY = Windows_h.C_POINTER;

    private static class IID_IHttpSecurity$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IHttpSecurity").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IHttpSecurity
     * }
     */
    public static GroupLayout IID_IHttpSecurity$layout() {
        return IID_IHttpSecurity$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IHttpSecurity
     * }
     */
    public static MemorySegment IID_IHttpSecurity() {
        return IID_IHttpSecurity$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IHttpSecurity
     * }
     */
    public static void IID_IHttpSecurity(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IHttpSecurity$constants.SEGMENT, 0L, IID_IHttpSecurity$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0020_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0020_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0020_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0020_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0020_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0020_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0020_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0020_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0020_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0020_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0020_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0020_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0020_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0020_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0020_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0020_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0020_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0020_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0020_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0020_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0020_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0020_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0020_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0020_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0020_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0020_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0020_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0020_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0020_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0020_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0020_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0020_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IWinInetHttpInfo *LPWININETHTTPINFO
     * }
     */
    public static final AddressLayout LPWININETHTTPINFO = Windows_h.C_POINTER;

    private static class IID_IWinInetHttpInfo$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IWinInetHttpInfo").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IWinInetHttpInfo
     * }
     */
    public static GroupLayout IID_IWinInetHttpInfo$layout() {
        return IID_IWinInetHttpInfo$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IWinInetHttpInfo
     * }
     */
    public static MemorySegment IID_IWinInetHttpInfo() {
        return IID_IWinInetHttpInfo$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IWinInetHttpInfo
     * }
     */
    public static void IID_IWinInetHttpInfo(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IWinInetHttpInfo$constants.SEGMENT, 0L, IID_IWinInetHttpInfo$constants.LAYOUT.byteSize());
    }

    private static class IWinInetHttpInfo_RemoteQueryInfo_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("IWinInetHttpInfo_RemoteQueryInfo_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IWinInetHttpInfo_RemoteQueryInfo_Proxy(IWinInetHttpInfo *This, DWORD dwOption, BYTE *pBuffer, DWORD *pcbBuf, DWORD *pdwFlags, DWORD *pdwReserved)
     * }
     */
    public static FunctionDescriptor IWinInetHttpInfo_RemoteQueryInfo_Proxy$descriptor() {
        return IWinInetHttpInfo_RemoteQueryInfo_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IWinInetHttpInfo_RemoteQueryInfo_Proxy(IWinInetHttpInfo *This, DWORD dwOption, BYTE *pBuffer, DWORD *pcbBuf, DWORD *pdwFlags, DWORD *pdwReserved)
     * }
     */
    public static MethodHandle IWinInetHttpInfo_RemoteQueryInfo_Proxy$handle() {
        return IWinInetHttpInfo_RemoteQueryInfo_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IWinInetHttpInfo_RemoteQueryInfo_Proxy(IWinInetHttpInfo *This, DWORD dwOption, BYTE *pBuffer, DWORD *pcbBuf, DWORD *pdwFlags, DWORD *pdwReserved)
     * }
     */
    public static int IWinInetHttpInfo_RemoteQueryInfo_Proxy(MemorySegment This, int dwOption, MemorySegment pBuffer, MemorySegment pcbBuf, MemorySegment pdwFlags, MemorySegment pdwReserved) {
        var mh$ = IWinInetHttpInfo_RemoteQueryInfo_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IWinInetHttpInfo_RemoteQueryInfo_Proxy", This, dwOption, pBuffer, pcbBuf, pdwFlags, pdwReserved);
            }
            return (int)mh$.invokeExact(This, dwOption, pBuffer, pcbBuf, pdwFlags, pdwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IWinInetHttpInfo_RemoteQueryInfo_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("IWinInetHttpInfo_RemoteQueryInfo_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IWinInetHttpInfo_RemoteQueryInfo_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IWinInetHttpInfo_RemoteQueryInfo_Stub$descriptor() {
        return IWinInetHttpInfo_RemoteQueryInfo_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IWinInetHttpInfo_RemoteQueryInfo_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IWinInetHttpInfo_RemoteQueryInfo_Stub$handle() {
        return IWinInetHttpInfo_RemoteQueryInfo_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void IWinInetHttpInfo_RemoteQueryInfo_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IWinInetHttpInfo_RemoteQueryInfo_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IWinInetHttpInfo_RemoteQueryInfo_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IWinInetHttpInfo_RemoteQueryInfo_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_urlmon_0000_0021_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0021_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0021_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0021_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0021_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0021_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0021_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0021_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0021_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0021_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0021_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0021_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0021_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0021_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0021_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0021_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0021_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0021_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0021_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0021_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0021_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0021_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0021_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0021_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0021_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0021_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0021_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0021_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0021_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0021_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0021_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0021_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IWinInetHttpTimeouts$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IWinInetHttpTimeouts").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IWinInetHttpTimeouts
     * }
     */
    public static GroupLayout IID_IWinInetHttpTimeouts$layout() {
        return IID_IWinInetHttpTimeouts$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IWinInetHttpTimeouts
     * }
     */
    public static MemorySegment IID_IWinInetHttpTimeouts() {
        return IID_IWinInetHttpTimeouts$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IWinInetHttpTimeouts
     * }
     */
    public static void IID_IWinInetHttpTimeouts(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IWinInetHttpTimeouts$constants.SEGMENT, 0L, IID_IWinInetHttpTimeouts$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0022_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0022_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0022_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0022_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0022_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0022_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0022_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0022_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0022_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0022_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0022_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0022_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0022_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0022_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0022_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0022_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0022_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0022_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0022_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0022_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0022_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0022_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0022_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0022_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0022_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0022_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0022_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0022_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0022_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0022_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0022_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0022_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IWinInetCacheHints *LPWININETCACHEHINTS
     * }
     */
    public static final AddressLayout LPWININETCACHEHINTS = Windows_h.C_POINTER;

    private static class IID_IWinInetCacheHints$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IWinInetCacheHints").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IWinInetCacheHints
     * }
     */
    public static GroupLayout IID_IWinInetCacheHints$layout() {
        return IID_IWinInetCacheHints$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IWinInetCacheHints
     * }
     */
    public static MemorySegment IID_IWinInetCacheHints() {
        return IID_IWinInetCacheHints$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IWinInetCacheHints
     * }
     */
    public static void IID_IWinInetCacheHints(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IWinInetCacheHints$constants.SEGMENT, 0L, IID_IWinInetCacheHints$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0023_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0023_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0023_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0023_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0023_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0023_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0023_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0023_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0023_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0023_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0023_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0023_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0023_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0023_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0023_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0023_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0023_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0023_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0023_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0023_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0023_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0023_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0023_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0023_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0023_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0023_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0023_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0023_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0023_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0023_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0023_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0023_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IWinInetCacheHints2 *LPWININETCACHEHINTS2
     * }
     */
    public static final AddressLayout LPWININETCACHEHINTS2 = Windows_h.C_POINTER;

    private static class IID_IWinInetCacheHints2$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IWinInetCacheHints2").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IWinInetCacheHints2
     * }
     */
    public static GroupLayout IID_IWinInetCacheHints2$layout() {
        return IID_IWinInetCacheHints2$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IWinInetCacheHints2
     * }
     */
    public static MemorySegment IID_IWinInetCacheHints2() {
        return IID_IWinInetCacheHints2$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IWinInetCacheHints2
     * }
     */
    public static void IID_IWinInetCacheHints2(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IWinInetCacheHints2$constants.SEGMENT, 0L, IID_IWinInetCacheHints2$constants.LAYOUT.byteSize());
    }

    private static class SID_BindHost$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("SID_BindHost").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID SID_BindHost
     * }
     */
    public static GroupLayout SID_BindHost$layout() {
        return SID_BindHost$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID SID_BindHost
     * }
     */
    public static MemorySegment SID_BindHost() {
        return SID_BindHost$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID SID_BindHost
     * }
     */
    public static void SID_BindHost(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, SID_BindHost$constants.SEGMENT, 0L, SID_BindHost$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0024_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0024_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0024_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0024_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0024_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0024_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0024_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0024_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0024_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0024_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0024_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0024_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0024_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0024_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0024_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0024_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0024_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0024_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0024_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0024_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0024_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0024_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0024_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0024_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0024_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0024_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0024_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0024_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0024_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0024_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0024_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0024_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IBindHost *LPBINDHOST
     * }
     */
    public static final AddressLayout LPBINDHOST = Windows_h.C_POINTER;

    private static class IID_IBindHost$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IBindHost").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBindHost
     * }
     */
    public static GroupLayout IID_IBindHost$layout() {
        return IID_IBindHost$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBindHost
     * }
     */
    public static MemorySegment IID_IBindHost() {
        return IID_IBindHost$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBindHost
     * }
     */
    public static void IID_IBindHost(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IBindHost$constants.SEGMENT, 0L, IID_IBindHost$constants.LAYOUT.byteSize());
    }

    private static class IBindHost_RemoteMonikerBindToStorage_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("IBindHost_RemoteMonikerBindToStorage_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBindHost_RemoteMonikerBindToStorage_Proxy(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static FunctionDescriptor IBindHost_RemoteMonikerBindToStorage_Proxy$descriptor() {
        return IBindHost_RemoteMonikerBindToStorage_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBindHost_RemoteMonikerBindToStorage_Proxy(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static MethodHandle IBindHost_RemoteMonikerBindToStorage_Proxy$handle() {
        return IBindHost_RemoteMonikerBindToStorage_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IBindHost_RemoteMonikerBindToStorage_Proxy(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static int IBindHost_RemoteMonikerBindToStorage_Proxy(MemorySegment This, MemorySegment pMk, MemorySegment pBC, MemorySegment pBSC, MemorySegment riid, MemorySegment ppvObj) {
        var mh$ = IBindHost_RemoteMonikerBindToStorage_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindHost_RemoteMonikerBindToStorage_Proxy", This, pMk, pBC, pBSC, riid, ppvObj);
            }
            return (int)mh$.invokeExact(This, pMk, pBC, pBSC, riid, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindHost_RemoteMonikerBindToStorage_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("IBindHost_RemoteMonikerBindToStorage_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IBindHost_RemoteMonikerBindToStorage_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IBindHost_RemoteMonikerBindToStorage_Stub$descriptor() {
        return IBindHost_RemoteMonikerBindToStorage_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IBindHost_RemoteMonikerBindToStorage_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IBindHost_RemoteMonikerBindToStorage_Stub$handle() {
        return IBindHost_RemoteMonikerBindToStorage_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void IBindHost_RemoteMonikerBindToStorage_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IBindHost_RemoteMonikerBindToStorage_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IBindHost_RemoteMonikerBindToStorage_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindHost_RemoteMonikerBindToStorage_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindHost_RemoteMonikerBindToObject_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("IBindHost_RemoteMonikerBindToObject_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBindHost_RemoteMonikerBindToObject_Proxy(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static FunctionDescriptor IBindHost_RemoteMonikerBindToObject_Proxy$descriptor() {
        return IBindHost_RemoteMonikerBindToObject_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBindHost_RemoteMonikerBindToObject_Proxy(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static MethodHandle IBindHost_RemoteMonikerBindToObject_Proxy$handle() {
        return IBindHost_RemoteMonikerBindToObject_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IBindHost_RemoteMonikerBindToObject_Proxy(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static int IBindHost_RemoteMonikerBindToObject_Proxy(MemorySegment This, MemorySegment pMk, MemorySegment pBC, MemorySegment pBSC, MemorySegment riid, MemorySegment ppvObj) {
        var mh$ = IBindHost_RemoteMonikerBindToObject_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindHost_RemoteMonikerBindToObject_Proxy", This, pMk, pBC, pBSC, riid, ppvObj);
            }
            return (int)mh$.invokeExact(This, pMk, pBC, pBSC, riid, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindHost_RemoteMonikerBindToObject_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("IBindHost_RemoteMonikerBindToObject_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IBindHost_RemoteMonikerBindToObject_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IBindHost_RemoteMonikerBindToObject_Stub$descriptor() {
        return IBindHost_RemoteMonikerBindToObject_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IBindHost_RemoteMonikerBindToObject_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IBindHost_RemoteMonikerBindToObject_Stub$handle() {
        return IBindHost_RemoteMonikerBindToObject_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void IBindHost_RemoteMonikerBindToObject_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IBindHost_RemoteMonikerBindToObject_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IBindHost_RemoteMonikerBindToObject_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindHost_RemoteMonikerBindToObject_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HlinkSimpleNavigateToString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("HlinkSimpleNavigateToString"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT HlinkSimpleNavigateToString(LPCWSTR szTarget, LPCWSTR szLocation, LPCWSTR szTargetFrameName, IUnknown *pUnk, IBindCtx *pbc, IBindStatusCallback *, DWORD grfHLNF, DWORD dwReserved)
     * }
     */
    public static FunctionDescriptor HlinkSimpleNavigateToString$descriptor() {
        return HlinkSimpleNavigateToString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT HlinkSimpleNavigateToString(LPCWSTR szTarget, LPCWSTR szLocation, LPCWSTR szTargetFrameName, IUnknown *pUnk, IBindCtx *pbc, IBindStatusCallback *, DWORD grfHLNF, DWORD dwReserved)
     * }
     */
    public static MethodHandle HlinkSimpleNavigateToString$handle() {
        return HlinkSimpleNavigateToString.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT HlinkSimpleNavigateToString(LPCWSTR szTarget, LPCWSTR szLocation, LPCWSTR szTargetFrameName, IUnknown *pUnk, IBindCtx *pbc, IBindStatusCallback *, DWORD grfHLNF, DWORD dwReserved)
     * }
     */
    public static int HlinkSimpleNavigateToString(MemorySegment szTarget, MemorySegment szLocation, MemorySegment szTargetFrameName, MemorySegment pUnk, MemorySegment pbc, MemorySegment x5, int grfHLNF, int dwReserved) {
        var mh$ = HlinkSimpleNavigateToString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HlinkSimpleNavigateToString", szTarget, szLocation, szTargetFrameName, pUnk, pbc, x5, grfHLNF, dwReserved);
            }
            return (int)mh$.invokeExact(szTarget, szLocation, szTargetFrameName, pUnk, pbc, x5, grfHLNF, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HlinkSimpleNavigateToMoniker {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("HlinkSimpleNavigateToMoniker"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT HlinkSimpleNavigateToMoniker(IMoniker *pmkTarget, LPCWSTR szLocation, LPCWSTR szTargetFrameName, IUnknown *pUnk, IBindCtx *pbc, IBindStatusCallback *, DWORD grfHLNF, DWORD dwReserved)
     * }
     */
    public static FunctionDescriptor HlinkSimpleNavigateToMoniker$descriptor() {
        return HlinkSimpleNavigateToMoniker.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT HlinkSimpleNavigateToMoniker(IMoniker *pmkTarget, LPCWSTR szLocation, LPCWSTR szTargetFrameName, IUnknown *pUnk, IBindCtx *pbc, IBindStatusCallback *, DWORD grfHLNF, DWORD dwReserved)
     * }
     */
    public static MethodHandle HlinkSimpleNavigateToMoniker$handle() {
        return HlinkSimpleNavigateToMoniker.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT HlinkSimpleNavigateToMoniker(IMoniker *pmkTarget, LPCWSTR szLocation, LPCWSTR szTargetFrameName, IUnknown *pUnk, IBindCtx *pbc, IBindStatusCallback *, DWORD grfHLNF, DWORD dwReserved)
     * }
     */
    public static int HlinkSimpleNavigateToMoniker(MemorySegment pmkTarget, MemorySegment szLocation, MemorySegment szTargetFrameName, MemorySegment pUnk, MemorySegment pbc, MemorySegment x5, int grfHLNF, int dwReserved) {
        var mh$ = HlinkSimpleNavigateToMoniker.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HlinkSimpleNavigateToMoniker", pmkTarget, szLocation, szTargetFrameName, pUnk, pbc, x5, grfHLNF, dwReserved);
            }
            return (int)mh$.invokeExact(pmkTarget, szLocation, szTargetFrameName, pUnk, pbc, x5, grfHLNF, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class URLOpenStreamA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("URLOpenStreamA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT URLOpenStreamA(LPUNKNOWN, LPCSTR, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static FunctionDescriptor URLOpenStreamA$descriptor() {
        return URLOpenStreamA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT URLOpenStreamA(LPUNKNOWN, LPCSTR, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static MethodHandle URLOpenStreamA$handle() {
        return URLOpenStreamA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT URLOpenStreamA(LPUNKNOWN, LPCSTR, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static int URLOpenStreamA(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3) {
        var mh$ = URLOpenStreamA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("URLOpenStreamA", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class URLOpenStreamW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("URLOpenStreamW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT URLOpenStreamW(LPUNKNOWN, LPCWSTR, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static FunctionDescriptor URLOpenStreamW$descriptor() {
        return URLOpenStreamW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT URLOpenStreamW(LPUNKNOWN, LPCWSTR, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static MethodHandle URLOpenStreamW$handle() {
        return URLOpenStreamW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT URLOpenStreamW(LPUNKNOWN, LPCWSTR, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static int URLOpenStreamW(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3) {
        var mh$ = URLOpenStreamW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("URLOpenStreamW", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class URLOpenPullStreamA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("URLOpenPullStreamA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT URLOpenPullStreamA(LPUNKNOWN, LPCSTR, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static FunctionDescriptor URLOpenPullStreamA$descriptor() {
        return URLOpenPullStreamA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT URLOpenPullStreamA(LPUNKNOWN, LPCSTR, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static MethodHandle URLOpenPullStreamA$handle() {
        return URLOpenPullStreamA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT URLOpenPullStreamA(LPUNKNOWN, LPCSTR, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static int URLOpenPullStreamA(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3) {
        var mh$ = URLOpenPullStreamA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("URLOpenPullStreamA", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class URLOpenPullStreamW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("URLOpenPullStreamW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT URLOpenPullStreamW(LPUNKNOWN, LPCWSTR, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static FunctionDescriptor URLOpenPullStreamW$descriptor() {
        return URLOpenPullStreamW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT URLOpenPullStreamW(LPUNKNOWN, LPCWSTR, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static MethodHandle URLOpenPullStreamW$handle() {
        return URLOpenPullStreamW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT URLOpenPullStreamW(LPUNKNOWN, LPCWSTR, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static int URLOpenPullStreamW(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3) {
        var mh$ = URLOpenPullStreamW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("URLOpenPullStreamW", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class URLDownloadToFileA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("URLDownloadToFileA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT URLDownloadToFileA(LPUNKNOWN, LPCSTR, LPCSTR, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static FunctionDescriptor URLDownloadToFileA$descriptor() {
        return URLDownloadToFileA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT URLDownloadToFileA(LPUNKNOWN, LPCSTR, LPCSTR, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static MethodHandle URLDownloadToFileA$handle() {
        return URLDownloadToFileA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT URLDownloadToFileA(LPUNKNOWN, LPCSTR, LPCSTR, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static int URLDownloadToFileA(MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, MemorySegment x4) {
        var mh$ = URLDownloadToFileA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("URLDownloadToFileA", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class URLDownloadToFileW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("URLDownloadToFileW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT URLDownloadToFileW(LPUNKNOWN, LPCWSTR, LPCWSTR, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static FunctionDescriptor URLDownloadToFileW$descriptor() {
        return URLDownloadToFileW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT URLDownloadToFileW(LPUNKNOWN, LPCWSTR, LPCWSTR, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static MethodHandle URLDownloadToFileW$handle() {
        return URLDownloadToFileW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT URLDownloadToFileW(LPUNKNOWN, LPCWSTR, LPCWSTR, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static int URLDownloadToFileW(MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, MemorySegment x4) {
        var mh$ = URLDownloadToFileW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("URLDownloadToFileW", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class URLDownloadToCacheFileA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_LONG,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("URLDownloadToCacheFileA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT URLDownloadToCacheFileA(LPUNKNOWN, LPCSTR, LPSTR, DWORD cchFileName, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static FunctionDescriptor URLDownloadToCacheFileA$descriptor() {
        return URLDownloadToCacheFileA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT URLDownloadToCacheFileA(LPUNKNOWN, LPCSTR, LPSTR, DWORD cchFileName, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static MethodHandle URLDownloadToCacheFileA$handle() {
        return URLDownloadToCacheFileA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT URLDownloadToCacheFileA(LPUNKNOWN, LPCSTR, LPSTR, DWORD cchFileName, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static int URLDownloadToCacheFileA(MemorySegment x0, MemorySegment x1, MemorySegment x2, int cchFileName, int x4, MemorySegment x5) {
        var mh$ = URLDownloadToCacheFileA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("URLDownloadToCacheFileA", x0, x1, x2, cchFileName, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, cchFileName, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class URLDownloadToCacheFileW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_LONG,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("URLDownloadToCacheFileW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT URLDownloadToCacheFileW(LPUNKNOWN, LPCWSTR, LPWSTR, DWORD cchFileName, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static FunctionDescriptor URLDownloadToCacheFileW$descriptor() {
        return URLDownloadToCacheFileW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT URLDownloadToCacheFileW(LPUNKNOWN, LPCWSTR, LPWSTR, DWORD cchFileName, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static MethodHandle URLDownloadToCacheFileW$handle() {
        return URLDownloadToCacheFileW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT URLDownloadToCacheFileW(LPUNKNOWN, LPCWSTR, LPWSTR, DWORD cchFileName, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static int URLDownloadToCacheFileW(MemorySegment x0, MemorySegment x1, MemorySegment x2, int cchFileName, int x4, MemorySegment x5) {
        var mh$ = URLDownloadToCacheFileW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("URLDownloadToCacheFileW", x0, x1, x2, cchFileName, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, cchFileName, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class URLOpenBlockingStreamA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("URLOpenBlockingStreamA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT URLOpenBlockingStreamA(LPUNKNOWN, LPCSTR, LPSTREAM *, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static FunctionDescriptor URLOpenBlockingStreamA$descriptor() {
        return URLOpenBlockingStreamA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT URLOpenBlockingStreamA(LPUNKNOWN, LPCSTR, LPSTREAM *, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static MethodHandle URLOpenBlockingStreamA$handle() {
        return URLOpenBlockingStreamA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT URLOpenBlockingStreamA(LPUNKNOWN, LPCSTR, LPSTREAM *, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static int URLOpenBlockingStreamA(MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, MemorySegment x4) {
        var mh$ = URLOpenBlockingStreamA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("URLOpenBlockingStreamA", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class URLOpenBlockingStreamW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("URLOpenBlockingStreamW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT URLOpenBlockingStreamW(LPUNKNOWN, LPCWSTR, LPSTREAM *, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static FunctionDescriptor URLOpenBlockingStreamW$descriptor() {
        return URLOpenBlockingStreamW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT URLOpenBlockingStreamW(LPUNKNOWN, LPCWSTR, LPSTREAM *, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static MethodHandle URLOpenBlockingStreamW$handle() {
        return URLOpenBlockingStreamW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT URLOpenBlockingStreamW(LPUNKNOWN, LPCWSTR, LPSTREAM *, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static int URLOpenBlockingStreamW(MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, MemorySegment x4) {
        var mh$ = URLOpenBlockingStreamW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("URLOpenBlockingStreamW", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HlinkGoBack {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("HlinkGoBack"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT HlinkGoBack(IUnknown *pUnk)
     * }
     */
    public static FunctionDescriptor HlinkGoBack$descriptor() {
        return HlinkGoBack.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT HlinkGoBack(IUnknown *pUnk)
     * }
     */
    public static MethodHandle HlinkGoBack$handle() {
        return HlinkGoBack.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT HlinkGoBack(IUnknown *pUnk)
     * }
     */
    public static int HlinkGoBack(MemorySegment pUnk) {
        var mh$ = HlinkGoBack.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HlinkGoBack", pUnk);
            }
            return (int)mh$.invokeExact(pUnk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HlinkGoForward {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("HlinkGoForward"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT HlinkGoForward(IUnknown *pUnk)
     * }
     */
    public static FunctionDescriptor HlinkGoForward$descriptor() {
        return HlinkGoForward.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT HlinkGoForward(IUnknown *pUnk)
     * }
     */
    public static MethodHandle HlinkGoForward$handle() {
        return HlinkGoForward.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT HlinkGoForward(IUnknown *pUnk)
     * }
     */
    public static int HlinkGoForward(MemorySegment pUnk) {
        var mh$ = HlinkGoForward.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HlinkGoForward", pUnk);
            }
            return (int)mh$.invokeExact(pUnk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HlinkNavigateString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("HlinkNavigateString"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT HlinkNavigateString(IUnknown *pUnk, LPCWSTR szTarget)
     * }
     */
    public static FunctionDescriptor HlinkNavigateString$descriptor() {
        return HlinkNavigateString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT HlinkNavigateString(IUnknown *pUnk, LPCWSTR szTarget)
     * }
     */
    public static MethodHandle HlinkNavigateString$handle() {
        return HlinkNavigateString.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT HlinkNavigateString(IUnknown *pUnk, LPCWSTR szTarget)
     * }
     */
    public static int HlinkNavigateString(MemorySegment pUnk, MemorySegment szTarget) {
        var mh$ = HlinkNavigateString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HlinkNavigateString", pUnk, szTarget);
            }
            return (int)mh$.invokeExact(pUnk, szTarget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HlinkNavigateMoniker {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("HlinkNavigateMoniker"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT HlinkNavigateMoniker(IUnknown *pUnk, IMoniker *pmkTarget)
     * }
     */
    public static FunctionDescriptor HlinkNavigateMoniker$descriptor() {
        return HlinkNavigateMoniker.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT HlinkNavigateMoniker(IUnknown *pUnk, IMoniker *pmkTarget)
     * }
     */
    public static MethodHandle HlinkNavigateMoniker$handle() {
        return HlinkNavigateMoniker.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT HlinkNavigateMoniker(IUnknown *pUnk, IMoniker *pmkTarget)
     * }
     */
    public static int HlinkNavigateMoniker(MemorySegment pUnk, MemorySegment pmkTarget) {
        var mh$ = HlinkNavigateMoniker.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HlinkNavigateMoniker", pUnk, pmkTarget);
            }
            return (int)mh$.invokeExact(pUnk, pmkTarget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_urlmon_0000_0025_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0025_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0025_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0025_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0025_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0025_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0025_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0025_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0025_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0025_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0025_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0025_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0025_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0025_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0025_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0025_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0025_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0025_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0025_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0025_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0025_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0025_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0025_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0025_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0025_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0025_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0025_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0025_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0025_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0025_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0025_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0025_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IInternet *LPIINTERNET
     * }
     */
    public static final AddressLayout LPIINTERNET = Windows_h.C_POINTER;

    private static class IID_IInternet$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IInternet").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternet
     * }
     */
    public static GroupLayout IID_IInternet$layout() {
        return IID_IInternet$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternet
     * }
     */
    public static MemorySegment IID_IInternet() {
        return IID_IInternet$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternet
     * }
     */
    public static void IID_IInternet(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternet$constants.SEGMENT, 0L, IID_IInternet$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0026_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0026_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0026_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0026_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0026_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0026_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0026_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0026_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0026_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0026_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0026_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0026_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0026_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0026_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0026_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0026_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0026_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0026_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0026_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0026_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0026_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0026_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0026_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0026_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0026_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0026_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0026_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0026_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0026_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0026_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0026_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0026_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IInternetBindInfo *LPIINTERNETBINDINFO
     * }
     */
    public static final AddressLayout LPIINTERNETBINDINFO = Windows_h.C_POINTER;
    private static final int BINDSTRING_HEADERS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTRING.BINDSTRING_HEADERS = 1
     * }
     */
    public static int BINDSTRING_HEADERS() {
        return BINDSTRING_HEADERS;
    }
    private static final int BINDSTRING_ACCEPT_MIMES = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTRING.BINDSTRING_ACCEPT_MIMES = 2
     * }
     */
    public static int BINDSTRING_ACCEPT_MIMES() {
        return BINDSTRING_ACCEPT_MIMES;
    }
    private static final int BINDSTRING_EXTRA_URL = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTRING.BINDSTRING_EXTRA_URL = 3
     * }
     */
    public static int BINDSTRING_EXTRA_URL() {
        return BINDSTRING_EXTRA_URL;
    }
    private static final int BINDSTRING_LANGUAGE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTRING.BINDSTRING_LANGUAGE = 4
     * }
     */
    public static int BINDSTRING_LANGUAGE() {
        return BINDSTRING_LANGUAGE;
    }
    private static final int BINDSTRING_USERNAME = (int)5L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTRING.BINDSTRING_USERNAME = 5
     * }
     */
    public static int BINDSTRING_USERNAME() {
        return BINDSTRING_USERNAME;
    }
    private static final int BINDSTRING_PASSWORD = (int)6L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTRING.BINDSTRING_PASSWORD = 6
     * }
     */
    public static int BINDSTRING_PASSWORD() {
        return BINDSTRING_PASSWORD;
    }
    private static final int BINDSTRING_UA_PIXELS = (int)7L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTRING.BINDSTRING_UA_PIXELS = 7
     * }
     */
    public static int BINDSTRING_UA_PIXELS() {
        return BINDSTRING_UA_PIXELS;
    }
    private static final int BINDSTRING_UA_COLOR = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTRING.BINDSTRING_UA_COLOR = 8
     * }
     */
    public static int BINDSTRING_UA_COLOR() {
        return BINDSTRING_UA_COLOR;
    }
    private static final int BINDSTRING_OS = (int)9L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTRING.BINDSTRING_OS = 9
     * }
     */
    public static int BINDSTRING_OS() {
        return BINDSTRING_OS;
    }
    private static final int BINDSTRING_USER_AGENT = (int)10L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTRING.BINDSTRING_USER_AGENT = 10
     * }
     */
    public static int BINDSTRING_USER_AGENT() {
        return BINDSTRING_USER_AGENT;
    }
    private static final int BINDSTRING_ACCEPT_ENCODINGS = (int)11L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTRING.BINDSTRING_ACCEPT_ENCODINGS = 11
     * }
     */
    public static int BINDSTRING_ACCEPT_ENCODINGS() {
        return BINDSTRING_ACCEPT_ENCODINGS;
    }
    private static final int BINDSTRING_POST_COOKIE = (int)12L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTRING.BINDSTRING_POST_COOKIE = 12
     * }
     */
    public static int BINDSTRING_POST_COOKIE() {
        return BINDSTRING_POST_COOKIE;
    }
    private static final int BINDSTRING_POST_DATA_MIME = (int)13L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTRING.BINDSTRING_POST_DATA_MIME = 13
     * }
     */
    public static int BINDSTRING_POST_DATA_MIME() {
        return BINDSTRING_POST_DATA_MIME;
    }
    private static final int BINDSTRING_URL = (int)14L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTRING.BINDSTRING_URL = 14
     * }
     */
    public static int BINDSTRING_URL() {
        return BINDSTRING_URL;
    }
    private static final int BINDSTRING_IID = (int)15L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTRING.BINDSTRING_IID = 15
     * }
     */
    public static int BINDSTRING_IID() {
        return BINDSTRING_IID;
    }
    private static final int BINDSTRING_FLAG_BIND_TO_OBJECT = (int)16L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTRING.BINDSTRING_FLAG_BIND_TO_OBJECT = 16
     * }
     */
    public static int BINDSTRING_FLAG_BIND_TO_OBJECT() {
        return BINDSTRING_FLAG_BIND_TO_OBJECT;
    }
    private static final int BINDSTRING_PTR_BIND_CONTEXT = (int)17L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTRING.BINDSTRING_PTR_BIND_CONTEXT = 17
     * }
     */
    public static int BINDSTRING_PTR_BIND_CONTEXT() {
        return BINDSTRING_PTR_BIND_CONTEXT;
    }
    private static final int BINDSTRING_XDR_ORIGIN = (int)18L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTRING.BINDSTRING_XDR_ORIGIN = 18
     * }
     */
    public static int BINDSTRING_XDR_ORIGIN() {
        return BINDSTRING_XDR_ORIGIN;
    }
    private static final int BINDSTRING_DOWNLOADPATH = (int)19L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTRING.BINDSTRING_DOWNLOADPATH = 19
     * }
     */
    public static int BINDSTRING_DOWNLOADPATH() {
        return BINDSTRING_DOWNLOADPATH;
    }
    private static final int BINDSTRING_ROOTDOC_URL = (int)20L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTRING.BINDSTRING_ROOTDOC_URL = 20
     * }
     */
    public static int BINDSTRING_ROOTDOC_URL() {
        return BINDSTRING_ROOTDOC_URL;
    }
    private static final int BINDSTRING_INITIAL_FILENAME = (int)21L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTRING.BINDSTRING_INITIAL_FILENAME = 21
     * }
     */
    public static int BINDSTRING_INITIAL_FILENAME() {
        return BINDSTRING_INITIAL_FILENAME;
    }
    private static final int BINDSTRING_PROXY_USERNAME = (int)22L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTRING.BINDSTRING_PROXY_USERNAME = 22
     * }
     */
    public static int BINDSTRING_PROXY_USERNAME() {
        return BINDSTRING_PROXY_USERNAME;
    }
    private static final int BINDSTRING_PROXY_PASSWORD = (int)23L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTRING.BINDSTRING_PROXY_PASSWORD = 23
     * }
     */
    public static int BINDSTRING_PROXY_PASSWORD() {
        return BINDSTRING_PROXY_PASSWORD;
    }
    private static final int BINDSTRING_ENTERPRISE_ID = (int)24L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTRING.BINDSTRING_ENTERPRISE_ID = 24
     * }
     */
    public static int BINDSTRING_ENTERPRISE_ID() {
        return BINDSTRING_ENTERPRISE_ID;
    }
    private static final int BINDSTRING_DOC_URL = (int)25L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTRING.BINDSTRING_DOC_URL = 25
     * }
     */
    public static int BINDSTRING_DOC_URL() {
        return BINDSTRING_DOC_URL;
    }
    private static final int BINDSTRING_SAMESITE_COOKIE_LEVEL = (int)26L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTRING.BINDSTRING_SAMESITE_COOKIE_LEVEL = 26
     * }
     */
    public static int BINDSTRING_SAMESITE_COOKIE_LEVEL() {
        return BINDSTRING_SAMESITE_COOKIE_LEVEL;
    }

    private static class IID_IInternetBindInfo$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IInternetBindInfo").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetBindInfo
     * }
     */
    public static GroupLayout IID_IInternetBindInfo$layout() {
        return IID_IInternetBindInfo$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetBindInfo
     * }
     */
    public static MemorySegment IID_IInternetBindInfo() {
        return IID_IInternetBindInfo$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetBindInfo
     * }
     */
    public static void IID_IInternetBindInfo(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternetBindInfo$constants.SEGMENT, 0L, IID_IInternetBindInfo$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0027_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0027_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0027_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0027_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0027_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0027_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0027_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0027_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0027_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0027_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0027_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0027_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0027_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0027_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0027_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0027_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0027_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0027_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0027_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0027_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0027_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0027_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0027_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0027_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0027_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0027_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0027_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0027_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0027_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0027_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0027_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0027_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IInternetBindInfoEx *LPIINTERNETBINDINFOEX
     * }
     */
    public static final AddressLayout LPIINTERNETBINDINFOEX = Windows_h.C_POINTER;

    private static class IID_IInternetBindInfoEx$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IInternetBindInfoEx").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetBindInfoEx
     * }
     */
    public static GroupLayout IID_IInternetBindInfoEx$layout() {
        return IID_IInternetBindInfoEx$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetBindInfoEx
     * }
     */
    public static MemorySegment IID_IInternetBindInfoEx() {
        return IID_IInternetBindInfoEx$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetBindInfoEx
     * }
     */
    public static void IID_IInternetBindInfoEx(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternetBindInfoEx$constants.SEGMENT, 0L, IID_IInternetBindInfoEx$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IInternetProtocolRoot *LPIINTERNETPROTOCOLROOT
     * }
     */
    public static final AddressLayout LPIINTERNETPROTOCOLROOT = Windows_h.C_POINTER;
    private static final int PI_PARSE_URL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _tagPI_FLAGS.PI_PARSE_URL = 1
     * }
     */
    public static int PI_PARSE_URL() {
        return PI_PARSE_URL;
    }
    private static final int PI_FILTER_MODE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _tagPI_FLAGS.PI_FILTER_MODE = 2
     * }
     */
    public static int PI_FILTER_MODE() {
        return PI_FILTER_MODE;
    }
    private static final int PI_FORCE_ASYNC = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _tagPI_FLAGS.PI_FORCE_ASYNC = 4
     * }
     */
    public static int PI_FORCE_ASYNC() {
        return PI_FORCE_ASYNC;
    }
    private static final int PI_USE_WORKERTHREAD = (int)8L;
    /**
     * {@snippet lang=c :
     * enum _tagPI_FLAGS.PI_USE_WORKERTHREAD = 8
     * }
     */
    public static int PI_USE_WORKERTHREAD() {
        return PI_USE_WORKERTHREAD;
    }
    private static final int PI_MIMEVERIFICATION = (int)16L;
    /**
     * {@snippet lang=c :
     * enum _tagPI_FLAGS.PI_MIMEVERIFICATION = 16
     * }
     */
    public static int PI_MIMEVERIFICATION() {
        return PI_MIMEVERIFICATION;
    }
    private static final int PI_CLSIDLOOKUP = (int)32L;
    /**
     * {@snippet lang=c :
     * enum _tagPI_FLAGS.PI_CLSIDLOOKUP = 32
     * }
     */
    public static int PI_CLSIDLOOKUP() {
        return PI_CLSIDLOOKUP;
    }
    private static final int PI_DATAPROGRESS = (int)64L;
    /**
     * {@snippet lang=c :
     * enum _tagPI_FLAGS.PI_DATAPROGRESS = 64
     * }
     */
    public static int PI_DATAPROGRESS() {
        return PI_DATAPROGRESS;
    }
    private static final int PI_SYNCHRONOUS = (int)128L;
    /**
     * {@snippet lang=c :
     * enum _tagPI_FLAGS.PI_SYNCHRONOUS = 128
     * }
     */
    public static int PI_SYNCHRONOUS() {
        return PI_SYNCHRONOUS;
    }
    private static final int PI_APARTMENTTHREADED = (int)256L;
    /**
     * {@snippet lang=c :
     * enum _tagPI_FLAGS.PI_APARTMENTTHREADED = 256
     * }
     */
    public static int PI_APARTMENTTHREADED() {
        return PI_APARTMENTTHREADED;
    }
    private static final int PI_CLASSINSTALL = (int)512L;
    /**
     * {@snippet lang=c :
     * enum _tagPI_FLAGS.PI_CLASSINSTALL = 512
     * }
     */
    public static int PI_CLASSINSTALL() {
        return PI_CLASSINSTALL;
    }
    private static final int PI_PASSONBINDCTX = (int)8192L;
    /**
     * {@snippet lang=c :
     * enum _tagPI_FLAGS.PI_PASSONBINDCTX = 8192
     * }
     */
    public static int PI_PASSONBINDCTX() {
        return PI_PASSONBINDCTX;
    }
    private static final int PI_NOMIMEHANDLER = (int)32768L;
    /**
     * {@snippet lang=c :
     * enum _tagPI_FLAGS.PI_NOMIMEHANDLER = 32768
     * }
     */
    public static int PI_NOMIMEHANDLER() {
        return PI_NOMIMEHANDLER;
    }
    private static final int PI_LOADAPPDIRECT = (int)16384L;
    /**
     * {@snippet lang=c :
     * enum _tagPI_FLAGS.PI_LOADAPPDIRECT = 16384
     * }
     */
    public static int PI_LOADAPPDIRECT() {
        return PI_LOADAPPDIRECT;
    }
    private static final int PD_FORCE_SWITCH = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum _tagPI_FLAGS.PD_FORCE_SWITCH = 65536
     * }
     */
    public static int PD_FORCE_SWITCH() {
        return PD_FORCE_SWITCH;
    }
    private static final int PI_PREFERDEFAULTHANDLER = (int)131072L;
    /**
     * {@snippet lang=c :
     * enum _tagPI_FLAGS.PI_PREFERDEFAULTHANDLER = 131072
     * }
     */
    public static int PI_PREFERDEFAULTHANDLER() {
        return PI_PREFERDEFAULTHANDLER;
    }

    private static class IID_IInternetProtocolRoot$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IInternetProtocolRoot").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetProtocolRoot
     * }
     */
    public static GroupLayout IID_IInternetProtocolRoot$layout() {
        return IID_IInternetProtocolRoot$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetProtocolRoot
     * }
     */
    public static MemorySegment IID_IInternetProtocolRoot() {
        return IID_IInternetProtocolRoot$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetProtocolRoot
     * }
     */
    public static void IID_IInternetProtocolRoot(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternetProtocolRoot$constants.SEGMENT, 0L, IID_IInternetProtocolRoot$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IInternetProtocol *LPIINTERNETPROTOCOL
     * }
     */
    public static final AddressLayout LPIINTERNETPROTOCOL = Windows_h.C_POINTER;

    private static class IID_IInternetProtocol$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IInternetProtocol").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetProtocol
     * }
     */
    public static GroupLayout IID_IInternetProtocol$layout() {
        return IID_IInternetProtocol$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetProtocol
     * }
     */
    public static MemorySegment IID_IInternetProtocol() {
        return IID_IInternetProtocol$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetProtocol
     * }
     */
    public static void IID_IInternetProtocol(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternetProtocol$constants.SEGMENT, 0L, IID_IInternetProtocol$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IInternetProtocolEx$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IInternetProtocolEx").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetProtocolEx
     * }
     */
    public static GroupLayout IID_IInternetProtocolEx$layout() {
        return IID_IInternetProtocolEx$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetProtocolEx
     * }
     */
    public static MemorySegment IID_IInternetProtocolEx() {
        return IID_IInternetProtocolEx$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetProtocolEx
     * }
     */
    public static void IID_IInternetProtocolEx(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternetProtocolEx$constants.SEGMENT, 0L, IID_IInternetProtocolEx$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IInternetProtocolSink *LPIINTERNETPROTOCOLSINK
     * }
     */
    public static final AddressLayout LPIINTERNETPROTOCOLSINK = Windows_h.C_POINTER;

    private static class IID_IInternetProtocolSink$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IInternetProtocolSink").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetProtocolSink
     * }
     */
    public static GroupLayout IID_IInternetProtocolSink$layout() {
        return IID_IInternetProtocolSink$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetProtocolSink
     * }
     */
    public static MemorySegment IID_IInternetProtocolSink() {
        return IID_IInternetProtocolSink$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetProtocolSink
     * }
     */
    public static void IID_IInternetProtocolSink(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternetProtocolSink$constants.SEGMENT, 0L, IID_IInternetProtocolSink$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IInternetProtocolSinkStackable *LPIINTERNETPROTOCOLSINKStackable
     * }
     */
    public static final AddressLayout LPIINTERNETPROTOCOLSINKStackable = Windows_h.C_POINTER;

    private static class IID_IInternetProtocolSinkStackable$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IInternetProtocolSinkStackable").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetProtocolSinkStackable
     * }
     */
    public static GroupLayout IID_IInternetProtocolSinkStackable$layout() {
        return IID_IInternetProtocolSinkStackable$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetProtocolSinkStackable
     * }
     */
    public static MemorySegment IID_IInternetProtocolSinkStackable() {
        return IID_IInternetProtocolSinkStackable$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetProtocolSinkStackable
     * }
     */
    public static void IID_IInternetProtocolSinkStackable(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternetProtocolSinkStackable$constants.SEGMENT, 0L, IID_IInternetProtocolSinkStackable$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IInternetSession *LPIINTERNETSESSION
     * }
     */
    public static final AddressLayout LPIINTERNETSESSION = Windows_h.C_POINTER;
    private static final int OIBDG_APARTMENTTHREADED = (int)256L;
    /**
     * {@snippet lang=c :
     * enum _tagOIBDG_FLAGS.OIBDG_APARTMENTTHREADED = 256
     * }
     */
    public static int OIBDG_APARTMENTTHREADED() {
        return OIBDG_APARTMENTTHREADED;
    }
    private static final int OIBDG_DATAONLY = (int)4096L;
    /**
     * {@snippet lang=c :
     * enum _tagOIBDG_FLAGS.OIBDG_DATAONLY = 4096
     * }
     */
    public static int OIBDG_DATAONLY() {
        return OIBDG_DATAONLY;
    }

    private static class IID_IInternetSession$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IInternetSession").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetSession
     * }
     */
    public static GroupLayout IID_IInternetSession$layout() {
        return IID_IInternetSession$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetSession
     * }
     */
    public static MemorySegment IID_IInternetSession() {
        return IID_IInternetSession$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetSession
     * }
     */
    public static void IID_IInternetSession(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternetSession$constants.SEGMENT, 0L, IID_IInternetSession$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IInternetThreadSwitch *LPIINTERNETTHREADSWITCH
     * }
     */
    public static final AddressLayout LPIINTERNETTHREADSWITCH = Windows_h.C_POINTER;

    private static class IID_IInternetThreadSwitch$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IInternetThreadSwitch").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetThreadSwitch
     * }
     */
    public static GroupLayout IID_IInternetThreadSwitch$layout() {
        return IID_IInternetThreadSwitch$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetThreadSwitch
     * }
     */
    public static MemorySegment IID_IInternetThreadSwitch() {
        return IID_IInternetThreadSwitch$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetThreadSwitch
     * }
     */
    public static void IID_IInternetThreadSwitch(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternetThreadSwitch$constants.SEGMENT, 0L, IID_IInternetThreadSwitch$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IInternetPriority *LPIINTERNETPRIORITY
     * }
     */
    public static final AddressLayout LPIINTERNETPRIORITY = Windows_h.C_POINTER;

    private static class IID_IInternetPriority$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IInternetPriority").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetPriority
     * }
     */
    public static GroupLayout IID_IInternetPriority$layout() {
        return IID_IInternetPriority$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetPriority
     * }
     */
    public static MemorySegment IID_IInternetPriority() {
        return IID_IInternetPriority$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetPriority
     * }
     */
    public static void IID_IInternetPriority(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternetPriority$constants.SEGMENT, 0L, IID_IInternetPriority$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IInternetProtocolInfo *LPIINTERNETPROTOCOLINFO
     * }
     */
    public static final AddressLayout LPIINTERNETPROTOCOLINFO = Windows_h.C_POINTER;
    private static final int PARSE_CANONICALIZE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _tagPARSEACTION.PARSE_CANONICALIZE = 1
     * }
     */
    public static int PARSE_CANONICALIZE() {
        return PARSE_CANONICALIZE;
    }
    private static final int PARSE_FRIENDLY = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _tagPARSEACTION.PARSE_FRIENDLY = 2
     * }
     */
    public static int PARSE_FRIENDLY() {
        return PARSE_FRIENDLY;
    }
    private static final int PARSE_SECURITY_URL = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _tagPARSEACTION.PARSE_SECURITY_URL = 3
     * }
     */
    public static int PARSE_SECURITY_URL() {
        return PARSE_SECURITY_URL;
    }
    private static final int PARSE_ROOTDOCUMENT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _tagPARSEACTION.PARSE_ROOTDOCUMENT = 4
     * }
     */
    public static int PARSE_ROOTDOCUMENT() {
        return PARSE_ROOTDOCUMENT;
    }
    private static final int PARSE_DOCUMENT = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _tagPARSEACTION.PARSE_DOCUMENT = 5
     * }
     */
    public static int PARSE_DOCUMENT() {
        return PARSE_DOCUMENT;
    }
    private static final int PARSE_ANCHOR = (int)6L;
    /**
     * {@snippet lang=c :
     * enum _tagPARSEACTION.PARSE_ANCHOR = 6
     * }
     */
    public static int PARSE_ANCHOR() {
        return PARSE_ANCHOR;
    }
    private static final int PARSE_ENCODE_IS_UNESCAPE = (int)7L;
    /**
     * {@snippet lang=c :
     * enum _tagPARSEACTION.PARSE_ENCODE_IS_UNESCAPE = 7
     * }
     */
    public static int PARSE_ENCODE_IS_UNESCAPE() {
        return PARSE_ENCODE_IS_UNESCAPE;
    }
    private static final int PARSE_DECODE_IS_ESCAPE = (int)8L;
    /**
     * {@snippet lang=c :
     * enum _tagPARSEACTION.PARSE_DECODE_IS_ESCAPE = 8
     * }
     */
    public static int PARSE_DECODE_IS_ESCAPE() {
        return PARSE_DECODE_IS_ESCAPE;
    }
    private static final int PARSE_PATH_FROM_URL = (int)9L;
    /**
     * {@snippet lang=c :
     * enum _tagPARSEACTION.PARSE_PATH_FROM_URL = 9
     * }
     */
    public static int PARSE_PATH_FROM_URL() {
        return PARSE_PATH_FROM_URL;
    }
    private static final int PARSE_URL_FROM_PATH = (int)10L;
    /**
     * {@snippet lang=c :
     * enum _tagPARSEACTION.PARSE_URL_FROM_PATH = 10
     * }
     */
    public static int PARSE_URL_FROM_PATH() {
        return PARSE_URL_FROM_PATH;
    }
    private static final int PARSE_MIME = (int)11L;
    /**
     * {@snippet lang=c :
     * enum _tagPARSEACTION.PARSE_MIME = 11
     * }
     */
    public static int PARSE_MIME() {
        return PARSE_MIME;
    }
    private static final int PARSE_SERVER = (int)12L;
    /**
     * {@snippet lang=c :
     * enum _tagPARSEACTION.PARSE_SERVER = 12
     * }
     */
    public static int PARSE_SERVER() {
        return PARSE_SERVER;
    }
    private static final int PARSE_SCHEMA = (int)13L;
    /**
     * {@snippet lang=c :
     * enum _tagPARSEACTION.PARSE_SCHEMA = 13
     * }
     */
    public static int PARSE_SCHEMA() {
        return PARSE_SCHEMA;
    }
    private static final int PARSE_SITE = (int)14L;
    /**
     * {@snippet lang=c :
     * enum _tagPARSEACTION.PARSE_SITE = 14
     * }
     */
    public static int PARSE_SITE() {
        return PARSE_SITE;
    }
    private static final int PARSE_DOMAIN = (int)15L;
    /**
     * {@snippet lang=c :
     * enum _tagPARSEACTION.PARSE_DOMAIN = 15
     * }
     */
    public static int PARSE_DOMAIN() {
        return PARSE_DOMAIN;
    }
    private static final int PARSE_LOCATION = (int)16L;
    /**
     * {@snippet lang=c :
     * enum _tagPARSEACTION.PARSE_LOCATION = 16
     * }
     */
    public static int PARSE_LOCATION() {
        return PARSE_LOCATION;
    }
    private static final int PARSE_SECURITY_DOMAIN = (int)17L;
    /**
     * {@snippet lang=c :
     * enum _tagPARSEACTION.PARSE_SECURITY_DOMAIN = 17
     * }
     */
    public static int PARSE_SECURITY_DOMAIN() {
        return PARSE_SECURITY_DOMAIN;
    }
    private static final int PARSE_ESCAPE = (int)18L;
    /**
     * {@snippet lang=c :
     * enum _tagPARSEACTION.PARSE_ESCAPE = 18
     * }
     */
    public static int PARSE_ESCAPE() {
        return PARSE_ESCAPE;
    }
    private static final int PARSE_UNESCAPE = (int)19L;
    /**
     * {@snippet lang=c :
     * enum _tagPARSEACTION.PARSE_UNESCAPE = 19
     * }
     */
    public static int PARSE_UNESCAPE() {
        return PARSE_UNESCAPE;
    }
    private static final int PSU_DEFAULT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _tagPSUACTION.PSU_DEFAULT = 1
     * }
     */
    public static int PSU_DEFAULT() {
        return PSU_DEFAULT;
    }
    private static final int PSU_SECURITY_URL_ONLY = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _tagPSUACTION.PSU_SECURITY_URL_ONLY = 2
     * }
     */
    public static int PSU_SECURITY_URL_ONLY() {
        return PSU_SECURITY_URL_ONLY;
    }
    private static final int QUERY_EXPIRATION_DATE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _tagQUERYOPTION.QUERY_EXPIRATION_DATE = 1
     * }
     */
    public static int QUERY_EXPIRATION_DATE() {
        return QUERY_EXPIRATION_DATE;
    }
    private static final int QUERY_TIME_OF_LAST_CHANGE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _tagQUERYOPTION.QUERY_TIME_OF_LAST_CHANGE = 2
     * }
     */
    public static int QUERY_TIME_OF_LAST_CHANGE() {
        return QUERY_TIME_OF_LAST_CHANGE;
    }
    private static final int QUERY_CONTENT_ENCODING = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _tagQUERYOPTION.QUERY_CONTENT_ENCODING = 3
     * }
     */
    public static int QUERY_CONTENT_ENCODING() {
        return QUERY_CONTENT_ENCODING;
    }
    private static final int QUERY_CONTENT_TYPE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _tagQUERYOPTION.QUERY_CONTENT_TYPE = 4
     * }
     */
    public static int QUERY_CONTENT_TYPE() {
        return QUERY_CONTENT_TYPE;
    }
    private static final int QUERY_REFRESH = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _tagQUERYOPTION.QUERY_REFRESH = 5
     * }
     */
    public static int QUERY_REFRESH() {
        return QUERY_REFRESH;
    }
    private static final int QUERY_RECOMBINE = (int)6L;
    /**
     * {@snippet lang=c :
     * enum _tagQUERYOPTION.QUERY_RECOMBINE = 6
     * }
     */
    public static int QUERY_RECOMBINE() {
        return QUERY_RECOMBINE;
    }
    private static final int QUERY_CAN_NAVIGATE = (int)7L;
    /**
     * {@snippet lang=c :
     * enum _tagQUERYOPTION.QUERY_CAN_NAVIGATE = 7
     * }
     */
    public static int QUERY_CAN_NAVIGATE() {
        return QUERY_CAN_NAVIGATE;
    }
    private static final int QUERY_USES_NETWORK = (int)8L;
    /**
     * {@snippet lang=c :
     * enum _tagQUERYOPTION.QUERY_USES_NETWORK = 8
     * }
     */
    public static int QUERY_USES_NETWORK() {
        return QUERY_USES_NETWORK;
    }
    private static final int QUERY_IS_CACHED = (int)9L;
    /**
     * {@snippet lang=c :
     * enum _tagQUERYOPTION.QUERY_IS_CACHED = 9
     * }
     */
    public static int QUERY_IS_CACHED() {
        return QUERY_IS_CACHED;
    }
    private static final int QUERY_IS_INSTALLEDENTRY = (int)10L;
    /**
     * {@snippet lang=c :
     * enum _tagQUERYOPTION.QUERY_IS_INSTALLEDENTRY = 10
     * }
     */
    public static int QUERY_IS_INSTALLEDENTRY() {
        return QUERY_IS_INSTALLEDENTRY;
    }
    private static final int QUERY_IS_CACHED_OR_MAPPED = (int)11L;
    /**
     * {@snippet lang=c :
     * enum _tagQUERYOPTION.QUERY_IS_CACHED_OR_MAPPED = 11
     * }
     */
    public static int QUERY_IS_CACHED_OR_MAPPED() {
        return QUERY_IS_CACHED_OR_MAPPED;
    }
    private static final int QUERY_USES_CACHE = (int)12L;
    /**
     * {@snippet lang=c :
     * enum _tagQUERYOPTION.QUERY_USES_CACHE = 12
     * }
     */
    public static int QUERY_USES_CACHE() {
        return QUERY_USES_CACHE;
    }
    private static final int QUERY_IS_SECURE = (int)13L;
    /**
     * {@snippet lang=c :
     * enum _tagQUERYOPTION.QUERY_IS_SECURE = 13
     * }
     */
    public static int QUERY_IS_SECURE() {
        return QUERY_IS_SECURE;
    }
    private static final int QUERY_IS_SAFE = (int)14L;
    /**
     * {@snippet lang=c :
     * enum _tagQUERYOPTION.QUERY_IS_SAFE = 14
     * }
     */
    public static int QUERY_IS_SAFE() {
        return QUERY_IS_SAFE;
    }
    private static final int QUERY_USES_HISTORYFOLDER = (int)15L;
    /**
     * {@snippet lang=c :
     * enum _tagQUERYOPTION.QUERY_USES_HISTORYFOLDER = 15
     * }
     */
    public static int QUERY_USES_HISTORYFOLDER() {
        return QUERY_USES_HISTORYFOLDER;
    }
    private static final int QUERY_IS_CACHED_AND_USABLE_OFFLINE = (int)16L;
    /**
     * {@snippet lang=c :
     * enum _tagQUERYOPTION.QUERY_IS_CACHED_AND_USABLE_OFFLINE = 16
     * }
     */
    public static int QUERY_IS_CACHED_AND_USABLE_OFFLINE() {
        return QUERY_IS_CACHED_AND_USABLE_OFFLINE;
    }

    private static class IID_IInternetProtocolInfo$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IInternetProtocolInfo").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetProtocolInfo
     * }
     */
    public static GroupLayout IID_IInternetProtocolInfo$layout() {
        return IID_IInternetProtocolInfo$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetProtocolInfo
     * }
     */
    public static MemorySegment IID_IInternetProtocolInfo() {
        return IID_IInternetProtocolInfo$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetProtocolInfo
     * }
     */
    public static void IID_IInternetProtocolInfo(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternetProtocolInfo$constants.SEGMENT, 0L, IID_IInternetProtocolInfo$constants.LAYOUT.byteSize());
    }

    private static class CoInternetParseUrl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_INT,
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("CoInternetParseUrl"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetParseUrl(LPCWSTR pwzUrl, PARSEACTION ParseAction, DWORD dwFlags, LPWSTR pszResult, DWORD cchResult, DWORD *pcchResult, DWORD dwReserved)
     * }
     */
    public static FunctionDescriptor CoInternetParseUrl$descriptor() {
        return CoInternetParseUrl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetParseUrl(LPCWSTR pwzUrl, PARSEACTION ParseAction, DWORD dwFlags, LPWSTR pszResult, DWORD cchResult, DWORD *pcchResult, DWORD dwReserved)
     * }
     */
    public static MethodHandle CoInternetParseUrl$handle() {
        return CoInternetParseUrl.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CoInternetParseUrl(LPCWSTR pwzUrl, PARSEACTION ParseAction, DWORD dwFlags, LPWSTR pszResult, DWORD cchResult, DWORD *pcchResult, DWORD dwReserved)
     * }
     */
    public static int CoInternetParseUrl(MemorySegment pwzUrl, int ParseAction, int dwFlags, MemorySegment pszResult, int cchResult, MemorySegment pcchResult, int dwReserved) {
        var mh$ = CoInternetParseUrl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInternetParseUrl", pwzUrl, ParseAction, dwFlags, pszResult, cchResult, pcchResult, dwReserved);
            }
            return (int)mh$.invokeExact(pwzUrl, ParseAction, dwFlags, pszResult, cchResult, pcchResult, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoInternetParseIUri {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_INT,
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("CoInternetParseIUri"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetParseIUri(IUri *pIUri, PARSEACTION ParseAction, DWORD dwFlags, LPWSTR pwzResult, DWORD cchResult, DWORD *pcchResult, DWORD_PTR dwReserved)
     * }
     */
    public static FunctionDescriptor CoInternetParseIUri$descriptor() {
        return CoInternetParseIUri.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetParseIUri(IUri *pIUri, PARSEACTION ParseAction, DWORD dwFlags, LPWSTR pwzResult, DWORD cchResult, DWORD *pcchResult, DWORD_PTR dwReserved)
     * }
     */
    public static MethodHandle CoInternetParseIUri$handle() {
        return CoInternetParseIUri.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CoInternetParseIUri(IUri *pIUri, PARSEACTION ParseAction, DWORD dwFlags, LPWSTR pwzResult, DWORD cchResult, DWORD *pcchResult, DWORD_PTR dwReserved)
     * }
     */
    public static int CoInternetParseIUri(MemorySegment pIUri, int ParseAction, int dwFlags, MemorySegment pwzResult, int cchResult, MemorySegment pcchResult, long dwReserved) {
        var mh$ = CoInternetParseIUri.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInternetParseIUri", pIUri, ParseAction, dwFlags, pwzResult, cchResult, pcchResult, dwReserved);
            }
            return (int)mh$.invokeExact(pIUri, ParseAction, dwFlags, pwzResult, cchResult, pcchResult, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoInternetCombineUrl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("CoInternetCombineUrl"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetCombineUrl(LPCWSTR pwzBaseUrl, LPCWSTR pwzRelativeUrl, DWORD dwCombineFlags, LPWSTR pszResult, DWORD cchResult, DWORD *pcchResult, DWORD dwReserved)
     * }
     */
    public static FunctionDescriptor CoInternetCombineUrl$descriptor() {
        return CoInternetCombineUrl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetCombineUrl(LPCWSTR pwzBaseUrl, LPCWSTR pwzRelativeUrl, DWORD dwCombineFlags, LPWSTR pszResult, DWORD cchResult, DWORD *pcchResult, DWORD dwReserved)
     * }
     */
    public static MethodHandle CoInternetCombineUrl$handle() {
        return CoInternetCombineUrl.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CoInternetCombineUrl(LPCWSTR pwzBaseUrl, LPCWSTR pwzRelativeUrl, DWORD dwCombineFlags, LPWSTR pszResult, DWORD cchResult, DWORD *pcchResult, DWORD dwReserved)
     * }
     */
    public static int CoInternetCombineUrl(MemorySegment pwzBaseUrl, MemorySegment pwzRelativeUrl, int dwCombineFlags, MemorySegment pszResult, int cchResult, MemorySegment pcchResult, int dwReserved) {
        var mh$ = CoInternetCombineUrl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInternetCombineUrl", pwzBaseUrl, pwzRelativeUrl, dwCombineFlags, pszResult, cchResult, pcchResult, dwReserved);
            }
            return (int)mh$.invokeExact(pwzBaseUrl, pwzRelativeUrl, dwCombineFlags, pszResult, cchResult, pcchResult, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoInternetCombineUrlEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("CoInternetCombineUrlEx"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetCombineUrlEx(IUri *pBaseUri, LPCWSTR pwzRelativeUrl, DWORD dwCombineFlags, IUri **ppCombinedUri, DWORD_PTR dwReserved)
     * }
     */
    public static FunctionDescriptor CoInternetCombineUrlEx$descriptor() {
        return CoInternetCombineUrlEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetCombineUrlEx(IUri *pBaseUri, LPCWSTR pwzRelativeUrl, DWORD dwCombineFlags, IUri **ppCombinedUri, DWORD_PTR dwReserved)
     * }
     */
    public static MethodHandle CoInternetCombineUrlEx$handle() {
        return CoInternetCombineUrlEx.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CoInternetCombineUrlEx(IUri *pBaseUri, LPCWSTR pwzRelativeUrl, DWORD dwCombineFlags, IUri **ppCombinedUri, DWORD_PTR dwReserved)
     * }
     */
    public static int CoInternetCombineUrlEx(MemorySegment pBaseUri, MemorySegment pwzRelativeUrl, int dwCombineFlags, MemorySegment ppCombinedUri, long dwReserved) {
        var mh$ = CoInternetCombineUrlEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInternetCombineUrlEx", pBaseUri, pwzRelativeUrl, dwCombineFlags, ppCombinedUri, dwReserved);
            }
            return (int)mh$.invokeExact(pBaseUri, pwzRelativeUrl, dwCombineFlags, ppCombinedUri, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoInternetCombineIUri {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("CoInternetCombineIUri"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetCombineIUri(IUri *pBaseUri, IUri *pRelativeUri, DWORD dwCombineFlags, IUri **ppCombinedUri, DWORD_PTR dwReserved)
     * }
     */
    public static FunctionDescriptor CoInternetCombineIUri$descriptor() {
        return CoInternetCombineIUri.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetCombineIUri(IUri *pBaseUri, IUri *pRelativeUri, DWORD dwCombineFlags, IUri **ppCombinedUri, DWORD_PTR dwReserved)
     * }
     */
    public static MethodHandle CoInternetCombineIUri$handle() {
        return CoInternetCombineIUri.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CoInternetCombineIUri(IUri *pBaseUri, IUri *pRelativeUri, DWORD dwCombineFlags, IUri **ppCombinedUri, DWORD_PTR dwReserved)
     * }
     */
    public static int CoInternetCombineIUri(MemorySegment pBaseUri, MemorySegment pRelativeUri, int dwCombineFlags, MemorySegment ppCombinedUri, long dwReserved) {
        var mh$ = CoInternetCombineIUri.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInternetCombineIUri", pBaseUri, pRelativeUri, dwCombineFlags, ppCombinedUri, dwReserved);
            }
            return (int)mh$.invokeExact(pBaseUri, pRelativeUri, dwCombineFlags, ppCombinedUri, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoInternetCompareUrl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("CoInternetCompareUrl"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetCompareUrl(LPCWSTR pwzUrl1, LPCWSTR pwzUrl2, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor CoInternetCompareUrl$descriptor() {
        return CoInternetCompareUrl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetCompareUrl(LPCWSTR pwzUrl1, LPCWSTR pwzUrl2, DWORD dwFlags)
     * }
     */
    public static MethodHandle CoInternetCompareUrl$handle() {
        return CoInternetCompareUrl.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CoInternetCompareUrl(LPCWSTR pwzUrl1, LPCWSTR pwzUrl2, DWORD dwFlags)
     * }
     */
    public static int CoInternetCompareUrl(MemorySegment pwzUrl1, MemorySegment pwzUrl2, int dwFlags) {
        var mh$ = CoInternetCompareUrl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInternetCompareUrl", pwzUrl1, pwzUrl2, dwFlags);
            }
            return (int)mh$.invokeExact(pwzUrl1, pwzUrl2, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoInternetGetProtocolFlags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("CoInternetGetProtocolFlags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetGetProtocolFlags(LPCWSTR pwzUrl, DWORD *pdwFlags, DWORD dwReserved)
     * }
     */
    public static FunctionDescriptor CoInternetGetProtocolFlags$descriptor() {
        return CoInternetGetProtocolFlags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetGetProtocolFlags(LPCWSTR pwzUrl, DWORD *pdwFlags, DWORD dwReserved)
     * }
     */
    public static MethodHandle CoInternetGetProtocolFlags$handle() {
        return CoInternetGetProtocolFlags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CoInternetGetProtocolFlags(LPCWSTR pwzUrl, DWORD *pdwFlags, DWORD dwReserved)
     * }
     */
    public static int CoInternetGetProtocolFlags(MemorySegment pwzUrl, MemorySegment pdwFlags, int dwReserved) {
        var mh$ = CoInternetGetProtocolFlags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInternetGetProtocolFlags", pwzUrl, pdwFlags, dwReserved);
            }
            return (int)mh$.invokeExact(pwzUrl, pdwFlags, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoInternetQueryInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_INT,
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("CoInternetQueryInfo"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetQueryInfo(LPCWSTR pwzUrl, QUERYOPTION QueryOptions, DWORD dwQueryFlags, LPVOID pvBuffer, DWORD cbBuffer, DWORD *pcbBuffer, DWORD dwReserved)
     * }
     */
    public static FunctionDescriptor CoInternetQueryInfo$descriptor() {
        return CoInternetQueryInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetQueryInfo(LPCWSTR pwzUrl, QUERYOPTION QueryOptions, DWORD dwQueryFlags, LPVOID pvBuffer, DWORD cbBuffer, DWORD *pcbBuffer, DWORD dwReserved)
     * }
     */
    public static MethodHandle CoInternetQueryInfo$handle() {
        return CoInternetQueryInfo.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CoInternetQueryInfo(LPCWSTR pwzUrl, QUERYOPTION QueryOptions, DWORD dwQueryFlags, LPVOID pvBuffer, DWORD cbBuffer, DWORD *pcbBuffer, DWORD dwReserved)
     * }
     */
    public static int CoInternetQueryInfo(MemorySegment pwzUrl, int QueryOptions, int dwQueryFlags, MemorySegment pvBuffer, int cbBuffer, MemorySegment pcbBuffer, int dwReserved) {
        var mh$ = CoInternetQueryInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInternetQueryInfo", pwzUrl, QueryOptions, dwQueryFlags, pvBuffer, cbBuffer, pcbBuffer, dwReserved);
            }
            return (int)mh$.invokeExact(pwzUrl, QueryOptions, dwQueryFlags, pvBuffer, cbBuffer, pcbBuffer, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoInternetGetSession {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("CoInternetGetSession"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetGetSession(DWORD dwSessionMode, IInternetSession **ppIInternetSession, DWORD dwReserved)
     * }
     */
    public static FunctionDescriptor CoInternetGetSession$descriptor() {
        return CoInternetGetSession.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetGetSession(DWORD dwSessionMode, IInternetSession **ppIInternetSession, DWORD dwReserved)
     * }
     */
    public static MethodHandle CoInternetGetSession$handle() {
        return CoInternetGetSession.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CoInternetGetSession(DWORD dwSessionMode, IInternetSession **ppIInternetSession, DWORD dwReserved)
     * }
     */
    public static int CoInternetGetSession(int dwSessionMode, MemorySegment ppIInternetSession, int dwReserved) {
        var mh$ = CoInternetGetSession.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInternetGetSession", dwSessionMode, ppIInternetSession, dwReserved);
            }
            return (int)mh$.invokeExact(dwSessionMode, ppIInternetSession, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoInternetGetSecurityUrl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_INT,
            Windows_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("CoInternetGetSecurityUrl"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetGetSecurityUrl(LPCWSTR pwszUrl, LPWSTR *ppwszSecUrl, PSUACTION psuAction, DWORD dwReserved)
     * }
     */
    public static FunctionDescriptor CoInternetGetSecurityUrl$descriptor() {
        return CoInternetGetSecurityUrl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetGetSecurityUrl(LPCWSTR pwszUrl, LPWSTR *ppwszSecUrl, PSUACTION psuAction, DWORD dwReserved)
     * }
     */
    public static MethodHandle CoInternetGetSecurityUrl$handle() {
        return CoInternetGetSecurityUrl.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CoInternetGetSecurityUrl(LPCWSTR pwszUrl, LPWSTR *ppwszSecUrl, PSUACTION psuAction, DWORD dwReserved)
     * }
     */
    public static int CoInternetGetSecurityUrl(MemorySegment pwszUrl, MemorySegment ppwszSecUrl, int psuAction, int dwReserved) {
        var mh$ = CoInternetGetSecurityUrl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInternetGetSecurityUrl", pwszUrl, ppwszSecUrl, psuAction, dwReserved);
            }
            return (int)mh$.invokeExact(pwszUrl, ppwszSecUrl, psuAction, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncInstallDistributionUnit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("AsyncInstallDistributionUnit"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT AsyncInstallDistributionUnit(LPCWSTR szDistUnit, LPCWSTR szTYPE, LPCWSTR szExt, DWORD dwFileVersionMS, DWORD dwFileVersionLS, LPCWSTR szURL, IBindCtx *pbc, LPVOID pvReserved, DWORD flags)
     * }
     */
    public static FunctionDescriptor AsyncInstallDistributionUnit$descriptor() {
        return AsyncInstallDistributionUnit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT AsyncInstallDistributionUnit(LPCWSTR szDistUnit, LPCWSTR szTYPE, LPCWSTR szExt, DWORD dwFileVersionMS, DWORD dwFileVersionLS, LPCWSTR szURL, IBindCtx *pbc, LPVOID pvReserved, DWORD flags)
     * }
     */
    public static MethodHandle AsyncInstallDistributionUnit$handle() {
        return AsyncInstallDistributionUnit.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT AsyncInstallDistributionUnit(LPCWSTR szDistUnit, LPCWSTR szTYPE, LPCWSTR szExt, DWORD dwFileVersionMS, DWORD dwFileVersionLS, LPCWSTR szURL, IBindCtx *pbc, LPVOID pvReserved, DWORD flags)
     * }
     */
    public static int AsyncInstallDistributionUnit(MemorySegment szDistUnit, MemorySegment szTYPE, MemorySegment szExt, int dwFileVersionMS, int dwFileVersionLS, MemorySegment szURL, MemorySegment pbc, MemorySegment pvReserved, int flags) {
        var mh$ = AsyncInstallDistributionUnit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncInstallDistributionUnit", szDistUnit, szTYPE, szExt, dwFileVersionMS, dwFileVersionLS, szURL, pbc, pvReserved, flags);
            }
            return (int)mh$.invokeExact(szDistUnit, szTYPE, szExt, dwFileVersionMS, dwFileVersionLS, szURL, pbc, pvReserved, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoInternetGetSecurityUrlEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_INT,
            Windows_h.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("CoInternetGetSecurityUrlEx"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetGetSecurityUrlEx(IUri *pUri, IUri **ppSecUri, PSUACTION psuAction, DWORD_PTR dwReserved)
     * }
     */
    public static FunctionDescriptor CoInternetGetSecurityUrlEx$descriptor() {
        return CoInternetGetSecurityUrlEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetGetSecurityUrlEx(IUri *pUri, IUri **ppSecUri, PSUACTION psuAction, DWORD_PTR dwReserved)
     * }
     */
    public static MethodHandle CoInternetGetSecurityUrlEx$handle() {
        return CoInternetGetSecurityUrlEx.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CoInternetGetSecurityUrlEx(IUri *pUri, IUri **ppSecUri, PSUACTION psuAction, DWORD_PTR dwReserved)
     * }
     */
    public static int CoInternetGetSecurityUrlEx(MemorySegment pUri, MemorySegment ppSecUri, int psuAction, long dwReserved) {
        var mh$ = CoInternetGetSecurityUrlEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInternetGetSecurityUrlEx", pUri, ppSecUri, psuAction, dwReserved);
            }
            return (int)mh$.invokeExact(pUri, ppSecUri, psuAction, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int FEATURE_OBJECT_CACHING = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_OBJECT_CACHING = 0
     * }
     */
    public static int FEATURE_OBJECT_CACHING() {
        return FEATURE_OBJECT_CACHING;
    }
    private static final int FEATURE_ZONE_ELEVATION = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_ZONE_ELEVATION = 1
     * }
     */
    public static int FEATURE_ZONE_ELEVATION() {
        return FEATURE_ZONE_ELEVATION;
    }
    private static final int FEATURE_MIME_HANDLING = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_MIME_HANDLING = 2
     * }
     */
    public static int FEATURE_MIME_HANDLING() {
        return FEATURE_MIME_HANDLING;
    }
    private static final int FEATURE_MIME_SNIFFING = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_MIME_SNIFFING = 3
     * }
     */
    public static int FEATURE_MIME_SNIFFING() {
        return FEATURE_MIME_SNIFFING;
    }
    private static final int FEATURE_WINDOW_RESTRICTIONS = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_WINDOW_RESTRICTIONS = 4
     * }
     */
    public static int FEATURE_WINDOW_RESTRICTIONS() {
        return FEATURE_WINDOW_RESTRICTIONS;
    }
    private static final int FEATURE_WEBOC_POPUPMANAGEMENT = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_WEBOC_POPUPMANAGEMENT = 5
     * }
     */
    public static int FEATURE_WEBOC_POPUPMANAGEMENT() {
        return FEATURE_WEBOC_POPUPMANAGEMENT;
    }
    private static final int FEATURE_BEHAVIORS = (int)6L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_BEHAVIORS = 6
     * }
     */
    public static int FEATURE_BEHAVIORS() {
        return FEATURE_BEHAVIORS;
    }
    private static final int FEATURE_DISABLE_MK_PROTOCOL = (int)7L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_DISABLE_MK_PROTOCOL = 7
     * }
     */
    public static int FEATURE_DISABLE_MK_PROTOCOL() {
        return FEATURE_DISABLE_MK_PROTOCOL;
    }
    private static final int FEATURE_LOCALMACHINE_LOCKDOWN = (int)8L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_LOCALMACHINE_LOCKDOWN = 8
     * }
     */
    public static int FEATURE_LOCALMACHINE_LOCKDOWN() {
        return FEATURE_LOCALMACHINE_LOCKDOWN;
    }
    private static final int FEATURE_SECURITYBAND = (int)9L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_SECURITYBAND = 9
     * }
     */
    public static int FEATURE_SECURITYBAND() {
        return FEATURE_SECURITYBAND;
    }
    private static final int FEATURE_RESTRICT_ACTIVEXINSTALL = (int)10L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_RESTRICT_ACTIVEXINSTALL = 10
     * }
     */
    public static int FEATURE_RESTRICT_ACTIVEXINSTALL() {
        return FEATURE_RESTRICT_ACTIVEXINSTALL;
    }
    private static final int FEATURE_VALIDATE_NAVIGATE_URL = (int)11L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_VALIDATE_NAVIGATE_URL = 11
     * }
     */
    public static int FEATURE_VALIDATE_NAVIGATE_URL() {
        return FEATURE_VALIDATE_NAVIGATE_URL;
    }
    private static final int FEATURE_RESTRICT_FILEDOWNLOAD = (int)12L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_RESTRICT_FILEDOWNLOAD = 12
     * }
     */
    public static int FEATURE_RESTRICT_FILEDOWNLOAD() {
        return FEATURE_RESTRICT_FILEDOWNLOAD;
    }
    private static final int FEATURE_ADDON_MANAGEMENT = (int)13L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_ADDON_MANAGEMENT = 13
     * }
     */
    public static int FEATURE_ADDON_MANAGEMENT() {
        return FEATURE_ADDON_MANAGEMENT;
    }
    private static final int FEATURE_PROTOCOL_LOCKDOWN = (int)14L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_PROTOCOL_LOCKDOWN = 14
     * }
     */
    public static int FEATURE_PROTOCOL_LOCKDOWN() {
        return FEATURE_PROTOCOL_LOCKDOWN;
    }
    private static final int FEATURE_HTTP_USERNAME_PASSWORD_DISABLE = (int)15L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_HTTP_USERNAME_PASSWORD_DISABLE = 15
     * }
     */
    public static int FEATURE_HTTP_USERNAME_PASSWORD_DISABLE() {
        return FEATURE_HTTP_USERNAME_PASSWORD_DISABLE;
    }
    private static final int FEATURE_SAFE_BINDTOOBJECT = (int)16L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_SAFE_BINDTOOBJECT = 16
     * }
     */
    public static int FEATURE_SAFE_BINDTOOBJECT() {
        return FEATURE_SAFE_BINDTOOBJECT;
    }
    private static final int FEATURE_UNC_SAVEDFILECHECK = (int)17L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_UNC_SAVEDFILECHECK = 17
     * }
     */
    public static int FEATURE_UNC_SAVEDFILECHECK() {
        return FEATURE_UNC_SAVEDFILECHECK;
    }
    private static final int FEATURE_GET_URL_DOM_FILEPATH_UNENCODED = (int)18L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_GET_URL_DOM_FILEPATH_UNENCODED = 18
     * }
     */
    public static int FEATURE_GET_URL_DOM_FILEPATH_UNENCODED() {
        return FEATURE_GET_URL_DOM_FILEPATH_UNENCODED;
    }
    private static final int FEATURE_TABBED_BROWSING = (int)19L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_TABBED_BROWSING = 19
     * }
     */
    public static int FEATURE_TABBED_BROWSING() {
        return FEATURE_TABBED_BROWSING;
    }
    private static final int FEATURE_SSLUX = (int)20L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_SSLUX = 20
     * }
     */
    public static int FEATURE_SSLUX() {
        return FEATURE_SSLUX;
    }
    private static final int FEATURE_DISABLE_NAVIGATION_SOUNDS = (int)21L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_DISABLE_NAVIGATION_SOUNDS = 21
     * }
     */
    public static int FEATURE_DISABLE_NAVIGATION_SOUNDS() {
        return FEATURE_DISABLE_NAVIGATION_SOUNDS;
    }
    private static final int FEATURE_DISABLE_LEGACY_COMPRESSION = (int)22L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_DISABLE_LEGACY_COMPRESSION = 22
     * }
     */
    public static int FEATURE_DISABLE_LEGACY_COMPRESSION() {
        return FEATURE_DISABLE_LEGACY_COMPRESSION;
    }
    private static final int FEATURE_FORCE_ADDR_AND_STATUS = (int)23L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_FORCE_ADDR_AND_STATUS = 23
     * }
     */
    public static int FEATURE_FORCE_ADDR_AND_STATUS() {
        return FEATURE_FORCE_ADDR_AND_STATUS;
    }
    private static final int FEATURE_XMLHTTP = (int)24L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_XMLHTTP = 24
     * }
     */
    public static int FEATURE_XMLHTTP() {
        return FEATURE_XMLHTTP;
    }
    private static final int FEATURE_DISABLE_TELNET_PROTOCOL = (int)25L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_DISABLE_TELNET_PROTOCOL = 25
     * }
     */
    public static int FEATURE_DISABLE_TELNET_PROTOCOL() {
        return FEATURE_DISABLE_TELNET_PROTOCOL;
    }
    private static final int FEATURE_FEEDS = (int)26L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_FEEDS = 26
     * }
     */
    public static int FEATURE_FEEDS() {
        return FEATURE_FEEDS;
    }
    private static final int FEATURE_BLOCK_INPUT_PROMPTS = (int)27L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_BLOCK_INPUT_PROMPTS = 27
     * }
     */
    public static int FEATURE_BLOCK_INPUT_PROMPTS() {
        return FEATURE_BLOCK_INPUT_PROMPTS;
    }
    private static final int FEATURE_ENTRY_COUNT = (int)28L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_ENTRY_COUNT = 28
     * }
     */
    public static int FEATURE_ENTRY_COUNT() {
        return FEATURE_ENTRY_COUNT;
    }

    private static class CoInternetSetFeatureEnabled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_INT,
            Windows_h.C_LONG,
            Windows_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("CoInternetSetFeatureEnabled"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetSetFeatureEnabled(INTERNETFEATURELIST FeatureEntry, DWORD dwFlags, BOOL fEnable)
     * }
     */
    public static FunctionDescriptor CoInternetSetFeatureEnabled$descriptor() {
        return CoInternetSetFeatureEnabled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetSetFeatureEnabled(INTERNETFEATURELIST FeatureEntry, DWORD dwFlags, BOOL fEnable)
     * }
     */
    public static MethodHandle CoInternetSetFeatureEnabled$handle() {
        return CoInternetSetFeatureEnabled.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CoInternetSetFeatureEnabled(INTERNETFEATURELIST FeatureEntry, DWORD dwFlags, BOOL fEnable)
     * }
     */
    public static int CoInternetSetFeatureEnabled(int FeatureEntry, int dwFlags, int fEnable) {
        var mh$ = CoInternetSetFeatureEnabled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInternetSetFeatureEnabled", FeatureEntry, dwFlags, fEnable);
            }
            return (int)mh$.invokeExact(FeatureEntry, dwFlags, fEnable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoInternetIsFeatureEnabled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_INT,
            Windows_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("CoInternetIsFeatureEnabled"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetIsFeatureEnabled(INTERNETFEATURELIST FeatureEntry, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor CoInternetIsFeatureEnabled$descriptor() {
        return CoInternetIsFeatureEnabled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetIsFeatureEnabled(INTERNETFEATURELIST FeatureEntry, DWORD dwFlags)
     * }
     */
    public static MethodHandle CoInternetIsFeatureEnabled$handle() {
        return CoInternetIsFeatureEnabled.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CoInternetIsFeatureEnabled(INTERNETFEATURELIST FeatureEntry, DWORD dwFlags)
     * }
     */
    public static int CoInternetIsFeatureEnabled(int FeatureEntry, int dwFlags) {
        var mh$ = CoInternetIsFeatureEnabled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInternetIsFeatureEnabled", FeatureEntry, dwFlags);
            }
            return (int)mh$.invokeExact(FeatureEntry, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoInternetIsFeatureEnabledForUrl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_INT,
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("CoInternetIsFeatureEnabledForUrl"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetIsFeatureEnabledForUrl(INTERNETFEATURELIST FeatureEntry, DWORD dwFlags, LPCWSTR szURL, IInternetSecurityManager *pSecMgr)
     * }
     */
    public static FunctionDescriptor CoInternetIsFeatureEnabledForUrl$descriptor() {
        return CoInternetIsFeatureEnabledForUrl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetIsFeatureEnabledForUrl(INTERNETFEATURELIST FeatureEntry, DWORD dwFlags, LPCWSTR szURL, IInternetSecurityManager *pSecMgr)
     * }
     */
    public static MethodHandle CoInternetIsFeatureEnabledForUrl$handle() {
        return CoInternetIsFeatureEnabledForUrl.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CoInternetIsFeatureEnabledForUrl(INTERNETFEATURELIST FeatureEntry, DWORD dwFlags, LPCWSTR szURL, IInternetSecurityManager *pSecMgr)
     * }
     */
    public static int CoInternetIsFeatureEnabledForUrl(int FeatureEntry, int dwFlags, MemorySegment szURL, MemorySegment pSecMgr) {
        var mh$ = CoInternetIsFeatureEnabledForUrl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInternetIsFeatureEnabledForUrl", FeatureEntry, dwFlags, szURL, pSecMgr);
            }
            return (int)mh$.invokeExact(FeatureEntry, dwFlags, szURL, pSecMgr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoInternetIsFeatureEnabledForIUri {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_INT,
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("CoInternetIsFeatureEnabledForIUri"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetIsFeatureEnabledForIUri(INTERNETFEATURELIST FeatureEntry, DWORD dwFlags, IUri *pIUri, IInternetSecurityManagerEx2 *pSecMgr)
     * }
     */
    public static FunctionDescriptor CoInternetIsFeatureEnabledForIUri$descriptor() {
        return CoInternetIsFeatureEnabledForIUri.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetIsFeatureEnabledForIUri(INTERNETFEATURELIST FeatureEntry, DWORD dwFlags, IUri *pIUri, IInternetSecurityManagerEx2 *pSecMgr)
     * }
     */
    public static MethodHandle CoInternetIsFeatureEnabledForIUri$handle() {
        return CoInternetIsFeatureEnabledForIUri.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CoInternetIsFeatureEnabledForIUri(INTERNETFEATURELIST FeatureEntry, DWORD dwFlags, IUri *pIUri, IInternetSecurityManagerEx2 *pSecMgr)
     * }
     */
    public static int CoInternetIsFeatureEnabledForIUri(int FeatureEntry, int dwFlags, MemorySegment pIUri, MemorySegment pSecMgr) {
        var mh$ = CoInternetIsFeatureEnabledForIUri.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInternetIsFeatureEnabledForIUri", FeatureEntry, dwFlags, pIUri, pSecMgr);
            }
            return (int)mh$.invokeExact(FeatureEntry, dwFlags, pIUri, pSecMgr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoInternetIsFeatureZoneElevationEnabled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("CoInternetIsFeatureZoneElevationEnabled"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetIsFeatureZoneElevationEnabled(LPCWSTR szFromURL, LPCWSTR szToURL, IInternetSecurityManager *pSecMgr, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor CoInternetIsFeatureZoneElevationEnabled$descriptor() {
        return CoInternetIsFeatureZoneElevationEnabled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetIsFeatureZoneElevationEnabled(LPCWSTR szFromURL, LPCWSTR szToURL, IInternetSecurityManager *pSecMgr, DWORD dwFlags)
     * }
     */
    public static MethodHandle CoInternetIsFeatureZoneElevationEnabled$handle() {
        return CoInternetIsFeatureZoneElevationEnabled.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CoInternetIsFeatureZoneElevationEnabled(LPCWSTR szFromURL, LPCWSTR szToURL, IInternetSecurityManager *pSecMgr, DWORD dwFlags)
     * }
     */
    public static int CoInternetIsFeatureZoneElevationEnabled(MemorySegment szFromURL, MemorySegment szToURL, MemorySegment pSecMgr, int dwFlags) {
        var mh$ = CoInternetIsFeatureZoneElevationEnabled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInternetIsFeatureZoneElevationEnabled", szFromURL, szToURL, pSecMgr, dwFlags);
            }
            return (int)mh$.invokeExact(szFromURL, szToURL, pSecMgr, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CopyStgMedium {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("CopyStgMedium"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CopyStgMedium(const STGMEDIUM *pcstgmedSrc, STGMEDIUM *pstgmedDest)
     * }
     */
    public static FunctionDescriptor CopyStgMedium$descriptor() {
        return CopyStgMedium.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CopyStgMedium(const STGMEDIUM *pcstgmedSrc, STGMEDIUM *pstgmedDest)
     * }
     */
    public static MethodHandle CopyStgMedium$handle() {
        return CopyStgMedium.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CopyStgMedium(const STGMEDIUM *pcstgmedSrc, STGMEDIUM *pstgmedDest)
     * }
     */
    public static int CopyStgMedium(MemorySegment pcstgmedSrc, MemorySegment pstgmedDest) {
        var mh$ = CopyStgMedium.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CopyStgMedium", pcstgmedSrc, pstgmedDest);
            }
            return (int)mh$.invokeExact(pcstgmedSrc, pstgmedDest);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CopyBindInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("CopyBindInfo"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CopyBindInfo(const BINDINFO *pcbiSrc, BINDINFO *pbiDest)
     * }
     */
    public static FunctionDescriptor CopyBindInfo$descriptor() {
        return CopyBindInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CopyBindInfo(const BINDINFO *pcbiSrc, BINDINFO *pbiDest)
     * }
     */
    public static MethodHandle CopyBindInfo$handle() {
        return CopyBindInfo.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CopyBindInfo(const BINDINFO *pcbiSrc, BINDINFO *pbiDest)
     * }
     */
    public static int CopyBindInfo(MemorySegment pcbiSrc, MemorySegment pbiDest) {
        var mh$ = CopyBindInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CopyBindInfo", pcbiSrc, pbiDest);
            }
            return (int)mh$.invokeExact(pcbiSrc, pbiDest);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ReleaseBindInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("ReleaseBindInfo"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ReleaseBindInfo(BINDINFO *pbindinfo)
     * }
     */
    public static FunctionDescriptor ReleaseBindInfo$descriptor() {
        return ReleaseBindInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ReleaseBindInfo(BINDINFO *pbindinfo)
     * }
     */
    public static MethodHandle ReleaseBindInfo$handle() {
        return ReleaseBindInfo.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void ReleaseBindInfo(BINDINFO *pbindinfo)
     * }
     */
    public static void ReleaseBindInfo(MemorySegment pbindinfo) {
        var mh$ = ReleaseBindInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ReleaseBindInfo", pbindinfo);
            }
            mh$.invokeExact(pbindinfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEGetUserPrivateNamespaceName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("IEGetUserPrivateNamespaceName"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PWSTR IEGetUserPrivateNamespaceName()
     * }
     */
    public static FunctionDescriptor IEGetUserPrivateNamespaceName$descriptor() {
        return IEGetUserPrivateNamespaceName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PWSTR IEGetUserPrivateNamespaceName()
     * }
     */
    public static MethodHandle IEGetUserPrivateNamespaceName$handle() {
        return IEGetUserPrivateNamespaceName.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PWSTR IEGetUserPrivateNamespaceName()
     * }
     */
    public static MemorySegment IEGetUserPrivateNamespaceName() {
        var mh$ = IEGetUserPrivateNamespaceName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEGetUserPrivateNamespaceName");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoInternetCreateSecurityManager {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("CoInternetCreateSecurityManager"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetCreateSecurityManager(IServiceProvider *pSP, IInternetSecurityManager **ppSM, DWORD dwReserved)
     * }
     */
    public static FunctionDescriptor CoInternetCreateSecurityManager$descriptor() {
        return CoInternetCreateSecurityManager.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetCreateSecurityManager(IServiceProvider *pSP, IInternetSecurityManager **ppSM, DWORD dwReserved)
     * }
     */
    public static MethodHandle CoInternetCreateSecurityManager$handle() {
        return CoInternetCreateSecurityManager.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CoInternetCreateSecurityManager(IServiceProvider *pSP, IInternetSecurityManager **ppSM, DWORD dwReserved)
     * }
     */
    public static int CoInternetCreateSecurityManager(MemorySegment pSP, MemorySegment ppSM, int dwReserved) {
        var mh$ = CoInternetCreateSecurityManager.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInternetCreateSecurityManager", pSP, ppSM, dwReserved);
            }
            return (int)mh$.invokeExact(pSP, ppSM, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoInternetCreateZoneManager {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("CoInternetCreateZoneManager"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetCreateZoneManager(IServiceProvider *pSP, IInternetZoneManager **ppZM, DWORD dwReserved)
     * }
     */
    public static FunctionDescriptor CoInternetCreateZoneManager$descriptor() {
        return CoInternetCreateZoneManager.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetCreateZoneManager(IServiceProvider *pSP, IInternetZoneManager **ppZM, DWORD dwReserved)
     * }
     */
    public static MethodHandle CoInternetCreateZoneManager$handle() {
        return CoInternetCreateZoneManager.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CoInternetCreateZoneManager(IServiceProvider *pSP, IInternetZoneManager **ppZM, DWORD dwReserved)
     * }
     */
    public static int CoInternetCreateZoneManager(MemorySegment pSP, MemorySegment ppZM, int dwReserved) {
        var mh$ = CoInternetCreateZoneManager.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInternetCreateZoneManager", pSP, ppZM, dwReserved);
            }
            return (int)mh$.invokeExact(pSP, ppZM, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CLSID_InternetSecurityManager$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("CLSID_InternetSecurityManager").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_InternetSecurityManager
     * }
     */
    public static GroupLayout CLSID_InternetSecurityManager$layout() {
        return CLSID_InternetSecurityManager$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_InternetSecurityManager
     * }
     */
    public static MemorySegment CLSID_InternetSecurityManager() {
        return CLSID_InternetSecurityManager$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_InternetSecurityManager
     * }
     */
    public static void CLSID_InternetSecurityManager(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_InternetSecurityManager$constants.SEGMENT, 0L, CLSID_InternetSecurityManager$constants.LAYOUT.byteSize());
    }

    private static class CLSID_InternetZoneManager$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("CLSID_InternetZoneManager").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_InternetZoneManager
     * }
     */
    public static GroupLayout CLSID_InternetZoneManager$layout() {
        return CLSID_InternetZoneManager$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_InternetZoneManager
     * }
     */
    public static MemorySegment CLSID_InternetZoneManager() {
        return CLSID_InternetZoneManager$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_InternetZoneManager
     * }
     */
    public static void CLSID_InternetZoneManager(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_InternetZoneManager$constants.SEGMENT, 0L, CLSID_InternetZoneManager$constants.LAYOUT.byteSize());
    }

    private static class CLSID_PersistentZoneIdentifier$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("CLSID_PersistentZoneIdentifier").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_PersistentZoneIdentifier
     * }
     */
    public static GroupLayout CLSID_PersistentZoneIdentifier$layout() {
        return CLSID_PersistentZoneIdentifier$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_PersistentZoneIdentifier
     * }
     */
    public static MemorySegment CLSID_PersistentZoneIdentifier() {
        return CLSID_PersistentZoneIdentifier$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_PersistentZoneIdentifier
     * }
     */
    public static void CLSID_PersistentZoneIdentifier(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_PersistentZoneIdentifier$constants.SEGMENT, 0L, CLSID_PersistentZoneIdentifier$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IInternetSecurityMgrSite$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IInternetSecurityMgrSite").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetSecurityMgrSite
     * }
     */
    public static GroupLayout IID_IInternetSecurityMgrSite$layout() {
        return IID_IInternetSecurityMgrSite$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetSecurityMgrSite
     * }
     */
    public static MemorySegment IID_IInternetSecurityMgrSite() {
        return IID_IInternetSecurityMgrSite$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetSecurityMgrSite
     * }
     */
    public static void IID_IInternetSecurityMgrSite(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternetSecurityMgrSite$constants.SEGMENT, 0L, IID_IInternetSecurityMgrSite$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    private static final int PUAF_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_DEFAULT = 0
     * }
     */
    public static int PUAF_DEFAULT() {
        return PUAF_DEFAULT;
    }
    private static final int PUAF_NOUI = (int)1L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_NOUI = 1
     * }
     */
    public static int PUAF_NOUI() {
        return PUAF_NOUI;
    }
    private static final int PUAF_ISFILE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_ISFILE = 2
     * }
     */
    public static int PUAF_ISFILE() {
        return PUAF_ISFILE;
    }
    private static final int PUAF_WARN_IF_DENIED = (int)4L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_WARN_IF_DENIED = 4
     * }
     */
    public static int PUAF_WARN_IF_DENIED() {
        return PUAF_WARN_IF_DENIED;
    }
    private static final int PUAF_FORCEUI_FOREGROUND = (int)8L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_FORCEUI_FOREGROUND = 8
     * }
     */
    public static int PUAF_FORCEUI_FOREGROUND() {
        return PUAF_FORCEUI_FOREGROUND;
    }
    private static final int PUAF_CHECK_TIFS = (int)16L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_CHECK_TIFS = 16
     * }
     */
    public static int PUAF_CHECK_TIFS() {
        return PUAF_CHECK_TIFS;
    }
    private static final int PUAF_DONTCHECKBOXINDIALOG = (int)32L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_DONTCHECKBOXINDIALOG = 32
     * }
     */
    public static int PUAF_DONTCHECKBOXINDIALOG() {
        return PUAF_DONTCHECKBOXINDIALOG;
    }
    private static final int PUAF_TRUSTED = (int)64L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_TRUSTED = 64
     * }
     */
    public static int PUAF_TRUSTED() {
        return PUAF_TRUSTED;
    }
    private static final int PUAF_ACCEPT_WILDCARD_SCHEME = (int)128L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_ACCEPT_WILDCARD_SCHEME = 128
     * }
     */
    public static int PUAF_ACCEPT_WILDCARD_SCHEME() {
        return PUAF_ACCEPT_WILDCARD_SCHEME;
    }
    private static final int PUAF_ENFORCERESTRICTED = (int)256L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_ENFORCERESTRICTED = 256
     * }
     */
    public static int PUAF_ENFORCERESTRICTED() {
        return PUAF_ENFORCERESTRICTED;
    }
    private static final int PUAF_NOSAVEDFILECHECK = (int)512L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_NOSAVEDFILECHECK = 512
     * }
     */
    public static int PUAF_NOSAVEDFILECHECK() {
        return PUAF_NOSAVEDFILECHECK;
    }
    private static final int PUAF_REQUIRESAVEDFILECHECK = (int)1024L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_REQUIRESAVEDFILECHECK = 1024
     * }
     */
    public static int PUAF_REQUIRESAVEDFILECHECK() {
        return PUAF_REQUIRESAVEDFILECHECK;
    }
    private static final int PUAF_DONT_USE_CACHE = (int)4096L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_DONT_USE_CACHE = 4096
     * }
     */
    public static int PUAF_DONT_USE_CACHE() {
        return PUAF_DONT_USE_CACHE;
    }
    private static final int PUAF_RESERVED1 = (int)8192L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_RESERVED1 = 8192
     * }
     */
    public static int PUAF_RESERVED1() {
        return PUAF_RESERVED1;
    }
    private static final int PUAF_RESERVED2 = (int)16384L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_RESERVED2 = 16384
     * }
     */
    public static int PUAF_RESERVED2() {
        return PUAF_RESERVED2;
    }
    private static final int PUAF_LMZ_UNLOCKED = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_LMZ_UNLOCKED = 65536
     * }
     */
    public static int PUAF_LMZ_UNLOCKED() {
        return PUAF_LMZ_UNLOCKED;
    }
    private static final int PUAF_LMZ_LOCKED = (int)131072L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_LMZ_LOCKED = 131072
     * }
     */
    public static int PUAF_LMZ_LOCKED() {
        return PUAF_LMZ_LOCKED;
    }
    private static final int PUAF_DEFAULTZONEPOL = (int)262144L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_DEFAULTZONEPOL = 262144
     * }
     */
    public static int PUAF_DEFAULTZONEPOL() {
        return PUAF_DEFAULTZONEPOL;
    }
    private static final int PUAF_NPL_USE_LOCKED_IF_RESTRICTED = (int)524288L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_NPL_USE_LOCKED_IF_RESTRICTED = 524288
     * }
     */
    public static int PUAF_NPL_USE_LOCKED_IF_RESTRICTED() {
        return PUAF_NPL_USE_LOCKED_IF_RESTRICTED;
    }
    private static final int PUAF_NOUIIFLOCKED = (int)1048576L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_NOUIIFLOCKED = 1048576
     * }
     */
    public static int PUAF_NOUIIFLOCKED() {
        return PUAF_NOUIIFLOCKED;
    }
    private static final int PUAF_DRAGPROTOCOLCHECK = (int)2097152L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_DRAGPROTOCOLCHECK = 2097152
     * }
     */
    public static int PUAF_DRAGPROTOCOLCHECK() {
        return PUAF_DRAGPROTOCOLCHECK;
    }
    private static final int PUAFOUT_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0002.PUAFOUT_DEFAULT = 0
     * }
     */
    public static int PUAFOUT_DEFAULT() {
        return PUAFOUT_DEFAULT;
    }
    private static final int PUAFOUT_ISLOCKZONEPOLICY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0002.PUAFOUT_ISLOCKZONEPOLICY = 1
     * }
     */
    public static int PUAFOUT_ISLOCKZONEPOLICY() {
        return PUAFOUT_ISLOCKZONEPOLICY;
    }
    private static final int SZM_CREATE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0003.SZM_CREATE = 0
     * }
     */
    public static int SZM_CREATE() {
        return SZM_CREATE;
    }
    private static final int SZM_DELETE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0003.SZM_DELETE = 1
     * }
     */
    public static int SZM_DELETE() {
        return SZM_DELETE;
    }

    private static class IID_IInternetSecurityManager$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IInternetSecurityManager").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetSecurityManager
     * }
     */
    public static GroupLayout IID_IInternetSecurityManager$layout() {
        return IID_IInternetSecurityManager$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetSecurityManager
     * }
     */
    public static MemorySegment IID_IInternetSecurityManager() {
        return IID_IInternetSecurityManager$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetSecurityManager
     * }
     */
    public static void IID_IInternetSecurityManager(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternetSecurityManager$constants.SEGMENT, 0L, IID_IInternetSecurityManager$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IInternetSecurityManagerEx$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IInternetSecurityManagerEx").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetSecurityManagerEx
     * }
     */
    public static GroupLayout IID_IInternetSecurityManagerEx$layout() {
        return IID_IInternetSecurityManagerEx$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetSecurityManagerEx
     * }
     */
    public static MemorySegment IID_IInternetSecurityManagerEx() {
        return IID_IInternetSecurityManagerEx$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetSecurityManagerEx
     * }
     */
    public static void IID_IInternetSecurityManagerEx(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternetSecurityManagerEx$constants.SEGMENT, 0L, IID_IInternetSecurityManagerEx$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IInternetSecurityManagerEx2$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IInternetSecurityManagerEx2").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetSecurityManagerEx2
     * }
     */
    public static GroupLayout IID_IInternetSecurityManagerEx2$layout() {
        return IID_IInternetSecurityManagerEx2$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetSecurityManagerEx2
     * }
     */
    public static MemorySegment IID_IInternetSecurityManagerEx2() {
        return IID_IInternetSecurityManagerEx2$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetSecurityManagerEx2
     * }
     */
    public static void IID_IInternetSecurityManagerEx2(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternetSecurityManagerEx2$constants.SEGMENT, 0L, IID_IInternetSecurityManagerEx2$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IZoneIdentifier$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IZoneIdentifier").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IZoneIdentifier
     * }
     */
    public static GroupLayout IID_IZoneIdentifier$layout() {
        return IID_IZoneIdentifier$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IZoneIdentifier
     * }
     */
    public static MemorySegment IID_IZoneIdentifier() {
        return IID_IZoneIdentifier$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IZoneIdentifier
     * }
     */
    public static void IID_IZoneIdentifier(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IZoneIdentifier$constants.SEGMENT, 0L, IID_IZoneIdentifier$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IZoneIdentifier2$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IZoneIdentifier2").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IZoneIdentifier2
     * }
     */
    public static GroupLayout IID_IZoneIdentifier2$layout() {
        return IID_IZoneIdentifier2$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IZoneIdentifier2
     * }
     */
    public static MemorySegment IID_IZoneIdentifier2() {
        return IID_IZoneIdentifier2$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IZoneIdentifier2
     * }
     */
    public static void IID_IZoneIdentifier2(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IZoneIdentifier2$constants.SEGMENT, 0L, IID_IZoneIdentifier2$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IInternetHostSecurityManager$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IInternetHostSecurityManager").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetHostSecurityManager
     * }
     */
    public static GroupLayout IID_IInternetHostSecurityManager$layout() {
        return IID_IInternetHostSecurityManager$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetHostSecurityManager
     * }
     */
    public static MemorySegment IID_IInternetHostSecurityManager() {
        return IID_IInternetHostSecurityManager$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetHostSecurityManager
     * }
     */
    public static void IID_IInternetHostSecurityManager(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternetHostSecurityManager$constants.SEGMENT, 0L, IID_IInternetHostSecurityManager$constants.LAYOUT.byteSize());
    }

    private static class GUID_CUSTOM_LOCALMACHINEZONEUNLOCKED$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("GUID_CUSTOM_LOCALMACHINEZONEUNLOCKED").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_CUSTOM_LOCALMACHINEZONEUNLOCKED
     * }
     */
    public static GroupLayout GUID_CUSTOM_LOCALMACHINEZONEUNLOCKED$layout() {
        return GUID_CUSTOM_LOCALMACHINEZONEUNLOCKED$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_CUSTOM_LOCALMACHINEZONEUNLOCKED
     * }
     */
    public static MemorySegment GUID_CUSTOM_LOCALMACHINEZONEUNLOCKED() {
        return GUID_CUSTOM_LOCALMACHINEZONEUNLOCKED$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_CUSTOM_LOCALMACHINEZONEUNLOCKED
     * }
     */
    public static void GUID_CUSTOM_LOCALMACHINEZONEUNLOCKED(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_CUSTOM_LOCALMACHINEZONEUNLOCKED$constants.SEGMENT, 0L, GUID_CUSTOM_LOCALMACHINEZONEUNLOCKED$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IInternetZoneManager *LPURLZONEMANAGER
     * }
     */
    public static final AddressLayout LPURLZONEMANAGER = Windows_h.C_POINTER;
    private static final int URLZONE_INVALID = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum tagURLZONE.URLZONE_INVALID = -1
     * }
     */
    public static int URLZONE_INVALID() {
        return URLZONE_INVALID;
    }
    private static final int URLZONE_PREDEFINED_MIN = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagURLZONE.URLZONE_PREDEFINED_MIN = 0
     * }
     */
    public static int URLZONE_PREDEFINED_MIN() {
        return URLZONE_PREDEFINED_MIN;
    }
    private static final int URLZONE_LOCAL_MACHINE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagURLZONE.URLZONE_LOCAL_MACHINE = 0
     * }
     */
    public static int URLZONE_LOCAL_MACHINE() {
        return URLZONE_LOCAL_MACHINE;
    }
    private static final int URLZONE_INTRANET = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagURLZONE.URLZONE_INTRANET = 1
     * }
     */
    public static int URLZONE_INTRANET() {
        return URLZONE_INTRANET;
    }
    private static final int URLZONE_TRUSTED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagURLZONE.URLZONE_TRUSTED = 2
     * }
     */
    public static int URLZONE_TRUSTED() {
        return URLZONE_TRUSTED;
    }
    private static final int URLZONE_INTERNET = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagURLZONE.URLZONE_INTERNET = 3
     * }
     */
    public static int URLZONE_INTERNET() {
        return URLZONE_INTERNET;
    }
    private static final int URLZONE_UNTRUSTED = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagURLZONE.URLZONE_UNTRUSTED = 4
     * }
     */
    public static int URLZONE_UNTRUSTED() {
        return URLZONE_UNTRUSTED;
    }
    private static final int URLZONE_PREDEFINED_MAX = (int)999L;
    /**
     * {@snippet lang=c :
     * enum tagURLZONE.URLZONE_PREDEFINED_MAX = 999
     * }
     */
    public static int URLZONE_PREDEFINED_MAX() {
        return URLZONE_PREDEFINED_MAX;
    }
    private static final int URLZONE_USER_MIN = (int)1000L;
    /**
     * {@snippet lang=c :
     * enum tagURLZONE.URLZONE_USER_MIN = 1000
     * }
     */
    public static int URLZONE_USER_MIN() {
        return URLZONE_USER_MIN;
    }
    private static final int URLZONE_USER_MAX = (int)10000L;
    /**
     * {@snippet lang=c :
     * enum tagURLZONE.URLZONE_USER_MAX = 10000
     * }
     */
    public static int URLZONE_USER_MAX() {
        return URLZONE_USER_MAX;
    }
    private static final int URLTEMPLATE_CUSTOM = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagURLTEMPLATE.URLTEMPLATE_CUSTOM = 0
     * }
     */
    public static int URLTEMPLATE_CUSTOM() {
        return URLTEMPLATE_CUSTOM;
    }
    private static final int URLTEMPLATE_PREDEFINED_MIN = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum tagURLTEMPLATE.URLTEMPLATE_PREDEFINED_MIN = 65536
     * }
     */
    public static int URLTEMPLATE_PREDEFINED_MIN() {
        return URLTEMPLATE_PREDEFINED_MIN;
    }
    private static final int URLTEMPLATE_LOW = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum tagURLTEMPLATE.URLTEMPLATE_LOW = 65536
     * }
     */
    public static int URLTEMPLATE_LOW() {
        return URLTEMPLATE_LOW;
    }
    private static final int URLTEMPLATE_MEDLOW = (int)66816L;
    /**
     * {@snippet lang=c :
     * enum tagURLTEMPLATE.URLTEMPLATE_MEDLOW = 66816
     * }
     */
    public static int URLTEMPLATE_MEDLOW() {
        return URLTEMPLATE_MEDLOW;
    }
    private static final int URLTEMPLATE_MEDIUM = (int)69632L;
    /**
     * {@snippet lang=c :
     * enum tagURLTEMPLATE.URLTEMPLATE_MEDIUM = 69632
     * }
     */
    public static int URLTEMPLATE_MEDIUM() {
        return URLTEMPLATE_MEDIUM;
    }
    private static final int URLTEMPLATE_MEDHIGH = (int)70912L;
    /**
     * {@snippet lang=c :
     * enum tagURLTEMPLATE.URLTEMPLATE_MEDHIGH = 70912
     * }
     */
    public static int URLTEMPLATE_MEDHIGH() {
        return URLTEMPLATE_MEDHIGH;
    }
    private static final int URLTEMPLATE_HIGH = (int)73728L;
    /**
     * {@snippet lang=c :
     * enum tagURLTEMPLATE.URLTEMPLATE_HIGH = 73728
     * }
     */
    public static int URLTEMPLATE_HIGH() {
        return URLTEMPLATE_HIGH;
    }
    private static final int URLTEMPLATE_PREDEFINED_MAX = (int)131072L;
    /**
     * {@snippet lang=c :
     * enum tagURLTEMPLATE.URLTEMPLATE_PREDEFINED_MAX = 131072
     * }
     */
    public static int URLTEMPLATE_PREDEFINED_MAX() {
        return URLTEMPLATE_PREDEFINED_MAX;
    }
    private static final int MAX_ZONE_PATH = (int)260L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetZoneManager_0001.MAX_ZONE_PATH = 260
     * }
     */
    public static int MAX_ZONE_PATH() {
        return MAX_ZONE_PATH;
    }
    private static final int MAX_ZONE_DESCRIPTION = (int)200L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetZoneManager_0001.MAX_ZONE_DESCRIPTION = 200
     * }
     */
    public static int MAX_ZONE_DESCRIPTION() {
        return MAX_ZONE_DESCRIPTION;
    }
    private static final int ZAFLAGS_CUSTOM_EDIT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetZoneManager_0002.ZAFLAGS_CUSTOM_EDIT = 1
     * }
     */
    public static int ZAFLAGS_CUSTOM_EDIT() {
        return ZAFLAGS_CUSTOM_EDIT;
    }
    private static final int ZAFLAGS_ADD_SITES = (int)2L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetZoneManager_0002.ZAFLAGS_ADD_SITES = 2
     * }
     */
    public static int ZAFLAGS_ADD_SITES() {
        return ZAFLAGS_ADD_SITES;
    }
    private static final int ZAFLAGS_REQUIRE_VERIFICATION = (int)4L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetZoneManager_0002.ZAFLAGS_REQUIRE_VERIFICATION = 4
     * }
     */
    public static int ZAFLAGS_REQUIRE_VERIFICATION() {
        return ZAFLAGS_REQUIRE_VERIFICATION;
    }
    private static final int ZAFLAGS_INCLUDE_PROXY_OVERRIDE = (int)8L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetZoneManager_0002.ZAFLAGS_INCLUDE_PROXY_OVERRIDE = 8
     * }
     */
    public static int ZAFLAGS_INCLUDE_PROXY_OVERRIDE() {
        return ZAFLAGS_INCLUDE_PROXY_OVERRIDE;
    }
    private static final int ZAFLAGS_INCLUDE_INTRANET_SITES = (int)16L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetZoneManager_0002.ZAFLAGS_INCLUDE_INTRANET_SITES = 16
     * }
     */
    public static int ZAFLAGS_INCLUDE_INTRANET_SITES() {
        return ZAFLAGS_INCLUDE_INTRANET_SITES;
    }
    private static final int ZAFLAGS_NO_UI = (int)32L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetZoneManager_0002.ZAFLAGS_NO_UI = 32
     * }
     */
    public static int ZAFLAGS_NO_UI() {
        return ZAFLAGS_NO_UI;
    }
    private static final int ZAFLAGS_SUPPORTS_VERIFICATION = (int)64L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetZoneManager_0002.ZAFLAGS_SUPPORTS_VERIFICATION = 64
     * }
     */
    public static int ZAFLAGS_SUPPORTS_VERIFICATION() {
        return ZAFLAGS_SUPPORTS_VERIFICATION;
    }
    private static final int ZAFLAGS_UNC_AS_INTRANET = (int)128L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetZoneManager_0002.ZAFLAGS_UNC_AS_INTRANET = 128
     * }
     */
    public static int ZAFLAGS_UNC_AS_INTRANET() {
        return ZAFLAGS_UNC_AS_INTRANET;
    }
    private static final int ZAFLAGS_DETECT_INTRANET = (int)256L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetZoneManager_0002.ZAFLAGS_DETECT_INTRANET = 256
     * }
     */
    public static int ZAFLAGS_DETECT_INTRANET() {
        return ZAFLAGS_DETECT_INTRANET;
    }
    private static final int ZAFLAGS_USE_LOCKED_ZONES = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetZoneManager_0002.ZAFLAGS_USE_LOCKED_ZONES = 65536
     * }
     */
    public static int ZAFLAGS_USE_LOCKED_ZONES() {
        return ZAFLAGS_USE_LOCKED_ZONES;
    }
    private static final int ZAFLAGS_VERIFY_TEMPLATE_SETTINGS = (int)131072L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetZoneManager_0002.ZAFLAGS_VERIFY_TEMPLATE_SETTINGS = 131072
     * }
     */
    public static int ZAFLAGS_VERIFY_TEMPLATE_SETTINGS() {
        return ZAFLAGS_VERIFY_TEMPLATE_SETTINGS;
    }
    private static final int ZAFLAGS_NO_CACHE = (int)262144L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetZoneManager_0002.ZAFLAGS_NO_CACHE = 262144
     * }
     */
    public static int ZAFLAGS_NO_CACHE() {
        return ZAFLAGS_NO_CACHE;
    }
    /**
     * {@snippet lang=c :
     * typedef struct _ZONEATTRIBUTES {
     *     ULONG cbSize;
     *     WCHAR szDisplayName[260];
     *     WCHAR szDescription[200];
     *     WCHAR szIconPath[260];
     *     DWORD dwTemplateMinLevel;
     *     DWORD dwTemplateRecommended;
     *     DWORD dwTemplateCurrentLevel;
     *     DWORD dwFlags;
     * } *LPZONEATTRIBUTES
     * }
     */
    public static final AddressLayout LPZONEATTRIBUTES = Windows_h.C_POINTER;
    private static final int URLZONEREG_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _URLZONEREG.URLZONEREG_DEFAULT = 0
     * }
     */
    public static int URLZONEREG_DEFAULT() {
        return URLZONEREG_DEFAULT;
    }
    private static final int URLZONEREG_HKLM = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _URLZONEREG.URLZONEREG_HKLM = 1
     * }
     */
    public static int URLZONEREG_HKLM() {
        return URLZONEREG_HKLM;
    }
    private static final int URLZONEREG_HKCU = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _URLZONEREG.URLZONEREG_HKCU = 2
     * }
     */
    public static int URLZONEREG_HKCU() {
        return URLZONEREG_HKCU;
    }

    private static class IID_IInternetZoneManager$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IInternetZoneManager").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetZoneManager
     * }
     */
    public static GroupLayout IID_IInternetZoneManager$layout() {
        return IID_IInternetZoneManager$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetZoneManager
     * }
     */
    public static MemorySegment IID_IInternetZoneManager() {
        return IID_IInternetZoneManager$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetZoneManager
     * }
     */
    public static void IID_IInternetZoneManager(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternetZoneManager$constants.SEGMENT, 0L, IID_IInternetZoneManager$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IInternetZoneManagerEx$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IInternetZoneManagerEx").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetZoneManagerEx
     * }
     */
    public static GroupLayout IID_IInternetZoneManagerEx$layout() {
        return IID_IInternetZoneManagerEx$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetZoneManagerEx
     * }
     */
    public static MemorySegment IID_IInternetZoneManagerEx() {
        return IID_IInternetZoneManagerEx$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetZoneManagerEx
     * }
     */
    public static void IID_IInternetZoneManagerEx(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternetZoneManagerEx$constants.SEGMENT, 0L, IID_IInternetZoneManagerEx$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IInternetZoneManagerEx2$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IInternetZoneManagerEx2").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetZoneManagerEx2
     * }
     */
    public static GroupLayout IID_IInternetZoneManagerEx2$layout() {
        return IID_IInternetZoneManagerEx2$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetZoneManagerEx2
     * }
     */
    public static MemorySegment IID_IInternetZoneManagerEx2() {
        return IID_IInternetZoneManagerEx2$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetZoneManagerEx2
     * }
     */
    public static void IID_IInternetZoneManagerEx2(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternetZoneManagerEx2$constants.SEGMENT, 0L, IID_IInternetZoneManagerEx2$constants.LAYOUT.byteSize());
    }

    private static class CLSID_SoftDistExt$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("CLSID_SoftDistExt").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SoftDistExt
     * }
     */
    public static GroupLayout CLSID_SoftDistExt$layout() {
        return CLSID_SoftDistExt$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SoftDistExt
     * }
     */
    public static MemorySegment CLSID_SoftDistExt() {
        return CLSID_SoftDistExt$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SoftDistExt
     * }
     */
    public static void CLSID_SoftDistExt(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_SoftDistExt$constants.SEGMENT, 0L, CLSID_SoftDistExt$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef struct _tagCODEBASEHOLD {
     *     ULONG cbSize;
     *     LPWSTR szDistUnit;
     *     LPWSTR szCodeBase;
     *     DWORD dwVersionMS;
     *     DWORD dwVersionLS;
     *     DWORD dwStyle;
     * } *LPCODEBASEHOLD
     * }
     */
    public static final AddressLayout LPCODEBASEHOLD = Windows_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _tagSOFTDISTINFO {
     *     ULONG cbSize;
     *     DWORD dwFlags;
     *     DWORD dwAdState;
     *     LPWSTR szTitle;
     *     LPWSTR szAbstract;
     *     LPWSTR szHREF;
     *     DWORD dwInstalledVersionMS;
     *     DWORD dwInstalledVersionLS;
     *     DWORD dwUpdateVersionMS;
     *     DWORD dwUpdateVersionLS;
     *     DWORD dwAdvertisedVersionMS;
     *     DWORD dwAdvertisedVersionLS;
     *     DWORD dwReserved;
     * } *LPSOFTDISTINFO
     * }
     */
    public static final AddressLayout LPSOFTDISTINFO = Windows_h.C_POINTER;

    private static class __MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_ISoftDistExt$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_ISoftDistExt").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISoftDistExt
     * }
     */
    public static GroupLayout IID_ISoftDistExt$layout() {
        return IID_ISoftDistExt$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISoftDistExt
     * }
     */
    public static MemorySegment IID_ISoftDistExt() {
        return IID_ISoftDistExt$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISoftDistExt
     * }
     */
    public static void IID_ISoftDistExt(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ISoftDistExt$constants.SEGMENT, 0L, IID_ISoftDistExt$constants.LAYOUT.byteSize());
    }

    private static class GetSoftwareUpdateInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("GetSoftwareUpdateInfo"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT GetSoftwareUpdateInfo(LPCWSTR szDistUnit, LPSOFTDISTINFO psdi)
     * }
     */
    public static FunctionDescriptor GetSoftwareUpdateInfo$descriptor() {
        return GetSoftwareUpdateInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT GetSoftwareUpdateInfo(LPCWSTR szDistUnit, LPSOFTDISTINFO psdi)
     * }
     */
    public static MethodHandle GetSoftwareUpdateInfo$handle() {
        return GetSoftwareUpdateInfo.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT GetSoftwareUpdateInfo(LPCWSTR szDistUnit, LPSOFTDISTINFO psdi)
     * }
     */
    public static int GetSoftwareUpdateInfo(MemorySegment szDistUnit, MemorySegment psdi) {
        var mh$ = GetSoftwareUpdateInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetSoftwareUpdateInfo", szDistUnit, psdi);
            }
            return (int)mh$.invokeExact(szDistUnit, psdi);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SetSoftwareUpdateAdvertisementState {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_LONG,
            Windows_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("SetSoftwareUpdateAdvertisementState"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SetSoftwareUpdateAdvertisementState(LPCWSTR szDistUnit, DWORD dwAdState, DWORD dwAdvertisedVersionMS, DWORD dwAdvertisedVersionLS)
     * }
     */
    public static FunctionDescriptor SetSoftwareUpdateAdvertisementState$descriptor() {
        return SetSoftwareUpdateAdvertisementState.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SetSoftwareUpdateAdvertisementState(LPCWSTR szDistUnit, DWORD dwAdState, DWORD dwAdvertisedVersionMS, DWORD dwAdvertisedVersionLS)
     * }
     */
    public static MethodHandle SetSoftwareUpdateAdvertisementState$handle() {
        return SetSoftwareUpdateAdvertisementState.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT SetSoftwareUpdateAdvertisementState(LPCWSTR szDistUnit, DWORD dwAdState, DWORD dwAdvertisedVersionMS, DWORD dwAdvertisedVersionLS)
     * }
     */
    public static int SetSoftwareUpdateAdvertisementState(MemorySegment szDistUnit, int dwAdState, int dwAdvertisedVersionMS, int dwAdvertisedVersionLS) {
        var mh$ = SetSoftwareUpdateAdvertisementState.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SetSoftwareUpdateAdvertisementState", szDistUnit, dwAdState, dwAdvertisedVersionMS, dwAdvertisedVersionLS);
            }
            return (int)mh$.invokeExact(szDistUnit, dwAdState, dwAdvertisedVersionMS, dwAdvertisedVersionLS);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef ICatalogFileInfo *LPCATALOGFILEINFO
     * }
     */
    public static final AddressLayout LPCATALOGFILEINFO = Windows_h.C_POINTER;

    private static class IID_ICatalogFileInfo$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_ICatalogFileInfo").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICatalogFileInfo
     * }
     */
    public static GroupLayout IID_ICatalogFileInfo$layout() {
        return IID_ICatalogFileInfo$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICatalogFileInfo
     * }
     */
    public static MemorySegment IID_ICatalogFileInfo() {
        return IID_ICatalogFileInfo$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICatalogFileInfo
     * }
     */
    public static void IID_ICatalogFileInfo(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ICatalogFileInfo$constants.SEGMENT, 0L, IID_ICatalogFileInfo$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IDataFilter *LPDATAFILTER
     * }
     */
    public static final AddressLayout LPDATAFILTER = Windows_h.C_POINTER;

    private static class IID_IDataFilter$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IDataFilter").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDataFilter
     * }
     */
    public static GroupLayout IID_IDataFilter$layout() {
        return IID_IDataFilter$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDataFilter
     * }
     */
    public static MemorySegment IID_IDataFilter() {
        return IID_IDataFilter$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDataFilter
     * }
     */
    public static void IID_IDataFilter(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IDataFilter$constants.SEGMENT, 0L, IID_IDataFilter$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IEncodingFilterFactory *LPENCODINGFILTERFACTORY
     * }
     */
    public static final AddressLayout LPENCODINGFILTERFACTORY = Windows_h.C_POINTER;

    private static class IID_IEncodingFilterFactory$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IEncodingFilterFactory").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEncodingFilterFactory
     * }
     */
    public static GroupLayout IID_IEncodingFilterFactory$layout() {
        return IID_IEncodingFilterFactory$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEncodingFilterFactory
     * }
     */
    public static MemorySegment IID_IEncodingFilterFactory() {
        return IID_IEncodingFilterFactory$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEncodingFilterFactory
     * }
     */
    public static void IID_IEncodingFilterFactory(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IEncodingFilterFactory$constants.SEGMENT, 0L, IID_IEncodingFilterFactory$constants.LAYOUT.byteSize());
    }

    private static class IsLoggingEnabledA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_INT,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("IsLoggingEnabledA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL IsLoggingEnabledA(LPCSTR pszUrl)
     * }
     */
    public static FunctionDescriptor IsLoggingEnabledA$descriptor() {
        return IsLoggingEnabledA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL IsLoggingEnabledA(LPCSTR pszUrl)
     * }
     */
    public static MethodHandle IsLoggingEnabledA$handle() {
        return IsLoggingEnabledA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL IsLoggingEnabledA(LPCSTR pszUrl)
     * }
     */
    public static int IsLoggingEnabledA(MemorySegment pszUrl) {
        var mh$ = IsLoggingEnabledA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IsLoggingEnabledA", pszUrl);
            }
            return (int)mh$.invokeExact(pszUrl);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IsLoggingEnabledW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_INT,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("IsLoggingEnabledW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL IsLoggingEnabledW(LPCWSTR pwszUrl)
     * }
     */
    public static FunctionDescriptor IsLoggingEnabledW$descriptor() {
        return IsLoggingEnabledW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL IsLoggingEnabledW(LPCWSTR pwszUrl)
     * }
     */
    public static MethodHandle IsLoggingEnabledW$handle() {
        return IsLoggingEnabledW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL IsLoggingEnabledW(LPCWSTR pwszUrl)
     * }
     */
    public static int IsLoggingEnabledW(MemorySegment pwszUrl) {
        var mh$ = IsLoggingEnabledW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IsLoggingEnabledW", pwszUrl);
            }
            return (int)mh$.invokeExact(pwszUrl);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _tagHIT_LOGGING_INFO {
     *     DWORD dwStructSize;
     *     LPSTR lpszLoggedUrlName;
     *     SYSTEMTIME StartTime;
     *     SYSTEMTIME EndTime;
     *     LPSTR lpszExtendedInfo;
     * } *LPHIT_LOGGING_INFO
     * }
     */
    public static final AddressLayout LPHIT_LOGGING_INFO = Windows_h.C_POINTER;

    private static class WriteHitLogging {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_INT,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("WriteHitLogging"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL WriteHitLogging(LPHIT_LOGGING_INFO lpLogginginfo)
     * }
     */
    public static FunctionDescriptor WriteHitLogging$descriptor() {
        return WriteHitLogging.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL WriteHitLogging(LPHIT_LOGGING_INFO lpLogginginfo)
     * }
     */
    public static MethodHandle WriteHitLogging$handle() {
        return WriteHitLogging.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL WriteHitLogging(LPHIT_LOGGING_INFO lpLogginginfo)
     * }
     */
    public static int WriteHitLogging(MemorySegment lpLogginginfo) {
        var mh$ = WriteHitLogging.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WriteHitLogging", lpLogginginfo);
            }
            return (int)mh$.invokeExact(lpLogginginfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GUID_CUSTOM_CONFIRMOBJECTSAFETY$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("GUID_CUSTOM_CONFIRMOBJECTSAFETY").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_CUSTOM_CONFIRMOBJECTSAFETY
     * }
     */
    public static GroupLayout GUID_CUSTOM_CONFIRMOBJECTSAFETY$layout() {
        return GUID_CUSTOM_CONFIRMOBJECTSAFETY$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_CUSTOM_CONFIRMOBJECTSAFETY
     * }
     */
    public static MemorySegment GUID_CUSTOM_CONFIRMOBJECTSAFETY() {
        return GUID_CUSTOM_CONFIRMOBJECTSAFETY$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_CUSTOM_CONFIRMOBJECTSAFETY
     * }
     */
    public static void GUID_CUSTOM_CONFIRMOBJECTSAFETY(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_CUSTOM_CONFIRMOBJECTSAFETY$constants.SEGMENT, 0L, GUID_CUSTOM_CONFIRMOBJECTSAFETY$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IWrappedProtocol *LPIWRAPPEDPROTOCOL
     * }
     */
    public static final AddressLayout LPIWRAPPEDPROTOCOL = Windows_h.C_POINTER;

    private static class IID_IWrappedProtocol$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IWrappedProtocol").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IWrappedProtocol
     * }
     */
    public static GroupLayout IID_IWrappedProtocol$layout() {
        return IID_IWrappedProtocol$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IWrappedProtocol
     * }
     */
    public static MemorySegment IID_IWrappedProtocol() {
        return IID_IWrappedProtocol$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IWrappedProtocol
     * }
     */
    public static void IID_IWrappedProtocol(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IWrappedProtocol$constants.SEGMENT, 0L, IID_IWrappedProtocol$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IGetBindHandle *LPGETBINDHANDLE
     * }
     */
    public static final AddressLayout LPGETBINDHANDLE = Windows_h.C_POINTER;
    private static final int BINDHANDLETYPES_APPCACHE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IGetBindHandle_0001.BINDHANDLETYPES_APPCACHE = 0
     * }
     */
    public static int BINDHANDLETYPES_APPCACHE() {
        return BINDHANDLETYPES_APPCACHE;
    }
    private static final int BINDHANDLETYPES_DEPENDENCY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IGetBindHandle_0001.BINDHANDLETYPES_DEPENDENCY = 1
     * }
     */
    public static int BINDHANDLETYPES_DEPENDENCY() {
        return BINDHANDLETYPES_DEPENDENCY;
    }
    private static final int BINDHANDLETYPES_COUNT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IGetBindHandle_0001.BINDHANDLETYPES_COUNT = 2
     * }
     */
    public static int BINDHANDLETYPES_COUNT() {
        return BINDHANDLETYPES_COUNT;
    }

    private static class IID_IGetBindHandle$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IGetBindHandle").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IGetBindHandle
     * }
     */
    public static GroupLayout IID_IGetBindHandle$layout() {
        return IID_IGetBindHandle$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IGetBindHandle
     * }
     */
    public static MemorySegment IID_IGetBindHandle() {
        return IID_IGetBindHandle$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IGetBindHandle
     * }
     */
    public static void IID_IGetBindHandle(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IGetBindHandle$constants.SEGMENT, 0L, IID_IGetBindHandle$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef struct _tagPROTOCOL_ARGUMENT {
     *     LPCWSTR szMethod;
     *     LPCWSTR szTargetUrl;
     * } *LPPROTOCOL_ARGUMENT
     * }
     */
    public static final AddressLayout LPPROTOCOL_ARGUMENT = Windows_h.C_POINTER;

    private static class __MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IBindCallbackRedirect *LPBINDCALLBACKREDIRECT
     * }
     */
    public static final AddressLayout LPBINDCALLBACKREDIRECT = Windows_h.C_POINTER;

    private static class IID_IBindCallbackRedirect$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IBindCallbackRedirect").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBindCallbackRedirect
     * }
     */
    public static GroupLayout IID_IBindCallbackRedirect$layout() {
        return IID_IBindCallbackRedirect$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBindCallbackRedirect
     * }
     */
    public static MemorySegment IID_IBindCallbackRedirect() {
        return IID_IBindCallbackRedirect$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBindCallbackRedirect
     * }
     */
    public static void IID_IBindCallbackRedirect(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IBindCallbackRedirect$constants.SEGMENT, 0L, IID_IBindCallbackRedirect$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IBindHttpSecurity$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_IBindHttpSecurity").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBindHttpSecurity
     * }
     */
    public static GroupLayout IID_IBindHttpSecurity$layout() {
        return IID_IBindHttpSecurity$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBindHttpSecurity
     * }
     */
    public static MemorySegment IID_IBindHttpSecurity() {
        return IID_IBindHttpSecurity$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBindHttpSecurity
     * }
     */
    public static void IID_IBindHttpSecurity(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IBindHttpSecurity$constants.SEGMENT, 0L, IID_IBindHttpSecurity$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0055_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0055_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0055_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0055_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0055_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0055_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0055_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0055_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0055_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0055_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0055_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0055_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0055_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0055_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0055_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0055_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0055_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_urlmon_0000_0055_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0055_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0055_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0055_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0055_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0055_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0055_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0055_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0055_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0055_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0055_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0055_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0055_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0055_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0055_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IBinding_GetBindResult_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("IBinding_GetBindResult_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBinding_GetBindResult_Proxy(IBinding *This, CLSID *pclsidProtocol, DWORD *pdwResult, LPOLESTR *pszResult, DWORD *pdwReserved)
     * }
     */
    public static FunctionDescriptor IBinding_GetBindResult_Proxy$descriptor() {
        return IBinding_GetBindResult_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBinding_GetBindResult_Proxy(IBinding *This, CLSID *pclsidProtocol, DWORD *pdwResult, LPOLESTR *pszResult, DWORD *pdwReserved)
     * }
     */
    public static MethodHandle IBinding_GetBindResult_Proxy$handle() {
        return IBinding_GetBindResult_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IBinding_GetBindResult_Proxy(IBinding *This, CLSID *pclsidProtocol, DWORD *pdwResult, LPOLESTR *pszResult, DWORD *pdwReserved)
     * }
     */
    public static int IBinding_GetBindResult_Proxy(MemorySegment This, MemorySegment pclsidProtocol, MemorySegment pdwResult, MemorySegment pszResult, MemorySegment pdwReserved) {
        var mh$ = IBinding_GetBindResult_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBinding_GetBindResult_Proxy", This, pclsidProtocol, pdwResult, pszResult, pdwReserved);
            }
            return (int)mh$.invokeExact(This, pclsidProtocol, pdwResult, pszResult, pdwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBinding_GetBindResult_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("IBinding_GetBindResult_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBinding_GetBindResult_Stub(IBinding *This, CLSID *pclsidProtocol, DWORD *pdwResult, LPOLESTR *pszResult, DWORD dwReserved)
     * }
     */
    public static FunctionDescriptor IBinding_GetBindResult_Stub$descriptor() {
        return IBinding_GetBindResult_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBinding_GetBindResult_Stub(IBinding *This, CLSID *pclsidProtocol, DWORD *pdwResult, LPOLESTR *pszResult, DWORD dwReserved)
     * }
     */
    public static MethodHandle IBinding_GetBindResult_Stub$handle() {
        return IBinding_GetBindResult_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IBinding_GetBindResult_Stub(IBinding *This, CLSID *pclsidProtocol, DWORD *pdwResult, LPOLESTR *pszResult, DWORD dwReserved)
     * }
     */
    public static int IBinding_GetBindResult_Stub(MemorySegment This, MemorySegment pclsidProtocol, MemorySegment pdwResult, MemorySegment pszResult, int dwReserved) {
        var mh$ = IBinding_GetBindResult_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBinding_GetBindResult_Stub", This, pclsidProtocol, pdwResult, pszResult, dwReserved);
            }
            return (int)mh$.invokeExact(This, pclsidProtocol, pdwResult, pszResult, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindStatusCallback_GetBindInfo_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("IBindStatusCallback_GetBindInfo_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallback_GetBindInfo_Proxy(IBindStatusCallback *This, DWORD *grfBINDF, BINDINFO *pbindinfo)
     * }
     */
    public static FunctionDescriptor IBindStatusCallback_GetBindInfo_Proxy$descriptor() {
        return IBindStatusCallback_GetBindInfo_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallback_GetBindInfo_Proxy(IBindStatusCallback *This, DWORD *grfBINDF, BINDINFO *pbindinfo)
     * }
     */
    public static MethodHandle IBindStatusCallback_GetBindInfo_Proxy$handle() {
        return IBindStatusCallback_GetBindInfo_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IBindStatusCallback_GetBindInfo_Proxy(IBindStatusCallback *This, DWORD *grfBINDF, BINDINFO *pbindinfo)
     * }
     */
    public static int IBindStatusCallback_GetBindInfo_Proxy(MemorySegment This, MemorySegment grfBINDF, MemorySegment pbindinfo) {
        var mh$ = IBindStatusCallback_GetBindInfo_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindStatusCallback_GetBindInfo_Proxy", This, grfBINDF, pbindinfo);
            }
            return (int)mh$.invokeExact(This, grfBINDF, pbindinfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindStatusCallback_GetBindInfo_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("IBindStatusCallback_GetBindInfo_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallback_GetBindInfo_Stub(IBindStatusCallback *This, DWORD *grfBINDF, RemBINDINFO *pbindinfo, RemSTGMEDIUM *pstgmed)
     * }
     */
    public static FunctionDescriptor IBindStatusCallback_GetBindInfo_Stub$descriptor() {
        return IBindStatusCallback_GetBindInfo_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallback_GetBindInfo_Stub(IBindStatusCallback *This, DWORD *grfBINDF, RemBINDINFO *pbindinfo, RemSTGMEDIUM *pstgmed)
     * }
     */
    public static MethodHandle IBindStatusCallback_GetBindInfo_Stub$handle() {
        return IBindStatusCallback_GetBindInfo_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IBindStatusCallback_GetBindInfo_Stub(IBindStatusCallback *This, DWORD *grfBINDF, RemBINDINFO *pbindinfo, RemSTGMEDIUM *pstgmed)
     * }
     */
    public static int IBindStatusCallback_GetBindInfo_Stub(MemorySegment This, MemorySegment grfBINDF, MemorySegment pbindinfo, MemorySegment pstgmed) {
        var mh$ = IBindStatusCallback_GetBindInfo_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindStatusCallback_GetBindInfo_Stub", This, grfBINDF, pbindinfo, pstgmed);
            }
            return (int)mh$.invokeExact(This, grfBINDF, pbindinfo, pstgmed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindStatusCallback_OnDataAvailable_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("IBindStatusCallback_OnDataAvailable_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallback_OnDataAvailable_Proxy(IBindStatusCallback *This, DWORD grfBSCF, DWORD dwSize, FORMATETC *pformatetc, STGMEDIUM *pstgmed)
     * }
     */
    public static FunctionDescriptor IBindStatusCallback_OnDataAvailable_Proxy$descriptor() {
        return IBindStatusCallback_OnDataAvailable_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallback_OnDataAvailable_Proxy(IBindStatusCallback *This, DWORD grfBSCF, DWORD dwSize, FORMATETC *pformatetc, STGMEDIUM *pstgmed)
     * }
     */
    public static MethodHandle IBindStatusCallback_OnDataAvailable_Proxy$handle() {
        return IBindStatusCallback_OnDataAvailable_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IBindStatusCallback_OnDataAvailable_Proxy(IBindStatusCallback *This, DWORD grfBSCF, DWORD dwSize, FORMATETC *pformatetc, STGMEDIUM *pstgmed)
     * }
     */
    public static int IBindStatusCallback_OnDataAvailable_Proxy(MemorySegment This, int grfBSCF, int dwSize, MemorySegment pformatetc, MemorySegment pstgmed) {
        var mh$ = IBindStatusCallback_OnDataAvailable_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindStatusCallback_OnDataAvailable_Proxy", This, grfBSCF, dwSize, pformatetc, pstgmed);
            }
            return (int)mh$.invokeExact(This, grfBSCF, dwSize, pformatetc, pstgmed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindStatusCallback_OnDataAvailable_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("IBindStatusCallback_OnDataAvailable_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallback_OnDataAvailable_Stub(IBindStatusCallback *This, DWORD grfBSCF, DWORD dwSize, RemFORMATETC *pformatetc, RemSTGMEDIUM *pstgmed)
     * }
     */
    public static FunctionDescriptor IBindStatusCallback_OnDataAvailable_Stub$descriptor() {
        return IBindStatusCallback_OnDataAvailable_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallback_OnDataAvailable_Stub(IBindStatusCallback *This, DWORD grfBSCF, DWORD dwSize, RemFORMATETC *pformatetc, RemSTGMEDIUM *pstgmed)
     * }
     */
    public static MethodHandle IBindStatusCallback_OnDataAvailable_Stub$handle() {
        return IBindStatusCallback_OnDataAvailable_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IBindStatusCallback_OnDataAvailable_Stub(IBindStatusCallback *This, DWORD grfBSCF, DWORD dwSize, RemFORMATETC *pformatetc, RemSTGMEDIUM *pstgmed)
     * }
     */
    public static int IBindStatusCallback_OnDataAvailable_Stub(MemorySegment This, int grfBSCF, int dwSize, MemorySegment pformatetc, MemorySegment pstgmed) {
        var mh$ = IBindStatusCallback_OnDataAvailable_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindStatusCallback_OnDataAvailable_Stub", This, grfBSCF, dwSize, pformatetc, pstgmed);
            }
            return (int)mh$.invokeExact(This, grfBSCF, dwSize, pformatetc, pstgmed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindStatusCallbackEx_GetBindInfoEx_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("IBindStatusCallbackEx_GetBindInfoEx_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallbackEx_GetBindInfoEx_Proxy(IBindStatusCallbackEx *This, DWORD *grfBINDF, BINDINFO *pbindinfo, DWORD *grfBINDF2, DWORD *pdwReserved)
     * }
     */
    public static FunctionDescriptor IBindStatusCallbackEx_GetBindInfoEx_Proxy$descriptor() {
        return IBindStatusCallbackEx_GetBindInfoEx_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallbackEx_GetBindInfoEx_Proxy(IBindStatusCallbackEx *This, DWORD *grfBINDF, BINDINFO *pbindinfo, DWORD *grfBINDF2, DWORD *pdwReserved)
     * }
     */
    public static MethodHandle IBindStatusCallbackEx_GetBindInfoEx_Proxy$handle() {
        return IBindStatusCallbackEx_GetBindInfoEx_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IBindStatusCallbackEx_GetBindInfoEx_Proxy(IBindStatusCallbackEx *This, DWORD *grfBINDF, BINDINFO *pbindinfo, DWORD *grfBINDF2, DWORD *pdwReserved)
     * }
     */
    public static int IBindStatusCallbackEx_GetBindInfoEx_Proxy(MemorySegment This, MemorySegment grfBINDF, MemorySegment pbindinfo, MemorySegment grfBINDF2, MemorySegment pdwReserved) {
        var mh$ = IBindStatusCallbackEx_GetBindInfoEx_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindStatusCallbackEx_GetBindInfoEx_Proxy", This, grfBINDF, pbindinfo, grfBINDF2, pdwReserved);
            }
            return (int)mh$.invokeExact(This, grfBINDF, pbindinfo, grfBINDF2, pdwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindStatusCallbackEx_GetBindInfoEx_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("IBindStatusCallbackEx_GetBindInfoEx_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallbackEx_GetBindInfoEx_Stub(IBindStatusCallbackEx *This, DWORD *grfBINDF, RemBINDINFO *pbindinfo, RemSTGMEDIUM *pstgmed, DWORD *grfBINDF2, DWORD *pdwReserved)
     * }
     */
    public static FunctionDescriptor IBindStatusCallbackEx_GetBindInfoEx_Stub$descriptor() {
        return IBindStatusCallbackEx_GetBindInfoEx_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallbackEx_GetBindInfoEx_Stub(IBindStatusCallbackEx *This, DWORD *grfBINDF, RemBINDINFO *pbindinfo, RemSTGMEDIUM *pstgmed, DWORD *grfBINDF2, DWORD *pdwReserved)
     * }
     */
    public static MethodHandle IBindStatusCallbackEx_GetBindInfoEx_Stub$handle() {
        return IBindStatusCallbackEx_GetBindInfoEx_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IBindStatusCallbackEx_GetBindInfoEx_Stub(IBindStatusCallbackEx *This, DWORD *grfBINDF, RemBINDINFO *pbindinfo, RemSTGMEDIUM *pstgmed, DWORD *grfBINDF2, DWORD *pdwReserved)
     * }
     */
    public static int IBindStatusCallbackEx_GetBindInfoEx_Stub(MemorySegment This, MemorySegment grfBINDF, MemorySegment pbindinfo, MemorySegment pstgmed, MemorySegment grfBINDF2, MemorySegment pdwReserved) {
        var mh$ = IBindStatusCallbackEx_GetBindInfoEx_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindStatusCallbackEx_GetBindInfoEx_Stub", This, grfBINDF, pbindinfo, pstgmed, grfBINDF2, pdwReserved);
            }
            return (int)mh$.invokeExact(This, grfBINDF, pbindinfo, pstgmed, grfBINDF2, pdwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IWinInetInfo_QueryOption_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("IWinInetInfo_QueryOption_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IWinInetInfo_QueryOption_Proxy(IWinInetInfo *This, DWORD dwOption, LPVOID pBuffer, DWORD *pcbBuf)
     * }
     */
    public static FunctionDescriptor IWinInetInfo_QueryOption_Proxy$descriptor() {
        return IWinInetInfo_QueryOption_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IWinInetInfo_QueryOption_Proxy(IWinInetInfo *This, DWORD dwOption, LPVOID pBuffer, DWORD *pcbBuf)
     * }
     */
    public static MethodHandle IWinInetInfo_QueryOption_Proxy$handle() {
        return IWinInetInfo_QueryOption_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IWinInetInfo_QueryOption_Proxy(IWinInetInfo *This, DWORD dwOption, LPVOID pBuffer, DWORD *pcbBuf)
     * }
     */
    public static int IWinInetInfo_QueryOption_Proxy(MemorySegment This, int dwOption, MemorySegment pBuffer, MemorySegment pcbBuf) {
        var mh$ = IWinInetInfo_QueryOption_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IWinInetInfo_QueryOption_Proxy", This, dwOption, pBuffer, pcbBuf);
            }
            return (int)mh$.invokeExact(This, dwOption, pBuffer, pcbBuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IWinInetInfo_QueryOption_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("IWinInetInfo_QueryOption_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IWinInetInfo_QueryOption_Stub(IWinInetInfo *This, DWORD dwOption, BYTE *pBuffer, DWORD *pcbBuf)
     * }
     */
    public static FunctionDescriptor IWinInetInfo_QueryOption_Stub$descriptor() {
        return IWinInetInfo_QueryOption_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IWinInetInfo_QueryOption_Stub(IWinInetInfo *This, DWORD dwOption, BYTE *pBuffer, DWORD *pcbBuf)
     * }
     */
    public static MethodHandle IWinInetInfo_QueryOption_Stub$handle() {
        return IWinInetInfo_QueryOption_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IWinInetInfo_QueryOption_Stub(IWinInetInfo *This, DWORD dwOption, BYTE *pBuffer, DWORD *pcbBuf)
     * }
     */
    public static int IWinInetInfo_QueryOption_Stub(MemorySegment This, int dwOption, MemorySegment pBuffer, MemorySegment pcbBuf) {
        var mh$ = IWinInetInfo_QueryOption_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IWinInetInfo_QueryOption_Stub", This, dwOption, pBuffer, pcbBuf);
            }
            return (int)mh$.invokeExact(This, dwOption, pBuffer, pcbBuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IWinInetHttpInfo_QueryInfo_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("IWinInetHttpInfo_QueryInfo_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IWinInetHttpInfo_QueryInfo_Proxy(IWinInetHttpInfo *This, DWORD dwOption, LPVOID pBuffer, DWORD *pcbBuf, DWORD *pdwFlags, DWORD *pdwReserved)
     * }
     */
    public static FunctionDescriptor IWinInetHttpInfo_QueryInfo_Proxy$descriptor() {
        return IWinInetHttpInfo_QueryInfo_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IWinInetHttpInfo_QueryInfo_Proxy(IWinInetHttpInfo *This, DWORD dwOption, LPVOID pBuffer, DWORD *pcbBuf, DWORD *pdwFlags, DWORD *pdwReserved)
     * }
     */
    public static MethodHandle IWinInetHttpInfo_QueryInfo_Proxy$handle() {
        return IWinInetHttpInfo_QueryInfo_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IWinInetHttpInfo_QueryInfo_Proxy(IWinInetHttpInfo *This, DWORD dwOption, LPVOID pBuffer, DWORD *pcbBuf, DWORD *pdwFlags, DWORD *pdwReserved)
     * }
     */
    public static int IWinInetHttpInfo_QueryInfo_Proxy(MemorySegment This, int dwOption, MemorySegment pBuffer, MemorySegment pcbBuf, MemorySegment pdwFlags, MemorySegment pdwReserved) {
        var mh$ = IWinInetHttpInfo_QueryInfo_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IWinInetHttpInfo_QueryInfo_Proxy", This, dwOption, pBuffer, pcbBuf, pdwFlags, pdwReserved);
            }
            return (int)mh$.invokeExact(This, dwOption, pBuffer, pcbBuf, pdwFlags, pdwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IWinInetHttpInfo_QueryInfo_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("IWinInetHttpInfo_QueryInfo_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IWinInetHttpInfo_QueryInfo_Stub(IWinInetHttpInfo *This, DWORD dwOption, BYTE *pBuffer, DWORD *pcbBuf, DWORD *pdwFlags, DWORD *pdwReserved)
     * }
     */
    public static FunctionDescriptor IWinInetHttpInfo_QueryInfo_Stub$descriptor() {
        return IWinInetHttpInfo_QueryInfo_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IWinInetHttpInfo_QueryInfo_Stub(IWinInetHttpInfo *This, DWORD dwOption, BYTE *pBuffer, DWORD *pcbBuf, DWORD *pdwFlags, DWORD *pdwReserved)
     * }
     */
    public static MethodHandle IWinInetHttpInfo_QueryInfo_Stub$handle() {
        return IWinInetHttpInfo_QueryInfo_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IWinInetHttpInfo_QueryInfo_Stub(IWinInetHttpInfo *This, DWORD dwOption, BYTE *pBuffer, DWORD *pcbBuf, DWORD *pdwFlags, DWORD *pdwReserved)
     * }
     */
    public static int IWinInetHttpInfo_QueryInfo_Stub(MemorySegment This, int dwOption, MemorySegment pBuffer, MemorySegment pcbBuf, MemorySegment pdwFlags, MemorySegment pdwReserved) {
        var mh$ = IWinInetHttpInfo_QueryInfo_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IWinInetHttpInfo_QueryInfo_Stub", This, dwOption, pBuffer, pcbBuf, pdwFlags, pdwReserved);
            }
            return (int)mh$.invokeExact(This, dwOption, pBuffer, pcbBuf, pdwFlags, pdwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindHost_MonikerBindToStorage_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("IBindHost_MonikerBindToStorage_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBindHost_MonikerBindToStorage_Proxy(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID *const riid, void **ppvObj)
     * }
     */
    public static FunctionDescriptor IBindHost_MonikerBindToStorage_Proxy$descriptor() {
        return IBindHost_MonikerBindToStorage_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBindHost_MonikerBindToStorage_Proxy(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID *const riid, void **ppvObj)
     * }
     */
    public static MethodHandle IBindHost_MonikerBindToStorage_Proxy$handle() {
        return IBindHost_MonikerBindToStorage_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IBindHost_MonikerBindToStorage_Proxy(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID *const riid, void **ppvObj)
     * }
     */
    public static int IBindHost_MonikerBindToStorage_Proxy(MemorySegment This, MemorySegment pMk, MemorySegment pBC, MemorySegment pBSC, MemorySegment riid, MemorySegment ppvObj) {
        var mh$ = IBindHost_MonikerBindToStorage_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindHost_MonikerBindToStorage_Proxy", This, pMk, pBC, pBSC, riid, ppvObj);
            }
            return (int)mh$.invokeExact(This, pMk, pBC, pBSC, riid, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindHost_MonikerBindToStorage_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("IBindHost_MonikerBindToStorage_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBindHost_MonikerBindToStorage_Stub(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static FunctionDescriptor IBindHost_MonikerBindToStorage_Stub$descriptor() {
        return IBindHost_MonikerBindToStorage_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBindHost_MonikerBindToStorage_Stub(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static MethodHandle IBindHost_MonikerBindToStorage_Stub$handle() {
        return IBindHost_MonikerBindToStorage_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IBindHost_MonikerBindToStorage_Stub(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static int IBindHost_MonikerBindToStorage_Stub(MemorySegment This, MemorySegment pMk, MemorySegment pBC, MemorySegment pBSC, MemorySegment riid, MemorySegment ppvObj) {
        var mh$ = IBindHost_MonikerBindToStorage_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindHost_MonikerBindToStorage_Stub", This, pMk, pBC, pBSC, riid, ppvObj);
            }
            return (int)mh$.invokeExact(This, pMk, pBC, pBSC, riid, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindHost_MonikerBindToObject_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("IBindHost_MonikerBindToObject_Proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBindHost_MonikerBindToObject_Proxy(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID *const riid, void **ppvObj)
     * }
     */
    public static FunctionDescriptor IBindHost_MonikerBindToObject_Proxy$descriptor() {
        return IBindHost_MonikerBindToObject_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBindHost_MonikerBindToObject_Proxy(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID *const riid, void **ppvObj)
     * }
     */
    public static MethodHandle IBindHost_MonikerBindToObject_Proxy$handle() {
        return IBindHost_MonikerBindToObject_Proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IBindHost_MonikerBindToObject_Proxy(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID *const riid, void **ppvObj)
     * }
     */
    public static int IBindHost_MonikerBindToObject_Proxy(MemorySegment This, MemorySegment pMk, MemorySegment pBC, MemorySegment pBSC, MemorySegment riid, MemorySegment ppvObj) {
        var mh$ = IBindHost_MonikerBindToObject_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindHost_MonikerBindToObject_Proxy", This, pMk, pBC, pBSC, riid, ppvObj);
            }
            return (int)mh$.invokeExact(This, pMk, pBC, pBSC, riid, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindHost_MonikerBindToObject_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("IBindHost_MonikerBindToObject_Stub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBindHost_MonikerBindToObject_Stub(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static FunctionDescriptor IBindHost_MonikerBindToObject_Stub$descriptor() {
        return IBindHost_MonikerBindToObject_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBindHost_MonikerBindToObject_Stub(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static MethodHandle IBindHost_MonikerBindToObject_Stub$handle() {
        return IBindHost_MonikerBindToObject_Stub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT IBindHost_MonikerBindToObject_Stub(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static int IBindHost_MonikerBindToObject_Stub(MemorySegment This, MemorySegment pMk, MemorySegment pBC, MemorySegment pBSC, MemorySegment riid, MemorySegment ppvObj) {
        var mh$ = IBindHost_MonikerBindToObject_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindHost_MonikerBindToObject_Stub", This, pMk, pBC, pBSC, riid, ppvObj);
            }
            return (int)mh$.invokeExact(This, pMk, pBC, pBSC, riid, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int PIDMSI_STATUS_NORMAL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum PIDMSI_STATUS_VALUE.PIDMSI_STATUS_NORMAL = 0
     * }
     */
    public static int PIDMSI_STATUS_NORMAL() {
        return PIDMSI_STATUS_NORMAL;
    }
    private static final int PIDMSI_STATUS_NEW = (int)1L;
    /**
     * {@snippet lang=c :
     * enum PIDMSI_STATUS_VALUE.PIDMSI_STATUS_NEW = 1
     * }
     */
    public static int PIDMSI_STATUS_NEW() {
        return PIDMSI_STATUS_NEW;
    }
    private static final int PIDMSI_STATUS_PRELIM = (int)2L;
    /**
     * {@snippet lang=c :
     * enum PIDMSI_STATUS_VALUE.PIDMSI_STATUS_PRELIM = 2
     * }
     */
    public static int PIDMSI_STATUS_PRELIM() {
        return PIDMSI_STATUS_PRELIM;
    }
    private static final int PIDMSI_STATUS_DRAFT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum PIDMSI_STATUS_VALUE.PIDMSI_STATUS_DRAFT = 3
     * }
     */
    public static int PIDMSI_STATUS_DRAFT() {
        return PIDMSI_STATUS_DRAFT;
    }
    private static final int PIDMSI_STATUS_INPROGRESS = (int)4L;
    /**
     * {@snippet lang=c :
     * enum PIDMSI_STATUS_VALUE.PIDMSI_STATUS_INPROGRESS = 4
     * }
     */
    public static int PIDMSI_STATUS_INPROGRESS() {
        return PIDMSI_STATUS_INPROGRESS;
    }
    private static final int PIDMSI_STATUS_EDIT = (int)5L;
    /**
     * {@snippet lang=c :
     * enum PIDMSI_STATUS_VALUE.PIDMSI_STATUS_EDIT = 5
     * }
     */
    public static int PIDMSI_STATUS_EDIT() {
        return PIDMSI_STATUS_EDIT;
    }
    private static final int PIDMSI_STATUS_REVIEW = (int)6L;
    /**
     * {@snippet lang=c :
     * enum PIDMSI_STATUS_VALUE.PIDMSI_STATUS_REVIEW = 6
     * }
     */
    public static int PIDMSI_STATUS_REVIEW() {
        return PIDMSI_STATUS_REVIEW;
    }
    private static final int PIDMSI_STATUS_PROOF = (int)7L;
    /**
     * {@snippet lang=c :
     * enum PIDMSI_STATUS_VALUE.PIDMSI_STATUS_PROOF = 7
     * }
     */
    public static int PIDMSI_STATUS_PROOF() {
        return PIDMSI_STATUS_PROOF;
    }
    private static final int PIDMSI_STATUS_FINAL = (int)8L;
    /**
     * {@snippet lang=c :
     * enum PIDMSI_STATUS_VALUE.PIDMSI_STATUS_FINAL = 8
     * }
     */
    public static int PIDMSI_STATUS_FINAL() {
        return PIDMSI_STATUS_FINAL;
    }
    private static final int PIDMSI_STATUS_OTHER = (int)32767L;
    /**
     * {@snippet lang=c :
     * enum PIDMSI_STATUS_VALUE.PIDMSI_STATUS_OTHER = 32767
     * }
     */
    public static int PIDMSI_STATUS_OTHER() {
        return PIDMSI_STATUS_OTHER;
    }

    private static class StgConvertVariantToProperty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_SHORT,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_CHAR,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("StgConvertVariantToProperty"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern SERIALIZEDPROPERTYVALUE *StgConvertVariantToProperty(const PROPVARIANT *pvar, USHORT CodePage, SERIALIZEDPROPERTYVALUE *pprop, ULONG *pcb, PROPID pid, BOOLEAN fReserved, ULONG *pcIndirect)
     * }
     */
    public static FunctionDescriptor StgConvertVariantToProperty$descriptor() {
        return StgConvertVariantToProperty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern SERIALIZEDPROPERTYVALUE *StgConvertVariantToProperty(const PROPVARIANT *pvar, USHORT CodePage, SERIALIZEDPROPERTYVALUE *pprop, ULONG *pcb, PROPID pid, BOOLEAN fReserved, ULONG *pcIndirect)
     * }
     */
    public static MethodHandle StgConvertVariantToProperty$handle() {
        return StgConvertVariantToProperty.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern SERIALIZEDPROPERTYVALUE *StgConvertVariantToProperty(const PROPVARIANT *pvar, USHORT CodePage, SERIALIZEDPROPERTYVALUE *pprop, ULONG *pcb, PROPID pid, BOOLEAN fReserved, ULONG *pcIndirect)
     * }
     */
    public static MemorySegment StgConvertVariantToProperty(MemorySegment pvar, short CodePage, MemorySegment pprop, MemorySegment pcb, int pid, byte fReserved, MemorySegment pcIndirect) {
        var mh$ = StgConvertVariantToProperty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StgConvertVariantToProperty", pvar, CodePage, pprop, pcb, pid, fReserved, pcIndirect);
            }
            return (MemorySegment)mh$.invokeExact(pvar, CodePage, pprop, pcb, pid, fReserved, pcIndirect);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_propidl_0000_0004_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_propidl_0000_0004_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_propidl_0000_0004_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_propidl_0000_0004_v0_0_c_ifspec$layout() {
        return __MIDL_itf_propidl_0000_0004_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_propidl_0000_0004_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_propidl_0000_0004_v0_0_c_ifspec$segment() {
        return __MIDL_itf_propidl_0000_0004_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_propidl_0000_0004_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_propidl_0000_0004_v0_0_c_ifspec() {
        return __MIDL_itf_propidl_0000_0004_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_propidl_0000_0004_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_propidl_0000_0004_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_propidl_0000_0004_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_propidl_0000_0004_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_propidl_0000_0004_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_propidl_0000_0004_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = Windows_h.C_POINTER;
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("__MIDL_itf_propidl_0000_0004_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_propidl_0000_0004_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_propidl_0000_0004_v0_0_s_ifspec$layout() {
        return __MIDL_itf_propidl_0000_0004_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_propidl_0000_0004_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_propidl_0000_0004_v0_0_s_ifspec$segment() {
        return __MIDL_itf_propidl_0000_0004_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_propidl_0000_0004_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_propidl_0000_0004_v0_0_s_ifspec() {
        return __MIDL_itf_propidl_0000_0004_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_propidl_0000_0004_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_propidl_0000_0004_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_propidl_0000_0004_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_propidl_0000_0004_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_propidl_0000_0004_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class CreateStdProgressIndicator {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("CreateStdProgressIndicator"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateStdProgressIndicator(HWND hwndParent, LPCOLESTR pszTitle, IBindStatusCallback *pIbscCaller, IBindStatusCallback **ppIbsc)
     * }
     */
    public static FunctionDescriptor CreateStdProgressIndicator$descriptor() {
        return CreateStdProgressIndicator.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateStdProgressIndicator(HWND hwndParent, LPCOLESTR pszTitle, IBindStatusCallback *pIbscCaller, IBindStatusCallback **ppIbsc)
     * }
     */
    public static MethodHandle CreateStdProgressIndicator$handle() {
        return CreateStdProgressIndicator.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CreateStdProgressIndicator(HWND hwndParent, LPCOLESTR pszTitle, IBindStatusCallback *pIbscCaller, IBindStatusCallback **ppIbsc)
     * }
     */
    public static int CreateStdProgressIndicator(MemorySegment hwndParent, MemorySegment pszTitle, MemorySegment pIbscCaller, MemorySegment ppIbsc) {
        var mh$ = CreateStdProgressIndicator.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateStdProgressIndicator", hwndParent, pszTitle, pIbscCaller, ppIbsc);
            }
            return (int)mh$.invokeExact(hwndParent, pszTitle, pIbscCaller, ppIbsc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IID_StdOle$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = Windows_h.findOrThrow("IID_StdOle").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_StdOle
     * }
     */
    public static GroupLayout IID_StdOle$layout() {
        return IID_StdOle$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_StdOle
     * }
     */
    public static MemorySegment IID_StdOle() {
        return IID_StdOle$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_StdOle
     * }
     */
    public static void IID_StdOle(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_StdOle$constants.SEGMENT, 0L, IID_StdOle$constants.LAYOUT.byteSize());
    }

    private static class SysAllocString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("SysAllocString"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern BSTR SysAllocString(const OLECHAR *psz)
     * }
     */
    public static FunctionDescriptor SysAllocString$descriptor() {
        return SysAllocString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern BSTR SysAllocString(const OLECHAR *psz)
     * }
     */
    public static MethodHandle SysAllocString$handle() {
        return SysAllocString.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern BSTR SysAllocString(const OLECHAR *psz)
     * }
     */
    public static MemorySegment SysAllocString(MemorySegment psz) {
        var mh$ = SysAllocString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SysAllocString", psz);
            }
            return (MemorySegment)mh$.invokeExact(psz);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SysReAllocString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_INT,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("SysReAllocString"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern INT SysReAllocString(BSTR *pbstr, const OLECHAR *psz)
     * }
     */
    public static FunctionDescriptor SysReAllocString$descriptor() {
        return SysReAllocString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern INT SysReAllocString(BSTR *pbstr, const OLECHAR *psz)
     * }
     */
    public static MethodHandle SysReAllocString$handle() {
        return SysReAllocString.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern INT SysReAllocString(BSTR *pbstr, const OLECHAR *psz)
     * }
     */
    public static int SysReAllocString(MemorySegment pbstr, MemorySegment psz) {
        var mh$ = SysReAllocString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SysReAllocString", pbstr, psz);
            }
            return (int)mh$.invokeExact(pbstr, psz);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SysAllocStringLen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("SysAllocStringLen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern BSTR SysAllocStringLen(const OLECHAR *strIn, UINT ui)
     * }
     */
    public static FunctionDescriptor SysAllocStringLen$descriptor() {
        return SysAllocStringLen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern BSTR SysAllocStringLen(const OLECHAR *strIn, UINT ui)
     * }
     */
    public static MethodHandle SysAllocStringLen$handle() {
        return SysAllocStringLen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern BSTR SysAllocStringLen(const OLECHAR *strIn, UINT ui)
     * }
     */
    public static MemorySegment SysAllocStringLen(MemorySegment strIn, int ui) {
        var mh$ = SysAllocStringLen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SysAllocStringLen", strIn, ui);
            }
            return (MemorySegment)mh$.invokeExact(strIn, ui);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SysReAllocStringLen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_INT,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("SysReAllocStringLen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern INT SysReAllocStringLen(BSTR *pbstr, const OLECHAR *psz, unsigned int len)
     * }
     */
    public static FunctionDescriptor SysReAllocStringLen$descriptor() {
        return SysReAllocStringLen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern INT SysReAllocStringLen(BSTR *pbstr, const OLECHAR *psz, unsigned int len)
     * }
     */
    public static MethodHandle SysReAllocStringLen$handle() {
        return SysReAllocStringLen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern INT SysReAllocStringLen(BSTR *pbstr, const OLECHAR *psz, unsigned int len)
     * }
     */
    public static int SysReAllocStringLen(MemorySegment pbstr, MemorySegment psz, int len) {
        var mh$ = SysReAllocStringLen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SysReAllocStringLen", pbstr, psz, len);
            }
            return (int)mh$.invokeExact(pbstr, psz, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SysAddRefString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("SysAddRefString"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SysAddRefString(BSTR bstrString)
     * }
     */
    public static FunctionDescriptor SysAddRefString$descriptor() {
        return SysAddRefString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SysAddRefString(BSTR bstrString)
     * }
     */
    public static MethodHandle SysAddRefString$handle() {
        return SysAddRefString.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT SysAddRefString(BSTR bstrString)
     * }
     */
    public static int SysAddRefString(MemorySegment bstrString) {
        var mh$ = SysAddRefString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SysAddRefString", bstrString);
            }
            return (int)mh$.invokeExact(bstrString);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SysReleaseString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("SysReleaseString"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void SysReleaseString(BSTR bstrString)
     * }
     */
    public static FunctionDescriptor SysReleaseString$descriptor() {
        return SysReleaseString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void SysReleaseString(BSTR bstrString)
     * }
     */
    public static MethodHandle SysReleaseString$handle() {
        return SysReleaseString.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void SysReleaseString(BSTR bstrString)
     * }
     */
    public static void SysReleaseString(MemorySegment bstrString) {
        var mh$ = SysReleaseString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SysReleaseString", bstrString);
            }
            mh$.invokeExact(bstrString);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SysFreeString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("SysFreeString"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void SysFreeString(BSTR bstrString)
     * }
     */
    public static FunctionDescriptor SysFreeString$descriptor() {
        return SysFreeString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void SysFreeString(BSTR bstrString)
     * }
     */
    public static MethodHandle SysFreeString$handle() {
        return SysFreeString.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void SysFreeString(BSTR bstrString)
     * }
     */
    public static void SysFreeString(MemorySegment bstrString) {
        var mh$ = SysFreeString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SysFreeString", bstrString);
            }
            mh$.invokeExact(bstrString);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SysStringLen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_INT,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("SysStringLen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern UINT SysStringLen(BSTR pbstr)
     * }
     */
    public static FunctionDescriptor SysStringLen$descriptor() {
        return SysStringLen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern UINT SysStringLen(BSTR pbstr)
     * }
     */
    public static MethodHandle SysStringLen$handle() {
        return SysStringLen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern UINT SysStringLen(BSTR pbstr)
     * }
     */
    public static int SysStringLen(MemorySegment pbstr) {
        var mh$ = SysStringLen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SysStringLen", pbstr);
            }
            return (int)mh$.invokeExact(pbstr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SysStringByteLen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_INT,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("SysStringByteLen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern UINT SysStringByteLen(BSTR bstr)
     * }
     */
    public static FunctionDescriptor SysStringByteLen$descriptor() {
        return SysStringByteLen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern UINT SysStringByteLen(BSTR bstr)
     * }
     */
    public static MethodHandle SysStringByteLen$handle() {
        return SysStringByteLen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern UINT SysStringByteLen(BSTR bstr)
     * }
     */
    public static int SysStringByteLen(MemorySegment bstr) {
        var mh$ = SysStringByteLen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SysStringByteLen", bstr);
            }
            return (int)mh$.invokeExact(bstr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SysAllocStringByteLen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("SysAllocStringByteLen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern BSTR SysAllocStringByteLen(LPCSTR psz, UINT len)
     * }
     */
    public static FunctionDescriptor SysAllocStringByteLen$descriptor() {
        return SysAllocStringByteLen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern BSTR SysAllocStringByteLen(LPCSTR psz, UINT len)
     * }
     */
    public static MethodHandle SysAllocStringByteLen$handle() {
        return SysAllocStringByteLen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern BSTR SysAllocStringByteLen(LPCSTR psz, UINT len)
     * }
     */
    public static MemorySegment SysAllocStringByteLen(MemorySegment psz, int len) {
        var mh$ = SysAllocStringByteLen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SysAllocStringByteLen", psz, len);
            }
            return (MemorySegment)mh$.invokeExact(psz, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DosDateTimeToVariantTime {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_INT,
            Windows_h.C_SHORT,
            Windows_h.C_SHORT,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("DosDateTimeToVariantTime"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern INT DosDateTimeToVariantTime(USHORT wDosDate, USHORT wDosTime, DOUBLE *pvtime)
     * }
     */
    public static FunctionDescriptor DosDateTimeToVariantTime$descriptor() {
        return DosDateTimeToVariantTime.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern INT DosDateTimeToVariantTime(USHORT wDosDate, USHORT wDosTime, DOUBLE *pvtime)
     * }
     */
    public static MethodHandle DosDateTimeToVariantTime$handle() {
        return DosDateTimeToVariantTime.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern INT DosDateTimeToVariantTime(USHORT wDosDate, USHORT wDosTime, DOUBLE *pvtime)
     * }
     */
    public static int DosDateTimeToVariantTime(short wDosDate, short wDosTime, MemorySegment pvtime) {
        var mh$ = DosDateTimeToVariantTime.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DosDateTimeToVariantTime", wDosDate, wDosTime, pvtime);
            }
            return (int)mh$.invokeExact(wDosDate, wDosTime, pvtime);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VariantTimeToDosDateTime {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_INT,
            Windows_h.C_DOUBLE,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("VariantTimeToDosDateTime"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern INT VariantTimeToDosDateTime(DOUBLE vtime, USHORT *pwDosDate, USHORT *pwDosTime)
     * }
     */
    public static FunctionDescriptor VariantTimeToDosDateTime$descriptor() {
        return VariantTimeToDosDateTime.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern INT VariantTimeToDosDateTime(DOUBLE vtime, USHORT *pwDosDate, USHORT *pwDosTime)
     * }
     */
    public static MethodHandle VariantTimeToDosDateTime$handle() {
        return VariantTimeToDosDateTime.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern INT VariantTimeToDosDateTime(DOUBLE vtime, USHORT *pwDosDate, USHORT *pwDosTime)
     * }
     */
    public static int VariantTimeToDosDateTime(double vtime, MemorySegment pwDosDate, MemorySegment pwDosTime) {
        var mh$ = VariantTimeToDosDateTime.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VariantTimeToDosDateTime", vtime, pwDosDate, pwDosTime);
            }
            return (int)mh$.invokeExact(vtime, pwDosDate, pwDosTime);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SystemTimeToVariantTime {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_INT,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("SystemTimeToVariantTime"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern INT SystemTimeToVariantTime(LPSYSTEMTIME lpSystemTime, DOUBLE *pvtime)
     * }
     */
    public static FunctionDescriptor SystemTimeToVariantTime$descriptor() {
        return SystemTimeToVariantTime.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern INT SystemTimeToVariantTime(LPSYSTEMTIME lpSystemTime, DOUBLE *pvtime)
     * }
     */
    public static MethodHandle SystemTimeToVariantTime$handle() {
        return SystemTimeToVariantTime.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern INT SystemTimeToVariantTime(LPSYSTEMTIME lpSystemTime, DOUBLE *pvtime)
     * }
     */
    public static int SystemTimeToVariantTime(MemorySegment lpSystemTime, MemorySegment pvtime) {
        var mh$ = SystemTimeToVariantTime.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SystemTimeToVariantTime", lpSystemTime, pvtime);
            }
            return (int)mh$.invokeExact(lpSystemTime, pvtime);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VariantTimeToSystemTime {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_INT,
            Windows_h.C_DOUBLE,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("VariantTimeToSystemTime"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern INT VariantTimeToSystemTime(DOUBLE vtime, LPSYSTEMTIME lpSystemTime)
     * }
     */
    public static FunctionDescriptor VariantTimeToSystemTime$descriptor() {
        return VariantTimeToSystemTime.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern INT VariantTimeToSystemTime(DOUBLE vtime, LPSYSTEMTIME lpSystemTime)
     * }
     */
    public static MethodHandle VariantTimeToSystemTime$handle() {
        return VariantTimeToSystemTime.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern INT VariantTimeToSystemTime(DOUBLE vtime, LPSYSTEMTIME lpSystemTime)
     * }
     */
    public static int VariantTimeToSystemTime(double vtime, MemorySegment lpSystemTime) {
        var mh$ = VariantTimeToSystemTime.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VariantTimeToSystemTime", vtime, lpSystemTime);
            }
            return (int)mh$.invokeExact(vtime, lpSystemTime);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayAllocDescriptor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_INT,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("SafeArrayAllocDescriptor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayAllocDescriptor(UINT cDims, SAFEARRAY **ppsaOut)
     * }
     */
    public static FunctionDescriptor SafeArrayAllocDescriptor$descriptor() {
        return SafeArrayAllocDescriptor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayAllocDescriptor(UINT cDims, SAFEARRAY **ppsaOut)
     * }
     */
    public static MethodHandle SafeArrayAllocDescriptor$handle() {
        return SafeArrayAllocDescriptor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayAllocDescriptor(UINT cDims, SAFEARRAY **ppsaOut)
     * }
     */
    public static int SafeArrayAllocDescriptor(int cDims, MemorySegment ppsaOut) {
        var mh$ = SafeArrayAllocDescriptor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayAllocDescriptor", cDims, ppsaOut);
            }
            return (int)mh$.invokeExact(cDims, ppsaOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayAllocDescriptorEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_SHORT,
            Windows_h.C_INT,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("SafeArrayAllocDescriptorEx"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayAllocDescriptorEx(VARTYPE vt, UINT cDims, SAFEARRAY **ppsaOut)
     * }
     */
    public static FunctionDescriptor SafeArrayAllocDescriptorEx$descriptor() {
        return SafeArrayAllocDescriptorEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayAllocDescriptorEx(VARTYPE vt, UINT cDims, SAFEARRAY **ppsaOut)
     * }
     */
    public static MethodHandle SafeArrayAllocDescriptorEx$handle() {
        return SafeArrayAllocDescriptorEx.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayAllocDescriptorEx(VARTYPE vt, UINT cDims, SAFEARRAY **ppsaOut)
     * }
     */
    public static int SafeArrayAllocDescriptorEx(short vt, int cDims, MemorySegment ppsaOut) {
        var mh$ = SafeArrayAllocDescriptorEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayAllocDescriptorEx", vt, cDims, ppsaOut);
            }
            return (int)mh$.invokeExact(vt, cDims, ppsaOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayAllocData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("SafeArrayAllocData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayAllocData(SAFEARRAY *psa)
     * }
     */
    public static FunctionDescriptor SafeArrayAllocData$descriptor() {
        return SafeArrayAllocData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayAllocData(SAFEARRAY *psa)
     * }
     */
    public static MethodHandle SafeArrayAllocData$handle() {
        return SafeArrayAllocData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayAllocData(SAFEARRAY *psa)
     * }
     */
    public static int SafeArrayAllocData(MemorySegment psa) {
        var mh$ = SafeArrayAllocData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayAllocData", psa);
            }
            return (int)mh$.invokeExact(psa);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayCreate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_POINTER,
            Windows_h.C_SHORT,
            Windows_h.C_INT,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("SafeArrayCreate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern SAFEARRAY *SafeArrayCreate(VARTYPE vt, UINT cDims, SAFEARRAYBOUND *rgsabound)
     * }
     */
    public static FunctionDescriptor SafeArrayCreate$descriptor() {
        return SafeArrayCreate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern SAFEARRAY *SafeArrayCreate(VARTYPE vt, UINT cDims, SAFEARRAYBOUND *rgsabound)
     * }
     */
    public static MethodHandle SafeArrayCreate$handle() {
        return SafeArrayCreate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern SAFEARRAY *SafeArrayCreate(VARTYPE vt, UINT cDims, SAFEARRAYBOUND *rgsabound)
     * }
     */
    public static MemorySegment SafeArrayCreate(short vt, int cDims, MemorySegment rgsabound) {
        var mh$ = SafeArrayCreate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayCreate", vt, cDims, rgsabound);
            }
            return (MemorySegment)mh$.invokeExact(vt, cDims, rgsabound);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayCreateEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_POINTER,
            Windows_h.C_SHORT,
            Windows_h.C_INT,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("SafeArrayCreateEx"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern SAFEARRAY *SafeArrayCreateEx(VARTYPE vt, UINT cDims, SAFEARRAYBOUND *rgsabound, PVOID pvExtra)
     * }
     */
    public static FunctionDescriptor SafeArrayCreateEx$descriptor() {
        return SafeArrayCreateEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern SAFEARRAY *SafeArrayCreateEx(VARTYPE vt, UINT cDims, SAFEARRAYBOUND *rgsabound, PVOID pvExtra)
     * }
     */
    public static MethodHandle SafeArrayCreateEx$handle() {
        return SafeArrayCreateEx.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern SAFEARRAY *SafeArrayCreateEx(VARTYPE vt, UINT cDims, SAFEARRAYBOUND *rgsabound, PVOID pvExtra)
     * }
     */
    public static MemorySegment SafeArrayCreateEx(short vt, int cDims, MemorySegment rgsabound, MemorySegment pvExtra) {
        var mh$ = SafeArrayCreateEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayCreateEx", vt, cDims, rgsabound, pvExtra);
            }
            return (MemorySegment)mh$.invokeExact(vt, cDims, rgsabound, pvExtra);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayCopyData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("SafeArrayCopyData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayCopyData(SAFEARRAY *psaSource, SAFEARRAY *psaTarget)
     * }
     */
    public static FunctionDescriptor SafeArrayCopyData$descriptor() {
        return SafeArrayCopyData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayCopyData(SAFEARRAY *psaSource, SAFEARRAY *psaTarget)
     * }
     */
    public static MethodHandle SafeArrayCopyData$handle() {
        return SafeArrayCopyData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayCopyData(SAFEARRAY *psaSource, SAFEARRAY *psaTarget)
     * }
     */
    public static int SafeArrayCopyData(MemorySegment psaSource, MemorySegment psaTarget) {
        var mh$ = SafeArrayCopyData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayCopyData", psaSource, psaTarget);
            }
            return (int)mh$.invokeExact(psaSource, psaTarget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayReleaseDescriptor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("SafeArrayReleaseDescriptor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void SafeArrayReleaseDescriptor(SAFEARRAY *psa)
     * }
     */
    public static FunctionDescriptor SafeArrayReleaseDescriptor$descriptor() {
        return SafeArrayReleaseDescriptor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void SafeArrayReleaseDescriptor(SAFEARRAY *psa)
     * }
     */
    public static MethodHandle SafeArrayReleaseDescriptor$handle() {
        return SafeArrayReleaseDescriptor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void SafeArrayReleaseDescriptor(SAFEARRAY *psa)
     * }
     */
    public static void SafeArrayReleaseDescriptor(MemorySegment psa) {
        var mh$ = SafeArrayReleaseDescriptor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayReleaseDescriptor", psa);
            }
            mh$.invokeExact(psa);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayDestroyDescriptor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("SafeArrayDestroyDescriptor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayDestroyDescriptor(SAFEARRAY *psa)
     * }
     */
    public static FunctionDescriptor SafeArrayDestroyDescriptor$descriptor() {
        return SafeArrayDestroyDescriptor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayDestroyDescriptor(SAFEARRAY *psa)
     * }
     */
    public static MethodHandle SafeArrayDestroyDescriptor$handle() {
        return SafeArrayDestroyDescriptor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayDestroyDescriptor(SAFEARRAY *psa)
     * }
     */
    public static int SafeArrayDestroyDescriptor(MemorySegment psa) {
        var mh$ = SafeArrayDestroyDescriptor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayDestroyDescriptor", psa);
            }
            return (int)mh$.invokeExact(psa);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayReleaseData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("SafeArrayReleaseData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void SafeArrayReleaseData(PVOID pData)
     * }
     */
    public static FunctionDescriptor SafeArrayReleaseData$descriptor() {
        return SafeArrayReleaseData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void SafeArrayReleaseData(PVOID pData)
     * }
     */
    public static MethodHandle SafeArrayReleaseData$handle() {
        return SafeArrayReleaseData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void SafeArrayReleaseData(PVOID pData)
     * }
     */
    public static void SafeArrayReleaseData(MemorySegment pData) {
        var mh$ = SafeArrayReleaseData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayReleaseData", pData);
            }
            mh$.invokeExact(pData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayDestroyData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("SafeArrayDestroyData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayDestroyData(SAFEARRAY *psa)
     * }
     */
    public static FunctionDescriptor SafeArrayDestroyData$descriptor() {
        return SafeArrayDestroyData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayDestroyData(SAFEARRAY *psa)
     * }
     */
    public static MethodHandle SafeArrayDestroyData$handle() {
        return SafeArrayDestroyData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayDestroyData(SAFEARRAY *psa)
     * }
     */
    public static int SafeArrayDestroyData(MemorySegment psa) {
        var mh$ = SafeArrayDestroyData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayDestroyData", psa);
            }
            return (int)mh$.invokeExact(psa);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayAddRef {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("SafeArrayAddRef"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayAddRef(SAFEARRAY *psa, PVOID *ppDataToRelease)
     * }
     */
    public static FunctionDescriptor SafeArrayAddRef$descriptor() {
        return SafeArrayAddRef.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayAddRef(SAFEARRAY *psa, PVOID *ppDataToRelease)
     * }
     */
    public static MethodHandle SafeArrayAddRef$handle() {
        return SafeArrayAddRef.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayAddRef(SAFEARRAY *psa, PVOID *ppDataToRelease)
     * }
     */
    public static int SafeArrayAddRef(MemorySegment psa, MemorySegment ppDataToRelease) {
        var mh$ = SafeArrayAddRef.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayAddRef", psa, ppDataToRelease);
            }
            return (int)mh$.invokeExact(psa, ppDataToRelease);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayDestroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("SafeArrayDestroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayDestroy(SAFEARRAY *psa)
     * }
     */
    public static FunctionDescriptor SafeArrayDestroy$descriptor() {
        return SafeArrayDestroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayDestroy(SAFEARRAY *psa)
     * }
     */
    public static MethodHandle SafeArrayDestroy$handle() {
        return SafeArrayDestroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayDestroy(SAFEARRAY *psa)
     * }
     */
    public static int SafeArrayDestroy(MemorySegment psa) {
        var mh$ = SafeArrayDestroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayDestroy", psa);
            }
            return (int)mh$.invokeExact(psa);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayRedim {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("SafeArrayRedim"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayRedim(SAFEARRAY *psa, SAFEARRAYBOUND *psaboundNew)
     * }
     */
    public static FunctionDescriptor SafeArrayRedim$descriptor() {
        return SafeArrayRedim.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayRedim(SAFEARRAY *psa, SAFEARRAYBOUND *psaboundNew)
     * }
     */
    public static MethodHandle SafeArrayRedim$handle() {
        return SafeArrayRedim.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayRedim(SAFEARRAY *psa, SAFEARRAYBOUND *psaboundNew)
     * }
     */
    public static int SafeArrayRedim(MemorySegment psa, MemorySegment psaboundNew) {
        var mh$ = SafeArrayRedim.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayRedim", psa, psaboundNew);
            }
            return (int)mh$.invokeExact(psa, psaboundNew);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayGetDim {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_INT,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("SafeArrayGetDim"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern UINT SafeArrayGetDim(SAFEARRAY *psa)
     * }
     */
    public static FunctionDescriptor SafeArrayGetDim$descriptor() {
        return SafeArrayGetDim.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern UINT SafeArrayGetDim(SAFEARRAY *psa)
     * }
     */
    public static MethodHandle SafeArrayGetDim$handle() {
        return SafeArrayGetDim.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern UINT SafeArrayGetDim(SAFEARRAY *psa)
     * }
     */
    public static int SafeArrayGetDim(MemorySegment psa) {
        var mh$ = SafeArrayGetDim.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayGetDim", psa);
            }
            return (int)mh$.invokeExact(psa);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayGetElemsize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_INT,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("SafeArrayGetElemsize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern UINT SafeArrayGetElemsize(SAFEARRAY *psa)
     * }
     */
    public static FunctionDescriptor SafeArrayGetElemsize$descriptor() {
        return SafeArrayGetElemsize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern UINT SafeArrayGetElemsize(SAFEARRAY *psa)
     * }
     */
    public static MethodHandle SafeArrayGetElemsize$handle() {
        return SafeArrayGetElemsize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern UINT SafeArrayGetElemsize(SAFEARRAY *psa)
     * }
     */
    public static int SafeArrayGetElemsize(MemorySegment psa) {
        var mh$ = SafeArrayGetElemsize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayGetElemsize", psa);
            }
            return (int)mh$.invokeExact(psa);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayGetUBound {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_INT,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("SafeArrayGetUBound"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetUBound(SAFEARRAY *psa, UINT nDim, LONG *plUbound)
     * }
     */
    public static FunctionDescriptor SafeArrayGetUBound$descriptor() {
        return SafeArrayGetUBound.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetUBound(SAFEARRAY *psa, UINT nDim, LONG *plUbound)
     * }
     */
    public static MethodHandle SafeArrayGetUBound$handle() {
        return SafeArrayGetUBound.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetUBound(SAFEARRAY *psa, UINT nDim, LONG *plUbound)
     * }
     */
    public static int SafeArrayGetUBound(MemorySegment psa, int nDim, MemorySegment plUbound) {
        var mh$ = SafeArrayGetUBound.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayGetUBound", psa, nDim, plUbound);
            }
            return (int)mh$.invokeExact(psa, nDim, plUbound);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayGetLBound {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_INT,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("SafeArrayGetLBound"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetLBound(SAFEARRAY *psa, UINT nDim, LONG *plLbound)
     * }
     */
    public static FunctionDescriptor SafeArrayGetLBound$descriptor() {
        return SafeArrayGetLBound.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetLBound(SAFEARRAY *psa, UINT nDim, LONG *plLbound)
     * }
     */
    public static MethodHandle SafeArrayGetLBound$handle() {
        return SafeArrayGetLBound.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetLBound(SAFEARRAY *psa, UINT nDim, LONG *plLbound)
     * }
     */
    public static int SafeArrayGetLBound(MemorySegment psa, int nDim, MemorySegment plLbound) {
        var mh$ = SafeArrayGetLBound.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayGetLBound", psa, nDim, plLbound);
            }
            return (int)mh$.invokeExact(psa, nDim, plLbound);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayLock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("SafeArrayLock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayLock(SAFEARRAY *psa)
     * }
     */
    public static FunctionDescriptor SafeArrayLock$descriptor() {
        return SafeArrayLock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayLock(SAFEARRAY *psa)
     * }
     */
    public static MethodHandle SafeArrayLock$handle() {
        return SafeArrayLock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayLock(SAFEARRAY *psa)
     * }
     */
    public static int SafeArrayLock(MemorySegment psa) {
        var mh$ = SafeArrayLock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayLock", psa);
            }
            return (int)mh$.invokeExact(psa);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayUnlock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("SafeArrayUnlock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayUnlock(SAFEARRAY *psa)
     * }
     */
    public static FunctionDescriptor SafeArrayUnlock$descriptor() {
        return SafeArrayUnlock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayUnlock(SAFEARRAY *psa)
     * }
     */
    public static MethodHandle SafeArrayUnlock$handle() {
        return SafeArrayUnlock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayUnlock(SAFEARRAY *psa)
     * }
     */
    public static int SafeArrayUnlock(MemorySegment psa) {
        var mh$ = SafeArrayUnlock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayUnlock", psa);
            }
            return (int)mh$.invokeExact(psa);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayAccessData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("SafeArrayAccessData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayAccessData(SAFEARRAY *psa, void **ppvData)
     * }
     */
    public static FunctionDescriptor SafeArrayAccessData$descriptor() {
        return SafeArrayAccessData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayAccessData(SAFEARRAY *psa, void **ppvData)
     * }
     */
    public static MethodHandle SafeArrayAccessData$handle() {
        return SafeArrayAccessData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayAccessData(SAFEARRAY *psa, void **ppvData)
     * }
     */
    public static int SafeArrayAccessData(MemorySegment psa, MemorySegment ppvData) {
        var mh$ = SafeArrayAccessData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayAccessData", psa, ppvData);
            }
            return (int)mh$.invokeExact(psa, ppvData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayUnaccessData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("SafeArrayUnaccessData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayUnaccessData(SAFEARRAY *psa)
     * }
     */
    public static FunctionDescriptor SafeArrayUnaccessData$descriptor() {
        return SafeArrayUnaccessData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayUnaccessData(SAFEARRAY *psa)
     * }
     */
    public static MethodHandle SafeArrayUnaccessData$handle() {
        return SafeArrayUnaccessData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayUnaccessData(SAFEARRAY *psa)
     * }
     */
    public static int SafeArrayUnaccessData(MemorySegment psa) {
        var mh$ = SafeArrayUnaccessData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayUnaccessData", psa);
            }
            return (int)mh$.invokeExact(psa);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayGetElement {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("SafeArrayGetElement"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetElement(SAFEARRAY *psa, LONG *rgIndices, void *pv)
     * }
     */
    public static FunctionDescriptor SafeArrayGetElement$descriptor() {
        return SafeArrayGetElement.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetElement(SAFEARRAY *psa, LONG *rgIndices, void *pv)
     * }
     */
    public static MethodHandle SafeArrayGetElement$handle() {
        return SafeArrayGetElement.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetElement(SAFEARRAY *psa, LONG *rgIndices, void *pv)
     * }
     */
    public static int SafeArrayGetElement(MemorySegment psa, MemorySegment rgIndices, MemorySegment pv) {
        var mh$ = SafeArrayGetElement.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayGetElement", psa, rgIndices, pv);
            }
            return (int)mh$.invokeExact(psa, rgIndices, pv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayPutElement {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("SafeArrayPutElement"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayPutElement(SAFEARRAY *psa, LONG *rgIndices, void *pv)
     * }
     */
    public static FunctionDescriptor SafeArrayPutElement$descriptor() {
        return SafeArrayPutElement.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayPutElement(SAFEARRAY *psa, LONG *rgIndices, void *pv)
     * }
     */
    public static MethodHandle SafeArrayPutElement$handle() {
        return SafeArrayPutElement.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayPutElement(SAFEARRAY *psa, LONG *rgIndices, void *pv)
     * }
     */
    public static int SafeArrayPutElement(MemorySegment psa, MemorySegment rgIndices, MemorySegment pv) {
        var mh$ = SafeArrayPutElement.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayPutElement", psa, rgIndices, pv);
            }
            return (int)mh$.invokeExact(psa, rgIndices, pv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayCopy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("SafeArrayCopy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayCopy(SAFEARRAY *psa, SAFEARRAY **ppsaOut)
     * }
     */
    public static FunctionDescriptor SafeArrayCopy$descriptor() {
        return SafeArrayCopy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayCopy(SAFEARRAY *psa, SAFEARRAY **ppsaOut)
     * }
     */
    public static MethodHandle SafeArrayCopy$handle() {
        return SafeArrayCopy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayCopy(SAFEARRAY *psa, SAFEARRAY **ppsaOut)
     * }
     */
    public static int SafeArrayCopy(MemorySegment psa, MemorySegment ppsaOut) {
        var mh$ = SafeArrayCopy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayCopy", psa, ppsaOut);
            }
            return (int)mh$.invokeExact(psa, ppsaOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayPtrOfIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("SafeArrayPtrOfIndex"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayPtrOfIndex(SAFEARRAY *psa, LONG *rgIndices, void **ppvData)
     * }
     */
    public static FunctionDescriptor SafeArrayPtrOfIndex$descriptor() {
        return SafeArrayPtrOfIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayPtrOfIndex(SAFEARRAY *psa, LONG *rgIndices, void **ppvData)
     * }
     */
    public static MethodHandle SafeArrayPtrOfIndex$handle() {
        return SafeArrayPtrOfIndex.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayPtrOfIndex(SAFEARRAY *psa, LONG *rgIndices, void **ppvData)
     * }
     */
    public static int SafeArrayPtrOfIndex(MemorySegment psa, MemorySegment rgIndices, MemorySegment ppvData) {
        var mh$ = SafeArrayPtrOfIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayPtrOfIndex", psa, rgIndices, ppvData);
            }
            return (int)mh$.invokeExact(psa, rgIndices, ppvData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArraySetRecordInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("SafeArraySetRecordInfo"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArraySetRecordInfo(SAFEARRAY *psa, IRecordInfo *prinfo)
     * }
     */
    public static FunctionDescriptor SafeArraySetRecordInfo$descriptor() {
        return SafeArraySetRecordInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArraySetRecordInfo(SAFEARRAY *psa, IRecordInfo *prinfo)
     * }
     */
    public static MethodHandle SafeArraySetRecordInfo$handle() {
        return SafeArraySetRecordInfo.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArraySetRecordInfo(SAFEARRAY *psa, IRecordInfo *prinfo)
     * }
     */
    public static int SafeArraySetRecordInfo(MemorySegment psa, MemorySegment prinfo) {
        var mh$ = SafeArraySetRecordInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArraySetRecordInfo", psa, prinfo);
            }
            return (int)mh$.invokeExact(psa, prinfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayGetRecordInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("SafeArrayGetRecordInfo"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetRecordInfo(SAFEARRAY *psa, IRecordInfo **prinfo)
     * }
     */
    public static FunctionDescriptor SafeArrayGetRecordInfo$descriptor() {
        return SafeArrayGetRecordInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetRecordInfo(SAFEARRAY *psa, IRecordInfo **prinfo)
     * }
     */
    public static MethodHandle SafeArrayGetRecordInfo$handle() {
        return SafeArrayGetRecordInfo.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetRecordInfo(SAFEARRAY *psa, IRecordInfo **prinfo)
     * }
     */
    public static int SafeArrayGetRecordInfo(MemorySegment psa, MemorySegment prinfo) {
        var mh$ = SafeArrayGetRecordInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayGetRecordInfo", psa, prinfo);
            }
            return (int)mh$.invokeExact(psa, prinfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArraySetIID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("SafeArraySetIID"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArraySetIID(SAFEARRAY *psa, const GUID *const guid)
     * }
     */
    public static FunctionDescriptor SafeArraySetIID$descriptor() {
        return SafeArraySetIID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArraySetIID(SAFEARRAY *psa, const GUID *const guid)
     * }
     */
    public static MethodHandle SafeArraySetIID$handle() {
        return SafeArraySetIID.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArraySetIID(SAFEARRAY *psa, const GUID *const guid)
     * }
     */
    public static int SafeArraySetIID(MemorySegment psa, MemorySegment guid) {
        var mh$ = SafeArraySetIID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArraySetIID", psa, guid);
            }
            return (int)mh$.invokeExact(psa, guid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayGetIID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("SafeArrayGetIID"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetIID(SAFEARRAY *psa, GUID *pguid)
     * }
     */
    public static FunctionDescriptor SafeArrayGetIID$descriptor() {
        return SafeArrayGetIID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetIID(SAFEARRAY *psa, GUID *pguid)
     * }
     */
    public static MethodHandle SafeArrayGetIID$handle() {
        return SafeArrayGetIID.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetIID(SAFEARRAY *psa, GUID *pguid)
     * }
     */
    public static int SafeArrayGetIID(MemorySegment psa, MemorySegment pguid) {
        var mh$ = SafeArrayGetIID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayGetIID", psa, pguid);
            }
            return (int)mh$.invokeExact(psa, pguid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayGetVartype {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("SafeArrayGetVartype"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetVartype(SAFEARRAY *psa, VARTYPE *pvt)
     * }
     */
    public static FunctionDescriptor SafeArrayGetVartype$descriptor() {
        return SafeArrayGetVartype.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetVartype(SAFEARRAY *psa, VARTYPE *pvt)
     * }
     */
    public static MethodHandle SafeArrayGetVartype$handle() {
        return SafeArrayGetVartype.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetVartype(SAFEARRAY *psa, VARTYPE *pvt)
     * }
     */
    public static int SafeArrayGetVartype(MemorySegment psa, MemorySegment pvt) {
        var mh$ = SafeArrayGetVartype.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayGetVartype", psa, pvt);
            }
            return (int)mh$.invokeExact(psa, pvt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayCreateVector {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_POINTER,
            Windows_h.C_SHORT,
            Windows_h.C_LONG,
            Windows_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("SafeArrayCreateVector"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern SAFEARRAY *SafeArrayCreateVector(VARTYPE vt, LONG lLbound, ULONG cElements)
     * }
     */
    public static FunctionDescriptor SafeArrayCreateVector$descriptor() {
        return SafeArrayCreateVector.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern SAFEARRAY *SafeArrayCreateVector(VARTYPE vt, LONG lLbound, ULONG cElements)
     * }
     */
    public static MethodHandle SafeArrayCreateVector$handle() {
        return SafeArrayCreateVector.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern SAFEARRAY *SafeArrayCreateVector(VARTYPE vt, LONG lLbound, ULONG cElements)
     * }
     */
    public static MemorySegment SafeArrayCreateVector(short vt, int lLbound, int cElements) {
        var mh$ = SafeArrayCreateVector.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayCreateVector", vt, lLbound, cElements);
            }
            return (MemorySegment)mh$.invokeExact(vt, lLbound, cElements);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayCreateVectorEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_POINTER,
            Windows_h.C_SHORT,
            Windows_h.C_LONG,
            Windows_h.C_LONG,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("SafeArrayCreateVectorEx"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern SAFEARRAY *SafeArrayCreateVectorEx(VARTYPE vt, LONG lLbound, ULONG cElements, PVOID pvExtra)
     * }
     */
    public static FunctionDescriptor SafeArrayCreateVectorEx$descriptor() {
        return SafeArrayCreateVectorEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern SAFEARRAY *SafeArrayCreateVectorEx(VARTYPE vt, LONG lLbound, ULONG cElements, PVOID pvExtra)
     * }
     */
    public static MethodHandle SafeArrayCreateVectorEx$handle() {
        return SafeArrayCreateVectorEx.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern SAFEARRAY *SafeArrayCreateVectorEx(VARTYPE vt, LONG lLbound, ULONG cElements, PVOID pvExtra)
     * }
     */
    public static MemorySegment SafeArrayCreateVectorEx(short vt, int lLbound, int cElements, MemorySegment pvExtra) {
        var mh$ = SafeArrayCreateVectorEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayCreateVectorEx", vt, lLbound, cElements, pvExtra);
            }
            return (MemorySegment)mh$.invokeExact(vt, lLbound, cElements, pvExtra);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VariantInit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("VariantInit"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void VariantInit(VARIANTARG *pvarg)
     * }
     */
    public static FunctionDescriptor VariantInit$descriptor() {
        return VariantInit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void VariantInit(VARIANTARG *pvarg)
     * }
     */
    public static MethodHandle VariantInit$handle() {
        return VariantInit.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void VariantInit(VARIANTARG *pvarg)
     * }
     */
    public static void VariantInit(MemorySegment pvarg) {
        var mh$ = VariantInit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VariantInit", pvarg);
            }
            mh$.invokeExact(pvarg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VariantClear {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("VariantClear"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VariantClear(VARIANTARG *pvarg)
     * }
     */
    public static FunctionDescriptor VariantClear$descriptor() {
        return VariantClear.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VariantClear(VARIANTARG *pvarg)
     * }
     */
    public static MethodHandle VariantClear$handle() {
        return VariantClear.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VariantClear(VARIANTARG *pvarg)
     * }
     */
    public static int VariantClear(MemorySegment pvarg) {
        var mh$ = VariantClear.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VariantClear", pvarg);
            }
            return (int)mh$.invokeExact(pvarg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VariantCopy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("VariantCopy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VariantCopy(VARIANTARG *pvargDest, const VARIANTARG *pvargSrc)
     * }
     */
    public static FunctionDescriptor VariantCopy$descriptor() {
        return VariantCopy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VariantCopy(VARIANTARG *pvargDest, const VARIANTARG *pvargSrc)
     * }
     */
    public static MethodHandle VariantCopy$handle() {
        return VariantCopy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VariantCopy(VARIANTARG *pvargDest, const VARIANTARG *pvargSrc)
     * }
     */
    public static int VariantCopy(MemorySegment pvargDest, MemorySegment pvargSrc) {
        var mh$ = VariantCopy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VariantCopy", pvargDest, pvargSrc);
            }
            return (int)mh$.invokeExact(pvargDest, pvargSrc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VariantCopyInd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("VariantCopyInd"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VariantCopyInd(VARIANT *pvarDest, const VARIANTARG *pvargSrc)
     * }
     */
    public static FunctionDescriptor VariantCopyInd$descriptor() {
        return VariantCopyInd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VariantCopyInd(VARIANT *pvarDest, const VARIANTARG *pvargSrc)
     * }
     */
    public static MethodHandle VariantCopyInd$handle() {
        return VariantCopyInd.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VariantCopyInd(VARIANT *pvarDest, const VARIANTARG *pvargSrc)
     * }
     */
    public static int VariantCopyInd(MemorySegment pvarDest, MemorySegment pvargSrc) {
        var mh$ = VariantCopyInd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VariantCopyInd", pvarDest, pvargSrc);
            }
            return (int)mh$.invokeExact(pvarDest, pvargSrc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VariantChangeType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_SHORT,
            Windows_h.C_SHORT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("VariantChangeType"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VariantChangeType(VARIANTARG *pvargDest, const VARIANTARG *pvarSrc, USHORT wFlags, VARTYPE vt)
     * }
     */
    public static FunctionDescriptor VariantChangeType$descriptor() {
        return VariantChangeType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VariantChangeType(VARIANTARG *pvargDest, const VARIANTARG *pvarSrc, USHORT wFlags, VARTYPE vt)
     * }
     */
    public static MethodHandle VariantChangeType$handle() {
        return VariantChangeType.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VariantChangeType(VARIANTARG *pvargDest, const VARIANTARG *pvarSrc, USHORT wFlags, VARTYPE vt)
     * }
     */
    public static int VariantChangeType(MemorySegment pvargDest, MemorySegment pvarSrc, short wFlags, short vt) {
        var mh$ = VariantChangeType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VariantChangeType", pvargDest, pvarSrc, wFlags, vt);
            }
            return (int)mh$.invokeExact(pvargDest, pvarSrc, wFlags, vt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VariantChangeTypeEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_SHORT,
            Windows_h.C_SHORT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("VariantChangeTypeEx"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VariantChangeTypeEx(VARIANTARG *pvargDest, const VARIANTARG *pvarSrc, LCID lcid, USHORT wFlags, VARTYPE vt)
     * }
     */
    public static FunctionDescriptor VariantChangeTypeEx$descriptor() {
        return VariantChangeTypeEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VariantChangeTypeEx(VARIANTARG *pvargDest, const VARIANTARG *pvarSrc, LCID lcid, USHORT wFlags, VARTYPE vt)
     * }
     */
    public static MethodHandle VariantChangeTypeEx$handle() {
        return VariantChangeTypeEx.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VariantChangeTypeEx(VARIANTARG *pvargDest, const VARIANTARG *pvarSrc, LCID lcid, USHORT wFlags, VARTYPE vt)
     * }
     */
    public static int VariantChangeTypeEx(MemorySegment pvargDest, MemorySegment pvarSrc, int lcid, short wFlags, short vt) {
        var mh$ = VariantChangeTypeEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VariantChangeTypeEx", pvargDest, pvarSrc, lcid, wFlags, vt);
            }
            return (int)mh$.invokeExact(pvargDest, pvarSrc, lcid, wFlags, vt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VectorFromBstr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("VectorFromBstr"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VectorFromBstr(BSTR bstr, SAFEARRAY **ppsa)
     * }
     */
    public static FunctionDescriptor VectorFromBstr$descriptor() {
        return VectorFromBstr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VectorFromBstr(BSTR bstr, SAFEARRAY **ppsa)
     * }
     */
    public static MethodHandle VectorFromBstr$handle() {
        return VectorFromBstr.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VectorFromBstr(BSTR bstr, SAFEARRAY **ppsa)
     * }
     */
    public static int VectorFromBstr(MemorySegment bstr, MemorySegment ppsa) {
        var mh$ = VectorFromBstr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VectorFromBstr", bstr, ppsa);
            }
            return (int)mh$.invokeExact(bstr, ppsa);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BstrFromVector {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("BstrFromVector"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT BstrFromVector(SAFEARRAY *psa, BSTR *pbstr)
     * }
     */
    public static FunctionDescriptor BstrFromVector$descriptor() {
        return BstrFromVector.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT BstrFromVector(SAFEARRAY *psa, BSTR *pbstr)
     * }
     */
    public static MethodHandle BstrFromVector$handle() {
        return BstrFromVector.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT BstrFromVector(SAFEARRAY *psa, BSTR *pbstr)
     * }
     */
    public static int BstrFromVector(MemorySegment psa, MemorySegment pbstr) {
        var mh$ = BstrFromVector.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BstrFromVector", psa, pbstr);
            }
            return (int)mh$.invokeExact(psa, pbstr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI1FromI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_SHORT,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("VarUI1FromI2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromI2(SHORT sIn, BYTE *pbOut)
     * }
     */
    public static FunctionDescriptor VarUI1FromI2$descriptor() {
        return VarUI1FromI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromI2(SHORT sIn, BYTE *pbOut)
     * }
     */
    public static MethodHandle VarUI1FromI2$handle() {
        return VarUI1FromI2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromI2(SHORT sIn, BYTE *pbOut)
     * }
     */
    public static int VarUI1FromI2(short sIn, MemorySegment pbOut) {
        var mh$ = VarUI1FromI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI1FromI2", sIn, pbOut);
            }
            return (int)mh$.invokeExact(sIn, pbOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI1FromI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_LONG,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("VarUI1FromI4"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromI4(LONG lIn, BYTE *pbOut)
     * }
     */
    public static FunctionDescriptor VarUI1FromI4$descriptor() {
        return VarUI1FromI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromI4(LONG lIn, BYTE *pbOut)
     * }
     */
    public static MethodHandle VarUI1FromI4$handle() {
        return VarUI1FromI4.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromI4(LONG lIn, BYTE *pbOut)
     * }
     */
    public static int VarUI1FromI4(int lIn, MemorySegment pbOut) {
        var mh$ = VarUI1FromI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI1FromI4", lIn, pbOut);
            }
            return (int)mh$.invokeExact(lIn, pbOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI1FromI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_LONG_LONG,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("VarUI1FromI8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromI8(LONG64 i64In, BYTE *pbOut)
     * }
     */
    public static FunctionDescriptor VarUI1FromI8$descriptor() {
        return VarUI1FromI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromI8(LONG64 i64In, BYTE *pbOut)
     * }
     */
    public static MethodHandle VarUI1FromI8$handle() {
        return VarUI1FromI8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromI8(LONG64 i64In, BYTE *pbOut)
     * }
     */
    public static int VarUI1FromI8(long i64In, MemorySegment pbOut) {
        var mh$ = VarUI1FromI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI1FromI8", i64In, pbOut);
            }
            return (int)mh$.invokeExact(i64In, pbOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI1FromR4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_FLOAT,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("VarUI1FromR4"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromR4(FLOAT fltIn, BYTE *pbOut)
     * }
     */
    public static FunctionDescriptor VarUI1FromR4$descriptor() {
        return VarUI1FromR4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromR4(FLOAT fltIn, BYTE *pbOut)
     * }
     */
    public static MethodHandle VarUI1FromR4$handle() {
        return VarUI1FromR4.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromR4(FLOAT fltIn, BYTE *pbOut)
     * }
     */
    public static int VarUI1FromR4(float fltIn, MemorySegment pbOut) {
        var mh$ = VarUI1FromR4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI1FromR4", fltIn, pbOut);
            }
            return (int)mh$.invokeExact(fltIn, pbOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI1FromR8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_DOUBLE,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("VarUI1FromR8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromR8(DOUBLE dblIn, BYTE *pbOut)
     * }
     */
    public static FunctionDescriptor VarUI1FromR8$descriptor() {
        return VarUI1FromR8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromR8(DOUBLE dblIn, BYTE *pbOut)
     * }
     */
    public static MethodHandle VarUI1FromR8$handle() {
        return VarUI1FromR8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromR8(DOUBLE dblIn, BYTE *pbOut)
     * }
     */
    public static int VarUI1FromR8(double dblIn, MemorySegment pbOut) {
        var mh$ = VarUI1FromR8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI1FromR8", dblIn, pbOut);
            }
            return (int)mh$.invokeExact(dblIn, pbOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI1FromCy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            tagCY.layout(),
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("VarUI1FromCy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromCy(CY cyIn, BYTE *pbOut)
     * }
     */
    public static FunctionDescriptor VarUI1FromCy$descriptor() {
        return VarUI1FromCy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromCy(CY cyIn, BYTE *pbOut)
     * }
     */
    public static MethodHandle VarUI1FromCy$handle() {
        return VarUI1FromCy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromCy(CY cyIn, BYTE *pbOut)
     * }
     */
    public static int VarUI1FromCy(MemorySegment cyIn, MemorySegment pbOut) {
        var mh$ = VarUI1FromCy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI1FromCy", cyIn, pbOut);
            }
            return (int)mh$.invokeExact(cyIn, pbOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI1FromDate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_DOUBLE,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("VarUI1FromDate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromDate(DATE dateIn, BYTE *pbOut)
     * }
     */
    public static FunctionDescriptor VarUI1FromDate$descriptor() {
        return VarUI1FromDate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromDate(DATE dateIn, BYTE *pbOut)
     * }
     */
    public static MethodHandle VarUI1FromDate$handle() {
        return VarUI1FromDate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromDate(DATE dateIn, BYTE *pbOut)
     * }
     */
    public static int VarUI1FromDate(double dateIn, MemorySegment pbOut) {
        var mh$ = VarUI1FromDate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI1FromDate", dateIn, pbOut);
            }
            return (int)mh$.invokeExact(dateIn, pbOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI1FromStr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_LONG,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("VarUI1FromStr"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, BYTE *pbOut)
     * }
     */
    public static FunctionDescriptor VarUI1FromStr$descriptor() {
        return VarUI1FromStr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, BYTE *pbOut)
     * }
     */
    public static MethodHandle VarUI1FromStr$handle() {
        return VarUI1FromStr.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, BYTE *pbOut)
     * }
     */
    public static int VarUI1FromStr(MemorySegment strIn, int lcid, int dwFlags, MemorySegment pbOut) {
        var mh$ = VarUI1FromStr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI1FromStr", strIn, lcid, dwFlags, pbOut);
            }
            return (int)mh$.invokeExact(strIn, lcid, dwFlags, pbOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI1FromDisp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("VarUI1FromDisp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromDisp(IDispatch *pdispIn, LCID lcid, BYTE *pbOut)
     * }
     */
    public static FunctionDescriptor VarUI1FromDisp$descriptor() {
        return VarUI1FromDisp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromDisp(IDispatch *pdispIn, LCID lcid, BYTE *pbOut)
     * }
     */
    public static MethodHandle VarUI1FromDisp$handle() {
        return VarUI1FromDisp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromDisp(IDispatch *pdispIn, LCID lcid, BYTE *pbOut)
     * }
     */
    public static int VarUI1FromDisp(MemorySegment pdispIn, int lcid, MemorySegment pbOut) {
        var mh$ = VarUI1FromDisp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI1FromDisp", pdispIn, lcid, pbOut);
            }
            return (int)mh$.invokeExact(pdispIn, lcid, pbOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI1FromBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_SHORT,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("VarUI1FromBool"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromBool(VARIANT_BOOL boolIn, BYTE *pbOut)
     * }
     */
    public static FunctionDescriptor VarUI1FromBool$descriptor() {
        return VarUI1FromBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromBool(VARIANT_BOOL boolIn, BYTE *pbOut)
     * }
     */
    public static MethodHandle VarUI1FromBool$handle() {
        return VarUI1FromBool.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromBool(VARIANT_BOOL boolIn, BYTE *pbOut)
     * }
     */
    public static int VarUI1FromBool(short boolIn, MemorySegment pbOut) {
        var mh$ = VarUI1FromBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI1FromBool", boolIn, pbOut);
            }
            return (int)mh$.invokeExact(boolIn, pbOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI1FromI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_CHAR,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("VarUI1FromI1"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromI1(CHAR cIn, BYTE *pbOut)
     * }
     */
    public static FunctionDescriptor VarUI1FromI1$descriptor() {
        return VarUI1FromI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromI1(CHAR cIn, BYTE *pbOut)
     * }
     */
    public static MethodHandle VarUI1FromI1$handle() {
        return VarUI1FromI1.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromI1(CHAR cIn, BYTE *pbOut)
     * }
     */
    public static int VarUI1FromI1(byte cIn, MemorySegment pbOut) {
        var mh$ = VarUI1FromI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI1FromI1", cIn, pbOut);
            }
            return (int)mh$.invokeExact(cIn, pbOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI1FromUI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_SHORT,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("VarUI1FromUI2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromUI2(USHORT uiIn, BYTE *pbOut)
     * }
     */
    public static FunctionDescriptor VarUI1FromUI2$descriptor() {
        return VarUI1FromUI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromUI2(USHORT uiIn, BYTE *pbOut)
     * }
     */
    public static MethodHandle VarUI1FromUI2$handle() {
        return VarUI1FromUI2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromUI2(USHORT uiIn, BYTE *pbOut)
     * }
     */
    public static int VarUI1FromUI2(short uiIn, MemorySegment pbOut) {
        var mh$ = VarUI1FromUI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI1FromUI2", uiIn, pbOut);
            }
            return (int)mh$.invokeExact(uiIn, pbOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI1FromUI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_LONG,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("VarUI1FromUI4"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromUI4(ULONG ulIn, BYTE *pbOut)
     * }
     */
    public static FunctionDescriptor VarUI1FromUI4$descriptor() {
        return VarUI1FromUI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromUI4(ULONG ulIn, BYTE *pbOut)
     * }
     */
    public static MethodHandle VarUI1FromUI4$handle() {
        return VarUI1FromUI4.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromUI4(ULONG ulIn, BYTE *pbOut)
     * }
     */
    public static int VarUI1FromUI4(int ulIn, MemorySegment pbOut) {
        var mh$ = VarUI1FromUI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI1FromUI4", ulIn, pbOut);
            }
            return (int)mh$.invokeExact(ulIn, pbOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI1FromUI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_LONG_LONG,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("VarUI1FromUI8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromUI8(ULONG64 ui64In, BYTE *pbOut)
     * }
     */
    public static FunctionDescriptor VarUI1FromUI8$descriptor() {
        return VarUI1FromUI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromUI8(ULONG64 ui64In, BYTE *pbOut)
     * }
     */
    public static MethodHandle VarUI1FromUI8$handle() {
        return VarUI1FromUI8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromUI8(ULONG64 ui64In, BYTE *pbOut)
     * }
     */
    public static int VarUI1FromUI8(long ui64In, MemorySegment pbOut) {
        var mh$ = VarUI1FromUI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI1FromUI8", ui64In, pbOut);
            }
            return (int)mh$.invokeExact(ui64In, pbOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI1FromDec {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("VarUI1FromDec"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromDec(const DECIMAL *pdecIn, BYTE *pbOut)
     * }
     */
    public static FunctionDescriptor VarUI1FromDec$descriptor() {
        return VarUI1FromDec.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromDec(const DECIMAL *pdecIn, BYTE *pbOut)
     * }
     */
    public static MethodHandle VarUI1FromDec$handle() {
        return VarUI1FromDec.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromDec(const DECIMAL *pdecIn, BYTE *pbOut)
     * }
     */
    public static int VarUI1FromDec(MemorySegment pdecIn, MemorySegment pbOut) {
        var mh$ = VarUI1FromDec.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI1FromDec", pdecIn, pbOut);
            }
            return (int)mh$.invokeExact(pdecIn, pbOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI2FromUI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_CHAR,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("VarI2FromUI1"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromUI1(BYTE bIn, SHORT *psOut)
     * }
     */
    public static FunctionDescriptor VarI2FromUI1$descriptor() {
        return VarI2FromUI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromUI1(BYTE bIn, SHORT *psOut)
     * }
     */
    public static MethodHandle VarI2FromUI1$handle() {
        return VarI2FromUI1.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarI2FromUI1(BYTE bIn, SHORT *psOut)
     * }
     */
    public static int VarI2FromUI1(byte bIn, MemorySegment psOut) {
        var mh$ = VarI2FromUI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI2FromUI1", bIn, psOut);
            }
            return (int)mh$.invokeExact(bIn, psOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI2FromI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_LONG,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("VarI2FromI4"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromI4(LONG lIn, SHORT *psOut)
     * }
     */
    public static FunctionDescriptor VarI2FromI4$descriptor() {
        return VarI2FromI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromI4(LONG lIn, SHORT *psOut)
     * }
     */
    public static MethodHandle VarI2FromI4$handle() {
        return VarI2FromI4.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarI2FromI4(LONG lIn, SHORT *psOut)
     * }
     */
    public static int VarI2FromI4(int lIn, MemorySegment psOut) {
        var mh$ = VarI2FromI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI2FromI4", lIn, psOut);
            }
            return (int)mh$.invokeExact(lIn, psOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI2FromI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_LONG_LONG,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("VarI2FromI8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromI8(LONG64 i64In, SHORT *psOut)
     * }
     */
    public static FunctionDescriptor VarI2FromI8$descriptor() {
        return VarI2FromI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromI8(LONG64 i64In, SHORT *psOut)
     * }
     */
    public static MethodHandle VarI2FromI8$handle() {
        return VarI2FromI8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarI2FromI8(LONG64 i64In, SHORT *psOut)
     * }
     */
    public static int VarI2FromI8(long i64In, MemorySegment psOut) {
        var mh$ = VarI2FromI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI2FromI8", i64In, psOut);
            }
            return (int)mh$.invokeExact(i64In, psOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI2FromR4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_FLOAT,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("VarI2FromR4"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromR4(FLOAT fltIn, SHORT *psOut)
     * }
     */
    public static FunctionDescriptor VarI2FromR4$descriptor() {
        return VarI2FromR4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromR4(FLOAT fltIn, SHORT *psOut)
     * }
     */
    public static MethodHandle VarI2FromR4$handle() {
        return VarI2FromR4.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarI2FromR4(FLOAT fltIn, SHORT *psOut)
     * }
     */
    public static int VarI2FromR4(float fltIn, MemorySegment psOut) {
        var mh$ = VarI2FromR4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI2FromR4", fltIn, psOut);
            }
            return (int)mh$.invokeExact(fltIn, psOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI2FromR8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_DOUBLE,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("VarI2FromR8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromR8(DOUBLE dblIn, SHORT *psOut)
     * }
     */
    public static FunctionDescriptor VarI2FromR8$descriptor() {
        return VarI2FromR8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromR8(DOUBLE dblIn, SHORT *psOut)
     * }
     */
    public static MethodHandle VarI2FromR8$handle() {
        return VarI2FromR8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarI2FromR8(DOUBLE dblIn, SHORT *psOut)
     * }
     */
    public static int VarI2FromR8(double dblIn, MemorySegment psOut) {
        var mh$ = VarI2FromR8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI2FromR8", dblIn, psOut);
            }
            return (int)mh$.invokeExact(dblIn, psOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI2FromCy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            tagCY.layout(),
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("VarI2FromCy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromCy(CY cyIn, SHORT *psOut)
     * }
     */
    public static FunctionDescriptor VarI2FromCy$descriptor() {
        return VarI2FromCy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromCy(CY cyIn, SHORT *psOut)
     * }
     */
    public static MethodHandle VarI2FromCy$handle() {
        return VarI2FromCy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarI2FromCy(CY cyIn, SHORT *psOut)
     * }
     */
    public static int VarI2FromCy(MemorySegment cyIn, MemorySegment psOut) {
        var mh$ = VarI2FromCy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI2FromCy", cyIn, psOut);
            }
            return (int)mh$.invokeExact(cyIn, psOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI2FromDate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_DOUBLE,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("VarI2FromDate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromDate(DATE dateIn, SHORT *psOut)
     * }
     */
    public static FunctionDescriptor VarI2FromDate$descriptor() {
        return VarI2FromDate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromDate(DATE dateIn, SHORT *psOut)
     * }
     */
    public static MethodHandle VarI2FromDate$handle() {
        return VarI2FromDate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarI2FromDate(DATE dateIn, SHORT *psOut)
     * }
     */
    public static int VarI2FromDate(double dateIn, MemorySegment psOut) {
        var mh$ = VarI2FromDate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI2FromDate", dateIn, psOut);
            }
            return (int)mh$.invokeExact(dateIn, psOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI2FromStr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_LONG,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("VarI2FromStr"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, SHORT *psOut)
     * }
     */
    public static FunctionDescriptor VarI2FromStr$descriptor() {
        return VarI2FromStr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, SHORT *psOut)
     * }
     */
    public static MethodHandle VarI2FromStr$handle() {
        return VarI2FromStr.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarI2FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, SHORT *psOut)
     * }
     */
    public static int VarI2FromStr(MemorySegment strIn, int lcid, int dwFlags, MemorySegment psOut) {
        var mh$ = VarI2FromStr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI2FromStr", strIn, lcid, dwFlags, psOut);
            }
            return (int)mh$.invokeExact(strIn, lcid, dwFlags, psOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI2FromDisp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("VarI2FromDisp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromDisp(IDispatch *pdispIn, LCID lcid, SHORT *psOut)
     * }
     */
    public static FunctionDescriptor VarI2FromDisp$descriptor() {
        return VarI2FromDisp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromDisp(IDispatch *pdispIn, LCID lcid, SHORT *psOut)
     * }
     */
    public static MethodHandle VarI2FromDisp$handle() {
        return VarI2FromDisp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarI2FromDisp(IDispatch *pdispIn, LCID lcid, SHORT *psOut)
     * }
     */
    public static int VarI2FromDisp(MemorySegment pdispIn, int lcid, MemorySegment psOut) {
        var mh$ = VarI2FromDisp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI2FromDisp", pdispIn, lcid, psOut);
            }
            return (int)mh$.invokeExact(pdispIn, lcid, psOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI2FromBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_SHORT,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("VarI2FromBool"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromBool(VARIANT_BOOL boolIn, SHORT *psOut)
     * }
     */
    public static FunctionDescriptor VarI2FromBool$descriptor() {
        return VarI2FromBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromBool(VARIANT_BOOL boolIn, SHORT *psOut)
     * }
     */
    public static MethodHandle VarI2FromBool$handle() {
        return VarI2FromBool.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarI2FromBool(VARIANT_BOOL boolIn, SHORT *psOut)
     * }
     */
    public static int VarI2FromBool(short boolIn, MemorySegment psOut) {
        var mh$ = VarI2FromBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI2FromBool", boolIn, psOut);
            }
            return (int)mh$.invokeExact(boolIn, psOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI2FromI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_CHAR,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("VarI2FromI1"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromI1(CHAR cIn, SHORT *psOut)
     * }
     */
    public static FunctionDescriptor VarI2FromI1$descriptor() {
        return VarI2FromI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromI1(CHAR cIn, SHORT *psOut)
     * }
     */
    public static MethodHandle VarI2FromI1$handle() {
        return VarI2FromI1.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarI2FromI1(CHAR cIn, SHORT *psOut)
     * }
     */
    public static int VarI2FromI1(byte cIn, MemorySegment psOut) {
        var mh$ = VarI2FromI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI2FromI1", cIn, psOut);
            }
            return (int)mh$.invokeExact(cIn, psOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI2FromUI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_SHORT,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("VarI2FromUI2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromUI2(USHORT uiIn, SHORT *psOut)
     * }
     */
    public static FunctionDescriptor VarI2FromUI2$descriptor() {
        return VarI2FromUI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromUI2(USHORT uiIn, SHORT *psOut)
     * }
     */
    public static MethodHandle VarI2FromUI2$handle() {
        return VarI2FromUI2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarI2FromUI2(USHORT uiIn, SHORT *psOut)
     * }
     */
    public static int VarI2FromUI2(short uiIn, MemorySegment psOut) {
        var mh$ = VarI2FromUI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI2FromUI2", uiIn, psOut);
            }
            return (int)mh$.invokeExact(uiIn, psOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI2FromUI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_LONG,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("VarI2FromUI4"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromUI4(ULONG ulIn, SHORT *psOut)
     * }
     */
    public static FunctionDescriptor VarI2FromUI4$descriptor() {
        return VarI2FromUI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromUI4(ULONG ulIn, SHORT *psOut)
     * }
     */
    public static MethodHandle VarI2FromUI4$handle() {
        return VarI2FromUI4.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarI2FromUI4(ULONG ulIn, SHORT *psOut)
     * }
     */
    public static int VarI2FromUI4(int ulIn, MemorySegment psOut) {
        var mh$ = VarI2FromUI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI2FromUI4", ulIn, psOut);
            }
            return (int)mh$.invokeExact(ulIn, psOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI2FromUI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_LONG_LONG,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("VarI2FromUI8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromUI8(ULONG64 ui64In, SHORT *psOut)
     * }
     */
    public static FunctionDescriptor VarI2FromUI8$descriptor() {
        return VarI2FromUI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromUI8(ULONG64 ui64In, SHORT *psOut)
     * }
     */
    public static MethodHandle VarI2FromUI8$handle() {
        return VarI2FromUI8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarI2FromUI8(ULONG64 ui64In, SHORT *psOut)
     * }
     */
    public static int VarI2FromUI8(long ui64In, MemorySegment psOut) {
        var mh$ = VarI2FromUI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI2FromUI8", ui64In, psOut);
            }
            return (int)mh$.invokeExact(ui64In, psOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI2FromDec {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("VarI2FromDec"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromDec(const DECIMAL *pdecIn, SHORT *psOut)
     * }
     */
    public static FunctionDescriptor VarI2FromDec$descriptor() {
        return VarI2FromDec.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromDec(const DECIMAL *pdecIn, SHORT *psOut)
     * }
     */
    public static MethodHandle VarI2FromDec$handle() {
        return VarI2FromDec.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarI2FromDec(const DECIMAL *pdecIn, SHORT *psOut)
     * }
     */
    public static int VarI2FromDec(MemorySegment pdecIn, MemorySegment psOut) {
        var mh$ = VarI2FromDec.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI2FromDec", pdecIn, psOut);
            }
            return (int)mh$.invokeExact(pdecIn, psOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI4FromUI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_CHAR,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("VarI4FromUI1"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromUI1(BYTE bIn, LONG *plOut)
     * }
     */
    public static FunctionDescriptor VarI4FromUI1$descriptor() {
        return VarI4FromUI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromUI1(BYTE bIn, LONG *plOut)
     * }
     */
    public static MethodHandle VarI4FromUI1$handle() {
        return VarI4FromUI1.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarI4FromUI1(BYTE bIn, LONG *plOut)
     * }
     */
    public static int VarI4FromUI1(byte bIn, MemorySegment plOut) {
        var mh$ = VarI4FromUI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI4FromUI1", bIn, plOut);
            }
            return (int)mh$.invokeExact(bIn, plOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI4FromI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_SHORT,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("VarI4FromI2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromI2(SHORT sIn, LONG *plOut)
     * }
     */
    public static FunctionDescriptor VarI4FromI2$descriptor() {
        return VarI4FromI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromI2(SHORT sIn, LONG *plOut)
     * }
     */
    public static MethodHandle VarI4FromI2$handle() {
        return VarI4FromI2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarI4FromI2(SHORT sIn, LONG *plOut)
     * }
     */
    public static int VarI4FromI2(short sIn, MemorySegment plOut) {
        var mh$ = VarI4FromI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI4FromI2", sIn, plOut);
            }
            return (int)mh$.invokeExact(sIn, plOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI4FromI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_LONG_LONG,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("VarI4FromI8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromI8(LONG64 i64In, LONG *plOut)
     * }
     */
    public static FunctionDescriptor VarI4FromI8$descriptor() {
        return VarI4FromI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromI8(LONG64 i64In, LONG *plOut)
     * }
     */
    public static MethodHandle VarI4FromI8$handle() {
        return VarI4FromI8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarI4FromI8(LONG64 i64In, LONG *plOut)
     * }
     */
    public static int VarI4FromI8(long i64In, MemorySegment plOut) {
        var mh$ = VarI4FromI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI4FromI8", i64In, plOut);
            }
            return (int)mh$.invokeExact(i64In, plOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI4FromR4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_FLOAT,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("VarI4FromR4"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromR4(FLOAT fltIn, LONG *plOut)
     * }
     */
    public static FunctionDescriptor VarI4FromR4$descriptor() {
        return VarI4FromR4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromR4(FLOAT fltIn, LONG *plOut)
     * }
     */
    public static MethodHandle VarI4FromR4$handle() {
        return VarI4FromR4.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarI4FromR4(FLOAT fltIn, LONG *plOut)
     * }
     */
    public static int VarI4FromR4(float fltIn, MemorySegment plOut) {
        var mh$ = VarI4FromR4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI4FromR4", fltIn, plOut);
            }
            return (int)mh$.invokeExact(fltIn, plOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI4FromR8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_DOUBLE,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("VarI4FromR8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromR8(DOUBLE dblIn, LONG *plOut)
     * }
     */
    public static FunctionDescriptor VarI4FromR8$descriptor() {
        return VarI4FromR8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromR8(DOUBLE dblIn, LONG *plOut)
     * }
     */
    public static MethodHandle VarI4FromR8$handle() {
        return VarI4FromR8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarI4FromR8(DOUBLE dblIn, LONG *plOut)
     * }
     */
    public static int VarI4FromR8(double dblIn, MemorySegment plOut) {
        var mh$ = VarI4FromR8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI4FromR8", dblIn, plOut);
            }
            return (int)mh$.invokeExact(dblIn, plOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI4FromCy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            tagCY.layout(),
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("VarI4FromCy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromCy(CY cyIn, LONG *plOut)
     * }
     */
    public static FunctionDescriptor VarI4FromCy$descriptor() {
        return VarI4FromCy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromCy(CY cyIn, LONG *plOut)
     * }
     */
    public static MethodHandle VarI4FromCy$handle() {
        return VarI4FromCy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarI4FromCy(CY cyIn, LONG *plOut)
     * }
     */
    public static int VarI4FromCy(MemorySegment cyIn, MemorySegment plOut) {
        var mh$ = VarI4FromCy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI4FromCy", cyIn, plOut);
            }
            return (int)mh$.invokeExact(cyIn, plOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI4FromDate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_DOUBLE,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("VarI4FromDate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromDate(DATE dateIn, LONG *plOut)
     * }
     */
    public static FunctionDescriptor VarI4FromDate$descriptor() {
        return VarI4FromDate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromDate(DATE dateIn, LONG *plOut)
     * }
     */
    public static MethodHandle VarI4FromDate$handle() {
        return VarI4FromDate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarI4FromDate(DATE dateIn, LONG *plOut)
     * }
     */
    public static int VarI4FromDate(double dateIn, MemorySegment plOut) {
        var mh$ = VarI4FromDate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI4FromDate", dateIn, plOut);
            }
            return (int)mh$.invokeExact(dateIn, plOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI4FromStr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_LONG,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("VarI4FromStr"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, LONG *plOut)
     * }
     */
    public static FunctionDescriptor VarI4FromStr$descriptor() {
        return VarI4FromStr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, LONG *plOut)
     * }
     */
    public static MethodHandle VarI4FromStr$handle() {
        return VarI4FromStr.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarI4FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, LONG *plOut)
     * }
     */
    public static int VarI4FromStr(MemorySegment strIn, int lcid, int dwFlags, MemorySegment plOut) {
        var mh$ = VarI4FromStr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI4FromStr", strIn, lcid, dwFlags, plOut);
            }
            return (int)mh$.invokeExact(strIn, lcid, dwFlags, plOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI4FromDisp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_LONG,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("VarI4FromDisp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromDisp(IDispatch *pdispIn, LCID lcid, LONG *plOut)
     * }
     */
    public static FunctionDescriptor VarI4FromDisp$descriptor() {
        return VarI4FromDisp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromDisp(IDispatch *pdispIn, LCID lcid, LONG *plOut)
     * }
     */
    public static MethodHandle VarI4FromDisp$handle() {
        return VarI4FromDisp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarI4FromDisp(IDispatch *pdispIn, LCID lcid, LONG *plOut)
     * }
     */
    public static int VarI4FromDisp(MemorySegment pdispIn, int lcid, MemorySegment plOut) {
        var mh$ = VarI4FromDisp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI4FromDisp", pdispIn, lcid, plOut);
            }
            return (int)mh$.invokeExact(pdispIn, lcid, plOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI4FromBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_SHORT,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("VarI4FromBool"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromBool(VARIANT_BOOL boolIn, LONG *plOut)
     * }
     */
    public static FunctionDescriptor VarI4FromBool$descriptor() {
        return VarI4FromBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromBool(VARIANT_BOOL boolIn, LONG *plOut)
     * }
     */
    public static MethodHandle VarI4FromBool$handle() {
        return VarI4FromBool.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarI4FromBool(VARIANT_BOOL boolIn, LONG *plOut)
     * }
     */
    public static int VarI4FromBool(short boolIn, MemorySegment plOut) {
        var mh$ = VarI4FromBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI4FromBool", boolIn, plOut);
            }
            return (int)mh$.invokeExact(boolIn, plOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI4FromI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_CHAR,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("VarI4FromI1"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromI1(CHAR cIn, LONG *plOut)
     * }
     */
    public static FunctionDescriptor VarI4FromI1$descriptor() {
        return VarI4FromI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromI1(CHAR cIn, LONG *plOut)
     * }
     */
    public static MethodHandle VarI4FromI1$handle() {
        return VarI4FromI1.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarI4FromI1(CHAR cIn, LONG *plOut)
     * }
     */
    public static int VarI4FromI1(byte cIn, MemorySegment plOut) {
        var mh$ = VarI4FromI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI4FromI1", cIn, plOut);
            }
            return (int)mh$.invokeExact(cIn, plOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI4FromUI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_SHORT,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("VarI4FromUI2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromUI2(USHORT uiIn, LONG *plOut)
     * }
     */
    public static FunctionDescriptor VarI4FromUI2$descriptor() {
        return VarI4FromUI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromUI2(USHORT uiIn, LONG *plOut)
     * }
     */
    public static MethodHandle VarI4FromUI2$handle() {
        return VarI4FromUI2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarI4FromUI2(USHORT uiIn, LONG *plOut)
     * }
     */
    public static int VarI4FromUI2(short uiIn, MemorySegment plOut) {
        var mh$ = VarI4FromUI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI4FromUI2", uiIn, plOut);
            }
            return (int)mh$.invokeExact(uiIn, plOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI4FromUI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_LONG,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("VarI4FromUI4"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromUI4(ULONG ulIn, LONG *plOut)
     * }
     */
    public static FunctionDescriptor VarI4FromUI4$descriptor() {
        return VarI4FromUI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromUI4(ULONG ulIn, LONG *plOut)
     * }
     */
    public static MethodHandle VarI4FromUI4$handle() {
        return VarI4FromUI4.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarI4FromUI4(ULONG ulIn, LONG *plOut)
     * }
     */
    public static int VarI4FromUI4(int ulIn, MemorySegment plOut) {
        var mh$ = VarI4FromUI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI4FromUI4", ulIn, plOut);
            }
            return (int)mh$.invokeExact(ulIn, plOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI4FromUI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_LONG_LONG,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("VarI4FromUI8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromUI8(ULONG64 ui64In, LONG *plOut)
     * }
     */
    public static FunctionDescriptor VarI4FromUI8$descriptor() {
        return VarI4FromUI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromUI8(ULONG64 ui64In, LONG *plOut)
     * }
     */
    public static MethodHandle VarI4FromUI8$handle() {
        return VarI4FromUI8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarI4FromUI8(ULONG64 ui64In, LONG *plOut)
     * }
     */
    public static int VarI4FromUI8(long ui64In, MemorySegment plOut) {
        var mh$ = VarI4FromUI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI4FromUI8", ui64In, plOut);
            }
            return (int)mh$.invokeExact(ui64In, plOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI4FromDec {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_POINTER,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("VarI4FromDec"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromDec(const DECIMAL *pdecIn, LONG *plOut)
     * }
     */
    public static FunctionDescriptor VarI4FromDec$descriptor() {
        return VarI4FromDec.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromDec(const DECIMAL *pdecIn, LONG *plOut)
     * }
     */
    public static MethodHandle VarI4FromDec$handle() {
        return VarI4FromDec.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarI4FromDec(const DECIMAL *pdecIn, LONG *plOut)
     * }
     */
    public static int VarI4FromDec(MemorySegment pdecIn, MemorySegment plOut) {
        var mh$ = VarI4FromDec.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI4FromDec", pdecIn, plOut);
            }
            return (int)mh$.invokeExact(pdecIn, plOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI8FromUI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_CHAR,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("VarI8FromUI1"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromUI1(BYTE bIn, LONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarI8FromUI1$descriptor() {
        return VarI8FromUI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromUI1(BYTE bIn, LONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarI8FromUI1$handle() {
        return VarI8FromUI1.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarI8FromUI1(BYTE bIn, LONG64 *pi64Out)
     * }
     */
    public static int VarI8FromUI1(byte bIn, MemorySegment pi64Out) {
        var mh$ = VarI8FromUI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI8FromUI1", bIn, pi64Out);
            }
            return (int)mh$.invokeExact(bIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI8FromI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_SHORT,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("VarI8FromI2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromI2(SHORT sIn, LONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarI8FromI2$descriptor() {
        return VarI8FromI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromI2(SHORT sIn, LONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarI8FromI2$handle() {
        return VarI8FromI2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarI8FromI2(SHORT sIn, LONG64 *pi64Out)
     * }
     */
    public static int VarI8FromI2(short sIn, MemorySegment pi64Out) {
        var mh$ = VarI8FromI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI8FromI2", sIn, pi64Out);
            }
            return (int)mh$.invokeExact(sIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI8FromR4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Windows_h.C_LONG,
            Windows_h.C_FLOAT,
            Windows_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Windows_h.findOrThrow("VarI8FromR4"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromR4(FLOAT fltIn, LONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarI8FromR4$descriptor() {
        return VarI8FromR4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromR4(FLOAT fltIn, LONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarI8FromR4$handle() {
        return VarI8FromR4.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarI8FromR4(FLOAT fltIn, LONG64 *pi64Out)
     * }
     */
    public static int VarI8FromR4(float fltIn, MemorySegment pi64Out) {
        var mh$ = VarI8FromR4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI8FromR4", fltIn, pi64Out);
            }
            return (int)mh$.invokeExact(fltIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
}


// Generated by jextract

package com.twitter.teruteru128.preview.windows;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class Windows_h_15 extends Windows_h_14 {

    public static MethodHandle Wow64SetThreadContext$MH() {
        return RuntimeHelper.requireNonNull(constants$706.const$0,"Wow64SetThreadContext");
    }
    /**
     * {@snippet :
     * BOOL Wow64SetThreadContext(HANDLE hThread, const WOW64_CONTEXT* lpContext);
     * }
     */
    public static int Wow64SetThreadContext(MemorySegment hThread, MemorySegment lpContext) {
        var mh$ = Wow64SetThreadContext$MH();
        try {
            return (int)mh$.invokeExact(hThread, lpContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Wow64SuspendThread$MH() {
        return RuntimeHelper.requireNonNull(constants$706.const$1,"Wow64SuspendThread");
    }
    /**
     * {@snippet :
     * DWORD Wow64SuspendThread(HANDLE hThread);
     * }
     */
    public static int Wow64SuspendThread(MemorySegment hThread) {
        var mh$ = Wow64SuspendThread$MH();
        try {
            return (int)mh$.invokeExact(hThread);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagENUMUILANG* PENUMUILANG;
     * }
     */
    public static final AddressLayout PENUMUILANG = RuntimeHelper.POINTER;
    public static MethodHandle DisableThreadLibraryCalls$MH() {
        return RuntimeHelper.requireNonNull(constants$708.const$5,"DisableThreadLibraryCalls");
    }
    /**
     * {@snippet :
     * BOOL DisableThreadLibraryCalls(HMODULE hLibModule);
     * }
     */
    public static int DisableThreadLibraryCalls(MemorySegment hLibModule) {
        var mh$ = DisableThreadLibraryCalls$MH();
        try {
            return (int)mh$.invokeExact(hLibModule);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindResourceExW$MH() {
        return RuntimeHelper.requireNonNull(constants$709.const$1,"FindResourceExW");
    }
    /**
     * {@snippet :
     * HRSRC FindResourceExW(HMODULE hModule, LPCWSTR lpType, LPCWSTR lpName, WORD wLanguage);
     * }
     */
    public static MemorySegment FindResourceExW(MemorySegment hModule, MemorySegment lpType, MemorySegment lpName, short wLanguage) {
        var mh$ = FindResourceExW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hModule, lpType, lpName, wLanguage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindStringOrdinal$MH() {
        return RuntimeHelper.requireNonNull(constants$709.const$3,"FindStringOrdinal");
    }
    /**
     * {@snippet :
     * int FindStringOrdinal(DWORD dwFindStringOrdinalFlags, LPCWSTR lpStringSource, int cchSource, LPCWSTR lpStringValue, int cchValue, BOOL bIgnoreCase);
     * }
     */
    public static int FindStringOrdinal(int dwFindStringOrdinalFlags, MemorySegment lpStringSource, int cchSource, MemorySegment lpStringValue, int cchValue, int bIgnoreCase) {
        var mh$ = FindStringOrdinal$MH();
        try {
            return (int)mh$.invokeExact(dwFindStringOrdinalFlags, lpStringSource, cchSource, lpStringValue, cchValue, bIgnoreCase);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FreeLibrary$MH() {
        return RuntimeHelper.requireNonNull(constants$709.const$4,"FreeLibrary");
    }
    /**
     * {@snippet :
     * BOOL FreeLibrary(HMODULE hLibModule);
     * }
     */
    public static int FreeLibrary(MemorySegment hLibModule) {
        var mh$ = FreeLibrary$MH();
        try {
            return (int)mh$.invokeExact(hLibModule);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FreeLibraryAndExitThread$MH() {
        return RuntimeHelper.requireNonNull(constants$709.const$5,"FreeLibraryAndExitThread");
    }
    /**
     * {@snippet :
     * void FreeLibraryAndExitThread(HMODULE hLibModule, DWORD dwExitCode);
     * }
     */
    public static void FreeLibraryAndExitThread(MemorySegment hLibModule, int dwExitCode) {
        var mh$ = FreeLibraryAndExitThread$MH();
        try {
            mh$.invokeExact(hLibModule, dwExitCode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FreeResource$MH() {
        return RuntimeHelper.requireNonNull(constants$710.const$0,"FreeResource");
    }
    /**
     * {@snippet :
     * BOOL FreeResource(HGLOBAL hResData);
     * }
     */
    public static int FreeResource(MemorySegment hResData) {
        var mh$ = FreeResource$MH();
        try {
            return (int)mh$.invokeExact(hResData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetModuleFileNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$710.const$1,"GetModuleFileNameA");
    }
    /**
     * {@snippet :
     * DWORD GetModuleFileNameA(HMODULE hModule, LPSTR lpFilename, DWORD nSize);
     * }
     */
    public static int GetModuleFileNameA(MemorySegment hModule, MemorySegment lpFilename, int nSize) {
        var mh$ = GetModuleFileNameA$MH();
        try {
            return (int)mh$.invokeExact(hModule, lpFilename, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetModuleFileNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$710.const$2,"GetModuleFileNameW");
    }
    /**
     * {@snippet :
     * DWORD GetModuleFileNameW(HMODULE hModule, LPWSTR lpFilename, DWORD nSize);
     * }
     */
    public static int GetModuleFileNameW(MemorySegment hModule, MemorySegment lpFilename, int nSize) {
        var mh$ = GetModuleFileNameW$MH();
        try {
            return (int)mh$.invokeExact(hModule, lpFilename, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetModuleHandleA$MH() {
        return RuntimeHelper.requireNonNull(constants$710.const$3,"GetModuleHandleA");
    }
    /**
     * {@snippet :
     * HMODULE GetModuleHandleA(LPCSTR lpModuleName);
     * }
     */
    public static MemorySegment GetModuleHandleA(MemorySegment lpModuleName) {
        var mh$ = GetModuleHandleA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpModuleName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetModuleHandleW$MH() {
        return RuntimeHelper.requireNonNull(constants$710.const$4,"GetModuleHandleW");
    }
    /**
     * {@snippet :
     * HMODULE GetModuleHandleW(LPCWSTR lpModuleName);
     * }
     */
    public static MemorySegment GetModuleHandleW(MemorySegment lpModuleName) {
        var mh$ = GetModuleHandleW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpModuleName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetModuleHandleExA$MH() {
        return RuntimeHelper.requireNonNull(constants$711.const$2,"GetModuleHandleExA");
    }
    /**
     * {@snippet :
     * BOOL GetModuleHandleExA(DWORD dwFlags, LPCSTR lpModuleName, HMODULE* phModule);
     * }
     */
    public static int GetModuleHandleExA(int dwFlags, MemorySegment lpModuleName, MemorySegment phModule) {
        var mh$ = GetModuleHandleExA$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, lpModuleName, phModule);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetModuleHandleExW$MH() {
        return RuntimeHelper.requireNonNull(constants$711.const$3,"GetModuleHandleExW");
    }
    /**
     * {@snippet :
     * BOOL GetModuleHandleExW(DWORD dwFlags, LPCWSTR lpModuleName, HMODULE* phModule);
     * }
     */
    public static int GetModuleHandleExW(int dwFlags, MemorySegment lpModuleName, MemorySegment phModule) {
        var mh$ = GetModuleHandleExW$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, lpModuleName, phModule);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcAddress$MH() {
        return RuntimeHelper.requireNonNull(constants$711.const$4,"GetProcAddress");
    }
    /**
     * {@snippet :
     * FARPROC GetProcAddress(HMODULE hModule, LPCSTR lpProcName);
     * }
     */
    public static MemorySegment GetProcAddress(MemorySegment hModule, MemorySegment lpProcName) {
        var mh$ = GetProcAddress$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hModule, lpProcName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _REDIRECTION_FUNCTION_DESCRIPTOR* PREDIRECTION_FUNCTION_DESCRIPTOR;
     * }
     */
    public static final AddressLayout PREDIRECTION_FUNCTION_DESCRIPTOR = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _REDIRECTION_FUNCTION_DESCRIPTOR* PCREDIRECTION_FUNCTION_DESCRIPTOR;
     * }
     */
    public static final AddressLayout PCREDIRECTION_FUNCTION_DESCRIPTOR = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _REDIRECTION_DESCRIPTOR* PREDIRECTION_DESCRIPTOR;
     * }
     */
    public static final AddressLayout PREDIRECTION_DESCRIPTOR = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _REDIRECTION_DESCRIPTOR* PCREDIRECTION_DESCRIPTOR;
     * }
     */
    public static final AddressLayout PCREDIRECTION_DESCRIPTOR = RuntimeHelper.POINTER;
    public static MethodHandle LoadLibraryExA$MH() {
        return RuntimeHelper.requireNonNull(constants$713.const$2,"LoadLibraryExA");
    }
    /**
     * {@snippet :
     * HMODULE LoadLibraryExA(LPCSTR lpLibFileName, HANDLE hFile, DWORD dwFlags);
     * }
     */
    public static MemorySegment LoadLibraryExA(MemorySegment lpLibFileName, MemorySegment hFile, int dwFlags) {
        var mh$ = LoadLibraryExA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpLibFileName, hFile, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadLibraryExW$MH() {
        return RuntimeHelper.requireNonNull(constants$713.const$3,"LoadLibraryExW");
    }
    /**
     * {@snippet :
     * HMODULE LoadLibraryExW(LPCWSTR lpLibFileName, HANDLE hFile, DWORD dwFlags);
     * }
     */
    public static MemorySegment LoadLibraryExW(MemorySegment lpLibFileName, MemorySegment hFile, int dwFlags) {
        var mh$ = LoadLibraryExW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpLibFileName, hFile, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadResource$MH() {
        return RuntimeHelper.requireNonNull(constants$713.const$4,"LoadResource");
    }
    /**
     * {@snippet :
     * HGLOBAL LoadResource(HMODULE hModule, HRSRC hResInfo);
     * }
     */
    public static MemorySegment LoadResource(MemorySegment hModule, MemorySegment hResInfo) {
        var mh$ = LoadResource$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hModule, hResInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$713.const$5,"LoadStringA");
    }
    /**
     * {@snippet :
     * int LoadStringA(HINSTANCE hInstance, UINT uID, LPSTR lpBuffer, int cchBufferMax);
     * }
     */
    public static int LoadStringA(MemorySegment hInstance, int uID, MemorySegment lpBuffer, int cchBufferMax) {
        var mh$ = LoadStringA$MH();
        try {
            return (int)mh$.invokeExact(hInstance, uID, lpBuffer, cchBufferMax);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$714.const$0,"LoadStringW");
    }
    /**
     * {@snippet :
     * int LoadStringW(HINSTANCE hInstance, UINT uID, LPWSTR lpBuffer, int cchBufferMax);
     * }
     */
    public static int LoadStringW(MemorySegment hInstance, int uID, MemorySegment lpBuffer, int cchBufferMax) {
        var mh$ = LoadStringW$MH();
        try {
            return (int)mh$.invokeExact(hInstance, uID, lpBuffer, cchBufferMax);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LockResource$MH() {
        return RuntimeHelper.requireNonNull(constants$714.const$1,"LockResource");
    }
    /**
     * {@snippet :
     * LPVOID LockResource(HGLOBAL hResData);
     * }
     */
    public static MemorySegment LockResource(MemorySegment hResData) {
        var mh$ = LockResource$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hResData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SizeofResource$MH() {
        return RuntimeHelper.requireNonNull(constants$714.const$2,"SizeofResource");
    }
    /**
     * {@snippet :
     * DWORD SizeofResource(HMODULE hModule, HRSRC hResInfo);
     * }
     */
    public static int SizeofResource(MemorySegment hModule, MemorySegment hResInfo) {
        var mh$ = SizeofResource$MH();
        try {
            return (int)mh$.invokeExact(hModule, hResInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef void* DLL_DIRECTORY_COOKIE;
     * }
     */
    public static final AddressLayout DLL_DIRECTORY_COOKIE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef void** PDLL_DIRECTORY_COOKIE;
     * }
     */
    public static final AddressLayout PDLL_DIRECTORY_COOKIE = RuntimeHelper.POINTER;
    public static MethodHandle AddDllDirectory$MH() {
        return RuntimeHelper.requireNonNull(constants$714.const$3,"AddDllDirectory");
    }
    /**
     * {@snippet :
     * DLL_DIRECTORY_COOKIE AddDllDirectory(PCWSTR NewDirectory);
     * }
     */
    public static MemorySegment AddDllDirectory(MemorySegment NewDirectory) {
        var mh$ = AddDllDirectory$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(NewDirectory);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RemoveDllDirectory$MH() {
        return RuntimeHelper.requireNonNull(constants$714.const$4,"RemoveDllDirectory");
    }
    /**
     * {@snippet :
     * BOOL RemoveDllDirectory(DLL_DIRECTORY_COOKIE Cookie);
     * }
     */
    public static int RemoveDllDirectory(MemorySegment Cookie) {
        var mh$ = RemoveDllDirectory$MH();
        try {
            return (int)mh$.invokeExact(Cookie);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetDefaultDllDirectories$MH() {
        return RuntimeHelper.requireNonNull(constants$714.const$5,"SetDefaultDllDirectories");
    }
    /**
     * {@snippet :
     * BOOL SetDefaultDllDirectories(DWORD DirectoryFlags);
     * }
     */
    public static int SetDefaultDllDirectories(int DirectoryFlags) {
        var mh$ = SetDefaultDllDirectories$MH();
        try {
            return (int)mh$.invokeExact(DirectoryFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumResourceLanguagesExA$MH() {
        return RuntimeHelper.requireNonNull(constants$715.const$1,"EnumResourceLanguagesExA");
    }
    /**
     * {@snippet :
     * BOOL EnumResourceLanguagesExA(HMODULE hModule, LPCSTR lpType, LPCSTR lpName, ENUMRESLANGPROCA lpEnumFunc, LONG_PTR lParam, DWORD dwFlags, LANGID LangId);
     * }
     */
    public static int EnumResourceLanguagesExA(MemorySegment hModule, MemorySegment lpType, MemorySegment lpName, MemorySegment lpEnumFunc, long lParam, int dwFlags, short LangId) {
        var mh$ = EnumResourceLanguagesExA$MH();
        try {
            return (int)mh$.invokeExact(hModule, lpType, lpName, lpEnumFunc, lParam, dwFlags, LangId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumResourceLanguagesExW$MH() {
        return RuntimeHelper.requireNonNull(constants$715.const$2,"EnumResourceLanguagesExW");
    }
    /**
     * {@snippet :
     * BOOL EnumResourceLanguagesExW(HMODULE hModule, LPCWSTR lpType, LPCWSTR lpName, ENUMRESLANGPROCW lpEnumFunc, LONG_PTR lParam, DWORD dwFlags, LANGID LangId);
     * }
     */
    public static int EnumResourceLanguagesExW(MemorySegment hModule, MemorySegment lpType, MemorySegment lpName, MemorySegment lpEnumFunc, long lParam, int dwFlags, short LangId) {
        var mh$ = EnumResourceLanguagesExW$MH();
        try {
            return (int)mh$.invokeExact(hModule, lpType, lpName, lpEnumFunc, lParam, dwFlags, LangId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumResourceNamesExA$MH() {
        return RuntimeHelper.requireNonNull(constants$715.const$4,"EnumResourceNamesExA");
    }
    /**
     * {@snippet :
     * BOOL EnumResourceNamesExA(HMODULE hModule, LPCSTR lpType, ENUMRESNAMEPROCA lpEnumFunc, LONG_PTR lParam, DWORD dwFlags, LANGID LangId);
     * }
     */
    public static int EnumResourceNamesExA(MemorySegment hModule, MemorySegment lpType, MemorySegment lpEnumFunc, long lParam, int dwFlags, short LangId) {
        var mh$ = EnumResourceNamesExA$MH();
        try {
            return (int)mh$.invokeExact(hModule, lpType, lpEnumFunc, lParam, dwFlags, LangId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumResourceNamesExW$MH() {
        return RuntimeHelper.requireNonNull(constants$715.const$5,"EnumResourceNamesExW");
    }
    /**
     * {@snippet :
     * BOOL EnumResourceNamesExW(HMODULE hModule, LPCWSTR lpType, ENUMRESNAMEPROCW lpEnumFunc, LONG_PTR lParam, DWORD dwFlags, LANGID LangId);
     * }
     */
    public static int EnumResourceNamesExW(MemorySegment hModule, MemorySegment lpType, MemorySegment lpEnumFunc, long lParam, int dwFlags, short LangId) {
        var mh$ = EnumResourceNamesExW$MH();
        try {
            return (int)mh$.invokeExact(hModule, lpType, lpEnumFunc, lParam, dwFlags, LangId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumResourceTypesExA$MH() {
        return RuntimeHelper.requireNonNull(constants$716.const$1,"EnumResourceTypesExA");
    }
    /**
     * {@snippet :
     * BOOL EnumResourceTypesExA(HMODULE hModule, ENUMRESTYPEPROCA lpEnumFunc, LONG_PTR lParam, DWORD dwFlags, LANGID LangId);
     * }
     */
    public static int EnumResourceTypesExA(MemorySegment hModule, MemorySegment lpEnumFunc, long lParam, int dwFlags, short LangId) {
        var mh$ = EnumResourceTypesExA$MH();
        try {
            return (int)mh$.invokeExact(hModule, lpEnumFunc, lParam, dwFlags, LangId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumResourceTypesExW$MH() {
        return RuntimeHelper.requireNonNull(constants$716.const$2,"EnumResourceTypesExW");
    }
    /**
     * {@snippet :
     * BOOL EnumResourceTypesExW(HMODULE hModule, ENUMRESTYPEPROCW lpEnumFunc, LONG_PTR lParam, DWORD dwFlags, LANGID LangId);
     * }
     */
    public static int EnumResourceTypesExW(MemorySegment hModule, MemorySegment lpEnumFunc, long lParam, int dwFlags, short LangId) {
        var mh$ = EnumResourceTypesExW$MH();
        try {
            return (int)mh$.invokeExact(hModule, lpEnumFunc, lParam, dwFlags, LangId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindResourceW$MH() {
        return RuntimeHelper.requireNonNull(constants$716.const$3,"FindResourceW");
    }
    /**
     * {@snippet :
     * HRSRC FindResourceW(HMODULE hModule, LPCWSTR lpName, LPCWSTR lpType);
     * }
     */
    public static MemorySegment FindResourceW(MemorySegment hModule, MemorySegment lpName, MemorySegment lpType) {
        var mh$ = FindResourceW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hModule, lpName, lpType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadLibraryA$MH() {
        return RuntimeHelper.requireNonNull(constants$716.const$4,"LoadLibraryA");
    }
    /**
     * {@snippet :
     * HMODULE LoadLibraryA(LPCSTR lpLibFileName);
     * }
     */
    public static MemorySegment LoadLibraryA(MemorySegment lpLibFileName) {
        var mh$ = LoadLibraryA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpLibFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadLibraryW$MH() {
        return RuntimeHelper.requireNonNull(constants$716.const$5,"LoadLibraryW");
    }
    /**
     * {@snippet :
     * HMODULE LoadLibraryW(LPCWSTR lpLibFileName);
     * }
     */
    public static MemorySegment LoadLibraryW(MemorySegment lpLibFileName) {
        var mh$ = LoadLibraryW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpLibFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumResourceNamesW$MH() {
        return RuntimeHelper.requireNonNull(constants$717.const$0,"EnumResourceNamesW");
    }
    /**
     * {@snippet :
     * BOOL EnumResourceNamesW(HMODULE hModule, LPCWSTR lpType, ENUMRESNAMEPROCW lpEnumFunc, LONG_PTR lParam);
     * }
     */
    public static int EnumResourceNamesW(MemorySegment hModule, MemorySegment lpType, MemorySegment lpEnumFunc, long lParam) {
        var mh$ = EnumResourceNamesW$MH();
        try {
            return (int)mh$.invokeExact(hModule, lpType, lpEnumFunc, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumResourceNamesA$MH() {
        return RuntimeHelper.requireNonNull(constants$717.const$1,"EnumResourceNamesA");
    }
    /**
     * {@snippet :
     * BOOL EnumResourceNamesA(HMODULE hModule, LPCSTR lpType, ENUMRESNAMEPROCA lpEnumFunc, LONG_PTR lParam);
     * }
     */
    public static int EnumResourceNamesA(MemorySegment hModule, MemorySegment lpType, MemorySegment lpEnumFunc, long lParam) {
        var mh$ = EnumResourceNamesA$MH();
        try {
            return (int)mh$.invokeExact(hModule, lpType, lpEnumFunc, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AccessCheck$MH() {
        return RuntimeHelper.requireNonNull(constants$717.const$3,"AccessCheck");
    }
    /**
     * {@snippet :
     * BOOL AccessCheck(PSECURITY_DESCRIPTOR pSecurityDescriptor, HANDLE ClientToken, DWORD DesiredAccess, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, LPDWORD PrivilegeSetLength, LPDWORD GrantedAccess, LPBOOL AccessStatus);
     * }
     */
    public static int AccessCheck(MemorySegment pSecurityDescriptor, MemorySegment ClientToken, int DesiredAccess, MemorySegment GenericMapping, MemorySegment PrivilegeSet, MemorySegment PrivilegeSetLength, MemorySegment GrantedAccess, MemorySegment AccessStatus) {
        var mh$ = AccessCheck$MH();
        try {
            return (int)mh$.invokeExact(pSecurityDescriptor, ClientToken, DesiredAccess, GenericMapping, PrivilegeSet, PrivilegeSetLength, GrantedAccess, AccessStatus);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AccessCheckAndAuditAlarmW$MH() {
        return RuntimeHelper.requireNonNull(constants$717.const$5,"AccessCheckAndAuditAlarmW");
    }
    /**
     * {@snippet :
     * BOOL AccessCheckAndAuditAlarmW(LPCWSTR SubsystemName, LPVOID HandleId, LPWSTR ObjectTypeName, LPWSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, DWORD DesiredAccess, PGENERIC_MAPPING GenericMapping, BOOL ObjectCreation, LPDWORD GrantedAccess, LPBOOL AccessStatus, LPBOOL pfGenerateOnClose);
     * }
     */
    public static int AccessCheckAndAuditAlarmW(MemorySegment SubsystemName, MemorySegment HandleId, MemorySegment ObjectTypeName, MemorySegment ObjectName, MemorySegment SecurityDescriptor, int DesiredAccess, MemorySegment GenericMapping, int ObjectCreation, MemorySegment GrantedAccess, MemorySegment AccessStatus, MemorySegment pfGenerateOnClose) {
        var mh$ = AccessCheckAndAuditAlarmW$MH();
        try {
            return (int)mh$.invokeExact(SubsystemName, HandleId, ObjectTypeName, ObjectName, SecurityDescriptor, DesiredAccess, GenericMapping, ObjectCreation, GrantedAccess, AccessStatus, pfGenerateOnClose);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AccessCheckByType$MH() {
        return RuntimeHelper.requireNonNull(constants$718.const$1,"AccessCheckByType");
    }
    /**
     * {@snippet :
     * BOOL AccessCheckByType(PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID PrincipalSelfSid, HANDLE ClientToken, DWORD DesiredAccess, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, LPDWORD PrivilegeSetLength, LPDWORD GrantedAccess, LPBOOL AccessStatus);
     * }
     */
    public static int AccessCheckByType(MemorySegment pSecurityDescriptor, MemorySegment PrincipalSelfSid, MemorySegment ClientToken, int DesiredAccess, MemorySegment ObjectTypeList, int ObjectTypeListLength, MemorySegment GenericMapping, MemorySegment PrivilegeSet, MemorySegment PrivilegeSetLength, MemorySegment GrantedAccess, MemorySegment AccessStatus) {
        var mh$ = AccessCheckByType$MH();
        try {
            return (int)mh$.invokeExact(pSecurityDescriptor, PrincipalSelfSid, ClientToken, DesiredAccess, ObjectTypeList, ObjectTypeListLength, GenericMapping, PrivilegeSet, PrivilegeSetLength, GrantedAccess, AccessStatus);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AccessCheckByTypeResultList$MH() {
        return RuntimeHelper.requireNonNull(constants$718.const$2,"AccessCheckByTypeResultList");
    }
    /**
     * {@snippet :
     * BOOL AccessCheckByTypeResultList(PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID PrincipalSelfSid, HANDLE ClientToken, DWORD DesiredAccess, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, LPDWORD PrivilegeSetLength, LPDWORD GrantedAccessList, LPDWORD AccessStatusList);
     * }
     */
    public static int AccessCheckByTypeResultList(MemorySegment pSecurityDescriptor, MemorySegment PrincipalSelfSid, MemorySegment ClientToken, int DesiredAccess, MemorySegment ObjectTypeList, int ObjectTypeListLength, MemorySegment GenericMapping, MemorySegment PrivilegeSet, MemorySegment PrivilegeSetLength, MemorySegment GrantedAccessList, MemorySegment AccessStatusList) {
        var mh$ = AccessCheckByTypeResultList$MH();
        try {
            return (int)mh$.invokeExact(pSecurityDescriptor, PrincipalSelfSid, ClientToken, DesiredAccess, ObjectTypeList, ObjectTypeListLength, GenericMapping, PrivilegeSet, PrivilegeSetLength, GrantedAccessList, AccessStatusList);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AccessCheckByTypeAndAuditAlarmW$MH() {
        return RuntimeHelper.requireNonNull(constants$718.const$4,"AccessCheckByTypeAndAuditAlarmW");
    }
    /**
     * {@snippet :
     * BOOL AccessCheckByTypeAndAuditAlarmW(LPCWSTR SubsystemName, LPVOID HandleId, LPCWSTR ObjectTypeName, LPCWSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, DWORD DesiredAccess, AUDIT_EVENT_TYPE AuditType, DWORD Flags, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOL ObjectCreation, LPDWORD GrantedAccess, LPBOOL AccessStatus, LPBOOL pfGenerateOnClose);
     * }
     */
    public static int AccessCheckByTypeAndAuditAlarmW(MemorySegment SubsystemName, MemorySegment HandleId, MemorySegment ObjectTypeName, MemorySegment ObjectName, MemorySegment SecurityDescriptor, MemorySegment PrincipalSelfSid, int DesiredAccess, int AuditType, int Flags, MemorySegment ObjectTypeList, int ObjectTypeListLength, MemorySegment GenericMapping, int ObjectCreation, MemorySegment GrantedAccess, MemorySegment AccessStatus, MemorySegment pfGenerateOnClose) {
        var mh$ = AccessCheckByTypeAndAuditAlarmW$MH();
        try {
            return (int)mh$.invokeExact(SubsystemName, HandleId, ObjectTypeName, ObjectName, SecurityDescriptor, PrincipalSelfSid, DesiredAccess, AuditType, Flags, ObjectTypeList, ObjectTypeListLength, GenericMapping, ObjectCreation, GrantedAccess, AccessStatus, pfGenerateOnClose);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AccessCheckByTypeResultListAndAuditAlarmW$MH() {
        return RuntimeHelper.requireNonNull(constants$718.const$5,"AccessCheckByTypeResultListAndAuditAlarmW");
    }
    /**
     * {@snippet :
     * BOOL AccessCheckByTypeResultListAndAuditAlarmW(LPCWSTR SubsystemName, LPVOID HandleId, LPCWSTR ObjectTypeName, LPCWSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, DWORD DesiredAccess, AUDIT_EVENT_TYPE AuditType, DWORD Flags, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOL ObjectCreation, LPDWORD GrantedAccessList, LPDWORD AccessStatusList, LPBOOL pfGenerateOnClose);
     * }
     */
    public static int AccessCheckByTypeResultListAndAuditAlarmW(MemorySegment SubsystemName, MemorySegment HandleId, MemorySegment ObjectTypeName, MemorySegment ObjectName, MemorySegment SecurityDescriptor, MemorySegment PrincipalSelfSid, int DesiredAccess, int AuditType, int Flags, MemorySegment ObjectTypeList, int ObjectTypeListLength, MemorySegment GenericMapping, int ObjectCreation, MemorySegment GrantedAccessList, MemorySegment AccessStatusList, MemorySegment pfGenerateOnClose) {
        var mh$ = AccessCheckByTypeResultListAndAuditAlarmW$MH();
        try {
            return (int)mh$.invokeExact(SubsystemName, HandleId, ObjectTypeName, ObjectName, SecurityDescriptor, PrincipalSelfSid, DesiredAccess, AuditType, Flags, ObjectTypeList, ObjectTypeListLength, GenericMapping, ObjectCreation, GrantedAccessList, AccessStatusList, pfGenerateOnClose);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AccessCheckByTypeResultListAndAuditAlarmByHandleW$MH() {
        return RuntimeHelper.requireNonNull(constants$719.const$1,"AccessCheckByTypeResultListAndAuditAlarmByHandleW");
    }
    /**
     * {@snippet :
     * BOOL AccessCheckByTypeResultListAndAuditAlarmByHandleW(LPCWSTR SubsystemName, LPVOID HandleId, HANDLE ClientToken, LPCWSTR ObjectTypeName, LPCWSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, DWORD DesiredAccess, AUDIT_EVENT_TYPE AuditType, DWORD Flags, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOL ObjectCreation, LPDWORD GrantedAccessList, LPDWORD AccessStatusList, LPBOOL pfGenerateOnClose);
     * }
     */
    public static int AccessCheckByTypeResultListAndAuditAlarmByHandleW(MemorySegment SubsystemName, MemorySegment HandleId, MemorySegment ClientToken, MemorySegment ObjectTypeName, MemorySegment ObjectName, MemorySegment SecurityDescriptor, MemorySegment PrincipalSelfSid, int DesiredAccess, int AuditType, int Flags, MemorySegment ObjectTypeList, int ObjectTypeListLength, MemorySegment GenericMapping, int ObjectCreation, MemorySegment GrantedAccessList, MemorySegment AccessStatusList, MemorySegment pfGenerateOnClose) {
        var mh$ = AccessCheckByTypeResultListAndAuditAlarmByHandleW$MH();
        try {
            return (int)mh$.invokeExact(SubsystemName, HandleId, ClientToken, ObjectTypeName, ObjectName, SecurityDescriptor, PrincipalSelfSid, DesiredAccess, AuditType, Flags, ObjectTypeList, ObjectTypeListLength, GenericMapping, ObjectCreation, GrantedAccessList, AccessStatusList, pfGenerateOnClose);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddAccessAllowedAce$MH() {
        return RuntimeHelper.requireNonNull(constants$719.const$2,"AddAccessAllowedAce");
    }
    /**
     * {@snippet :
     * BOOL AddAccessAllowedAce(PACL pAcl, DWORD dwAceRevision, DWORD AccessMask, PSID pSid);
     * }
     */
    public static int AddAccessAllowedAce(MemorySegment pAcl, int dwAceRevision, int AccessMask, MemorySegment pSid) {
        var mh$ = AddAccessAllowedAce$MH();
        try {
            return (int)mh$.invokeExact(pAcl, dwAceRevision, AccessMask, pSid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddAccessAllowedAceEx$MH() {
        return RuntimeHelper.requireNonNull(constants$719.const$3,"AddAccessAllowedAceEx");
    }
    /**
     * {@snippet :
     * BOOL AddAccessAllowedAceEx(PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD AccessMask, PSID pSid);
     * }
     */
    public static int AddAccessAllowedAceEx(MemorySegment pAcl, int dwAceRevision, int AceFlags, int AccessMask, MemorySegment pSid) {
        var mh$ = AddAccessAllowedAceEx$MH();
        try {
            return (int)mh$.invokeExact(pAcl, dwAceRevision, AceFlags, AccessMask, pSid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddAccessAllowedObjectAce$MH() {
        return RuntimeHelper.requireNonNull(constants$719.const$5,"AddAccessAllowedObjectAce");
    }
    /**
     * {@snippet :
     * BOOL AddAccessAllowedObjectAce(PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD AccessMask, GUID* ObjectTypeGuid, GUID* InheritedObjectTypeGuid, PSID pSid);
     * }
     */
    public static int AddAccessAllowedObjectAce(MemorySegment pAcl, int dwAceRevision, int AceFlags, int AccessMask, MemorySegment ObjectTypeGuid, MemorySegment InheritedObjectTypeGuid, MemorySegment pSid) {
        var mh$ = AddAccessAllowedObjectAce$MH();
        try {
            return (int)mh$.invokeExact(pAcl, dwAceRevision, AceFlags, AccessMask, ObjectTypeGuid, InheritedObjectTypeGuid, pSid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddAccessDeniedAce$MH() {
        return RuntimeHelper.requireNonNull(constants$720.const$0,"AddAccessDeniedAce");
    }
    /**
     * {@snippet :
     * BOOL AddAccessDeniedAce(PACL pAcl, DWORD dwAceRevision, DWORD AccessMask, PSID pSid);
     * }
     */
    public static int AddAccessDeniedAce(MemorySegment pAcl, int dwAceRevision, int AccessMask, MemorySegment pSid) {
        var mh$ = AddAccessDeniedAce$MH();
        try {
            return (int)mh$.invokeExact(pAcl, dwAceRevision, AccessMask, pSid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddAccessDeniedAceEx$MH() {
        return RuntimeHelper.requireNonNull(constants$720.const$1,"AddAccessDeniedAceEx");
    }
    /**
     * {@snippet :
     * BOOL AddAccessDeniedAceEx(PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD AccessMask, PSID pSid);
     * }
     */
    public static int AddAccessDeniedAceEx(MemorySegment pAcl, int dwAceRevision, int AceFlags, int AccessMask, MemorySegment pSid) {
        var mh$ = AddAccessDeniedAceEx$MH();
        try {
            return (int)mh$.invokeExact(pAcl, dwAceRevision, AceFlags, AccessMask, pSid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddAccessDeniedObjectAce$MH() {
        return RuntimeHelper.requireNonNull(constants$720.const$2,"AddAccessDeniedObjectAce");
    }
    /**
     * {@snippet :
     * BOOL AddAccessDeniedObjectAce(PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD AccessMask, GUID* ObjectTypeGuid, GUID* InheritedObjectTypeGuid, PSID pSid);
     * }
     */
    public static int AddAccessDeniedObjectAce(MemorySegment pAcl, int dwAceRevision, int AceFlags, int AccessMask, MemorySegment ObjectTypeGuid, MemorySegment InheritedObjectTypeGuid, MemorySegment pSid) {
        var mh$ = AddAccessDeniedObjectAce$MH();
        try {
            return (int)mh$.invokeExact(pAcl, dwAceRevision, AceFlags, AccessMask, ObjectTypeGuid, InheritedObjectTypeGuid, pSid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddAce$MH() {
        return RuntimeHelper.requireNonNull(constants$720.const$4,"AddAce");
    }
    /**
     * {@snippet :
     * BOOL AddAce(PACL pAcl, DWORD dwAceRevision, DWORD dwStartingAceIndex, LPVOID pAceList, DWORD nAceListLength);
     * }
     */
    public static int AddAce(MemorySegment pAcl, int dwAceRevision, int dwStartingAceIndex, MemorySegment pAceList, int nAceListLength) {
        var mh$ = AddAce$MH();
        try {
            return (int)mh$.invokeExact(pAcl, dwAceRevision, dwStartingAceIndex, pAceList, nAceListLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddAuditAccessAce$MH() {
        return RuntimeHelper.requireNonNull(constants$720.const$6,"AddAuditAccessAce");
    }
    /**
     * {@snippet :
     * BOOL AddAuditAccessAce(PACL pAcl, DWORD dwAceRevision, DWORD dwAccessMask, PSID pSid, BOOL bAuditSuccess, BOOL bAuditFailure);
     * }
     */
    public static int AddAuditAccessAce(MemorySegment pAcl, int dwAceRevision, int dwAccessMask, MemorySegment pSid, int bAuditSuccess, int bAuditFailure) {
        var mh$ = AddAuditAccessAce$MH();
        try {
            return (int)mh$.invokeExact(pAcl, dwAceRevision, dwAccessMask, pSid, bAuditSuccess, bAuditFailure);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddAuditAccessAceEx$MH() {
        return RuntimeHelper.requireNonNull(constants$721.const$1,"AddAuditAccessAceEx");
    }
    /**
     * {@snippet :
     * BOOL AddAuditAccessAceEx(PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD dwAccessMask, PSID pSid, BOOL bAuditSuccess, BOOL bAuditFailure);
     * }
     */
    public static int AddAuditAccessAceEx(MemorySegment pAcl, int dwAceRevision, int AceFlags, int dwAccessMask, MemorySegment pSid, int bAuditSuccess, int bAuditFailure) {
        var mh$ = AddAuditAccessAceEx$MH();
        try {
            return (int)mh$.invokeExact(pAcl, dwAceRevision, AceFlags, dwAccessMask, pSid, bAuditSuccess, bAuditFailure);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddAuditAccessObjectAce$MH() {
        return RuntimeHelper.requireNonNull(constants$721.const$3,"AddAuditAccessObjectAce");
    }
    /**
     * {@snippet :
     * BOOL AddAuditAccessObjectAce(PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD AccessMask, GUID* ObjectTypeGuid, GUID* InheritedObjectTypeGuid, PSID pSid, BOOL bAuditSuccess, BOOL bAuditFailure);
     * }
     */
    public static int AddAuditAccessObjectAce(MemorySegment pAcl, int dwAceRevision, int AceFlags, int AccessMask, MemorySegment ObjectTypeGuid, MemorySegment InheritedObjectTypeGuid, MemorySegment pSid, int bAuditSuccess, int bAuditFailure) {
        var mh$ = AddAuditAccessObjectAce$MH();
        try {
            return (int)mh$.invokeExact(pAcl, dwAceRevision, AceFlags, AccessMask, ObjectTypeGuid, InheritedObjectTypeGuid, pSid, bAuditSuccess, bAuditFailure);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddMandatoryAce$MH() {
        return RuntimeHelper.requireNonNull(constants$721.const$4,"AddMandatoryAce");
    }
    /**
     * {@snippet :
     * BOOL AddMandatoryAce(PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD MandatoryPolicy, PSID pLabelSid);
     * }
     */
    public static int AddMandatoryAce(MemorySegment pAcl, int dwAceRevision, int AceFlags, int MandatoryPolicy, MemorySegment pLabelSid) {
        var mh$ = AddMandatoryAce$MH();
        try {
            return (int)mh$.invokeExact(pAcl, dwAceRevision, AceFlags, MandatoryPolicy, pLabelSid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddResourceAttributeAce$MH() {
        return RuntimeHelper.requireNonNull(constants$721.const$5,"AddResourceAttributeAce");
    }
    /**
     * {@snippet :
     * BOOL AddResourceAttributeAce(PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD AccessMask, PSID pSid, PCLAIM_SECURITY_ATTRIBUTES_INFORMATION pAttributeInfo, PDWORD pReturnLength);
     * }
     */
    public static int AddResourceAttributeAce(MemorySegment pAcl, int dwAceRevision, int AceFlags, int AccessMask, MemorySegment pSid, MemorySegment pAttributeInfo, MemorySegment pReturnLength) {
        var mh$ = AddResourceAttributeAce$MH();
        try {
            return (int)mh$.invokeExact(pAcl, dwAceRevision, AceFlags, AccessMask, pSid, pAttributeInfo, pReturnLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddScopedPolicyIDAce$MH() {
        return RuntimeHelper.requireNonNull(constants$722.const$0,"AddScopedPolicyIDAce");
    }
    /**
     * {@snippet :
     * BOOL AddScopedPolicyIDAce(PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD AccessMask, PSID pSid);
     * }
     */
    public static int AddScopedPolicyIDAce(MemorySegment pAcl, int dwAceRevision, int AceFlags, int AccessMask, MemorySegment pSid) {
        var mh$ = AddScopedPolicyIDAce$MH();
        try {
            return (int)mh$.invokeExact(pAcl, dwAceRevision, AceFlags, AccessMask, pSid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AdjustTokenGroups$MH() {
        return RuntimeHelper.requireNonNull(constants$722.const$2,"AdjustTokenGroups");
    }
    /**
     * {@snippet :
     * BOOL AdjustTokenGroups(HANDLE TokenHandle, BOOL ResetToDefault, PTOKEN_GROUPS NewState, DWORD BufferLength, PTOKEN_GROUPS PreviousState, PDWORD ReturnLength);
     * }
     */
    public static int AdjustTokenGroups(MemorySegment TokenHandle, int ResetToDefault, MemorySegment NewState, int BufferLength, MemorySegment PreviousState, MemorySegment ReturnLength) {
        var mh$ = AdjustTokenGroups$MH();
        try {
            return (int)mh$.invokeExact(TokenHandle, ResetToDefault, NewState, BufferLength, PreviousState, ReturnLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AdjustTokenPrivileges$MH() {
        return RuntimeHelper.requireNonNull(constants$722.const$3,"AdjustTokenPrivileges");
    }
    /**
     * {@snippet :
     * BOOL AdjustTokenPrivileges(HANDLE TokenHandle, BOOL DisableAllPrivileges, PTOKEN_PRIVILEGES NewState, DWORD BufferLength, PTOKEN_PRIVILEGES PreviousState, PDWORD ReturnLength);
     * }
     */
    public static int AdjustTokenPrivileges(MemorySegment TokenHandle, int DisableAllPrivileges, MemorySegment NewState, int BufferLength, MemorySegment PreviousState, MemorySegment ReturnLength) {
        var mh$ = AdjustTokenPrivileges$MH();
        try {
            return (int)mh$.invokeExact(TokenHandle, DisableAllPrivileges, NewState, BufferLength, PreviousState, ReturnLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AllocateAndInitializeSid$MH() {
        return RuntimeHelper.requireNonNull(constants$722.const$5,"AllocateAndInitializeSid");
    }
    /**
     * {@snippet :
     * BOOL AllocateAndInitializeSid(PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority, BYTE nSubAuthorityCount, DWORD nSubAuthority0, DWORD nSubAuthority1, DWORD nSubAuthority2, DWORD nSubAuthority3, DWORD nSubAuthority4, DWORD nSubAuthority5, DWORD nSubAuthority6, DWORD nSubAuthority7, PSID* pSid);
     * }
     */
    public static int AllocateAndInitializeSid(MemorySegment pIdentifierAuthority, byte nSubAuthorityCount, int nSubAuthority0, int nSubAuthority1, int nSubAuthority2, int nSubAuthority3, int nSubAuthority4, int nSubAuthority5, int nSubAuthority6, int nSubAuthority7, MemorySegment pSid) {
        var mh$ = AllocateAndInitializeSid$MH();
        try {
            return (int)mh$.invokeExact(pIdentifierAuthority, nSubAuthorityCount, nSubAuthority0, nSubAuthority1, nSubAuthority2, nSubAuthority3, nSubAuthority4, nSubAuthority5, nSubAuthority6, nSubAuthority7, pSid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AllocateLocallyUniqueId$MH() {
        return RuntimeHelper.requireNonNull(constants$723.const$0,"AllocateLocallyUniqueId");
    }
    /**
     * {@snippet :
     * BOOL AllocateLocallyUniqueId(PLUID Luid);
     * }
     */
    public static int AllocateLocallyUniqueId(MemorySegment Luid) {
        var mh$ = AllocateLocallyUniqueId$MH();
        try {
            return (int)mh$.invokeExact(Luid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AreAllAccessesGranted$MH() {
        return RuntimeHelper.requireNonNull(constants$723.const$1,"AreAllAccessesGranted");
    }
    /**
     * {@snippet :
     * BOOL AreAllAccessesGranted(DWORD GrantedAccess, DWORD DesiredAccess);
     * }
     */
    public static int AreAllAccessesGranted(int GrantedAccess, int DesiredAccess) {
        var mh$ = AreAllAccessesGranted$MH();
        try {
            return (int)mh$.invokeExact(GrantedAccess, DesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AreAnyAccessesGranted$MH() {
        return RuntimeHelper.requireNonNull(constants$723.const$2,"AreAnyAccessesGranted");
    }
    /**
     * {@snippet :
     * BOOL AreAnyAccessesGranted(DWORD GrantedAccess, DWORD DesiredAccess);
     * }
     */
    public static int AreAnyAccessesGranted(int GrantedAccess, int DesiredAccess) {
        var mh$ = AreAnyAccessesGranted$MH();
        try {
            return (int)mh$.invokeExact(GrantedAccess, DesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CheckTokenMembership$MH() {
        return RuntimeHelper.requireNonNull(constants$723.const$3,"CheckTokenMembership");
    }
    /**
     * {@snippet :
     * BOOL CheckTokenMembership(HANDLE TokenHandle, PSID SidToCheck, PBOOL IsMember);
     * }
     */
    public static int CheckTokenMembership(MemorySegment TokenHandle, MemorySegment SidToCheck, MemorySegment IsMember) {
        var mh$ = CheckTokenMembership$MH();
        try {
            return (int)mh$.invokeExact(TokenHandle, SidToCheck, IsMember);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CheckTokenCapability$MH() {
        return RuntimeHelper.requireNonNull(constants$723.const$4,"CheckTokenCapability");
    }
    /**
     * {@snippet :
     * BOOL CheckTokenCapability(HANDLE TokenHandle, PSID CapabilitySidToCheck, PBOOL HasCapability);
     * }
     */
    public static int CheckTokenCapability(MemorySegment TokenHandle, MemorySegment CapabilitySidToCheck, MemorySegment HasCapability) {
        var mh$ = CheckTokenCapability$MH();
        try {
            return (int)mh$.invokeExact(TokenHandle, CapabilitySidToCheck, HasCapability);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetAppContainerAce$MH() {
        return RuntimeHelper.requireNonNull(constants$723.const$5,"GetAppContainerAce");
    }
    /**
     * {@snippet :
     * BOOL GetAppContainerAce(PACL Acl, DWORD StartingAceIndex, PVOID* AppContainerAce, DWORD* AppContainerAceIndex);
     * }
     */
    public static int GetAppContainerAce(MemorySegment Acl, int StartingAceIndex, MemorySegment AppContainerAce, MemorySegment AppContainerAceIndex) {
        var mh$ = GetAppContainerAce$MH();
        try {
            return (int)mh$.invokeExact(Acl, StartingAceIndex, AppContainerAce, AppContainerAceIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CheckTokenMembershipEx$MH() {
        return RuntimeHelper.requireNonNull(constants$724.const$0,"CheckTokenMembershipEx");
    }
    /**
     * {@snippet :
     * BOOL CheckTokenMembershipEx(HANDLE TokenHandle, PSID SidToCheck, DWORD Flags, PBOOL IsMember);
     * }
     */
    public static int CheckTokenMembershipEx(MemorySegment TokenHandle, MemorySegment SidToCheck, int Flags, MemorySegment IsMember) {
        var mh$ = CheckTokenMembershipEx$MH();
        try {
            return (int)mh$.invokeExact(TokenHandle, SidToCheck, Flags, IsMember);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ConvertToAutoInheritPrivateObjectSecurity$MH() {
        return RuntimeHelper.requireNonNull(constants$724.const$2,"ConvertToAutoInheritPrivateObjectSecurity");
    }
    /**
     * {@snippet :
     * BOOL ConvertToAutoInheritPrivateObjectSecurity(PSECURITY_DESCRIPTOR ParentDescriptor, PSECURITY_DESCRIPTOR CurrentSecurityDescriptor, PSECURITY_DESCRIPTOR* NewSecurityDescriptor, GUID* ObjectType, BOOLEAN IsDirectoryObject, PGENERIC_MAPPING GenericMapping);
     * }
     */
    public static int ConvertToAutoInheritPrivateObjectSecurity(MemorySegment ParentDescriptor, MemorySegment CurrentSecurityDescriptor, MemorySegment NewSecurityDescriptor, MemorySegment ObjectType, byte IsDirectoryObject, MemorySegment GenericMapping) {
        var mh$ = ConvertToAutoInheritPrivateObjectSecurity$MH();
        try {
            return (int)mh$.invokeExact(ParentDescriptor, CurrentSecurityDescriptor, NewSecurityDescriptor, ObjectType, IsDirectoryObject, GenericMapping);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CopySid$MH() {
        return RuntimeHelper.requireNonNull(constants$724.const$3,"CopySid");
    }
    /**
     * {@snippet :
     * BOOL CopySid(DWORD nDestinationSidLength, PSID pDestinationSid, PSID pSourceSid);
     * }
     */
    public static int CopySid(int nDestinationSidLength, MemorySegment pDestinationSid, MemorySegment pSourceSid) {
        var mh$ = CopySid$MH();
        try {
            return (int)mh$.invokeExact(nDestinationSidLength, pDestinationSid, pSourceSid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreatePrivateObjectSecurity$MH() {
        return RuntimeHelper.requireNonNull(constants$724.const$4,"CreatePrivateObjectSecurity");
    }
    /**
     * {@snippet :
     * BOOL CreatePrivateObjectSecurity(PSECURITY_DESCRIPTOR ParentDescriptor, PSECURITY_DESCRIPTOR CreatorDescriptor, PSECURITY_DESCRIPTOR* NewDescriptor, BOOL IsDirectoryObject, HANDLE Token, PGENERIC_MAPPING GenericMapping);
     * }
     */
    public static int CreatePrivateObjectSecurity(MemorySegment ParentDescriptor, MemorySegment CreatorDescriptor, MemorySegment NewDescriptor, int IsDirectoryObject, MemorySegment Token, MemorySegment GenericMapping) {
        var mh$ = CreatePrivateObjectSecurity$MH();
        try {
            return (int)mh$.invokeExact(ParentDescriptor, CreatorDescriptor, NewDescriptor, IsDirectoryObject, Token, GenericMapping);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreatePrivateObjectSecurityEx$MH() {
        return RuntimeHelper.requireNonNull(constants$724.const$6,"CreatePrivateObjectSecurityEx");
    }
    /**
     * {@snippet :
     * BOOL CreatePrivateObjectSecurityEx(PSECURITY_DESCRIPTOR ParentDescriptor, PSECURITY_DESCRIPTOR CreatorDescriptor, PSECURITY_DESCRIPTOR* NewDescriptor, GUID* ObjectType, BOOL IsContainerObject, ULONG AutoInheritFlags, HANDLE Token, PGENERIC_MAPPING GenericMapping);
     * }
     */
    public static int CreatePrivateObjectSecurityEx(MemorySegment ParentDescriptor, MemorySegment CreatorDescriptor, MemorySegment NewDescriptor, MemorySegment ObjectType, int IsContainerObject, int AutoInheritFlags, MemorySegment Token, MemorySegment GenericMapping) {
        var mh$ = CreatePrivateObjectSecurityEx$MH();
        try {
            return (int)mh$.invokeExact(ParentDescriptor, CreatorDescriptor, NewDescriptor, ObjectType, IsContainerObject, AutoInheritFlags, Token, GenericMapping);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreatePrivateObjectSecurityWithMultipleInheritance$MH() {
        return RuntimeHelper.requireNonNull(constants$725.const$1,"CreatePrivateObjectSecurityWithMultipleInheritance");
    }
    /**
     * {@snippet :
     * BOOL CreatePrivateObjectSecurityWithMultipleInheritance(PSECURITY_DESCRIPTOR ParentDescriptor, PSECURITY_DESCRIPTOR CreatorDescriptor, PSECURITY_DESCRIPTOR* NewDescriptor, GUID** ObjectTypes, ULONG GuidCount, BOOL IsContainerObject, ULONG AutoInheritFlags, HANDLE Token, PGENERIC_MAPPING GenericMapping);
     * }
     */
    public static int CreatePrivateObjectSecurityWithMultipleInheritance(MemorySegment ParentDescriptor, MemorySegment CreatorDescriptor, MemorySegment NewDescriptor, MemorySegment ObjectTypes, int GuidCount, int IsContainerObject, int AutoInheritFlags, MemorySegment Token, MemorySegment GenericMapping) {
        var mh$ = CreatePrivateObjectSecurityWithMultipleInheritance$MH();
        try {
            return (int)mh$.invokeExact(ParentDescriptor, CreatorDescriptor, NewDescriptor, ObjectTypes, GuidCount, IsContainerObject, AutoInheritFlags, Token, GenericMapping);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateRestrictedToken$MH() {
        return RuntimeHelper.requireNonNull(constants$725.const$3,"CreateRestrictedToken");
    }
    /**
     * {@snippet :
     * BOOL CreateRestrictedToken(HANDLE ExistingTokenHandle, DWORD Flags, DWORD DisableSidCount, PSID_AND_ATTRIBUTES SidsToDisable, DWORD DeletePrivilegeCount, PLUID_AND_ATTRIBUTES PrivilegesToDelete, DWORD RestrictedSidCount, PSID_AND_ATTRIBUTES SidsToRestrict, PHANDLE NewTokenHandle);
     * }
     */
    public static int CreateRestrictedToken(MemorySegment ExistingTokenHandle, int Flags, int DisableSidCount, MemorySegment SidsToDisable, int DeletePrivilegeCount, MemorySegment PrivilegesToDelete, int RestrictedSidCount, MemorySegment SidsToRestrict, MemorySegment NewTokenHandle) {
        var mh$ = CreateRestrictedToken$MH();
        try {
            return (int)mh$.invokeExact(ExistingTokenHandle, Flags, DisableSidCount, SidsToDisable, DeletePrivilegeCount, PrivilegesToDelete, RestrictedSidCount, SidsToRestrict, NewTokenHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateWellKnownSid$MH() {
        return RuntimeHelper.requireNonNull(constants$725.const$5,"CreateWellKnownSid");
    }
    /**
     * {@snippet :
     * BOOL CreateWellKnownSid(WELL_KNOWN_SID_TYPE WellKnownSidType, PSID DomainSid, PSID pSid, DWORD* cbSid);
     * }
     */
    public static int CreateWellKnownSid(int WellKnownSidType, MemorySegment DomainSid, MemorySegment pSid, MemorySegment cbSid) {
        var mh$ = CreateWellKnownSid$MH();
        try {
            return (int)mh$.invokeExact(WellKnownSidType, DomainSid, pSid, cbSid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EqualDomainSid$MH() {
        return RuntimeHelper.requireNonNull(constants$726.const$0,"EqualDomainSid");
    }
    /**
     * {@snippet :
     * BOOL EqualDomainSid(PSID pSid1, PSID pSid2, BOOL* pfEqual);
     * }
     */
    public static int EqualDomainSid(MemorySegment pSid1, MemorySegment pSid2, MemorySegment pfEqual) {
        var mh$ = EqualDomainSid$MH();
        try {
            return (int)mh$.invokeExact(pSid1, pSid2, pfEqual);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteAce$MH() {
        return RuntimeHelper.requireNonNull(constants$726.const$1,"DeleteAce");
    }
    /**
     * {@snippet :
     * BOOL DeleteAce(PACL pAcl, DWORD dwAceIndex);
     * }
     */
    public static int DeleteAce(MemorySegment pAcl, int dwAceIndex) {
        var mh$ = DeleteAce$MH();
        try {
            return (int)mh$.invokeExact(pAcl, dwAceIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DestroyPrivateObjectSecurity$MH() {
        return RuntimeHelper.requireNonNull(constants$726.const$2,"DestroyPrivateObjectSecurity");
    }
    /**
     * {@snippet :
     * BOOL DestroyPrivateObjectSecurity(PSECURITY_DESCRIPTOR* ObjectDescriptor);
     * }
     */
    public static int DestroyPrivateObjectSecurity(MemorySegment ObjectDescriptor) {
        var mh$ = DestroyPrivateObjectSecurity$MH();
        try {
            return (int)mh$.invokeExact(ObjectDescriptor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DuplicateToken$MH() {
        return RuntimeHelper.requireNonNull(constants$726.const$3,"DuplicateToken");
    }
    /**
     * {@snippet :
     * BOOL DuplicateToken(HANDLE ExistingTokenHandle, SECURITY_IMPERSONATION_LEVEL ImpersonationLevel, PHANDLE DuplicateTokenHandle);
     * }
     */
    public static int DuplicateToken(MemorySegment ExistingTokenHandle, int ImpersonationLevel, MemorySegment DuplicateTokenHandle) {
        var mh$ = DuplicateToken$MH();
        try {
            return (int)mh$.invokeExact(ExistingTokenHandle, ImpersonationLevel, DuplicateTokenHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DuplicateTokenEx$MH() {
        return RuntimeHelper.requireNonNull(constants$726.const$5,"DuplicateTokenEx");
    }
    /**
     * {@snippet :
     * BOOL DuplicateTokenEx(HANDLE hExistingToken, DWORD dwDesiredAccess, LPSECURITY_ATTRIBUTES lpTokenAttributes, SECURITY_IMPERSONATION_LEVEL ImpersonationLevel, TOKEN_TYPE TokenType, PHANDLE phNewToken);
     * }
     */
    public static int DuplicateTokenEx(MemorySegment hExistingToken, int dwDesiredAccess, MemorySegment lpTokenAttributes, int ImpersonationLevel, int TokenType, MemorySegment phNewToken) {
        var mh$ = DuplicateTokenEx$MH();
        try {
            return (int)mh$.invokeExact(hExistingToken, dwDesiredAccess, lpTokenAttributes, ImpersonationLevel, TokenType, phNewToken);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EqualPrefixSid$MH() {
        return RuntimeHelper.requireNonNull(constants$727.const$0,"EqualPrefixSid");
    }
    /**
     * {@snippet :
     * BOOL EqualPrefixSid(PSID pSid1, PSID pSid2);
     * }
     */
    public static int EqualPrefixSid(MemorySegment pSid1, MemorySegment pSid2) {
        var mh$ = EqualPrefixSid$MH();
        try {
            return (int)mh$.invokeExact(pSid1, pSid2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EqualSid$MH() {
        return RuntimeHelper.requireNonNull(constants$727.const$1,"EqualSid");
    }
    /**
     * {@snippet :
     * BOOL EqualSid(PSID pSid1, PSID pSid2);
     * }
     */
    public static int EqualSid(MemorySegment pSid1, MemorySegment pSid2) {
        var mh$ = EqualSid$MH();
        try {
            return (int)mh$.invokeExact(pSid1, pSid2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindFirstFreeAce$MH() {
        return RuntimeHelper.requireNonNull(constants$727.const$2,"FindFirstFreeAce");
    }
    /**
     * {@snippet :
     * BOOL FindFirstFreeAce(PACL pAcl, LPVOID* pAce);
     * }
     */
    public static int FindFirstFreeAce(MemorySegment pAcl, MemorySegment pAce) {
        var mh$ = FindFirstFreeAce$MH();
        try {
            return (int)mh$.invokeExact(pAcl, pAce);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FreeSid$MH() {
        return RuntimeHelper.requireNonNull(constants$727.const$3,"FreeSid");
    }
    /**
     * {@snippet :
     * PVOID FreeSid(PSID pSid);
     * }
     */
    public static MemorySegment FreeSid(MemorySegment pSid) {
        var mh$ = FreeSid$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(pSid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetAce$MH() {
        return RuntimeHelper.requireNonNull(constants$727.const$4,"GetAce");
    }
    /**
     * {@snippet :
     * BOOL GetAce(PACL pAcl, DWORD dwAceIndex, LPVOID* pAce);
     * }
     */
    public static int GetAce(MemorySegment pAcl, int dwAceIndex, MemorySegment pAce) {
        var mh$ = GetAce$MH();
        try {
            return (int)mh$.invokeExact(pAcl, dwAceIndex, pAce);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetAclInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$727.const$5,"GetAclInformation");
    }
    /**
     * {@snippet :
     * BOOL GetAclInformation(PACL pAcl, LPVOID pAclInformation, DWORD nAclInformationLength, ACL_INFORMATION_CLASS dwAclInformationClass);
     * }
     */
    public static int GetAclInformation(MemorySegment pAcl, MemorySegment pAclInformation, int nAclInformationLength, int dwAclInformationClass) {
        var mh$ = GetAclInformation$MH();
        try {
            return (int)mh$.invokeExact(pAcl, pAclInformation, nAclInformationLength, dwAclInformationClass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileSecurityW$MH() {
        return RuntimeHelper.requireNonNull(constants$728.const$0,"GetFileSecurityW");
    }
    /**
     * {@snippet :
     * BOOL GetFileSecurityW(LPCWSTR lpFileName, SECURITY_INFORMATION RequestedInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor, DWORD nLength, LPDWORD lpnLengthNeeded);
     * }
     */
    public static int GetFileSecurityW(MemorySegment lpFileName, int RequestedInformation, MemorySegment pSecurityDescriptor, int nLength, MemorySegment lpnLengthNeeded) {
        var mh$ = GetFileSecurityW$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, RequestedInformation, pSecurityDescriptor, nLength, lpnLengthNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetKernelObjectSecurity$MH() {
        return RuntimeHelper.requireNonNull(constants$728.const$1,"GetKernelObjectSecurity");
    }
    /**
     * {@snippet :
     * BOOL GetKernelObjectSecurity(HANDLE Handle, SECURITY_INFORMATION RequestedInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor, DWORD nLength, LPDWORD lpnLengthNeeded);
     * }
     */
    public static int GetKernelObjectSecurity(MemorySegment Handle, int RequestedInformation, MemorySegment pSecurityDescriptor, int nLength, MemorySegment lpnLengthNeeded) {
        var mh$ = GetKernelObjectSecurity$MH();
        try {
            return (int)mh$.invokeExact(Handle, RequestedInformation, pSecurityDescriptor, nLength, lpnLengthNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLengthSid$MH() {
        return RuntimeHelper.requireNonNull(constants$728.const$2,"GetLengthSid");
    }
    /**
     * {@snippet :
     * DWORD GetLengthSid(PSID pSid);
     * }
     */
    public static int GetLengthSid(MemorySegment pSid) {
        var mh$ = GetLengthSid$MH();
        try {
            return (int)mh$.invokeExact(pSid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPrivateObjectSecurity$MH() {
        return RuntimeHelper.requireNonNull(constants$728.const$3,"GetPrivateObjectSecurity");
    }
    /**
     * {@snippet :
     * BOOL GetPrivateObjectSecurity(PSECURITY_DESCRIPTOR ObjectDescriptor, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR ResultantDescriptor, DWORD DescriptorLength, PDWORD ReturnLength);
     * }
     */
    public static int GetPrivateObjectSecurity(MemorySegment ObjectDescriptor, int SecurityInformation, MemorySegment ResultantDescriptor, int DescriptorLength, MemorySegment ReturnLength) {
        var mh$ = GetPrivateObjectSecurity$MH();
        try {
            return (int)mh$.invokeExact(ObjectDescriptor, SecurityInformation, ResultantDescriptor, DescriptorLength, ReturnLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSecurityDescriptorControl$MH() {
        return RuntimeHelper.requireNonNull(constants$728.const$4,"GetSecurityDescriptorControl");
    }
    /**
     * {@snippet :
     * BOOL GetSecurityDescriptorControl(PSECURITY_DESCRIPTOR pSecurityDescriptor, PSECURITY_DESCRIPTOR_CONTROL pControl, LPDWORD lpdwRevision);
     * }
     */
    public static int GetSecurityDescriptorControl(MemorySegment pSecurityDescriptor, MemorySegment pControl, MemorySegment lpdwRevision) {
        var mh$ = GetSecurityDescriptorControl$MH();
        try {
            return (int)mh$.invokeExact(pSecurityDescriptor, pControl, lpdwRevision);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSecurityDescriptorDacl$MH() {
        return RuntimeHelper.requireNonNull(constants$728.const$5,"GetSecurityDescriptorDacl");
    }
    /**
     * {@snippet :
     * BOOL GetSecurityDescriptorDacl(PSECURITY_DESCRIPTOR pSecurityDescriptor, LPBOOL lpbDaclPresent, PACL* pDacl, LPBOOL lpbDaclDefaulted);
     * }
     */
    public static int GetSecurityDescriptorDacl(MemorySegment pSecurityDescriptor, MemorySegment lpbDaclPresent, MemorySegment pDacl, MemorySegment lpbDaclDefaulted) {
        var mh$ = GetSecurityDescriptorDacl$MH();
        try {
            return (int)mh$.invokeExact(pSecurityDescriptor, lpbDaclPresent, pDacl, lpbDaclDefaulted);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSecurityDescriptorGroup$MH() {
        return RuntimeHelper.requireNonNull(constants$729.const$0,"GetSecurityDescriptorGroup");
    }
    /**
     * {@snippet :
     * BOOL GetSecurityDescriptorGroup(PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID* pGroup, LPBOOL lpbGroupDefaulted);
     * }
     */
    public static int GetSecurityDescriptorGroup(MemorySegment pSecurityDescriptor, MemorySegment pGroup, MemorySegment lpbGroupDefaulted) {
        var mh$ = GetSecurityDescriptorGroup$MH();
        try {
            return (int)mh$.invokeExact(pSecurityDescriptor, pGroup, lpbGroupDefaulted);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSecurityDescriptorLength$MH() {
        return RuntimeHelper.requireNonNull(constants$729.const$1,"GetSecurityDescriptorLength");
    }
    /**
     * {@snippet :
     * DWORD GetSecurityDescriptorLength(PSECURITY_DESCRIPTOR pSecurityDescriptor);
     * }
     */
    public static int GetSecurityDescriptorLength(MemorySegment pSecurityDescriptor) {
        var mh$ = GetSecurityDescriptorLength$MH();
        try {
            return (int)mh$.invokeExact(pSecurityDescriptor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSecurityDescriptorOwner$MH() {
        return RuntimeHelper.requireNonNull(constants$729.const$2,"GetSecurityDescriptorOwner");
    }
    /**
     * {@snippet :
     * BOOL GetSecurityDescriptorOwner(PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID* pOwner, LPBOOL lpbOwnerDefaulted);
     * }
     */
    public static int GetSecurityDescriptorOwner(MemorySegment pSecurityDescriptor, MemorySegment pOwner, MemorySegment lpbOwnerDefaulted) {
        var mh$ = GetSecurityDescriptorOwner$MH();
        try {
            return (int)mh$.invokeExact(pSecurityDescriptor, pOwner, lpbOwnerDefaulted);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSecurityDescriptorRMControl$MH() {
        return RuntimeHelper.requireNonNull(constants$729.const$3,"GetSecurityDescriptorRMControl");
    }
    /**
     * {@snippet :
     * DWORD GetSecurityDescriptorRMControl(PSECURITY_DESCRIPTOR SecurityDescriptor, PUCHAR RMControl);
     * }
     */
    public static int GetSecurityDescriptorRMControl(MemorySegment SecurityDescriptor, MemorySegment RMControl) {
        var mh$ = GetSecurityDescriptorRMControl$MH();
        try {
            return (int)mh$.invokeExact(SecurityDescriptor, RMControl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSecurityDescriptorSacl$MH() {
        return RuntimeHelper.requireNonNull(constants$729.const$4,"GetSecurityDescriptorSacl");
    }
    /**
     * {@snippet :
     * BOOL GetSecurityDescriptorSacl(PSECURITY_DESCRIPTOR pSecurityDescriptor, LPBOOL lpbSaclPresent, PACL* pSacl, LPBOOL lpbSaclDefaulted);
     * }
     */
    public static int GetSecurityDescriptorSacl(MemorySegment pSecurityDescriptor, MemorySegment lpbSaclPresent, MemorySegment pSacl, MemorySegment lpbSaclDefaulted) {
        var mh$ = GetSecurityDescriptorSacl$MH();
        try {
            return (int)mh$.invokeExact(pSecurityDescriptor, lpbSaclPresent, pSacl, lpbSaclDefaulted);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSidIdentifierAuthority$MH() {
        return RuntimeHelper.requireNonNull(constants$729.const$5,"GetSidIdentifierAuthority");
    }
    /**
     * {@snippet :
     * PSID_IDENTIFIER_AUTHORITY GetSidIdentifierAuthority(PSID pSid);
     * }
     */
    public static MemorySegment GetSidIdentifierAuthority(MemorySegment pSid) {
        var mh$ = GetSidIdentifierAuthority$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(pSid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSidLengthRequired$MH() {
        return RuntimeHelper.requireNonNull(constants$730.const$1,"GetSidLengthRequired");
    }
    /**
     * {@snippet :
     * DWORD GetSidLengthRequired(UCHAR nSubAuthorityCount);
     * }
     */
    public static int GetSidLengthRequired(byte nSubAuthorityCount) {
        var mh$ = GetSidLengthRequired$MH();
        try {
            return (int)mh$.invokeExact(nSubAuthorityCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSidSubAuthority$MH() {
        return RuntimeHelper.requireNonNull(constants$730.const$2,"GetSidSubAuthority");
    }
    /**
     * {@snippet :
     * PDWORD GetSidSubAuthority(PSID pSid, DWORD nSubAuthority);
     * }
     */
    public static MemorySegment GetSidSubAuthority(MemorySegment pSid, int nSubAuthority) {
        var mh$ = GetSidSubAuthority$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(pSid, nSubAuthority);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSidSubAuthorityCount$MH() {
        return RuntimeHelper.requireNonNull(constants$730.const$3,"GetSidSubAuthorityCount");
    }
    /**
     * {@snippet :
     * PUCHAR GetSidSubAuthorityCount(PSID pSid);
     * }
     */
    public static MemorySegment GetSidSubAuthorityCount(MemorySegment pSid) {
        var mh$ = GetSidSubAuthorityCount$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(pSid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTokenInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$730.const$4,"GetTokenInformation");
    }
    /**
     * {@snippet :
     * BOOL GetTokenInformation(HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, LPVOID TokenInformation, DWORD TokenInformationLength, PDWORD ReturnLength);
     * }
     */
    public static int GetTokenInformation(MemorySegment TokenHandle, int TokenInformationClass, MemorySegment TokenInformation, int TokenInformationLength, MemorySegment ReturnLength) {
        var mh$ = GetTokenInformation$MH();
        try {
            return (int)mh$.invokeExact(TokenHandle, TokenInformationClass, TokenInformation, TokenInformationLength, ReturnLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowsAccountDomainSid$MH() {
        return RuntimeHelper.requireNonNull(constants$730.const$5,"GetWindowsAccountDomainSid");
    }
    /**
     * {@snippet :
     * BOOL GetWindowsAccountDomainSid(PSID pSid, PSID pDomainSid, DWORD* cbDomainSid);
     * }
     */
    public static int GetWindowsAccountDomainSid(MemorySegment pSid, MemorySegment pDomainSid, MemorySegment cbDomainSid) {
        var mh$ = GetWindowsAccountDomainSid$MH();
        try {
            return (int)mh$.invokeExact(pSid, pDomainSid, cbDomainSid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImpersonateAnonymousToken$MH() {
        return RuntimeHelper.requireNonNull(constants$731.const$0,"ImpersonateAnonymousToken");
    }
    /**
     * {@snippet :
     * BOOL ImpersonateAnonymousToken(HANDLE ThreadHandle);
     * }
     */
    public static int ImpersonateAnonymousToken(MemorySegment ThreadHandle) {
        var mh$ = ImpersonateAnonymousToken$MH();
        try {
            return (int)mh$.invokeExact(ThreadHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImpersonateLoggedOnUser$MH() {
        return RuntimeHelper.requireNonNull(constants$731.const$1,"ImpersonateLoggedOnUser");
    }
    /**
     * {@snippet :
     * BOOL ImpersonateLoggedOnUser(HANDLE hToken);
     * }
     */
    public static int ImpersonateLoggedOnUser(MemorySegment hToken) {
        var mh$ = ImpersonateLoggedOnUser$MH();
        try {
            return (int)mh$.invokeExact(hToken);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImpersonateSelf$MH() {
        return RuntimeHelper.requireNonNull(constants$731.const$2,"ImpersonateSelf");
    }
    /**
     * {@snippet :
     * BOOL ImpersonateSelf(SECURITY_IMPERSONATION_LEVEL ImpersonationLevel);
     * }
     */
    public static int ImpersonateSelf(int ImpersonationLevel) {
        var mh$ = ImpersonateSelf$MH();
        try {
            return (int)mh$.invokeExact(ImpersonationLevel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitializeAcl$MH() {
        return RuntimeHelper.requireNonNull(constants$731.const$3,"InitializeAcl");
    }
    /**
     * {@snippet :
     * BOOL InitializeAcl(PACL pAcl, DWORD nAclLength, DWORD dwAclRevision);
     * }
     */
    public static int InitializeAcl(MemorySegment pAcl, int nAclLength, int dwAclRevision) {
        var mh$ = InitializeAcl$MH();
        try {
            return (int)mh$.invokeExact(pAcl, nAclLength, dwAclRevision);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitializeSecurityDescriptor$MH() {
        return RuntimeHelper.requireNonNull(constants$731.const$4,"InitializeSecurityDescriptor");
    }
    /**
     * {@snippet :
     * BOOL InitializeSecurityDescriptor(PSECURITY_DESCRIPTOR pSecurityDescriptor, DWORD dwRevision);
     * }
     */
    public static int InitializeSecurityDescriptor(MemorySegment pSecurityDescriptor, int dwRevision) {
        var mh$ = InitializeSecurityDescriptor$MH();
        try {
            return (int)mh$.invokeExact(pSecurityDescriptor, dwRevision);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitializeSid$MH() {
        return RuntimeHelper.requireNonNull(constants$731.const$6,"InitializeSid");
    }
    /**
     * {@snippet :
     * BOOL InitializeSid(PSID Sid, PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority, BYTE nSubAuthorityCount);
     * }
     */
    public static int InitializeSid(MemorySegment Sid, MemorySegment pIdentifierAuthority, byte nSubAuthorityCount) {
        var mh$ = InitializeSid$MH();
        try {
            return (int)mh$.invokeExact(Sid, pIdentifierAuthority, nSubAuthorityCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsTokenRestricted$MH() {
        return RuntimeHelper.requireNonNull(constants$732.const$0,"IsTokenRestricted");
    }
    /**
     * {@snippet :
     * BOOL IsTokenRestricted(HANDLE TokenHandle);
     * }
     */
    public static int IsTokenRestricted(MemorySegment TokenHandle) {
        var mh$ = IsTokenRestricted$MH();
        try {
            return (int)mh$.invokeExact(TokenHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsValidAcl$MH() {
        return RuntimeHelper.requireNonNull(constants$732.const$1,"IsValidAcl");
    }
    /**
     * {@snippet :
     * BOOL IsValidAcl(PACL pAcl);
     * }
     */
    public static int IsValidAcl(MemorySegment pAcl) {
        var mh$ = IsValidAcl$MH();
        try {
            return (int)mh$.invokeExact(pAcl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsValidSecurityDescriptor$MH() {
        return RuntimeHelper.requireNonNull(constants$732.const$2,"IsValidSecurityDescriptor");
    }
    /**
     * {@snippet :
     * BOOL IsValidSecurityDescriptor(PSECURITY_DESCRIPTOR pSecurityDescriptor);
     * }
     */
    public static int IsValidSecurityDescriptor(MemorySegment pSecurityDescriptor) {
        var mh$ = IsValidSecurityDescriptor$MH();
        try {
            return (int)mh$.invokeExact(pSecurityDescriptor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsValidSid$MH() {
        return RuntimeHelper.requireNonNull(constants$732.const$3,"IsValidSid");
    }
    /**
     * {@snippet :
     * BOOL IsValidSid(PSID pSid);
     * }
     */
    public static int IsValidSid(MemorySegment pSid) {
        var mh$ = IsValidSid$MH();
        try {
            return (int)mh$.invokeExact(pSid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsWellKnownSid$MH() {
        return RuntimeHelper.requireNonNull(constants$732.const$4,"IsWellKnownSid");
    }
    /**
     * {@snippet :
     * BOOL IsWellKnownSid(PSID pSid, WELL_KNOWN_SID_TYPE WellKnownSidType);
     * }
     */
    public static int IsWellKnownSid(MemorySegment pSid, int WellKnownSidType) {
        var mh$ = IsWellKnownSid$MH();
        try {
            return (int)mh$.invokeExact(pSid, WellKnownSidType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MakeAbsoluteSD$MH() {
        return RuntimeHelper.requireNonNull(constants$732.const$6,"MakeAbsoluteSD");
    }
    /**
     * {@snippet :
     * BOOL MakeAbsoluteSD(PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor, PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor, LPDWORD lpdwAbsoluteSecurityDescriptorSize, PACL pDacl, LPDWORD lpdwDaclSize, PACL pSacl, LPDWORD lpdwSaclSize, PSID pOwner, LPDWORD lpdwOwnerSize, PSID pPrimaryGroup, LPDWORD lpdwPrimaryGroupSize);
     * }
     */
    public static int MakeAbsoluteSD(MemorySegment pSelfRelativeSecurityDescriptor, MemorySegment pAbsoluteSecurityDescriptor, MemorySegment lpdwAbsoluteSecurityDescriptorSize, MemorySegment pDacl, MemorySegment lpdwDaclSize, MemorySegment pSacl, MemorySegment lpdwSaclSize, MemorySegment pOwner, MemorySegment lpdwOwnerSize, MemorySegment pPrimaryGroup, MemorySegment lpdwPrimaryGroupSize) {
        var mh$ = MakeAbsoluteSD$MH();
        try {
            return (int)mh$.invokeExact(pSelfRelativeSecurityDescriptor, pAbsoluteSecurityDescriptor, lpdwAbsoluteSecurityDescriptorSize, pDacl, lpdwDaclSize, pSacl, lpdwSaclSize, pOwner, lpdwOwnerSize, pPrimaryGroup, lpdwPrimaryGroupSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MakeSelfRelativeSD$MH() {
        return RuntimeHelper.requireNonNull(constants$733.const$0,"MakeSelfRelativeSD");
    }
    /**
     * {@snippet :
     * BOOL MakeSelfRelativeSD(PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor, PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor, LPDWORD lpdwBufferLength);
     * }
     */
    public static int MakeSelfRelativeSD(MemorySegment pAbsoluteSecurityDescriptor, MemorySegment pSelfRelativeSecurityDescriptor, MemorySegment lpdwBufferLength) {
        var mh$ = MakeSelfRelativeSD$MH();
        try {
            return (int)mh$.invokeExact(pAbsoluteSecurityDescriptor, pSelfRelativeSecurityDescriptor, lpdwBufferLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MapGenericMask$MH() {
        return RuntimeHelper.requireNonNull(constants$733.const$1,"MapGenericMask");
    }
    /**
     * {@snippet :
     * void MapGenericMask(PDWORD AccessMask, PGENERIC_MAPPING GenericMapping);
     * }
     */
    public static void MapGenericMask(MemorySegment AccessMask, MemorySegment GenericMapping) {
        var mh$ = MapGenericMask$MH();
        try {
            mh$.invokeExact(AccessMask, GenericMapping);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ObjectCloseAuditAlarmW$MH() {
        return RuntimeHelper.requireNonNull(constants$733.const$2,"ObjectCloseAuditAlarmW");
    }
    /**
     * {@snippet :
     * BOOL ObjectCloseAuditAlarmW(LPCWSTR SubsystemName, LPVOID HandleId, BOOL GenerateOnClose);
     * }
     */
    public static int ObjectCloseAuditAlarmW(MemorySegment SubsystemName, MemorySegment HandleId, int GenerateOnClose) {
        var mh$ = ObjectCloseAuditAlarmW$MH();
        try {
            return (int)mh$.invokeExact(SubsystemName, HandleId, GenerateOnClose);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ObjectDeleteAuditAlarmW$MH() {
        return RuntimeHelper.requireNonNull(constants$733.const$3,"ObjectDeleteAuditAlarmW");
    }
    /**
     * {@snippet :
     * BOOL ObjectDeleteAuditAlarmW(LPCWSTR SubsystemName, LPVOID HandleId, BOOL GenerateOnClose);
     * }
     */
    public static int ObjectDeleteAuditAlarmW(MemorySegment SubsystemName, MemorySegment HandleId, int GenerateOnClose) {
        var mh$ = ObjectDeleteAuditAlarmW$MH();
        try {
            return (int)mh$.invokeExact(SubsystemName, HandleId, GenerateOnClose);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ObjectOpenAuditAlarmW$MH() {
        return RuntimeHelper.requireNonNull(constants$733.const$5,"ObjectOpenAuditAlarmW");
    }
    /**
     * {@snippet :
     * BOOL ObjectOpenAuditAlarmW(LPCWSTR SubsystemName, LPVOID HandleId, LPWSTR ObjectTypeName, LPWSTR ObjectName, PSECURITY_DESCRIPTOR pSecurityDescriptor, HANDLE ClientToken, DWORD DesiredAccess, DWORD GrantedAccess, PPRIVILEGE_SET Privileges, BOOL ObjectCreation, BOOL AccessGranted, LPBOOL GenerateOnClose);
     * }
     */
    public static int ObjectOpenAuditAlarmW(MemorySegment SubsystemName, MemorySegment HandleId, MemorySegment ObjectTypeName, MemorySegment ObjectName, MemorySegment pSecurityDescriptor, MemorySegment ClientToken, int DesiredAccess, int GrantedAccess, MemorySegment Privileges, int ObjectCreation, int AccessGranted, MemorySegment GenerateOnClose) {
        var mh$ = ObjectOpenAuditAlarmW$MH();
        try {
            return (int)mh$.invokeExact(SubsystemName, HandleId, ObjectTypeName, ObjectName, pSecurityDescriptor, ClientToken, DesiredAccess, GrantedAccess, Privileges, ObjectCreation, AccessGranted, GenerateOnClose);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ObjectPrivilegeAuditAlarmW$MH() {
        return RuntimeHelper.requireNonNull(constants$734.const$1,"ObjectPrivilegeAuditAlarmW");
    }
    /**
     * {@snippet :
     * BOOL ObjectPrivilegeAuditAlarmW(LPCWSTR SubsystemName, LPVOID HandleId, HANDLE ClientToken, DWORD DesiredAccess, PPRIVILEGE_SET Privileges, BOOL AccessGranted);
     * }
     */
    public static int ObjectPrivilegeAuditAlarmW(MemorySegment SubsystemName, MemorySegment HandleId, MemorySegment ClientToken, int DesiredAccess, MemorySegment Privileges, int AccessGranted) {
        var mh$ = ObjectPrivilegeAuditAlarmW$MH();
        try {
            return (int)mh$.invokeExact(SubsystemName, HandleId, ClientToken, DesiredAccess, Privileges, AccessGranted);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PrivilegeCheck$MH() {
        return RuntimeHelper.requireNonNull(constants$734.const$2,"PrivilegeCheck");
    }
    /**
     * {@snippet :
     * BOOL PrivilegeCheck(HANDLE ClientToken, PPRIVILEGE_SET RequiredPrivileges, LPBOOL pfResult);
     * }
     */
    public static int PrivilegeCheck(MemorySegment ClientToken, MemorySegment RequiredPrivileges, MemorySegment pfResult) {
        var mh$ = PrivilegeCheck$MH();
        try {
            return (int)mh$.invokeExact(ClientToken, RequiredPrivileges, pfResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PrivilegedServiceAuditAlarmW$MH() {
        return RuntimeHelper.requireNonNull(constants$734.const$3,"PrivilegedServiceAuditAlarmW");
    }
    /**
     * {@snippet :
     * BOOL PrivilegedServiceAuditAlarmW(LPCWSTR SubsystemName, LPCWSTR ServiceName, HANDLE ClientToken, PPRIVILEGE_SET Privileges, BOOL AccessGranted);
     * }
     */
    public static int PrivilegedServiceAuditAlarmW(MemorySegment SubsystemName, MemorySegment ServiceName, MemorySegment ClientToken, MemorySegment Privileges, int AccessGranted) {
        var mh$ = PrivilegedServiceAuditAlarmW$MH();
        try {
            return (int)mh$.invokeExact(SubsystemName, ServiceName, ClientToken, Privileges, AccessGranted);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QuerySecurityAccessMask$MH() {
        return RuntimeHelper.requireNonNull(constants$734.const$4,"QuerySecurityAccessMask");
    }
    /**
     * {@snippet :
     * void QuerySecurityAccessMask(SECURITY_INFORMATION SecurityInformation, LPDWORD DesiredAccess);
     * }
     */
    public static void QuerySecurityAccessMask(int SecurityInformation, MemorySegment DesiredAccess) {
        var mh$ = QuerySecurityAccessMask$MH();
        try {
            mh$.invokeExact(SecurityInformation, DesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RevertToSelf$MH() {
        return RuntimeHelper.requireNonNull(constants$734.const$5,"RevertToSelf");
    }
    /**
     * {@snippet :
     * BOOL RevertToSelf();
     * }
     */
    public static int RevertToSelf() {
        var mh$ = RevertToSelf$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetAclInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$735.const$0,"SetAclInformation");
    }
    /**
     * {@snippet :
     * BOOL SetAclInformation(PACL pAcl, LPVOID pAclInformation, DWORD nAclInformationLength, ACL_INFORMATION_CLASS dwAclInformationClass);
     * }
     */
    public static int SetAclInformation(MemorySegment pAcl, MemorySegment pAclInformation, int nAclInformationLength, int dwAclInformationClass) {
        var mh$ = SetAclInformation$MH();
        try {
            return (int)mh$.invokeExact(pAcl, pAclInformation, nAclInformationLength, dwAclInformationClass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFileSecurityW$MH() {
        return RuntimeHelper.requireNonNull(constants$735.const$1,"SetFileSecurityW");
    }
    /**
     * {@snippet :
     * BOOL SetFileSecurityW(LPCWSTR lpFileName, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor);
     * }
     */
    public static int SetFileSecurityW(MemorySegment lpFileName, int SecurityInformation, MemorySegment pSecurityDescriptor) {
        var mh$ = SetFileSecurityW$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, SecurityInformation, pSecurityDescriptor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetKernelObjectSecurity$MH() {
        return RuntimeHelper.requireNonNull(constants$735.const$2,"SetKernelObjectSecurity");
    }
    /**
     * {@snippet :
     * BOOL SetKernelObjectSecurity(HANDLE Handle, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR SecurityDescriptor);
     * }
     */
    public static int SetKernelObjectSecurity(MemorySegment Handle, int SecurityInformation, MemorySegment SecurityDescriptor) {
        var mh$ = SetKernelObjectSecurity$MH();
        try {
            return (int)mh$.invokeExact(Handle, SecurityInformation, SecurityDescriptor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetPrivateObjectSecurity$MH() {
        return RuntimeHelper.requireNonNull(constants$735.const$4,"SetPrivateObjectSecurity");
    }
    /**
     * {@snippet :
     * BOOL SetPrivateObjectSecurity(SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR ModificationDescriptor, PSECURITY_DESCRIPTOR* ObjectsSecurityDescriptor, PGENERIC_MAPPING GenericMapping, HANDLE Token);
     * }
     */
    public static int SetPrivateObjectSecurity(int SecurityInformation, MemorySegment ModificationDescriptor, MemorySegment ObjectsSecurityDescriptor, MemorySegment GenericMapping, MemorySegment Token) {
        var mh$ = SetPrivateObjectSecurity$MH();
        try {
            return (int)mh$.invokeExact(SecurityInformation, ModificationDescriptor, ObjectsSecurityDescriptor, GenericMapping, Token);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetPrivateObjectSecurityEx$MH() {
        return RuntimeHelper.requireNonNull(constants$735.const$6,"SetPrivateObjectSecurityEx");
    }
    /**
     * {@snippet :
     * BOOL SetPrivateObjectSecurityEx(SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR ModificationDescriptor, PSECURITY_DESCRIPTOR* ObjectsSecurityDescriptor, ULONG AutoInheritFlags, PGENERIC_MAPPING GenericMapping, HANDLE Token);
     * }
     */
    public static int SetPrivateObjectSecurityEx(int SecurityInformation, MemorySegment ModificationDescriptor, MemorySegment ObjectsSecurityDescriptor, int AutoInheritFlags, MemorySegment GenericMapping, MemorySegment Token) {
        var mh$ = SetPrivateObjectSecurityEx$MH();
        try {
            return (int)mh$.invokeExact(SecurityInformation, ModificationDescriptor, ObjectsSecurityDescriptor, AutoInheritFlags, GenericMapping, Token);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetSecurityAccessMask$MH() {
        return RuntimeHelper.requireNonNull(constants$736.const$0,"SetSecurityAccessMask");
    }
    /**
     * {@snippet :
     * void SetSecurityAccessMask(SECURITY_INFORMATION SecurityInformation, LPDWORD DesiredAccess);
     * }
     */
    public static void SetSecurityAccessMask(int SecurityInformation, MemorySegment DesiredAccess) {
        var mh$ = SetSecurityAccessMask$MH();
        try {
            mh$.invokeExact(SecurityInformation, DesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetSecurityDescriptorControl$MH() {
        return RuntimeHelper.requireNonNull(constants$736.const$2,"SetSecurityDescriptorControl");
    }
    /**
     * {@snippet :
     * BOOL SetSecurityDescriptorControl(PSECURITY_DESCRIPTOR pSecurityDescriptor, SECURITY_DESCRIPTOR_CONTROL ControlBitsOfInterest, SECURITY_DESCRIPTOR_CONTROL ControlBitsToSet);
     * }
     */
    public static int SetSecurityDescriptorControl(MemorySegment pSecurityDescriptor, short ControlBitsOfInterest, short ControlBitsToSet) {
        var mh$ = SetSecurityDescriptorControl$MH();
        try {
            return (int)mh$.invokeExact(pSecurityDescriptor, ControlBitsOfInterest, ControlBitsToSet);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetSecurityDescriptorDacl$MH() {
        return RuntimeHelper.requireNonNull(constants$736.const$3,"SetSecurityDescriptorDacl");
    }
    /**
     * {@snippet :
     * BOOL SetSecurityDescriptorDacl(PSECURITY_DESCRIPTOR pSecurityDescriptor, BOOL bDaclPresent, PACL pDacl, BOOL bDaclDefaulted);
     * }
     */
    public static int SetSecurityDescriptorDacl(MemorySegment pSecurityDescriptor, int bDaclPresent, MemorySegment pDacl, int bDaclDefaulted) {
        var mh$ = SetSecurityDescriptorDacl$MH();
        try {
            return (int)mh$.invokeExact(pSecurityDescriptor, bDaclPresent, pDacl, bDaclDefaulted);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetSecurityDescriptorGroup$MH() {
        return RuntimeHelper.requireNonNull(constants$736.const$4,"SetSecurityDescriptorGroup");
    }
    /**
     * {@snippet :
     * BOOL SetSecurityDescriptorGroup(PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID pGroup, BOOL bGroupDefaulted);
     * }
     */
    public static int SetSecurityDescriptorGroup(MemorySegment pSecurityDescriptor, MemorySegment pGroup, int bGroupDefaulted) {
        var mh$ = SetSecurityDescriptorGroup$MH();
        try {
            return (int)mh$.invokeExact(pSecurityDescriptor, pGroup, bGroupDefaulted);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetSecurityDescriptorOwner$MH() {
        return RuntimeHelper.requireNonNull(constants$736.const$5,"SetSecurityDescriptorOwner");
    }
    /**
     * {@snippet :
     * BOOL SetSecurityDescriptorOwner(PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID pOwner, BOOL bOwnerDefaulted);
     * }
     */
    public static int SetSecurityDescriptorOwner(MemorySegment pSecurityDescriptor, MemorySegment pOwner, int bOwnerDefaulted) {
        var mh$ = SetSecurityDescriptorOwner$MH();
        try {
            return (int)mh$.invokeExact(pSecurityDescriptor, pOwner, bOwnerDefaulted);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetSecurityDescriptorRMControl$MH() {
        return RuntimeHelper.requireNonNull(constants$737.const$0,"SetSecurityDescriptorRMControl");
    }
    /**
     * {@snippet :
     * DWORD SetSecurityDescriptorRMControl(PSECURITY_DESCRIPTOR SecurityDescriptor, PUCHAR RMControl);
     * }
     */
    public static int SetSecurityDescriptorRMControl(MemorySegment SecurityDescriptor, MemorySegment RMControl) {
        var mh$ = SetSecurityDescriptorRMControl$MH();
        try {
            return (int)mh$.invokeExact(SecurityDescriptor, RMControl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetSecurityDescriptorSacl$MH() {
        return RuntimeHelper.requireNonNull(constants$737.const$1,"SetSecurityDescriptorSacl");
    }
    /**
     * {@snippet :
     * BOOL SetSecurityDescriptorSacl(PSECURITY_DESCRIPTOR pSecurityDescriptor, BOOL bSaclPresent, PACL pSacl, BOOL bSaclDefaulted);
     * }
     */
    public static int SetSecurityDescriptorSacl(MemorySegment pSecurityDescriptor, int bSaclPresent, MemorySegment pSacl, int bSaclDefaulted) {
        var mh$ = SetSecurityDescriptorSacl$MH();
        try {
            return (int)mh$.invokeExact(pSecurityDescriptor, bSaclPresent, pSacl, bSaclDefaulted);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetTokenInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$737.const$2,"SetTokenInformation");
    }
    /**
     * {@snippet :
     * BOOL SetTokenInformation(HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, LPVOID TokenInformation, DWORD TokenInformationLength);
     * }
     */
    public static int SetTokenInformation(MemorySegment TokenHandle, int TokenInformationClass, MemorySegment TokenInformation, int TokenInformationLength) {
        var mh$ = SetTokenInformation$MH();
        try {
            return (int)mh$.invokeExact(TokenHandle, TokenInformationClass, TokenInformation, TokenInformationLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetCachedSigningLevel$MH() {
        return RuntimeHelper.requireNonNull(constants$737.const$3,"SetCachedSigningLevel");
    }
    /**
     * {@snippet :
     * BOOL SetCachedSigningLevel(PHANDLE SourceFiles, ULONG SourceFileCount, ULONG Flags, HANDLE TargetFile);
     * }
     */
    public static int SetCachedSigningLevel(MemorySegment SourceFiles, int SourceFileCount, int Flags, MemorySegment TargetFile) {
        var mh$ = SetCachedSigningLevel$MH();
        try {
            return (int)mh$.invokeExact(SourceFiles, SourceFileCount, Flags, TargetFile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCachedSigningLevel$MH() {
        return RuntimeHelper.requireNonNull(constants$737.const$5,"GetCachedSigningLevel");
    }
    /**
     * {@snippet :
     * BOOL GetCachedSigningLevel(HANDLE File, PULONG Flags, PULONG SigningLevel, PUCHAR Thumbprint, PULONG ThumbprintSize, PULONG ThumbprintAlgorithm);
     * }
     */
    public static int GetCachedSigningLevel(MemorySegment File, MemorySegment Flags, MemorySegment SigningLevel, MemorySegment Thumbprint, MemorySegment ThumbprintSize, MemorySegment ThumbprintAlgorithm) {
        var mh$ = GetCachedSigningLevel$MH();
        try {
            return (int)mh$.invokeExact(File, Flags, SigningLevel, Thumbprint, ThumbprintSize, ThumbprintAlgorithm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CveEventWrite$MH() {
        return RuntimeHelper.requireNonNull(constants$738.const$0,"CveEventWrite");
    }
    /**
     * {@snippet :
     * LONG CveEventWrite(PCWSTR CveId, PCWSTR AdditionalDetails);
     * }
     */
    public static int CveEventWrite(MemorySegment CveId, MemorySegment AdditionalDetails) {
        var mh$ = CveEventWrite$MH();
        try {
            return (int)mh$.invokeExact(CveId, AdditionalDetails);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeriveCapabilitySidsFromName$MH() {
        return RuntimeHelper.requireNonNull(constants$738.const$1,"DeriveCapabilitySidsFromName");
    }
    /**
     * {@snippet :
     * BOOL DeriveCapabilitySidsFromName(LPCWSTR CapName, PSID** CapabilityGroupSids, DWORD* CapabilityGroupSidCount, PSID** CapabilitySids, DWORD* CapabilitySidCount);
     * }
     */
    public static int DeriveCapabilitySidsFromName(MemorySegment CapName, MemorySegment CapabilityGroupSids, MemorySegment CapabilityGroupSidCount, MemorySegment CapabilitySids, MemorySegment CapabilitySidCount) {
        var mh$ = DeriveCapabilitySidsFromName$MH();
        try {
            return (int)mh$.invokeExact(CapName, CapabilityGroupSids, CapabilityGroupSidCount, CapabilitySids, CapabilitySidCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreatePrivateNamespaceW$MH() {
        return RuntimeHelper.requireNonNull(constants$738.const$2,"CreatePrivateNamespaceW");
    }
    /**
     * {@snippet :
     * HANDLE CreatePrivateNamespaceW(LPSECURITY_ATTRIBUTES lpPrivateNamespaceAttributes, LPVOID lpBoundaryDescriptor, LPCWSTR lpAliasPrefix);
     * }
     */
    public static MemorySegment CreatePrivateNamespaceW(MemorySegment lpPrivateNamespaceAttributes, MemorySegment lpBoundaryDescriptor, MemorySegment lpAliasPrefix) {
        var mh$ = CreatePrivateNamespaceW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpPrivateNamespaceAttributes, lpBoundaryDescriptor, lpAliasPrefix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenPrivateNamespaceW$MH() {
        return RuntimeHelper.requireNonNull(constants$738.const$3,"OpenPrivateNamespaceW");
    }
    /**
     * {@snippet :
     * HANDLE OpenPrivateNamespaceW(LPVOID lpBoundaryDescriptor, LPCWSTR lpAliasPrefix);
     * }
     */
    public static MemorySegment OpenPrivateNamespaceW(MemorySegment lpBoundaryDescriptor, MemorySegment lpAliasPrefix) {
        var mh$ = OpenPrivateNamespaceW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpBoundaryDescriptor, lpAliasPrefix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ClosePrivateNamespace$MH() {
        return RuntimeHelper.requireNonNull(constants$738.const$4,"ClosePrivateNamespace");
    }
    /**
     * {@snippet :
     * BOOLEAN ClosePrivateNamespace(HANDLE Handle, ULONG Flags);
     * }
     */
    public static byte ClosePrivateNamespace(MemorySegment Handle, int Flags) {
        var mh$ = ClosePrivateNamespace$MH();
        try {
            return (byte)mh$.invokeExact(Handle, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateBoundaryDescriptorW$MH() {
        return RuntimeHelper.requireNonNull(constants$738.const$5,"CreateBoundaryDescriptorW");
    }
    /**
     * {@snippet :
     * HANDLE CreateBoundaryDescriptorW(LPCWSTR Name, ULONG Flags);
     * }
     */
    public static MemorySegment CreateBoundaryDescriptorW(MemorySegment Name, int Flags) {
        var mh$ = CreateBoundaryDescriptorW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(Name, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddSIDToBoundaryDescriptor$MH() {
        return RuntimeHelper.requireNonNull(constants$739.const$0,"AddSIDToBoundaryDescriptor");
    }
    /**
     * {@snippet :
     * BOOL AddSIDToBoundaryDescriptor(HANDLE* BoundaryDescriptor, PSID RequiredSid);
     * }
     */
    public static int AddSIDToBoundaryDescriptor(MemorySegment BoundaryDescriptor, MemorySegment RequiredSid) {
        var mh$ = AddSIDToBoundaryDescriptor$MH();
        try {
            return (int)mh$.invokeExact(BoundaryDescriptor, RequiredSid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteBoundaryDescriptor$MH() {
        return RuntimeHelper.requireNonNull(constants$739.const$1,"DeleteBoundaryDescriptor");
    }
    /**
     * {@snippet :
     * void DeleteBoundaryDescriptor(HANDLE BoundaryDescriptor);
     * }
     */
    public static void DeleteBoundaryDescriptor(MemorySegment BoundaryDescriptor) {
        var mh$ = DeleteBoundaryDescriptor$MH();
        try {
            mh$.invokeExact(BoundaryDescriptor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNumaHighestNodeNumber$MH() {
        return RuntimeHelper.requireNonNull(constants$739.const$2,"GetNumaHighestNodeNumber");
    }
    /**
     * {@snippet :
     * BOOL GetNumaHighestNodeNumber(PULONG HighestNodeNumber);
     * }
     */
    public static int GetNumaHighestNodeNumber(MemorySegment HighestNodeNumber) {
        var mh$ = GetNumaHighestNodeNumber$MH();
        try {
            return (int)mh$.invokeExact(HighestNodeNumber);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNumaNodeProcessorMaskEx$MH() {
        return RuntimeHelper.requireNonNull(constants$739.const$3,"GetNumaNodeProcessorMaskEx");
    }
    /**
     * {@snippet :
     * BOOL GetNumaNodeProcessorMaskEx(USHORT Node, PGROUP_AFFINITY ProcessorMask);
     * }
     */
    public static int GetNumaNodeProcessorMaskEx(short Node, MemorySegment ProcessorMask) {
        var mh$ = GetNumaNodeProcessorMaskEx$MH();
        try {
            return (int)mh$.invokeExact(Node, ProcessorMask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNumaNodeProcessorMask2$MH() {
        return RuntimeHelper.requireNonNull(constants$739.const$5,"GetNumaNodeProcessorMask2");
    }
    /**
     * {@snippet :
     * BOOL GetNumaNodeProcessorMask2(USHORT NodeNumber, PGROUP_AFFINITY ProcessorMasks, USHORT ProcessorMaskCount, PUSHORT RequiredMaskCount);
     * }
     */
    public static int GetNumaNodeProcessorMask2(short NodeNumber, MemorySegment ProcessorMasks, short ProcessorMaskCount, MemorySegment RequiredMaskCount) {
        var mh$ = GetNumaNodeProcessorMask2$MH();
        try {
            return (int)mh$.invokeExact(NodeNumber, ProcessorMasks, ProcessorMaskCount, RequiredMaskCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNumaProximityNodeEx$MH() {
        return RuntimeHelper.requireNonNull(constants$740.const$0,"GetNumaProximityNodeEx");
    }
    /**
     * {@snippet :
     * BOOL GetNumaProximityNodeEx(ULONG ProximityId, PUSHORT NodeNumber);
     * }
     */
    public static int GetNumaProximityNodeEx(int ProximityId, MemorySegment NodeNumber) {
        var mh$ = GetNumaProximityNodeEx$MH();
        try {
            return (int)mh$.invokeExact(ProximityId, NodeNumber);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcessGroupAffinity$MH() {
        return RuntimeHelper.requireNonNull(constants$740.const$1,"GetProcessGroupAffinity");
    }
    /**
     * {@snippet :
     * BOOL GetProcessGroupAffinity(HANDLE hProcess, PUSHORT GroupCount, PUSHORT GroupArray);
     * }
     */
    public static int GetProcessGroupAffinity(MemorySegment hProcess, MemorySegment GroupCount, MemorySegment GroupArray) {
        var mh$ = GetProcessGroupAffinity$MH();
        try {
            return (int)mh$.invokeExact(hProcess, GroupCount, GroupArray);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetThreadGroupAffinity$MH() {
        return RuntimeHelper.requireNonNull(constants$740.const$2,"GetThreadGroupAffinity");
    }
    /**
     * {@snippet :
     * BOOL GetThreadGroupAffinity(HANDLE hThread, PGROUP_AFFINITY GroupAffinity);
     * }
     */
    public static int GetThreadGroupAffinity(MemorySegment hThread, MemorySegment GroupAffinity) {
        var mh$ = GetThreadGroupAffinity$MH();
        try {
            return (int)mh$.invokeExact(hThread, GroupAffinity);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadGroupAffinity$MH() {
        return RuntimeHelper.requireNonNull(constants$740.const$3,"SetThreadGroupAffinity");
    }
    /**
     * {@snippet :
     * BOOL SetThreadGroupAffinity(HANDLE hThread, const GROUP_AFFINITY* GroupAffinity, PGROUP_AFFINITY PreviousGroupAffinity);
     * }
     */
    public static int SetThreadGroupAffinity(MemorySegment hThread, MemorySegment GroupAffinity, MemorySegment PreviousGroupAffinity) {
        var mh$ = SetThreadGroupAffinity$MH();
        try {
            return (int)mh$.invokeExact(hThread, GroupAffinity, PreviousGroupAffinity);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetAppContainerNamedObjectPath$MH() {
        return RuntimeHelper.requireNonNull(constants$740.const$4,"GetAppContainerNamedObjectPath");
    }
    /**
     * {@snippet :
     * BOOL GetAppContainerNamedObjectPath(HANDLE Token, PSID AppContainerSid, ULONG ObjectPathLength, LPWSTR ObjectPath, PULONG ReturnLength);
     * }
     */
    public static int GetAppContainerNamedObjectPath(MemorySegment Token, MemorySegment AppContainerSid, int ObjectPathLength, MemorySegment ObjectPath, MemorySegment ReturnLength) {
        var mh$ = GetAppContainerNamedObjectPath$MH();
        try {
            return (int)mh$.invokeExact(Token, AppContainerSid, ObjectPathLength, ObjectPath, ReturnLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryThreadCycleTime$MH() {
        return RuntimeHelper.requireNonNull(constants$740.const$5,"QueryThreadCycleTime");
    }
    /**
     * {@snippet :
     * BOOL QueryThreadCycleTime(HANDLE ThreadHandle, PULONG64 CycleTime);
     * }
     */
    public static int QueryThreadCycleTime(MemorySegment ThreadHandle, MemorySegment CycleTime) {
        var mh$ = QueryThreadCycleTime$MH();
        try {
            return (int)mh$.invokeExact(ThreadHandle, CycleTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryProcessCycleTime$MH() {
        return RuntimeHelper.requireNonNull(constants$741.const$0,"QueryProcessCycleTime");
    }
    /**
     * {@snippet :
     * BOOL QueryProcessCycleTime(HANDLE ProcessHandle, PULONG64 CycleTime);
     * }
     */
    public static int QueryProcessCycleTime(MemorySegment ProcessHandle, MemorySegment CycleTime) {
        var mh$ = QueryProcessCycleTime$MH();
        try {
            return (int)mh$.invokeExact(ProcessHandle, CycleTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryIdleProcessorCycleTime$MH() {
        return RuntimeHelper.requireNonNull(constants$741.const$1,"QueryIdleProcessorCycleTime");
    }
    /**
     * {@snippet :
     * BOOL QueryIdleProcessorCycleTime(PULONG BufferLength, PULONG64 ProcessorIdleCycleTime);
     * }
     */
    public static int QueryIdleProcessorCycleTime(MemorySegment BufferLength, MemorySegment ProcessorIdleCycleTime) {
        var mh$ = QueryIdleProcessorCycleTime$MH();
        try {
            return (int)mh$.invokeExact(BufferLength, ProcessorIdleCycleTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryIdleProcessorCycleTimeEx$MH() {
        return RuntimeHelper.requireNonNull(constants$741.const$2,"QueryIdleProcessorCycleTimeEx");
    }
    /**
     * {@snippet :
     * BOOL QueryIdleProcessorCycleTimeEx(USHORT Group, PULONG BufferLength, PULONG64 ProcessorIdleCycleTime);
     * }
     */
    public static int QueryIdleProcessorCycleTimeEx(short Group, MemorySegment BufferLength, MemorySegment ProcessorIdleCycleTime) {
        var mh$ = QueryIdleProcessorCycleTimeEx$MH();
        try {
            return (int)mh$.invokeExact(Group, BufferLength, ProcessorIdleCycleTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryInterruptTimePrecise$MH() {
        return RuntimeHelper.requireNonNull(constants$741.const$3,"QueryInterruptTimePrecise");
    }
    /**
     * {@snippet :
     * void QueryInterruptTimePrecise(PULONGLONG lpInterruptTimePrecise);
     * }
     */
    public static void QueryInterruptTimePrecise(MemorySegment lpInterruptTimePrecise) {
        var mh$ = QueryInterruptTimePrecise$MH();
        try {
            mh$.invokeExact(lpInterruptTimePrecise);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryUnbiasedInterruptTimePrecise$MH() {
        return RuntimeHelper.requireNonNull(constants$741.const$4,"QueryUnbiasedInterruptTimePrecise");
    }
    /**
     * {@snippet :
     * void QueryUnbiasedInterruptTimePrecise(PULONGLONG lpUnbiasedInterruptTimePrecise);
     * }
     */
    public static void QueryUnbiasedInterruptTimePrecise(MemorySegment lpUnbiasedInterruptTimePrecise) {
        var mh$ = QueryUnbiasedInterruptTimePrecise$MH();
        try {
            mh$.invokeExact(lpUnbiasedInterruptTimePrecise);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryInterruptTime$MH() {
        return RuntimeHelper.requireNonNull(constants$741.const$5,"QueryInterruptTime");
    }
    /**
     * {@snippet :
     * void QueryInterruptTime(PULONGLONG lpInterruptTime);
     * }
     */
    public static void QueryInterruptTime(MemorySegment lpInterruptTime) {
        var mh$ = QueryInterruptTime$MH();
        try {
            mh$.invokeExact(lpInterruptTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryUnbiasedInterruptTime$MH() {
        return RuntimeHelper.requireNonNull(constants$742.const$0,"QueryUnbiasedInterruptTime");
    }
    /**
     * {@snippet :
     * BOOL QueryUnbiasedInterruptTime(PULONGLONG UnbiasedTime);
     * }
     */
    public static int QueryUnbiasedInterruptTime(MemorySegment UnbiasedTime) {
        var mh$ = QueryUnbiasedInterruptTime$MH();
        try {
            return (int)mh$.invokeExact(UnbiasedTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryAuxiliaryCounterFrequency$MH() {
        return RuntimeHelper.requireNonNull(constants$742.const$1,"QueryAuxiliaryCounterFrequency");
    }
    /**
     * {@snippet :
     * HRESULT QueryAuxiliaryCounterFrequency(PULONGLONG lpAuxiliaryCounterFrequency);
     * }
     */
    public static int QueryAuxiliaryCounterFrequency(MemorySegment lpAuxiliaryCounterFrequency) {
        var mh$ = QueryAuxiliaryCounterFrequency$MH();
        try {
            return (int)mh$.invokeExact(lpAuxiliaryCounterFrequency);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ConvertAuxiliaryCounterToPerformanceCounter$MH() {
        return RuntimeHelper.requireNonNull(constants$742.const$3,"ConvertAuxiliaryCounterToPerformanceCounter");
    }
    /**
     * {@snippet :
     * HRESULT ConvertAuxiliaryCounterToPerformanceCounter(ULONGLONG ullAuxiliaryCounterValue, PULONGLONG lpPerformanceCounterValue, PULONGLONG lpConversionError);
     * }
     */
    public static int ConvertAuxiliaryCounterToPerformanceCounter(long ullAuxiliaryCounterValue, MemorySegment lpPerformanceCounterValue, MemorySegment lpConversionError) {
        var mh$ = ConvertAuxiliaryCounterToPerformanceCounter$MH();
        try {
            return (int)mh$.invokeExact(ullAuxiliaryCounterValue, lpPerformanceCounterValue, lpConversionError);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ConvertPerformanceCounterToAuxiliaryCounter$MH() {
        return RuntimeHelper.requireNonNull(constants$742.const$4,"ConvertPerformanceCounterToAuxiliaryCounter");
    }
    /**
     * {@snippet :
     * HRESULT ConvertPerformanceCounterToAuxiliaryCounter(ULONGLONG ullPerformanceCounterValue, PULONGLONG lpAuxiliaryCounterValue, PULONGLONG lpConversionError);
     * }
     */
    public static int ConvertPerformanceCounterToAuxiliaryCounter(long ullPerformanceCounterValue, MemorySegment lpAuxiliaryCounterValue, MemorySegment lpConversionError) {
        var mh$ = ConvertPerformanceCounterToAuxiliaryCounter$MH();
        try {
            return (int)mh$.invokeExact(ullPerformanceCounterValue, lpAuxiliaryCounterValue, lpConversionError);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef void* LPLDT_ENTRY;
     * }
     */
    public static final AddressLayout LPLDT_ENTRY = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _COMMPROP* LPCOMMPROP;
     * }
     */
    public static final AddressLayout LPCOMMPROP = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _COMSTAT* LPCOMSTAT;
     * }
     */
    public static final AddressLayout LPCOMSTAT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _DCB* LPDCB;
     * }
     */
    public static final AddressLayout LPDCB = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _COMMTIMEOUTS* LPCOMMTIMEOUTS;
     * }
     */
    public static final AddressLayout LPCOMMTIMEOUTS = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _COMMCONFIG* LPCOMMCONFIG;
     * }
     */
    public static final AddressLayout LPCOMMCONFIG = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _MEMORYSTATUS* LPMEMORYSTATUS;
     * }
     */
    public static final AddressLayout LPMEMORYSTATUS = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _JIT_DEBUG_INFO* LPJIT_DEBUG_INFO;
     * }
     */
    public static final AddressLayout LPJIT_DEBUG_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _JIT_DEBUG_INFO* LPJIT_DEBUG_INFO32;
     * }
     */
    public static final AddressLayout LPJIT_DEBUG_INFO32 = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _JIT_DEBUG_INFO* LPJIT_DEBUG_INFO64;
     * }
     */
    public static final AddressLayout LPJIT_DEBUG_INFO64 = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _EXCEPTION_RECORD* LPEXCEPTION_RECORD;
     * }
     */
    public static final AddressLayout LPEXCEPTION_RECORD = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _EXCEPTION_POINTERS* LPEXCEPTION_POINTERS;
     * }
     */
    public static final AddressLayout LPEXCEPTION_POINTERS = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _OFSTRUCT* LPOFSTRUCT;
     * }
     */
    public static final AddressLayout LPOFSTRUCT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _OFSTRUCT* POFSTRUCT;
     * }
     */
    public static final AddressLayout POFSTRUCT = RuntimeHelper.POINTER;
    public static MethodHandle WinMain$MH() {
        return RuntimeHelper.requireNonNull(constants$755.const$2,"WinMain");
    }
    /**
     * {@snippet :
     * int WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nShowCmd);
     * }
     */
    public static int WinMain(MemorySegment hInstance, MemorySegment hPrevInstance, MemorySegment lpCmdLine, int nShowCmd) {
        var mh$ = WinMain$MH();
        try {
            return (int)mh$.invokeExact(hInstance, hPrevInstance, lpCmdLine, nShowCmd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wWinMain$MH() {
        return RuntimeHelper.requireNonNull(constants$755.const$3,"wWinMain");
    }
    /**
     * {@snippet :
     * int wWinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPWSTR lpCmdLine, int nShowCmd);
     * }
     */
    public static int wWinMain(MemorySegment hInstance, MemorySegment hPrevInstance, MemorySegment lpCmdLine, int nShowCmd) {
        var mh$ = wWinMain$MH();
        try {
            return (int)mh$.invokeExact(hInstance, hPrevInstance, lpCmdLine, nShowCmd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GlobalAlloc$MH() {
        return RuntimeHelper.requireNonNull(constants$755.const$5,"GlobalAlloc");
    }
    /**
     * {@snippet :
     * HGLOBAL GlobalAlloc(UINT uFlags, SIZE_T dwBytes);
     * }
     */
    public static MemorySegment GlobalAlloc(int uFlags, long dwBytes) {
        var mh$ = GlobalAlloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(uFlags, dwBytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GlobalReAlloc$MH() {
        return RuntimeHelper.requireNonNull(constants$756.const$1,"GlobalReAlloc");
    }
    /**
     * {@snippet :
     * HGLOBAL GlobalReAlloc(HGLOBAL hMem, SIZE_T dwBytes, UINT uFlags);
     * }
     */
    public static MemorySegment GlobalReAlloc(MemorySegment hMem, long dwBytes, int uFlags) {
        var mh$ = GlobalReAlloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hMem, dwBytes, uFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GlobalSize$MH() {
        return RuntimeHelper.requireNonNull(constants$756.const$2,"GlobalSize");
    }
    /**
     * {@snippet :
     * SIZE_T GlobalSize(HGLOBAL hMem);
     * }
     */
    public static long GlobalSize(MemorySegment hMem) {
        var mh$ = GlobalSize$MH();
        try {
            return (long)mh$.invokeExact(hMem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GlobalUnlock$MH() {
        return RuntimeHelper.requireNonNull(constants$756.const$3,"GlobalUnlock");
    }
    /**
     * {@snippet :
     * BOOL GlobalUnlock(HGLOBAL hMem);
     * }
     */
    public static int GlobalUnlock(MemorySegment hMem) {
        var mh$ = GlobalUnlock$MH();
        try {
            return (int)mh$.invokeExact(hMem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GlobalLock$MH() {
        return RuntimeHelper.requireNonNull(constants$756.const$4,"GlobalLock");
    }
    /**
     * {@snippet :
     * LPVOID GlobalLock(HGLOBAL hMem);
     * }
     */
    public static MemorySegment GlobalLock(MemorySegment hMem) {
        var mh$ = GlobalLock$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hMem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GlobalFlags$MH() {
        return RuntimeHelper.requireNonNull(constants$756.const$5,"GlobalFlags");
    }
    /**
     * {@snippet :
     * UINT GlobalFlags(HGLOBAL hMem);
     * }
     */
    public static int GlobalFlags(MemorySegment hMem) {
        var mh$ = GlobalFlags$MH();
        try {
            return (int)mh$.invokeExact(hMem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GlobalHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$757.const$0,"GlobalHandle");
    }
    /**
     * {@snippet :
     * HGLOBAL GlobalHandle(LPCVOID pMem);
     * }
     */
    public static MemorySegment GlobalHandle(MemorySegment pMem) {
        var mh$ = GlobalHandle$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(pMem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GlobalFree$MH() {
        return RuntimeHelper.requireNonNull(constants$757.const$1,"GlobalFree");
    }
    /**
     * {@snippet :
     * HGLOBAL GlobalFree(HGLOBAL hMem);
     * }
     */
    public static MemorySegment GlobalFree(MemorySegment hMem) {
        var mh$ = GlobalFree$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hMem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GlobalCompact$MH() {
        return RuntimeHelper.requireNonNull(constants$757.const$2,"GlobalCompact");
    }
    /**
     * {@snippet :
     * SIZE_T GlobalCompact(DWORD dwMinFree);
     * }
     */
    public static long GlobalCompact(int dwMinFree) {
        var mh$ = GlobalCompact$MH();
        try {
            return (long)mh$.invokeExact(dwMinFree);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GlobalFix$MH() {
        return RuntimeHelper.requireNonNull(constants$757.const$3,"GlobalFix");
    }
    /**
     * {@snippet :
     * void GlobalFix(HGLOBAL hMem);
     * }
     */
    public static void GlobalFix(MemorySegment hMem) {
        var mh$ = GlobalFix$MH();
        try {
            mh$.invokeExact(hMem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GlobalUnfix$MH() {
        return RuntimeHelper.requireNonNull(constants$757.const$4,"GlobalUnfix");
    }
    /**
     * {@snippet :
     * void GlobalUnfix(HGLOBAL hMem);
     * }
     */
    public static void GlobalUnfix(MemorySegment hMem) {
        var mh$ = GlobalUnfix$MH();
        try {
            mh$.invokeExact(hMem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GlobalWire$MH() {
        return RuntimeHelper.requireNonNull(constants$757.const$5,"GlobalWire");
    }
    /**
     * {@snippet :
     * LPVOID GlobalWire(HGLOBAL hMem);
     * }
     */
    public static MemorySegment GlobalWire(MemorySegment hMem) {
        var mh$ = GlobalWire$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hMem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GlobalUnWire$MH() {
        return RuntimeHelper.requireNonNull(constants$758.const$0,"GlobalUnWire");
    }
    /**
     * {@snippet :
     * BOOL GlobalUnWire(HGLOBAL hMem);
     * }
     */
    public static int GlobalUnWire(MemorySegment hMem) {
        var mh$ = GlobalUnWire$MH();
        try {
            return (int)mh$.invokeExact(hMem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GlobalMemoryStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$758.const$1,"GlobalMemoryStatus");
    }
    /**
     * {@snippet :
     * void GlobalMemoryStatus(LPMEMORYSTATUS lpBuffer);
     * }
     */
    public static void GlobalMemoryStatus(MemorySegment lpBuffer) {
        var mh$ = GlobalMemoryStatus$MH();
        try {
            mh$.invokeExact(lpBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LocalAlloc$MH() {
        return RuntimeHelper.requireNonNull(constants$758.const$2,"LocalAlloc");
    }
    /**
     * {@snippet :
     * HLOCAL LocalAlloc(UINT uFlags, SIZE_T uBytes);
     * }
     */
    public static MemorySegment LocalAlloc(int uFlags, long uBytes) {
        var mh$ = LocalAlloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(uFlags, uBytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LocalReAlloc$MH() {
        return RuntimeHelper.requireNonNull(constants$758.const$3,"LocalReAlloc");
    }
    /**
     * {@snippet :
     * HLOCAL LocalReAlloc(HLOCAL hMem, SIZE_T uBytes, UINT uFlags);
     * }
     */
    public static MemorySegment LocalReAlloc(MemorySegment hMem, long uBytes, int uFlags) {
        var mh$ = LocalReAlloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hMem, uBytes, uFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LocalLock$MH() {
        return RuntimeHelper.requireNonNull(constants$758.const$4,"LocalLock");
    }
    /**
     * {@snippet :
     * LPVOID LocalLock(HLOCAL hMem);
     * }
     */
    public static MemorySegment LocalLock(MemorySegment hMem) {
        var mh$ = LocalLock$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hMem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LocalHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$758.const$5,"LocalHandle");
    }
    /**
     * {@snippet :
     * HLOCAL LocalHandle(LPCVOID pMem);
     * }
     */
    public static MemorySegment LocalHandle(MemorySegment pMem) {
        var mh$ = LocalHandle$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(pMem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LocalUnlock$MH() {
        return RuntimeHelper.requireNonNull(constants$759.const$0,"LocalUnlock");
    }
    /**
     * {@snippet :
     * BOOL LocalUnlock(HLOCAL hMem);
     * }
     */
    public static int LocalUnlock(MemorySegment hMem) {
        var mh$ = LocalUnlock$MH();
        try {
            return (int)mh$.invokeExact(hMem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LocalSize$MH() {
        return RuntimeHelper.requireNonNull(constants$759.const$1,"LocalSize");
    }
    /**
     * {@snippet :
     * SIZE_T LocalSize(HLOCAL hMem);
     * }
     */
    public static long LocalSize(MemorySegment hMem) {
        var mh$ = LocalSize$MH();
        try {
            return (long)mh$.invokeExact(hMem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LocalFlags$MH() {
        return RuntimeHelper.requireNonNull(constants$759.const$2,"LocalFlags");
    }
    /**
     * {@snippet :
     * UINT LocalFlags(HLOCAL hMem);
     * }
     */
    public static int LocalFlags(MemorySegment hMem) {
        var mh$ = LocalFlags$MH();
        try {
            return (int)mh$.invokeExact(hMem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LocalFree$MH() {
        return RuntimeHelper.requireNonNull(constants$759.const$3,"LocalFree");
    }
    /**
     * {@snippet :
     * HLOCAL LocalFree(HLOCAL hMem);
     * }
     */
    public static MemorySegment LocalFree(MemorySegment hMem) {
        var mh$ = LocalFree$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hMem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LocalShrink$MH() {
        return RuntimeHelper.requireNonNull(constants$759.const$4,"LocalShrink");
    }
    /**
     * {@snippet :
     * SIZE_T LocalShrink(HLOCAL hMem, UINT cbNewSize);
     * }
     */
    public static long LocalShrink(MemorySegment hMem, int cbNewSize) {
        var mh$ = LocalShrink$MH();
        try {
            return (long)mh$.invokeExact(hMem, cbNewSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LocalCompact$MH() {
        return RuntimeHelper.requireNonNull(constants$759.const$5,"LocalCompact");
    }
    /**
     * {@snippet :
     * SIZE_T LocalCompact(UINT uMinFree);
     * }
     */
    public static long LocalCompact(int uMinFree) {
        var mh$ = LocalCompact$MH();
        try {
            return (long)mh$.invokeExact(uMinFree);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetBinaryTypeA$MH() {
        return RuntimeHelper.requireNonNull(constants$760.const$0,"GetBinaryTypeA");
    }
    /**
     * {@snippet :
     * BOOL GetBinaryTypeA(LPCSTR lpApplicationName, LPDWORD lpBinaryType);
     * }
     */
    public static int GetBinaryTypeA(MemorySegment lpApplicationName, MemorySegment lpBinaryType) {
        var mh$ = GetBinaryTypeA$MH();
        try {
            return (int)mh$.invokeExact(lpApplicationName, lpBinaryType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetBinaryTypeW$MH() {
        return RuntimeHelper.requireNonNull(constants$760.const$1,"GetBinaryTypeW");
    }
    /**
     * {@snippet :
     * BOOL GetBinaryTypeW(LPCWSTR lpApplicationName, LPDWORD lpBinaryType);
     * }
     */
    public static int GetBinaryTypeW(MemorySegment lpApplicationName, MemorySegment lpBinaryType) {
        var mh$ = GetBinaryTypeW$MH();
        try {
            return (int)mh$.invokeExact(lpApplicationName, lpBinaryType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetShortPathNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$760.const$2,"GetShortPathNameA");
    }
    /**
     * {@snippet :
     * DWORD GetShortPathNameA(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer);
     * }
     */
    public static int GetShortPathNameA(MemorySegment lpszLongPath, MemorySegment lpszShortPath, int cchBuffer) {
        var mh$ = GetShortPathNameA$MH();
        try {
            return (int)mh$.invokeExact(lpszLongPath, lpszShortPath, cchBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLongPathNameTransactedA$MH() {
        return RuntimeHelper.requireNonNull(constants$760.const$3,"GetLongPathNameTransactedA");
    }
    /**
     * {@snippet :
     * DWORD GetLongPathNameTransactedA(LPCSTR lpszShortPath, LPSTR lpszLongPath, DWORD cchBuffer, HANDLE hTransaction);
     * }
     */
    public static int GetLongPathNameTransactedA(MemorySegment lpszShortPath, MemorySegment lpszLongPath, int cchBuffer, MemorySegment hTransaction) {
        var mh$ = GetLongPathNameTransactedA$MH();
        try {
            return (int)mh$.invokeExact(lpszShortPath, lpszLongPath, cchBuffer, hTransaction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLongPathNameTransactedW$MH() {
        return RuntimeHelper.requireNonNull(constants$760.const$4,"GetLongPathNameTransactedW");
    }
    /**
     * {@snippet :
     * DWORD GetLongPathNameTransactedW(LPCWSTR lpszShortPath, LPWSTR lpszLongPath, DWORD cchBuffer, HANDLE hTransaction);
     * }
     */
    public static int GetLongPathNameTransactedW(MemorySegment lpszShortPath, MemorySegment lpszLongPath, int cchBuffer, MemorySegment hTransaction) {
        var mh$ = GetLongPathNameTransactedW$MH();
        try {
            return (int)mh$.invokeExact(lpszShortPath, lpszLongPath, cchBuffer, hTransaction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcessAffinityMask$MH() {
        return RuntimeHelper.requireNonNull(constants$760.const$5,"GetProcessAffinityMask");
    }
    /**
     * {@snippet :
     * BOOL GetProcessAffinityMask(HANDLE hProcess, PDWORD_PTR lpProcessAffinityMask, PDWORD_PTR lpSystemAffinityMask);
     * }
     */
    public static int GetProcessAffinityMask(MemorySegment hProcess, MemorySegment lpProcessAffinityMask, MemorySegment lpSystemAffinityMask) {
        var mh$ = GetProcessAffinityMask$MH();
        try {
            return (int)mh$.invokeExact(hProcess, lpProcessAffinityMask, lpSystemAffinityMask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetProcessAffinityMask$MH() {
        return RuntimeHelper.requireNonNull(constants$761.const$0,"SetProcessAffinityMask");
    }
    /**
     * {@snippet :
     * BOOL SetProcessAffinityMask(HANDLE hProcess, DWORD_PTR dwProcessAffinityMask);
     * }
     */
    public static int SetProcessAffinityMask(MemorySegment hProcess, long dwProcessAffinityMask) {
        var mh$ = SetProcessAffinityMask$MH();
        try {
            return (int)mh$.invokeExact(hProcess, dwProcessAffinityMask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcessIoCounters$MH() {
        return RuntimeHelper.requireNonNull(constants$761.const$1,"GetProcessIoCounters");
    }
    /**
     * {@snippet :
     * BOOL GetProcessIoCounters(HANDLE hProcess, PIO_COUNTERS lpIoCounters);
     * }
     */
    public static int GetProcessIoCounters(MemorySegment hProcess, MemorySegment lpIoCounters) {
        var mh$ = GetProcessIoCounters$MH();
        try {
            return (int)mh$.invokeExact(hProcess, lpIoCounters);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FatalExit$MH() {
        return RuntimeHelper.requireNonNull(constants$761.const$2,"FatalExit");
    }
    /**
     * {@snippet :
     * void FatalExit(int ExitCode);
     * }
     */
    public static void FatalExit(int ExitCode) {
        var mh$ = FatalExit$MH();
        try {
            mh$.invokeExact(ExitCode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetEnvironmentStringsA$MH() {
        return RuntimeHelper.requireNonNull(constants$761.const$3,"SetEnvironmentStringsA");
    }
    /**
     * {@snippet :
     * BOOL SetEnvironmentStringsA(LPCH NewEnvironment);
     * }
     */
    public static int SetEnvironmentStringsA(MemorySegment NewEnvironment) {
        var mh$ = SetEnvironmentStringsA$MH();
        try {
            return (int)mh$.invokeExact(NewEnvironment);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SwitchToFiber$MH() {
        return RuntimeHelper.requireNonNull(constants$761.const$4,"SwitchToFiber");
    }
    /**
     * {@snippet :
     * void SwitchToFiber(LPVOID lpFiber);
     * }
     */
    public static void SwitchToFiber(MemorySegment lpFiber) {
        var mh$ = SwitchToFiber$MH();
        try {
            mh$.invokeExact(lpFiber);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteFiber$MH() {
        return RuntimeHelper.requireNonNull(constants$761.const$5,"DeleteFiber");
    }
    /**
     * {@snippet :
     * void DeleteFiber(LPVOID lpFiber);
     * }
     */
    public static void DeleteFiber(MemorySegment lpFiber) {
        var mh$ = DeleteFiber$MH();
        try {
            mh$.invokeExact(lpFiber);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ConvertFiberToThread$MH() {
        return RuntimeHelper.requireNonNull(constants$762.const$0,"ConvertFiberToThread");
    }
    /**
     * {@snippet :
     * BOOL ConvertFiberToThread();
     * }
     */
    public static int ConvertFiberToThread() {
        var mh$ = ConvertFiberToThread$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateFiberEx$MH() {
        return RuntimeHelper.requireNonNull(constants$762.const$2,"CreateFiberEx");
    }
    /**
     * {@snippet :
     * LPVOID CreateFiberEx(SIZE_T dwStackCommitSize, SIZE_T dwStackReserveSize, DWORD dwFlags, LPFIBER_START_ROUTINE lpStartAddress, LPVOID lpParameter);
     * }
     */
    public static MemorySegment CreateFiberEx(long dwStackCommitSize, long dwStackReserveSize, int dwFlags, MemorySegment lpStartAddress, MemorySegment lpParameter) {
        var mh$ = CreateFiberEx$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(dwStackCommitSize, dwStackReserveSize, dwFlags, lpStartAddress, lpParameter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ConvertThreadToFiberEx$MH() {
        return RuntimeHelper.requireNonNull(constants$762.const$3,"ConvertThreadToFiberEx");
    }
    /**
     * {@snippet :
     * LPVOID ConvertThreadToFiberEx(LPVOID lpParameter, DWORD dwFlags);
     * }
     */
    public static MemorySegment ConvertThreadToFiberEx(MemorySegment lpParameter, int dwFlags) {
        var mh$ = ConvertThreadToFiberEx$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpParameter, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateFiber$MH() {
        return RuntimeHelper.requireNonNull(constants$762.const$4,"CreateFiber");
    }
    /**
     * {@snippet :
     * LPVOID CreateFiber(SIZE_T dwStackSize, LPFIBER_START_ROUTINE lpStartAddress, LPVOID lpParameter);
     * }
     */
    public static MemorySegment CreateFiber(long dwStackSize, MemorySegment lpStartAddress, MemorySegment lpParameter) {
        var mh$ = CreateFiber$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(dwStackSize, lpStartAddress, lpParameter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ConvertThreadToFiber$MH() {
        return RuntimeHelper.requireNonNull(constants$762.const$5,"ConvertThreadToFiber");
    }
    /**
     * {@snippet :
     * LPVOID ConvertThreadToFiber(LPVOID lpParameter);
     * }
     */
    public static MemorySegment ConvertThreadToFiber(MemorySegment lpParameter) {
        var mh$ = ConvertThreadToFiber$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpParameter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef void* PUMS_CONTEXT;
     * }
     */
    public static final AddressLayout PUMS_CONTEXT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef void* PUMS_COMPLETION_LIST;
     * }
     */
    public static final AddressLayout PUMS_COMPLETION_LIST = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef enum _RTL_UMS_THREAD_INFO_CLASS* PUMS_THREAD_INFO_CLASS;
     * }
     */
    public static final AddressLayout PUMS_THREAD_INFO_CLASS = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _UMS_SCHEDULER_STARTUP_INFO* PUMS_SCHEDULER_STARTUP_INFO;
     * }
     */
    public static final AddressLayout PUMS_SCHEDULER_STARTUP_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _UMS_SYSTEM_THREAD_INFORMATION* PUMS_SYSTEM_THREAD_INFORMATION;
     * }
     */
    public static final AddressLayout PUMS_SYSTEM_THREAD_INFORMATION = RuntimeHelper.POINTER;
    public static MethodHandle CreateUmsCompletionList$MH() {
        return RuntimeHelper.requireNonNull(constants$764.const$3,"CreateUmsCompletionList");
    }
    /**
     * {@snippet :
     * BOOL CreateUmsCompletionList(PUMS_COMPLETION_LIST* UmsCompletionList);
     * }
     */
    public static int CreateUmsCompletionList(MemorySegment UmsCompletionList) {
        var mh$ = CreateUmsCompletionList$MH();
        try {
            return (int)mh$.invokeExact(UmsCompletionList);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DequeueUmsCompletionListItems$MH() {
        return RuntimeHelper.requireNonNull(constants$764.const$4,"DequeueUmsCompletionListItems");
    }
    /**
     * {@snippet :
     * BOOL DequeueUmsCompletionListItems(PUMS_COMPLETION_LIST UmsCompletionList, DWORD WaitTimeOut, PUMS_CONTEXT* UmsThreadList);
     * }
     */
    public static int DequeueUmsCompletionListItems(MemorySegment UmsCompletionList, int WaitTimeOut, MemorySegment UmsThreadList) {
        var mh$ = DequeueUmsCompletionListItems$MH();
        try {
            return (int)mh$.invokeExact(UmsCompletionList, WaitTimeOut, UmsThreadList);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetUmsCompletionListEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$764.const$5,"GetUmsCompletionListEvent");
    }
    /**
     * {@snippet :
     * BOOL GetUmsCompletionListEvent(PUMS_COMPLETION_LIST UmsCompletionList, PHANDLE UmsCompletionEvent);
     * }
     */
    public static int GetUmsCompletionListEvent(MemorySegment UmsCompletionList, MemorySegment UmsCompletionEvent) {
        var mh$ = GetUmsCompletionListEvent$MH();
        try {
            return (int)mh$.invokeExact(UmsCompletionList, UmsCompletionEvent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExecuteUmsThread$MH() {
        return RuntimeHelper.requireNonNull(constants$765.const$0,"ExecuteUmsThread");
    }
    /**
     * {@snippet :
     * BOOL ExecuteUmsThread(PUMS_CONTEXT UmsThread);
     * }
     */
    public static int ExecuteUmsThread(MemorySegment UmsThread) {
        var mh$ = ExecuteUmsThread$MH();
        try {
            return (int)mh$.invokeExact(UmsThread);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UmsThreadYield$MH() {
        return RuntimeHelper.requireNonNull(constants$765.const$1,"UmsThreadYield");
    }
    /**
     * {@snippet :
     * BOOL UmsThreadYield(PVOID SchedulerParam);
     * }
     */
    public static int UmsThreadYield(MemorySegment SchedulerParam) {
        var mh$ = UmsThreadYield$MH();
        try {
            return (int)mh$.invokeExact(SchedulerParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteUmsCompletionList$MH() {
        return RuntimeHelper.requireNonNull(constants$765.const$2,"DeleteUmsCompletionList");
    }
    /**
     * {@snippet :
     * BOOL DeleteUmsCompletionList(PUMS_COMPLETION_LIST UmsCompletionList);
     * }
     */
    public static int DeleteUmsCompletionList(MemorySegment UmsCompletionList) {
        var mh$ = DeleteUmsCompletionList$MH();
        try {
            return (int)mh$.invokeExact(UmsCompletionList);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrentUmsThread$MH() {
        return RuntimeHelper.requireNonNull(constants$765.const$3,"GetCurrentUmsThread");
    }
    /**
     * {@snippet :
     * PUMS_CONTEXT GetCurrentUmsThread();
     * }
     */
    public static MemorySegment GetCurrentUmsThread() {
        var mh$ = GetCurrentUmsThread$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNextUmsListItem$MH() {
        return RuntimeHelper.requireNonNull(constants$765.const$4,"GetNextUmsListItem");
    }
    /**
     * {@snippet :
     * PUMS_CONTEXT GetNextUmsListItem(PUMS_CONTEXT UmsContext);
     * }
     */
    public static MemorySegment GetNextUmsListItem(MemorySegment UmsContext) {
        var mh$ = GetNextUmsListItem$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(UmsContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryUmsThreadInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$765.const$5,"QueryUmsThreadInformation");
    }
    /**
     * {@snippet :
     * BOOL QueryUmsThreadInformation(PUMS_CONTEXT UmsThread, UMS_THREAD_INFO_CLASS UmsThreadInfoClass, PVOID UmsThreadInformation, ULONG UmsThreadInformationLength, PULONG ReturnLength);
     * }
     */
    public static int QueryUmsThreadInformation(MemorySegment UmsThread, int UmsThreadInfoClass, MemorySegment UmsThreadInformation, int UmsThreadInformationLength, MemorySegment ReturnLength) {
        var mh$ = QueryUmsThreadInformation$MH();
        try {
            return (int)mh$.invokeExact(UmsThread, UmsThreadInfoClass, UmsThreadInformation, UmsThreadInformationLength, ReturnLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetUmsThreadInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$766.const$0,"SetUmsThreadInformation");
    }
    /**
     * {@snippet :
     * BOOL SetUmsThreadInformation(PUMS_CONTEXT UmsThread, UMS_THREAD_INFO_CLASS UmsThreadInfoClass, PVOID UmsThreadInformation, ULONG UmsThreadInformationLength);
     * }
     */
    public static int SetUmsThreadInformation(MemorySegment UmsThread, int UmsThreadInfoClass, MemorySegment UmsThreadInformation, int UmsThreadInformationLength) {
        var mh$ = SetUmsThreadInformation$MH();
        try {
            return (int)mh$.invokeExact(UmsThread, UmsThreadInfoClass, UmsThreadInformation, UmsThreadInformationLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteUmsThreadContext$MH() {
        return RuntimeHelper.requireNonNull(constants$766.const$1,"DeleteUmsThreadContext");
    }
    /**
     * {@snippet :
     * BOOL DeleteUmsThreadContext(PUMS_CONTEXT UmsThread);
     * }
     */
    public static int DeleteUmsThreadContext(MemorySegment UmsThread) {
        var mh$ = DeleteUmsThreadContext$MH();
        try {
            return (int)mh$.invokeExact(UmsThread);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateUmsThreadContext$MH() {
        return RuntimeHelper.requireNonNull(constants$766.const$2,"CreateUmsThreadContext");
    }
    /**
     * {@snippet :
     * BOOL CreateUmsThreadContext(PUMS_CONTEXT* lpUmsThread);
     * }
     */
    public static int CreateUmsThreadContext(MemorySegment lpUmsThread) {
        var mh$ = CreateUmsThreadContext$MH();
        try {
            return (int)mh$.invokeExact(lpUmsThread);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnterUmsSchedulingMode$MH() {
        return RuntimeHelper.requireNonNull(constants$766.const$3,"EnterUmsSchedulingMode");
    }
    /**
     * {@snippet :
     * BOOL EnterUmsSchedulingMode(PUMS_SCHEDULER_STARTUP_INFO SchedulerStartupInfo);
     * }
     */
    public static int EnterUmsSchedulingMode(MemorySegment SchedulerStartupInfo) {
        var mh$ = EnterUmsSchedulingMode$MH();
        try {
            return (int)mh$.invokeExact(SchedulerStartupInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetUmsSystemThreadInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$766.const$4,"GetUmsSystemThreadInformation");
    }
    /**
     * {@snippet :
     * BOOL GetUmsSystemThreadInformation(HANDLE ThreadHandle, PUMS_SYSTEM_THREAD_INFORMATION SystemThreadInfo);
     * }
     */
    public static int GetUmsSystemThreadInformation(MemorySegment ThreadHandle, MemorySegment SystemThreadInfo) {
        var mh$ = GetUmsSystemThreadInformation$MH();
        try {
            return (int)mh$.invokeExact(ThreadHandle, SystemThreadInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadAffinityMask$MH() {
        return RuntimeHelper.requireNonNull(constants$766.const$5,"SetThreadAffinityMask");
    }
    /**
     * {@snippet :
     * DWORD_PTR SetThreadAffinityMask(HANDLE hThread, DWORD_PTR dwThreadAffinityMask);
     * }
     */
    public static long SetThreadAffinityMask(MemorySegment hThread, long dwThreadAffinityMask) {
        var mh$ = SetThreadAffinityMask$MH();
        try {
            return (long)mh$.invokeExact(hThread, dwThreadAffinityMask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetProcessDEPPolicy$MH() {
        return RuntimeHelper.requireNonNull(constants$767.const$0,"SetProcessDEPPolicy");
    }
    /**
     * {@snippet :
     * BOOL SetProcessDEPPolicy(DWORD dwFlags);
     * }
     */
    public static int SetProcessDEPPolicy(int dwFlags) {
        var mh$ = SetProcessDEPPolicy$MH();
        try {
            return (int)mh$.invokeExact(dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcessDEPPolicy$MH() {
        return RuntimeHelper.requireNonNull(constants$767.const$1,"GetProcessDEPPolicy");
    }
    /**
     * {@snippet :
     * BOOL GetProcessDEPPolicy(HANDLE hProcess, LPDWORD lpFlags, PBOOL lpPermanent);
     * }
     */
    public static int GetProcessDEPPolicy(MemorySegment hProcess, MemorySegment lpFlags, MemorySegment lpPermanent) {
        var mh$ = GetProcessDEPPolicy$MH();
        try {
            return (int)mh$.invokeExact(hProcess, lpFlags, lpPermanent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RequestWakeupLatency$MH() {
        return RuntimeHelper.requireNonNull(constants$767.const$2,"RequestWakeupLatency");
    }
    /**
     * {@snippet :
     * BOOL RequestWakeupLatency(LATENCY_TIME latency);
     * }
     */
    public static int RequestWakeupLatency(int latency) {
        var mh$ = RequestWakeupLatency$MH();
        try {
            return (int)mh$.invokeExact(latency);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsSystemResumeAutomatic$MH() {
        return RuntimeHelper.requireNonNull(constants$767.const$3,"IsSystemResumeAutomatic");
    }
    /**
     * {@snippet :
     * BOOL IsSystemResumeAutomatic();
     * }
     */
    public static int IsSystemResumeAutomatic() {
        var mh$ = IsSystemResumeAutomatic$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetThreadSelectorEntry$MH() {
        return RuntimeHelper.requireNonNull(constants$767.const$4,"GetThreadSelectorEntry");
    }
    /**
     * {@snippet :
     * BOOL GetThreadSelectorEntry(HANDLE hThread, DWORD dwSelector, LPLDT_ENTRY lpSelectorEntry);
     * }
     */
    public static int GetThreadSelectorEntry(MemorySegment hThread, int dwSelector, MemorySegment lpSelectorEntry) {
        var mh$ = GetThreadSelectorEntry$MH();
        try {
            return (int)mh$.invokeExact(hThread, dwSelector, lpSelectorEntry);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadExecutionState$MH() {
        return RuntimeHelper.requireNonNull(constants$767.const$5,"SetThreadExecutionState");
    }
    /**
     * {@snippet :
     * EXECUTION_STATE SetThreadExecutionState(EXECUTION_STATE esFlags);
     * }
     */
    public static int SetThreadExecutionState(int esFlags) {
        var mh$ = SetThreadExecutionState$MH();
        try {
            return (int)mh$.invokeExact(esFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _REASON_CONTEXT* PPOWER_REQUEST_CONTEXT;
     * }
     */
    public static final AddressLayout PPOWER_REQUEST_CONTEXT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _REASON_CONTEXT* LPPOWER_REQUEST_CONTEXT;
     * }
     */
    public static final AddressLayout LPPOWER_REQUEST_CONTEXT = RuntimeHelper.POINTER;
    public static MethodHandle PowerCreateRequest$MH() {
        return RuntimeHelper.requireNonNull(constants$768.const$0,"PowerCreateRequest");
    }
    /**
     * {@snippet :
     * HANDLE PowerCreateRequest(PREASON_CONTEXT Context);
     * }
     */
    public static MemorySegment PowerCreateRequest(MemorySegment Context) {
        var mh$ = PowerCreateRequest$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(Context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PowerSetRequest$MH() {
        return RuntimeHelper.requireNonNull(constants$768.const$1,"PowerSetRequest");
    }
    /**
     * {@snippet :
     * BOOL PowerSetRequest(HANDLE PowerRequest, POWER_REQUEST_TYPE RequestType);
     * }
     */
    public static int PowerSetRequest(MemorySegment PowerRequest, int RequestType) {
        var mh$ = PowerSetRequest$MH();
        try {
            return (int)mh$.invokeExact(PowerRequest, RequestType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PowerClearRequest$MH() {
        return RuntimeHelper.requireNonNull(constants$768.const$2,"PowerClearRequest");
    }
    /**
     * {@snippet :
     * BOOL PowerClearRequest(HANDLE PowerRequest, POWER_REQUEST_TYPE RequestType);
     * }
     */
    public static int PowerClearRequest(MemorySegment PowerRequest, int RequestType) {
        var mh$ = PowerClearRequest$MH();
        try {
            return (int)mh$.invokeExact(PowerRequest, RequestType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFileCompletionNotificationModes$MH() {
        return RuntimeHelper.requireNonNull(constants$768.const$4,"SetFileCompletionNotificationModes");
    }
    /**
     * {@snippet :
     * BOOL SetFileCompletionNotificationModes(HANDLE FileHandle, UCHAR Flags);
     * }
     */
    public static int SetFileCompletionNotificationModes(MemorySegment FileHandle, byte Flags) {
        var mh$ = SetFileCompletionNotificationModes$MH();
        try {
            return (int)mh$.invokeExact(FileHandle, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Wow64GetThreadSelectorEntry$MH() {
        return RuntimeHelper.requireNonNull(constants$768.const$5,"Wow64GetThreadSelectorEntry");
    }
    /**
     * {@snippet :
     * BOOL Wow64GetThreadSelectorEntry(HANDLE hThread, DWORD dwSelector, PWOW64_LDT_ENTRY lpSelectorEntry);
     * }
     */
    public static int Wow64GetThreadSelectorEntry(MemorySegment hThread, int dwSelector, MemorySegment lpSelectorEntry) {
        var mh$ = Wow64GetThreadSelectorEntry$MH();
        try {
            return (int)mh$.invokeExact(hThread, dwSelector, lpSelectorEntry);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DebugSetProcessKillOnExit$MH() {
        return RuntimeHelper.requireNonNull(constants$769.const$0,"DebugSetProcessKillOnExit");
    }
    /**
     * {@snippet :
     * BOOL DebugSetProcessKillOnExit(BOOL KillOnExit);
     * }
     */
    public static int DebugSetProcessKillOnExit(int KillOnExit) {
        var mh$ = DebugSetProcessKillOnExit$MH();
        try {
            return (int)mh$.invokeExact(KillOnExit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DebugBreakProcess$MH() {
        return RuntimeHelper.requireNonNull(constants$769.const$1,"DebugBreakProcess");
    }
    /**
     * {@snippet :
     * BOOL DebugBreakProcess(HANDLE Process);
     * }
     */
    public static int DebugBreakProcess(MemorySegment Process) {
        var mh$ = DebugBreakProcess$MH();
        try {
            return (int)mh$.invokeExact(Process);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PulseEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$769.const$2,"PulseEvent");
    }
    /**
     * {@snippet :
     * BOOL PulseEvent(HANDLE hEvent);
     * }
     */
    public static int PulseEvent(MemorySegment hEvent) {
        var mh$ = PulseEvent$MH();
        try {
            return (int)mh$.invokeExact(hEvent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GlobalDeleteAtom$MH() {
        return RuntimeHelper.requireNonNull(constants$769.const$3,"GlobalDeleteAtom");
    }
    /**
     * {@snippet :
     * ATOM GlobalDeleteAtom(ATOM nAtom);
     * }
     */
    public static short GlobalDeleteAtom(short nAtom) {
        var mh$ = GlobalDeleteAtom$MH();
        try {
            return (short)mh$.invokeExact(nAtom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitAtomTable$MH() {
        return RuntimeHelper.requireNonNull(constants$769.const$4,"InitAtomTable");
    }
    /**
     * {@snippet :
     * BOOL InitAtomTable(DWORD nSize);
     * }
     */
    public static int InitAtomTable(int nSize) {
        var mh$ = InitAtomTable$MH();
        try {
            return (int)mh$.invokeExact(nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteAtom$MH() {
        return RuntimeHelper.requireNonNull(constants$769.const$5,"DeleteAtom");
    }
    /**
     * {@snippet :
     * ATOM DeleteAtom(ATOM nAtom);
     * }
     */
    public static short DeleteAtom(short nAtom) {
        var mh$ = DeleteAtom$MH();
        try {
            return (short)mh$.invokeExact(nAtom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetHandleCount$MH() {
        return RuntimeHelper.requireNonNull(constants$770.const$0,"SetHandleCount");
    }
    /**
     * {@snippet :
     * UINT SetHandleCount(UINT uNumber);
     * }
     */
    public static int SetHandleCount(int uNumber) {
        var mh$ = SetHandleCount$MH();
        try {
            return (int)mh$.invokeExact(uNumber);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RequestDeviceWakeup$MH() {
        return RuntimeHelper.requireNonNull(constants$770.const$1,"RequestDeviceWakeup");
    }
    /**
     * {@snippet :
     * BOOL RequestDeviceWakeup(HANDLE hDevice);
     * }
     */
    public static int RequestDeviceWakeup(MemorySegment hDevice) {
        var mh$ = RequestDeviceWakeup$MH();
        try {
            return (int)mh$.invokeExact(hDevice);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CancelDeviceWakeupRequest$MH() {
        return RuntimeHelper.requireNonNull(constants$770.const$2,"CancelDeviceWakeupRequest");
    }
    /**
     * {@snippet :
     * BOOL CancelDeviceWakeupRequest(HANDLE hDevice);
     * }
     */
    public static int CancelDeviceWakeupRequest(MemorySegment hDevice) {
        var mh$ = CancelDeviceWakeupRequest$MH();
        try {
            return (int)mh$.invokeExact(hDevice);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDevicePowerState$MH() {
        return RuntimeHelper.requireNonNull(constants$770.const$3,"GetDevicePowerState");
    }
    /**
     * {@snippet :
     * BOOL GetDevicePowerState(HANDLE hDevice, BOOL* pfOn);
     * }
     */
    public static int GetDevicePowerState(MemorySegment hDevice, MemorySegment pfOn) {
        var mh$ = GetDevicePowerState$MH();
        try {
            return (int)mh$.invokeExact(hDevice, pfOn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetMessageWaitingIndicator$MH() {
        return RuntimeHelper.requireNonNull(constants$770.const$4,"SetMessageWaitingIndicator");
    }
    /**
     * {@snippet :
     * BOOL SetMessageWaitingIndicator(HANDLE hMsgIndicator, ULONG ulMsgCount);
     * }
     */
    public static int SetMessageWaitingIndicator(MemorySegment hMsgIndicator, int ulMsgCount) {
        var mh$ = SetMessageWaitingIndicator$MH();
        try {
            return (int)mh$.invokeExact(hMsgIndicator, ulMsgCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFileShortNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$770.const$5,"SetFileShortNameA");
    }
    /**
     * {@snippet :
     * BOOL SetFileShortNameA(HANDLE hFile, LPCSTR lpShortName);
     * }
     */
    public static int SetFileShortNameA(MemorySegment hFile, MemorySegment lpShortName) {
        var mh$ = SetFileShortNameA$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpShortName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFileShortNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$771.const$0,"SetFileShortNameW");
    }
    /**
     * {@snippet :
     * BOOL SetFileShortNameW(HANDLE hFile, LPCWSTR lpShortName);
     * }
     */
    public static int SetFileShortNameW(MemorySegment hFile, MemorySegment lpShortName) {
        var mh$ = SetFileShortNameW$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpShortName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadModule$MH() {
        return RuntimeHelper.requireNonNull(constants$771.const$1,"LoadModule");
    }
    /**
     * {@snippet :
     * DWORD LoadModule(LPCSTR lpModuleName, LPVOID lpParameterBlock);
     * }
     */
    public static int LoadModule(MemorySegment lpModuleName, MemorySegment lpParameterBlock) {
        var mh$ = LoadModule$MH();
        try {
            return (int)mh$.invokeExact(lpModuleName, lpParameterBlock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WinExec$MH() {
        return RuntimeHelper.requireNonNull(constants$771.const$2,"WinExec");
    }
    /**
     * {@snippet :
     * UINT WinExec(LPCSTR lpCmdLine, UINT uCmdShow);
     * }
     */
    public static int WinExec(MemorySegment lpCmdLine, int uCmdShow) {
        var mh$ = WinExec$MH();
        try {
            return (int)mh$.invokeExact(lpCmdLine, uCmdShow);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ClearCommBreak$MH() {
        return RuntimeHelper.requireNonNull(constants$771.const$3,"ClearCommBreak");
    }
    /**
     * {@snippet :
     * BOOL ClearCommBreak(HANDLE hFile);
     * }
     */
    public static int ClearCommBreak(MemorySegment hFile) {
        var mh$ = ClearCommBreak$MH();
        try {
            return (int)mh$.invokeExact(hFile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ClearCommError$MH() {
        return RuntimeHelper.requireNonNull(constants$771.const$4,"ClearCommError");
    }
    /**
     * {@snippet :
     * BOOL ClearCommError(HANDLE hFile, LPDWORD lpErrors, LPCOMSTAT lpStat);
     * }
     */
    public static int ClearCommError(MemorySegment hFile, MemorySegment lpErrors, MemorySegment lpStat) {
        var mh$ = ClearCommError$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpErrors, lpStat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetupComm$MH() {
        return RuntimeHelper.requireNonNull(constants$771.const$5,"SetupComm");
    }
    /**
     * {@snippet :
     * BOOL SetupComm(HANDLE hFile, DWORD dwInQueue, DWORD dwOutQueue);
     * }
     */
    public static int SetupComm(MemorySegment hFile, int dwInQueue, int dwOutQueue) {
        var mh$ = SetupComm$MH();
        try {
            return (int)mh$.invokeExact(hFile, dwInQueue, dwOutQueue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EscapeCommFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$772.const$0,"EscapeCommFunction");
    }
    /**
     * {@snippet :
     * BOOL EscapeCommFunction(HANDLE hFile, DWORD dwFunc);
     * }
     */
    public static int EscapeCommFunction(MemorySegment hFile, int dwFunc) {
        var mh$ = EscapeCommFunction$MH();
        try {
            return (int)mh$.invokeExact(hFile, dwFunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCommConfig$MH() {
        return RuntimeHelper.requireNonNull(constants$772.const$1,"GetCommConfig");
    }
    /**
     * {@snippet :
     * BOOL GetCommConfig(HANDLE hCommDev, LPCOMMCONFIG lpCC, LPDWORD lpdwSize);
     * }
     */
    public static int GetCommConfig(MemorySegment hCommDev, MemorySegment lpCC, MemorySegment lpdwSize) {
        var mh$ = GetCommConfig$MH();
        try {
            return (int)mh$.invokeExact(hCommDev, lpCC, lpdwSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCommMask$MH() {
        return RuntimeHelper.requireNonNull(constants$772.const$2,"GetCommMask");
    }
    /**
     * {@snippet :
     * BOOL GetCommMask(HANDLE hFile, LPDWORD lpEvtMask);
     * }
     */
    public static int GetCommMask(MemorySegment hFile, MemorySegment lpEvtMask) {
        var mh$ = GetCommMask$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpEvtMask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCommProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$772.const$3,"GetCommProperties");
    }
    /**
     * {@snippet :
     * BOOL GetCommProperties(HANDLE hFile, LPCOMMPROP lpCommProp);
     * }
     */
    public static int GetCommProperties(MemorySegment hFile, MemorySegment lpCommProp) {
        var mh$ = GetCommProperties$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpCommProp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCommModemStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$772.const$4,"GetCommModemStatus");
    }
    /**
     * {@snippet :
     * BOOL GetCommModemStatus(HANDLE hFile, LPDWORD lpModemStat);
     * }
     */
    public static int GetCommModemStatus(MemorySegment hFile, MemorySegment lpModemStat) {
        var mh$ = GetCommModemStatus$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpModemStat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCommState$MH() {
        return RuntimeHelper.requireNonNull(constants$772.const$5,"GetCommState");
    }
    /**
     * {@snippet :
     * BOOL GetCommState(HANDLE hFile, LPDCB lpDCB);
     * }
     */
    public static int GetCommState(MemorySegment hFile, MemorySegment lpDCB) {
        var mh$ = GetCommState$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpDCB);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCommTimeouts$MH() {
        return RuntimeHelper.requireNonNull(constants$773.const$0,"GetCommTimeouts");
    }
    /**
     * {@snippet :
     * BOOL GetCommTimeouts(HANDLE hFile, LPCOMMTIMEOUTS lpCommTimeouts);
     * }
     */
    public static int GetCommTimeouts(MemorySegment hFile, MemorySegment lpCommTimeouts) {
        var mh$ = GetCommTimeouts$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpCommTimeouts);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PurgeComm$MH() {
        return RuntimeHelper.requireNonNull(constants$773.const$1,"PurgeComm");
    }
    /**
     * {@snippet :
     * BOOL PurgeComm(HANDLE hFile, DWORD dwFlags);
     * }
     */
    public static int PurgeComm(MemorySegment hFile, int dwFlags) {
        var mh$ = PurgeComm$MH();
        try {
            return (int)mh$.invokeExact(hFile, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetCommBreak$MH() {
        return RuntimeHelper.requireNonNull(constants$773.const$2,"SetCommBreak");
    }
    /**
     * {@snippet :
     * BOOL SetCommBreak(HANDLE hFile);
     * }
     */
    public static int SetCommBreak(MemorySegment hFile) {
        var mh$ = SetCommBreak$MH();
        try {
            return (int)mh$.invokeExact(hFile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetCommConfig$MH() {
        return RuntimeHelper.requireNonNull(constants$773.const$3,"SetCommConfig");
    }
    /**
     * {@snippet :
     * BOOL SetCommConfig(HANDLE hCommDev, LPCOMMCONFIG lpCC, DWORD dwSize);
     * }
     */
    public static int SetCommConfig(MemorySegment hCommDev, MemorySegment lpCC, int dwSize) {
        var mh$ = SetCommConfig$MH();
        try {
            return (int)mh$.invokeExact(hCommDev, lpCC, dwSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetCommMask$MH() {
        return RuntimeHelper.requireNonNull(constants$773.const$4,"SetCommMask");
    }
    /**
     * {@snippet :
     * BOOL SetCommMask(HANDLE hFile, DWORD dwEvtMask);
     * }
     */
    public static int SetCommMask(MemorySegment hFile, int dwEvtMask) {
        var mh$ = SetCommMask$MH();
        try {
            return (int)mh$.invokeExact(hFile, dwEvtMask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetCommState$MH() {
        return RuntimeHelper.requireNonNull(constants$773.const$5,"SetCommState");
    }
    /**
     * {@snippet :
     * BOOL SetCommState(HANDLE hFile, LPDCB lpDCB);
     * }
     */
    public static int SetCommState(MemorySegment hFile, MemorySegment lpDCB) {
        var mh$ = SetCommState$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpDCB);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetCommTimeouts$MH() {
        return RuntimeHelper.requireNonNull(constants$774.const$0,"SetCommTimeouts");
    }
    /**
     * {@snippet :
     * BOOL SetCommTimeouts(HANDLE hFile, LPCOMMTIMEOUTS lpCommTimeouts);
     * }
     */
    public static int SetCommTimeouts(MemorySegment hFile, MemorySegment lpCommTimeouts) {
        var mh$ = SetCommTimeouts$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpCommTimeouts);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TransmitCommChar$MH() {
        return RuntimeHelper.requireNonNull(constants$774.const$1,"TransmitCommChar");
    }
    /**
     * {@snippet :
     * BOOL TransmitCommChar(HANDLE hFile, char cChar);
     * }
     */
    public static int TransmitCommChar(MemorySegment hFile, byte cChar) {
        var mh$ = TransmitCommChar$MH();
        try {
            return (int)mh$.invokeExact(hFile, cChar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WaitCommEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$774.const$2,"WaitCommEvent");
    }
    /**
     * {@snippet :
     * BOOL WaitCommEvent(HANDLE hFile, LPDWORD lpEvtMask, LPOVERLAPPED lpOverlapped);
     * }
     */
    public static int WaitCommEvent(MemorySegment hFile, MemorySegment lpEvtMask, MemorySegment lpOverlapped) {
        var mh$ = WaitCommEvent$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpEvtMask, lpOverlapped);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenCommPort$MH() {
        return RuntimeHelper.requireNonNull(constants$774.const$3,"OpenCommPort");
    }
    /**
     * {@snippet :
     * HANDLE OpenCommPort(ULONG uPortNumber, DWORD dwDesiredAccess, DWORD dwFlagsAndAttributes);
     * }
     */
    public static MemorySegment OpenCommPort(int uPortNumber, int dwDesiredAccess, int dwFlagsAndAttributes) {
        var mh$ = OpenCommPort$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(uPortNumber, dwDesiredAccess, dwFlagsAndAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCommPorts$MH() {
        return RuntimeHelper.requireNonNull(constants$774.const$4,"GetCommPorts");
    }
    /**
     * {@snippet :
     * ULONG GetCommPorts(PULONG lpPortNumbers, ULONG uPortNumbersCount, PULONG puPortNumbersFound);
     * }
     */
    public static int GetCommPorts(MemorySegment lpPortNumbers, int uPortNumbersCount, MemorySegment puPortNumbersFound) {
        var mh$ = GetCommPorts$MH();
        try {
            return (int)mh$.invokeExact(lpPortNumbers, uPortNumbersCount, puPortNumbersFound);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetTapePosition$MH() {
        return RuntimeHelper.requireNonNull(constants$774.const$6,"SetTapePosition");
    }
    /**
     * {@snippet :
     * DWORD SetTapePosition(HANDLE hDevice, DWORD dwPositionMethod, DWORD dwPartition, DWORD dwOffsetLow, DWORD dwOffsetHigh, BOOL bImmediate);
     * }
     */
    public static int SetTapePosition(MemorySegment hDevice, int dwPositionMethod, int dwPartition, int dwOffsetLow, int dwOffsetHigh, int bImmediate) {
        var mh$ = SetTapePosition$MH();
        try {
            return (int)mh$.invokeExact(hDevice, dwPositionMethod, dwPartition, dwOffsetLow, dwOffsetHigh, bImmediate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTapePosition$MH() {
        return RuntimeHelper.requireNonNull(constants$775.const$1,"GetTapePosition");
    }
    /**
     * {@snippet :
     * DWORD GetTapePosition(HANDLE hDevice, DWORD dwPositionType, LPDWORD lpdwPartition, LPDWORD lpdwOffsetLow, LPDWORD lpdwOffsetHigh);
     * }
     */
    public static int GetTapePosition(MemorySegment hDevice, int dwPositionType, MemorySegment lpdwPartition, MemorySegment lpdwOffsetLow, MemorySegment lpdwOffsetHigh) {
        var mh$ = GetTapePosition$MH();
        try {
            return (int)mh$.invokeExact(hDevice, dwPositionType, lpdwPartition, lpdwOffsetLow, lpdwOffsetHigh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PrepareTape$MH() {
        return RuntimeHelper.requireNonNull(constants$775.const$2,"PrepareTape");
    }
    /**
     * {@snippet :
     * DWORD PrepareTape(HANDLE hDevice, DWORD dwOperation, BOOL bImmediate);
     * }
     */
    public static int PrepareTape(MemorySegment hDevice, int dwOperation, int bImmediate) {
        var mh$ = PrepareTape$MH();
        try {
            return (int)mh$.invokeExact(hDevice, dwOperation, bImmediate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EraseTape$MH() {
        return RuntimeHelper.requireNonNull(constants$775.const$3,"EraseTape");
    }
    /**
     * {@snippet :
     * DWORD EraseTape(HANDLE hDevice, DWORD dwEraseType, BOOL bImmediate);
     * }
     */
    public static int EraseTape(MemorySegment hDevice, int dwEraseType, int bImmediate) {
        var mh$ = EraseTape$MH();
        try {
            return (int)mh$.invokeExact(hDevice, dwEraseType, bImmediate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateTapePartition$MH() {
        return RuntimeHelper.requireNonNull(constants$775.const$5,"CreateTapePartition");
    }
    /**
     * {@snippet :
     * DWORD CreateTapePartition(HANDLE hDevice, DWORD dwPartitionMethod, DWORD dwCount, DWORD dwSize);
     * }
     */
    public static int CreateTapePartition(MemorySegment hDevice, int dwPartitionMethod, int dwCount, int dwSize) {
        var mh$ = CreateTapePartition$MH();
        try {
            return (int)mh$.invokeExact(hDevice, dwPartitionMethod, dwCount, dwSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteTapemark$MH() {
        return RuntimeHelper.requireNonNull(constants$776.const$0,"WriteTapemark");
    }
    /**
     * {@snippet :
     * DWORD WriteTapemark(HANDLE hDevice, DWORD dwTapemarkType, DWORD dwTapemarkCount, BOOL bImmediate);
     * }
     */
    public static int WriteTapemark(MemorySegment hDevice, int dwTapemarkType, int dwTapemarkCount, int bImmediate) {
        var mh$ = WriteTapemark$MH();
        try {
            return (int)mh$.invokeExact(hDevice, dwTapemarkType, dwTapemarkCount, bImmediate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTapeStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$776.const$1,"GetTapeStatus");
    }
    /**
     * {@snippet :
     * DWORD GetTapeStatus(HANDLE hDevice);
     * }
     */
    public static int GetTapeStatus(MemorySegment hDevice) {
        var mh$ = GetTapeStatus$MH();
        try {
            return (int)mh$.invokeExact(hDevice);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTapeParameters$MH() {
        return RuntimeHelper.requireNonNull(constants$776.const$2,"GetTapeParameters");
    }
    /**
     * {@snippet :
     * DWORD GetTapeParameters(HANDLE hDevice, DWORD dwOperation, LPDWORD lpdwSize, LPVOID lpTapeInformation);
     * }
     */
    public static int GetTapeParameters(MemorySegment hDevice, int dwOperation, MemorySegment lpdwSize, MemorySegment lpTapeInformation) {
        var mh$ = GetTapeParameters$MH();
        try {
            return (int)mh$.invokeExact(hDevice, dwOperation, lpdwSize, lpTapeInformation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetTapeParameters$MH() {
        return RuntimeHelper.requireNonNull(constants$776.const$3,"SetTapeParameters");
    }
    /**
     * {@snippet :
     * DWORD SetTapeParameters(HANDLE hDevice, DWORD dwOperation, LPVOID lpTapeInformation);
     * }
     */
    public static int SetTapeParameters(MemorySegment hDevice, int dwOperation, MemorySegment lpTapeInformation) {
        var mh$ = SetTapeParameters$MH();
        try {
            return (int)mh$.invokeExact(hDevice, dwOperation, lpTapeInformation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MulDiv$MH() {
        return RuntimeHelper.requireNonNull(constants$776.const$4,"MulDiv");
    }
    /**
     * {@snippet :
     * int MulDiv(int nNumber, int nNumerator, int nDenominator);
     * }
     */
    public static int MulDiv(int nNumber, int nNumerator, int nDenominator) {
        var mh$ = MulDiv$MH();
        try {
            return (int)mh$.invokeExact(nNumber, nNumerator, nDenominator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum _DEP_SYSTEM_POLICY_TYPE.DEPPolicyAlwaysOff = 0;
     * }
     */
    public static int DEPPolicyAlwaysOff() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum _DEP_SYSTEM_POLICY_TYPE.DEPPolicyAlwaysOn = 1;
     * }
     */
    public static int DEPPolicyAlwaysOn() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum _DEP_SYSTEM_POLICY_TYPE.DEPPolicyOptIn = 2;
     * }
     */
    public static int DEPPolicyOptIn() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum _DEP_SYSTEM_POLICY_TYPE.DEPPolicyOptOut = 3;
     * }
     */
    public static int DEPPolicyOptOut() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum _DEP_SYSTEM_POLICY_TYPE.DEPTotalPolicyCount = 4;
     * }
     */
    public static int DEPTotalPolicyCount() {
        return (int)4L;
    }
    public static MethodHandle GetSystemDEPPolicy$MH() {
        return RuntimeHelper.requireNonNull(constants$776.const$5,"GetSystemDEPPolicy");
    }
    /**
     * {@snippet :
     * DEP_SYSTEM_POLICY_TYPE GetSystemDEPPolicy();
     * }
     */
    public static int GetSystemDEPPolicy() {
        var mh$ = GetSystemDEPPolicy$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemRegistryQuota$MH() {
        return RuntimeHelper.requireNonNull(constants$777.const$0,"GetSystemRegistryQuota");
    }
    /**
     * {@snippet :
     * BOOL GetSystemRegistryQuota(PDWORD pdwQuotaAllowed, PDWORD pdwQuotaUsed);
     * }
     */
    public static int GetSystemRegistryQuota(MemorySegment pdwQuotaAllowed, MemorySegment pdwQuotaUsed) {
        var mh$ = GetSystemRegistryQuota$MH();
        try {
            return (int)mh$.invokeExact(pdwQuotaAllowed, pdwQuotaUsed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FileTimeToDosDateTime$MH() {
        return RuntimeHelper.requireNonNull(constants$777.const$1,"FileTimeToDosDateTime");
    }
    /**
     * {@snippet :
     * BOOL FileTimeToDosDateTime(const FILETIME* lpFileTime, LPWORD lpFatDate, LPWORD lpFatTime);
     * }
     */
    public static int FileTimeToDosDateTime(MemorySegment lpFileTime, MemorySegment lpFatDate, MemorySegment lpFatTime) {
        var mh$ = FileTimeToDosDateTime$MH();
        try {
            return (int)mh$.invokeExact(lpFileTime, lpFatDate, lpFatTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DosDateTimeToFileTime$MH() {
        return RuntimeHelper.requireNonNull(constants$777.const$2,"DosDateTimeToFileTime");
    }
    /**
     * {@snippet :
     * BOOL DosDateTimeToFileTime(WORD wFatDate, WORD wFatTime, LPFILETIME lpFileTime);
     * }
     */
    public static int DosDateTimeToFileTime(short wFatDate, short wFatTime, MemorySegment lpFileTime) {
        var mh$ = DosDateTimeToFileTime$MH();
        try {
            return (int)mh$.invokeExact(wFatDate, wFatTime, lpFileTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FormatMessageA$MH() {
        return RuntimeHelper.requireNonNull(constants$777.const$4,"FormatMessageA");
    }
    /**
     * {@snippet :
     * DWORD FormatMessageA(DWORD dwFlags, LPCVOID lpSource, DWORD dwMessageId, DWORD dwLanguageId, LPSTR lpBuffer, DWORD nSize, va_list* Arguments);
     * }
     */
    public static int FormatMessageA(int dwFlags, MemorySegment lpSource, int dwMessageId, int dwLanguageId, MemorySegment lpBuffer, int nSize, MemorySegment Arguments) {
        var mh$ = FormatMessageA$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, lpSource, dwMessageId, dwLanguageId, lpBuffer, nSize, Arguments);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FormatMessageW$MH() {
        return RuntimeHelper.requireNonNull(constants$777.const$5,"FormatMessageW");
    }
    /**
     * {@snippet :
     * DWORD FormatMessageW(DWORD dwFlags, LPCVOID lpSource, DWORD dwMessageId, DWORD dwLanguageId, LPWSTR lpBuffer, DWORD nSize, va_list* Arguments);
     * }
     */
    public static int FormatMessageW(int dwFlags, MemorySegment lpSource, int dwMessageId, int dwLanguageId, MemorySegment lpBuffer, int nSize, MemorySegment Arguments) {
        var mh$ = FormatMessageW$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, lpSource, dwMessageId, dwLanguageId, lpBuffer, nSize, Arguments);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateMailslotA$MH() {
        return RuntimeHelper.requireNonNull(constants$778.const$0,"CreateMailslotA");
    }
    /**
     * {@snippet :
     * HANDLE CreateMailslotA(LPCSTR lpName, DWORD nMaxMessageSize, DWORD lReadTimeout, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
     * }
     */
    public static MemorySegment CreateMailslotA(MemorySegment lpName, int nMaxMessageSize, int lReadTimeout, MemorySegment lpSecurityAttributes) {
        var mh$ = CreateMailslotA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpName, nMaxMessageSize, lReadTimeout, lpSecurityAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateMailslotW$MH() {
        return RuntimeHelper.requireNonNull(constants$778.const$1,"CreateMailslotW");
    }
    /**
     * {@snippet :
     * HANDLE CreateMailslotW(LPCWSTR lpName, DWORD nMaxMessageSize, DWORD lReadTimeout, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
     * }
     */
    public static MemorySegment CreateMailslotW(MemorySegment lpName, int nMaxMessageSize, int lReadTimeout, MemorySegment lpSecurityAttributes) {
        var mh$ = CreateMailslotW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpName, nMaxMessageSize, lReadTimeout, lpSecurityAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMailslotInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$778.const$2,"GetMailslotInfo");
    }
    /**
     * {@snippet :
     * BOOL GetMailslotInfo(HANDLE hMailslot, LPDWORD lpMaxMessageSize, LPDWORD lpNextSize, LPDWORD lpMessageCount, LPDWORD lpReadTimeout);
     * }
     */
    public static int GetMailslotInfo(MemorySegment hMailslot, MemorySegment lpMaxMessageSize, MemorySegment lpNextSize, MemorySegment lpMessageCount, MemorySegment lpReadTimeout) {
        var mh$ = GetMailslotInfo$MH();
        try {
            return (int)mh$.invokeExact(hMailslot, lpMaxMessageSize, lpNextSize, lpMessageCount, lpReadTimeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetMailslotInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$778.const$3,"SetMailslotInfo");
    }
    /**
     * {@snippet :
     * BOOL SetMailslotInfo(HANDLE hMailslot, DWORD lReadTimeout);
     * }
     */
    public static int SetMailslotInfo(MemorySegment hMailslot, int lReadTimeout) {
        var mh$ = SetMailslotInfo$MH();
        try {
            return (int)mh$.invokeExact(hMailslot, lReadTimeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EncryptFileA$MH() {
        return RuntimeHelper.requireNonNull(constants$778.const$4,"EncryptFileA");
    }
    /**
     * {@snippet :
     * BOOL EncryptFileA(LPCSTR lpFileName);
     * }
     */
    public static int EncryptFileA(MemorySegment lpFileName) {
        var mh$ = EncryptFileA$MH();
        try {
            return (int)mh$.invokeExact(lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EncryptFileW$MH() {
        return RuntimeHelper.requireNonNull(constants$778.const$5,"EncryptFileW");
    }
    /**
     * {@snippet :
     * BOOL EncryptFileW(LPCWSTR lpFileName);
     * }
     */
    public static int EncryptFileW(MemorySegment lpFileName) {
        var mh$ = EncryptFileW$MH();
        try {
            return (int)mh$.invokeExact(lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DecryptFileA$MH() {
        return RuntimeHelper.requireNonNull(constants$779.const$0,"DecryptFileA");
    }
    /**
     * {@snippet :
     * BOOL DecryptFileA(LPCSTR lpFileName, DWORD dwReserved);
     * }
     */
    public static int DecryptFileA(MemorySegment lpFileName, int dwReserved) {
        var mh$ = DecryptFileA$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, dwReserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DecryptFileW$MH() {
        return RuntimeHelper.requireNonNull(constants$779.const$1,"DecryptFileW");
    }
    /**
     * {@snippet :
     * BOOL DecryptFileW(LPCWSTR lpFileName, DWORD dwReserved);
     * }
     */
    public static int DecryptFileW(MemorySegment lpFileName, int dwReserved) {
        var mh$ = DecryptFileW$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, dwReserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FileEncryptionStatusA$MH() {
        return RuntimeHelper.requireNonNull(constants$779.const$2,"FileEncryptionStatusA");
    }
    /**
     * {@snippet :
     * BOOL FileEncryptionStatusA(LPCSTR lpFileName, LPDWORD lpStatus);
     * }
     */
    public static int FileEncryptionStatusA(MemorySegment lpFileName, MemorySegment lpStatus) {
        var mh$ = FileEncryptionStatusA$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, lpStatus);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FileEncryptionStatusW$MH() {
        return RuntimeHelper.requireNonNull(constants$779.const$3,"FileEncryptionStatusW");
    }
    /**
     * {@snippet :
     * BOOL FileEncryptionStatusW(LPCWSTR lpFileName, LPDWORD lpStatus);
     * }
     */
    public static int FileEncryptionStatusW(MemorySegment lpFileName, MemorySegment lpStatus) {
        var mh$ = FileEncryptionStatusW$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, lpStatus);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenEncryptedFileRawA$MH() {
        return RuntimeHelper.requireNonNull(constants$780.const$1,"OpenEncryptedFileRawA");
    }
    /**
     * {@snippet :
     * DWORD OpenEncryptedFileRawA(LPCSTR lpFileName, ULONG ulFlags, PVOID* pvContext);
     * }
     */
    public static int OpenEncryptedFileRawA(MemorySegment lpFileName, int ulFlags, MemorySegment pvContext) {
        var mh$ = OpenEncryptedFileRawA$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, ulFlags, pvContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenEncryptedFileRawW$MH() {
        return RuntimeHelper.requireNonNull(constants$780.const$2,"OpenEncryptedFileRawW");
    }
    /**
     * {@snippet :
     * DWORD OpenEncryptedFileRawW(LPCWSTR lpFileName, ULONG ulFlags, PVOID* pvContext);
     * }
     */
    public static int OpenEncryptedFileRawW(MemorySegment lpFileName, int ulFlags, MemorySegment pvContext) {
        var mh$ = OpenEncryptedFileRawW$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, ulFlags, pvContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadEncryptedFileRaw$MH() {
        return RuntimeHelper.requireNonNull(constants$780.const$3,"ReadEncryptedFileRaw");
    }
    /**
     * {@snippet :
     * DWORD ReadEncryptedFileRaw(PFE_EXPORT_FUNC pfExportCallback, PVOID pvCallbackContext, PVOID pvContext);
     * }
     */
    public static int ReadEncryptedFileRaw(MemorySegment pfExportCallback, MemorySegment pvCallbackContext, MemorySegment pvContext) {
        var mh$ = ReadEncryptedFileRaw$MH();
        try {
            return (int)mh$.invokeExact(pfExportCallback, pvCallbackContext, pvContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteEncryptedFileRaw$MH() {
        return RuntimeHelper.requireNonNull(constants$780.const$4,"WriteEncryptedFileRaw");
    }
    /**
     * {@snippet :
     * DWORD WriteEncryptedFileRaw(PFE_IMPORT_FUNC pfImportCallback, PVOID pvCallbackContext, PVOID pvContext);
     * }
     */
    public static int WriteEncryptedFileRaw(MemorySegment pfImportCallback, MemorySegment pvCallbackContext, MemorySegment pvContext) {
        var mh$ = WriteEncryptedFileRaw$MH();
        try {
            return (int)mh$.invokeExact(pfImportCallback, pvCallbackContext, pvContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CloseEncryptedFileRaw$MH() {
        return RuntimeHelper.requireNonNull(constants$780.const$5,"CloseEncryptedFileRaw");
    }
    /**
     * {@snippet :
     * void CloseEncryptedFileRaw(PVOID pvContext);
     * }
     */
    public static void CloseEncryptedFileRaw(MemorySegment pvContext) {
        var mh$ = CloseEncryptedFileRaw$MH();
        try {
            mh$.invokeExact(pvContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lstrcmpA$MH() {
        return RuntimeHelper.requireNonNull(constants$781.const$0,"lstrcmpA");
    }
    /**
     * {@snippet :
     * int lstrcmpA(LPCSTR lpString1, LPCSTR lpString2);
     * }
     */
    public static int lstrcmpA(MemorySegment lpString1, MemorySegment lpString2) {
        var mh$ = lstrcmpA$MH();
        try {
            return (int)mh$.invokeExact(lpString1, lpString2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lstrcmpW$MH() {
        return RuntimeHelper.requireNonNull(constants$781.const$1,"lstrcmpW");
    }
    /**
     * {@snippet :
     * int lstrcmpW(LPCWSTR lpString1, LPCWSTR lpString2);
     * }
     */
    public static int lstrcmpW(MemorySegment lpString1, MemorySegment lpString2) {
        var mh$ = lstrcmpW$MH();
        try {
            return (int)mh$.invokeExact(lpString1, lpString2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lstrcmpiA$MH() {
        return RuntimeHelper.requireNonNull(constants$781.const$2,"lstrcmpiA");
    }
    /**
     * {@snippet :
     * int lstrcmpiA(LPCSTR lpString1, LPCSTR lpString2);
     * }
     */
    public static int lstrcmpiA(MemorySegment lpString1, MemorySegment lpString2) {
        var mh$ = lstrcmpiA$MH();
        try {
            return (int)mh$.invokeExact(lpString1, lpString2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lstrcmpiW$MH() {
        return RuntimeHelper.requireNonNull(constants$781.const$3,"lstrcmpiW");
    }
    /**
     * {@snippet :
     * int lstrcmpiW(LPCWSTR lpString1, LPCWSTR lpString2);
     * }
     */
    public static int lstrcmpiW(MemorySegment lpString1, MemorySegment lpString2) {
        var mh$ = lstrcmpiW$MH();
        try {
            return (int)mh$.invokeExact(lpString1, lpString2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lstrcpynA$MH() {
        return RuntimeHelper.requireNonNull(constants$781.const$4,"lstrcpynA");
    }
    /**
     * {@snippet :
     * LPSTR lstrcpynA(LPSTR lpString1, LPCSTR lpString2, int iMaxLength);
     * }
     */
    public static MemorySegment lstrcpynA(MemorySegment lpString1, MemorySegment lpString2, int iMaxLength) {
        var mh$ = lstrcpynA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpString1, lpString2, iMaxLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lstrcpynW$MH() {
        return RuntimeHelper.requireNonNull(constants$781.const$5,"lstrcpynW");
    }
    /**
     * {@snippet :
     * LPWSTR lstrcpynW(LPWSTR lpString1, LPCWSTR lpString2, int iMaxLength);
     * }
     */
    public static MemorySegment lstrcpynW(MemorySegment lpString1, MemorySegment lpString2, int iMaxLength) {
        var mh$ = lstrcpynW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpString1, lpString2, iMaxLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lstrcpyA$MH() {
        return RuntimeHelper.requireNonNull(constants$782.const$0,"lstrcpyA");
    }
    /**
     * {@snippet :
     * LPSTR lstrcpyA(LPSTR lpString1, LPCSTR lpString2);
     * }
     */
    public static MemorySegment lstrcpyA(MemorySegment lpString1, MemorySegment lpString2) {
        var mh$ = lstrcpyA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpString1, lpString2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lstrcpyW$MH() {
        return RuntimeHelper.requireNonNull(constants$782.const$1,"lstrcpyW");
    }
    /**
     * {@snippet :
     * LPWSTR lstrcpyW(LPWSTR lpString1, LPCWSTR lpString2);
     * }
     */
    public static MemorySegment lstrcpyW(MemorySegment lpString1, MemorySegment lpString2) {
        var mh$ = lstrcpyW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpString1, lpString2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lstrcatA$MH() {
        return RuntimeHelper.requireNonNull(constants$782.const$2,"lstrcatA");
    }
    /**
     * {@snippet :
     * LPSTR lstrcatA(LPSTR lpString1, LPCSTR lpString2);
     * }
     */
    public static MemorySegment lstrcatA(MemorySegment lpString1, MemorySegment lpString2) {
        var mh$ = lstrcatA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpString1, lpString2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lstrcatW$MH() {
        return RuntimeHelper.requireNonNull(constants$782.const$3,"lstrcatW");
    }
    /**
     * {@snippet :
     * LPWSTR lstrcatW(LPWSTR lpString1, LPCWSTR lpString2);
     * }
     */
    public static MemorySegment lstrcatW(MemorySegment lpString1, MemorySegment lpString2) {
        var mh$ = lstrcatW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpString1, lpString2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lstrlenA$MH() {
        return RuntimeHelper.requireNonNull(constants$782.const$4,"lstrlenA");
    }
    /**
     * {@snippet :
     * int lstrlenA(LPCSTR lpString);
     * }
     */
    public static int lstrlenA(MemorySegment lpString) {
        var mh$ = lstrlenA$MH();
        try {
            return (int)mh$.invokeExact(lpString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lstrlenW$MH() {
        return RuntimeHelper.requireNonNull(constants$782.const$5,"lstrlenW");
    }
    /**
     * {@snippet :
     * int lstrlenW(LPCWSTR lpString);
     * }
     */
    public static int lstrlenW(MemorySegment lpString) {
        var mh$ = lstrlenW$MH();
        try {
            return (int)mh$.invokeExact(lpString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenFile$MH() {
        return RuntimeHelper.requireNonNull(constants$783.const$0,"OpenFile");
    }
    /**
     * {@snippet :
     * HFILE OpenFile(LPCSTR lpFileName, LPOFSTRUCT lpReOpenBuff, UINT uStyle);
     * }
     */
    public static int OpenFile(MemorySegment lpFileName, MemorySegment lpReOpenBuff, int uStyle) {
        var mh$ = OpenFile$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, lpReOpenBuff, uStyle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _lopen$MH() {
        return RuntimeHelper.requireNonNull(constants$783.const$1,"_lopen");
    }
    /**
     * {@snippet :
     * HFILE _lopen(LPCSTR lpPathName, int iReadWrite);
     * }
     */
    public static int _lopen(MemorySegment lpPathName, int iReadWrite) {
        var mh$ = _lopen$MH();
        try {
            return (int)mh$.invokeExact(lpPathName, iReadWrite);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _lcreat$MH() {
        return RuntimeHelper.requireNonNull(constants$783.const$2,"_lcreat");
    }
    /**
     * {@snippet :
     * HFILE _lcreat(LPCSTR lpPathName, int iAttribute);
     * }
     */
    public static int _lcreat(MemorySegment lpPathName, int iAttribute) {
        var mh$ = _lcreat$MH();
        try {
            return (int)mh$.invokeExact(lpPathName, iAttribute);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _lread$MH() {
        return RuntimeHelper.requireNonNull(constants$783.const$3,"_lread");
    }
    /**
     * {@snippet :
     * UINT _lread(HFILE hFile, LPVOID lpBuffer, UINT uBytes);
     * }
     */
    public static int _lread(int hFile, MemorySegment lpBuffer, int uBytes) {
        var mh$ = _lread$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpBuffer, uBytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _lwrite$MH() {
        return RuntimeHelper.requireNonNull(constants$783.const$4,"_lwrite");
    }
    /**
     * {@snippet :
     * UINT _lwrite(HFILE hFile, LPCCH lpBuffer, UINT uBytes);
     * }
     */
    public static int _lwrite(int hFile, MemorySegment lpBuffer, int uBytes) {
        var mh$ = _lwrite$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpBuffer, uBytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _hread$MH() {
        return RuntimeHelper.requireNonNull(constants$783.const$5,"_hread");
    }
    /**
     * {@snippet :
     * long _hread(HFILE hFile, LPVOID lpBuffer, long lBytes);
     * }
     */
    public static int _hread(int hFile, MemorySegment lpBuffer, int lBytes) {
        var mh$ = _hread$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpBuffer, lBytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _hwrite$MH() {
        return RuntimeHelper.requireNonNull(constants$784.const$0,"_hwrite");
    }
    /**
     * {@snippet :
     * long _hwrite(HFILE hFile, LPCCH lpBuffer, long lBytes);
     * }
     */
    public static int _hwrite(int hFile, MemorySegment lpBuffer, int lBytes) {
        var mh$ = _hwrite$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpBuffer, lBytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _lclose$MH() {
        return RuntimeHelper.requireNonNull(constants$784.const$1,"_lclose");
    }
    /**
     * {@snippet :
     * HFILE _lclose(HFILE hFile);
     * }
     */
    public static int _lclose(int hFile) {
        var mh$ = _lclose$MH();
        try {
            return (int)mh$.invokeExact(hFile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _llseek$MH() {
        return RuntimeHelper.requireNonNull(constants$784.const$2,"_llseek");
    }
    /**
     * {@snippet :
     * LONG _llseek(HFILE hFile, LONG lOffset, int iOrigin);
     * }
     */
    public static int _llseek(int hFile, int lOffset, int iOrigin) {
        var mh$ = _llseek$MH();
        try {
            return (int)mh$.invokeExact(hFile, lOffset, iOrigin);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsTextUnicode$MH() {
        return RuntimeHelper.requireNonNull(constants$784.const$3,"IsTextUnicode");
    }
    /**
     * {@snippet :
     * BOOL IsTextUnicode(void* lpv, int iSize, LPINT lpiResult);
     * }
     */
    public static int IsTextUnicode(MemorySegment lpv, int iSize, MemorySegment lpiResult) {
        var mh$ = IsTextUnicode$MH();
        try {
            return (int)mh$.invokeExact(lpv, iSize, lpiResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BackupRead$MH() {
        return RuntimeHelper.requireNonNull(constants$784.const$5,"BackupRead");
    }
    /**
     * {@snippet :
     * BOOL BackupRead(HANDLE hFile, LPBYTE lpBuffer, DWORD nNumberOfBytesToRead, LPDWORD lpNumberOfBytesRead, BOOL bAbort, BOOL bProcessSecurity, LPVOID* lpContext);
     * }
     */
    public static int BackupRead(MemorySegment hFile, MemorySegment lpBuffer, int nNumberOfBytesToRead, MemorySegment lpNumberOfBytesRead, int bAbort, int bProcessSecurity, MemorySegment lpContext) {
        var mh$ = BackupRead$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpBuffer, nNumberOfBytesToRead, lpNumberOfBytesRead, bAbort, bProcessSecurity, lpContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BackupSeek$MH() {
        return RuntimeHelper.requireNonNull(constants$785.const$1,"BackupSeek");
    }
    /**
     * {@snippet :
     * BOOL BackupSeek(HANDLE hFile, DWORD dwLowBytesToSeek, DWORD dwHighBytesToSeek, LPDWORD lpdwLowByteSeeked, LPDWORD lpdwHighByteSeeked, LPVOID* lpContext);
     * }
     */
    public static int BackupSeek(MemorySegment hFile, int dwLowBytesToSeek, int dwHighBytesToSeek, MemorySegment lpdwLowByteSeeked, MemorySegment lpdwHighByteSeeked, MemorySegment lpContext) {
        var mh$ = BackupSeek$MH();
        try {
            return (int)mh$.invokeExact(hFile, dwLowBytesToSeek, dwHighBytesToSeek, lpdwLowByteSeeked, lpdwHighByteSeeked, lpContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BackupWrite$MH() {
        return RuntimeHelper.requireNonNull(constants$785.const$2,"BackupWrite");
    }
    /**
     * {@snippet :
     * BOOL BackupWrite(HANDLE hFile, LPBYTE lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, BOOL bAbort, BOOL bProcessSecurity, LPVOID* lpContext);
     * }
     */
    public static int BackupWrite(MemorySegment hFile, MemorySegment lpBuffer, int nNumberOfBytesToWrite, MemorySegment lpNumberOfBytesWritten, int bAbort, int bProcessSecurity, MemorySegment lpContext) {
        var mh$ = BackupWrite$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpBuffer, nNumberOfBytesToWrite, lpNumberOfBytesWritten, bAbort, bProcessSecurity, lpContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _WIN32_STREAM_ID* LPWIN32_STREAM_ID;
     * }
     */
    public static final AddressLayout LPWIN32_STREAM_ID = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _STARTUPINFOEXA* LPSTARTUPINFOEXA;
     * }
     */
    public static final AddressLayout LPSTARTUPINFOEXA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _STARTUPINFOEXW* LPSTARTUPINFOEXW;
     * }
     */
    public static final AddressLayout LPSTARTUPINFOEXW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _STARTUPINFOEXA* LPSTARTUPINFOEX;
     * }
     */
    public static final AddressLayout LPSTARTUPINFOEX = RuntimeHelper.POINTER;
    public static MethodHandle OpenMutexA$MH() {
        return RuntimeHelper.requireNonNull(constants$786.const$5,"OpenMutexA");
    }
    /**
     * {@snippet :
     * HANDLE OpenMutexA(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCSTR lpName);
     * }
     */
    public static MemorySegment OpenMutexA(int dwDesiredAccess, int bInheritHandle, MemorySegment lpName) {
        var mh$ = OpenMutexA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(dwDesiredAccess, bInheritHandle, lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateSemaphoreA$MH() {
        return RuntimeHelper.requireNonNull(constants$787.const$0,"CreateSemaphoreA");
    }
    /**
     * {@snippet :
     * HANDLE CreateSemaphoreA(LPSECURITY_ATTRIBUTES lpSemaphoreAttributes, LONG lInitialCount, LONG lMaximumCount, LPCSTR lpName);
     * }
     */
    public static MemorySegment CreateSemaphoreA(MemorySegment lpSemaphoreAttributes, int lInitialCount, int lMaximumCount, MemorySegment lpName) {
        var mh$ = CreateSemaphoreA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpSemaphoreAttributes, lInitialCount, lMaximumCount, lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenSemaphoreA$MH() {
        return RuntimeHelper.requireNonNull(constants$787.const$1,"OpenSemaphoreA");
    }
    /**
     * {@snippet :
     * HANDLE OpenSemaphoreA(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCSTR lpName);
     * }
     */
    public static MemorySegment OpenSemaphoreA(int dwDesiredAccess, int bInheritHandle, MemorySegment lpName) {
        var mh$ = OpenSemaphoreA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(dwDesiredAccess, bInheritHandle, lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateWaitableTimerA$MH() {
        return RuntimeHelper.requireNonNull(constants$787.const$2,"CreateWaitableTimerA");
    }
    /**
     * {@snippet :
     * HANDLE CreateWaitableTimerA(LPSECURITY_ATTRIBUTES lpTimerAttributes, BOOL bManualReset, LPCSTR lpTimerName);
     * }
     */
    public static MemorySegment CreateWaitableTimerA(MemorySegment lpTimerAttributes, int bManualReset, MemorySegment lpTimerName) {
        var mh$ = CreateWaitableTimerA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpTimerAttributes, bManualReset, lpTimerName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenWaitableTimerA$MH() {
        return RuntimeHelper.requireNonNull(constants$787.const$3,"OpenWaitableTimerA");
    }
    /**
     * {@snippet :
     * HANDLE OpenWaitableTimerA(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCSTR lpTimerName);
     * }
     */
    public static MemorySegment OpenWaitableTimerA(int dwDesiredAccess, int bInheritHandle, MemorySegment lpTimerName) {
        var mh$ = OpenWaitableTimerA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(dwDesiredAccess, bInheritHandle, lpTimerName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateSemaphoreExA$MH() {
        return RuntimeHelper.requireNonNull(constants$787.const$4,"CreateSemaphoreExA");
    }
    /**
     * {@snippet :
     * HANDLE CreateSemaphoreExA(LPSECURITY_ATTRIBUTES lpSemaphoreAttributes, LONG lInitialCount, LONG lMaximumCount, LPCSTR lpName, DWORD dwFlags, DWORD dwDesiredAccess);
     * }
     */
    public static MemorySegment CreateSemaphoreExA(MemorySegment lpSemaphoreAttributes, int lInitialCount, int lMaximumCount, MemorySegment lpName, int dwFlags, int dwDesiredAccess) {
        var mh$ = CreateSemaphoreExA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpSemaphoreAttributes, lInitialCount, lMaximumCount, lpName, dwFlags, dwDesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateWaitableTimerExA$MH() {
        return RuntimeHelper.requireNonNull(constants$787.const$5,"CreateWaitableTimerExA");
    }
    /**
     * {@snippet :
     * HANDLE CreateWaitableTimerExA(LPSECURITY_ATTRIBUTES lpTimerAttributes, LPCSTR lpTimerName, DWORD dwFlags, DWORD dwDesiredAccess);
     * }
     */
    public static MemorySegment CreateWaitableTimerExA(MemorySegment lpTimerAttributes, MemorySegment lpTimerName, int dwFlags, int dwDesiredAccess) {
        var mh$ = CreateWaitableTimerExA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpTimerAttributes, lpTimerName, dwFlags, dwDesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateFileMappingA$MH() {
        return RuntimeHelper.requireNonNull(constants$788.const$0,"CreateFileMappingA");
    }
    /**
     * {@snippet :
     * HANDLE CreateFileMappingA(HANDLE hFile, LPSECURITY_ATTRIBUTES lpFileMappingAttributes, DWORD flProtect, DWORD dwMaximumSizeHigh, DWORD dwMaximumSizeLow, LPCSTR lpName);
     * }
     */
    public static MemorySegment CreateFileMappingA(MemorySegment hFile, MemorySegment lpFileMappingAttributes, int flProtect, int dwMaximumSizeHigh, int dwMaximumSizeLow, MemorySegment lpName) {
        var mh$ = CreateFileMappingA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hFile, lpFileMappingAttributes, flProtect, dwMaximumSizeHigh, dwMaximumSizeLow, lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateFileMappingNumaA$MH() {
        return RuntimeHelper.requireNonNull(constants$788.const$1,"CreateFileMappingNumaA");
    }
    /**
     * {@snippet :
     * HANDLE CreateFileMappingNumaA(HANDLE hFile, LPSECURITY_ATTRIBUTES lpFileMappingAttributes, DWORD flProtect, DWORD dwMaximumSizeHigh, DWORD dwMaximumSizeLow, LPCSTR lpName, DWORD nndPreferred);
     * }
     */
    public static MemorySegment CreateFileMappingNumaA(MemorySegment hFile, MemorySegment lpFileMappingAttributes, int flProtect, int dwMaximumSizeHigh, int dwMaximumSizeLow, MemorySegment lpName, int nndPreferred) {
        var mh$ = CreateFileMappingNumaA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hFile, lpFileMappingAttributes, flProtect, dwMaximumSizeHigh, dwMaximumSizeLow, lpName, nndPreferred);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenFileMappingA$MH() {
        return RuntimeHelper.requireNonNull(constants$788.const$2,"OpenFileMappingA");
    }
    /**
     * {@snippet :
     * HANDLE OpenFileMappingA(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCSTR lpName);
     * }
     */
    public static MemorySegment OpenFileMappingA(int dwDesiredAccess, int bInheritHandle, MemorySegment lpName) {
        var mh$ = OpenFileMappingA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(dwDesiredAccess, bInheritHandle, lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLogicalDriveStringsA$MH() {
        return RuntimeHelper.requireNonNull(constants$788.const$3,"GetLogicalDriveStringsA");
    }
    /**
     * {@snippet :
     * DWORD GetLogicalDriveStringsA(DWORD nBufferLength, LPSTR lpBuffer);
     * }
     */
    public static int GetLogicalDriveStringsA(int nBufferLength, MemorySegment lpBuffer) {
        var mh$ = GetLogicalDriveStringsA$MH();
        try {
            return (int)mh$.invokeExact(nBufferLength, lpBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadPackagedLibrary$MH() {
        return RuntimeHelper.requireNonNull(constants$788.const$4,"LoadPackagedLibrary");
    }
    /**
     * {@snippet :
     * HMODULE LoadPackagedLibrary(LPCWSTR lpwLibFileName, DWORD Reserved);
     * }
     */
    public static MemorySegment LoadPackagedLibrary(MemorySegment lpwLibFileName, int Reserved) {
        var mh$ = LoadPackagedLibrary$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpwLibFileName, Reserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryFullProcessImageNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$788.const$5,"QueryFullProcessImageNameA");
    }
    /**
     * {@snippet :
     * BOOL QueryFullProcessImageNameA(HANDLE hProcess, DWORD dwFlags, LPSTR lpExeName, PDWORD lpdwSize);
     * }
     */
    public static int QueryFullProcessImageNameA(MemorySegment hProcess, int dwFlags, MemorySegment lpExeName, MemorySegment lpdwSize) {
        var mh$ = QueryFullProcessImageNameA$MH();
        try {
            return (int)mh$.invokeExact(hProcess, dwFlags, lpExeName, lpdwSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryFullProcessImageNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$789.const$0,"QueryFullProcessImageNameW");
    }
    /**
     * {@snippet :
     * BOOL QueryFullProcessImageNameW(HANDLE hProcess, DWORD dwFlags, LPWSTR lpExeName, PDWORD lpdwSize);
     * }
     */
    public static int QueryFullProcessImageNameW(MemorySegment hProcess, int dwFlags, MemorySegment lpExeName, MemorySegment lpdwSize) {
        var mh$ = QueryFullProcessImageNameW$MH();
        try {
            return (int)mh$.invokeExact(hProcess, dwFlags, lpExeName, lpdwSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum _PROC_THREAD_ATTRIBUTE_NUM.ProcThreadAttributeParentProcess = 0;
     * }
     */
    public static int ProcThreadAttributeParentProcess() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum _PROC_THREAD_ATTRIBUTE_NUM.ProcThreadAttributeHandleList = 2;
     * }
     */
    public static int ProcThreadAttributeHandleList() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum _PROC_THREAD_ATTRIBUTE_NUM.ProcThreadAttributeGroupAffinity = 3;
     * }
     */
    public static int ProcThreadAttributeGroupAffinity() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum _PROC_THREAD_ATTRIBUTE_NUM.ProcThreadAttributePreferredNode = 4;
     * }
     */
    public static int ProcThreadAttributePreferredNode() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum _PROC_THREAD_ATTRIBUTE_NUM.ProcThreadAttributeIdealProcessor = 5;
     * }
     */
    public static int ProcThreadAttributeIdealProcessor() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum _PROC_THREAD_ATTRIBUTE_NUM.ProcThreadAttributeUmsThread = 6;
     * }
     */
    public static int ProcThreadAttributeUmsThread() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum _PROC_THREAD_ATTRIBUTE_NUM.ProcThreadAttributeMitigationPolicy = 7;
     * }
     */
    public static int ProcThreadAttributeMitigationPolicy() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum _PROC_THREAD_ATTRIBUTE_NUM.ProcThreadAttributeSecurityCapabilities = 9;
     * }
     */
    public static int ProcThreadAttributeSecurityCapabilities() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum _PROC_THREAD_ATTRIBUTE_NUM.ProcThreadAttributeProtectionLevel = 11;
     * }
     */
    public static int ProcThreadAttributeProtectionLevel() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum _PROC_THREAD_ATTRIBUTE_NUM.ProcThreadAttributeJobList = 13;
     * }
     */
    public static int ProcThreadAttributeJobList() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum _PROC_THREAD_ATTRIBUTE_NUM.ProcThreadAttributeChildProcessPolicy = 14;
     * }
     */
    public static int ProcThreadAttributeChildProcessPolicy() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * enum _PROC_THREAD_ATTRIBUTE_NUM.ProcThreadAttributeAllApplicationPackagesPolicy = 15;
     * }
     */
    public static int ProcThreadAttributeAllApplicationPackagesPolicy() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum _PROC_THREAD_ATTRIBUTE_NUM.ProcThreadAttributeWin32kFilter = 16;
     * }
     */
    public static int ProcThreadAttributeWin32kFilter() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum _PROC_THREAD_ATTRIBUTE_NUM.ProcThreadAttributeSafeOpenPromptOriginClaim = 17;
     * }
     */
    public static int ProcThreadAttributeSafeOpenPromptOriginClaim() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * enum _PROC_THREAD_ATTRIBUTE_NUM.ProcThreadAttributeDesktopAppPolicy = 18;
     * }
     */
    public static int ProcThreadAttributeDesktopAppPolicy() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * enum _PROC_THREAD_ATTRIBUTE_NUM.ProcThreadAttributePseudoConsole = 22;
     * }
     */
    public static int ProcThreadAttributePseudoConsole() {
        return (int)22L;
    }
    /**
     * {@snippet :
     * enum _PROC_THREAD_ATTRIBUTE_NUM.ProcThreadAttributeMitigationAuditPolicy = 24;
     * }
     */
    public static int ProcThreadAttributeMitigationAuditPolicy() {
        return (int)24L;
    }
    /**
     * {@snippet :
     * enum _PROC_THREAD_ATTRIBUTE_NUM.ProcThreadAttributeMachineType = 25;
     * }
     */
    public static int ProcThreadAttributeMachineType() {
        return (int)25L;
    }
    /**
     * {@snippet :
     * enum _PROC_THREAD_ATTRIBUTE_NUM.ProcThreadAttributeComponentFilter = 26;
     * }
     */
    public static int ProcThreadAttributeComponentFilter() {
        return (int)26L;
    }
    /**
     * {@snippet :
     * enum _PROC_THREAD_ATTRIBUTE_NUM.ProcThreadAttributeEnableOptionalXStateFeatures = 27;
     * }
     */
    public static int ProcThreadAttributeEnableOptionalXStateFeatures() {
        return (int)27L;
    }
    public static MethodHandle GetStartupInfoA$MH() {
        return RuntimeHelper.requireNonNull(constants$789.const$1,"GetStartupInfoA");
    }
    /**
     * {@snippet :
     * void GetStartupInfoA(LPSTARTUPINFOA lpStartupInfo);
     * }
     */
    public static void GetStartupInfoA(MemorySegment lpStartupInfo) {
        var mh$ = GetStartupInfoA$MH();
        try {
            mh$.invokeExact(lpStartupInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFirmwareEnvironmentVariableA$MH() {
        return RuntimeHelper.requireNonNull(constants$789.const$2,"GetFirmwareEnvironmentVariableA");
    }
    /**
     * {@snippet :
     * DWORD GetFirmwareEnvironmentVariableA(LPCSTR lpName, LPCSTR lpGuid, PVOID pBuffer, DWORD nSize);
     * }
     */
    public static int GetFirmwareEnvironmentVariableA(MemorySegment lpName, MemorySegment lpGuid, MemorySegment pBuffer, int nSize) {
        var mh$ = GetFirmwareEnvironmentVariableA$MH();
        try {
            return (int)mh$.invokeExact(lpName, lpGuid, pBuffer, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFirmwareEnvironmentVariableW$MH() {
        return RuntimeHelper.requireNonNull(constants$789.const$3,"GetFirmwareEnvironmentVariableW");
    }
    /**
     * {@snippet :
     * DWORD GetFirmwareEnvironmentVariableW(LPCWSTR lpName, LPCWSTR lpGuid, PVOID pBuffer, DWORD nSize);
     * }
     */
    public static int GetFirmwareEnvironmentVariableW(MemorySegment lpName, MemorySegment lpGuid, MemorySegment pBuffer, int nSize) {
        var mh$ = GetFirmwareEnvironmentVariableW$MH();
        try {
            return (int)mh$.invokeExact(lpName, lpGuid, pBuffer, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFirmwareEnvironmentVariableExA$MH() {
        return RuntimeHelper.requireNonNull(constants$789.const$4,"GetFirmwareEnvironmentVariableExA");
    }
    /**
     * {@snippet :
     * DWORD GetFirmwareEnvironmentVariableExA(LPCSTR lpName, LPCSTR lpGuid, PVOID pBuffer, DWORD nSize, PDWORD pdwAttribubutes);
     * }
     */
    public static int GetFirmwareEnvironmentVariableExA(MemorySegment lpName, MemorySegment lpGuid, MemorySegment pBuffer, int nSize, MemorySegment pdwAttribubutes) {
        var mh$ = GetFirmwareEnvironmentVariableExA$MH();
        try {
            return (int)mh$.invokeExact(lpName, lpGuid, pBuffer, nSize, pdwAttribubutes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFirmwareEnvironmentVariableExW$MH() {
        return RuntimeHelper.requireNonNull(constants$789.const$5,"GetFirmwareEnvironmentVariableExW");
    }
    /**
     * {@snippet :
     * DWORD GetFirmwareEnvironmentVariableExW(LPCWSTR lpName, LPCWSTR lpGuid, PVOID pBuffer, DWORD nSize, PDWORD pdwAttribubutes);
     * }
     */
    public static int GetFirmwareEnvironmentVariableExW(MemorySegment lpName, MemorySegment lpGuid, MemorySegment pBuffer, int nSize, MemorySegment pdwAttribubutes) {
        var mh$ = GetFirmwareEnvironmentVariableExW$MH();
        try {
            return (int)mh$.invokeExact(lpName, lpGuid, pBuffer, nSize, pdwAttribubutes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFirmwareEnvironmentVariableA$MH() {
        return RuntimeHelper.requireNonNull(constants$790.const$0,"SetFirmwareEnvironmentVariableA");
    }
    /**
     * {@snippet :
     * BOOL SetFirmwareEnvironmentVariableA(LPCSTR lpName, LPCSTR lpGuid, PVOID pValue, DWORD nSize);
     * }
     */
    public static int SetFirmwareEnvironmentVariableA(MemorySegment lpName, MemorySegment lpGuid, MemorySegment pValue, int nSize) {
        var mh$ = SetFirmwareEnvironmentVariableA$MH();
        try {
            return (int)mh$.invokeExact(lpName, lpGuid, pValue, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFirmwareEnvironmentVariableW$MH() {
        return RuntimeHelper.requireNonNull(constants$790.const$1,"SetFirmwareEnvironmentVariableW");
    }
    /**
     * {@snippet :
     * BOOL SetFirmwareEnvironmentVariableW(LPCWSTR lpName, LPCWSTR lpGuid, PVOID pValue, DWORD nSize);
     * }
     */
    public static int SetFirmwareEnvironmentVariableW(MemorySegment lpName, MemorySegment lpGuid, MemorySegment pValue, int nSize) {
        var mh$ = SetFirmwareEnvironmentVariableW$MH();
        try {
            return (int)mh$.invokeExact(lpName, lpGuid, pValue, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFirmwareEnvironmentVariableExA$MH() {
        return RuntimeHelper.requireNonNull(constants$790.const$2,"SetFirmwareEnvironmentVariableExA");
    }
    /**
     * {@snippet :
     * BOOL SetFirmwareEnvironmentVariableExA(LPCSTR lpName, LPCSTR lpGuid, PVOID pValue, DWORD nSize, DWORD dwAttributes);
     * }
     */
    public static int SetFirmwareEnvironmentVariableExA(MemorySegment lpName, MemorySegment lpGuid, MemorySegment pValue, int nSize, int dwAttributes) {
        var mh$ = SetFirmwareEnvironmentVariableExA$MH();
        try {
            return (int)mh$.invokeExact(lpName, lpGuid, pValue, nSize, dwAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFirmwareEnvironmentVariableExW$MH() {
        return RuntimeHelper.requireNonNull(constants$790.const$3,"SetFirmwareEnvironmentVariableExW");
    }
    /**
     * {@snippet :
     * BOOL SetFirmwareEnvironmentVariableExW(LPCWSTR lpName, LPCWSTR lpGuid, PVOID pValue, DWORD nSize, DWORD dwAttributes);
     * }
     */
    public static int SetFirmwareEnvironmentVariableExW(MemorySegment lpName, MemorySegment lpGuid, MemorySegment pValue, int nSize, int dwAttributes) {
        var mh$ = SetFirmwareEnvironmentVariableExW$MH();
        try {
            return (int)mh$.invokeExact(lpName, lpGuid, pValue, nSize, dwAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFirmwareType$MH() {
        return RuntimeHelper.requireNonNull(constants$790.const$4,"GetFirmwareType");
    }
    /**
     * {@snippet :
     * BOOL GetFirmwareType(PFIRMWARE_TYPE FirmwareType);
     * }
     */
    public static int GetFirmwareType(MemorySegment FirmwareType) {
        var mh$ = GetFirmwareType$MH();
        try {
            return (int)mh$.invokeExact(FirmwareType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsNativeVhdBoot$MH() {
        return RuntimeHelper.requireNonNull(constants$790.const$5,"IsNativeVhdBoot");
    }
    /**
     * {@snippet :
     * BOOL IsNativeVhdBoot(PBOOL NativeVhdBoot);
     * }
     */
    public static int IsNativeVhdBoot(MemorySegment NativeVhdBoot) {
        var mh$ = IsNativeVhdBoot$MH();
        try {
            return (int)mh$.invokeExact(NativeVhdBoot);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindResourceA$MH() {
        return RuntimeHelper.requireNonNull(constants$791.const$0,"FindResourceA");
    }
    /**
     * {@snippet :
     * HRSRC FindResourceA(HMODULE hModule, LPCSTR lpName, LPCSTR lpType);
     * }
     */
    public static MemorySegment FindResourceA(MemorySegment hModule, MemorySegment lpName, MemorySegment lpType) {
        var mh$ = FindResourceA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hModule, lpName, lpType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindResourceExA$MH() {
        return RuntimeHelper.requireNonNull(constants$791.const$1,"FindResourceExA");
    }
    /**
     * {@snippet :
     * HRSRC FindResourceExA(HMODULE hModule, LPCSTR lpType, LPCSTR lpName, WORD wLanguage);
     * }
     */
    public static MemorySegment FindResourceExA(MemorySegment hModule, MemorySegment lpType, MemorySegment lpName, short wLanguage) {
        var mh$ = FindResourceExA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hModule, lpType, lpName, wLanguage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumResourceTypesA$MH() {
        return RuntimeHelper.requireNonNull(constants$791.const$2,"EnumResourceTypesA");
    }
    /**
     * {@snippet :
     * BOOL EnumResourceTypesA(HMODULE hModule, ENUMRESTYPEPROCA lpEnumFunc, LONG_PTR lParam);
     * }
     */
    public static int EnumResourceTypesA(MemorySegment hModule, MemorySegment lpEnumFunc, long lParam) {
        var mh$ = EnumResourceTypesA$MH();
        try {
            return (int)mh$.invokeExact(hModule, lpEnumFunc, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumResourceTypesW$MH() {
        return RuntimeHelper.requireNonNull(constants$791.const$3,"EnumResourceTypesW");
    }
    /**
     * {@snippet :
     * BOOL EnumResourceTypesW(HMODULE hModule, ENUMRESTYPEPROCW lpEnumFunc, LONG_PTR lParam);
     * }
     */
    public static int EnumResourceTypesW(MemorySegment hModule, MemorySegment lpEnumFunc, long lParam) {
        var mh$ = EnumResourceTypesW$MH();
        try {
            return (int)mh$.invokeExact(hModule, lpEnumFunc, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumResourceLanguagesA$MH() {
        return RuntimeHelper.requireNonNull(constants$791.const$5,"EnumResourceLanguagesA");
    }
    /**
     * {@snippet :
     * BOOL EnumResourceLanguagesA(HMODULE hModule, LPCSTR lpType, LPCSTR lpName, ENUMRESLANGPROCA lpEnumFunc, LONG_PTR lParam);
     * }
     */
    public static int EnumResourceLanguagesA(MemorySegment hModule, MemorySegment lpType, MemorySegment lpName, MemorySegment lpEnumFunc, long lParam) {
        var mh$ = EnumResourceLanguagesA$MH();
        try {
            return (int)mh$.invokeExact(hModule, lpType, lpName, lpEnumFunc, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumResourceLanguagesW$MH() {
        return RuntimeHelper.requireNonNull(constants$792.const$0,"EnumResourceLanguagesW");
    }
    /**
     * {@snippet :
     * BOOL EnumResourceLanguagesW(HMODULE hModule, LPCWSTR lpType, LPCWSTR lpName, ENUMRESLANGPROCW lpEnumFunc, LONG_PTR lParam);
     * }
     */
    public static int EnumResourceLanguagesW(MemorySegment hModule, MemorySegment lpType, MemorySegment lpName, MemorySegment lpEnumFunc, long lParam) {
        var mh$ = EnumResourceLanguagesW$MH();
        try {
            return (int)mh$.invokeExact(hModule, lpType, lpName, lpEnumFunc, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BeginUpdateResourceA$MH() {
        return RuntimeHelper.requireNonNull(constants$792.const$1,"BeginUpdateResourceA");
    }
    /**
     * {@snippet :
     * HANDLE BeginUpdateResourceA(LPCSTR pFileName, BOOL bDeleteExistingResources);
     * }
     */
    public static MemorySegment BeginUpdateResourceA(MemorySegment pFileName, int bDeleteExistingResources) {
        var mh$ = BeginUpdateResourceA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(pFileName, bDeleteExistingResources);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BeginUpdateResourceW$MH() {
        return RuntimeHelper.requireNonNull(constants$792.const$2,"BeginUpdateResourceW");
    }
    /**
     * {@snippet :
     * HANDLE BeginUpdateResourceW(LPCWSTR pFileName, BOOL bDeleteExistingResources);
     * }
     */
    public static MemorySegment BeginUpdateResourceW(MemorySegment pFileName, int bDeleteExistingResources) {
        var mh$ = BeginUpdateResourceW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(pFileName, bDeleteExistingResources);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UpdateResourceA$MH() {
        return RuntimeHelper.requireNonNull(constants$792.const$4,"UpdateResourceA");
    }
    /**
     * {@snippet :
     * BOOL UpdateResourceA(HANDLE hUpdate, LPCSTR lpType, LPCSTR lpName, WORD wLanguage, LPVOID lpData, DWORD cb);
     * }
     */
    public static int UpdateResourceA(MemorySegment hUpdate, MemorySegment lpType, MemorySegment lpName, short wLanguage, MemorySegment lpData, int cb) {
        var mh$ = UpdateResourceA$MH();
        try {
            return (int)mh$.invokeExact(hUpdate, lpType, lpName, wLanguage, lpData, cb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UpdateResourceW$MH() {
        return RuntimeHelper.requireNonNull(constants$792.const$5,"UpdateResourceW");
    }
    /**
     * {@snippet :
     * BOOL UpdateResourceW(HANDLE hUpdate, LPCWSTR lpType, LPCWSTR lpName, WORD wLanguage, LPVOID lpData, DWORD cb);
     * }
     */
    public static int UpdateResourceW(MemorySegment hUpdate, MemorySegment lpType, MemorySegment lpName, short wLanguage, MemorySegment lpData, int cb) {
        var mh$ = UpdateResourceW$MH();
        try {
            return (int)mh$.invokeExact(hUpdate, lpType, lpName, wLanguage, lpData, cb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EndUpdateResourceA$MH() {
        return RuntimeHelper.requireNonNull(constants$793.const$0,"EndUpdateResourceA");
    }
    /**
     * {@snippet :
     * BOOL EndUpdateResourceA(HANDLE hUpdate, BOOL fDiscard);
     * }
     */
    public static int EndUpdateResourceA(MemorySegment hUpdate, int fDiscard) {
        var mh$ = EndUpdateResourceA$MH();
        try {
            return (int)mh$.invokeExact(hUpdate, fDiscard);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EndUpdateResourceW$MH() {
        return RuntimeHelper.requireNonNull(constants$793.const$1,"EndUpdateResourceW");
    }
    /**
     * {@snippet :
     * BOOL EndUpdateResourceW(HANDLE hUpdate, BOOL fDiscard);
     * }
     */
    public static int EndUpdateResourceW(MemorySegment hUpdate, int fDiscard) {
        var mh$ = EndUpdateResourceW$MH();
        try {
            return (int)mh$.invokeExact(hUpdate, fDiscard);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GlobalAddAtomA$MH() {
        return RuntimeHelper.requireNonNull(constants$793.const$2,"GlobalAddAtomA");
    }
    /**
     * {@snippet :
     * ATOM GlobalAddAtomA(LPCSTR lpString);
     * }
     */
    public static short GlobalAddAtomA(MemorySegment lpString) {
        var mh$ = GlobalAddAtomA$MH();
        try {
            return (short)mh$.invokeExact(lpString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GlobalAddAtomW$MH() {
        return RuntimeHelper.requireNonNull(constants$793.const$3,"GlobalAddAtomW");
    }
    /**
     * {@snippet :
     * ATOM GlobalAddAtomW(LPCWSTR lpString);
     * }
     */
    public static short GlobalAddAtomW(MemorySegment lpString) {
        var mh$ = GlobalAddAtomW$MH();
        try {
            return (short)mh$.invokeExact(lpString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GlobalAddAtomExA$MH() {
        return RuntimeHelper.requireNonNull(constants$793.const$5,"GlobalAddAtomExA");
    }
    /**
     * {@snippet :
     * ATOM GlobalAddAtomExA(LPCSTR lpString, DWORD Flags);
     * }
     */
    public static short GlobalAddAtomExA(MemorySegment lpString, int Flags) {
        var mh$ = GlobalAddAtomExA$MH();
        try {
            return (short)mh$.invokeExact(lpString, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GlobalAddAtomExW$MH() {
        return RuntimeHelper.requireNonNull(constants$794.const$0,"GlobalAddAtomExW");
    }
    /**
     * {@snippet :
     * ATOM GlobalAddAtomExW(LPCWSTR lpString, DWORD Flags);
     * }
     */
    public static short GlobalAddAtomExW(MemorySegment lpString, int Flags) {
        var mh$ = GlobalAddAtomExW$MH();
        try {
            return (short)mh$.invokeExact(lpString, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GlobalFindAtomA$MH() {
        return RuntimeHelper.requireNonNull(constants$794.const$1,"GlobalFindAtomA");
    }
    /**
     * {@snippet :
     * ATOM GlobalFindAtomA(LPCSTR lpString);
     * }
     */
    public static short GlobalFindAtomA(MemorySegment lpString) {
        var mh$ = GlobalFindAtomA$MH();
        try {
            return (short)mh$.invokeExact(lpString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GlobalFindAtomW$MH() {
        return RuntimeHelper.requireNonNull(constants$794.const$2,"GlobalFindAtomW");
    }
    /**
     * {@snippet :
     * ATOM GlobalFindAtomW(LPCWSTR lpString);
     * }
     */
    public static short GlobalFindAtomW(MemorySegment lpString) {
        var mh$ = GlobalFindAtomW$MH();
        try {
            return (short)mh$.invokeExact(lpString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GlobalGetAtomNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$794.const$4,"GlobalGetAtomNameA");
    }
    /**
     * {@snippet :
     * UINT GlobalGetAtomNameA(ATOM nAtom, LPSTR lpBuffer, int nSize);
     * }
     */
    public static int GlobalGetAtomNameA(short nAtom, MemorySegment lpBuffer, int nSize) {
        var mh$ = GlobalGetAtomNameA$MH();
        try {
            return (int)mh$.invokeExact(nAtom, lpBuffer, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GlobalGetAtomNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$794.const$5,"GlobalGetAtomNameW");
    }
    /**
     * {@snippet :
     * UINT GlobalGetAtomNameW(ATOM nAtom, LPWSTR lpBuffer, int nSize);
     * }
     */
    public static int GlobalGetAtomNameW(short nAtom, MemorySegment lpBuffer, int nSize) {
        var mh$ = GlobalGetAtomNameW$MH();
        try {
            return (int)mh$.invokeExact(nAtom, lpBuffer, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddAtomA$MH() {
        return RuntimeHelper.requireNonNull(constants$795.const$0,"AddAtomA");
    }
    /**
     * {@snippet :
     * ATOM AddAtomA(LPCSTR lpString);
     * }
     */
    public static short AddAtomA(MemorySegment lpString) {
        var mh$ = AddAtomA$MH();
        try {
            return (short)mh$.invokeExact(lpString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddAtomW$MH() {
        return RuntimeHelper.requireNonNull(constants$795.const$1,"AddAtomW");
    }
    /**
     * {@snippet :
     * ATOM AddAtomW(LPCWSTR lpString);
     * }
     */
    public static short AddAtomW(MemorySegment lpString) {
        var mh$ = AddAtomW$MH();
        try {
            return (short)mh$.invokeExact(lpString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindAtomA$MH() {
        return RuntimeHelper.requireNonNull(constants$795.const$2,"FindAtomA");
    }
    /**
     * {@snippet :
     * ATOM FindAtomA(LPCSTR lpString);
     * }
     */
    public static short FindAtomA(MemorySegment lpString) {
        var mh$ = FindAtomA$MH();
        try {
            return (short)mh$.invokeExact(lpString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindAtomW$MH() {
        return RuntimeHelper.requireNonNull(constants$795.const$3,"FindAtomW");
    }
    /**
     * {@snippet :
     * ATOM FindAtomW(LPCWSTR lpString);
     * }
     */
    public static short FindAtomW(MemorySegment lpString) {
        var mh$ = FindAtomW$MH();
        try {
            return (short)mh$.invokeExact(lpString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetAtomNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$795.const$4,"GetAtomNameA");
    }
    /**
     * {@snippet :
     * UINT GetAtomNameA(ATOM nAtom, LPSTR lpBuffer, int nSize);
     * }
     */
    public static int GetAtomNameA(short nAtom, MemorySegment lpBuffer, int nSize) {
        var mh$ = GetAtomNameA$MH();
        try {
            return (int)mh$.invokeExact(nAtom, lpBuffer, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetAtomNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$795.const$5,"GetAtomNameW");
    }
    /**
     * {@snippet :
     * UINT GetAtomNameW(ATOM nAtom, LPWSTR lpBuffer, int nSize);
     * }
     */
    public static int GetAtomNameW(short nAtom, MemorySegment lpBuffer, int nSize) {
        var mh$ = GetAtomNameW$MH();
        try {
            return (int)mh$.invokeExact(nAtom, lpBuffer, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProfileIntA$MH() {
        return RuntimeHelper.requireNonNull(constants$796.const$0,"GetProfileIntA");
    }
    /**
     * {@snippet :
     * UINT GetProfileIntA(LPCSTR lpAppName, LPCSTR lpKeyName, INT nDefault);
     * }
     */
    public static int GetProfileIntA(MemorySegment lpAppName, MemorySegment lpKeyName, int nDefault) {
        var mh$ = GetProfileIntA$MH();
        try {
            return (int)mh$.invokeExact(lpAppName, lpKeyName, nDefault);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProfileIntW$MH() {
        return RuntimeHelper.requireNonNull(constants$796.const$1,"GetProfileIntW");
    }
    /**
     * {@snippet :
     * UINT GetProfileIntW(LPCWSTR lpAppName, LPCWSTR lpKeyName, INT nDefault);
     * }
     */
    public static int GetProfileIntW(MemorySegment lpAppName, MemorySegment lpKeyName, int nDefault) {
        var mh$ = GetProfileIntW$MH();
        try {
            return (int)mh$.invokeExact(lpAppName, lpKeyName, nDefault);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProfileStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$796.const$2,"GetProfileStringA");
    }
    /**
     * {@snippet :
     * DWORD GetProfileStringA(LPCSTR lpAppName, LPCSTR lpKeyName, LPCSTR lpDefault, LPSTR lpReturnedString, DWORD nSize);
     * }
     */
    public static int GetProfileStringA(MemorySegment lpAppName, MemorySegment lpKeyName, MemorySegment lpDefault, MemorySegment lpReturnedString, int nSize) {
        var mh$ = GetProfileStringA$MH();
        try {
            return (int)mh$.invokeExact(lpAppName, lpKeyName, lpDefault, lpReturnedString, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProfileStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$796.const$3,"GetProfileStringW");
    }
    /**
     * {@snippet :
     * DWORD GetProfileStringW(LPCWSTR lpAppName, LPCWSTR lpKeyName, LPCWSTR lpDefault, LPWSTR lpReturnedString, DWORD nSize);
     * }
     */
    public static int GetProfileStringW(MemorySegment lpAppName, MemorySegment lpKeyName, MemorySegment lpDefault, MemorySegment lpReturnedString, int nSize) {
        var mh$ = GetProfileStringW$MH();
        try {
            return (int)mh$.invokeExact(lpAppName, lpKeyName, lpDefault, lpReturnedString, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteProfileStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$796.const$4,"WriteProfileStringA");
    }
    /**
     * {@snippet :
     * BOOL WriteProfileStringA(LPCSTR lpAppName, LPCSTR lpKeyName, LPCSTR lpString);
     * }
     */
    public static int WriteProfileStringA(MemorySegment lpAppName, MemorySegment lpKeyName, MemorySegment lpString) {
        var mh$ = WriteProfileStringA$MH();
        try {
            return (int)mh$.invokeExact(lpAppName, lpKeyName, lpString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteProfileStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$796.const$5,"WriteProfileStringW");
    }
    /**
     * {@snippet :
     * BOOL WriteProfileStringW(LPCWSTR lpAppName, LPCWSTR lpKeyName, LPCWSTR lpString);
     * }
     */
    public static int WriteProfileStringW(MemorySegment lpAppName, MemorySegment lpKeyName, MemorySegment lpString) {
        var mh$ = WriteProfileStringW$MH();
        try {
            return (int)mh$.invokeExact(lpAppName, lpKeyName, lpString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProfileSectionA$MH() {
        return RuntimeHelper.requireNonNull(constants$797.const$0,"GetProfileSectionA");
    }
    /**
     * {@snippet :
     * DWORD GetProfileSectionA(LPCSTR lpAppName, LPSTR lpReturnedString, DWORD nSize);
     * }
     */
    public static int GetProfileSectionA(MemorySegment lpAppName, MemorySegment lpReturnedString, int nSize) {
        var mh$ = GetProfileSectionA$MH();
        try {
            return (int)mh$.invokeExact(lpAppName, lpReturnedString, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProfileSectionW$MH() {
        return RuntimeHelper.requireNonNull(constants$797.const$1,"GetProfileSectionW");
    }
    /**
     * {@snippet :
     * DWORD GetProfileSectionW(LPCWSTR lpAppName, LPWSTR lpReturnedString, DWORD nSize);
     * }
     */
    public static int GetProfileSectionW(MemorySegment lpAppName, MemorySegment lpReturnedString, int nSize) {
        var mh$ = GetProfileSectionW$MH();
        try {
            return (int)mh$.invokeExact(lpAppName, lpReturnedString, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteProfileSectionA$MH() {
        return RuntimeHelper.requireNonNull(constants$797.const$2,"WriteProfileSectionA");
    }
    /**
     * {@snippet :
     * BOOL WriteProfileSectionA(LPCSTR lpAppName, LPCSTR lpString);
     * }
     */
    public static int WriteProfileSectionA(MemorySegment lpAppName, MemorySegment lpString) {
        var mh$ = WriteProfileSectionA$MH();
        try {
            return (int)mh$.invokeExact(lpAppName, lpString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteProfileSectionW$MH() {
        return RuntimeHelper.requireNonNull(constants$797.const$3,"WriteProfileSectionW");
    }
    /**
     * {@snippet :
     * BOOL WriteProfileSectionW(LPCWSTR lpAppName, LPCWSTR lpString);
     * }
     */
    public static int WriteProfileSectionW(MemorySegment lpAppName, MemorySegment lpString) {
        var mh$ = WriteProfileSectionW$MH();
        try {
            return (int)mh$.invokeExact(lpAppName, lpString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPrivateProfileIntA$MH() {
        return RuntimeHelper.requireNonNull(constants$797.const$4,"GetPrivateProfileIntA");
    }
    /**
     * {@snippet :
     * UINT GetPrivateProfileIntA(LPCSTR lpAppName, LPCSTR lpKeyName, INT nDefault, LPCSTR lpFileName);
     * }
     */
    public static int GetPrivateProfileIntA(MemorySegment lpAppName, MemorySegment lpKeyName, int nDefault, MemorySegment lpFileName) {
        var mh$ = GetPrivateProfileIntA$MH();
        try {
            return (int)mh$.invokeExact(lpAppName, lpKeyName, nDefault, lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPrivateProfileIntW$MH() {
        return RuntimeHelper.requireNonNull(constants$797.const$5,"GetPrivateProfileIntW");
    }
    /**
     * {@snippet :
     * UINT GetPrivateProfileIntW(LPCWSTR lpAppName, LPCWSTR lpKeyName, INT nDefault, LPCWSTR lpFileName);
     * }
     */
    public static int GetPrivateProfileIntW(MemorySegment lpAppName, MemorySegment lpKeyName, int nDefault, MemorySegment lpFileName) {
        var mh$ = GetPrivateProfileIntW$MH();
        try {
            return (int)mh$.invokeExact(lpAppName, lpKeyName, nDefault, lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPrivateProfileStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$798.const$1,"GetPrivateProfileStringA");
    }
    /**
     * {@snippet :
     * DWORD GetPrivateProfileStringA(LPCSTR lpAppName, LPCSTR lpKeyName, LPCSTR lpDefault, LPSTR lpReturnedString, DWORD nSize, LPCSTR lpFileName);
     * }
     */
    public static int GetPrivateProfileStringA(MemorySegment lpAppName, MemorySegment lpKeyName, MemorySegment lpDefault, MemorySegment lpReturnedString, int nSize, MemorySegment lpFileName) {
        var mh$ = GetPrivateProfileStringA$MH();
        try {
            return (int)mh$.invokeExact(lpAppName, lpKeyName, lpDefault, lpReturnedString, nSize, lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPrivateProfileStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$798.const$2,"GetPrivateProfileStringW");
    }
    /**
     * {@snippet :
     * DWORD GetPrivateProfileStringW(LPCWSTR lpAppName, LPCWSTR lpKeyName, LPCWSTR lpDefault, LPWSTR lpReturnedString, DWORD nSize, LPCWSTR lpFileName);
     * }
     */
    public static int GetPrivateProfileStringW(MemorySegment lpAppName, MemorySegment lpKeyName, MemorySegment lpDefault, MemorySegment lpReturnedString, int nSize, MemorySegment lpFileName) {
        var mh$ = GetPrivateProfileStringW$MH();
        try {
            return (int)mh$.invokeExact(lpAppName, lpKeyName, lpDefault, lpReturnedString, nSize, lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WritePrivateProfileStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$798.const$3,"WritePrivateProfileStringA");
    }
    /**
     * {@snippet :
     * BOOL WritePrivateProfileStringA(LPCSTR lpAppName, LPCSTR lpKeyName, LPCSTR lpString, LPCSTR lpFileName);
     * }
     */
    public static int WritePrivateProfileStringA(MemorySegment lpAppName, MemorySegment lpKeyName, MemorySegment lpString, MemorySegment lpFileName) {
        var mh$ = WritePrivateProfileStringA$MH();
        try {
            return (int)mh$.invokeExact(lpAppName, lpKeyName, lpString, lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WritePrivateProfileStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$798.const$4,"WritePrivateProfileStringW");
    }
    /**
     * {@snippet :
     * BOOL WritePrivateProfileStringW(LPCWSTR lpAppName, LPCWSTR lpKeyName, LPCWSTR lpString, LPCWSTR lpFileName);
     * }
     */
    public static int WritePrivateProfileStringW(MemorySegment lpAppName, MemorySegment lpKeyName, MemorySegment lpString, MemorySegment lpFileName) {
        var mh$ = WritePrivateProfileStringW$MH();
        try {
            return (int)mh$.invokeExact(lpAppName, lpKeyName, lpString, lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPrivateProfileSectionA$MH() {
        return RuntimeHelper.requireNonNull(constants$798.const$5,"GetPrivateProfileSectionA");
    }
    /**
     * {@snippet :
     * DWORD GetPrivateProfileSectionA(LPCSTR lpAppName, LPSTR lpReturnedString, DWORD nSize, LPCSTR lpFileName);
     * }
     */
    public static int GetPrivateProfileSectionA(MemorySegment lpAppName, MemorySegment lpReturnedString, int nSize, MemorySegment lpFileName) {
        var mh$ = GetPrivateProfileSectionA$MH();
        try {
            return (int)mh$.invokeExact(lpAppName, lpReturnedString, nSize, lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPrivateProfileSectionW$MH() {
        return RuntimeHelper.requireNonNull(constants$799.const$0,"GetPrivateProfileSectionW");
    }
    /**
     * {@snippet :
     * DWORD GetPrivateProfileSectionW(LPCWSTR lpAppName, LPWSTR lpReturnedString, DWORD nSize, LPCWSTR lpFileName);
     * }
     */
    public static int GetPrivateProfileSectionW(MemorySegment lpAppName, MemorySegment lpReturnedString, int nSize, MemorySegment lpFileName) {
        var mh$ = GetPrivateProfileSectionW$MH();
        try {
            return (int)mh$.invokeExact(lpAppName, lpReturnedString, nSize, lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WritePrivateProfileSectionA$MH() {
        return RuntimeHelper.requireNonNull(constants$799.const$1,"WritePrivateProfileSectionA");
    }
    /**
     * {@snippet :
     * BOOL WritePrivateProfileSectionA(LPCSTR lpAppName, LPCSTR lpString, LPCSTR lpFileName);
     * }
     */
    public static int WritePrivateProfileSectionA(MemorySegment lpAppName, MemorySegment lpString, MemorySegment lpFileName) {
        var mh$ = WritePrivateProfileSectionA$MH();
        try {
            return (int)mh$.invokeExact(lpAppName, lpString, lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WritePrivateProfileSectionW$MH() {
        return RuntimeHelper.requireNonNull(constants$799.const$2,"WritePrivateProfileSectionW");
    }
    /**
     * {@snippet :
     * BOOL WritePrivateProfileSectionW(LPCWSTR lpAppName, LPCWSTR lpString, LPCWSTR lpFileName);
     * }
     */
    public static int WritePrivateProfileSectionW(MemorySegment lpAppName, MemorySegment lpString, MemorySegment lpFileName) {
        var mh$ = WritePrivateProfileSectionW$MH();
        try {
            return (int)mh$.invokeExact(lpAppName, lpString, lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPrivateProfileSectionNamesA$MH() {
        return RuntimeHelper.requireNonNull(constants$799.const$3,"GetPrivateProfileSectionNamesA");
    }
    /**
     * {@snippet :
     * DWORD GetPrivateProfileSectionNamesA(LPSTR lpszReturnBuffer, DWORD nSize, LPCSTR lpFileName);
     * }
     */
    public static int GetPrivateProfileSectionNamesA(MemorySegment lpszReturnBuffer, int nSize, MemorySegment lpFileName) {
        var mh$ = GetPrivateProfileSectionNamesA$MH();
        try {
            return (int)mh$.invokeExact(lpszReturnBuffer, nSize, lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPrivateProfileSectionNamesW$MH() {
        return RuntimeHelper.requireNonNull(constants$799.const$4,"GetPrivateProfileSectionNamesW");
    }
    /**
     * {@snippet :
     * DWORD GetPrivateProfileSectionNamesW(LPWSTR lpszReturnBuffer, DWORD nSize, LPCWSTR lpFileName);
     * }
     */
    public static int GetPrivateProfileSectionNamesW(MemorySegment lpszReturnBuffer, int nSize, MemorySegment lpFileName) {
        var mh$ = GetPrivateProfileSectionNamesW$MH();
        try {
            return (int)mh$.invokeExact(lpszReturnBuffer, nSize, lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPrivateProfileStructA$MH() {
        return RuntimeHelper.requireNonNull(constants$799.const$5,"GetPrivateProfileStructA");
    }
    /**
     * {@snippet :
     * BOOL GetPrivateProfileStructA(LPCSTR lpszSection, LPCSTR lpszKey, LPVOID lpStruct, UINT uSizeStruct, LPCSTR szFile);
     * }
     */
    public static int GetPrivateProfileStructA(MemorySegment lpszSection, MemorySegment lpszKey, MemorySegment lpStruct, int uSizeStruct, MemorySegment szFile) {
        var mh$ = GetPrivateProfileStructA$MH();
        try {
            return (int)mh$.invokeExact(lpszSection, lpszKey, lpStruct, uSizeStruct, szFile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPrivateProfileStructW$MH() {
        return RuntimeHelper.requireNonNull(constants$800.const$0,"GetPrivateProfileStructW");
    }
    /**
     * {@snippet :
     * BOOL GetPrivateProfileStructW(LPCWSTR lpszSection, LPCWSTR lpszKey, LPVOID lpStruct, UINT uSizeStruct, LPCWSTR szFile);
     * }
     */
    public static int GetPrivateProfileStructW(MemorySegment lpszSection, MemorySegment lpszKey, MemorySegment lpStruct, int uSizeStruct, MemorySegment szFile) {
        var mh$ = GetPrivateProfileStructW$MH();
        try {
            return (int)mh$.invokeExact(lpszSection, lpszKey, lpStruct, uSizeStruct, szFile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WritePrivateProfileStructA$MH() {
        return RuntimeHelper.requireNonNull(constants$800.const$1,"WritePrivateProfileStructA");
    }
    /**
     * {@snippet :
     * BOOL WritePrivateProfileStructA(LPCSTR lpszSection, LPCSTR lpszKey, LPVOID lpStruct, UINT uSizeStruct, LPCSTR szFile);
     * }
     */
    public static int WritePrivateProfileStructA(MemorySegment lpszSection, MemorySegment lpszKey, MemorySegment lpStruct, int uSizeStruct, MemorySegment szFile) {
        var mh$ = WritePrivateProfileStructA$MH();
        try {
            return (int)mh$.invokeExact(lpszSection, lpszKey, lpStruct, uSizeStruct, szFile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WritePrivateProfileStructW$MH() {
        return RuntimeHelper.requireNonNull(constants$800.const$2,"WritePrivateProfileStructW");
    }
    /**
     * {@snippet :
     * BOOL WritePrivateProfileStructW(LPCWSTR lpszSection, LPCWSTR lpszKey, LPVOID lpStruct, UINT uSizeStruct, LPCWSTR szFile);
     * }
     */
    public static int WritePrivateProfileStructW(MemorySegment lpszSection, MemorySegment lpszKey, MemorySegment lpStruct, int uSizeStruct, MemorySegment szFile) {
        var mh$ = WritePrivateProfileStructW$MH();
        try {
            return (int)mh$.invokeExact(lpszSection, lpszKey, lpStruct, uSizeStruct, szFile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetDllDirectoryA$MH() {
        return RuntimeHelper.requireNonNull(constants$801.const$0,"SetDllDirectoryA");
    }
    /**
     * {@snippet :
     * BOOL SetDllDirectoryA(LPCSTR lpPathName);
     * }
     */
    public static int SetDllDirectoryA(MemorySegment lpPathName) {
        var mh$ = SetDllDirectoryA$MH();
        try {
            return (int)mh$.invokeExact(lpPathName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetDllDirectoryW$MH() {
        return RuntimeHelper.requireNonNull(constants$801.const$1,"SetDllDirectoryW");
    }
    /**
     * {@snippet :
     * BOOL SetDllDirectoryW(LPCWSTR lpPathName);
     * }
     */
    public static int SetDllDirectoryW(MemorySegment lpPathName) {
        var mh$ = SetDllDirectoryW$MH();
        try {
            return (int)mh$.invokeExact(lpPathName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDllDirectoryA$MH() {
        return RuntimeHelper.requireNonNull(constants$801.const$2,"GetDllDirectoryA");
    }
    /**
     * {@snippet :
     * DWORD GetDllDirectoryA(DWORD nBufferLength, LPSTR lpBuffer);
     * }
     */
    public static int GetDllDirectoryA(int nBufferLength, MemorySegment lpBuffer) {
        var mh$ = GetDllDirectoryA$MH();
        try {
            return (int)mh$.invokeExact(nBufferLength, lpBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDllDirectoryW$MH() {
        return RuntimeHelper.requireNonNull(constants$801.const$3,"GetDllDirectoryW");
    }
    /**
     * {@snippet :
     * DWORD GetDllDirectoryW(DWORD nBufferLength, LPWSTR lpBuffer);
     * }
     */
    public static int GetDllDirectoryW(int nBufferLength, MemorySegment lpBuffer) {
        var mh$ = GetDllDirectoryW$MH();
        try {
            return (int)mh$.invokeExact(nBufferLength, lpBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetSearchPathMode$MH() {
        return RuntimeHelper.requireNonNull(constants$801.const$4,"SetSearchPathMode");
    }
    /**
     * {@snippet :
     * BOOL SetSearchPathMode(DWORD Flags);
     * }
     */
    public static int SetSearchPathMode(int Flags) {
        var mh$ = SetSearchPathMode$MH();
        try {
            return (int)mh$.invokeExact(Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDirectoryExA$MH() {
        return RuntimeHelper.requireNonNull(constants$801.const$5,"CreateDirectoryExA");
    }
    /**
     * {@snippet :
     * BOOL CreateDirectoryExA(LPCSTR lpTemplateDirectory, LPCSTR lpNewDirectory, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
     * }
     */
    public static int CreateDirectoryExA(MemorySegment lpTemplateDirectory, MemorySegment lpNewDirectory, MemorySegment lpSecurityAttributes) {
        var mh$ = CreateDirectoryExA$MH();
        try {
            return (int)mh$.invokeExact(lpTemplateDirectory, lpNewDirectory, lpSecurityAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDirectoryExW$MH() {
        return RuntimeHelper.requireNonNull(constants$802.const$0,"CreateDirectoryExW");
    }
    /**
     * {@snippet :
     * BOOL CreateDirectoryExW(LPCWSTR lpTemplateDirectory, LPCWSTR lpNewDirectory, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
     * }
     */
    public static int CreateDirectoryExW(MemorySegment lpTemplateDirectory, MemorySegment lpNewDirectory, MemorySegment lpSecurityAttributes) {
        var mh$ = CreateDirectoryExW$MH();
        try {
            return (int)mh$.invokeExact(lpTemplateDirectory, lpNewDirectory, lpSecurityAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDirectoryTransactedA$MH() {
        return RuntimeHelper.requireNonNull(constants$802.const$1,"CreateDirectoryTransactedA");
    }
    /**
     * {@snippet :
     * BOOL CreateDirectoryTransactedA(LPCSTR lpTemplateDirectory, LPCSTR lpNewDirectory, LPSECURITY_ATTRIBUTES lpSecurityAttributes, HANDLE hTransaction);
     * }
     */
    public static int CreateDirectoryTransactedA(MemorySegment lpTemplateDirectory, MemorySegment lpNewDirectory, MemorySegment lpSecurityAttributes, MemorySegment hTransaction) {
        var mh$ = CreateDirectoryTransactedA$MH();
        try {
            return (int)mh$.invokeExact(lpTemplateDirectory, lpNewDirectory, lpSecurityAttributes, hTransaction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDirectoryTransactedW$MH() {
        return RuntimeHelper.requireNonNull(constants$802.const$2,"CreateDirectoryTransactedW");
    }
    /**
     * {@snippet :
     * BOOL CreateDirectoryTransactedW(LPCWSTR lpTemplateDirectory, LPCWSTR lpNewDirectory, LPSECURITY_ATTRIBUTES lpSecurityAttributes, HANDLE hTransaction);
     * }
     */
    public static int CreateDirectoryTransactedW(MemorySegment lpTemplateDirectory, MemorySegment lpNewDirectory, MemorySegment lpSecurityAttributes, MemorySegment hTransaction) {
        var mh$ = CreateDirectoryTransactedW$MH();
        try {
            return (int)mh$.invokeExact(lpTemplateDirectory, lpNewDirectory, lpSecurityAttributes, hTransaction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RemoveDirectoryTransactedA$MH() {
        return RuntimeHelper.requireNonNull(constants$802.const$3,"RemoveDirectoryTransactedA");
    }
    /**
     * {@snippet :
     * BOOL RemoveDirectoryTransactedA(LPCSTR lpPathName, HANDLE hTransaction);
     * }
     */
    public static int RemoveDirectoryTransactedA(MemorySegment lpPathName, MemorySegment hTransaction) {
        var mh$ = RemoveDirectoryTransactedA$MH();
        try {
            return (int)mh$.invokeExact(lpPathName, hTransaction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RemoveDirectoryTransactedW$MH() {
        return RuntimeHelper.requireNonNull(constants$802.const$4,"RemoveDirectoryTransactedW");
    }
    /**
     * {@snippet :
     * BOOL RemoveDirectoryTransactedW(LPCWSTR lpPathName, HANDLE hTransaction);
     * }
     */
    public static int RemoveDirectoryTransactedW(MemorySegment lpPathName, MemorySegment hTransaction) {
        var mh$ = RemoveDirectoryTransactedW$MH();
        try {
            return (int)mh$.invokeExact(lpPathName, hTransaction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFullPathNameTransactedA$MH() {
        return RuntimeHelper.requireNonNull(constants$802.const$5,"GetFullPathNameTransactedA");
    }
    /**
     * {@snippet :
     * DWORD GetFullPathNameTransactedA(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR* lpFilePart, HANDLE hTransaction);
     * }
     */
    public static int GetFullPathNameTransactedA(MemorySegment lpFileName, int nBufferLength, MemorySegment lpBuffer, MemorySegment lpFilePart, MemorySegment hTransaction) {
        var mh$ = GetFullPathNameTransactedA$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, nBufferLength, lpBuffer, lpFilePart, hTransaction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFullPathNameTransactedW$MH() {
        return RuntimeHelper.requireNonNull(constants$803.const$0,"GetFullPathNameTransactedW");
    }
    /**
     * {@snippet :
     * DWORD GetFullPathNameTransactedW(LPCWSTR lpFileName, DWORD nBufferLength, LPWSTR lpBuffer, LPWSTR* lpFilePart, HANDLE hTransaction);
     * }
     */
    public static int GetFullPathNameTransactedW(MemorySegment lpFileName, int nBufferLength, MemorySegment lpBuffer, MemorySegment lpFilePart, MemorySegment hTransaction) {
        var mh$ = GetFullPathNameTransactedW$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, nBufferLength, lpBuffer, lpFilePart, hTransaction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DefineDosDeviceA$MH() {
        return RuntimeHelper.requireNonNull(constants$803.const$1,"DefineDosDeviceA");
    }
    /**
     * {@snippet :
     * BOOL DefineDosDeviceA(DWORD dwFlags, LPCSTR lpDeviceName, LPCSTR lpTargetPath);
     * }
     */
    public static int DefineDosDeviceA(int dwFlags, MemorySegment lpDeviceName, MemorySegment lpTargetPath) {
        var mh$ = DefineDosDeviceA$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, lpDeviceName, lpTargetPath);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryDosDeviceA$MH() {
        return RuntimeHelper.requireNonNull(constants$803.const$2,"QueryDosDeviceA");
    }
    /**
     * {@snippet :
     * DWORD QueryDosDeviceA(LPCSTR lpDeviceName, LPSTR lpTargetPath, DWORD ucchMax);
     * }
     */
    public static int QueryDosDeviceA(MemorySegment lpDeviceName, MemorySegment lpTargetPath, int ucchMax) {
        var mh$ = QueryDosDeviceA$MH();
        try {
            return (int)mh$.invokeExact(lpDeviceName, lpTargetPath, ucchMax);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateFileTransactedA$MH() {
        return RuntimeHelper.requireNonNull(constants$803.const$4,"CreateFileTransactedA");
    }
    /**
     * {@snippet :
     * HANDLE CreateFileTransactedA(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile, HANDLE hTransaction, PUSHORT pusMiniVersion, PVOID lpExtendedParameter);
     * }
     */
    public static MemorySegment CreateFileTransactedA(MemorySegment lpFileName, int dwDesiredAccess, int dwShareMode, MemorySegment lpSecurityAttributes, int dwCreationDisposition, int dwFlagsAndAttributes, MemorySegment hTemplateFile, MemorySegment hTransaction, MemorySegment pusMiniVersion, MemorySegment lpExtendedParameter) {
        var mh$ = CreateFileTransactedA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpFileName, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile, hTransaction, pusMiniVersion, lpExtendedParameter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateFileTransactedW$MH() {
        return RuntimeHelper.requireNonNull(constants$803.const$5,"CreateFileTransactedW");
    }
    /**
     * {@snippet :
     * HANDLE CreateFileTransactedW(LPCWSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile, HANDLE hTransaction, PUSHORT pusMiniVersion, PVOID lpExtendedParameter);
     * }
     */
    public static MemorySegment CreateFileTransactedW(MemorySegment lpFileName, int dwDesiredAccess, int dwShareMode, MemorySegment lpSecurityAttributes, int dwCreationDisposition, int dwFlagsAndAttributes, MemorySegment hTemplateFile, MemorySegment hTransaction, MemorySegment pusMiniVersion, MemorySegment lpExtendedParameter) {
        var mh$ = CreateFileTransactedW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpFileName, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile, hTransaction, pusMiniVersion, lpExtendedParameter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReOpenFile$MH() {
        return RuntimeHelper.requireNonNull(constants$804.const$1,"ReOpenFile");
    }
    /**
     * {@snippet :
     * HANDLE ReOpenFile(HANDLE hOriginalFile, DWORD dwDesiredAccess, DWORD dwShareMode, DWORD dwFlagsAndAttributes);
     * }
     */
    public static MemorySegment ReOpenFile(MemorySegment hOriginalFile, int dwDesiredAccess, int dwShareMode, int dwFlagsAndAttributes) {
        var mh$ = ReOpenFile$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hOriginalFile, dwDesiredAccess, dwShareMode, dwFlagsAndAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFileAttributesTransactedA$MH() {
        return RuntimeHelper.requireNonNull(constants$804.const$2,"SetFileAttributesTransactedA");
    }
    /**
     * {@snippet :
     * BOOL SetFileAttributesTransactedA(LPCSTR lpFileName, DWORD dwFileAttributes, HANDLE hTransaction);
     * }
     */
    public static int SetFileAttributesTransactedA(MemorySegment lpFileName, int dwFileAttributes, MemorySegment hTransaction) {
        var mh$ = SetFileAttributesTransactedA$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, dwFileAttributes, hTransaction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFileAttributesTransactedW$MH() {
        return RuntimeHelper.requireNonNull(constants$804.const$3,"SetFileAttributesTransactedW");
    }
    /**
     * {@snippet :
     * BOOL SetFileAttributesTransactedW(LPCWSTR lpFileName, DWORD dwFileAttributes, HANDLE hTransaction);
     * }
     */
    public static int SetFileAttributesTransactedW(MemorySegment lpFileName, int dwFileAttributes, MemorySegment hTransaction) {
        var mh$ = SetFileAttributesTransactedW$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, dwFileAttributes, hTransaction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileAttributesTransactedA$MH() {
        return RuntimeHelper.requireNonNull(constants$804.const$4,"GetFileAttributesTransactedA");
    }
    /**
     * {@snippet :
     * BOOL GetFileAttributesTransactedA(LPCSTR lpFileName, GET_FILEEX_INFO_LEVELS fInfoLevelId, LPVOID lpFileInformation, HANDLE hTransaction);
     * }
     */
    public static int GetFileAttributesTransactedA(MemorySegment lpFileName, int fInfoLevelId, MemorySegment lpFileInformation, MemorySegment hTransaction) {
        var mh$ = GetFileAttributesTransactedA$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, fInfoLevelId, lpFileInformation, hTransaction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileAttributesTransactedW$MH() {
        return RuntimeHelper.requireNonNull(constants$804.const$5,"GetFileAttributesTransactedW");
    }
    /**
     * {@snippet :
     * BOOL GetFileAttributesTransactedW(LPCWSTR lpFileName, GET_FILEEX_INFO_LEVELS fInfoLevelId, LPVOID lpFileInformation, HANDLE hTransaction);
     * }
     */
    public static int GetFileAttributesTransactedW(MemorySegment lpFileName, int fInfoLevelId, MemorySegment lpFileInformation, MemorySegment hTransaction) {
        var mh$ = GetFileAttributesTransactedW$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, fInfoLevelId, lpFileInformation, hTransaction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCompressedFileSizeTransactedA$MH() {
        return RuntimeHelper.requireNonNull(constants$805.const$0,"GetCompressedFileSizeTransactedA");
    }
    /**
     * {@snippet :
     * DWORD GetCompressedFileSizeTransactedA(LPCSTR lpFileName, LPDWORD lpFileSizeHigh, HANDLE hTransaction);
     * }
     */
    public static int GetCompressedFileSizeTransactedA(MemorySegment lpFileName, MemorySegment lpFileSizeHigh, MemorySegment hTransaction) {
        var mh$ = GetCompressedFileSizeTransactedA$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, lpFileSizeHigh, hTransaction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCompressedFileSizeTransactedW$MH() {
        return RuntimeHelper.requireNonNull(constants$805.const$1,"GetCompressedFileSizeTransactedW");
    }
    /**
     * {@snippet :
     * DWORD GetCompressedFileSizeTransactedW(LPCWSTR lpFileName, LPDWORD lpFileSizeHigh, HANDLE hTransaction);
     * }
     */
    public static int GetCompressedFileSizeTransactedW(MemorySegment lpFileName, MemorySegment lpFileSizeHigh, MemorySegment hTransaction) {
        var mh$ = GetCompressedFileSizeTransactedW$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, lpFileSizeHigh, hTransaction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteFileTransactedA$MH() {
        return RuntimeHelper.requireNonNull(constants$805.const$2,"DeleteFileTransactedA");
    }
    /**
     * {@snippet :
     * BOOL DeleteFileTransactedA(LPCSTR lpFileName, HANDLE hTransaction);
     * }
     */
    public static int DeleteFileTransactedA(MemorySegment lpFileName, MemorySegment hTransaction) {
        var mh$ = DeleteFileTransactedA$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, hTransaction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteFileTransactedW$MH() {
        return RuntimeHelper.requireNonNull(constants$805.const$3,"DeleteFileTransactedW");
    }
    /**
     * {@snippet :
     * BOOL DeleteFileTransactedW(LPCWSTR lpFileName, HANDLE hTransaction);
     * }
     */
    public static int DeleteFileTransactedW(MemorySegment lpFileName, MemorySegment hTransaction) {
        var mh$ = DeleteFileTransactedW$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, hTransaction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CheckNameLegalDOS8Dot3A$MH() {
        return RuntimeHelper.requireNonNull(constants$805.const$4,"CheckNameLegalDOS8Dot3A");
    }
    /**
     * {@snippet :
     * BOOL CheckNameLegalDOS8Dot3A(LPCSTR lpName, LPSTR lpOemName, DWORD OemNameSize, PBOOL pbNameContainsSpaces, PBOOL pbNameLegal);
     * }
     */
    public static int CheckNameLegalDOS8Dot3A(MemorySegment lpName, MemorySegment lpOemName, int OemNameSize, MemorySegment pbNameContainsSpaces, MemorySegment pbNameLegal) {
        var mh$ = CheckNameLegalDOS8Dot3A$MH();
        try {
            return (int)mh$.invokeExact(lpName, lpOemName, OemNameSize, pbNameContainsSpaces, pbNameLegal);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CheckNameLegalDOS8Dot3W$MH() {
        return RuntimeHelper.requireNonNull(constants$805.const$5,"CheckNameLegalDOS8Dot3W");
    }
    /**
     * {@snippet :
     * BOOL CheckNameLegalDOS8Dot3W(LPCWSTR lpName, LPSTR lpOemName, DWORD OemNameSize, PBOOL pbNameContainsSpaces, PBOOL pbNameLegal);
     * }
     */
    public static int CheckNameLegalDOS8Dot3W(MemorySegment lpName, MemorySegment lpOemName, int OemNameSize, MemorySegment pbNameContainsSpaces, MemorySegment pbNameLegal) {
        var mh$ = CheckNameLegalDOS8Dot3W$MH();
        try {
            return (int)mh$.invokeExact(lpName, lpOemName, OemNameSize, pbNameContainsSpaces, pbNameLegal);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindFirstFileTransactedA$MH() {
        return RuntimeHelper.requireNonNull(constants$806.const$1,"FindFirstFileTransactedA");
    }
    /**
     * {@snippet :
     * HANDLE FindFirstFileTransactedA(LPCSTR lpFileName, FINDEX_INFO_LEVELS fInfoLevelId, LPVOID lpFindFileData, FINDEX_SEARCH_OPS fSearchOp, LPVOID lpSearchFilter, DWORD dwAdditionalFlags, HANDLE hTransaction);
     * }
     */
    public static MemorySegment FindFirstFileTransactedA(MemorySegment lpFileName, int fInfoLevelId, MemorySegment lpFindFileData, int fSearchOp, MemorySegment lpSearchFilter, int dwAdditionalFlags, MemorySegment hTransaction) {
        var mh$ = FindFirstFileTransactedA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpFileName, fInfoLevelId, lpFindFileData, fSearchOp, lpSearchFilter, dwAdditionalFlags, hTransaction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindFirstFileTransactedW$MH() {
        return RuntimeHelper.requireNonNull(constants$806.const$2,"FindFirstFileTransactedW");
    }
    /**
     * {@snippet :
     * HANDLE FindFirstFileTransactedW(LPCWSTR lpFileName, FINDEX_INFO_LEVELS fInfoLevelId, LPVOID lpFindFileData, FINDEX_SEARCH_OPS fSearchOp, LPVOID lpSearchFilter, DWORD dwAdditionalFlags, HANDLE hTransaction);
     * }
     */
    public static MemorySegment FindFirstFileTransactedW(MemorySegment lpFileName, int fInfoLevelId, MemorySegment lpFindFileData, int fSearchOp, MemorySegment lpSearchFilter, int dwAdditionalFlags, MemorySegment hTransaction) {
        var mh$ = FindFirstFileTransactedW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpFileName, fInfoLevelId, lpFindFileData, fSearchOp, lpSearchFilter, dwAdditionalFlags, hTransaction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CopyFileA$MH() {
        return RuntimeHelper.requireNonNull(constants$806.const$3,"CopyFileA");
    }
    /**
     * {@snippet :
     * BOOL CopyFileA(LPCSTR lpExistingFileName, LPCSTR lpNewFileName, BOOL bFailIfExists);
     * }
     */
    public static int CopyFileA(MemorySegment lpExistingFileName, MemorySegment lpNewFileName, int bFailIfExists) {
        var mh$ = CopyFileA$MH();
        try {
            return (int)mh$.invokeExact(lpExistingFileName, lpNewFileName, bFailIfExists);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CopyFileW$MH() {
        return RuntimeHelper.requireNonNull(constants$806.const$4,"CopyFileW");
    }
    /**
     * {@snippet :
     * BOOL CopyFileW(LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, BOOL bFailIfExists);
     * }
     */
    public static int CopyFileW(MemorySegment lpExistingFileName, MemorySegment lpNewFileName, int bFailIfExists) {
        var mh$ = CopyFileW$MH();
        try {
            return (int)mh$.invokeExact(lpExistingFileName, lpNewFileName, bFailIfExists);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CopyFileExA$MH() {
        return RuntimeHelper.requireNonNull(constants$807.const$3,"CopyFileExA");
    }
    /**
     * {@snippet :
     * BOOL CopyFileExA(LPCSTR lpExistingFileName, LPCSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, LPBOOL pbCancel, DWORD dwCopyFlags);
     * }
     */
    public static int CopyFileExA(MemorySegment lpExistingFileName, MemorySegment lpNewFileName, MemorySegment lpProgressRoutine, MemorySegment lpData, MemorySegment pbCancel, int dwCopyFlags) {
        var mh$ = CopyFileExA$MH();
        try {
            return (int)mh$.invokeExact(lpExistingFileName, lpNewFileName, lpProgressRoutine, lpData, pbCancel, dwCopyFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CopyFileExW$MH() {
        return RuntimeHelper.requireNonNull(constants$807.const$4,"CopyFileExW");
    }
    /**
     * {@snippet :
     * BOOL CopyFileExW(LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, LPBOOL pbCancel, DWORD dwCopyFlags);
     * }
     */
    public static int CopyFileExW(MemorySegment lpExistingFileName, MemorySegment lpNewFileName, MemorySegment lpProgressRoutine, MemorySegment lpData, MemorySegment pbCancel, int dwCopyFlags) {
        var mh$ = CopyFileExW$MH();
        try {
            return (int)mh$.invokeExact(lpExistingFileName, lpNewFileName, lpProgressRoutine, lpData, pbCancel, dwCopyFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CopyFileTransactedA$MH() {
        return RuntimeHelper.requireNonNull(constants$807.const$6,"CopyFileTransactedA");
    }
    /**
     * {@snippet :
     * BOOL CopyFileTransactedA(LPCSTR lpExistingFileName, LPCSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, LPBOOL pbCancel, DWORD dwCopyFlags, HANDLE hTransaction);
     * }
     */
    public static int CopyFileTransactedA(MemorySegment lpExistingFileName, MemorySegment lpNewFileName, MemorySegment lpProgressRoutine, MemorySegment lpData, MemorySegment pbCancel, int dwCopyFlags, MemorySegment hTransaction) {
        var mh$ = CopyFileTransactedA$MH();
        try {
            return (int)mh$.invokeExact(lpExistingFileName, lpNewFileName, lpProgressRoutine, lpData, pbCancel, dwCopyFlags, hTransaction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CopyFileTransactedW$MH() {
        return RuntimeHelper.requireNonNull(constants$808.const$0,"CopyFileTransactedW");
    }
    /**
     * {@snippet :
     * BOOL CopyFileTransactedW(LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, LPBOOL pbCancel, DWORD dwCopyFlags, HANDLE hTransaction);
     * }
     */
    public static int CopyFileTransactedW(MemorySegment lpExistingFileName, MemorySegment lpNewFileName, MemorySegment lpProgressRoutine, MemorySegment lpData, MemorySegment pbCancel, int dwCopyFlags, MemorySegment hTransaction) {
        var mh$ = CopyFileTransactedW$MH();
        try {
            return (int)mh$.invokeExact(lpExistingFileName, lpNewFileName, lpProgressRoutine, lpData, pbCancel, dwCopyFlags, hTransaction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum _COPYFILE2_MESSAGE_TYPE.COPYFILE2_CALLBACK_NONE = 0;
     * }
     */
    public static int COPYFILE2_CALLBACK_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum _COPYFILE2_MESSAGE_TYPE.COPYFILE2_CALLBACK_CHUNK_STARTED = 1;
     * }
     */
    public static int COPYFILE2_CALLBACK_CHUNK_STARTED() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum _COPYFILE2_MESSAGE_TYPE.COPYFILE2_CALLBACK_CHUNK_FINISHED = 2;
     * }
     */
    public static int COPYFILE2_CALLBACK_CHUNK_FINISHED() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum _COPYFILE2_MESSAGE_TYPE.COPYFILE2_CALLBACK_STREAM_STARTED = 3;
     * }
     */
    public static int COPYFILE2_CALLBACK_STREAM_STARTED() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum _COPYFILE2_MESSAGE_TYPE.COPYFILE2_CALLBACK_STREAM_FINISHED = 4;
     * }
     */
    public static int COPYFILE2_CALLBACK_STREAM_FINISHED() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum _COPYFILE2_MESSAGE_TYPE.COPYFILE2_CALLBACK_POLL_CONTINUE = 5;
     * }
     */
    public static int COPYFILE2_CALLBACK_POLL_CONTINUE() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum _COPYFILE2_MESSAGE_TYPE.COPYFILE2_CALLBACK_ERROR = 6;
     * }
     */
    public static int COPYFILE2_CALLBACK_ERROR() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum _COPYFILE2_MESSAGE_TYPE.COPYFILE2_CALLBACK_MAX = 7;
     * }
     */
    public static int COPYFILE2_CALLBACK_MAX() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum _COPYFILE2_MESSAGE_ACTION.COPYFILE2_PROGRESS_CONTINUE = 0;
     * }
     */
    public static int COPYFILE2_PROGRESS_CONTINUE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum _COPYFILE2_MESSAGE_ACTION.COPYFILE2_PROGRESS_CANCEL = 1;
     * }
     */
    public static int COPYFILE2_PROGRESS_CANCEL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum _COPYFILE2_MESSAGE_ACTION.COPYFILE2_PROGRESS_STOP = 2;
     * }
     */
    public static int COPYFILE2_PROGRESS_STOP() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum _COPYFILE2_MESSAGE_ACTION.COPYFILE2_PROGRESS_QUIET = 3;
     * }
     */
    public static int COPYFILE2_PROGRESS_QUIET() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum _COPYFILE2_MESSAGE_ACTION.COPYFILE2_PROGRESS_PAUSE = 4;
     * }
     */
    public static int COPYFILE2_PROGRESS_PAUSE() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum _COPYFILE2_COPY_PHASE.COPYFILE2_PHASE_NONE = 0;
     * }
     */
    public static int COPYFILE2_PHASE_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum _COPYFILE2_COPY_PHASE.COPYFILE2_PHASE_PREPARE_SOURCE = 1;
     * }
     */
    public static int COPYFILE2_PHASE_PREPARE_SOURCE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum _COPYFILE2_COPY_PHASE.COPYFILE2_PHASE_PREPARE_DEST = 2;
     * }
     */
    public static int COPYFILE2_PHASE_PREPARE_DEST() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum _COPYFILE2_COPY_PHASE.COPYFILE2_PHASE_READ_SOURCE = 3;
     * }
     */
    public static int COPYFILE2_PHASE_READ_SOURCE() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum _COPYFILE2_COPY_PHASE.COPYFILE2_PHASE_WRITE_DESTINATION = 4;
     * }
     */
    public static int COPYFILE2_PHASE_WRITE_DESTINATION() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum _COPYFILE2_COPY_PHASE.COPYFILE2_PHASE_SERVER_COPY = 5;
     * }
     */
    public static int COPYFILE2_PHASE_SERVER_COPY() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum _COPYFILE2_COPY_PHASE.COPYFILE2_PHASE_NAMEGRAFT_COPY = 6;
     * }
     */
    public static int COPYFILE2_PHASE_NAMEGRAFT_COPY() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum _COPYFILE2_COPY_PHASE.COPYFILE2_PHASE_MAX = 7;
     * }
     */
    public static int COPYFILE2_PHASE_MAX() {
        return (int)7L;
    }
    public static MethodHandle CopyFile2$MH() {
        return RuntimeHelper.requireNonNull(constants$816.const$0,"CopyFile2");
    }
    /**
     * {@snippet :
     * HRESULT CopyFile2(PCWSTR pwszExistingFileName, PCWSTR pwszNewFileName, COPYFILE2_EXTENDED_PARAMETERS* pExtendedParameters);
     * }
     */
    public static int CopyFile2(MemorySegment pwszExistingFileName, MemorySegment pwszNewFileName, MemorySegment pExtendedParameters) {
        var mh$ = CopyFile2$MH();
        try {
            return (int)mh$.invokeExact(pwszExistingFileName, pwszNewFileName, pExtendedParameters);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MoveFileA$MH() {
        return RuntimeHelper.requireNonNull(constants$816.const$1,"MoveFileA");
    }
    /**
     * {@snippet :
     * BOOL MoveFileA(LPCSTR lpExistingFileName, LPCSTR lpNewFileName);
     * }
     */
    public static int MoveFileA(MemorySegment lpExistingFileName, MemorySegment lpNewFileName) {
        var mh$ = MoveFileA$MH();
        try {
            return (int)mh$.invokeExact(lpExistingFileName, lpNewFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MoveFileW$MH() {
        return RuntimeHelper.requireNonNull(constants$816.const$2,"MoveFileW");
    }
    /**
     * {@snippet :
     * BOOL MoveFileW(LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName);
     * }
     */
    public static int MoveFileW(MemorySegment lpExistingFileName, MemorySegment lpNewFileName) {
        var mh$ = MoveFileW$MH();
        try {
            return (int)mh$.invokeExact(lpExistingFileName, lpNewFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MoveFileExA$MH() {
        return RuntimeHelper.requireNonNull(constants$816.const$3,"MoveFileExA");
    }
    /**
     * {@snippet :
     * BOOL MoveFileExA(LPCSTR lpExistingFileName, LPCSTR lpNewFileName, DWORD dwFlags);
     * }
     */
    public static int MoveFileExA(MemorySegment lpExistingFileName, MemorySegment lpNewFileName, int dwFlags) {
        var mh$ = MoveFileExA$MH();
        try {
            return (int)mh$.invokeExact(lpExistingFileName, lpNewFileName, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MoveFileExW$MH() {
        return RuntimeHelper.requireNonNull(constants$816.const$4,"MoveFileExW");
    }
    /**
     * {@snippet :
     * BOOL MoveFileExW(LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, DWORD dwFlags);
     * }
     */
    public static int MoveFileExW(MemorySegment lpExistingFileName, MemorySegment lpNewFileName, int dwFlags) {
        var mh$ = MoveFileExW$MH();
        try {
            return (int)mh$.invokeExact(lpExistingFileName, lpNewFileName, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MoveFileWithProgressA$MH() {
        return RuntimeHelper.requireNonNull(constants$816.const$5,"MoveFileWithProgressA");
    }
    /**
     * {@snippet :
     * BOOL MoveFileWithProgressA(LPCSTR lpExistingFileName, LPCSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, DWORD dwFlags);
     * }
     */
    public static int MoveFileWithProgressA(MemorySegment lpExistingFileName, MemorySegment lpNewFileName, MemorySegment lpProgressRoutine, MemorySegment lpData, int dwFlags) {
        var mh$ = MoveFileWithProgressA$MH();
        try {
            return (int)mh$.invokeExact(lpExistingFileName, lpNewFileName, lpProgressRoutine, lpData, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MoveFileWithProgressW$MH() {
        return RuntimeHelper.requireNonNull(constants$817.const$0,"MoveFileWithProgressW");
    }
    /**
     * {@snippet :
     * BOOL MoveFileWithProgressW(LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, DWORD dwFlags);
     * }
     */
    public static int MoveFileWithProgressW(MemorySegment lpExistingFileName, MemorySegment lpNewFileName, MemorySegment lpProgressRoutine, MemorySegment lpData, int dwFlags) {
        var mh$ = MoveFileWithProgressW$MH();
        try {
            return (int)mh$.invokeExact(lpExistingFileName, lpNewFileName, lpProgressRoutine, lpData, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MoveFileTransactedA$MH() {
        return RuntimeHelper.requireNonNull(constants$817.const$1,"MoveFileTransactedA");
    }
    /**
     * {@snippet :
     * BOOL MoveFileTransactedA(LPCSTR lpExistingFileName, LPCSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, DWORD dwFlags, HANDLE hTransaction);
     * }
     */
    public static int MoveFileTransactedA(MemorySegment lpExistingFileName, MemorySegment lpNewFileName, MemorySegment lpProgressRoutine, MemorySegment lpData, int dwFlags, MemorySegment hTransaction) {
        var mh$ = MoveFileTransactedA$MH();
        try {
            return (int)mh$.invokeExact(lpExistingFileName, lpNewFileName, lpProgressRoutine, lpData, dwFlags, hTransaction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MoveFileTransactedW$MH() {
        return RuntimeHelper.requireNonNull(constants$817.const$2,"MoveFileTransactedW");
    }
    /**
     * {@snippet :
     * BOOL MoveFileTransactedW(LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, DWORD dwFlags, HANDLE hTransaction);
     * }
     */
    public static int MoveFileTransactedW(MemorySegment lpExistingFileName, MemorySegment lpNewFileName, MemorySegment lpProgressRoutine, MemorySegment lpData, int dwFlags, MemorySegment hTransaction) {
        var mh$ = MoveFileTransactedW$MH();
        try {
            return (int)mh$.invokeExact(lpExistingFileName, lpNewFileName, lpProgressRoutine, lpData, dwFlags, hTransaction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReplaceFileA$MH() {
        return RuntimeHelper.requireNonNull(constants$817.const$3,"ReplaceFileA");
    }
    /**
     * {@snippet :
     * BOOL ReplaceFileA(LPCSTR lpReplacedFileName, LPCSTR lpReplacementFileName, LPCSTR lpBackupFileName, DWORD dwReplaceFlags, LPVOID lpExclude, LPVOID lpReserved);
     * }
     */
    public static int ReplaceFileA(MemorySegment lpReplacedFileName, MemorySegment lpReplacementFileName, MemorySegment lpBackupFileName, int dwReplaceFlags, MemorySegment lpExclude, MemorySegment lpReserved) {
        var mh$ = ReplaceFileA$MH();
        try {
            return (int)mh$.invokeExact(lpReplacedFileName, lpReplacementFileName, lpBackupFileName, dwReplaceFlags, lpExclude, lpReserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReplaceFileW$MH() {
        return RuntimeHelper.requireNonNull(constants$817.const$4,"ReplaceFileW");
    }
    /**
     * {@snippet :
     * BOOL ReplaceFileW(LPCWSTR lpReplacedFileName, LPCWSTR lpReplacementFileName, LPCWSTR lpBackupFileName, DWORD dwReplaceFlags, LPVOID lpExclude, LPVOID lpReserved);
     * }
     */
    public static int ReplaceFileW(MemorySegment lpReplacedFileName, MemorySegment lpReplacementFileName, MemorySegment lpBackupFileName, int dwReplaceFlags, MemorySegment lpExclude, MemorySegment lpReserved) {
        var mh$ = ReplaceFileW$MH();
        try {
            return (int)mh$.invokeExact(lpReplacedFileName, lpReplacementFileName, lpBackupFileName, dwReplaceFlags, lpExclude, lpReserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateHardLinkA$MH() {
        return RuntimeHelper.requireNonNull(constants$817.const$5,"CreateHardLinkA");
    }
    /**
     * {@snippet :
     * BOOL CreateHardLinkA(LPCSTR lpFileName, LPCSTR lpExistingFileName, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
     * }
     */
    public static int CreateHardLinkA(MemorySegment lpFileName, MemorySegment lpExistingFileName, MemorySegment lpSecurityAttributes) {
        var mh$ = CreateHardLinkA$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, lpExistingFileName, lpSecurityAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateHardLinkW$MH() {
        return RuntimeHelper.requireNonNull(constants$818.const$0,"CreateHardLinkW");
    }
    /**
     * {@snippet :
     * BOOL CreateHardLinkW(LPCWSTR lpFileName, LPCWSTR lpExistingFileName, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
     * }
     */
    public static int CreateHardLinkW(MemorySegment lpFileName, MemorySegment lpExistingFileName, MemorySegment lpSecurityAttributes) {
        var mh$ = CreateHardLinkW$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, lpExistingFileName, lpSecurityAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateHardLinkTransactedA$MH() {
        return RuntimeHelper.requireNonNull(constants$818.const$1,"CreateHardLinkTransactedA");
    }
    /**
     * {@snippet :
     * BOOL CreateHardLinkTransactedA(LPCSTR lpFileName, LPCSTR lpExistingFileName, LPSECURITY_ATTRIBUTES lpSecurityAttributes, HANDLE hTransaction);
     * }
     */
    public static int CreateHardLinkTransactedA(MemorySegment lpFileName, MemorySegment lpExistingFileName, MemorySegment lpSecurityAttributes, MemorySegment hTransaction) {
        var mh$ = CreateHardLinkTransactedA$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, lpExistingFileName, lpSecurityAttributes, hTransaction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateHardLinkTransactedW$MH() {
        return RuntimeHelper.requireNonNull(constants$818.const$2,"CreateHardLinkTransactedW");
    }
    /**
     * {@snippet :
     * BOOL CreateHardLinkTransactedW(LPCWSTR lpFileName, LPCWSTR lpExistingFileName, LPSECURITY_ATTRIBUTES lpSecurityAttributes, HANDLE hTransaction);
     * }
     */
    public static int CreateHardLinkTransactedW(MemorySegment lpFileName, MemorySegment lpExistingFileName, MemorySegment lpSecurityAttributes, MemorySegment hTransaction) {
        var mh$ = CreateHardLinkTransactedW$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, lpExistingFileName, lpSecurityAttributes, hTransaction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindFirstStreamTransactedW$MH() {
        return RuntimeHelper.requireNonNull(constants$818.const$4,"FindFirstStreamTransactedW");
    }
    /**
     * {@snippet :
     * HANDLE FindFirstStreamTransactedW(LPCWSTR lpFileName, STREAM_INFO_LEVELS InfoLevel, LPVOID lpFindStreamData, DWORD dwFlags, HANDLE hTransaction);
     * }
     */
    public static MemorySegment FindFirstStreamTransactedW(MemorySegment lpFileName, int InfoLevel, MemorySegment lpFindStreamData, int dwFlags, MemorySegment hTransaction) {
        var mh$ = FindFirstStreamTransactedW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpFileName, InfoLevel, lpFindStreamData, dwFlags, hTransaction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindFirstFileNameTransactedW$MH() {
        return RuntimeHelper.requireNonNull(constants$818.const$6,"FindFirstFileNameTransactedW");
    }
    /**
     * {@snippet :
     * HANDLE FindFirstFileNameTransactedW(LPCWSTR lpFileName, DWORD dwFlags, LPDWORD StringLength, PWSTR LinkName, HANDLE hTransaction);
     * }
     */
    public static MemorySegment FindFirstFileNameTransactedW(MemorySegment lpFileName, int dwFlags, MemorySegment StringLength, MemorySegment LinkName, MemorySegment hTransaction) {
        var mh$ = FindFirstFileNameTransactedW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpFileName, dwFlags, StringLength, LinkName, hTransaction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateNamedPipeA$MH() {
        return RuntimeHelper.requireNonNull(constants$819.const$0,"CreateNamedPipeA");
    }
    /**
     * {@snippet :
     * HANDLE CreateNamedPipeA(LPCSTR lpName, DWORD dwOpenMode, DWORD dwPipeMode, DWORD nMaxInstances, DWORD nOutBufferSize, DWORD nInBufferSize, DWORD nDefaultTimeOut, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
     * }
     */
    public static MemorySegment CreateNamedPipeA(MemorySegment lpName, int dwOpenMode, int dwPipeMode, int nMaxInstances, int nOutBufferSize, int nInBufferSize, int nDefaultTimeOut, MemorySegment lpSecurityAttributes) {
        var mh$ = CreateNamedPipeA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpName, dwOpenMode, dwPipeMode, nMaxInstances, nOutBufferSize, nInBufferSize, nDefaultTimeOut, lpSecurityAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNamedPipeHandleStateA$MH() {
        return RuntimeHelper.requireNonNull(constants$819.const$1,"GetNamedPipeHandleStateA");
    }
    /**
     * {@snippet :
     * BOOL GetNamedPipeHandleStateA(HANDLE hNamedPipe, LPDWORD lpState, LPDWORD lpCurInstances, LPDWORD lpMaxCollectionCount, LPDWORD lpCollectDataTimeout, LPSTR lpUserName, DWORD nMaxUserNameSize);
     * }
     */
    public static int GetNamedPipeHandleStateA(MemorySegment hNamedPipe, MemorySegment lpState, MemorySegment lpCurInstances, MemorySegment lpMaxCollectionCount, MemorySegment lpCollectDataTimeout, MemorySegment lpUserName, int nMaxUserNameSize) {
        var mh$ = GetNamedPipeHandleStateA$MH();
        try {
            return (int)mh$.invokeExact(hNamedPipe, lpState, lpCurInstances, lpMaxCollectionCount, lpCollectDataTimeout, lpUserName, nMaxUserNameSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CallNamedPipeA$MH() {
        return RuntimeHelper.requireNonNull(constants$819.const$2,"CallNamedPipeA");
    }
    /**
     * {@snippet :
     * BOOL CallNamedPipeA(LPCSTR lpNamedPipeName, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesRead, DWORD nTimeOut);
     * }
     */
    public static int CallNamedPipeA(MemorySegment lpNamedPipeName, MemorySegment lpInBuffer, int nInBufferSize, MemorySegment lpOutBuffer, int nOutBufferSize, MemorySegment lpBytesRead, int nTimeOut) {
        var mh$ = CallNamedPipeA$MH();
        try {
            return (int)mh$.invokeExact(lpNamedPipeName, lpInBuffer, nInBufferSize, lpOutBuffer, nOutBufferSize, lpBytesRead, nTimeOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WaitNamedPipeA$MH() {
        return RuntimeHelper.requireNonNull(constants$819.const$3,"WaitNamedPipeA");
    }
    /**
     * {@snippet :
     * BOOL WaitNamedPipeA(LPCSTR lpNamedPipeName, DWORD nTimeOut);
     * }
     */
    public static int WaitNamedPipeA(MemorySegment lpNamedPipeName, int nTimeOut) {
        var mh$ = WaitNamedPipeA$MH();
        try {
            return (int)mh$.invokeExact(lpNamedPipeName, nTimeOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNamedPipeClientComputerNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$819.const$4,"GetNamedPipeClientComputerNameA");
    }
    /**
     * {@snippet :
     * BOOL GetNamedPipeClientComputerNameA(HANDLE Pipe, LPSTR ClientComputerName, ULONG ClientComputerNameLength);
     * }
     */
    public static int GetNamedPipeClientComputerNameA(MemorySegment Pipe, MemorySegment ClientComputerName, int ClientComputerNameLength) {
        var mh$ = GetNamedPipeClientComputerNameA$MH();
        try {
            return (int)mh$.invokeExact(Pipe, ClientComputerName, ClientComputerNameLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNamedPipeClientProcessId$MH() {
        return RuntimeHelper.requireNonNull(constants$819.const$5,"GetNamedPipeClientProcessId");
    }
    /**
     * {@snippet :
     * BOOL GetNamedPipeClientProcessId(HANDLE Pipe, PULONG ClientProcessId);
     * }
     */
    public static int GetNamedPipeClientProcessId(MemorySegment Pipe, MemorySegment ClientProcessId) {
        var mh$ = GetNamedPipeClientProcessId$MH();
        try {
            return (int)mh$.invokeExact(Pipe, ClientProcessId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNamedPipeClientSessionId$MH() {
        return RuntimeHelper.requireNonNull(constants$820.const$0,"GetNamedPipeClientSessionId");
    }
    /**
     * {@snippet :
     * BOOL GetNamedPipeClientSessionId(HANDLE Pipe, PULONG ClientSessionId);
     * }
     */
    public static int GetNamedPipeClientSessionId(MemorySegment Pipe, MemorySegment ClientSessionId) {
        var mh$ = GetNamedPipeClientSessionId$MH();
        try {
            return (int)mh$.invokeExact(Pipe, ClientSessionId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNamedPipeServerProcessId$MH() {
        return RuntimeHelper.requireNonNull(constants$820.const$1,"GetNamedPipeServerProcessId");
    }
    /**
     * {@snippet :
     * BOOL GetNamedPipeServerProcessId(HANDLE Pipe, PULONG ServerProcessId);
     * }
     */
    public static int GetNamedPipeServerProcessId(MemorySegment Pipe, MemorySegment ServerProcessId) {
        var mh$ = GetNamedPipeServerProcessId$MH();
        try {
            return (int)mh$.invokeExact(Pipe, ServerProcessId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNamedPipeServerSessionId$MH() {
        return RuntimeHelper.requireNonNull(constants$820.const$2,"GetNamedPipeServerSessionId");
    }
    /**
     * {@snippet :
     * BOOL GetNamedPipeServerSessionId(HANDLE Pipe, PULONG ServerSessionId);
     * }
     */
    public static int GetNamedPipeServerSessionId(MemorySegment Pipe, MemorySegment ServerSessionId) {
        var mh$ = GetNamedPipeServerSessionId$MH();
        try {
            return (int)mh$.invokeExact(Pipe, ServerSessionId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetVolumeLabelA$MH() {
        return RuntimeHelper.requireNonNull(constants$820.const$3,"SetVolumeLabelA");
    }
    /**
     * {@snippet :
     * BOOL SetVolumeLabelA(LPCSTR lpRootPathName, LPCSTR lpVolumeName);
     * }
     */
    public static int SetVolumeLabelA(MemorySegment lpRootPathName, MemorySegment lpVolumeName) {
        var mh$ = SetVolumeLabelA$MH();
        try {
            return (int)mh$.invokeExact(lpRootPathName, lpVolumeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetVolumeLabelW$MH() {
        return RuntimeHelper.requireNonNull(constants$820.const$4,"SetVolumeLabelW");
    }
    /**
     * {@snippet :
     * BOOL SetVolumeLabelW(LPCWSTR lpRootPathName, LPCWSTR lpVolumeName);
     * }
     */
    public static int SetVolumeLabelW(MemorySegment lpRootPathName, MemorySegment lpVolumeName) {
        var mh$ = SetVolumeLabelW$MH();
        try {
            return (int)mh$.invokeExact(lpRootPathName, lpVolumeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFileBandwidthReservation$MH() {
        return RuntimeHelper.requireNonNull(constants$820.const$6,"SetFileBandwidthReservation");
    }
    /**
     * {@snippet :
     * BOOL SetFileBandwidthReservation(HANDLE hFile, DWORD nPeriodMilliseconds, DWORD nBytesPerPeriod, BOOL bDiscardable, LPDWORD lpTransferSize, LPDWORD lpNumOutstandingRequests);
     * }
     */
    public static int SetFileBandwidthReservation(MemorySegment hFile, int nPeriodMilliseconds, int nBytesPerPeriod, int bDiscardable, MemorySegment lpTransferSize, MemorySegment lpNumOutstandingRequests) {
        var mh$ = SetFileBandwidthReservation$MH();
        try {
            return (int)mh$.invokeExact(hFile, nPeriodMilliseconds, nBytesPerPeriod, bDiscardable, lpTransferSize, lpNumOutstandingRequests);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileBandwidthReservation$MH() {
        return RuntimeHelper.requireNonNull(constants$821.const$0,"GetFileBandwidthReservation");
    }
    /**
     * {@snippet :
     * BOOL GetFileBandwidthReservation(HANDLE hFile, LPDWORD lpPeriodMilliseconds, LPDWORD lpBytesPerPeriod, LPBOOL pDiscardable, LPDWORD lpTransferSize, LPDWORD lpNumOutstandingRequests);
     * }
     */
    public static int GetFileBandwidthReservation(MemorySegment hFile, MemorySegment lpPeriodMilliseconds, MemorySegment lpBytesPerPeriod, MemorySegment pDiscardable, MemorySegment lpTransferSize, MemorySegment lpNumOutstandingRequests) {
        var mh$ = GetFileBandwidthReservation$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpPeriodMilliseconds, lpBytesPerPeriod, pDiscardable, lpTransferSize, lpNumOutstandingRequests);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ClearEventLogA$MH() {
        return RuntimeHelper.requireNonNull(constants$821.const$1,"ClearEventLogA");
    }
    /**
     * {@snippet :
     * BOOL ClearEventLogA(HANDLE hEventLog, LPCSTR lpBackupFileName);
     * }
     */
    public static int ClearEventLogA(MemorySegment hEventLog, MemorySegment lpBackupFileName) {
        var mh$ = ClearEventLogA$MH();
        try {
            return (int)mh$.invokeExact(hEventLog, lpBackupFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ClearEventLogW$MH() {
        return RuntimeHelper.requireNonNull(constants$821.const$2,"ClearEventLogW");
    }
    /**
     * {@snippet :
     * BOOL ClearEventLogW(HANDLE hEventLog, LPCWSTR lpBackupFileName);
     * }
     */
    public static int ClearEventLogW(MemorySegment hEventLog, MemorySegment lpBackupFileName) {
        var mh$ = ClearEventLogW$MH();
        try {
            return (int)mh$.invokeExact(hEventLog, lpBackupFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BackupEventLogA$MH() {
        return RuntimeHelper.requireNonNull(constants$821.const$3,"BackupEventLogA");
    }
    /**
     * {@snippet :
     * BOOL BackupEventLogA(HANDLE hEventLog, LPCSTR lpBackupFileName);
     * }
     */
    public static int BackupEventLogA(MemorySegment hEventLog, MemorySegment lpBackupFileName) {
        var mh$ = BackupEventLogA$MH();
        try {
            return (int)mh$.invokeExact(hEventLog, lpBackupFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BackupEventLogW$MH() {
        return RuntimeHelper.requireNonNull(constants$821.const$4,"BackupEventLogW");
    }
    /**
     * {@snippet :
     * BOOL BackupEventLogW(HANDLE hEventLog, LPCWSTR lpBackupFileName);
     * }
     */
    public static int BackupEventLogW(MemorySegment hEventLog, MemorySegment lpBackupFileName) {
        var mh$ = BackupEventLogW$MH();
        try {
            return (int)mh$.invokeExact(hEventLog, lpBackupFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CloseEventLog$MH() {
        return RuntimeHelper.requireNonNull(constants$821.const$5,"CloseEventLog");
    }
    /**
     * {@snippet :
     * BOOL CloseEventLog(HANDLE hEventLog);
     * }
     */
    public static int CloseEventLog(MemorySegment hEventLog) {
        var mh$ = CloseEventLog$MH();
        try {
            return (int)mh$.invokeExact(hEventLog);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeregisterEventSource$MH() {
        return RuntimeHelper.requireNonNull(constants$822.const$0,"DeregisterEventSource");
    }
    /**
     * {@snippet :
     * BOOL DeregisterEventSource(HANDLE hEventLog);
     * }
     */
    public static int DeregisterEventSource(MemorySegment hEventLog) {
        var mh$ = DeregisterEventSource$MH();
        try {
            return (int)mh$.invokeExact(hEventLog);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NotifyChangeEventLog$MH() {
        return RuntimeHelper.requireNonNull(constants$822.const$1,"NotifyChangeEventLog");
    }
    /**
     * {@snippet :
     * BOOL NotifyChangeEventLog(HANDLE hEventLog, HANDLE hEvent);
     * }
     */
    public static int NotifyChangeEventLog(MemorySegment hEventLog, MemorySegment hEvent) {
        var mh$ = NotifyChangeEventLog$MH();
        try {
            return (int)mh$.invokeExact(hEventLog, hEvent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNumberOfEventLogRecords$MH() {
        return RuntimeHelper.requireNonNull(constants$822.const$2,"GetNumberOfEventLogRecords");
    }
    /**
     * {@snippet :
     * BOOL GetNumberOfEventLogRecords(HANDLE hEventLog, PDWORD NumberOfRecords);
     * }
     */
    public static int GetNumberOfEventLogRecords(MemorySegment hEventLog, MemorySegment NumberOfRecords) {
        var mh$ = GetNumberOfEventLogRecords$MH();
        try {
            return (int)mh$.invokeExact(hEventLog, NumberOfRecords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetOldestEventLogRecord$MH() {
        return RuntimeHelper.requireNonNull(constants$822.const$3,"GetOldestEventLogRecord");
    }
    /**
     * {@snippet :
     * BOOL GetOldestEventLogRecord(HANDLE hEventLog, PDWORD OldestRecord);
     * }
     */
    public static int GetOldestEventLogRecord(MemorySegment hEventLog, MemorySegment OldestRecord) {
        var mh$ = GetOldestEventLogRecord$MH();
        try {
            return (int)mh$.invokeExact(hEventLog, OldestRecord);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenEventLogA$MH() {
        return RuntimeHelper.requireNonNull(constants$822.const$4,"OpenEventLogA");
    }
    /**
     * {@snippet :
     * HANDLE OpenEventLogA(LPCSTR lpUNCServerName, LPCSTR lpSourceName);
     * }
     */
    public static MemorySegment OpenEventLogA(MemorySegment lpUNCServerName, MemorySegment lpSourceName) {
        var mh$ = OpenEventLogA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpUNCServerName, lpSourceName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenEventLogW$MH() {
        return RuntimeHelper.requireNonNull(constants$822.const$5,"OpenEventLogW");
    }
    /**
     * {@snippet :
     * HANDLE OpenEventLogW(LPCWSTR lpUNCServerName, LPCWSTR lpSourceName);
     * }
     */
    public static MemorySegment OpenEventLogW(MemorySegment lpUNCServerName, MemorySegment lpSourceName) {
        var mh$ = OpenEventLogW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpUNCServerName, lpSourceName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterEventSourceA$MH() {
        return RuntimeHelper.requireNonNull(constants$823.const$0,"RegisterEventSourceA");
    }
    /**
     * {@snippet :
     * HANDLE RegisterEventSourceA(LPCSTR lpUNCServerName, LPCSTR lpSourceName);
     * }
     */
    public static MemorySegment RegisterEventSourceA(MemorySegment lpUNCServerName, MemorySegment lpSourceName) {
        var mh$ = RegisterEventSourceA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpUNCServerName, lpSourceName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterEventSourceW$MH() {
        return RuntimeHelper.requireNonNull(constants$823.const$1,"RegisterEventSourceW");
    }
    /**
     * {@snippet :
     * HANDLE RegisterEventSourceW(LPCWSTR lpUNCServerName, LPCWSTR lpSourceName);
     * }
     */
    public static MemorySegment RegisterEventSourceW(MemorySegment lpUNCServerName, MemorySegment lpSourceName) {
        var mh$ = RegisterEventSourceW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpUNCServerName, lpSourceName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenBackupEventLogA$MH() {
        return RuntimeHelper.requireNonNull(constants$823.const$2,"OpenBackupEventLogA");
    }
    /**
     * {@snippet :
     * HANDLE OpenBackupEventLogA(LPCSTR lpUNCServerName, LPCSTR lpFileName);
     * }
     */
    public static MemorySegment OpenBackupEventLogA(MemorySegment lpUNCServerName, MemorySegment lpFileName) {
        var mh$ = OpenBackupEventLogA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpUNCServerName, lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenBackupEventLogW$MH() {
        return RuntimeHelper.requireNonNull(constants$823.const$3,"OpenBackupEventLogW");
    }
    /**
     * {@snippet :
     * HANDLE OpenBackupEventLogW(LPCWSTR lpUNCServerName, LPCWSTR lpFileName);
     * }
     */
    public static MemorySegment OpenBackupEventLogW(MemorySegment lpUNCServerName, MemorySegment lpFileName) {
        var mh$ = OpenBackupEventLogW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpUNCServerName, lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadEventLogA$MH() {
        return RuntimeHelper.requireNonNull(constants$823.const$5,"ReadEventLogA");
    }
    /**
     * {@snippet :
     * BOOL ReadEventLogA(HANDLE hEventLog, DWORD dwReadFlags, DWORD dwRecordOffset, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, DWORD* pnBytesRead, DWORD* pnMinNumberOfBytesNeeded);
     * }
     */
    public static int ReadEventLogA(MemorySegment hEventLog, int dwReadFlags, int dwRecordOffset, MemorySegment lpBuffer, int nNumberOfBytesToRead, MemorySegment pnBytesRead, MemorySegment pnMinNumberOfBytesNeeded) {
        var mh$ = ReadEventLogA$MH();
        try {
            return (int)mh$.invokeExact(hEventLog, dwReadFlags, dwRecordOffset, lpBuffer, nNumberOfBytesToRead, pnBytesRead, pnMinNumberOfBytesNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadEventLogW$MH() {
        return RuntimeHelper.requireNonNull(constants$824.const$0,"ReadEventLogW");
    }
    /**
     * {@snippet :
     * BOOL ReadEventLogW(HANDLE hEventLog, DWORD dwReadFlags, DWORD dwRecordOffset, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, DWORD* pnBytesRead, DWORD* pnMinNumberOfBytesNeeded);
     * }
     */
    public static int ReadEventLogW(MemorySegment hEventLog, int dwReadFlags, int dwRecordOffset, MemorySegment lpBuffer, int nNumberOfBytesToRead, MemorySegment pnBytesRead, MemorySegment pnMinNumberOfBytesNeeded) {
        var mh$ = ReadEventLogW$MH();
        try {
            return (int)mh$.invokeExact(hEventLog, dwReadFlags, dwRecordOffset, lpBuffer, nNumberOfBytesToRead, pnBytesRead, pnMinNumberOfBytesNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReportEventA$MH() {
        return RuntimeHelper.requireNonNull(constants$824.const$2,"ReportEventA");
    }
    /**
     * {@snippet :
     * BOOL ReportEventA(HANDLE hEventLog, WORD wType, WORD wCategory, DWORD dwEventID, PSID lpUserSid, WORD wNumStrings, DWORD dwDataSize, LPCSTR* lpStrings, LPVOID lpRawData);
     * }
     */
    public static int ReportEventA(MemorySegment hEventLog, short wType, short wCategory, int dwEventID, MemorySegment lpUserSid, short wNumStrings, int dwDataSize, MemorySegment lpStrings, MemorySegment lpRawData) {
        var mh$ = ReportEventA$MH();
        try {
            return (int)mh$.invokeExact(hEventLog, wType, wCategory, dwEventID, lpUserSid, wNumStrings, dwDataSize, lpStrings, lpRawData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReportEventW$MH() {
        return RuntimeHelper.requireNonNull(constants$824.const$3,"ReportEventW");
    }
    /**
     * {@snippet :
     * BOOL ReportEventW(HANDLE hEventLog, WORD wType, WORD wCategory, DWORD dwEventID, PSID lpUserSid, WORD wNumStrings, DWORD dwDataSize, LPCWSTR* lpStrings, LPVOID lpRawData);
     * }
     */
    public static int ReportEventW(MemorySegment hEventLog, short wType, short wCategory, int dwEventID, MemorySegment lpUserSid, short wNumStrings, int dwDataSize, MemorySegment lpStrings, MemorySegment lpRawData) {
        var mh$ = ReportEventW$MH();
        try {
            return (int)mh$.invokeExact(hEventLog, wType, wCategory, dwEventID, lpUserSid, wNumStrings, dwDataSize, lpStrings, lpRawData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _EVENTLOG_FULL_INFORMATION* LPEVENTLOG_FULL_INFORMATION;
     * }
     */
    public static final AddressLayout LPEVENTLOG_FULL_INFORMATION = RuntimeHelper.POINTER;
    public static MethodHandle GetEventLogInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$825.const$0,"GetEventLogInformation");
    }
    /**
     * {@snippet :
     * BOOL GetEventLogInformation(HANDLE hEventLog, DWORD dwInfoLevel, LPVOID lpBuffer, DWORD cbBufSize, LPDWORD pcbBytesNeeded);
     * }
     */
    public static int GetEventLogInformation(MemorySegment hEventLog, int dwInfoLevel, MemorySegment lpBuffer, int cbBufSize, MemorySegment pcbBytesNeeded) {
        var mh$ = GetEventLogInformation$MH();
        try {
            return (int)mh$.invokeExact(hEventLog, dwInfoLevel, lpBuffer, cbBufSize, pcbBytesNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned long OPERATION_ID;
     * }
     */
    public static final OfInt OPERATION_ID = JAVA_INT;
    /**
     * {@snippet :
     * typedef struct _OPERATION_START_PARAMETERS* POPERATION_START_PARAMETERS;
     * }
     */
    public static final AddressLayout POPERATION_START_PARAMETERS = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _OPERATION_END_PARAMETERS* POPERATION_END_PARAMETERS;
     * }
     */
    public static final AddressLayout POPERATION_END_PARAMETERS = RuntimeHelper.POINTER;
    public static MethodHandle OperationStart$MH() {
        return RuntimeHelper.requireNonNull(constants$826.const$3,"OperationStart");
    }
    /**
     * {@snippet :
     * BOOL OperationStart(OPERATION_START_PARAMETERS* OperationStartParams);
     * }
     */
    public static int OperationStart(MemorySegment OperationStartParams) {
        var mh$ = OperationStart$MH();
        try {
            return (int)mh$.invokeExact(OperationStartParams);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OperationEnd$MH() {
        return RuntimeHelper.requireNonNull(constants$826.const$4,"OperationEnd");
    }
    /**
     * {@snippet :
     * BOOL OperationEnd(OPERATION_END_PARAMETERS* OperationEndParams);
     * }
     */
    public static int OperationEnd(MemorySegment OperationEndParams) {
        var mh$ = OperationEnd$MH();
        try {
            return (int)mh$.invokeExact(OperationEndParams);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AccessCheckAndAuditAlarmA$MH() {
        return RuntimeHelper.requireNonNull(constants$826.const$5,"AccessCheckAndAuditAlarmA");
    }
    /**
     * {@snippet :
     * BOOL AccessCheckAndAuditAlarmA(LPCSTR SubsystemName, LPVOID HandleId, LPSTR ObjectTypeName, LPSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, DWORD DesiredAccess, PGENERIC_MAPPING GenericMapping, BOOL ObjectCreation, LPDWORD GrantedAccess, LPBOOL AccessStatus, LPBOOL pfGenerateOnClose);
     * }
     */
    public static int AccessCheckAndAuditAlarmA(MemorySegment SubsystemName, MemorySegment HandleId, MemorySegment ObjectTypeName, MemorySegment ObjectName, MemorySegment SecurityDescriptor, int DesiredAccess, MemorySegment GenericMapping, int ObjectCreation, MemorySegment GrantedAccess, MemorySegment AccessStatus, MemorySegment pfGenerateOnClose) {
        var mh$ = AccessCheckAndAuditAlarmA$MH();
        try {
            return (int)mh$.invokeExact(SubsystemName, HandleId, ObjectTypeName, ObjectName, SecurityDescriptor, DesiredAccess, GenericMapping, ObjectCreation, GrantedAccess, AccessStatus, pfGenerateOnClose);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AccessCheckByTypeAndAuditAlarmA$MH() {
        return RuntimeHelper.requireNonNull(constants$827.const$0,"AccessCheckByTypeAndAuditAlarmA");
    }
    /**
     * {@snippet :
     * BOOL AccessCheckByTypeAndAuditAlarmA(LPCSTR SubsystemName, LPVOID HandleId, LPCSTR ObjectTypeName, LPCSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, DWORD DesiredAccess, AUDIT_EVENT_TYPE AuditType, DWORD Flags, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOL ObjectCreation, LPDWORD GrantedAccess, LPBOOL AccessStatus, LPBOOL pfGenerateOnClose);
     * }
     */
    public static int AccessCheckByTypeAndAuditAlarmA(MemorySegment SubsystemName, MemorySegment HandleId, MemorySegment ObjectTypeName, MemorySegment ObjectName, MemorySegment SecurityDescriptor, MemorySegment PrincipalSelfSid, int DesiredAccess, int AuditType, int Flags, MemorySegment ObjectTypeList, int ObjectTypeListLength, MemorySegment GenericMapping, int ObjectCreation, MemorySegment GrantedAccess, MemorySegment AccessStatus, MemorySegment pfGenerateOnClose) {
        var mh$ = AccessCheckByTypeAndAuditAlarmA$MH();
        try {
            return (int)mh$.invokeExact(SubsystemName, HandleId, ObjectTypeName, ObjectName, SecurityDescriptor, PrincipalSelfSid, DesiredAccess, AuditType, Flags, ObjectTypeList, ObjectTypeListLength, GenericMapping, ObjectCreation, GrantedAccess, AccessStatus, pfGenerateOnClose);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AccessCheckByTypeResultListAndAuditAlarmA$MH() {
        return RuntimeHelper.requireNonNull(constants$827.const$1,"AccessCheckByTypeResultListAndAuditAlarmA");
    }
    /**
     * {@snippet :
     * BOOL AccessCheckByTypeResultListAndAuditAlarmA(LPCSTR SubsystemName, LPVOID HandleId, LPCSTR ObjectTypeName, LPCSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, DWORD DesiredAccess, AUDIT_EVENT_TYPE AuditType, DWORD Flags, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOL ObjectCreation, LPDWORD GrantedAccess, LPDWORD AccessStatusList, LPBOOL pfGenerateOnClose);
     * }
     */
    public static int AccessCheckByTypeResultListAndAuditAlarmA(MemorySegment SubsystemName, MemorySegment HandleId, MemorySegment ObjectTypeName, MemorySegment ObjectName, MemorySegment SecurityDescriptor, MemorySegment PrincipalSelfSid, int DesiredAccess, int AuditType, int Flags, MemorySegment ObjectTypeList, int ObjectTypeListLength, MemorySegment GenericMapping, int ObjectCreation, MemorySegment GrantedAccess, MemorySegment AccessStatusList, MemorySegment pfGenerateOnClose) {
        var mh$ = AccessCheckByTypeResultListAndAuditAlarmA$MH();
        try {
            return (int)mh$.invokeExact(SubsystemName, HandleId, ObjectTypeName, ObjectName, SecurityDescriptor, PrincipalSelfSid, DesiredAccess, AuditType, Flags, ObjectTypeList, ObjectTypeListLength, GenericMapping, ObjectCreation, GrantedAccess, AccessStatusList, pfGenerateOnClose);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AccessCheckByTypeResultListAndAuditAlarmByHandleA$MH() {
        return RuntimeHelper.requireNonNull(constants$827.const$2,"AccessCheckByTypeResultListAndAuditAlarmByHandleA");
    }
    /**
     * {@snippet :
     * BOOL AccessCheckByTypeResultListAndAuditAlarmByHandleA(LPCSTR SubsystemName, LPVOID HandleId, HANDLE ClientToken, LPCSTR ObjectTypeName, LPCSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, DWORD DesiredAccess, AUDIT_EVENT_TYPE AuditType, DWORD Flags, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOL ObjectCreation, LPDWORD GrantedAccess, LPDWORD AccessStatusList, LPBOOL pfGenerateOnClose);
     * }
     */
    public static int AccessCheckByTypeResultListAndAuditAlarmByHandleA(MemorySegment SubsystemName, MemorySegment HandleId, MemorySegment ClientToken, MemorySegment ObjectTypeName, MemorySegment ObjectName, MemorySegment SecurityDescriptor, MemorySegment PrincipalSelfSid, int DesiredAccess, int AuditType, int Flags, MemorySegment ObjectTypeList, int ObjectTypeListLength, MemorySegment GenericMapping, int ObjectCreation, MemorySegment GrantedAccess, MemorySegment AccessStatusList, MemorySegment pfGenerateOnClose) {
        var mh$ = AccessCheckByTypeResultListAndAuditAlarmByHandleA$MH();
        try {
            return (int)mh$.invokeExact(SubsystemName, HandleId, ClientToken, ObjectTypeName, ObjectName, SecurityDescriptor, PrincipalSelfSid, DesiredAccess, AuditType, Flags, ObjectTypeList, ObjectTypeListLength, GenericMapping, ObjectCreation, GrantedAccess, AccessStatusList, pfGenerateOnClose);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ObjectOpenAuditAlarmA$MH() {
        return RuntimeHelper.requireNonNull(constants$827.const$3,"ObjectOpenAuditAlarmA");
    }
    /**
     * {@snippet :
     * BOOL ObjectOpenAuditAlarmA(LPCSTR SubsystemName, LPVOID HandleId, LPSTR ObjectTypeName, LPSTR ObjectName, PSECURITY_DESCRIPTOR pSecurityDescriptor, HANDLE ClientToken, DWORD DesiredAccess, DWORD GrantedAccess, PPRIVILEGE_SET Privileges, BOOL ObjectCreation, BOOL AccessGranted, LPBOOL GenerateOnClose);
     * }
     */
    public static int ObjectOpenAuditAlarmA(MemorySegment SubsystemName, MemorySegment HandleId, MemorySegment ObjectTypeName, MemorySegment ObjectName, MemorySegment pSecurityDescriptor, MemorySegment ClientToken, int DesiredAccess, int GrantedAccess, MemorySegment Privileges, int ObjectCreation, int AccessGranted, MemorySegment GenerateOnClose) {
        var mh$ = ObjectOpenAuditAlarmA$MH();
        try {
            return (int)mh$.invokeExact(SubsystemName, HandleId, ObjectTypeName, ObjectName, pSecurityDescriptor, ClientToken, DesiredAccess, GrantedAccess, Privileges, ObjectCreation, AccessGranted, GenerateOnClose);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ObjectPrivilegeAuditAlarmA$MH() {
        return RuntimeHelper.requireNonNull(constants$827.const$4,"ObjectPrivilegeAuditAlarmA");
    }
    /**
     * {@snippet :
     * BOOL ObjectPrivilegeAuditAlarmA(LPCSTR SubsystemName, LPVOID HandleId, HANDLE ClientToken, DWORD DesiredAccess, PPRIVILEGE_SET Privileges, BOOL AccessGranted);
     * }
     */
    public static int ObjectPrivilegeAuditAlarmA(MemorySegment SubsystemName, MemorySegment HandleId, MemorySegment ClientToken, int DesiredAccess, MemorySegment Privileges, int AccessGranted) {
        var mh$ = ObjectPrivilegeAuditAlarmA$MH();
        try {
            return (int)mh$.invokeExact(SubsystemName, HandleId, ClientToken, DesiredAccess, Privileges, AccessGranted);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ObjectCloseAuditAlarmA$MH() {
        return RuntimeHelper.requireNonNull(constants$827.const$5,"ObjectCloseAuditAlarmA");
    }
    /**
     * {@snippet :
     * BOOL ObjectCloseAuditAlarmA(LPCSTR SubsystemName, LPVOID HandleId, BOOL GenerateOnClose);
     * }
     */
    public static int ObjectCloseAuditAlarmA(MemorySegment SubsystemName, MemorySegment HandleId, int GenerateOnClose) {
        var mh$ = ObjectCloseAuditAlarmA$MH();
        try {
            return (int)mh$.invokeExact(SubsystemName, HandleId, GenerateOnClose);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ObjectDeleteAuditAlarmA$MH() {
        return RuntimeHelper.requireNonNull(constants$828.const$0,"ObjectDeleteAuditAlarmA");
    }
    /**
     * {@snippet :
     * BOOL ObjectDeleteAuditAlarmA(LPCSTR SubsystemName, LPVOID HandleId, BOOL GenerateOnClose);
     * }
     */
    public static int ObjectDeleteAuditAlarmA(MemorySegment SubsystemName, MemorySegment HandleId, int GenerateOnClose) {
        var mh$ = ObjectDeleteAuditAlarmA$MH();
        try {
            return (int)mh$.invokeExact(SubsystemName, HandleId, GenerateOnClose);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PrivilegedServiceAuditAlarmA$MH() {
        return RuntimeHelper.requireNonNull(constants$828.const$1,"PrivilegedServiceAuditAlarmA");
    }
    /**
     * {@snippet :
     * BOOL PrivilegedServiceAuditAlarmA(LPCSTR SubsystemName, LPCSTR ServiceName, HANDLE ClientToken, PPRIVILEGE_SET Privileges, BOOL AccessGranted);
     * }
     */
    public static int PrivilegedServiceAuditAlarmA(MemorySegment SubsystemName, MemorySegment ServiceName, MemorySegment ClientToken, MemorySegment Privileges, int AccessGranted) {
        var mh$ = PrivilegedServiceAuditAlarmA$MH();
        try {
            return (int)mh$.invokeExact(SubsystemName, ServiceName, ClientToken, Privileges, AccessGranted);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddConditionalAce$MH() {
        return RuntimeHelper.requireNonNull(constants$828.const$3,"AddConditionalAce");
    }
    /**
     * {@snippet :
     * BOOL AddConditionalAce(PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, UCHAR AceType, DWORD AccessMask, PSID pSid, PWCHAR ConditionStr, DWORD* ReturnLength);
     * }
     */
    public static int AddConditionalAce(MemorySegment pAcl, int dwAceRevision, int AceFlags, byte AceType, int AccessMask, MemorySegment pSid, MemorySegment ConditionStr, MemorySegment ReturnLength) {
        var mh$ = AddConditionalAce$MH();
        try {
            return (int)mh$.invokeExact(pAcl, dwAceRevision, AceFlags, AceType, AccessMask, pSid, ConditionStr, ReturnLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFileSecurityA$MH() {
        return RuntimeHelper.requireNonNull(constants$828.const$4,"SetFileSecurityA");
    }
    /**
     * {@snippet :
     * BOOL SetFileSecurityA(LPCSTR lpFileName, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor);
     * }
     */
    public static int SetFileSecurityA(MemorySegment lpFileName, int SecurityInformation, MemorySegment pSecurityDescriptor) {
        var mh$ = SetFileSecurityA$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, SecurityInformation, pSecurityDescriptor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileSecurityA$MH() {
        return RuntimeHelper.requireNonNull(constants$828.const$5,"GetFileSecurityA");
    }
    /**
     * {@snippet :
     * BOOL GetFileSecurityA(LPCSTR lpFileName, SECURITY_INFORMATION RequestedInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor, DWORD nLength, LPDWORD lpnLengthNeeded);
     * }
     */
    public static int GetFileSecurityA(MemorySegment lpFileName, int RequestedInformation, MemorySegment pSecurityDescriptor, int nLength, MemorySegment lpnLengthNeeded) {
        var mh$ = GetFileSecurityA$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, RequestedInformation, pSecurityDescriptor, nLength, lpnLengthNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadDirectoryChangesW$MH() {
        return RuntimeHelper.requireNonNull(constants$829.const$1,"ReadDirectoryChangesW");
    }
    /**
     * {@snippet :
     * BOOL ReadDirectoryChangesW(HANDLE hDirectory, LPVOID lpBuffer, DWORD nBufferLength, BOOL bWatchSubtree, DWORD dwNotifyFilter, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped, LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine);
     * }
     */
    public static int ReadDirectoryChangesW(MemorySegment hDirectory, MemorySegment lpBuffer, int nBufferLength, int bWatchSubtree, int dwNotifyFilter, MemorySegment lpBytesReturned, MemorySegment lpOverlapped, MemorySegment lpCompletionRoutine) {
        var mh$ = ReadDirectoryChangesW$MH();
        try {
            return (int)mh$.invokeExact(hDirectory, lpBuffer, nBufferLength, bWatchSubtree, dwNotifyFilter, lpBytesReturned, lpOverlapped, lpCompletionRoutine);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadDirectoryChangesExW$MH() {
        return RuntimeHelper.requireNonNull(constants$829.const$3,"ReadDirectoryChangesExW");
    }
    /**
     * {@snippet :
     * BOOL ReadDirectoryChangesExW(HANDLE hDirectory, LPVOID lpBuffer, DWORD nBufferLength, BOOL bWatchSubtree, DWORD dwNotifyFilter, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped, LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine, READ_DIRECTORY_NOTIFY_INFORMATION_CLASS ReadDirectoryNotifyInformationClass);
     * }
     */
    public static int ReadDirectoryChangesExW(MemorySegment hDirectory, MemorySegment lpBuffer, int nBufferLength, int bWatchSubtree, int dwNotifyFilter, MemorySegment lpBytesReturned, MemorySegment lpOverlapped, MemorySegment lpCompletionRoutine, int ReadDirectoryNotifyInformationClass) {
        var mh$ = ReadDirectoryChangesExW$MH();
        try {
            return (int)mh$.invokeExact(hDirectory, lpBuffer, nBufferLength, bWatchSubtree, dwNotifyFilter, lpBytesReturned, lpOverlapped, lpCompletionRoutine, ReadDirectoryNotifyInformationClass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MapViewOfFileExNuma$MH() {
        return RuntimeHelper.requireNonNull(constants$829.const$5,"MapViewOfFileExNuma");
    }
    /**
     * {@snippet :
     * LPVOID MapViewOfFileExNuma(HANDLE hFileMappingObject, DWORD dwDesiredAccess, DWORD dwFileOffsetHigh, DWORD dwFileOffsetLow, SIZE_T dwNumberOfBytesToMap, LPVOID lpBaseAddress, DWORD nndPreferred);
     * }
     */
    public static MemorySegment MapViewOfFileExNuma(MemorySegment hFileMappingObject, int dwDesiredAccess, int dwFileOffsetHigh, int dwFileOffsetLow, long dwNumberOfBytesToMap, MemorySegment lpBaseAddress, int nndPreferred) {
        var mh$ = MapViewOfFileExNuma$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hFileMappingObject, dwDesiredAccess, dwFileOffsetHigh, dwFileOffsetLow, dwNumberOfBytesToMap, lpBaseAddress, nndPreferred);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsBadReadPtr$MH() {
        return RuntimeHelper.requireNonNull(constants$830.const$0,"IsBadReadPtr");
    }
    /**
     * {@snippet :
     * BOOL IsBadReadPtr(void* lp, UINT_PTR ucb);
     * }
     */
    public static int IsBadReadPtr(MemorySegment lp, long ucb) {
        var mh$ = IsBadReadPtr$MH();
        try {
            return (int)mh$.invokeExact(lp, ucb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsBadWritePtr$MH() {
        return RuntimeHelper.requireNonNull(constants$830.const$1,"IsBadWritePtr");
    }
    /**
     * {@snippet :
     * BOOL IsBadWritePtr(LPVOID lp, UINT_PTR ucb);
     * }
     */
    public static int IsBadWritePtr(MemorySegment lp, long ucb) {
        var mh$ = IsBadWritePtr$MH();
        try {
            return (int)mh$.invokeExact(lp, ucb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsBadHugeReadPtr$MH() {
        return RuntimeHelper.requireNonNull(constants$830.const$2,"IsBadHugeReadPtr");
    }
    /**
     * {@snippet :
     * BOOL IsBadHugeReadPtr(void* lp, UINT_PTR ucb);
     * }
     */
    public static int IsBadHugeReadPtr(MemorySegment lp, long ucb) {
        var mh$ = IsBadHugeReadPtr$MH();
        try {
            return (int)mh$.invokeExact(lp, ucb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsBadHugeWritePtr$MH() {
        return RuntimeHelper.requireNonNull(constants$830.const$3,"IsBadHugeWritePtr");
    }
    /**
     * {@snippet :
     * BOOL IsBadHugeWritePtr(LPVOID lp, UINT_PTR ucb);
     * }
     */
    public static int IsBadHugeWritePtr(MemorySegment lp, long ucb) {
        var mh$ = IsBadHugeWritePtr$MH();
        try {
            return (int)mh$.invokeExact(lp, ucb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsBadCodePtr$MH() {
        return RuntimeHelper.requireNonNull(constants$830.const$4,"IsBadCodePtr");
    }
    /**
     * {@snippet :
     * BOOL IsBadCodePtr(FARPROC lpfn);
     * }
     */
    public static int IsBadCodePtr(MemorySegment lpfn) {
        var mh$ = IsBadCodePtr$MH();
        try {
            return (int)mh$.invokeExact(lpfn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsBadStringPtrA$MH() {
        return RuntimeHelper.requireNonNull(constants$830.const$5,"IsBadStringPtrA");
    }
    /**
     * {@snippet :
     * BOOL IsBadStringPtrA(LPCSTR lpsz, UINT_PTR ucchMax);
     * }
     */
    public static int IsBadStringPtrA(MemorySegment lpsz, long ucchMax) {
        var mh$ = IsBadStringPtrA$MH();
        try {
            return (int)mh$.invokeExact(lpsz, ucchMax);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsBadStringPtrW$MH() {
        return RuntimeHelper.requireNonNull(constants$831.const$0,"IsBadStringPtrW");
    }
    /**
     * {@snippet :
     * BOOL IsBadStringPtrW(LPCWSTR lpsz, UINT_PTR ucchMax);
     * }
     */
    public static int IsBadStringPtrW(MemorySegment lpsz, long ucchMax) {
        var mh$ = IsBadStringPtrW$MH();
        try {
            return (int)mh$.invokeExact(lpsz, ucchMax);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LookupAccountSidA$MH() {
        return RuntimeHelper.requireNonNull(constants$831.const$2,"LookupAccountSidA");
    }
    /**
     * {@snippet :
     * BOOL LookupAccountSidA(LPCSTR lpSystemName, PSID Sid, LPSTR Name, LPDWORD cchName, LPSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse);
     * }
     */
    public static int LookupAccountSidA(MemorySegment lpSystemName, MemorySegment Sid, MemorySegment Name, MemorySegment cchName, MemorySegment ReferencedDomainName, MemorySegment cchReferencedDomainName, MemorySegment peUse) {
        var mh$ = LookupAccountSidA$MH();
        try {
            return (int)mh$.invokeExact(lpSystemName, Sid, Name, cchName, ReferencedDomainName, cchReferencedDomainName, peUse);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LookupAccountSidW$MH() {
        return RuntimeHelper.requireNonNull(constants$831.const$3,"LookupAccountSidW");
    }
    /**
     * {@snippet :
     * BOOL LookupAccountSidW(LPCWSTR lpSystemName, PSID Sid, LPWSTR Name, LPDWORD cchName, LPWSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse);
     * }
     */
    public static int LookupAccountSidW(MemorySegment lpSystemName, MemorySegment Sid, MemorySegment Name, MemorySegment cchName, MemorySegment ReferencedDomainName, MemorySegment cchReferencedDomainName, MemorySegment peUse) {
        var mh$ = LookupAccountSidW$MH();
        try {
            return (int)mh$.invokeExact(lpSystemName, Sid, Name, cchName, ReferencedDomainName, cchReferencedDomainName, peUse);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LookupAccountNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$831.const$4,"LookupAccountNameA");
    }
    /**
     * {@snippet :
     * BOOL LookupAccountNameA(LPCSTR lpSystemName, LPCSTR lpAccountName, PSID Sid, LPDWORD cbSid, LPSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse);
     * }
     */
    public static int LookupAccountNameA(MemorySegment lpSystemName, MemorySegment lpAccountName, MemorySegment Sid, MemorySegment cbSid, MemorySegment ReferencedDomainName, MemorySegment cchReferencedDomainName, MemorySegment peUse) {
        var mh$ = LookupAccountNameA$MH();
        try {
            return (int)mh$.invokeExact(lpSystemName, lpAccountName, Sid, cbSid, ReferencedDomainName, cchReferencedDomainName, peUse);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LookupAccountNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$831.const$5,"LookupAccountNameW");
    }
    /**
     * {@snippet :
     * BOOL LookupAccountNameW(LPCWSTR lpSystemName, LPCWSTR lpAccountName, PSID Sid, LPDWORD cbSid, LPWSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse);
     * }
     */
    public static int LookupAccountNameW(MemorySegment lpSystemName, MemorySegment lpAccountName, MemorySegment Sid, MemorySegment cbSid, MemorySegment ReferencedDomainName, MemorySegment cchReferencedDomainName, MemorySegment peUse) {
        var mh$ = LookupAccountNameW$MH();
        try {
            return (int)mh$.invokeExact(lpSystemName, lpAccountName, Sid, cbSid, ReferencedDomainName, cchReferencedDomainName, peUse);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LookupAccountNameLocalA$MH() {
        return RuntimeHelper.requireNonNull(constants$832.const$0,"LookupAccountNameLocalA");
    }
    /**
     * {@snippet :
     * BOOL LookupAccountNameLocalA(LPCSTR lpAccountName, PSID Sid, LPDWORD cbSid, LPSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse);
     * }
     */
    public static int LookupAccountNameLocalA(MemorySegment lpAccountName, MemorySegment Sid, MemorySegment cbSid, MemorySegment ReferencedDomainName, MemorySegment cchReferencedDomainName, MemorySegment peUse) {
        var mh$ = LookupAccountNameLocalA$MH();
        try {
            return (int)mh$.invokeExact(lpAccountName, Sid, cbSid, ReferencedDomainName, cchReferencedDomainName, peUse);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LookupAccountNameLocalW$MH() {
        return RuntimeHelper.requireNonNull(constants$832.const$1,"LookupAccountNameLocalW");
    }
    /**
     * {@snippet :
     * BOOL LookupAccountNameLocalW(LPCWSTR lpAccountName, PSID Sid, LPDWORD cbSid, LPWSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse);
     * }
     */
    public static int LookupAccountNameLocalW(MemorySegment lpAccountName, MemorySegment Sid, MemorySegment cbSid, MemorySegment ReferencedDomainName, MemorySegment cchReferencedDomainName, MemorySegment peUse) {
        var mh$ = LookupAccountNameLocalW$MH();
        try {
            return (int)mh$.invokeExact(lpAccountName, Sid, cbSid, ReferencedDomainName, cchReferencedDomainName, peUse);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LookupAccountSidLocalA$MH() {
        return RuntimeHelper.requireNonNull(constants$832.const$2,"LookupAccountSidLocalA");
    }
    /**
     * {@snippet :
     * BOOL LookupAccountSidLocalA(PSID Sid, LPSTR Name, LPDWORD cchName, LPSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse);
     * }
     */
    public static int LookupAccountSidLocalA(MemorySegment Sid, MemorySegment Name, MemorySegment cchName, MemorySegment ReferencedDomainName, MemorySegment cchReferencedDomainName, MemorySegment peUse) {
        var mh$ = LookupAccountSidLocalA$MH();
        try {
            return (int)mh$.invokeExact(Sid, Name, cchName, ReferencedDomainName, cchReferencedDomainName, peUse);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LookupAccountSidLocalW$MH() {
        return RuntimeHelper.requireNonNull(constants$832.const$3,"LookupAccountSidLocalW");
    }
    /**
     * {@snippet :
     * BOOL LookupAccountSidLocalW(PSID Sid, LPWSTR Name, LPDWORD cchName, LPWSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse);
     * }
     */
    public static int LookupAccountSidLocalW(MemorySegment Sid, MemorySegment Name, MemorySegment cchName, MemorySegment ReferencedDomainName, MemorySegment cchReferencedDomainName, MemorySegment peUse) {
        var mh$ = LookupAccountSidLocalW$MH();
        try {
            return (int)mh$.invokeExact(Sid, Name, cchName, ReferencedDomainName, cchReferencedDomainName, peUse);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LookupPrivilegeValueA$MH() {
        return RuntimeHelper.requireNonNull(constants$832.const$4,"LookupPrivilegeValueA");
    }
    /**
     * {@snippet :
     * BOOL LookupPrivilegeValueA(LPCSTR lpSystemName, LPCSTR lpName, PLUID lpLuid);
     * }
     */
    public static int LookupPrivilegeValueA(MemorySegment lpSystemName, MemorySegment lpName, MemorySegment lpLuid) {
        var mh$ = LookupPrivilegeValueA$MH();
        try {
            return (int)mh$.invokeExact(lpSystemName, lpName, lpLuid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LookupPrivilegeValueW$MH() {
        return RuntimeHelper.requireNonNull(constants$832.const$5,"LookupPrivilegeValueW");
    }
    /**
     * {@snippet :
     * BOOL LookupPrivilegeValueW(LPCWSTR lpSystemName, LPCWSTR lpName, PLUID lpLuid);
     * }
     */
    public static int LookupPrivilegeValueW(MemorySegment lpSystemName, MemorySegment lpName, MemorySegment lpLuid) {
        var mh$ = LookupPrivilegeValueW$MH();
        try {
            return (int)mh$.invokeExact(lpSystemName, lpName, lpLuid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LookupPrivilegeNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$833.const$0,"LookupPrivilegeNameA");
    }
    /**
     * {@snippet :
     * BOOL LookupPrivilegeNameA(LPCSTR lpSystemName, PLUID lpLuid, LPSTR lpName, LPDWORD cchName);
     * }
     */
    public static int LookupPrivilegeNameA(MemorySegment lpSystemName, MemorySegment lpLuid, MemorySegment lpName, MemorySegment cchName) {
        var mh$ = LookupPrivilegeNameA$MH();
        try {
            return (int)mh$.invokeExact(lpSystemName, lpLuid, lpName, cchName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LookupPrivilegeNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$833.const$1,"LookupPrivilegeNameW");
    }
    /**
     * {@snippet :
     * BOOL LookupPrivilegeNameW(LPCWSTR lpSystemName, PLUID lpLuid, LPWSTR lpName, LPDWORD cchName);
     * }
     */
    public static int LookupPrivilegeNameW(MemorySegment lpSystemName, MemorySegment lpLuid, MemorySegment lpName, MemorySegment cchName) {
        var mh$ = LookupPrivilegeNameW$MH();
        try {
            return (int)mh$.invokeExact(lpSystemName, lpLuid, lpName, cchName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LookupPrivilegeDisplayNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$833.const$2,"LookupPrivilegeDisplayNameA");
    }
    /**
     * {@snippet :
     * BOOL LookupPrivilegeDisplayNameA(LPCSTR lpSystemName, LPCSTR lpName, LPSTR lpDisplayName, LPDWORD cchDisplayName, LPDWORD lpLanguageId);
     * }
     */
    public static int LookupPrivilegeDisplayNameA(MemorySegment lpSystemName, MemorySegment lpName, MemorySegment lpDisplayName, MemorySegment cchDisplayName, MemorySegment lpLanguageId) {
        var mh$ = LookupPrivilegeDisplayNameA$MH();
        try {
            return (int)mh$.invokeExact(lpSystemName, lpName, lpDisplayName, cchDisplayName, lpLanguageId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LookupPrivilegeDisplayNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$833.const$3,"LookupPrivilegeDisplayNameW");
    }
    /**
     * {@snippet :
     * BOOL LookupPrivilegeDisplayNameW(LPCWSTR lpSystemName, LPCWSTR lpName, LPWSTR lpDisplayName, LPDWORD cchDisplayName, LPDWORD lpLanguageId);
     * }
     */
    public static int LookupPrivilegeDisplayNameW(MemorySegment lpSystemName, MemorySegment lpName, MemorySegment lpDisplayName, MemorySegment cchDisplayName, MemorySegment lpLanguageId) {
        var mh$ = LookupPrivilegeDisplayNameW$MH();
        try {
            return (int)mh$.invokeExact(lpSystemName, lpName, lpDisplayName, cchDisplayName, lpLanguageId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BuildCommDCBA$MH() {
        return RuntimeHelper.requireNonNull(constants$833.const$4,"BuildCommDCBA");
    }
    /**
     * {@snippet :
     * BOOL BuildCommDCBA(LPCSTR lpDef, LPDCB lpDCB);
     * }
     */
    public static int BuildCommDCBA(MemorySegment lpDef, MemorySegment lpDCB) {
        var mh$ = BuildCommDCBA$MH();
        try {
            return (int)mh$.invokeExact(lpDef, lpDCB);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BuildCommDCBW$MH() {
        return RuntimeHelper.requireNonNull(constants$833.const$5,"BuildCommDCBW");
    }
    /**
     * {@snippet :
     * BOOL BuildCommDCBW(LPCWSTR lpDef, LPDCB lpDCB);
     * }
     */
    public static int BuildCommDCBW(MemorySegment lpDef, MemorySegment lpDCB) {
        var mh$ = BuildCommDCBW$MH();
        try {
            return (int)mh$.invokeExact(lpDef, lpDCB);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BuildCommDCBAndTimeoutsA$MH() {
        return RuntimeHelper.requireNonNull(constants$834.const$0,"BuildCommDCBAndTimeoutsA");
    }
    /**
     * {@snippet :
     * BOOL BuildCommDCBAndTimeoutsA(LPCSTR lpDef, LPDCB lpDCB, LPCOMMTIMEOUTS lpCommTimeouts);
     * }
     */
    public static int BuildCommDCBAndTimeoutsA(MemorySegment lpDef, MemorySegment lpDCB, MemorySegment lpCommTimeouts) {
        var mh$ = BuildCommDCBAndTimeoutsA$MH();
        try {
            return (int)mh$.invokeExact(lpDef, lpDCB, lpCommTimeouts);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BuildCommDCBAndTimeoutsW$MH() {
        return RuntimeHelper.requireNonNull(constants$834.const$1,"BuildCommDCBAndTimeoutsW");
    }
    /**
     * {@snippet :
     * BOOL BuildCommDCBAndTimeoutsW(LPCWSTR lpDef, LPDCB lpDCB, LPCOMMTIMEOUTS lpCommTimeouts);
     * }
     */
    public static int BuildCommDCBAndTimeoutsW(MemorySegment lpDef, MemorySegment lpDCB, MemorySegment lpCommTimeouts) {
        var mh$ = BuildCommDCBAndTimeoutsW$MH();
        try {
            return (int)mh$.invokeExact(lpDef, lpDCB, lpCommTimeouts);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CommConfigDialogA$MH() {
        return RuntimeHelper.requireNonNull(constants$834.const$2,"CommConfigDialogA");
    }
    /**
     * {@snippet :
     * BOOL CommConfigDialogA(LPCSTR lpszName, HWND hWnd, LPCOMMCONFIG lpCC);
     * }
     */
    public static int CommConfigDialogA(MemorySegment lpszName, MemorySegment hWnd, MemorySegment lpCC) {
        var mh$ = CommConfigDialogA$MH();
        try {
            return (int)mh$.invokeExact(lpszName, hWnd, lpCC);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CommConfigDialogW$MH() {
        return RuntimeHelper.requireNonNull(constants$834.const$3,"CommConfigDialogW");
    }
    /**
     * {@snippet :
     * BOOL CommConfigDialogW(LPCWSTR lpszName, HWND hWnd, LPCOMMCONFIG lpCC);
     * }
     */
    public static int CommConfigDialogW(MemorySegment lpszName, MemorySegment hWnd, MemorySegment lpCC) {
        var mh$ = CommConfigDialogW$MH();
        try {
            return (int)mh$.invokeExact(lpszName, hWnd, lpCC);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDefaultCommConfigA$MH() {
        return RuntimeHelper.requireNonNull(constants$834.const$4,"GetDefaultCommConfigA");
    }
    /**
     * {@snippet :
     * BOOL GetDefaultCommConfigA(LPCSTR lpszName, LPCOMMCONFIG lpCC, LPDWORD lpdwSize);
     * }
     */
    public static int GetDefaultCommConfigA(MemorySegment lpszName, MemorySegment lpCC, MemorySegment lpdwSize) {
        var mh$ = GetDefaultCommConfigA$MH();
        try {
            return (int)mh$.invokeExact(lpszName, lpCC, lpdwSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDefaultCommConfigW$MH() {
        return RuntimeHelper.requireNonNull(constants$834.const$5,"GetDefaultCommConfigW");
    }
    /**
     * {@snippet :
     * BOOL GetDefaultCommConfigW(LPCWSTR lpszName, LPCOMMCONFIG lpCC, LPDWORD lpdwSize);
     * }
     */
    public static int GetDefaultCommConfigW(MemorySegment lpszName, MemorySegment lpCC, MemorySegment lpdwSize) {
        var mh$ = GetDefaultCommConfigW$MH();
        try {
            return (int)mh$.invokeExact(lpszName, lpCC, lpdwSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetDefaultCommConfigA$MH() {
        return RuntimeHelper.requireNonNull(constants$835.const$0,"SetDefaultCommConfigA");
    }
    /**
     * {@snippet :
     * BOOL SetDefaultCommConfigA(LPCSTR lpszName, LPCOMMCONFIG lpCC, DWORD dwSize);
     * }
     */
    public static int SetDefaultCommConfigA(MemorySegment lpszName, MemorySegment lpCC, int dwSize) {
        var mh$ = SetDefaultCommConfigA$MH();
        try {
            return (int)mh$.invokeExact(lpszName, lpCC, dwSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetDefaultCommConfigW$MH() {
        return RuntimeHelper.requireNonNull(constants$835.const$1,"SetDefaultCommConfigW");
    }
    /**
     * {@snippet :
     * BOOL SetDefaultCommConfigW(LPCWSTR lpszName, LPCOMMCONFIG lpCC, DWORD dwSize);
     * }
     */
    public static int SetDefaultCommConfigW(MemorySegment lpszName, MemorySegment lpCC, int dwSize) {
        var mh$ = SetDefaultCommConfigW$MH();
        try {
            return (int)mh$.invokeExact(lpszName, lpCC, dwSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetComputerNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$835.const$2,"GetComputerNameA");
    }
    /**
     * {@snippet :
     * BOOL GetComputerNameA(LPSTR lpBuffer, LPDWORD nSize);
     * }
     */
    public static int GetComputerNameA(MemorySegment lpBuffer, MemorySegment nSize) {
        var mh$ = GetComputerNameA$MH();
        try {
            return (int)mh$.invokeExact(lpBuffer, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetComputerNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$835.const$3,"GetComputerNameW");
    }
    /**
     * {@snippet :
     * BOOL GetComputerNameW(LPWSTR lpBuffer, LPDWORD nSize);
     * }
     */
    public static int GetComputerNameW(MemorySegment lpBuffer, MemorySegment nSize) {
        var mh$ = GetComputerNameW$MH();
        try {
            return (int)mh$.invokeExact(lpBuffer, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DnsHostnameToComputerNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$835.const$4,"DnsHostnameToComputerNameA");
    }
    /**
     * {@snippet :
     * BOOL DnsHostnameToComputerNameA(LPCSTR Hostname, LPSTR ComputerName, LPDWORD nSize);
     * }
     */
    public static int DnsHostnameToComputerNameA(MemorySegment Hostname, MemorySegment ComputerName, MemorySegment nSize) {
        var mh$ = DnsHostnameToComputerNameA$MH();
        try {
            return (int)mh$.invokeExact(Hostname, ComputerName, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DnsHostnameToComputerNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$835.const$5,"DnsHostnameToComputerNameW");
    }
    /**
     * {@snippet :
     * BOOL DnsHostnameToComputerNameW(LPCWSTR Hostname, LPWSTR ComputerName, LPDWORD nSize);
     * }
     */
    public static int DnsHostnameToComputerNameW(MemorySegment Hostname, MemorySegment ComputerName, MemorySegment nSize) {
        var mh$ = DnsHostnameToComputerNameW$MH();
        try {
            return (int)mh$.invokeExact(Hostname, ComputerName, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetUserNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$836.const$0,"GetUserNameA");
    }
    /**
     * {@snippet :
     * BOOL GetUserNameA(LPSTR lpBuffer, LPDWORD pcbBuffer);
     * }
     */
    public static int GetUserNameA(MemorySegment lpBuffer, MemorySegment pcbBuffer) {
        var mh$ = GetUserNameA$MH();
        try {
            return (int)mh$.invokeExact(lpBuffer, pcbBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetUserNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$836.const$1,"GetUserNameW");
    }
    /**
     * {@snippet :
     * BOOL GetUserNameW(LPWSTR lpBuffer, LPDWORD pcbBuffer);
     * }
     */
    public static int GetUserNameW(MemorySegment lpBuffer, MemorySegment pcbBuffer) {
        var mh$ = GetUserNameW$MH();
        try {
            return (int)mh$.invokeExact(lpBuffer, pcbBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LogonUserA$MH() {
        return RuntimeHelper.requireNonNull(constants$836.const$3,"LogonUserA");
    }
    /**
     * {@snippet :
     * BOOL LogonUserA(LPCSTR lpszUsername, LPCSTR lpszDomain, LPCSTR lpszPassword, DWORD dwLogonType, DWORD dwLogonProvider, PHANDLE phToken);
     * }
     */
    public static int LogonUserA(MemorySegment lpszUsername, MemorySegment lpszDomain, MemorySegment lpszPassword, int dwLogonType, int dwLogonProvider, MemorySegment phToken) {
        var mh$ = LogonUserA$MH();
        try {
            return (int)mh$.invokeExact(lpszUsername, lpszDomain, lpszPassword, dwLogonType, dwLogonProvider, phToken);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LogonUserW$MH() {
        return RuntimeHelper.requireNonNull(constants$836.const$4,"LogonUserW");
    }
    /**
     * {@snippet :
     * BOOL LogonUserW(LPCWSTR lpszUsername, LPCWSTR lpszDomain, LPCWSTR lpszPassword, DWORD dwLogonType, DWORD dwLogonProvider, PHANDLE phToken);
     * }
     */
    public static int LogonUserW(MemorySegment lpszUsername, MemorySegment lpszDomain, MemorySegment lpszPassword, int dwLogonType, int dwLogonProvider, MemorySegment phToken) {
        var mh$ = LogonUserW$MH();
        try {
            return (int)mh$.invokeExact(lpszUsername, lpszDomain, lpszPassword, dwLogonType, dwLogonProvider, phToken);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LogonUserExA$MH() {
        return RuntimeHelper.requireNonNull(constants$836.const$6,"LogonUserExA");
    }
    /**
     * {@snippet :
     * BOOL LogonUserExA(LPCSTR lpszUsername, LPCSTR lpszDomain, LPCSTR lpszPassword, DWORD dwLogonType, DWORD dwLogonProvider, PHANDLE phToken, PSID* ppLogonSid, PVOID* ppProfileBuffer, LPDWORD pdwProfileLength, PQUOTA_LIMITS pQuotaLimits);
     * }
     */
    public static int LogonUserExA(MemorySegment lpszUsername, MemorySegment lpszDomain, MemorySegment lpszPassword, int dwLogonType, int dwLogonProvider, MemorySegment phToken, MemorySegment ppLogonSid, MemorySegment ppProfileBuffer, MemorySegment pdwProfileLength, MemorySegment pQuotaLimits) {
        var mh$ = LogonUserExA$MH();
        try {
            return (int)mh$.invokeExact(lpszUsername, lpszDomain, lpszPassword, dwLogonType, dwLogonProvider, phToken, ppLogonSid, ppProfileBuffer, pdwProfileLength, pQuotaLimits);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LogonUserExW$MH() {
        return RuntimeHelper.requireNonNull(constants$837.const$0,"LogonUserExW");
    }
    /**
     * {@snippet :
     * BOOL LogonUserExW(LPCWSTR lpszUsername, LPCWSTR lpszDomain, LPCWSTR lpszPassword, DWORD dwLogonType, DWORD dwLogonProvider, PHANDLE phToken, PSID* ppLogonSid, PVOID* ppProfileBuffer, LPDWORD pdwProfileLength, PQUOTA_LIMITS pQuotaLimits);
     * }
     */
    public static int LogonUserExW(MemorySegment lpszUsername, MemorySegment lpszDomain, MemorySegment lpszPassword, int dwLogonType, int dwLogonProvider, MemorySegment phToken, MemorySegment ppLogonSid, MemorySegment ppProfileBuffer, MemorySegment pdwProfileLength, MemorySegment pQuotaLimits) {
        var mh$ = LogonUserExW$MH();
        try {
            return (int)mh$.invokeExact(lpszUsername, lpszDomain, lpszPassword, dwLogonType, dwLogonProvider, phToken, ppLogonSid, ppProfileBuffer, pdwProfileLength, pQuotaLimits);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateProcessWithLogonW$MH() {
        return RuntimeHelper.requireNonNull(constants$837.const$2,"CreateProcessWithLogonW");
    }
    /**
     * {@snippet :
     * BOOL CreateProcessWithLogonW(LPCWSTR lpUsername, LPCWSTR lpDomain, LPCWSTR lpPassword, DWORD dwLogonFlags, LPCWSTR lpApplicationName, LPWSTR lpCommandLine, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);
     * }
     */
    public static int CreateProcessWithLogonW(MemorySegment lpUsername, MemorySegment lpDomain, MemorySegment lpPassword, int dwLogonFlags, MemorySegment lpApplicationName, MemorySegment lpCommandLine, int dwCreationFlags, MemorySegment lpEnvironment, MemorySegment lpCurrentDirectory, MemorySegment lpStartupInfo, MemorySegment lpProcessInformation) {
        var mh$ = CreateProcessWithLogonW$MH();
        try {
            return (int)mh$.invokeExact(lpUsername, lpDomain, lpPassword, dwLogonFlags, lpApplicationName, lpCommandLine, dwCreationFlags, lpEnvironment, lpCurrentDirectory, lpStartupInfo, lpProcessInformation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateProcessWithTokenW$MH() {
        return RuntimeHelper.requireNonNull(constants$837.const$4,"CreateProcessWithTokenW");
    }
    /**
     * {@snippet :
     * BOOL CreateProcessWithTokenW(HANDLE hToken, DWORD dwLogonFlags, LPCWSTR lpApplicationName, LPWSTR lpCommandLine, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);
     * }
     */
    public static int CreateProcessWithTokenW(MemorySegment hToken, int dwLogonFlags, MemorySegment lpApplicationName, MemorySegment lpCommandLine, int dwCreationFlags, MemorySegment lpEnvironment, MemorySegment lpCurrentDirectory, MemorySegment lpStartupInfo, MemorySegment lpProcessInformation) {
        var mh$ = CreateProcessWithTokenW$MH();
        try {
            return (int)mh$.invokeExact(hToken, dwLogonFlags, lpApplicationName, lpCommandLine, dwCreationFlags, lpEnvironment, lpCurrentDirectory, lpStartupInfo, lpProcessInformation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsTokenUntrusted$MH() {
        return RuntimeHelper.requireNonNull(constants$837.const$5,"IsTokenUntrusted");
    }
    /**
     * {@snippet :
     * BOOL IsTokenUntrusted(HANDLE TokenHandle);
     * }
     */
    public static int IsTokenUntrusted(MemorySegment TokenHandle) {
        var mh$ = IsTokenUntrusted$MH();
        try {
            return (int)mh$.invokeExact(TokenHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterWaitForSingleObject$MH() {
        return RuntimeHelper.requireNonNull(constants$838.const$1,"RegisterWaitForSingleObject");
    }
    /**
     * {@snippet :
     * BOOL RegisterWaitForSingleObject(PHANDLE phNewWaitObject, HANDLE hObject, WAITORTIMERCALLBACK Callback, PVOID Context, ULONG dwMilliseconds, ULONG dwFlags);
     * }
     */
    public static int RegisterWaitForSingleObject(MemorySegment phNewWaitObject, MemorySegment hObject, MemorySegment Callback, MemorySegment Context, int dwMilliseconds, int dwFlags) {
        var mh$ = RegisterWaitForSingleObject$MH();
        try {
            return (int)mh$.invokeExact(phNewWaitObject, hObject, Callback, Context, dwMilliseconds, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnregisterWait$MH() {
        return RuntimeHelper.requireNonNull(constants$838.const$2,"UnregisterWait");
    }
    /**
     * {@snippet :
     * BOOL UnregisterWait(HANDLE WaitHandle);
     * }
     */
    public static int UnregisterWait(MemorySegment WaitHandle) {
        var mh$ = UnregisterWait$MH();
        try {
            return (int)mh$.invokeExact(WaitHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BindIoCompletionCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$838.const$3,"BindIoCompletionCallback");
    }
    /**
     * {@snippet :
     * BOOL BindIoCompletionCallback(HANDLE FileHandle, LPOVERLAPPED_COMPLETION_ROUTINE Function, ULONG Flags);
     * }
     */
    public static int BindIoCompletionCallback(MemorySegment FileHandle, MemorySegment Function, int Flags) {
        var mh$ = BindIoCompletionCallback$MH();
        try {
            return (int)mh$.invokeExact(FileHandle, Function, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetTimerQueueTimer$MH() {
        return RuntimeHelper.requireNonNull(constants$838.const$5,"SetTimerQueueTimer");
    }
    /**
     * {@snippet :
     * HANDLE SetTimerQueueTimer(HANDLE TimerQueue, WAITORTIMERCALLBACK Callback, PVOID Parameter, DWORD DueTime, DWORD Period, BOOL PreferIo);
     * }
     */
    public static MemorySegment SetTimerQueueTimer(MemorySegment TimerQueue, MemorySegment Callback, MemorySegment Parameter, int DueTime, int Period, int PreferIo) {
        var mh$ = SetTimerQueueTimer$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(TimerQueue, Callback, Parameter, DueTime, Period, PreferIo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CancelTimerQueueTimer$MH() {
        return RuntimeHelper.requireNonNull(constants$839.const$0,"CancelTimerQueueTimer");
    }
    /**
     * {@snippet :
     * BOOL CancelTimerQueueTimer(HANDLE TimerQueue, HANDLE Timer);
     * }
     */
    public static int CancelTimerQueueTimer(MemorySegment TimerQueue, MemorySegment Timer) {
        var mh$ = CancelTimerQueueTimer$MH();
        try {
            return (int)mh$.invokeExact(TimerQueue, Timer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreatePrivateNamespaceA$MH() {
        return RuntimeHelper.requireNonNull(constants$839.const$1,"CreatePrivateNamespaceA");
    }
    /**
     * {@snippet :
     * HANDLE CreatePrivateNamespaceA(LPSECURITY_ATTRIBUTES lpPrivateNamespaceAttributes, LPVOID lpBoundaryDescriptor, LPCSTR lpAliasPrefix);
     * }
     */
    public static MemorySegment CreatePrivateNamespaceA(MemorySegment lpPrivateNamespaceAttributes, MemorySegment lpBoundaryDescriptor, MemorySegment lpAliasPrefix) {
        var mh$ = CreatePrivateNamespaceA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpPrivateNamespaceAttributes, lpBoundaryDescriptor, lpAliasPrefix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenPrivateNamespaceA$MH() {
        return RuntimeHelper.requireNonNull(constants$839.const$2,"OpenPrivateNamespaceA");
    }
    /**
     * {@snippet :
     * HANDLE OpenPrivateNamespaceA(LPVOID lpBoundaryDescriptor, LPCSTR lpAliasPrefix);
     * }
     */
    public static MemorySegment OpenPrivateNamespaceA(MemorySegment lpBoundaryDescriptor, MemorySegment lpAliasPrefix) {
        var mh$ = OpenPrivateNamespaceA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpBoundaryDescriptor, lpAliasPrefix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateBoundaryDescriptorA$MH() {
        return RuntimeHelper.requireNonNull(constants$839.const$3,"CreateBoundaryDescriptorA");
    }
    /**
     * {@snippet :
     * HANDLE CreateBoundaryDescriptorA(LPCSTR Name, ULONG Flags);
     * }
     */
    public static MemorySegment CreateBoundaryDescriptorA(MemorySegment Name, int Flags) {
        var mh$ = CreateBoundaryDescriptorA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(Name, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddIntegrityLabelToBoundaryDescriptor$MH() {
        return RuntimeHelper.requireNonNull(constants$839.const$4,"AddIntegrityLabelToBoundaryDescriptor");
    }
    /**
     * {@snippet :
     * BOOL AddIntegrityLabelToBoundaryDescriptor(HANDLE* BoundaryDescriptor, PSID IntegrityLabel);
     * }
     */
    public static int AddIntegrityLabelToBoundaryDescriptor(MemorySegment BoundaryDescriptor, MemorySegment IntegrityLabel) {
        var mh$ = AddIntegrityLabelToBoundaryDescriptor$MH();
        try {
            return (int)mh$.invokeExact(BoundaryDescriptor, IntegrityLabel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagHW_PROFILE_INFOA* LPHW_PROFILE_INFOA;
     * }
     */
    public static final AddressLayout LPHW_PROFILE_INFOA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagHW_PROFILE_INFOW* LPHW_PROFILE_INFOW;
     * }
     */
    public static final AddressLayout LPHW_PROFILE_INFOW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagHW_PROFILE_INFOA* LPHW_PROFILE_INFO;
     * }
     */
    public static final AddressLayout LPHW_PROFILE_INFO = RuntimeHelper.POINTER;
    public static MethodHandle GetCurrentHwProfileA$MH() {
        return RuntimeHelper.requireNonNull(constants$840.const$3,"GetCurrentHwProfileA");
    }
    /**
     * {@snippet :
     * BOOL GetCurrentHwProfileA(LPHW_PROFILE_INFOA lpHwProfileInfo);
     * }
     */
    public static int GetCurrentHwProfileA(MemorySegment lpHwProfileInfo) {
        var mh$ = GetCurrentHwProfileA$MH();
        try {
            return (int)mh$.invokeExact(lpHwProfileInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrentHwProfileW$MH() {
        return RuntimeHelper.requireNonNull(constants$840.const$4,"GetCurrentHwProfileW");
    }
    /**
     * {@snippet :
     * BOOL GetCurrentHwProfileW(LPHW_PROFILE_INFOW lpHwProfileInfo);
     * }
     */
    public static int GetCurrentHwProfileW(MemorySegment lpHwProfileInfo) {
        var mh$ = GetCurrentHwProfileW$MH();
        try {
            return (int)mh$.invokeExact(lpHwProfileInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VerifyVersionInfoA$MH() {
        return RuntimeHelper.requireNonNull(constants$840.const$5,"VerifyVersionInfoA");
    }
    /**
     * {@snippet :
     * BOOL VerifyVersionInfoA(LPOSVERSIONINFOEXA lpVersionInformation, DWORD dwTypeMask, DWORDLONG dwlConditionMask);
     * }
     */
    public static int VerifyVersionInfoA(MemorySegment lpVersionInformation, int dwTypeMask, long dwlConditionMask) {
        var mh$ = VerifyVersionInfoA$MH();
        try {
            return (int)mh$.invokeExact(lpVersionInformation, dwTypeMask, dwlConditionMask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VerifyVersionInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$841.const$0,"VerifyVersionInfoW");
    }
    /**
     * {@snippet :
     * BOOL VerifyVersionInfoW(LPOSVERSIONINFOEXW lpVersionInformation, DWORD dwTypeMask, DWORDLONG dwlConditionMask);
     * }
     */
    public static int VerifyVersionInfoW(MemorySegment lpVersionInformation, int dwTypeMask, long dwlConditionMask) {
        var mh$ = VerifyVersionInfoW$MH();
        try {
            return (int)mh$.invokeExact(lpVersionInformation, dwTypeMask, dwlConditionMask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _TIME_ZONE_INFORMATION* PTIME_ZONE_INFORMATION;
     * }
     */
    public static final AddressLayout PTIME_ZONE_INFORMATION = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _TIME_ZONE_INFORMATION* LPTIME_ZONE_INFORMATION;
     * }
     */
    public static final AddressLayout LPTIME_ZONE_INFORMATION = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _TIME_DYNAMIC_ZONE_INFORMATION* PDYNAMIC_TIME_ZONE_INFORMATION;
     * }
     */
    public static final AddressLayout PDYNAMIC_TIME_ZONE_INFORMATION = RuntimeHelper.POINTER;
    public static MethodHandle SystemTimeToTzSpecificLocalTime$MH() {
        return RuntimeHelper.requireNonNull(constants$842.const$4,"SystemTimeToTzSpecificLocalTime");
    }
    /**
     * {@snippet :
     * BOOL SystemTimeToTzSpecificLocalTime(const TIME_ZONE_INFORMATION* lpTimeZoneInformation, const SYSTEMTIME* lpUniversalTime, LPSYSTEMTIME lpLocalTime);
     * }
     */
    public static int SystemTimeToTzSpecificLocalTime(MemorySegment lpTimeZoneInformation, MemorySegment lpUniversalTime, MemorySegment lpLocalTime) {
        var mh$ = SystemTimeToTzSpecificLocalTime$MH();
        try {
            return (int)mh$.invokeExact(lpTimeZoneInformation, lpUniversalTime, lpLocalTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TzSpecificLocalTimeToSystemTime$MH() {
        return RuntimeHelper.requireNonNull(constants$842.const$5,"TzSpecificLocalTimeToSystemTime");
    }
    /**
     * {@snippet :
     * BOOL TzSpecificLocalTimeToSystemTime(const TIME_ZONE_INFORMATION* lpTimeZoneInformation, const SYSTEMTIME* lpLocalTime, LPSYSTEMTIME lpUniversalTime);
     * }
     */
    public static int TzSpecificLocalTimeToSystemTime(MemorySegment lpTimeZoneInformation, MemorySegment lpLocalTime, MemorySegment lpUniversalTime) {
        var mh$ = TzSpecificLocalTimeToSystemTime$MH();
        try {
            return (int)mh$.invokeExact(lpTimeZoneInformation, lpLocalTime, lpUniversalTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FileTimeToSystemTime$MH() {
        return RuntimeHelper.requireNonNull(constants$843.const$0,"FileTimeToSystemTime");
    }
    /**
     * {@snippet :
     * BOOL FileTimeToSystemTime(const FILETIME* lpFileTime, LPSYSTEMTIME lpSystemTime);
     * }
     */
    public static int FileTimeToSystemTime(MemorySegment lpFileTime, MemorySegment lpSystemTime) {
        var mh$ = FileTimeToSystemTime$MH();
        try {
            return (int)mh$.invokeExact(lpFileTime, lpSystemTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SystemTimeToFileTime$MH() {
        return RuntimeHelper.requireNonNull(constants$843.const$1,"SystemTimeToFileTime");
    }
    /**
     * {@snippet :
     * BOOL SystemTimeToFileTime(const SYSTEMTIME* lpSystemTime, LPFILETIME lpFileTime);
     * }
     */
    public static int SystemTimeToFileTime(MemorySegment lpSystemTime, MemorySegment lpFileTime) {
        var mh$ = SystemTimeToFileTime$MH();
        try {
            return (int)mh$.invokeExact(lpSystemTime, lpFileTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTimeZoneInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$843.const$2,"GetTimeZoneInformation");
    }
    /**
     * {@snippet :
     * DWORD GetTimeZoneInformation(LPTIME_ZONE_INFORMATION lpTimeZoneInformation);
     * }
     */
    public static int GetTimeZoneInformation(MemorySegment lpTimeZoneInformation) {
        var mh$ = GetTimeZoneInformation$MH();
        try {
            return (int)mh$.invokeExact(lpTimeZoneInformation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetTimeZoneInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$843.const$3,"SetTimeZoneInformation");
    }
    /**
     * {@snippet :
     * BOOL SetTimeZoneInformation(const TIME_ZONE_INFORMATION* lpTimeZoneInformation);
     * }
     */
    public static int SetTimeZoneInformation(MemorySegment lpTimeZoneInformation) {
        var mh$ = SetTimeZoneInformation$MH();
        try {
            return (int)mh$.invokeExact(lpTimeZoneInformation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetDynamicTimeZoneInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$843.const$4,"SetDynamicTimeZoneInformation");
    }
    /**
     * {@snippet :
     * BOOL SetDynamicTimeZoneInformation(const DYNAMIC_TIME_ZONE_INFORMATION* lpTimeZoneInformation);
     * }
     */
    public static int SetDynamicTimeZoneInformation(MemorySegment lpTimeZoneInformation) {
        var mh$ = SetDynamicTimeZoneInformation$MH();
        try {
            return (int)mh$.invokeExact(lpTimeZoneInformation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDynamicTimeZoneInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$843.const$5,"GetDynamicTimeZoneInformation");
    }
    /**
     * {@snippet :
     * DWORD GetDynamicTimeZoneInformation(PDYNAMIC_TIME_ZONE_INFORMATION pTimeZoneInformation);
     * }
     */
    public static int GetDynamicTimeZoneInformation(MemorySegment pTimeZoneInformation) {
        var mh$ = GetDynamicTimeZoneInformation$MH();
        try {
            return (int)mh$.invokeExact(pTimeZoneInformation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTimeZoneInformationForYear$MH() {
        return RuntimeHelper.requireNonNull(constants$844.const$0,"GetTimeZoneInformationForYear");
    }
    /**
     * {@snippet :
     * BOOL GetTimeZoneInformationForYear(USHORT wYear, PDYNAMIC_TIME_ZONE_INFORMATION pdtzi, LPTIME_ZONE_INFORMATION ptzi);
     * }
     */
    public static int GetTimeZoneInformationForYear(short wYear, MemorySegment pdtzi, MemorySegment ptzi) {
        var mh$ = GetTimeZoneInformationForYear$MH();
        try {
            return (int)mh$.invokeExact(wYear, pdtzi, ptzi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumDynamicTimeZoneInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$844.const$1,"EnumDynamicTimeZoneInformation");
    }
    /**
     * {@snippet :
     * DWORD EnumDynamicTimeZoneInformation(const DWORD dwIndex, PDYNAMIC_TIME_ZONE_INFORMATION lpTimeZoneInformation);
     * }
     */
    public static int EnumDynamicTimeZoneInformation(int dwIndex, MemorySegment lpTimeZoneInformation) {
        var mh$ = EnumDynamicTimeZoneInformation$MH();
        try {
            return (int)mh$.invokeExact(dwIndex, lpTimeZoneInformation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDynamicTimeZoneInformationEffectiveYears$MH() {
        return RuntimeHelper.requireNonNull(constants$844.const$2,"GetDynamicTimeZoneInformationEffectiveYears");
    }
    /**
     * {@snippet :
     * DWORD GetDynamicTimeZoneInformationEffectiveYears(const PDYNAMIC_TIME_ZONE_INFORMATION lpTimeZoneInformation, LPDWORD FirstYear, LPDWORD LastYear);
     * }
     */
    public static int GetDynamicTimeZoneInformationEffectiveYears(MemorySegment lpTimeZoneInformation, MemorySegment FirstYear, MemorySegment LastYear) {
        var mh$ = GetDynamicTimeZoneInformationEffectiveYears$MH();
        try {
            return (int)mh$.invokeExact(lpTimeZoneInformation, FirstYear, LastYear);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SystemTimeToTzSpecificLocalTimeEx$MH() {
        return RuntimeHelper.requireNonNull(constants$844.const$3,"SystemTimeToTzSpecificLocalTimeEx");
    }
    /**
     * {@snippet :
     * BOOL SystemTimeToTzSpecificLocalTimeEx(const DYNAMIC_TIME_ZONE_INFORMATION* lpTimeZoneInformation, const SYSTEMTIME* lpUniversalTime, LPSYSTEMTIME lpLocalTime);
     * }
     */
    public static int SystemTimeToTzSpecificLocalTimeEx(MemorySegment lpTimeZoneInformation, MemorySegment lpUniversalTime, MemorySegment lpLocalTime) {
        var mh$ = SystemTimeToTzSpecificLocalTimeEx$MH();
        try {
            return (int)mh$.invokeExact(lpTimeZoneInformation, lpUniversalTime, lpLocalTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TzSpecificLocalTimeToSystemTimeEx$MH() {
        return RuntimeHelper.requireNonNull(constants$844.const$4,"TzSpecificLocalTimeToSystemTimeEx");
    }
    /**
     * {@snippet :
     * BOOL TzSpecificLocalTimeToSystemTimeEx(const DYNAMIC_TIME_ZONE_INFORMATION* lpTimeZoneInformation, const SYSTEMTIME* lpLocalTime, LPSYSTEMTIME lpUniversalTime);
     * }
     */
    public static int TzSpecificLocalTimeToSystemTimeEx(MemorySegment lpTimeZoneInformation, MemorySegment lpLocalTime, MemorySegment lpUniversalTime) {
        var mh$ = TzSpecificLocalTimeToSystemTimeEx$MH();
        try {
            return (int)mh$.invokeExact(lpTimeZoneInformation, lpLocalTime, lpUniversalTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LocalFileTimeToLocalSystemTime$MH() {
        return RuntimeHelper.requireNonNull(constants$844.const$5,"LocalFileTimeToLocalSystemTime");
    }
    /**
     * {@snippet :
     * BOOL LocalFileTimeToLocalSystemTime(const TIME_ZONE_INFORMATION* timeZoneInformation, const FILETIME* localFileTime, SYSTEMTIME* localSystemTime);
     * }
     */
    public static int LocalFileTimeToLocalSystemTime(MemorySegment timeZoneInformation, MemorySegment localFileTime, MemorySegment localSystemTime) {
        var mh$ = LocalFileTimeToLocalSystemTime$MH();
        try {
            return (int)mh$.invokeExact(timeZoneInformation, localFileTime, localSystemTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LocalSystemTimeToLocalFileTime$MH() {
        return RuntimeHelper.requireNonNull(constants$845.const$0,"LocalSystemTimeToLocalFileTime");
    }
    /**
     * {@snippet :
     * BOOL LocalSystemTimeToLocalFileTime(const TIME_ZONE_INFORMATION* timeZoneInformation, const SYSTEMTIME* localSystemTime, FILETIME* localFileTime);
     * }
     */
    public static int LocalSystemTimeToLocalFileTime(MemorySegment timeZoneInformation, MemorySegment localSystemTime, MemorySegment localFileTime) {
        var mh$ = LocalSystemTimeToLocalFileTime$MH();
        try {
            return (int)mh$.invokeExact(timeZoneInformation, localSystemTime, localFileTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetSystemPowerState$MH() {
        return RuntimeHelper.requireNonNull(constants$845.const$1,"SetSystemPowerState");
    }
    /**
     * {@snippet :
     * BOOL SetSystemPowerState(BOOL fSuspend, BOOL fForce);
     * }
     */
    public static int SetSystemPowerState(int fSuspend, int fForce) {
        var mh$ = SetSystemPowerState$MH();
        try {
            return (int)mh$.invokeExact(fSuspend, fForce);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _SYSTEM_POWER_STATUS* LPSYSTEM_POWER_STATUS;
     * }
     */
    public static final AddressLayout LPSYSTEM_POWER_STATUS = RuntimeHelper.POINTER;
    public static MethodHandle GetSystemPowerStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$846.const$3,"GetSystemPowerStatus");
    }
    /**
     * {@snippet :
     * BOOL GetSystemPowerStatus(LPSYSTEM_POWER_STATUS lpSystemPowerStatus);
     * }
     */
    public static int GetSystemPowerStatus(MemorySegment lpSystemPowerStatus) {
        var mh$ = GetSystemPowerStatus$MH();
        try {
            return (int)mh$.invokeExact(lpSystemPowerStatus);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MapUserPhysicalPagesScatter$MH() {
        return RuntimeHelper.requireNonNull(constants$846.const$4,"MapUserPhysicalPagesScatter");
    }
    /**
     * {@snippet :
     * BOOL MapUserPhysicalPagesScatter(PVOID* VirtualAddresses, ULONG_PTR NumberOfPages, PULONG_PTR PageArray);
     * }
     */
    public static int MapUserPhysicalPagesScatter(MemorySegment VirtualAddresses, long NumberOfPages, MemorySegment PageArray) {
        var mh$ = MapUserPhysicalPagesScatter$MH();
        try {
            return (int)mh$.invokeExact(VirtualAddresses, NumberOfPages, PageArray);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateJobObjectA$MH() {
        return RuntimeHelper.requireNonNull(constants$846.const$5,"CreateJobObjectA");
    }
    /**
     * {@snippet :
     * HANDLE CreateJobObjectA(LPSECURITY_ATTRIBUTES lpJobAttributes, LPCSTR lpName);
     * }
     */
    public static MemorySegment CreateJobObjectA(MemorySegment lpJobAttributes, MemorySegment lpName) {
        var mh$ = CreateJobObjectA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpJobAttributes, lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenJobObjectA$MH() {
        return RuntimeHelper.requireNonNull(constants$847.const$0,"OpenJobObjectA");
    }
    /**
     * {@snippet :
     * HANDLE OpenJobObjectA(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCSTR lpName);
     * }
     */
    public static MemorySegment OpenJobObjectA(int dwDesiredAccess, int bInheritHandle, MemorySegment lpName) {
        var mh$ = OpenJobObjectA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(dwDesiredAccess, bInheritHandle, lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateJobSet$MH() {
        return RuntimeHelper.requireNonNull(constants$847.const$1,"CreateJobSet");
    }
    /**
     * {@snippet :
     * BOOL CreateJobSet(ULONG NumJob, PJOB_SET_ARRAY UserJobSet, ULONG Flags);
     * }
     */
    public static int CreateJobSet(int NumJob, MemorySegment UserJobSet, int Flags) {
        var mh$ = CreateJobSet$MH();
        try {
            return (int)mh$.invokeExact(NumJob, UserJobSet, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindFirstVolumeA$MH() {
        return RuntimeHelper.requireNonNull(constants$847.const$2,"FindFirstVolumeA");
    }
    /**
     * {@snippet :
     * HANDLE FindFirstVolumeA(LPSTR lpszVolumeName, DWORD cchBufferLength);
     * }
     */
    public static MemorySegment FindFirstVolumeA(MemorySegment lpszVolumeName, int cchBufferLength) {
        var mh$ = FindFirstVolumeA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpszVolumeName, cchBufferLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindNextVolumeA$MH() {
        return RuntimeHelper.requireNonNull(constants$847.const$3,"FindNextVolumeA");
    }
    /**
     * {@snippet :
     * BOOL FindNextVolumeA(HANDLE hFindVolume, LPSTR lpszVolumeName, DWORD cchBufferLength);
     * }
     */
    public static int FindNextVolumeA(MemorySegment hFindVolume, MemorySegment lpszVolumeName, int cchBufferLength) {
        var mh$ = FindNextVolumeA$MH();
        try {
            return (int)mh$.invokeExact(hFindVolume, lpszVolumeName, cchBufferLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindFirstVolumeMountPointA$MH() {
        return RuntimeHelper.requireNonNull(constants$847.const$4,"FindFirstVolumeMountPointA");
    }
    /**
     * {@snippet :
     * HANDLE FindFirstVolumeMountPointA(LPCSTR lpszRootPathName, LPSTR lpszVolumeMountPoint, DWORD cchBufferLength);
     * }
     */
    public static MemorySegment FindFirstVolumeMountPointA(MemorySegment lpszRootPathName, MemorySegment lpszVolumeMountPoint, int cchBufferLength) {
        var mh$ = FindFirstVolumeMountPointA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpszRootPathName, lpszVolumeMountPoint, cchBufferLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindFirstVolumeMountPointW$MH() {
        return RuntimeHelper.requireNonNull(constants$847.const$5,"FindFirstVolumeMountPointW");
    }
    /**
     * {@snippet :
     * HANDLE FindFirstVolumeMountPointW(LPCWSTR lpszRootPathName, LPWSTR lpszVolumeMountPoint, DWORD cchBufferLength);
     * }
     */
    public static MemorySegment FindFirstVolumeMountPointW(MemorySegment lpszRootPathName, MemorySegment lpszVolumeMountPoint, int cchBufferLength) {
        var mh$ = FindFirstVolumeMountPointW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpszRootPathName, lpszVolumeMountPoint, cchBufferLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindNextVolumeMountPointA$MH() {
        return RuntimeHelper.requireNonNull(constants$848.const$0,"FindNextVolumeMountPointA");
    }
    /**
     * {@snippet :
     * BOOL FindNextVolumeMountPointA(HANDLE hFindVolumeMountPoint, LPSTR lpszVolumeMountPoint, DWORD cchBufferLength);
     * }
     */
    public static int FindNextVolumeMountPointA(MemorySegment hFindVolumeMountPoint, MemorySegment lpszVolumeMountPoint, int cchBufferLength) {
        var mh$ = FindNextVolumeMountPointA$MH();
        try {
            return (int)mh$.invokeExact(hFindVolumeMountPoint, lpszVolumeMountPoint, cchBufferLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindNextVolumeMountPointW$MH() {
        return RuntimeHelper.requireNonNull(constants$848.const$1,"FindNextVolumeMountPointW");
    }
    /**
     * {@snippet :
     * BOOL FindNextVolumeMountPointW(HANDLE hFindVolumeMountPoint, LPWSTR lpszVolumeMountPoint, DWORD cchBufferLength);
     * }
     */
    public static int FindNextVolumeMountPointW(MemorySegment hFindVolumeMountPoint, MemorySegment lpszVolumeMountPoint, int cchBufferLength) {
        var mh$ = FindNextVolumeMountPointW$MH();
        try {
            return (int)mh$.invokeExact(hFindVolumeMountPoint, lpszVolumeMountPoint, cchBufferLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindVolumeMountPointClose$MH() {
        return RuntimeHelper.requireNonNull(constants$848.const$2,"FindVolumeMountPointClose");
    }
    /**
     * {@snippet :
     * BOOL FindVolumeMountPointClose(HANDLE hFindVolumeMountPoint);
     * }
     */
    public static int FindVolumeMountPointClose(MemorySegment hFindVolumeMountPoint) {
        var mh$ = FindVolumeMountPointClose$MH();
        try {
            return (int)mh$.invokeExact(hFindVolumeMountPoint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetVolumeMountPointA$MH() {
        return RuntimeHelper.requireNonNull(constants$848.const$3,"SetVolumeMountPointA");
    }
    /**
     * {@snippet :
     * BOOL SetVolumeMountPointA(LPCSTR lpszVolumeMountPoint, LPCSTR lpszVolumeName);
     * }
     */
    public static int SetVolumeMountPointA(MemorySegment lpszVolumeMountPoint, MemorySegment lpszVolumeName) {
        var mh$ = SetVolumeMountPointA$MH();
        try {
            return (int)mh$.invokeExact(lpszVolumeMountPoint, lpszVolumeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetVolumeMountPointW$MH() {
        return RuntimeHelper.requireNonNull(constants$848.const$4,"SetVolumeMountPointW");
    }
    /**
     * {@snippet :
     * BOOL SetVolumeMountPointW(LPCWSTR lpszVolumeMountPoint, LPCWSTR lpszVolumeName);
     * }
     */
    public static int SetVolumeMountPointW(MemorySegment lpszVolumeMountPoint, MemorySegment lpszVolumeName) {
        var mh$ = SetVolumeMountPointW$MH();
        try {
            return (int)mh$.invokeExact(lpszVolumeMountPoint, lpszVolumeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteVolumeMountPointA$MH() {
        return RuntimeHelper.requireNonNull(constants$848.const$5,"DeleteVolumeMountPointA");
    }
    /**
     * {@snippet :
     * BOOL DeleteVolumeMountPointA(LPCSTR lpszVolumeMountPoint);
     * }
     */
    public static int DeleteVolumeMountPointA(MemorySegment lpszVolumeMountPoint) {
        var mh$ = DeleteVolumeMountPointA$MH();
        try {
            return (int)mh$.invokeExact(lpszVolumeMountPoint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetVolumeNameForVolumeMountPointA$MH() {
        return RuntimeHelper.requireNonNull(constants$849.const$0,"GetVolumeNameForVolumeMountPointA");
    }
    /**
     * {@snippet :
     * BOOL GetVolumeNameForVolumeMountPointA(LPCSTR lpszVolumeMountPoint, LPSTR lpszVolumeName, DWORD cchBufferLength);
     * }
     */
    public static int GetVolumeNameForVolumeMountPointA(MemorySegment lpszVolumeMountPoint, MemorySegment lpszVolumeName, int cchBufferLength) {
        var mh$ = GetVolumeNameForVolumeMountPointA$MH();
        try {
            return (int)mh$.invokeExact(lpszVolumeMountPoint, lpszVolumeName, cchBufferLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetVolumePathNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$849.const$1,"GetVolumePathNameA");
    }
    /**
     * {@snippet :
     * BOOL GetVolumePathNameA(LPCSTR lpszFileName, LPSTR lpszVolumePathName, DWORD cchBufferLength);
     * }
     */
    public static int GetVolumePathNameA(MemorySegment lpszFileName, MemorySegment lpszVolumePathName, int cchBufferLength) {
        var mh$ = GetVolumePathNameA$MH();
        try {
            return (int)mh$.invokeExact(lpszFileName, lpszVolumePathName, cchBufferLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetVolumePathNamesForVolumeNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$849.const$2,"GetVolumePathNamesForVolumeNameA");
    }
    /**
     * {@snippet :
     * BOOL GetVolumePathNamesForVolumeNameA(LPCSTR lpszVolumeName, LPCH lpszVolumePathNames, DWORD cchBufferLength, PDWORD lpcchReturnLength);
     * }
     */
    public static int GetVolumePathNamesForVolumeNameA(MemorySegment lpszVolumeName, MemorySegment lpszVolumePathNames, int cchBufferLength, MemorySegment lpcchReturnLength) {
        var mh$ = GetVolumePathNamesForVolumeNameA$MH();
        try {
            return (int)mh$.invokeExact(lpszVolumeName, lpszVolumePathNames, cchBufferLength, lpcchReturnLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagACTCTXA* PACTCTXA;
     * }
     */
    public static final AddressLayout PACTCTXA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagACTCTXW* PACTCTXW;
     * }
     */
    public static final AddressLayout PACTCTXW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagACTCTXA* PACTCTX;
     * }
     */
    public static final AddressLayout PACTCTX = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagACTCTXA* PCACTCTXA;
     * }
     */
    public static final AddressLayout PCACTCTXA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagACTCTXW* PCACTCTXW;
     * }
     */
    public static final AddressLayout PCACTCTXW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagACTCTXA* PCACTCTX;
     * }
     */
    public static final AddressLayout PCACTCTX = RuntimeHelper.POINTER;
    public static MethodHandle CreateActCtxA$MH() {
        return RuntimeHelper.requireNonNull(constants$852.const$5,"CreateActCtxA");
    }
    /**
     * {@snippet :
     * HANDLE CreateActCtxA(PCACTCTXA pActCtx);
     * }
     */
    public static MemorySegment CreateActCtxA(MemorySegment pActCtx) {
        var mh$ = CreateActCtxA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(pActCtx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateActCtxW$MH() {
        return RuntimeHelper.requireNonNull(constants$853.const$0,"CreateActCtxW");
    }
    /**
     * {@snippet :
     * HANDLE CreateActCtxW(PCACTCTXW pActCtx);
     * }
     */
    public static MemorySegment CreateActCtxW(MemorySegment pActCtx) {
        var mh$ = CreateActCtxW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(pActCtx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddRefActCtx$MH() {
        return RuntimeHelper.requireNonNull(constants$853.const$1,"AddRefActCtx");
    }
    /**
     * {@snippet :
     * void AddRefActCtx(HANDLE hActCtx);
     * }
     */
    public static void AddRefActCtx(MemorySegment hActCtx) {
        var mh$ = AddRefActCtx$MH();
        try {
            mh$.invokeExact(hActCtx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReleaseActCtx$MH() {
        return RuntimeHelper.requireNonNull(constants$853.const$2,"ReleaseActCtx");
    }
    /**
     * {@snippet :
     * void ReleaseActCtx(HANDLE hActCtx);
     * }
     */
    public static void ReleaseActCtx(MemorySegment hActCtx) {
        var mh$ = ReleaseActCtx$MH();
        try {
            mh$.invokeExact(hActCtx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZombifyActCtx$MH() {
        return RuntimeHelper.requireNonNull(constants$853.const$3,"ZombifyActCtx");
    }
    /**
     * {@snippet :
     * BOOL ZombifyActCtx(HANDLE hActCtx);
     * }
     */
    public static int ZombifyActCtx(MemorySegment hActCtx) {
        var mh$ = ZombifyActCtx$MH();
        try {
            return (int)mh$.invokeExact(hActCtx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ActivateActCtx$MH() {
        return RuntimeHelper.requireNonNull(constants$853.const$4,"ActivateActCtx");
    }
    /**
     * {@snippet :
     * BOOL ActivateActCtx(HANDLE hActCtx, ULONG_PTR* lpCookie);
     * }
     */
    public static int ActivateActCtx(MemorySegment hActCtx, MemorySegment lpCookie) {
        var mh$ = ActivateActCtx$MH();
        try {
            return (int)mh$.invokeExact(hActCtx, lpCookie);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeactivateActCtx$MH() {
        return RuntimeHelper.requireNonNull(constants$853.const$6,"DeactivateActCtx");
    }
    /**
     * {@snippet :
     * BOOL DeactivateActCtx(DWORD dwFlags, ULONG_PTR ulCookie);
     * }
     */
    public static int DeactivateActCtx(int dwFlags, long ulCookie) {
        var mh$ = DeactivateActCtx$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, ulCookie);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrentActCtx$MH() {
        return RuntimeHelper.requireNonNull(constants$854.const$0,"GetCurrentActCtx");
    }
    /**
     * {@snippet :
     * BOOL GetCurrentActCtx(HANDLE* lphActCtx);
     * }
     */
    public static int GetCurrentActCtx(MemorySegment lphActCtx) {
        var mh$ = GetCurrentActCtx$MH();
        try {
            return (int)mh$.invokeExact(lphActCtx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagACTCTX_SECTION_KEYED_DATA_2600* PACTCTX_SECTION_KEYED_DATA_2600;
     * }
     */
    public static final AddressLayout PACTCTX_SECTION_KEYED_DATA_2600 = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagACTCTX_SECTION_KEYED_DATA_2600* PCACTCTX_SECTION_KEYED_DATA_2600;
     * }
     */
    public static final AddressLayout PCACTCTX_SECTION_KEYED_DATA_2600 = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA* PACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;
     * }
     */
    public static final AddressLayout PACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA* PCACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;
     * }
     */
    public static final AddressLayout PCACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagACTCTX_SECTION_KEYED_DATA* PACTCTX_SECTION_KEYED_DATA;
     * }
     */
    public static final AddressLayout PACTCTX_SECTION_KEYED_DATA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagACTCTX_SECTION_KEYED_DATA* PCACTCTX_SECTION_KEYED_DATA;
     * }
     */
    public static final AddressLayout PCACTCTX_SECTION_KEYED_DATA = RuntimeHelper.POINTER;
    public static MethodHandle FindActCtxSectionStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$859.const$1,"FindActCtxSectionStringA");
    }
    /**
     * {@snippet :
     * BOOL FindActCtxSectionStringA(DWORD dwFlags, const GUID* lpExtensionGuid, ULONG ulSectionId, LPCSTR lpStringToFind, PACTCTX_SECTION_KEYED_DATA ReturnedData);
     * }
     */
    public static int FindActCtxSectionStringA(int dwFlags, MemorySegment lpExtensionGuid, int ulSectionId, MemorySegment lpStringToFind, MemorySegment ReturnedData) {
        var mh$ = FindActCtxSectionStringA$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, lpExtensionGuid, ulSectionId, lpStringToFind, ReturnedData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindActCtxSectionStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$859.const$2,"FindActCtxSectionStringW");
    }
    /**
     * {@snippet :
     * BOOL FindActCtxSectionStringW(DWORD dwFlags, const GUID* lpExtensionGuid, ULONG ulSectionId, LPCWSTR lpStringToFind, PACTCTX_SECTION_KEYED_DATA ReturnedData);
     * }
     */
    public static int FindActCtxSectionStringW(int dwFlags, MemorySegment lpExtensionGuid, int ulSectionId, MemorySegment lpStringToFind, MemorySegment ReturnedData) {
        var mh$ = FindActCtxSectionStringW$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, lpExtensionGuid, ulSectionId, lpStringToFind, ReturnedData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindActCtxSectionGuid$MH() {
        return RuntimeHelper.requireNonNull(constants$859.const$3,"FindActCtxSectionGuid");
    }
    /**
     * {@snippet :
     * BOOL FindActCtxSectionGuid(DWORD dwFlags, const GUID* lpExtensionGuid, ULONG ulSectionId, const GUID* lpGuidToFind, PACTCTX_SECTION_KEYED_DATA ReturnedData);
     * }
     */
    public static int FindActCtxSectionGuid(int dwFlags, MemorySegment lpExtensionGuid, int ulSectionId, MemorySegment lpGuidToFind, MemorySegment ReturnedData) {
        var mh$ = FindActCtxSectionGuid$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, lpExtensionGuid, ulSectionId, lpGuidToFind, ReturnedData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _ACTIVATION_CONTEXT_BASIC_INFORMATION* PACTIVATION_CONTEXT_BASIC_INFORMATION;
     * }
     */
    public static final AddressLayout PACTIVATION_CONTEXT_BASIC_INFORMATION = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _ACTIVATION_CONTEXT_BASIC_INFORMATION* PCACTIVATION_CONTEXT_BASIC_INFORMATION;
     * }
     */
    public static final AddressLayout PCACTIVATION_CONTEXT_BASIC_INFORMATION = RuntimeHelper.POINTER;
    public static MethodHandle QueryActCtxW$MH() {
        return RuntimeHelper.requireNonNull(constants$860.const$2,"QueryActCtxW");
    }
    /**
     * {@snippet :
     * BOOL QueryActCtxW(DWORD dwFlags, HANDLE hActCtx, PVOID pvSubInstance, ULONG ulInfoClass, PVOID pvBuffer, SIZE_T cbBuffer, SIZE_T* pcbWrittenOrRequired);
     * }
     */
    public static int QueryActCtxW(int dwFlags, MemorySegment hActCtx, MemorySegment pvSubInstance, int ulInfoClass, MemorySegment pvBuffer, long cbBuffer, MemorySegment pcbWrittenOrRequired) {
        var mh$ = QueryActCtxW$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, hActCtx, pvSubInstance, ulInfoClass, pvBuffer, cbBuffer, pcbWrittenOrRequired);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WTSGetActiveConsoleSessionId$MH() {
        return RuntimeHelper.requireNonNull(constants$860.const$5,"WTSGetActiveConsoleSessionId");
    }
    /**
     * {@snippet :
     * DWORD WTSGetActiveConsoleSessionId();
     * }
     */
    public static int WTSGetActiveConsoleSessionId() {
        var mh$ = WTSGetActiveConsoleSessionId$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WTSGetServiceSessionId$MH() {
        return RuntimeHelper.requireNonNull(constants$861.const$0,"WTSGetServiceSessionId");
    }
    /**
     * {@snippet :
     * DWORD WTSGetServiceSessionId();
     * }
     */
    public static int WTSGetServiceSessionId() {
        var mh$ = WTSGetServiceSessionId$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WTSIsServerContainer$MH() {
        return RuntimeHelper.requireNonNull(constants$861.const$2,"WTSIsServerContainer");
    }
    /**
     * {@snippet :
     * BOOLEAN WTSIsServerContainer();
     * }
     */
    public static byte WTSIsServerContainer() {
        var mh$ = WTSIsServerContainer$MH();
        try {
            return (byte)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetActiveProcessorGroupCount$MH() {
        return RuntimeHelper.requireNonNull(constants$861.const$4,"GetActiveProcessorGroupCount");
    }
    /**
     * {@snippet :
     * WORD GetActiveProcessorGroupCount();
     * }
     */
    public static short GetActiveProcessorGroupCount() {
        var mh$ = GetActiveProcessorGroupCount$MH();
        try {
            return (short)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMaximumProcessorGroupCount$MH() {
        return RuntimeHelper.requireNonNull(constants$861.const$5,"GetMaximumProcessorGroupCount");
    }
    /**
     * {@snippet :
     * WORD GetMaximumProcessorGroupCount();
     * }
     */
    public static short GetMaximumProcessorGroupCount() {
        var mh$ = GetMaximumProcessorGroupCount$MH();
        try {
            return (short)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetActiveProcessorCount$MH() {
        return RuntimeHelper.requireNonNull(constants$862.const$0,"GetActiveProcessorCount");
    }
    /**
     * {@snippet :
     * DWORD GetActiveProcessorCount(WORD GroupNumber);
     * }
     */
    public static int GetActiveProcessorCount(short GroupNumber) {
        var mh$ = GetActiveProcessorCount$MH();
        try {
            return (int)mh$.invokeExact(GroupNumber);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMaximumProcessorCount$MH() {
        return RuntimeHelper.requireNonNull(constants$862.const$1,"GetMaximumProcessorCount");
    }
    /**
     * {@snippet :
     * DWORD GetMaximumProcessorCount(WORD GroupNumber);
     * }
     */
    public static int GetMaximumProcessorCount(short GroupNumber) {
        var mh$ = GetMaximumProcessorCount$MH();
        try {
            return (int)mh$.invokeExact(GroupNumber);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNumaProcessorNode$MH() {
        return RuntimeHelper.requireNonNull(constants$862.const$3,"GetNumaProcessorNode");
    }
    /**
     * {@snippet :
     * BOOL GetNumaProcessorNode(UCHAR Processor, PUCHAR NodeNumber);
     * }
     */
    public static int GetNumaProcessorNode(byte Processor, MemorySegment NodeNumber) {
        var mh$ = GetNumaProcessorNode$MH();
        try {
            return (int)mh$.invokeExact(Processor, NodeNumber);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNumaNodeNumberFromHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$862.const$4,"GetNumaNodeNumberFromHandle");
    }
    /**
     * {@snippet :
     * BOOL GetNumaNodeNumberFromHandle(HANDLE hFile, PUSHORT NodeNumber);
     * }
     */
    public static int GetNumaNodeNumberFromHandle(MemorySegment hFile, MemorySegment NodeNumber) {
        var mh$ = GetNumaNodeNumberFromHandle$MH();
        try {
            return (int)mh$.invokeExact(hFile, NodeNumber);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNumaProcessorNodeEx$MH() {
        return RuntimeHelper.requireNonNull(constants$862.const$5,"GetNumaProcessorNodeEx");
    }
    /**
     * {@snippet :
     * BOOL GetNumaProcessorNodeEx(PPROCESSOR_NUMBER Processor, PUSHORT NodeNumber);
     * }
     */
    public static int GetNumaProcessorNodeEx(MemorySegment Processor, MemorySegment NodeNumber) {
        var mh$ = GetNumaProcessorNodeEx$MH();
        try {
            return (int)mh$.invokeExact(Processor, NodeNumber);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNumaNodeProcessorMask$MH() {
        return RuntimeHelper.requireNonNull(constants$863.const$0,"GetNumaNodeProcessorMask");
    }
    /**
     * {@snippet :
     * BOOL GetNumaNodeProcessorMask(UCHAR Node, PULONGLONG ProcessorMask);
     * }
     */
    public static int GetNumaNodeProcessorMask(byte Node, MemorySegment ProcessorMask) {
        var mh$ = GetNumaNodeProcessorMask$MH();
        try {
            return (int)mh$.invokeExact(Node, ProcessorMask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNumaAvailableMemoryNode$MH() {
        return RuntimeHelper.requireNonNull(constants$863.const$1,"GetNumaAvailableMemoryNode");
    }
    /**
     * {@snippet :
     * BOOL GetNumaAvailableMemoryNode(UCHAR Node, PULONGLONG AvailableBytes);
     * }
     */
    public static int GetNumaAvailableMemoryNode(byte Node, MemorySegment AvailableBytes) {
        var mh$ = GetNumaAvailableMemoryNode$MH();
        try {
            return (int)mh$.invokeExact(Node, AvailableBytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNumaAvailableMemoryNodeEx$MH() {
        return RuntimeHelper.requireNonNull(constants$863.const$2,"GetNumaAvailableMemoryNodeEx");
    }
    /**
     * {@snippet :
     * BOOL GetNumaAvailableMemoryNodeEx(USHORT Node, PULONGLONG AvailableBytes);
     * }
     */
    public static int GetNumaAvailableMemoryNodeEx(short Node, MemorySegment AvailableBytes) {
        var mh$ = GetNumaAvailableMemoryNodeEx$MH();
        try {
            return (int)mh$.invokeExact(Node, AvailableBytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNumaProximityNode$MH() {
        return RuntimeHelper.requireNonNull(constants$863.const$3,"GetNumaProximityNode");
    }
    /**
     * {@snippet :
     * BOOL GetNumaProximityNode(ULONG ProximityId, PUCHAR NodeNumber);
     * }
     */
    public static int GetNumaProximityNode(int ProximityId, MemorySegment NodeNumber) {
        var mh$ = GetNumaProximityNode$MH();
        try {
            return (int)mh$.invokeExact(ProximityId, NodeNumber);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterApplicationRecoveryCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$863.const$5,"RegisterApplicationRecoveryCallback");
    }
    /**
     * {@snippet :
     * HRESULT RegisterApplicationRecoveryCallback(APPLICATION_RECOVERY_CALLBACK pRecoveyCallback, PVOID pvParameter, DWORD dwPingInterval, DWORD dwFlags);
     * }
     */
    public static int RegisterApplicationRecoveryCallback(MemorySegment pRecoveyCallback, MemorySegment pvParameter, int dwPingInterval, int dwFlags) {
        var mh$ = RegisterApplicationRecoveryCallback$MH();
        try {
            return (int)mh$.invokeExact(pRecoveyCallback, pvParameter, dwPingInterval, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnregisterApplicationRecoveryCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$864.const$0,"UnregisterApplicationRecoveryCallback");
    }
    /**
     * {@snippet :
     * HRESULT UnregisterApplicationRecoveryCallback();
     * }
     */
    public static int UnregisterApplicationRecoveryCallback() {
        var mh$ = UnregisterApplicationRecoveryCallback$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterApplicationRestart$MH() {
        return RuntimeHelper.requireNonNull(constants$864.const$1,"RegisterApplicationRestart");
    }
    /**
     * {@snippet :
     * HRESULT RegisterApplicationRestart(PCWSTR pwzCommandline, DWORD dwFlags);
     * }
     */
    public static int RegisterApplicationRestart(MemorySegment pwzCommandline, int dwFlags) {
        var mh$ = RegisterApplicationRestart$MH();
        try {
            return (int)mh$.invokeExact(pwzCommandline, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnregisterApplicationRestart$MH() {
        return RuntimeHelper.requireNonNull(constants$864.const$2,"UnregisterApplicationRestart");
    }
    /**
     * {@snippet :
     * HRESULT UnregisterApplicationRestart();
     * }
     */
    public static int UnregisterApplicationRestart() {
        var mh$ = UnregisterApplicationRestart$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetApplicationRecoveryCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$864.const$3,"GetApplicationRecoveryCallback");
    }
    /**
     * {@snippet :
     * HRESULT GetApplicationRecoveryCallback(HANDLE hProcess, APPLICATION_RECOVERY_CALLBACK* pRecoveryCallback, PVOID* ppvParameter, PDWORD pdwPingInterval, PDWORD pdwFlags);
     * }
     */
    public static int GetApplicationRecoveryCallback(MemorySegment hProcess, MemorySegment pRecoveryCallback, MemorySegment ppvParameter, MemorySegment pdwPingInterval, MemorySegment pdwFlags) {
        var mh$ = GetApplicationRecoveryCallback$MH();
        try {
            return (int)mh$.invokeExact(hProcess, pRecoveryCallback, ppvParameter, pdwPingInterval, pdwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetApplicationRestartSettings$MH() {
        return RuntimeHelper.requireNonNull(constants$864.const$4,"GetApplicationRestartSettings");
    }
    /**
     * {@snippet :
     * HRESULT GetApplicationRestartSettings(HANDLE hProcess, PWSTR pwzCommandline, PDWORD pcchSize, PDWORD pdwFlags);
     * }
     */
    public static int GetApplicationRestartSettings(MemorySegment hProcess, MemorySegment pwzCommandline, MemorySegment pcchSize, MemorySegment pdwFlags) {
        var mh$ = GetApplicationRestartSettings$MH();
        try {
            return (int)mh$.invokeExact(hProcess, pwzCommandline, pcchSize, pdwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ApplicationRecoveryInProgress$MH() {
        return RuntimeHelper.requireNonNull(constants$864.const$5,"ApplicationRecoveryInProgress");
    }
    /**
     * {@snippet :
     * HRESULT ApplicationRecoveryInProgress(PBOOL pbCancelled);
     * }
     */
    public static int ApplicationRecoveryInProgress(MemorySegment pbCancelled) {
        var mh$ = ApplicationRecoveryInProgress$MH();
        try {
            return (int)mh$.invokeExact(pbCancelled);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ApplicationRecoveryFinished$MH() {
        return RuntimeHelper.requireNonNull(constants$865.const$0,"ApplicationRecoveryFinished");
    }
    /**
     * {@snippet :
     * void ApplicationRecoveryFinished(BOOL bSuccess);
     * }
     */
    public static void ApplicationRecoveryFinished(int bSuccess) {
        var mh$ = ApplicationRecoveryFinished$MH();
        try {
            mh$.invokeExact(bSuccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _FILE_BASIC_INFO* PFILE_BASIC_INFO;
     * }
     */
    public static final AddressLayout PFILE_BASIC_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _FILE_STANDARD_INFO* PFILE_STANDARD_INFO;
     * }
     */
    public static final AddressLayout PFILE_STANDARD_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _FILE_NAME_INFO* PFILE_NAME_INFO;
     * }
     */
    public static final AddressLayout PFILE_NAME_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _FILE_CASE_SENSITIVE_INFO* PFILE_CASE_SENSITIVE_INFO;
     * }
     */
    public static final AddressLayout PFILE_CASE_SENSITIVE_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _FILE_RENAME_INFO* PFILE_RENAME_INFO;
     * }
     */
    public static final AddressLayout PFILE_RENAME_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _FILE_ALLOCATION_INFO* PFILE_ALLOCATION_INFO;
     * }
     */
    public static final AddressLayout PFILE_ALLOCATION_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _FILE_END_OF_FILE_INFO* PFILE_END_OF_FILE_INFO;
     * }
     */
    public static final AddressLayout PFILE_END_OF_FILE_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _FILE_STREAM_INFO* PFILE_STREAM_INFO;
     * }
     */
    public static final AddressLayout PFILE_STREAM_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _FILE_COMPRESSION_INFO* PFILE_COMPRESSION_INFO;
     * }
     */
    public static final AddressLayout PFILE_COMPRESSION_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _FILE_ATTRIBUTE_TAG_INFO* PFILE_ATTRIBUTE_TAG_INFO;
     * }
     */
    public static final AddressLayout PFILE_ATTRIBUTE_TAG_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _FILE_DISPOSITION_INFO* PFILE_DISPOSITION_INFO;
     * }
     */
    public static final AddressLayout PFILE_DISPOSITION_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _FILE_DISPOSITION_INFO_EX* PFILE_DISPOSITION_INFO_EX;
     * }
     */
    public static final AddressLayout PFILE_DISPOSITION_INFO_EX = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _FILE_ID_BOTH_DIR_INFO* PFILE_ID_BOTH_DIR_INFO;
     * }
     */
    public static final AddressLayout PFILE_ID_BOTH_DIR_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _FILE_FULL_DIR_INFO* PFILE_FULL_DIR_INFO;
     * }
     */
    public static final AddressLayout PFILE_FULL_DIR_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * enum _PRIORITY_HINT.IoPriorityHintVeryLow = 0;
     * }
     */
    public static int IoPriorityHintVeryLow() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum _PRIORITY_HINT.IoPriorityHintLow = 1;
     * }
     */
    public static int IoPriorityHintLow() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum _PRIORITY_HINT.IoPriorityHintNormal = 2;
     * }
     */
    public static int IoPriorityHintNormal() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum _PRIORITY_HINT.MaximumIoPriorityHintType = 3;
     * }
     */
    public static int MaximumIoPriorityHintType() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * typedef struct _FILE_IO_PRIORITY_HINT_INFO* PFILE_IO_PRIORITY_HINT_INFO;
     * }
     */
    public static final AddressLayout PFILE_IO_PRIORITY_HINT_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _FILE_ALIGNMENT_INFO* PFILE_ALIGNMENT_INFO;
     * }
     */
    public static final AddressLayout PFILE_ALIGNMENT_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _FILE_STORAGE_INFO* PFILE_STORAGE_INFO;
     * }
     */
    public static final AddressLayout PFILE_STORAGE_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _FILE_ID_INFO* PFILE_ID_INFO;
     * }
     */
    public static final AddressLayout PFILE_ID_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _FILE_ID_EXTD_DIR_INFO* PFILE_ID_EXTD_DIR_INFO;
     * }
     */
    public static final AddressLayout PFILE_ID_EXTD_DIR_INFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _FILE_REMOTE_PROTOCOL_INFO* PFILE_REMOTE_PROTOCOL_INFO;
     * }
     */
    public static final AddressLayout PFILE_REMOTE_PROTOCOL_INFO = RuntimeHelper.POINTER;
    public static MethodHandle GetFileInformationByHandleEx$MH() {
        return RuntimeHelper.requireNonNull(constants$879.const$0,"GetFileInformationByHandleEx");
    }
    /**
     * {@snippet :
     * BOOL GetFileInformationByHandleEx(HANDLE hFile, FILE_INFO_BY_HANDLE_CLASS FileInformationClass, LPVOID lpFileInformation, DWORD dwBufferSize);
     * }
     */
    public static int GetFileInformationByHandleEx(MemorySegment hFile, int FileInformationClass, MemorySegment lpFileInformation, int dwBufferSize) {
        var mh$ = GetFileInformationByHandleEx$MH();
        try {
            return (int)mh$.invokeExact(hFile, FileInformationClass, lpFileInformation, dwBufferSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum _FILE_ID_TYPE.FileIdType = 0;
     * }
     */
    public static int FileIdType() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum _FILE_ID_TYPE.ObjectIdType = 1;
     * }
     */
    public static int ObjectIdType() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum _FILE_ID_TYPE.ExtendedFileIdType = 2;
     * }
     */
    public static int ExtendedFileIdType() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum _FILE_ID_TYPE.MaximumFileIdType = 3;
     * }
     */
    public static int MaximumFileIdType() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * typedef enum _FILE_ID_TYPE* PFILE_ID_TYPE;
     * }
     */
    public static final AddressLayout PFILE_ID_TYPE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct FILE_ID_DESCRIPTOR* LPFILE_ID_DESCRIPTOR;
     * }
     */
    public static final AddressLayout LPFILE_ID_DESCRIPTOR = RuntimeHelper.POINTER;
    public static MethodHandle OpenFileById$MH() {
        return RuntimeHelper.requireNonNull(constants$879.const$5,"OpenFileById");
    }
    /**
     * {@snippet :
     * HANDLE OpenFileById(HANDLE hVolumeHint, LPFILE_ID_DESCRIPTOR lpFileId, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwFlagsAndAttributes);
     * }
     */
    public static MemorySegment OpenFileById(MemorySegment hVolumeHint, MemorySegment lpFileId, int dwDesiredAccess, int dwShareMode, MemorySegment lpSecurityAttributes, int dwFlagsAndAttributes) {
        var mh$ = OpenFileById$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hVolumeHint, lpFileId, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwFlagsAndAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateSymbolicLinkA$MH() {
        return RuntimeHelper.requireNonNull(constants$880.const$1,"CreateSymbolicLinkA");
    }
    /**
     * {@snippet :
     * BOOLEAN CreateSymbolicLinkA(LPCSTR lpSymlinkFileName, LPCSTR lpTargetFileName, DWORD dwFlags);
     * }
     */
    public static byte CreateSymbolicLinkA(MemorySegment lpSymlinkFileName, MemorySegment lpTargetFileName, int dwFlags) {
        var mh$ = CreateSymbolicLinkA$MH();
        try {
            return (byte)mh$.invokeExact(lpSymlinkFileName, lpTargetFileName, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateSymbolicLinkW$MH() {
        return RuntimeHelper.requireNonNull(constants$880.const$2,"CreateSymbolicLinkW");
    }
    /**
     * {@snippet :
     * BOOLEAN CreateSymbolicLinkW(LPCWSTR lpSymlinkFileName, LPCWSTR lpTargetFileName, DWORD dwFlags);
     * }
     */
    public static byte CreateSymbolicLinkW(MemorySegment lpSymlinkFileName, MemorySegment lpTargetFileName, int dwFlags) {
        var mh$ = CreateSymbolicLinkW$MH();
        try {
            return (byte)mh$.invokeExact(lpSymlinkFileName, lpTargetFileName, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryActCtxSettingsW$MH() {
        return RuntimeHelper.requireNonNull(constants$880.const$4,"QueryActCtxSettingsW");
    }
    /**
     * {@snippet :
     * BOOL QueryActCtxSettingsW(DWORD dwFlags, HANDLE hActCtx, PCWSTR settingsNameSpace, PCWSTR settingName, PWSTR pvBuffer, SIZE_T dwBuffer, SIZE_T* pdwWrittenOrRequired);
     * }
     */
    public static int QueryActCtxSettingsW(int dwFlags, MemorySegment hActCtx, MemorySegment settingsNameSpace, MemorySegment settingName, MemorySegment pvBuffer, long dwBuffer, MemorySegment pdwWrittenOrRequired) {
        var mh$ = QueryActCtxSettingsW$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, hActCtx, settingsNameSpace, settingName, pvBuffer, dwBuffer, pdwWrittenOrRequired);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateSymbolicLinkTransactedA$MH() {
        return RuntimeHelper.requireNonNull(constants$880.const$6,"CreateSymbolicLinkTransactedA");
    }
    /**
     * {@snippet :
     * BOOLEAN CreateSymbolicLinkTransactedA(LPCSTR lpSymlinkFileName, LPCSTR lpTargetFileName, DWORD dwFlags, HANDLE hTransaction);
     * }
     */
    public static byte CreateSymbolicLinkTransactedA(MemorySegment lpSymlinkFileName, MemorySegment lpTargetFileName, int dwFlags, MemorySegment hTransaction) {
        var mh$ = CreateSymbolicLinkTransactedA$MH();
        try {
            return (byte)mh$.invokeExact(lpSymlinkFileName, lpTargetFileName, dwFlags, hTransaction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateSymbolicLinkTransactedW$MH() {
        return RuntimeHelper.requireNonNull(constants$881.const$0,"CreateSymbolicLinkTransactedW");
    }
    /**
     * {@snippet :
     * BOOLEAN CreateSymbolicLinkTransactedW(LPCWSTR lpSymlinkFileName, LPCWSTR lpTargetFileName, DWORD dwFlags, HANDLE hTransaction);
     * }
     */
    public static byte CreateSymbolicLinkTransactedW(MemorySegment lpSymlinkFileName, MemorySegment lpTargetFileName, int dwFlags, MemorySegment hTransaction) {
        var mh$ = CreateSymbolicLinkTransactedW$MH();
        try {
            return (byte)mh$.invokeExact(lpSymlinkFileName, lpTargetFileName, dwFlags, hTransaction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReplacePartitionUnit$MH() {
        return RuntimeHelper.requireNonNull(constants$881.const$1,"ReplacePartitionUnit");
    }
    /**
     * {@snippet :
     * BOOL ReplacePartitionUnit(PWSTR TargetPartition, PWSTR SparePartition, ULONG Flags);
     * }
     */
    public static int ReplacePartitionUnit(MemorySegment TargetPartition, MemorySegment SparePartition, int Flags) {
        var mh$ = ReplacePartitionUnit$MH();
        try {
            return (int)mh$.invokeExact(TargetPartition, SparePartition, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddSecureMemoryCacheCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$881.const$2,"AddSecureMemoryCacheCallback");
    }
    /**
     * {@snippet :
     * BOOL AddSecureMemoryCacheCallback(PSECURE_MEMORY_CACHE_CALLBACK pfnCallBack);
     * }
     */
    public static int AddSecureMemoryCacheCallback(MemorySegment pfnCallBack) {
        var mh$ = AddSecureMemoryCacheCallback$MH();
        try {
            return (int)mh$.invokeExact(pfnCallBack);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RemoveSecureMemoryCacheCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$881.const$3,"RemoveSecureMemoryCacheCallback");
    }
    /**
     * {@snippet :
     * BOOL RemoveSecureMemoryCacheCallback(PSECURE_MEMORY_CACHE_CALLBACK pfnCallBack);
     * }
     */
    public static int RemoveSecureMemoryCacheCallback(MemorySegment pfnCallBack) {
        var mh$ = RemoveSecureMemoryCacheCallback$MH();
        try {
            return (int)mh$.invokeExact(pfnCallBack);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CopyContext$MH() {
        return RuntimeHelper.requireNonNull(constants$881.const$4,"CopyContext");
    }
    /**
     * {@snippet :
     * BOOL CopyContext(PCONTEXT Destination, DWORD ContextFlags, PCONTEXT Source);
     * }
     */
    public static int CopyContext(MemorySegment Destination, int ContextFlags, MemorySegment Source) {
        var mh$ = CopyContext$MH();
        try {
            return (int)mh$.invokeExact(Destination, ContextFlags, Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitializeContext$MH() {
        return RuntimeHelper.requireNonNull(constants$881.const$5,"InitializeContext");
    }
    /**
     * {@snippet :
     * BOOL InitializeContext(PVOID Buffer, DWORD ContextFlags, PCONTEXT* Context, PDWORD ContextLength);
     * }
     */
    public static int InitializeContext(MemorySegment Buffer, int ContextFlags, MemorySegment Context, MemorySegment ContextLength) {
        var mh$ = InitializeContext$MH();
        try {
            return (int)mh$.invokeExact(Buffer, ContextFlags, Context, ContextLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitializeContext2$MH() {
        return RuntimeHelper.requireNonNull(constants$882.const$1,"InitializeContext2");
    }
    /**
     * {@snippet :
     * BOOL InitializeContext2(PVOID Buffer, DWORD ContextFlags, PCONTEXT* Context, PDWORD ContextLength, ULONG64 XStateCompactionMask);
     * }
     */
    public static int InitializeContext2(MemorySegment Buffer, int ContextFlags, MemorySegment Context, MemorySegment ContextLength, long XStateCompactionMask) {
        var mh$ = InitializeContext2$MH();
        try {
            return (int)mh$.invokeExact(Buffer, ContextFlags, Context, ContextLength, XStateCompactionMask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetEnabledXStateFeatures$MH() {
        return RuntimeHelper.requireNonNull(constants$882.const$2,"GetEnabledXStateFeatures");
    }
    /**
     * {@snippet :
     * DWORD64 GetEnabledXStateFeatures();
     * }
     */
    public static long GetEnabledXStateFeatures() {
        var mh$ = GetEnabledXStateFeatures$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetXStateFeaturesMask$MH() {
        return RuntimeHelper.requireNonNull(constants$882.const$3,"GetXStateFeaturesMask");
    }
    /**
     * {@snippet :
     * BOOL GetXStateFeaturesMask(PCONTEXT Context, PDWORD64 FeatureMask);
     * }
     */
    public static int GetXStateFeaturesMask(MemorySegment Context, MemorySegment FeatureMask) {
        var mh$ = GetXStateFeaturesMask$MH();
        try {
            return (int)mh$.invokeExact(Context, FeatureMask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LocateXStateFeature$MH() {
        return RuntimeHelper.requireNonNull(constants$882.const$4,"LocateXStateFeature");
    }
    /**
     * {@snippet :
     * PVOID LocateXStateFeature(PCONTEXT Context, DWORD FeatureId, PDWORD Length);
     * }
     */
    public static MemorySegment LocateXStateFeature(MemorySegment Context, int FeatureId, MemorySegment Length) {
        var mh$ = LocateXStateFeature$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(Context, FeatureId, Length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetXStateFeaturesMask$MH() {
        return RuntimeHelper.requireNonNull(constants$882.const$5,"SetXStateFeaturesMask");
    }
    /**
     * {@snippet :
     * BOOL SetXStateFeaturesMask(PCONTEXT Context, DWORD64 FeatureMask);
     * }
     */
    public static int SetXStateFeaturesMask(MemorySegment Context, long FeatureMask) {
        var mh$ = SetXStateFeaturesMask$MH();
        try {
            return (int)mh$.invokeExact(Context, FeatureMask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetThreadEnabledXStateFeatures$MH() {
        return RuntimeHelper.requireNonNull(constants$883.const$0,"GetThreadEnabledXStateFeatures");
    }
    /**
     * {@snippet :
     * DWORD64 GetThreadEnabledXStateFeatures();
     * }
     */
    public static long GetThreadEnabledXStateFeatures() {
        var mh$ = GetThreadEnabledXStateFeatures$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnableProcessOptionalXStateFeatures$MH() {
        return RuntimeHelper.requireNonNull(constants$883.const$2,"EnableProcessOptionalXStateFeatures");
    }
    /**
     * {@snippet :
     * BOOL EnableProcessOptionalXStateFeatures(DWORD64 Features);
     * }
     */
    public static int EnableProcessOptionalXStateFeatures(long Features) {
        var mh$ = EnableProcessOptionalXStateFeatures$MH();
        try {
            return (int)mh$.invokeExact(Features);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnableThreadProfiling$MH() {
        return RuntimeHelper.requireNonNull(constants$883.const$3,"EnableThreadProfiling");
    }
    /**
     * {@snippet :
     * DWORD EnableThreadProfiling(HANDLE ThreadHandle, DWORD Flags, DWORD64 HardwareCounters, HANDLE* PerformanceDataHandle);
     * }
     */
    public static int EnableThreadProfiling(MemorySegment ThreadHandle, int Flags, long HardwareCounters, MemorySegment PerformanceDataHandle) {
        var mh$ = EnableThreadProfiling$MH();
        try {
            return (int)mh$.invokeExact(ThreadHandle, Flags, HardwareCounters, PerformanceDataHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DisableThreadProfiling$MH() {
        return RuntimeHelper.requireNonNull(constants$883.const$4,"DisableThreadProfiling");
    }
    /**
     * {@snippet :
     * DWORD DisableThreadProfiling(HANDLE PerformanceDataHandle);
     * }
     */
    public static int DisableThreadProfiling(MemorySegment PerformanceDataHandle) {
        var mh$ = DisableThreadProfiling$MH();
        try {
            return (int)mh$.invokeExact(PerformanceDataHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryThreadProfiling$MH() {
        return RuntimeHelper.requireNonNull(constants$883.const$5,"QueryThreadProfiling");
    }
    /**
     * {@snippet :
     * DWORD QueryThreadProfiling(HANDLE ThreadHandle, PBOOLEAN Enabled);
     * }
     */
    public static int QueryThreadProfiling(MemorySegment ThreadHandle, MemorySegment Enabled) {
        var mh$ = QueryThreadProfiling$MH();
        try {
            return (int)mh$.invokeExact(ThreadHandle, Enabled);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadThreadProfilingData$MH() {
        return RuntimeHelper.requireNonNull(constants$884.const$0,"ReadThreadProfilingData");
    }
    /**
     * {@snippet :
     * DWORD ReadThreadProfilingData(HANDLE PerformanceDataHandle, DWORD Flags, PPERFORMANCE_DATA PerformanceData);
     * }
     */
    public static int ReadThreadProfilingData(MemorySegment PerformanceDataHandle, int Flags, MemorySegment PerformanceData) {
        var mh$ = ReadThreadProfilingData$MH();
        try {
            return (int)mh$.invokeExact(PerformanceDataHandle, Flags, PerformanceData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RaiseCustomSystemEventTrigger$MH() {
        return RuntimeHelper.requireNonNull(constants$884.const$1,"RaiseCustomSystemEventTrigger");
    }
    /**
     * {@snippet :
     * DWORD RaiseCustomSystemEventTrigger(PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG CustomSystemEventTriggerConfig);
     * }
     */
    public static int RaiseCustomSystemEventTrigger(MemorySegment CustomSystemEventTriggerConfig) {
        var mh$ = RaiseCustomSystemEventTrigger$MH();
        try {
            return (int)mh$.invokeExact(CustomSystemEventTriggerConfig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _DRAWPATRECT* PDRAWPATRECT;
     * }
     */
    public static final AddressLayout PDRAWPATRECT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _PSINJECTDATA* PPSINJECTDATA;
     * }
     */
    public static final AddressLayout PPSINJECTDATA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _PSFEATURE_OUTPUT* PPSFEATURE_OUTPUT;
     * }
     */
    public static final AddressLayout PPSFEATURE_OUTPUT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _PSFEATURE_CUSTPAPER* PPSFEATURE_CUSTPAPER;
     * }
     */
    public static final AddressLayout PPSFEATURE_CUSTPAPER = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagXFORM* PXFORM;
     * }
     */
    public static final AddressLayout PXFORM = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagXFORM* LPXFORM;
     * }
     */
    public static final AddressLayout LPXFORM = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagBITMAP* PBITMAP;
     * }
     */
    public static final AddressLayout PBITMAP = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagBITMAP* NPBITMAP;
     * }
     */
    public static final AddressLayout NPBITMAP = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagBITMAP* LPBITMAP;
     * }
     */
    public static final AddressLayout LPBITMAP = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagRGBTRIPLE* PRGBTRIPLE;
     * }
     */
    public static final AddressLayout PRGBTRIPLE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagRGBTRIPLE* NPRGBTRIPLE;
     * }
     */
    public static final AddressLayout NPRGBTRIPLE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagRGBTRIPLE* LPRGBTRIPLE;
     * }
     */
    public static final AddressLayout LPRGBTRIPLE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagRGBQUAD* LPRGBQUAD;
     * }
     */
    public static final AddressLayout LPRGBQUAD = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef long LCSCSTYPE;
     * }
     */
    public static final OfInt LCSCSTYPE = JAVA_INT;
    /**
     * {@snippet :
     * typedef long LCSGAMUTMATCH;
     * }
     */
    public static final OfInt LCSGAMUTMATCH = JAVA_INT;
    /**
     * {@snippet :
     * typedef long FXPT16DOT16;
     * }
     */
    public static final OfInt FXPT16DOT16 = JAVA_INT;
    /**
     * {@snippet :
     * typedef long* LPFXPT16DOT16;
     * }
     */
    public static final AddressLayout LPFXPT16DOT16 = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef long FXPT2DOT30;
     * }
     */
    public static final OfInt FXPT2DOT30 = JAVA_INT;
    /**
     * {@snippet :
     * typedef long* LPFXPT2DOT30;
     * }
     */
    public static final AddressLayout LPFXPT2DOT30 = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagCIEXYZ* LPCIEXYZ;
     * }
     */
    public static final AddressLayout LPCIEXYZ = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagICEXYZTRIPLE* LPCIEXYZTRIPLE;
     * }
     */
    public static final AddressLayout LPCIEXYZTRIPLE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagLOGCOLORSPACEA* LPLOGCOLORSPACEA;
     * }
     */
    public static final AddressLayout LPLOGCOLORSPACEA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagLOGCOLORSPACEW* LPLOGCOLORSPACEW;
     * }
     */
    public static final AddressLayout LPLOGCOLORSPACEW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagLOGCOLORSPACEA* LPLOGCOLORSPACE;
     * }
     */
    public static final AddressLayout LPLOGCOLORSPACE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagBITMAPCOREHEADER* LPBITMAPCOREHEADER;
     * }
     */
    public static final AddressLayout LPBITMAPCOREHEADER = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagBITMAPCOREHEADER* PBITMAPCOREHEADER;
     * }
     */
    public static final AddressLayout PBITMAPCOREHEADER = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagBITMAPINFOHEADER* LPBITMAPINFOHEADER;
     * }
     */
    public static final AddressLayout LPBITMAPINFOHEADER = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagBITMAPINFOHEADER* PBITMAPINFOHEADER;
     * }
     */
    public static final AddressLayout PBITMAPINFOHEADER = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct * LPBITMAPV4HEADER;
     * }
     */
    public static final AddressLayout LPBITMAPV4HEADER = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct * PBITMAPV4HEADER;
     * }
     */
    public static final AddressLayout PBITMAPV4HEADER = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct * LPBITMAPV5HEADER;
     * }
     */
    public static final AddressLayout LPBITMAPV5HEADER = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct * PBITMAPV5HEADER;
     * }
     */
    public static final AddressLayout PBITMAPV5HEADER = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagBITMAPINFO* LPBITMAPINFO;
     * }
     */
    public static final AddressLayout LPBITMAPINFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagBITMAPINFO* PBITMAPINFO;
     * }
     */
    public static final AddressLayout PBITMAPINFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagBITMAPCOREINFO* LPBITMAPCOREINFO;
     * }
     */
    public static final AddressLayout LPBITMAPCOREINFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagBITMAPCOREINFO* PBITMAPCOREINFO;
     * }
     */
    public static final AddressLayout PBITMAPCOREINFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagBITMAPFILEHEADER* LPBITMAPFILEHEADER;
     * }
     */
    public static final AddressLayout LPBITMAPFILEHEADER = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagBITMAPFILEHEADER* PBITMAPFILEHEADER;
     * }
     */
    public static final AddressLayout PBITMAPFILEHEADER = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagFONTSIGNATURE* PFONTSIGNATURE;
     * }
     */
    public static final AddressLayout PFONTSIGNATURE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagFONTSIGNATURE* LPFONTSIGNATURE;
     * }
     */
    public static final AddressLayout LPFONTSIGNATURE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagCHARSETINFO* PCHARSETINFO;
     * }
     */
    public static final AddressLayout PCHARSETINFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagCHARSETINFO* NPCHARSETINFO;
     * }
     */
    public static final AddressLayout NPCHARSETINFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagCHARSETINFO* LPCHARSETINFO;
     * }
     */
    public static final AddressLayout LPCHARSETINFO = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagLOCALESIGNATURE* PLOCALESIGNATURE;
     * }
     */
    public static final AddressLayout PLOCALESIGNATURE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagLOCALESIGNATURE* LPLOCALESIGNATURE;
     * }
     */
    public static final AddressLayout LPLOCALESIGNATURE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagHANDLETABLE* PHANDLETABLE;
     * }
     */
    public static final AddressLayout PHANDLETABLE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagHANDLETABLE* LPHANDLETABLE;
     * }
     */
    public static final AddressLayout LPHANDLETABLE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagMETARECORD* PMETARECORD;
     * }
     */
    public static final AddressLayout PMETARECORD = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagMETARECORD* LPMETARECORD;
     * }
     */
    public static final AddressLayout LPMETARECORD = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagMETAFILEPICT* LPMETAFILEPICT;
     * }
     */
    public static final AddressLayout LPMETAFILEPICT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagMETAHEADER* PMETAHEADER;
     * }
     */
    public static final AddressLayout PMETAHEADER = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagMETAHEADER* LPMETAHEADER;
     * }
     */
    public static final AddressLayout LPMETAHEADER = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagENHMETARECORD* PENHMETARECORD;
     * }
     */
    public static final AddressLayout PENHMETARECORD = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagENHMETARECORD* LPENHMETARECORD;
     * }
     */
    public static final AddressLayout LPENHMETARECORD = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagENHMETAHEADER* PENHMETAHEADER;
     * }
     */
    public static final AddressLayout PENHMETAHEADER = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagENHMETAHEADER* LPENHMETAHEADER;
     * }
     */
    public static final AddressLayout LPENHMETAHEADER = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef unsigned char BCHAR;
     * }
     */
    public static final OfByte BCHAR = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef struct tagTEXTMETRICA* PTEXTMETRICA;
     * }
     */
    public static final AddressLayout PTEXTMETRICA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagTEXTMETRICA* NPTEXTMETRICA;
     * }
     */
    public static final AddressLayout NPTEXTMETRICA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagTEXTMETRICA* LPTEXTMETRICA;
     * }
     */
    public static final AddressLayout LPTEXTMETRICA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagTEXTMETRICW* PTEXTMETRICW;
     * }
     */
    public static final AddressLayout PTEXTMETRICW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagTEXTMETRICW* NPTEXTMETRICW;
     * }
     */
    public static final AddressLayout NPTEXTMETRICW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagTEXTMETRICW* LPTEXTMETRICW;
     * }
     */
    public static final AddressLayout LPTEXTMETRICW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagTEXTMETRICA* PTEXTMETRIC;
     * }
     */
    public static final AddressLayout PTEXTMETRIC = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagTEXTMETRICA* NPTEXTMETRIC;
     * }
     */
    public static final AddressLayout NPTEXTMETRIC = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagTEXTMETRICA* LPTEXTMETRIC;
     * }
     */
    public static final AddressLayout LPTEXTMETRIC = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagNEWTEXTMETRICA* PNEWTEXTMETRICA;
     * }
     */
    public static final AddressLayout PNEWTEXTMETRICA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagNEWTEXTMETRICA* NPNEWTEXTMETRICA;
     * }
     */
    public static final AddressLayout NPNEWTEXTMETRICA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagNEWTEXTMETRICA* LPNEWTEXTMETRICA;
     * }
     */
    public static final AddressLayout LPNEWTEXTMETRICA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagNEWTEXTMETRICW* PNEWTEXTMETRICW;
     * }
     */
    public static final AddressLayout PNEWTEXTMETRICW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagNEWTEXTMETRICW* NPNEWTEXTMETRICW;
     * }
     */
    public static final AddressLayout NPNEWTEXTMETRICW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagNEWTEXTMETRICW* LPNEWTEXTMETRICW;
     * }
     */
    public static final AddressLayout LPNEWTEXTMETRICW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagNEWTEXTMETRICA* PNEWTEXTMETRIC;
     * }
     */
    public static final AddressLayout PNEWTEXTMETRIC = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagNEWTEXTMETRICA* NPNEWTEXTMETRIC;
     * }
     */
    public static final AddressLayout NPNEWTEXTMETRIC = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagNEWTEXTMETRICA* LPNEWTEXTMETRIC;
     * }
     */
    public static final AddressLayout LPNEWTEXTMETRIC = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagPELARRAY* PPELARRAY;
     * }
     */
    public static final AddressLayout PPELARRAY = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagPELARRAY* NPPELARRAY;
     * }
     */
    public static final AddressLayout NPPELARRAY = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagPELARRAY* LPPELARRAY;
     * }
     */
    public static final AddressLayout LPPELARRAY = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagLOGBRUSH* PLOGBRUSH;
     * }
     */
    public static final AddressLayout PLOGBRUSH = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagLOGBRUSH* NPLOGBRUSH;
     * }
     */
    public static final AddressLayout NPLOGBRUSH = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagLOGBRUSH* LPLOGBRUSH;
     * }
     */
    public static final AddressLayout LPLOGBRUSH = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagLOGBRUSH32* PLOGBRUSH32;
     * }
     */
    public static final AddressLayout PLOGBRUSH32 = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagLOGBRUSH32* NPLOGBRUSH32;
     * }
     */
    public static final AddressLayout NPLOGBRUSH32 = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagLOGBRUSH32* LPLOGBRUSH32;
     * }
     */
    public static final AddressLayout LPLOGBRUSH32 = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagLOGBRUSH* PPATTERN;
     * }
     */
    public static final AddressLayout PPATTERN = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagLOGBRUSH* NPPATTERN;
     * }
     */
    public static final AddressLayout NPPATTERN = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagLOGBRUSH* LPPATTERN;
     * }
     */
    public static final AddressLayout LPPATTERN = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagLOGPEN* PLOGPEN;
     * }
     */
    public static final AddressLayout PLOGPEN = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagLOGPEN* NPLOGPEN;
     * }
     */
    public static final AddressLayout NPLOGPEN = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagLOGPEN* LPLOGPEN;
     * }
     */
    public static final AddressLayout LPLOGPEN = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEXTLOGPEN* PEXTLOGPEN;
     * }
     */
    public static final AddressLayout PEXTLOGPEN = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEXTLOGPEN* NPEXTLOGPEN;
     * }
     */
    public static final AddressLayout NPEXTLOGPEN = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEXTLOGPEN* LPEXTLOGPEN;
     * }
     */
    public static final AddressLayout LPEXTLOGPEN = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEXTLOGPEN32* PEXTLOGPEN32;
     * }
     */
    public static final AddressLayout PEXTLOGPEN32 = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEXTLOGPEN32* NPEXTLOGPEN32;
     * }
     */
    public static final AddressLayout NPEXTLOGPEN32 = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEXTLOGPEN32* LPEXTLOGPEN32;
     * }
     */
    public static final AddressLayout LPEXTLOGPEN32 = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagPALETTEENTRY* PPALETTEENTRY;
     * }
     */
    public static final AddressLayout PPALETTEENTRY = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagPALETTEENTRY* LPPALETTEENTRY;
     * }
     */
    public static final AddressLayout LPPALETTEENTRY = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagLOGPALETTE* PLOGPALETTE;
     * }
     */
    public static final AddressLayout PLOGPALETTE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagLOGPALETTE* NPLOGPALETTE;
     * }
     */
    public static final AddressLayout NPLOGPALETTE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagLOGPALETTE* LPLOGPALETTE;
     * }
     */
    public static final AddressLayout LPLOGPALETTE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagLOGFONTA* PLOGFONTA;
     * }
     */
    public static final AddressLayout PLOGFONTA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagLOGFONTA* NPLOGFONTA;
     * }
     */
    public static final AddressLayout NPLOGFONTA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagLOGFONTA* LPLOGFONTA;
     * }
     */
    public static final AddressLayout LPLOGFONTA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagLOGFONTW* PLOGFONTW;
     * }
     */
    public static final AddressLayout PLOGFONTW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagLOGFONTW* NPLOGFONTW;
     * }
     */
    public static final AddressLayout NPLOGFONTW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagLOGFONTW* LPLOGFONTW;
     * }
     */
    public static final AddressLayout LPLOGFONTW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagLOGFONTA* PLOGFONT;
     * }
     */
    public static final AddressLayout PLOGFONT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagLOGFONTA* NPLOGFONT;
     * }
     */
    public static final AddressLayout NPLOGFONT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagLOGFONTA* LPLOGFONT;
     * }
     */
    public static final AddressLayout LPLOGFONT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagENUMLOGFONTA* LPENUMLOGFONTA;
     * }
     */
    public static final AddressLayout LPENUMLOGFONTA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagENUMLOGFONTW* LPENUMLOGFONTW;
     * }
     */
    public static final AddressLayout LPENUMLOGFONTW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagENUMLOGFONTA* LPENUMLOGFONT;
     * }
     */
    public static final AddressLayout LPENUMLOGFONT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagENUMLOGFONTEXA* LPENUMLOGFONTEXA;
     * }
     */
    public static final AddressLayout LPENUMLOGFONTEXA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagENUMLOGFONTEXW* LPENUMLOGFONTEXW;
     * }
     */
    public static final AddressLayout LPENUMLOGFONTEXW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagENUMLOGFONTEXA* LPENUMLOGFONTEX;
     * }
     */
    public static final AddressLayout LPENUMLOGFONTEX = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagPANOSE* LPPANOSE;
     * }
     */
    public static final AddressLayout LPPANOSE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEXTLOGFONTA* PEXTLOGFONTA;
     * }
     */
    public static final AddressLayout PEXTLOGFONTA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEXTLOGFONTA* NPEXTLOGFONTA;
     * }
     */
    public static final AddressLayout NPEXTLOGFONTA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEXTLOGFONTA* LPEXTLOGFONTA;
     * }
     */
    public static final AddressLayout LPEXTLOGFONTA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEXTLOGFONTW* PEXTLOGFONTW;
     * }
     */
    public static final AddressLayout PEXTLOGFONTW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEXTLOGFONTW* NPEXTLOGFONTW;
     * }
     */
    public static final AddressLayout NPEXTLOGFONTW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEXTLOGFONTW* LPEXTLOGFONTW;
     * }
     */
    public static final AddressLayout LPEXTLOGFONTW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEXTLOGFONTA* PEXTLOGFONT;
     * }
     */
    public static final AddressLayout PEXTLOGFONT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEXTLOGFONTA* NPEXTLOGFONT;
     * }
     */
    public static final AddressLayout NPEXTLOGFONT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagEXTLOGFONTA* LPEXTLOGFONT;
     * }
     */
    public static final AddressLayout LPEXTLOGFONT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _devicemodeA* PDEVMODEA;
     * }
     */
    public static final AddressLayout PDEVMODEA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _devicemodeA* NPDEVMODEA;
     * }
     */
    public static final AddressLayout NPDEVMODEA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _devicemodeA* LPDEVMODEA;
     * }
     */
    public static final AddressLayout LPDEVMODEA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _devicemodeW* PDEVMODEW;
     * }
     */
    public static final AddressLayout PDEVMODEW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _devicemodeW* NPDEVMODEW;
     * }
     */
    public static final AddressLayout NPDEVMODEW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _devicemodeW* LPDEVMODEW;
     * }
     */
    public static final AddressLayout LPDEVMODEW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _devicemodeA* PDEVMODE;
     * }
     */
    public static final AddressLayout PDEVMODE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _devicemodeA* NPDEVMODE;
     * }
     */
    public static final AddressLayout NPDEVMODE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _devicemodeA* LPDEVMODE;
     * }
     */
    public static final AddressLayout LPDEVMODE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _DISPLAY_DEVICEA* PDISPLAY_DEVICEA;
     * }
     */
    public static final AddressLayout PDISPLAY_DEVICEA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _DISPLAY_DEVICEA* LPDISPLAY_DEVICEA;
     * }
     */
    public static final AddressLayout LPDISPLAY_DEVICEA = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _DISPLAY_DEVICEW* PDISPLAY_DEVICEW;
     * }
     */
    public static final AddressLayout PDISPLAY_DEVICEW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _DISPLAY_DEVICEW* LPDISPLAY_DEVICEW;
     * }
     */
    public static final AddressLayout LPDISPLAY_DEVICEW = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _DISPLAY_DEVICEA* PDISPLAY_DEVICE;
     * }
     */
    public static final AddressLayout PDISPLAY_DEVICE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _DISPLAY_DEVICEA* LPDISPLAY_DEVICE;
     * }
     */
    public static final AddressLayout LPDISPLAY_DEVICE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_OUTPUT_TECHNOLOGY_OTHER = -1;
     * }
     */
    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_OTHER() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HD15 = 0;
     * }
     */
    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HD15() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SVIDEO = 1;
     * }
     */
    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SVIDEO() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPOSITE_VIDEO = 2;
     * }
     */
    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPOSITE_VIDEO() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPONENT_VIDEO = 3;
     * }
     */
    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPONENT_VIDEO() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DVI = 4;
     * }
     */
    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DVI() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HDMI = 5;
     * }
     */
    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HDMI() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_OUTPUT_TECHNOLOGY_LVDS = 6;
     * }
     */
    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_LVDS() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_OUTPUT_TECHNOLOGY_D_JPN = 8;
     * }
     */
    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_D_JPN() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDI = 9;
     * }
     */
    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDI() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EXTERNAL = 10;
     * }
     */
    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EXTERNAL() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EMBEDDED = 11;
     * }
     */
    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EMBEDDED() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EXTERNAL = 12;
     * }
     */
    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EXTERNAL() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EMBEDDED = 13;
     * }
     */
    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EMBEDDED() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDTVDONGLE = 14;
     * }
     */
    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDTVDONGLE() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_OUTPUT_TECHNOLOGY_MIRACAST = 15;
     * }
     */
    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_MIRACAST() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_WIRED = 16;
     * }
     */
    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_WIRED() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_VIRTUAL = 17;
     * }
     */
    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_VIRTUAL() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_USB_TUNNEL = 18;
     * }
     */
    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_USB_TUNNEL() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INTERNAL = -2147483648;
     * }
     */
    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INTERNAL() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_OUTPUT_TECHNOLOGY_FORCE_UINT32 = -1;
     * }
     */
    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_FORCE_UINT32() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED = 0;
     * }
     */
    public static int DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE = 1;
     * }
     */
    public static int DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED = 2;
     * }
     */
    public static int DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_UPPERFIELDFIRST = 2;
     * }
     */
    public static int DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_UPPERFIELDFIRST() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST = 3;
     * }
     */
    public static int DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_SCANLINE_ORDERING_FORCE_UINT32 = -1;
     * }
     */
    public static int DISPLAYCONFIG_SCANLINE_ORDERING_FORCE_UINT32() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_SCALING_IDENTITY = 1;
     * }
     */
    public static int DISPLAYCONFIG_SCALING_IDENTITY() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_SCALING_CENTERED = 2;
     * }
     */
    public static int DISPLAYCONFIG_SCALING_CENTERED() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_SCALING_STRETCHED = 3;
     * }
     */
    public static int DISPLAYCONFIG_SCALING_STRETCHED() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_SCALING_ASPECTRATIOCENTEREDMAX = 4;
     * }
     */
    public static int DISPLAYCONFIG_SCALING_ASPECTRATIOCENTEREDMAX() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_SCALING_CUSTOM = 5;
     * }
     */
    public static int DISPLAYCONFIG_SCALING_CUSTOM() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_SCALING_PREFERRED = 128;
     * }
     */
    public static int DISPLAYCONFIG_SCALING_PREFERRED() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_SCALING_FORCE_UINT32 = -1;
     * }
     */
    public static int DISPLAYCONFIG_SCALING_FORCE_UINT32() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_ROTATION_IDENTITY = 1;
     * }
     */
    public static int DISPLAYCONFIG_ROTATION_IDENTITY() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_ROTATION_ROTATE90 = 2;
     * }
     */
    public static int DISPLAYCONFIG_ROTATION_ROTATE90() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_ROTATION_ROTATE180 = 3;
     * }
     */
    public static int DISPLAYCONFIG_ROTATION_ROTATE180() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_ROTATION_ROTATE270 = 4;
     * }
     */
    public static int DISPLAYCONFIG_ROTATION_ROTATE270() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_ROTATION_FORCE_UINT32 = -1;
     * }
     */
    public static int DISPLAYCONFIG_ROTATION_FORCE_UINT32() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_MODE_INFO_TYPE_SOURCE = 1;
     * }
     */
    public static int DISPLAYCONFIG_MODE_INFO_TYPE_SOURCE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_MODE_INFO_TYPE_TARGET = 2;
     * }
     */
    public static int DISPLAYCONFIG_MODE_INFO_TYPE_TARGET() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_MODE_INFO_TYPE_DESKTOP_IMAGE = 3;
     * }
     */
    public static int DISPLAYCONFIG_MODE_INFO_TYPE_DESKTOP_IMAGE() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_MODE_INFO_TYPE_FORCE_UINT32 = -1;
     * }
     */
    public static int DISPLAYCONFIG_MODE_INFO_TYPE_FORCE_UINT32() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_PIXELFORMAT_8BPP = 1;
     * }
     */
    public static int DISPLAYCONFIG_PIXELFORMAT_8BPP() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_PIXELFORMAT_16BPP = 2;
     * }
     */
    public static int DISPLAYCONFIG_PIXELFORMAT_16BPP() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_PIXELFORMAT_24BPP = 3;
     * }
     */
    public static int DISPLAYCONFIG_PIXELFORMAT_24BPP() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_PIXELFORMAT_32BPP = 4;
     * }
     */
    public static int DISPLAYCONFIG_PIXELFORMAT_32BPP() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_PIXELFORMAT_NONGDI = 5;
     * }
     */
    public static int DISPLAYCONFIG_PIXELFORMAT_NONGDI() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_PIXELFORMAT_FORCE_UINT32 = -1;
     * }
     */
    public static int DISPLAYCONFIG_PIXELFORMAT_FORCE_UINT32() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * enum DISPLAYCONFIG_TOPOLOGY_ID.DISPLAYCONFIG_TOPOLOGY_INTERNAL = 1;
     * }
     */
    public static int DISPLAYCONFIG_TOPOLOGY_INTERNAL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum DISPLAYCONFIG_TOPOLOGY_ID.DISPLAYCONFIG_TOPOLOGY_CLONE = 2;
     * }
     */
    public static int DISPLAYCONFIG_TOPOLOGY_CLONE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum DISPLAYCONFIG_TOPOLOGY_ID.DISPLAYCONFIG_TOPOLOGY_EXTEND = 4;
     * }
     */
    public static int DISPLAYCONFIG_TOPOLOGY_EXTEND() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum DISPLAYCONFIG_TOPOLOGY_ID.DISPLAYCONFIG_TOPOLOGY_EXTERNAL = 8;
     * }
     */
    public static int DISPLAYCONFIG_TOPOLOGY_EXTERNAL() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum DISPLAYCONFIG_TOPOLOGY_ID.DISPLAYCONFIG_TOPOLOGY_FORCE_UINT32 = -1;
     * }
     */
    public static int DISPLAYCONFIG_TOPOLOGY_FORCE_UINT32() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_DEVICE_INFO_GET_SOURCE_NAME = 1;
     * }
     */
    public static int DISPLAYCONFIG_DEVICE_INFO_GET_SOURCE_NAME() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_NAME = 2;
     * }
     */
    public static int DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_NAME() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_PREFERRED_MODE = 3;
     * }
     */
    public static int DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_PREFERRED_MODE() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_DEVICE_INFO_GET_ADAPTER_NAME = 4;
     * }
     */
    public static int DISPLAYCONFIG_DEVICE_INFO_GET_ADAPTER_NAME() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_DEVICE_INFO_SET_TARGET_PERSISTENCE = 5;
     * }
     */
    public static int DISPLAYCONFIG_DEVICE_INFO_SET_TARGET_PERSISTENCE() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_BASE_TYPE = 6;
     * }
     */
    public static int DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_BASE_TYPE() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_DEVICE_INFO_GET_SUPPORT_VIRTUAL_RESOLUTION = 7;
     * }
     */
    public static int DISPLAYCONFIG_DEVICE_INFO_GET_SUPPORT_VIRTUAL_RESOLUTION() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_DEVICE_INFO_SET_SUPPORT_VIRTUAL_RESOLUTION = 8;
     * }
     */
    public static int DISPLAYCONFIG_DEVICE_INFO_SET_SUPPORT_VIRTUAL_RESOLUTION() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_DEVICE_INFO_GET_ADVANCED_COLOR_INFO = 9;
     * }
     */
    public static int DISPLAYCONFIG_DEVICE_INFO_GET_ADVANCED_COLOR_INFO() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_DEVICE_INFO_SET_ADVANCED_COLOR_STATE = 10;
     * }
     */
    public static int DISPLAYCONFIG_DEVICE_INFO_SET_ADVANCED_COLOR_STATE() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_DEVICE_INFO_GET_SDR_WHITE_LEVEL = 11;
     * }
     */
    public static int DISPLAYCONFIG_DEVICE_INFO_GET_SDR_WHITE_LEVEL() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_DEVICE_INFO_GET_MONITOR_SPECIALIZATION = 12;
     * }
     */
    public static int DISPLAYCONFIG_DEVICE_INFO_GET_MONITOR_SPECIALIZATION() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_DEVICE_INFO_SET_MONITOR_SPECIALIZATION = 13;
     * }
     */
    public static int DISPLAYCONFIG_DEVICE_INFO_SET_MONITOR_SPECIALIZATION() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum .DISPLAYCONFIG_DEVICE_INFO_FORCE_UINT32 = -1;
     * }
     */
    public static int DISPLAYCONFIG_DEVICE_INFO_FORCE_UINT32() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * enum _DISPLAYCONFIG_COLOR_ENCODING.DISPLAYCONFIG_COLOR_ENCODING_RGB = 0;
     * }
     */
    public static int DISPLAYCONFIG_COLOR_ENCODING_RGB() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum _DISPLAYCONFIG_COLOR_ENCODING.DISPLAYCONFIG_COLOR_ENCODING_YCBCR444 = 1;
     * }
     */
    public static int DISPLAYCONFIG_COLOR_ENCODING_YCBCR444() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum _DISPLAYCONFIG_COLOR_ENCODING.DISPLAYCONFIG_COLOR_ENCODING_YCBCR422 = 2;
     * }
     */
    public static int DISPLAYCONFIG_COLOR_ENCODING_YCBCR422() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum _DISPLAYCONFIG_COLOR_ENCODING.DISPLAYCONFIG_COLOR_ENCODING_YCBCR420 = 3;
     * }
     */
    public static int DISPLAYCONFIG_COLOR_ENCODING_YCBCR420() {
        return (int)3L;
    }
}



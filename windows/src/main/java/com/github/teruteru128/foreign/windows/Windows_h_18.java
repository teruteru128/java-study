// Generated by jextract

package com.github.teruteru128.foreign.windows;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class Windows_h_18 extends Windows_h_19 {

    Windows_h_18() {
        // Should not be called directly
    }
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_DATA_SET_SCRUB_OUTPUT {
     *     DWORDLONG BytesProcessed;
     *     DWORDLONG BytesRepaired;
     *     DWORDLONG BytesFailed;
     * } *PDEVICE_DATA_SET_SCRUB_OUTPUT
     * }
     */
    public static final AddressLayout PDEVICE_DATA_SET_SCRUB_OUTPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_DATA_SET_SCRUB_OUTPUT {
     *     DWORDLONG BytesProcessed;
     *     DWORDLONG BytesRepaired;
     *     DWORDLONG BytesFailed;
     * } *PDEVICE_DSM_SCRUB_OUTPUT
     * }
     */
    public static final AddressLayout PDEVICE_DSM_SCRUB_OUTPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_DATA_SET_SCRUB_EX_OUTPUT {
     *     DWORDLONG BytesProcessed;
     *     DWORDLONG BytesRepaired;
     *     DWORDLONG BytesFailed;
     *     DEVICE_DSM_RANGE ParityExtent;
     *     DWORDLONG BytesScrubbed;
     * } *PDEVICE_DATA_SET_SCRUB_EX_OUTPUT
     * }
     */
    public static final AddressLayout PDEVICE_DATA_SET_SCRUB_EX_OUTPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_DATA_SET_SCRUB_EX_OUTPUT {
     *     DWORDLONG BytesProcessed;
     *     DWORDLONG BytesRepaired;
     *     DWORDLONG BytesFailed;
     *     DEVICE_DSM_RANGE ParityExtent;
     *     DWORDLONG BytesScrubbed;
     * } *PDEVICE_DSM_SCRUB_OUTPUT2
     * }
     */
    public static final AddressLayout PDEVICE_DSM_SCRUB_OUTPUT2 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_DSM_TIERING_QUERY_INPUT {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD Flags;
     *     DWORD NumberOfTierIds;
     *     GUID TierIds[1];
     * } *PDEVICE_DSM_TIERING_QUERY_INPUT
     * }
     */
    public static final AddressLayout PDEVICE_DSM_TIERING_QUERY_INPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_DSM_TIERING_QUERY_INPUT {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD Flags;
     *     DWORD NumberOfTierIds;
     *     GUID TierIds[1];
     * } *PDEVICE_DSM_TIERING_QUERY_PARAMETERS
     * }
     */
    public static final AddressLayout PDEVICE_DSM_TIERING_QUERY_PARAMETERS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_TIER_REGION {
     *     GUID TierId;
     *     DWORDLONG Offset;
     *     DWORDLONG Length;
     * } *PSTORAGE_TIER_REGION
     * }
     */
    public static final AddressLayout PSTORAGE_TIER_REGION = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_DSM_TIERING_QUERY_OUTPUT {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD Flags;
     *     DWORD Reserved;
     *     DWORDLONG Alignment;
     *     DWORD TotalNumberOfRegions;
     *     DWORD NumberOfRegionsReturned;
     *     STORAGE_TIER_REGION Regions[1];
     * } *PDEVICE_DSM_TIERING_QUERY_OUTPUT
     * }
     */
    public static final AddressLayout PDEVICE_DSM_TIERING_QUERY_OUTPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_DSM_NVCACHE_CHANGE_PRIORITY_PARAMETERS {
     *     DWORD Size;
     *     BYTE TargetPriority;
     *     BYTE Reserved[3];
     * } *PDEVICE_DSM_NVCACHE_CHANGE_PRIORITY_PARAMETERS
     * }
     */
    public static final AddressLayout PDEVICE_DSM_NVCACHE_CHANGE_PRIORITY_PARAMETERS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT {
     *     DWORDLONG TopologyRangeBytes;
     *     BYTE TopologyId[16];
     * } *PDEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT
     * }
     */
    public static final AddressLayout PDEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT {
     *     DWORDLONG TopologyRangeBytes;
     *     BYTE TopologyId[16];
     * } *PDEVICE_DSM_TOPOLOGY_ID_QUERY_OUTPUT
     * }
     */
    public static final AddressLayout PDEVICE_DSM_TOPOLOGY_ID_QUERY_OUTPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_STORAGE_ADDRESS_RANGE {
     *     LONGLONG StartAddress;
     *     DWORDLONG LengthInBytes;
     * } *PDEVICE_STORAGE_ADDRESS_RANGE
     * }
     */
    public static final AddressLayout PDEVICE_STORAGE_ADDRESS_RANGE = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT {
     *     DWORD Version;
     *     DWORD Flags;
     *     DWORD TotalNumberOfRanges;
     *     DWORD NumberOfRangesReturned;
     *     DEVICE_STORAGE_ADDRESS_RANGE Ranges[1];
     * } *PDEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT
     * }
     */
    public static final AddressLayout PDEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_DSM_REPORT_ZONES_PARAMETERS {
     *     DWORD Size;
     *     BYTE ReportOption;
     *     BYTE Partial;
     *     BYTE Reserved[2];
     * } *PDEVICE_DSM_REPORT_ZONES_PARAMETERS
     * }
     */
    public static final AddressLayout PDEVICE_DSM_REPORT_ZONES_PARAMETERS = C_POINTER;
    private static final int ZonesAttributeTypeAndLengthMayDifferent = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_ZONES_ATTRIBUTES.ZonesAttributeTypeAndLengthMayDifferent = 0
     * }
     */
    public static int ZonesAttributeTypeAndLengthMayDifferent() {
        return ZonesAttributeTypeAndLengthMayDifferent;
    }
    private static final int ZonesAttributeTypeSameLengthSame = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_ZONES_ATTRIBUTES.ZonesAttributeTypeSameLengthSame = 1
     * }
     */
    public static int ZonesAttributeTypeSameLengthSame() {
        return ZonesAttributeTypeSameLengthSame;
    }
    private static final int ZonesAttributeTypeSameLastZoneLengthDifferent = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_ZONES_ATTRIBUTES.ZonesAttributeTypeSameLastZoneLengthDifferent = 2
     * }
     */
    public static int ZonesAttributeTypeSameLastZoneLengthDifferent() {
        return ZonesAttributeTypeSameLastZoneLengthDifferent;
    }
    private static final int ZonesAttributeTypeMayDifferentLengthSame = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_ZONES_ATTRIBUTES.ZonesAttributeTypeMayDifferentLengthSame = 3
     * }
     */
    public static int ZonesAttributeTypeMayDifferentLengthSame() {
        return ZonesAttributeTypeMayDifferentLengthSame;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _STORAGE_ZONES_ATTRIBUTES {
     *     ZonesAttributeTypeAndLengthMayDifferent = 0,
     *     ZonesAttributeTypeSameLengthSame = 1,
     *     ZonesAttributeTypeSameLastZoneLengthDifferent = 2,
     *     ZonesAttributeTypeMayDifferentLengthSame = 3
     * } *PSTORAGE_ZONES_ATTRIBUTES
     * }
     */
    public static final AddressLayout PSTORAGE_ZONES_ATTRIBUTES = C_POINTER;
    private static final int ZoneConditionConventional = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_ZONE_CONDITION.ZoneConditionConventional = 0
     * }
     */
    public static int ZoneConditionConventional() {
        return ZoneConditionConventional;
    }
    private static final int ZoneConditionEmpty = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_ZONE_CONDITION.ZoneConditionEmpty = 1
     * }
     */
    public static int ZoneConditionEmpty() {
        return ZoneConditionEmpty;
    }
    private static final int ZoneConditionImplicitlyOpened = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_ZONE_CONDITION.ZoneConditionImplicitlyOpened = 2
     * }
     */
    public static int ZoneConditionImplicitlyOpened() {
        return ZoneConditionImplicitlyOpened;
    }
    private static final int ZoneConditionExplicitlyOpened = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_ZONE_CONDITION.ZoneConditionExplicitlyOpened = 3
     * }
     */
    public static int ZoneConditionExplicitlyOpened() {
        return ZoneConditionExplicitlyOpened;
    }
    private static final int ZoneConditionClosed = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_ZONE_CONDITION.ZoneConditionClosed = 4
     * }
     */
    public static int ZoneConditionClosed() {
        return ZoneConditionClosed;
    }
    private static final int ZoneConditionReadOnly = (int)13L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_ZONE_CONDITION.ZoneConditionReadOnly = 13
     * }
     */
    public static int ZoneConditionReadOnly() {
        return ZoneConditionReadOnly;
    }
    private static final int ZoneConditionFull = (int)14L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_ZONE_CONDITION.ZoneConditionFull = 14
     * }
     */
    public static int ZoneConditionFull() {
        return ZoneConditionFull;
    }
    private static final int ZoneConditionOffline = (int)15L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_ZONE_CONDITION.ZoneConditionOffline = 15
     * }
     */
    public static int ZoneConditionOffline() {
        return ZoneConditionOffline;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _STORAGE_ZONE_CONDITION {
     *     ZoneConditionConventional = 0,
     *     ZoneConditionEmpty = 1,
     *     ZoneConditionImplicitlyOpened = 2,
     *     ZoneConditionExplicitlyOpened = 3,
     *     ZoneConditionClosed = 4,
     *     ZoneConditionReadOnly = 13,
     *     ZoneConditionFull = 14,
     *     ZoneConditionOffline = 15
     * } *PSTORAGE_ZONE_CONDITION
     * }
     */
    public static final AddressLayout PSTORAGE_ZONE_CONDITION = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_ZONE_DESCRIPTOR {
     *     DWORD Size;
     *     STORAGE_ZONE_TYPES ZoneType;
     *     STORAGE_ZONE_CONDITION ZoneCondition;
     *     BOOLEAN ResetWritePointerRecommend;
     *     BYTE Reserved0[3];
     *     DWORDLONG ZoneSize;
     *     DWORDLONG WritePointerOffset;
     * } *PSTORAGE_ZONE_DESCRIPTOR
     * }
     */
    public static final AddressLayout PSTORAGE_ZONE_DESCRIPTOR = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_DSM_REPORT_ZONES_DATA {
     *     DWORD Size;
     *     DWORD ZoneCount;
     *     STORAGE_ZONES_ATTRIBUTES Attributes;
     *     DWORD Reserved0;
     *     STORAGE_ZONE_DESCRIPTOR ZoneDescriptors[1];
     * } *PDEVICE_DSM_REPORT_ZONES_DATA
     * }
     */
    public static final AddressLayout PDEVICE_DSM_REPORT_ZONES_DATA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_DSM_REPORT_ZONES_DATA {
     *     DWORD Size;
     *     DWORD ZoneCount;
     *     STORAGE_ZONES_ATTRIBUTES Attributes;
     *     DWORD Reserved0;
     *     STORAGE_ZONE_DESCRIPTOR ZoneDescriptors[1];
     * } *PDEVICE_DSM_REPORT_ZONES_OUTPUT
     * }
     */
    public static final AddressLayout PDEVICE_DSM_REPORT_ZONES_OUTPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_STORAGE_RANGE_ATTRIBUTES {
     *     DWORDLONG LengthInBytes;
     *     union {
     *         DWORD AllFlags;
     *         struct {
     *             DWORD IsRangeBad : 1;
     *         };
     *     };
     *     DWORD Reserved;
     * } *PDEVICE_STORAGE_RANGE_ATTRIBUTES
     * }
     */
    public static final AddressLayout PDEVICE_STORAGE_RANGE_ATTRIBUTES = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_DSM_RANGE_ERROR_INFO {
     *     DWORD Version;
     *     DWORD Flags;
     *     DWORD TotalNumberOfRanges;
     *     DWORD NumberOfRangesReturned;
     *     DEVICE_STORAGE_RANGE_ATTRIBUTES Ranges[1];
     * } *PDEVICE_DSM_RANGE_ERROR_INFO
     * }
     */
    public static final AddressLayout PDEVICE_DSM_RANGE_ERROR_INFO = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_DSM_RANGE_ERROR_INFO {
     *     DWORD Version;
     *     DWORD Flags;
     *     DWORD TotalNumberOfRanges;
     *     DWORD NumberOfRangesReturned;
     *     DEVICE_STORAGE_RANGE_ATTRIBUTES Ranges[1];
     * } *PDEVICE_DSM_RANGE_ERROR_OUTPUT
     * }
     */
    public static final AddressLayout PDEVICE_DSM_RANGE_ERROR_OUTPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_DSM_LOST_QUERY_PARAMETERS {
     *     DWORD Version;
     *     DWORDLONG Granularity;
     * } *PDEVICE_DSM_LOST_QUERY_PARAMETERS
     * }
     */
    public static final AddressLayout PDEVICE_DSM_LOST_QUERY_PARAMETERS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_DSM_LOST_QUERY_OUTPUT {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORDLONG Alignment;
     *     DWORD NumberOfBits;
     *     DWORD BitMap[1];
     * } *PDEVICE_DSM_LOST_QUERY_OUTPUT
     * }
     */
    public static final AddressLayout PDEVICE_DSM_LOST_QUERY_OUTPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_DSM_FREE_SPACE_OUTPUT {
     *     DWORD Version;
     *     DWORDLONG FreeSpace;
     * } *PDEVICE_DSM_FREE_SPACE_OUTPUT
     * }
     */
    public static final AddressLayout PDEVICE_DSM_FREE_SPACE_OUTPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_DSM_CONVERSION_OUTPUT {
     *     DWORD Version;
     *     GUID Source;
     * } *PDEVICE_DSM_CONVERSION_OUTPUT
     * }
     */
    public static final AddressLayout PDEVICE_DSM_CONVERSION_OUTPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_GET_BC_PROPERTIES_OUTPUT {
     *     DWORD MaximumRequestsPerPeriod;
     *     DWORD MinimumPeriod;
     *     DWORDLONG MaximumRequestSize;
     *     DWORD EstimatedTimePerRequest;
     *     DWORD NumOutStandingRequests;
     *     DWORDLONG RequestSize;
     * } *PSTORAGE_GET_BC_PROPERTIES_OUTPUT
     * }
     */
    public static final AddressLayout PSTORAGE_GET_BC_PROPERTIES_OUTPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_ALLOCATE_BC_STREAM_INPUT {
     *     DWORD Version;
     *     DWORD RequestsPerPeriod;
     *     DWORD Period;
     *     BOOLEAN RetryFailures;
     *     BOOLEAN Discardable;
     *     BOOLEAN Reserved1[2];
     *     DWORD AccessType;
     *     DWORD AccessMode;
     * } *PSTORAGE_ALLOCATE_BC_STREAM_INPUT
     * }
     */
    public static final AddressLayout PSTORAGE_ALLOCATE_BC_STREAM_INPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_ALLOCATE_BC_STREAM_OUTPUT {
     *     DWORDLONG RequestSize;
     *     DWORD NumOutStandingRequests;
     * } *PSTORAGE_ALLOCATE_BC_STREAM_OUTPUT
     * }
     */
    public static final AddressLayout PSTORAGE_ALLOCATE_BC_STREAM_OUTPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_PRIORITY_HINT_SUPPORT {
     *     DWORD SupportFlags;
     * } *PSTORAGE_PRIORITY_HINT_SUPPORT
     * }
     */
    public static final AddressLayout PSTORAGE_PRIORITY_HINT_SUPPORT = C_POINTER;
    private static final int StorageDiagnosticLevelDefault = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_DIAGNOSTIC_LEVEL.StorageDiagnosticLevelDefault = 0
     * }
     */
    public static int StorageDiagnosticLevelDefault() {
        return StorageDiagnosticLevelDefault;
    }
    private static final int StorageDiagnosticLevelMax = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_DIAGNOSTIC_LEVEL.StorageDiagnosticLevelMax = 1
     * }
     */
    public static int StorageDiagnosticLevelMax() {
        return StorageDiagnosticLevelMax;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _STORAGE_DIAGNOSTIC_LEVEL {
     *     StorageDiagnosticLevelDefault = 0,
     *     StorageDiagnosticLevelMax
     * } *PSTORAGE_DIAGNOSTIC_LEVEL
     * }
     */
    public static final AddressLayout PSTORAGE_DIAGNOSTIC_LEVEL = C_POINTER;
    private static final int StorageDiagnosticTargetTypeUndefined = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_DIAGNOSTIC_TARGET_TYPE.StorageDiagnosticTargetTypeUndefined = 0
     * }
     */
    public static int StorageDiagnosticTargetTypeUndefined() {
        return StorageDiagnosticTargetTypeUndefined;
    }
    private static final int StorageDiagnosticTargetTypePort = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_DIAGNOSTIC_TARGET_TYPE.StorageDiagnosticTargetTypePort = 1
     * }
     */
    public static int StorageDiagnosticTargetTypePort() {
        return StorageDiagnosticTargetTypePort;
    }
    private static final int StorageDiagnosticTargetTypeMiniport = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_DIAGNOSTIC_TARGET_TYPE.StorageDiagnosticTargetTypeMiniport = 2
     * }
     */
    public static int StorageDiagnosticTargetTypeMiniport() {
        return StorageDiagnosticTargetTypeMiniport;
    }
    private static final int StorageDiagnosticTargetTypeHbaFirmware = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_DIAGNOSTIC_TARGET_TYPE.StorageDiagnosticTargetTypeHbaFirmware = 3
     * }
     */
    public static int StorageDiagnosticTargetTypeHbaFirmware() {
        return StorageDiagnosticTargetTypeHbaFirmware;
    }
    private static final int StorageDiagnosticTargetTypeMax = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_DIAGNOSTIC_TARGET_TYPE.StorageDiagnosticTargetTypeMax = 4
     * }
     */
    public static int StorageDiagnosticTargetTypeMax() {
        return StorageDiagnosticTargetTypeMax;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _STORAGE_DIAGNOSTIC_TARGET_TYPE {
     *     StorageDiagnosticTargetTypeUndefined = 0,
     *     StorageDiagnosticTargetTypePort,
     *     StorageDiagnosticTargetTypeMiniport,
     *     StorageDiagnosticTargetTypeHbaFirmware,
     *     StorageDiagnosticTargetTypeMax
     * } *PSTORAGE_DIAGNOSTIC_TARGET_TYPE
     * }
     */
    public static final AddressLayout PSTORAGE_DIAGNOSTIC_TARGET_TYPE = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_DIAGNOSTIC_REQUEST {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD Flags;
     *     STORAGE_DIAGNOSTIC_TARGET_TYPE TargetType;
     *     STORAGE_DIAGNOSTIC_LEVEL Level;
     * } *PSTORAGE_DIAGNOSTIC_REQUEST
     * }
     */
    public static final AddressLayout PSTORAGE_DIAGNOSTIC_REQUEST = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_DIAGNOSTIC_DATA {
     *     DWORD Version;
     *     DWORD Size;
     *     GUID ProviderId;
     *     DWORD BufferSize;
     *     DWORD Reserved;
     *     BYTE DiagnosticDataBuffer[1];
     * } *PSTORAGE_DIAGNOSTIC_DATA
     * }
     */
    public static final AddressLayout PSTORAGE_DIAGNOSTIC_DATA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PHYSICAL_ELEMENT_STATUS_REQUEST {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD StartingElement;
     *     BYTE Filter;
     *     BYTE ReportType;
     *     BYTE Reserved[2];
     * } *PPHYSICAL_ELEMENT_STATUS_REQUEST
     * }
     */
    public static final AddressLayout PPHYSICAL_ELEMENT_STATUS_REQUEST = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PHYSICAL_ELEMENT_STATUS_DESCRIPTOR {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD ElementIdentifier;
     *     BYTE PhysicalElementType;
     *     BYTE PhysicalElementHealth;
     *     BYTE Reserved1[2];
     *     DWORDLONG AssociatedCapacity;
     *     DWORD Reserved2[4];
     * } *PPHYSICAL_ELEMENT_STATUS_DESCRIPTOR
     * }
     */
    public static final AddressLayout PPHYSICAL_ELEMENT_STATUS_DESCRIPTOR = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PHYSICAL_ELEMENT_STATUS {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD DescriptorCount;
     *     DWORD ReturnedDescriptorCount;
     *     DWORD ElementIdentifierBeingDepoped;
     *     DWORD Reserved;
     *     PHYSICAL_ELEMENT_STATUS_DESCRIPTOR Descriptors[1];
     * } *PPHYSICAL_ELEMENT_STATUS
     * }
     */
    public static final AddressLayout PPHYSICAL_ELEMENT_STATUS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _REMOVE_ELEMENT_AND_TRUNCATE_REQUEST {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORDLONG RequestCapacity;
     *     DWORD ElementIdentifier;
     *     DWORD Reserved;
     * } *PREMOVE_ELEMENT_AND_TRUNCATE_REQUEST
     * }
     */
    public static final AddressLayout PREMOVE_ELEMENT_AND_TRUNCATE_REQUEST = C_POINTER;
    private static final int DeviceInternalStatusDataRequestTypeUndefined = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _DEVICE_INTERNAL_STATUS_DATA_REQUEST_TYPE.DeviceInternalStatusDataRequestTypeUndefined = 0
     * }
     */
    public static int DeviceInternalStatusDataRequestTypeUndefined() {
        return DeviceInternalStatusDataRequestTypeUndefined;
    }
    private static final int DeviceCurrentInternalStatusDataHeader = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _DEVICE_INTERNAL_STATUS_DATA_REQUEST_TYPE.DeviceCurrentInternalStatusDataHeader = 1
     * }
     */
    public static int DeviceCurrentInternalStatusDataHeader() {
        return DeviceCurrentInternalStatusDataHeader;
    }
    private static final int DeviceCurrentInternalStatusData = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _DEVICE_INTERNAL_STATUS_DATA_REQUEST_TYPE.DeviceCurrentInternalStatusData = 2
     * }
     */
    public static int DeviceCurrentInternalStatusData() {
        return DeviceCurrentInternalStatusData;
    }
    private static final int DeviceSavedInternalStatusDataHeader = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _DEVICE_INTERNAL_STATUS_DATA_REQUEST_TYPE.DeviceSavedInternalStatusDataHeader = 3
     * }
     */
    public static int DeviceSavedInternalStatusDataHeader() {
        return DeviceSavedInternalStatusDataHeader;
    }
    private static final int DeviceSavedInternalStatusData = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _DEVICE_INTERNAL_STATUS_DATA_REQUEST_TYPE.DeviceSavedInternalStatusData = 4
     * }
     */
    public static int DeviceSavedInternalStatusData() {
        return DeviceSavedInternalStatusData;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _DEVICE_INTERNAL_STATUS_DATA_REQUEST_TYPE {
     *     DeviceInternalStatusDataRequestTypeUndefined = 0,
     *     DeviceCurrentInternalStatusDataHeader,
     *     DeviceCurrentInternalStatusData,
     *     DeviceSavedInternalStatusDataHeader,
     *     DeviceSavedInternalStatusData
     * } *PDEVICE_INTERNAL_STATUS_DATA_REQUEST_TYPE
     * }
     */
    public static final AddressLayout PDEVICE_INTERNAL_STATUS_DATA_REQUEST_TYPE = C_POINTER;
    private static final int DeviceStatusDataSetUndefined = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _DEVICE_INTERNAL_STATUS_DATA_SET.DeviceStatusDataSetUndefined = 0
     * }
     */
    public static int DeviceStatusDataSetUndefined() {
        return DeviceStatusDataSetUndefined;
    }
    private static final int DeviceStatusDataSet1 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _DEVICE_INTERNAL_STATUS_DATA_SET.DeviceStatusDataSet1 = 1
     * }
     */
    public static int DeviceStatusDataSet1() {
        return DeviceStatusDataSet1;
    }
    private static final int DeviceStatusDataSet2 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _DEVICE_INTERNAL_STATUS_DATA_SET.DeviceStatusDataSet2 = 2
     * }
     */
    public static int DeviceStatusDataSet2() {
        return DeviceStatusDataSet2;
    }
    private static final int DeviceStatusDataSet3 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _DEVICE_INTERNAL_STATUS_DATA_SET.DeviceStatusDataSet3 = 3
     * }
     */
    public static int DeviceStatusDataSet3() {
        return DeviceStatusDataSet3;
    }
    private static final int DeviceStatusDataSet4 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _DEVICE_INTERNAL_STATUS_DATA_SET.DeviceStatusDataSet4 = 4
     * }
     */
    public static int DeviceStatusDataSet4() {
        return DeviceStatusDataSet4;
    }
    private static final int DeviceStatusDataSetMax = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _DEVICE_INTERNAL_STATUS_DATA_SET.DeviceStatusDataSetMax = 5
     * }
     */
    public static int DeviceStatusDataSetMax() {
        return DeviceStatusDataSetMax;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _DEVICE_INTERNAL_STATUS_DATA_SET {
     *     DeviceStatusDataSetUndefined = 0,
     *     DeviceStatusDataSet1,
     *     DeviceStatusDataSet2,
     *     DeviceStatusDataSet3,
     *     DeviceStatusDataSet4,
     *     DeviceStatusDataSetMax
     * } *PDEVICE_INTERNAL_STATUS_DATA_SET
     * }
     */
    public static final AddressLayout PDEVICE_INTERNAL_STATUS_DATA_SET = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _GET_DEVICE_INTERNAL_STATUS_DATA_REQUEST {
     *     DWORD Version;
     *     DWORD Size;
     *     DEVICE_INTERNAL_STATUS_DATA_REQUEST_TYPE RequestDataType;
     *     DEVICE_INTERNAL_STATUS_DATA_SET RequestDataSet;
     * } *PGET_DEVICE_INTERNAL_STATUS_DATA_REQUEST
     * }
     */
    public static final AddressLayout PGET_DEVICE_INTERNAL_STATUS_DATA_REQUEST = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_INTERNAL_STATUS_DATA {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORDLONG T10VendorId;
     *     DWORD DataSet1Length;
     *     DWORD DataSet2Length;
     *     DWORD DataSet3Length;
     *     DWORD DataSet4Length;
     *     BYTE StatusDataVersion;
     *     BYTE Reserved[3];
     *     BYTE ReasonIdentifier[128];
     *     DWORD StatusDataLength;
     *     BYTE StatusData[1];
     * } *PDEVICE_INTERNAL_STATUS_DATA
     * }
     */
    public static final AddressLayout PDEVICE_INTERNAL_STATUS_DATA = C_POINTER;
    private static final int StorageSanitizeMethodDefault = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_SANITIZE_METHOD.StorageSanitizeMethodDefault = 0
     * }
     */
    public static int StorageSanitizeMethodDefault() {
        return StorageSanitizeMethodDefault;
    }
    private static final int StorageSanitizeMethodBlockErase = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_SANITIZE_METHOD.StorageSanitizeMethodBlockErase = 1
     * }
     */
    public static int StorageSanitizeMethodBlockErase() {
        return StorageSanitizeMethodBlockErase;
    }
    private static final int StorageSanitizeMethodCryptoErase = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_SANITIZE_METHOD.StorageSanitizeMethodCryptoErase = 2
     * }
     */
    public static int StorageSanitizeMethodCryptoErase() {
        return StorageSanitizeMethodCryptoErase;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _STORAGE_SANITIZE_METHOD {
     *     StorageSanitizeMethodDefault = 0,
     *     StorageSanitizeMethodBlockErase,
     *     StorageSanitizeMethodCryptoErase
     * } *PSTORAGE_SANITIZE_METHOD
     * }
     */
    public static final AddressLayout PSTORAGE_SANITIZE_METHOD = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_REINITIALIZE_MEDIA {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD TimeoutInSeconds;
     *     struct {
     *         DWORD SanitizeMethod : 4;
     *         DWORD DisallowUnrestrictedSanitizeExit : 1;
     *         DWORD Reserved : 27;
     *     } SanitizeOption;
     * } *PSTORAGE_REINITIALIZE_MEDIA
     * }
     */
    public static final AddressLayout PSTORAGE_REINITIALIZE_MEDIA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_MEDIA_SERIAL_NUMBER_DATA {
     *     WORD Reserved;
     *     WORD SerialNumberLength;
     *     BYTE SerialNumber[0];
     * } *PSTORAGE_MEDIA_SERIAL_NUMBER_DATA
     * }
     */
    public static final AddressLayout PSTORAGE_MEDIA_SERIAL_NUMBER_DATA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_READ_CAPACITY {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD BlockLength;
     *     LARGE_INTEGER NumberOfBlocks;
     *     LARGE_INTEGER DiskLength;
     * } *PSTORAGE_READ_CAPACITY
     * }
     */
    public static final AddressLayout PSTORAGE_READ_CAPACITY = C_POINTER;
    private static final int WriteCacheTypeUnknown = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _WRITE_CACHE_TYPE.WriteCacheTypeUnknown = 0
     * }
     */
    public static int WriteCacheTypeUnknown() {
        return WriteCacheTypeUnknown;
    }
    private static final int WriteCacheTypeNone = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _WRITE_CACHE_TYPE.WriteCacheTypeNone = 1
     * }
     */
    public static int WriteCacheTypeNone() {
        return WriteCacheTypeNone;
    }
    private static final int WriteCacheTypeWriteBack = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _WRITE_CACHE_TYPE.WriteCacheTypeWriteBack = 2
     * }
     */
    public static int WriteCacheTypeWriteBack() {
        return WriteCacheTypeWriteBack;
    }
    private static final int WriteCacheTypeWriteThrough = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _WRITE_CACHE_TYPE.WriteCacheTypeWriteThrough = 3
     * }
     */
    public static int WriteCacheTypeWriteThrough() {
        return WriteCacheTypeWriteThrough;
    }
    private static final int WriteCacheEnableUnknown = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _WRITE_CACHE_ENABLE.WriteCacheEnableUnknown = 0
     * }
     */
    public static int WriteCacheEnableUnknown() {
        return WriteCacheEnableUnknown;
    }
    private static final int WriteCacheDisabled = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _WRITE_CACHE_ENABLE.WriteCacheDisabled = 1
     * }
     */
    public static int WriteCacheDisabled() {
        return WriteCacheDisabled;
    }
    private static final int WriteCacheEnabled = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _WRITE_CACHE_ENABLE.WriteCacheEnabled = 2
     * }
     */
    public static int WriteCacheEnabled() {
        return WriteCacheEnabled;
    }
    private static final int WriteCacheChangeUnknown = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _WRITE_CACHE_CHANGE.WriteCacheChangeUnknown = 0
     * }
     */
    public static int WriteCacheChangeUnknown() {
        return WriteCacheChangeUnknown;
    }
    private static final int WriteCacheNotChangeable = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _WRITE_CACHE_CHANGE.WriteCacheNotChangeable = 1
     * }
     */
    public static int WriteCacheNotChangeable() {
        return WriteCacheNotChangeable;
    }
    private static final int WriteCacheChangeable = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _WRITE_CACHE_CHANGE.WriteCacheChangeable = 2
     * }
     */
    public static int WriteCacheChangeable() {
        return WriteCacheChangeable;
    }
    private static final int WriteThroughUnknown = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _WRITE_THROUGH.WriteThroughUnknown = 0
     * }
     */
    public static int WriteThroughUnknown() {
        return WriteThroughUnknown;
    }
    private static final int WriteThroughNotSupported = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _WRITE_THROUGH.WriteThroughNotSupported = 1
     * }
     */
    public static int WriteThroughNotSupported() {
        return WriteThroughNotSupported;
    }
    private static final int WriteThroughSupported = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _WRITE_THROUGH.WriteThroughSupported = 2
     * }
     */
    public static int WriteThroughSupported() {
        return WriteThroughSupported;
    }
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_WRITE_CACHE_PROPERTY {
     *     DWORD Version;
     *     DWORD Size;
     *     WRITE_CACHE_TYPE WriteCacheType;
     *     WRITE_CACHE_ENABLE WriteCacheEnabled;
     *     WRITE_CACHE_CHANGE WriteCacheChangeable;
     *     WRITE_THROUGH WriteThroughSupported;
     *     BOOLEAN FlushCacheSupported;
     *     BOOLEAN UserDefinedPowerProtection;
     *     BOOLEAN NVCacheEnabled;
     * } *PSTORAGE_WRITE_CACHE_PROPERTY
     * }
     */
    public static final AddressLayout PSTORAGE_WRITE_CACHE_PROPERTY = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PERSISTENT_RESERVE_COMMAND {
     *     DWORD Version;
     *     DWORD Size;
     *     union {
     *         struct {
     *             BYTE ServiceAction : 5;
     *             BYTE Reserved1 : 3;
     *             WORD AllocationLength;
     *         } PR_IN;
     *         struct {
     *             BYTE ServiceAction : 5;
     *             BYTE Reserved1 : 3;
     *             BYTE Type : 4;
     *             BYTE Scope : 4;
     *             BYTE ParameterList[0];
     *         } PR_OUT;
     *     };
     * } *PPERSISTENT_RESERVE_COMMAND
     * }
     */
    public static final AddressLayout PPERSISTENT_RESERVE_COMMAND = C_POINTER;
    private static final int TCCollectionBugCheck = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _DEVICEDUMP_COLLECTION_TYPE.TCCollectionBugCheck = 1
     * }
     */
    public static int TCCollectionBugCheck() {
        return TCCollectionBugCheck;
    }
    private static final int TCCollectionApplicationRequested = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _DEVICEDUMP_COLLECTION_TYPE.TCCollectionApplicationRequested = 2
     * }
     */
    public static int TCCollectionApplicationRequested() {
        return TCCollectionApplicationRequested;
    }
    private static final int TCCollectionDeviceRequested = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _DEVICEDUMP_COLLECTION_TYPE.TCCollectionDeviceRequested = 3
     * }
     */
    public static int TCCollectionDeviceRequested() {
        return TCCollectionDeviceRequested;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _DEVICEDUMP_COLLECTION_TYPE {
     *     TCCollectionBugCheck = 1,
     *     TCCollectionApplicationRequested,
     *     TCCollectionDeviceRequested
     * } *PDEVICEDUMP_COLLECTION_TYPE
     * }
     */
    public static final AddressLayout PDEVICEDUMP_COLLECTION_TYPE = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICEDUMP_SUBSECTION_POINTER {
     *     DWORD dwSize;
     *     DWORD dwFlags;
     *     DWORD dwOffset;
     * } *PDEVICEDUMP_SUBSECTION_POINTER
     * }
     */
    public static final AddressLayout PDEVICEDUMP_SUBSECTION_POINTER = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICEDUMP_STRUCTURE_VERSION {
     *     DWORD dwSignature;
     *     DWORD dwVersion;
     *     DWORD dwSize;
     * } *PDEVICEDUMP_STRUCTURE_VERSION
     * }
     */
    public static final AddressLayout PDEVICEDUMP_STRUCTURE_VERSION = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICEDUMP_SECTION_HEADER {
     *     GUID guidDeviceDataId;
     *     BYTE sOrganizationID[16];
     *     DWORD dwFirmwareRevision;
     *     BYTE sModelNumber[32];
     *     BYTE szDeviceManufacturingID[32];
     *     DWORD dwFlags;
     *     DWORD bRestrictedPrivateDataVersion;
     *     DWORD dwFirmwareIssueId;
     *     BYTE szIssueDescriptionString[132];
     * } *PDEVICEDUMP_SECTION_HEADER
     * }
     */
    public static final AddressLayout PDEVICEDUMP_SECTION_HEADER = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _GP_LOG_PAGE_DESCRIPTOR {
     *     WORD LogAddress;
     *     WORD LogSectors;
     * } *PGP_LOG_PAGE_DESCRIPTOR
     * }
     */
    public static final AddressLayout PGP_LOG_PAGE_DESCRIPTOR = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICEDUMP_PUBLIC_SUBSECTION {
     *     DWORD dwFlags;
     *     GP_LOG_PAGE_DESCRIPTOR GPLogTable[16];
     *     CHAR szDescription[16];
     *     BYTE bData[1];
     * } *PDEVICEDUMP_PUBLIC_SUBSECTION
     * }
     */
    public static final AddressLayout PDEVICEDUMP_PUBLIC_SUBSECTION = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICEDUMP_RESTRICTED_SUBSECTION {
     *     BYTE bData[1];
     * } *PDEVICEDUMP_RESTRICTED_SUBSECTION
     * }
     */
    public static final AddressLayout PDEVICEDUMP_RESTRICTED_SUBSECTION = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICEDUMP_PRIVATE_SUBSECTION {
     *     DWORD dwFlags;
     *     GP_LOG_PAGE_DESCRIPTOR GPLogId;
     *     BYTE bData[1];
     * } *PDEVICEDUMP_PRIVATE_SUBSECTION
     * }
     */
    public static final AddressLayout PDEVICEDUMP_PRIVATE_SUBSECTION = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICEDUMP_STORAGEDEVICE_DATA {
     *     DEVICEDUMP_STRUCTURE_VERSION Descriptor;
     *     DEVICEDUMP_SECTION_HEADER SectionHeader;
     *     DWORD dwBufferSize;
     *     DWORD dwReasonForCollection;
     *     DEVICEDUMP_SUBSECTION_POINTER PublicData;
     *     DEVICEDUMP_SUBSECTION_POINTER RestrictedData;
     *     DEVICEDUMP_SUBSECTION_POINTER PrivateData;
     * } *PDEVICEDUMP_STORAGEDEVICE_DATA
     * }
     */
    public static final AddressLayout PDEVICEDUMP_STORAGEDEVICE_DATA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD {
     *     BYTE Cdb[16];
     *     BYTE Command[16];
     *     DWORDLONG StartTime;
     *     DWORDLONG EndTime;
     *     DWORD OperationStatus;
     *     DWORD OperationError;
     *     union {
     *         struct {
     *             DWORD dwReserved;
     *         } ExternalStack;
     *         struct {
     *             DWORD dwAtaPortSpecific;
     *         } AtaPort;
     *         struct {
     *             DWORD SrbTag;
     *         } StorPort;
     *     } StackSpecific;
     * } *PDEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD
     * }
     */
    public static final AddressLayout PDEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICEDUMP_STORAGESTACK_PUBLIC_DUMP {
     *     DEVICEDUMP_STRUCTURE_VERSION Descriptor;
     *     DWORD dwReasonForCollection;
     *     BYTE cDriverName[16];
     *     DWORD uiNumRecords;
     *     DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD RecordArray[1];
     * } *PDEVICEDUMP_STORAGESTACK_PUBLIC_DUMP
     * }
     */
    public static final AddressLayout PDEVICEDUMP_STORAGESTACK_PUBLIC_DUMP = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_IDLE_POWER {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD WakeCapableHint : 1;
     *     DWORD D3ColdSupported : 1;
     *     DWORD Reserved : 30;
     *     DWORD D3IdleTimeout;
     * } *PSTORAGE_IDLE_POWER
     * }
     */
    public static final AddressLayout PSTORAGE_IDLE_POWER = C_POINTER;
    private static final int StoragePowerupUnknown = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_POWERUP_REASON_TYPE.StoragePowerupUnknown = 0
     * }
     */
    public static int StoragePowerupUnknown() {
        return StoragePowerupUnknown;
    }
    private static final int StoragePowerupIO = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_POWERUP_REASON_TYPE.StoragePowerupIO = 1
     * }
     */
    public static int StoragePowerupIO() {
        return StoragePowerupIO;
    }
    private static final int StoragePowerupDeviceAttention = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_POWERUP_REASON_TYPE.StoragePowerupDeviceAttention = 2
     * }
     */
    public static int StoragePowerupDeviceAttention() {
        return StoragePowerupDeviceAttention;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _STORAGE_POWERUP_REASON_TYPE {
     *     StoragePowerupUnknown = 0,
     *     StoragePowerupIO,
     *     StoragePowerupDeviceAttention
     * } *PSTORAGE_POWERUP_REASON_TYPE
     * }
     */
    public static final AddressLayout PSTORAGE_POWERUP_REASON_TYPE = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_IDLE_POWERUP_REASON {
     *     DWORD Version;
     *     DWORD Size;
     *     STORAGE_POWERUP_REASON_TYPE PowerupReason;
     * } *PSTORAGE_IDLE_POWERUP_REASON
     * }
     */
    public static final AddressLayout PSTORAGE_IDLE_POWERUP_REASON = C_POINTER;
    private static final int StorageDevicePowerCapUnitsPercent = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_DEVICE_POWER_CAP_UNITS.StorageDevicePowerCapUnitsPercent = 0
     * }
     */
    public static int StorageDevicePowerCapUnitsPercent() {
        return StorageDevicePowerCapUnitsPercent;
    }
    private static final int StorageDevicePowerCapUnitsMilliwatts = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_DEVICE_POWER_CAP_UNITS.StorageDevicePowerCapUnitsMilliwatts = 1
     * }
     */
    public static int StorageDevicePowerCapUnitsMilliwatts() {
        return StorageDevicePowerCapUnitsMilliwatts;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _STORAGE_DEVICE_POWER_CAP_UNITS {
     *     StorageDevicePowerCapUnitsPercent,
     *     StorageDevicePowerCapUnitsMilliwatts
     * } *PSTORAGE_DEVICE_POWER_CAP_UNITS
     * }
     */
    public static final AddressLayout PSTORAGE_DEVICE_POWER_CAP_UNITS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_DEVICE_POWER_CAP {
     *     DWORD Version;
     *     DWORD Size;
     *     STORAGE_DEVICE_POWER_CAP_UNITS Units;
     *     DWORDLONG MaxPower;
     * } *PSTORAGE_DEVICE_POWER_CAP
     * }
     */
    public static final AddressLayout PSTORAGE_DEVICE_POWER_CAP = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_RPMB_DATA_FRAME {
     *     BYTE Stuff[196];
     *     BYTE KeyOrMAC[32];
     *     BYTE Data[256];
     *     BYTE Nonce[16];
     *     BYTE WriteCounter[4];
     *     BYTE Address[2];
     *     BYTE BlockCount[2];
     *     BYTE OperationResult[2];
     *     BYTE RequestOrResponseType[2];
     * } *PSTORAGE_RPMB_DATA_FRAME
     * }
     */
    public static final AddressLayout PSTORAGE_RPMB_DATA_FRAME = C_POINTER;
    private static final int StorRpmbProgramAuthKey = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_RPMB_COMMAND_TYPE.StorRpmbProgramAuthKey = 1
     * }
     */
    public static int StorRpmbProgramAuthKey() {
        return StorRpmbProgramAuthKey;
    }
    private static final int StorRpmbQueryWriteCounter = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_RPMB_COMMAND_TYPE.StorRpmbQueryWriteCounter = 2
     * }
     */
    public static int StorRpmbQueryWriteCounter() {
        return StorRpmbQueryWriteCounter;
    }
    private static final int StorRpmbAuthenticatedWrite = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_RPMB_COMMAND_TYPE.StorRpmbAuthenticatedWrite = 3
     * }
     */
    public static int StorRpmbAuthenticatedWrite() {
        return StorRpmbAuthenticatedWrite;
    }
    private static final int StorRpmbAuthenticatedRead = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_RPMB_COMMAND_TYPE.StorRpmbAuthenticatedRead = 4
     * }
     */
    public static int StorRpmbAuthenticatedRead() {
        return StorRpmbAuthenticatedRead;
    }
    private static final int StorRpmbReadResultRequest = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_RPMB_COMMAND_TYPE.StorRpmbReadResultRequest = 5
     * }
     */
    public static int StorRpmbReadResultRequest() {
        return StorRpmbReadResultRequest;
    }
    private static final int StorRpmbAuthenticatedDeviceConfigWrite = (int)6L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_RPMB_COMMAND_TYPE.StorRpmbAuthenticatedDeviceConfigWrite = 6
     * }
     */
    public static int StorRpmbAuthenticatedDeviceConfigWrite() {
        return StorRpmbAuthenticatedDeviceConfigWrite;
    }
    private static final int StorRpmbAuthenticatedDeviceConfigRead = (int)7L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_RPMB_COMMAND_TYPE.StorRpmbAuthenticatedDeviceConfigRead = 7
     * }
     */
    public static int StorRpmbAuthenticatedDeviceConfigRead() {
        return StorRpmbAuthenticatedDeviceConfigRead;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _STORAGE_RPMB_COMMAND_TYPE {
     *     StorRpmbProgramAuthKey = 1,
     *     StorRpmbQueryWriteCounter = 2,
     *     StorRpmbAuthenticatedWrite = 3,
     *     StorRpmbAuthenticatedRead = 4,
     *     StorRpmbReadResultRequest = 5,
     *     StorRpmbAuthenticatedDeviceConfigWrite = 6,
     *     StorRpmbAuthenticatedDeviceConfigRead = 7
     * } *PSTORAGE_RPMB_COMMAND_TYPE
     * }
     */
    public static final AddressLayout PSTORAGE_RPMB_COMMAND_TYPE = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_EVENT_NOTIFICATION {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORDLONG Events;
     * } *PSTORAGE_EVENT_NOTIFICATION
     * }
     */
    public static final AddressLayout PSTORAGE_EVENT_NOTIFICATION = C_POINTER;
    private static final int StorageCounterTypeUnknown = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_COUNTER_TYPE.StorageCounterTypeUnknown = 0
     * }
     */
    public static int StorageCounterTypeUnknown() {
        return StorageCounterTypeUnknown;
    }
    private static final int StorageCounterTypeTemperatureCelsius = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_COUNTER_TYPE.StorageCounterTypeTemperatureCelsius = 1
     * }
     */
    public static int StorageCounterTypeTemperatureCelsius() {
        return StorageCounterTypeTemperatureCelsius;
    }
    private static final int StorageCounterTypeTemperatureCelsiusMax = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_COUNTER_TYPE.StorageCounterTypeTemperatureCelsiusMax = 2
     * }
     */
    public static int StorageCounterTypeTemperatureCelsiusMax() {
        return StorageCounterTypeTemperatureCelsiusMax;
    }
    private static final int StorageCounterTypeReadErrorsTotal = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_COUNTER_TYPE.StorageCounterTypeReadErrorsTotal = 3
     * }
     */
    public static int StorageCounterTypeReadErrorsTotal() {
        return StorageCounterTypeReadErrorsTotal;
    }
    private static final int StorageCounterTypeReadErrorsCorrected = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_COUNTER_TYPE.StorageCounterTypeReadErrorsCorrected = 4
     * }
     */
    public static int StorageCounterTypeReadErrorsCorrected() {
        return StorageCounterTypeReadErrorsCorrected;
    }
    private static final int StorageCounterTypeReadErrorsUncorrected = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_COUNTER_TYPE.StorageCounterTypeReadErrorsUncorrected = 5
     * }
     */
    public static int StorageCounterTypeReadErrorsUncorrected() {
        return StorageCounterTypeReadErrorsUncorrected;
    }
    private static final int StorageCounterTypeWriteErrorsTotal = (int)6L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_COUNTER_TYPE.StorageCounterTypeWriteErrorsTotal = 6
     * }
     */
    public static int StorageCounterTypeWriteErrorsTotal() {
        return StorageCounterTypeWriteErrorsTotal;
    }
    private static final int StorageCounterTypeWriteErrorsCorrected = (int)7L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_COUNTER_TYPE.StorageCounterTypeWriteErrorsCorrected = 7
     * }
     */
    public static int StorageCounterTypeWriteErrorsCorrected() {
        return StorageCounterTypeWriteErrorsCorrected;
    }
    private static final int StorageCounterTypeWriteErrorsUncorrected = (int)8L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_COUNTER_TYPE.StorageCounterTypeWriteErrorsUncorrected = 8
     * }
     */
    public static int StorageCounterTypeWriteErrorsUncorrected() {
        return StorageCounterTypeWriteErrorsUncorrected;
    }
    private static final int StorageCounterTypeManufactureDate = (int)9L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_COUNTER_TYPE.StorageCounterTypeManufactureDate = 9
     * }
     */
    public static int StorageCounterTypeManufactureDate() {
        return StorageCounterTypeManufactureDate;
    }
    private static final int StorageCounterTypeStartStopCycleCount = (int)10L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_COUNTER_TYPE.StorageCounterTypeStartStopCycleCount = 10
     * }
     */
    public static int StorageCounterTypeStartStopCycleCount() {
        return StorageCounterTypeStartStopCycleCount;
    }
    private static final int StorageCounterTypeStartStopCycleCountMax = (int)11L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_COUNTER_TYPE.StorageCounterTypeStartStopCycleCountMax = 11
     * }
     */
    public static int StorageCounterTypeStartStopCycleCountMax() {
        return StorageCounterTypeStartStopCycleCountMax;
    }
    private static final int StorageCounterTypeLoadUnloadCycleCount = (int)12L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_COUNTER_TYPE.StorageCounterTypeLoadUnloadCycleCount = 12
     * }
     */
    public static int StorageCounterTypeLoadUnloadCycleCount() {
        return StorageCounterTypeLoadUnloadCycleCount;
    }
    private static final int StorageCounterTypeLoadUnloadCycleCountMax = (int)13L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_COUNTER_TYPE.StorageCounterTypeLoadUnloadCycleCountMax = 13
     * }
     */
    public static int StorageCounterTypeLoadUnloadCycleCountMax() {
        return StorageCounterTypeLoadUnloadCycleCountMax;
    }
    private static final int StorageCounterTypeWearPercentage = (int)14L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_COUNTER_TYPE.StorageCounterTypeWearPercentage = 14
     * }
     */
    public static int StorageCounterTypeWearPercentage() {
        return StorageCounterTypeWearPercentage;
    }
    private static final int StorageCounterTypeWearPercentageWarning = (int)15L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_COUNTER_TYPE.StorageCounterTypeWearPercentageWarning = 15
     * }
     */
    public static int StorageCounterTypeWearPercentageWarning() {
        return StorageCounterTypeWearPercentageWarning;
    }
    private static final int StorageCounterTypeWearPercentageMax = (int)16L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_COUNTER_TYPE.StorageCounterTypeWearPercentageMax = 16
     * }
     */
    public static int StorageCounterTypeWearPercentageMax() {
        return StorageCounterTypeWearPercentageMax;
    }
    private static final int StorageCounterTypePowerOnHours = (int)17L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_COUNTER_TYPE.StorageCounterTypePowerOnHours = 17
     * }
     */
    public static int StorageCounterTypePowerOnHours() {
        return StorageCounterTypePowerOnHours;
    }
    private static final int StorageCounterTypeReadLatency100NSMax = (int)18L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_COUNTER_TYPE.StorageCounterTypeReadLatency100NSMax = 18
     * }
     */
    public static int StorageCounterTypeReadLatency100NSMax() {
        return StorageCounterTypeReadLatency100NSMax;
    }
    private static final int StorageCounterTypeWriteLatency100NSMax = (int)19L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_COUNTER_TYPE.StorageCounterTypeWriteLatency100NSMax = 19
     * }
     */
    public static int StorageCounterTypeWriteLatency100NSMax() {
        return StorageCounterTypeWriteLatency100NSMax;
    }
    private static final int StorageCounterTypeFlushLatency100NSMax = (int)20L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_COUNTER_TYPE.StorageCounterTypeFlushLatency100NSMax = 20
     * }
     */
    public static int StorageCounterTypeFlushLatency100NSMax() {
        return StorageCounterTypeFlushLatency100NSMax;
    }
    private static final int StorageCounterTypeMax = (int)21L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_COUNTER_TYPE.StorageCounterTypeMax = 21
     * }
     */
    public static int StorageCounterTypeMax() {
        return StorageCounterTypeMax;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _STORAGE_COUNTER_TYPE {
     *     StorageCounterTypeUnknown = 0,
     *     StorageCounterTypeTemperatureCelsius,
     *     StorageCounterTypeTemperatureCelsiusMax,
     *     StorageCounterTypeReadErrorsTotal,
     *     StorageCounterTypeReadErrorsCorrected,
     *     StorageCounterTypeReadErrorsUncorrected,
     *     StorageCounterTypeWriteErrorsTotal,
     *     StorageCounterTypeWriteErrorsCorrected,
     *     StorageCounterTypeWriteErrorsUncorrected,
     *     StorageCounterTypeManufactureDate,
     *     StorageCounterTypeStartStopCycleCount,
     *     StorageCounterTypeStartStopCycleCountMax,
     *     StorageCounterTypeLoadUnloadCycleCount,
     *     StorageCounterTypeLoadUnloadCycleCountMax,
     *     StorageCounterTypeWearPercentage,
     *     StorageCounterTypeWearPercentageWarning,
     *     StorageCounterTypeWearPercentageMax,
     *     StorageCounterTypePowerOnHours,
     *     StorageCounterTypeReadLatency100NSMax,
     *     StorageCounterTypeWriteLatency100NSMax,
     *     StorageCounterTypeFlushLatency100NSMax,
     *     StorageCounterTypeMax
     * } *PSTORAGE_COUNTER_TYPE
     * }
     */
    public static final AddressLayout PSTORAGE_COUNTER_TYPE = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_COUNTER {
     *     STORAGE_COUNTER_TYPE Type;
     *     union {
     *         struct {
     *             DWORD Week;
     *             DWORD Year;
     *         } ManufactureDate;
     *         DWORDLONG AsUlonglong;
     *     } Value;
     * } *PSTORAGE_COUNTER
     * }
     */
    public static final AddressLayout PSTORAGE_COUNTER = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_COUNTERS {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD NumberOfCounters;
     *     STORAGE_COUNTER Counters[1];
     * } *PSTORAGE_COUNTERS
     * }
     */
    public static final AddressLayout PSTORAGE_COUNTERS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_HW_FIRMWARE_INFO_QUERY {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD Flags;
     *     DWORD Reserved;
     * } *PSTORAGE_HW_FIRMWARE_INFO_QUERY
     * }
     */
    public static final AddressLayout PSTORAGE_HW_FIRMWARE_INFO_QUERY = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_HW_FIRMWARE_SLOT_INFO {
     *     DWORD Version;
     *     DWORD Size;
     *     BYTE SlotNumber;
     *     BYTE ReadOnly : 1;
     *     BYTE Reserved0 : 7;
     *     BYTE Reserved1[6];
     *     BYTE Revision[16];
     * } *PSTORAGE_HW_FIRMWARE_SLOT_INFO
     * }
     */
    public static final AddressLayout PSTORAGE_HW_FIRMWARE_SLOT_INFO = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_HW_FIRMWARE_INFO {
     *     DWORD Version;
     *     DWORD Size;
     *     BYTE SupportUpgrade : 1;
     *     BYTE Reserved0 : 7;
     *     BYTE SlotCount;
     *     BYTE ActiveSlot;
     *     BYTE PendingActivateSlot;
     *     BOOLEAN FirmwareShared;
     *     BYTE Reserved[3];
     *     DWORD ImagePayloadAlignment;
     *     DWORD ImagePayloadMaxSize;
     *     STORAGE_HW_FIRMWARE_SLOT_INFO Slot[1];
     * } *PSTORAGE_HW_FIRMWARE_INFO
     * }
     */
    public static final AddressLayout PSTORAGE_HW_FIRMWARE_INFO = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_HW_FIRMWARE_DOWNLOAD {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD Flags;
     *     BYTE Slot;
     *     BYTE Reserved[3];
     *     DWORDLONG Offset;
     *     DWORDLONG BufferSize;
     *     BYTE ImageBuffer[1];
     * } *PSTORAGE_HW_FIRMWARE_DOWNLOAD
     * }
     */
    public static final AddressLayout PSTORAGE_HW_FIRMWARE_DOWNLOAD = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_HW_FIRMWARE_DOWNLOAD_V2 {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD Flags;
     *     BYTE Slot;
     *     BYTE Reserved[3];
     *     DWORDLONG Offset;
     *     DWORDLONG BufferSize;
     *     DWORD ImageSize;
     *     DWORD Reserved2;
     *     BYTE ImageBuffer[1];
     * } *PSTORAGE_HW_FIRMWARE_DOWNLOAD_V2
     * }
     */
    public static final AddressLayout PSTORAGE_HW_FIRMWARE_DOWNLOAD_V2 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_HW_FIRMWARE_ACTIVATE {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD Flags;
     *     BYTE Slot;
     *     BYTE Reserved0[3];
     * } *PSTORAGE_HW_FIRMWARE_ACTIVATE
     * }
     */
    public static final AddressLayout PSTORAGE_HW_FIRMWARE_ACTIVATE = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_PROTOCOL_COMMAND {
     *     DWORD Version;
     *     DWORD Length;
     *     STORAGE_PROTOCOL_TYPE ProtocolType;
     *     DWORD Flags;
     *     DWORD ReturnStatus;
     *     DWORD ErrorCode;
     *     DWORD CommandLength;
     *     DWORD ErrorInfoLength;
     *     DWORD DataToDeviceTransferLength;
     *     DWORD DataFromDeviceTransferLength;
     *     DWORD TimeOutValue;
     *     DWORD ErrorInfoOffset;
     *     DWORD DataToDeviceBufferOffset;
     *     DWORD DataFromDeviceBufferOffset;
     *     DWORD CommandSpecific;
     *     DWORD Reserved0;
     *     DWORD FixedProtocolReturnData;
     *     DWORD Reserved1[3];
     *     BYTE Command[1];
     * } *PSTORAGE_PROTOCOL_COMMAND
     * }
     */
    public static final AddressLayout PSTORAGE_PROTOCOL_COMMAND = C_POINTER;
    private static final int StorAttributeMgmt_ClearAttribute = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_ATTRIBUTE_MGMT_ACTION.StorAttributeMgmt_ClearAttribute = 0
     * }
     */
    public static int StorAttributeMgmt_ClearAttribute() {
        return StorAttributeMgmt_ClearAttribute;
    }
    private static final int StorAttributeMgmt_SetAttribute = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_ATTRIBUTE_MGMT_ACTION.StorAttributeMgmt_SetAttribute = 1
     * }
     */
    public static int StorAttributeMgmt_SetAttribute() {
        return StorAttributeMgmt_SetAttribute;
    }
    private static final int StorAttributeMgmt_ResetAttribute = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_ATTRIBUTE_MGMT_ACTION.StorAttributeMgmt_ResetAttribute = 2
     * }
     */
    public static int StorAttributeMgmt_ResetAttribute() {
        return StorAttributeMgmt_ResetAttribute;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _STORAGE_ATTRIBUTE_MGMT_ACTION {
     *     StorAttributeMgmt_ClearAttribute = 0,
     *     StorAttributeMgmt_SetAttribute = 1,
     *     StorAttributeMgmt_ResetAttribute = 2
     * } *PSTORAGE_ATTRIBUTE_MGMT_ACTION
     * }
     */
    public static final AddressLayout PSTORAGE_ATTRIBUTE_MGMT_ACTION = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_ATTRIBUTE_MGMT {
     *     DWORD Version;
     *     DWORD Size;
     *     STORAGE_ATTRIBUTE_MGMT_ACTION Action;
     *     DWORD Attribute;
     * } *PSTORAGE_ATTRIBUTE_MGMT
     * }
     */
    public static final AddressLayout PSTORAGE_ATTRIBUTE_MGMT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_PD_HEALTH_NOTIFICATION_DATA {
     *     GUID DeviceGuid;
     * } *PSCM_PD_HEALTH_NOTIFICATION_DATA
     * }
     */
    public static final AddressLayout PSCM_PD_HEALTH_NOTIFICATION_DATA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_LOGICAL_DEVICE_INSTANCE {
     *     DWORD Version;
     *     DWORD Size;
     *     GUID DeviceGuid;
     *     WCHAR SymbolicLink[256];
     * } *PSCM_LOGICAL_DEVICE_INSTANCE
     * }
     */
    public static final AddressLayout PSCM_LOGICAL_DEVICE_INSTANCE = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_LOGICAL_DEVICES {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD DeviceCount;
     *     SCM_LOGICAL_DEVICE_INSTANCE Devices[1];
     * } *PSCM_LOGICAL_DEVICES
     * }
     */
    public static final AddressLayout PSCM_LOGICAL_DEVICES = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_PHYSICAL_DEVICE_INSTANCE {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD NfitHandle;
     *     WCHAR SymbolicLink[256];
     * } *PSCM_PHYSICAL_DEVICE_INSTANCE
     * }
     */
    public static final AddressLayout PSCM_PHYSICAL_DEVICE_INSTANCE = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_PHYSICAL_DEVICES {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD DeviceCount;
     *     SCM_PHYSICAL_DEVICE_INSTANCE Devices[1];
     * } *PSCM_PHYSICAL_DEVICES
     * }
     */
    public static final AddressLayout PSCM_PHYSICAL_DEVICES = C_POINTER;
    private static final int ScmRegionFlagNone = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _SCM_REGION_FLAG.ScmRegionFlagNone = 0
     * }
     */
    public static int ScmRegionFlagNone() {
        return ScmRegionFlagNone;
    }
    private static final int ScmRegionFlagLabel = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _SCM_REGION_FLAG.ScmRegionFlagLabel = 1
     * }
     */
    public static int ScmRegionFlagLabel() {
        return ScmRegionFlagLabel;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _SCM_REGION_FLAG {
     *     ScmRegionFlagNone = 0,
     *     ScmRegionFlagLabel = 1
     * } *PSCM_REGION_FLAG
     * }
     */
    public static final AddressLayout PSCM_REGION_FLAG = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_REGION {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD Flags;
     *     DWORD NfitHandle;
     *     GUID LogicalDeviceGuid;
     *     GUID AddressRangeType;
     *     DWORD AssociatedId;
     *     DWORD64 Length;
     *     DWORD64 StartingDPA;
     *     DWORD64 BaseSPA;
     *     DWORD64 SPAOffset;
     *     DWORD64 RegionOffset;
     * } *PSCM_REGION
     * }
     */
    public static final AddressLayout PSCM_REGION = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_REGIONS {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD RegionCount;
     *     SCM_REGION Regions[1];
     * } *PSCM_REGIONS
     * }
     */
    public static final AddressLayout PSCM_REGIONS = C_POINTER;
    private static final int ScmBusQuery_Descriptor = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _SCM_BUS_QUERY_TYPE.ScmBusQuery_Descriptor = 0
     * }
     */
    public static int ScmBusQuery_Descriptor() {
        return ScmBusQuery_Descriptor;
    }
    private static final int ScmBusQuery_IsSupported = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _SCM_BUS_QUERY_TYPE.ScmBusQuery_IsSupported = 1
     * }
     */
    public static int ScmBusQuery_IsSupported() {
        return ScmBusQuery_IsSupported;
    }
    private static final int ScmBusQuery_Max = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _SCM_BUS_QUERY_TYPE.ScmBusQuery_Max = 2
     * }
     */
    public static int ScmBusQuery_Max() {
        return ScmBusQuery_Max;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _SCM_BUS_QUERY_TYPE {
     *     ScmBusQuery_Descriptor = 0,
     *     ScmBusQuery_IsSupported,
     *     ScmBusQuery_Max
     * } *PSCM_BUS_QUERY_TYPE
     * }
     */
    public static final AddressLayout PSCM_BUS_QUERY_TYPE = C_POINTER;
    private static final int ScmBusSet_Descriptor = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _SCM_BUS_SET_TYPE.ScmBusSet_Descriptor = 0
     * }
     */
    public static int ScmBusSet_Descriptor() {
        return ScmBusSet_Descriptor;
    }
    private static final int ScmBusSet_IsSupported = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _SCM_BUS_SET_TYPE.ScmBusSet_IsSupported = 1
     * }
     */
    public static int ScmBusSet_IsSupported() {
        return ScmBusSet_IsSupported;
    }
    private static final int ScmBusSet_Max = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _SCM_BUS_SET_TYPE.ScmBusSet_Max = 2
     * }
     */
    public static int ScmBusSet_Max() {
        return ScmBusSet_Max;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _SCM_BUS_SET_TYPE {
     *     ScmBusSet_Descriptor = 0,
     *     ScmBusSet_IsSupported,
     *     ScmBusSet_Max
     * } *PSCM_BUS_SET_TYPE
     * }
     */
    public static final AddressLayout PSCM_BUS_SET_TYPE = C_POINTER;
    private static final int ScmBusProperty_RuntimeFwActivationInfo = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _SCM_BUS_PROPERTY_ID.ScmBusProperty_RuntimeFwActivationInfo = 0
     * }
     */
    public static int ScmBusProperty_RuntimeFwActivationInfo() {
        return ScmBusProperty_RuntimeFwActivationInfo;
    }
    private static final int ScmBusProperty_DedicatedMemoryInfo = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _SCM_BUS_PROPERTY_ID.ScmBusProperty_DedicatedMemoryInfo = 1
     * }
     */
    public static int ScmBusProperty_DedicatedMemoryInfo() {
        return ScmBusProperty_DedicatedMemoryInfo;
    }
    private static final int ScmBusProperty_DedicatedMemoryState = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _SCM_BUS_PROPERTY_ID.ScmBusProperty_DedicatedMemoryState = 2
     * }
     */
    public static int ScmBusProperty_DedicatedMemoryState() {
        return ScmBusProperty_DedicatedMemoryState;
    }
    private static final int ScmBusProperty_Max = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _SCM_BUS_PROPERTY_ID.ScmBusProperty_Max = 3
     * }
     */
    public static int ScmBusProperty_Max() {
        return ScmBusProperty_Max;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _SCM_BUS_PROPERTY_ID {
     *     ScmBusProperty_RuntimeFwActivationInfo = 0,
     *     ScmBusProperty_DedicatedMemoryInfo = 1,
     *     ScmBusProperty_DedicatedMemoryState = 2,
     *     ScmBusProperty_Max
     * } *PSCM_BUS_PROPERTY_ID
     * }
     */
    public static final AddressLayout PSCM_BUS_PROPERTY_ID = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_BUS_PROPERTY_QUERY {
     *     DWORD Version;
     *     DWORD Size;
     *     SCM_BUS_PROPERTY_ID PropertyId;
     *     SCM_BUS_QUERY_TYPE QueryType;
     *     BYTE AdditionalParameters[1];
     * } *PSCM_BUS_PROPERTY_QUERY
     * }
     */
    public static final AddressLayout PSCM_BUS_PROPERTY_QUERY = C_POINTER;
    private static final int ScmBusFirmwareActivationState_Idle = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _SCM_BUS_FIRMWARE_ACTIVATION_STATE.ScmBusFirmwareActivationState_Idle = 0
     * }
     */
    public static int ScmBusFirmwareActivationState_Idle() {
        return ScmBusFirmwareActivationState_Idle;
    }
    private static final int ScmBusFirmwareActivationState_Armed = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _SCM_BUS_FIRMWARE_ACTIVATION_STATE.ScmBusFirmwareActivationState_Armed = 1
     * }
     */
    public static int ScmBusFirmwareActivationState_Armed() {
        return ScmBusFirmwareActivationState_Armed;
    }
    private static final int ScmBusFirmwareActivationState_Busy = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _SCM_BUS_FIRMWARE_ACTIVATION_STATE.ScmBusFirmwareActivationState_Busy = 2
     * }
     */
    public static int ScmBusFirmwareActivationState_Busy() {
        return ScmBusFirmwareActivationState_Busy;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _SCM_BUS_FIRMWARE_ACTIVATION_STATE {
     *     ScmBusFirmwareActivationState_Idle = 0,
     *     ScmBusFirmwareActivationState_Armed = 1,
     *     ScmBusFirmwareActivationState_Busy = 2
     * } *PSCM_BUS_FIRMWARE_ACTIVATION_STATE
     * }
     */
    public static final AddressLayout PSCM_BUS_FIRMWARE_ACTIVATION_STATE = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_BUS_RUNTIME_FW_ACTIVATION_INFO {
     *     DWORD Version;
     *     DWORD Size;
     *     BOOLEAN RuntimeFwActivationSupported;
     *     SCM_BUS_FIRMWARE_ACTIVATION_STATE FirmwareActivationState;
     *     struct {
     *         DWORD FwManagedIoQuiesceFwActivationSupported : 1;
     *         DWORD OsManagedIoQuiesceFwActivationSupported : 1;
     *         DWORD WarmResetBasedFwActivationSupported : 1;
     *         DWORD Reserved : 29;
     *     } FirmwareActivationCapability;
     *     DWORDLONG EstimatedFirmwareActivationTimeInUSecs;
     *     DWORDLONG EstimatedProcessorAccessQuiesceTimeInUSecs;
     *     DWORDLONG EstimatedIOAccessQuiesceTimeInUSecs;
     *     DWORDLONG PlatformSupportedMaxIOAccessQuiesceTimeInUSecs;
     * } *PSCM_BUS_RUNTIME_FW_ACTIVATION_INFO
     * }
     */
    public static final AddressLayout PSCM_BUS_RUNTIME_FW_ACTIVATION_INFO = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_BUS_DEDICATED_MEMORY_DEVICE_INFO {
     *     GUID DeviceGuid;
     *     DWORD DeviceNumber;
     *     struct {
     *         DWORD ForcedByRegistry : 1;
     *         DWORD Initialized : 1;
     *         DWORD Reserved : 30;
     *     } Flags;
     *     DWORDLONG DeviceSize;
     * } *PSCM_BUS_DEDICATED_MEMORY_DEVICE_INFO
     * }
     */
    public static final AddressLayout PSCM_BUS_DEDICATED_MEMORY_DEVICE_INFO = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_BUS_DEDICATED_MEMORY_DEVICES_INFO {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD DeviceCount;
     *     SCM_BUS_DEDICATED_MEMORY_DEVICE_INFO Devices[1];
     * } *PSCM_BUS_DEDICATED_MEMORY_DEVICES_INFO
     * }
     */
    public static final AddressLayout PSCM_BUS_DEDICATED_MEMORY_DEVICES_INFO = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_BUS_PROPERTY_SET {
     *     DWORD Version;
     *     DWORD Size;
     *     SCM_BUS_PROPERTY_ID PropertyId;
     *     SCM_BUS_SET_TYPE SetType;
     *     BYTE AdditionalParameters[1];
     * } *PSCM_BUS_PROPERTY_SET
     * }
     */
    public static final AddressLayout PSCM_BUS_PROPERTY_SET = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_BUS_DEDICATED_MEMORY_STATE {
     *     BOOLEAN ActivateState;
     * } *PSCM_BUS_DEDICATED_MEMORY_STATE
     * }
     */
    public static final AddressLayout PSCM_BUS_DEDICATED_MEMORY_STATE = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_INTERLEAVED_PD_INFO {
     *     DWORD DeviceHandle;
     *     GUID DeviceGuid;
     * } *PSCM_INTERLEAVED_PD_INFO
     * }
     */
    public static final AddressLayout PSCM_INTERLEAVED_PD_INFO = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_LD_INTERLEAVE_SET_INFO {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD InterleaveSetSize;
     *     SCM_INTERLEAVED_PD_INFO InterleaveSet[1];
     * } *PSCM_LD_INTERLEAVE_SET_INFO
     * }
     */
    public static final AddressLayout PSCM_LD_INTERLEAVE_SET_INFO = C_POINTER;
    private static final int ScmPhysicalDeviceQuery_Descriptor = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_QUERY_TYPE.ScmPhysicalDeviceQuery_Descriptor = 0
     * }
     */
    public static int ScmPhysicalDeviceQuery_Descriptor() {
        return ScmPhysicalDeviceQuery_Descriptor;
    }
    private static final int ScmPhysicalDeviceQuery_IsSupported = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_QUERY_TYPE.ScmPhysicalDeviceQuery_IsSupported = 1
     * }
     */
    public static int ScmPhysicalDeviceQuery_IsSupported() {
        return ScmPhysicalDeviceQuery_IsSupported;
    }
    private static final int ScmPhysicalDeviceQuery_Max = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_QUERY_TYPE.ScmPhysicalDeviceQuery_Max = 2
     * }
     */
    public static int ScmPhysicalDeviceQuery_Max() {
        return ScmPhysicalDeviceQuery_Max;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _SCM_PD_QUERY_TYPE {
     *     ScmPhysicalDeviceQuery_Descriptor = 0,
     *     ScmPhysicalDeviceQuery_IsSupported,
     *     ScmPhysicalDeviceQuery_Max
     * } *PSCM_PD_QUERY_TYPE
     * }
     */
    public static final AddressLayout PSCM_PD_QUERY_TYPE = C_POINTER;
    private static final int ScmPhysicalDeviceSet_Descriptor = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_SET_TYPE.ScmPhysicalDeviceSet_Descriptor = 0
     * }
     */
    public static int ScmPhysicalDeviceSet_Descriptor() {
        return ScmPhysicalDeviceSet_Descriptor;
    }
    private static final int ScmPhysicalDeviceSet_IsSupported = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_SET_TYPE.ScmPhysicalDeviceSet_IsSupported = 1
     * }
     */
    public static int ScmPhysicalDeviceSet_IsSupported() {
        return ScmPhysicalDeviceSet_IsSupported;
    }
    private static final int ScmPhysicalDeviceSet_Max = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_SET_TYPE.ScmPhysicalDeviceSet_Max = 2
     * }
     */
    public static int ScmPhysicalDeviceSet_Max() {
        return ScmPhysicalDeviceSet_Max;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _SCM_PD_SET_TYPE {
     *     ScmPhysicalDeviceSet_Descriptor = 0,
     *     ScmPhysicalDeviceSet_IsSupported,
     *     ScmPhysicalDeviceSet_Max
     * } *PSCM_PD_SET_TYPE
     * }
     */
    public static final AddressLayout PSCM_PD_SET_TYPE = C_POINTER;
    private static final int ScmPhysicalDeviceProperty_DeviceInfo = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_PROPERTY_ID.ScmPhysicalDeviceProperty_DeviceInfo = 0
     * }
     */
    public static int ScmPhysicalDeviceProperty_DeviceInfo() {
        return ScmPhysicalDeviceProperty_DeviceInfo;
    }
    private static final int ScmPhysicalDeviceProperty_ManagementStatus = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_PROPERTY_ID.ScmPhysicalDeviceProperty_ManagementStatus = 1
     * }
     */
    public static int ScmPhysicalDeviceProperty_ManagementStatus() {
        return ScmPhysicalDeviceProperty_ManagementStatus;
    }
    private static final int ScmPhysicalDeviceProperty_FirmwareInfo = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_PROPERTY_ID.ScmPhysicalDeviceProperty_FirmwareInfo = 2
     * }
     */
    public static int ScmPhysicalDeviceProperty_FirmwareInfo() {
        return ScmPhysicalDeviceProperty_FirmwareInfo;
    }
    private static final int ScmPhysicalDeviceProperty_LocationString = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_PROPERTY_ID.ScmPhysicalDeviceProperty_LocationString = 3
     * }
     */
    public static int ScmPhysicalDeviceProperty_LocationString() {
        return ScmPhysicalDeviceProperty_LocationString;
    }
    private static final int ScmPhysicalDeviceProperty_DeviceSpecificInfo = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_PROPERTY_ID.ScmPhysicalDeviceProperty_DeviceSpecificInfo = 4
     * }
     */
    public static int ScmPhysicalDeviceProperty_DeviceSpecificInfo() {
        return ScmPhysicalDeviceProperty_DeviceSpecificInfo;
    }
    private static final int ScmPhysicalDeviceProperty_DeviceHandle = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_PROPERTY_ID.ScmPhysicalDeviceProperty_DeviceHandle = 5
     * }
     */
    public static int ScmPhysicalDeviceProperty_DeviceHandle() {
        return ScmPhysicalDeviceProperty_DeviceHandle;
    }
    private static final int ScmPhysicalDeviceProperty_FruIdString = (int)6L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_PROPERTY_ID.ScmPhysicalDeviceProperty_FruIdString = 6
     * }
     */
    public static int ScmPhysicalDeviceProperty_FruIdString() {
        return ScmPhysicalDeviceProperty_FruIdString;
    }
    private static final int ScmPhysicalDeviceProperty_RuntimeFwActivationInfo = (int)7L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_PROPERTY_ID.ScmPhysicalDeviceProperty_RuntimeFwActivationInfo = 7
     * }
     */
    public static int ScmPhysicalDeviceProperty_RuntimeFwActivationInfo() {
        return ScmPhysicalDeviceProperty_RuntimeFwActivationInfo;
    }
    private static final int ScmPhysicalDeviceProperty_RuntimeFwActivationArmState = (int)8L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_PROPERTY_ID.ScmPhysicalDeviceProperty_RuntimeFwActivationArmState = 8
     * }
     */
    public static int ScmPhysicalDeviceProperty_RuntimeFwActivationArmState() {
        return ScmPhysicalDeviceProperty_RuntimeFwActivationArmState;
    }
    private static final int ScmPhysicalDeviceProperty_Max = (int)9L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_PROPERTY_ID.ScmPhysicalDeviceProperty_Max = 9
     * }
     */
    public static int ScmPhysicalDeviceProperty_Max() {
        return ScmPhysicalDeviceProperty_Max;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _SCM_PD_PROPERTY_ID {
     *     ScmPhysicalDeviceProperty_DeviceInfo = 0,
     *     ScmPhysicalDeviceProperty_ManagementStatus,
     *     ScmPhysicalDeviceProperty_FirmwareInfo,
     *     ScmPhysicalDeviceProperty_LocationString,
     *     ScmPhysicalDeviceProperty_DeviceSpecificInfo,
     *     ScmPhysicalDeviceProperty_DeviceHandle,
     *     ScmPhysicalDeviceProperty_FruIdString,
     *     ScmPhysicalDeviceProperty_RuntimeFwActivationInfo,
     *     ScmPhysicalDeviceProperty_RuntimeFwActivationArmState,
     *     ScmPhysicalDeviceProperty_Max
     * } *PSCM_PD_PROPERTY_ID
     * }
     */
    public static final AddressLayout PSCM_PD_PROPERTY_ID = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_PD_PROPERTY_QUERY {
     *     DWORD Version;
     *     DWORD Size;
     *     SCM_PD_PROPERTY_ID PropertyId;
     *     SCM_PD_QUERY_TYPE QueryType;
     *     BYTE AdditionalParameters[1];
     * } *PSCM_PD_PROPERTY_QUERY
     * }
     */
    public static final AddressLayout PSCM_PD_PROPERTY_QUERY = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_PD_PROPERTY_SET {
     *     DWORD Version;
     *     DWORD Size;
     *     SCM_PD_PROPERTY_ID PropertyId;
     *     SCM_PD_SET_TYPE SetType;
     *     BYTE AdditionalParameters[1];
     * } *PSCM_PD_PROPERTY_SET
     * }
     */
    public static final AddressLayout PSCM_PD_PROPERTY_SET = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_PD_RUNTIME_FW_ACTIVATION_ARM_STATE {
     *     BOOLEAN ArmState;
     * } *PSCM_PD_RUNTIME_FW_ACTIVATION_ARM_STATE
     * }
     */
    public static final AddressLayout PSCM_PD_RUNTIME_FW_ACTIVATION_ARM_STATE = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_PD_DESCRIPTOR_HEADER {
     *     DWORD Version;
     *     DWORD Size;
     * } *PSCM_PD_DESCRIPTOR_HEADER
     * }
     */
    public static final AddressLayout PSCM_PD_DESCRIPTOR_HEADER = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_PD_DEVICE_HANDLE {
     *     DWORD Version;
     *     DWORD Size;
     *     GUID DeviceGuid;
     *     DWORD DeviceHandle;
     * } *PSCM_PD_DEVICE_HANDLE
     * }
     */
    public static final AddressLayout PSCM_PD_DEVICE_HANDLE = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_PD_DEVICE_INFO {
     *     DWORD Version;
     *     DWORD Size;
     *     GUID DeviceGuid;
     *     DWORD UnsafeShutdownCount;
     *     DWORD64 PersistentMemorySizeInBytes;
     *     DWORD64 VolatileMemorySizeInBytes;
     *     DWORD64 TotalMemorySizeInBytes;
     *     DWORD SlotNumber;
     *     DWORD DeviceHandle;
     *     WORD PhysicalId;
     *     BYTE NumberOfFormatInterfaceCodes;
     *     WORD FormatInterfaceCodes[8];
     *     DWORD VendorId;
     *     DWORD ProductId;
     *     DWORD SubsystemDeviceId;
     *     DWORD SubsystemVendorId;
     *     BYTE ManufacturingLocation;
     *     BYTE ManufacturingWeek;
     *     BYTE ManufacturingYear;
     *     DWORD SerialNumber4Byte;
     *     DWORD SerialNumberLengthInChars;
     *     CHAR SerialNumber[1];
     * } *PSCM_PD_DEVICE_INFO
     * }
     */
    public static final AddressLayout PSCM_PD_DEVICE_INFO = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_PD_DEVICE_SPECIFIC_PROPERTY {
     *     WCHAR Name[128];
     *     LONGLONG Value;
     * } *PSCM_PD_DEVICE_SPECIFIC_PROPERTY
     * }
     */
    public static final AddressLayout PSCM_PD_DEVICE_SPECIFIC_PROPERTY = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_PD_DEVICE_SPECIFIC_INFO {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD NumberOfProperties;
     *     SCM_PD_DEVICE_SPECIFIC_PROPERTY DeviceSpecificProperties[1];
     * } *PSCM_PD_DEVICE_SPECIFIC_INFO
     * }
     */
    public static final AddressLayout PSCM_PD_DEVICE_SPECIFIC_INFO = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_PD_FIRMWARE_SLOT_INFO {
     *     DWORD Version;
     *     DWORD Size;
     *     BYTE SlotNumber;
     *     BYTE ReadOnly : 1;
     *     BYTE Reserved0 : 7;
     *     BYTE Reserved1[6];
     *     BYTE Revision[32];
     * } *PSCM_PD_FIRMWARE_SLOT_INFO
     * }
     */
    public static final AddressLayout PSCM_PD_FIRMWARE_SLOT_INFO = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_PD_FIRMWARE_INFO {
     *     DWORD Version;
     *     DWORD Size;
     *     BYTE ActiveSlot;
     *     BYTE NextActiveSlot;
     *     BYTE SlotCount;
     *     SCM_PD_FIRMWARE_SLOT_INFO Slots[1];
     * } *PSCM_PD_FIRMWARE_INFO
     * }
     */
    public static final AddressLayout PSCM_PD_FIRMWARE_INFO = C_POINTER;
    private static final int ScmPhysicalDeviceHealth_Unknown = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_HEALTH_STATUS.ScmPhysicalDeviceHealth_Unknown = 0
     * }
     */
    public static int ScmPhysicalDeviceHealth_Unknown() {
        return ScmPhysicalDeviceHealth_Unknown;
    }
    private static final int ScmPhysicalDeviceHealth_Unhealthy = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_HEALTH_STATUS.ScmPhysicalDeviceHealth_Unhealthy = 1
     * }
     */
    public static int ScmPhysicalDeviceHealth_Unhealthy() {
        return ScmPhysicalDeviceHealth_Unhealthy;
    }
    private static final int ScmPhysicalDeviceHealth_Warning = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_HEALTH_STATUS.ScmPhysicalDeviceHealth_Warning = 2
     * }
     */
    public static int ScmPhysicalDeviceHealth_Warning() {
        return ScmPhysicalDeviceHealth_Warning;
    }
    private static final int ScmPhysicalDeviceHealth_Healthy = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_HEALTH_STATUS.ScmPhysicalDeviceHealth_Healthy = 3
     * }
     */
    public static int ScmPhysicalDeviceHealth_Healthy() {
        return ScmPhysicalDeviceHealth_Healthy;
    }
    private static final int ScmPhysicalDeviceHealth_Max = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_HEALTH_STATUS.ScmPhysicalDeviceHealth_Max = 4
     * }
     */
    public static int ScmPhysicalDeviceHealth_Max() {
        return ScmPhysicalDeviceHealth_Max;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _SCM_PD_HEALTH_STATUS {
     *     ScmPhysicalDeviceHealth_Unknown = 0,
     *     ScmPhysicalDeviceHealth_Unhealthy,
     *     ScmPhysicalDeviceHealth_Warning,
     *     ScmPhysicalDeviceHealth_Healthy,
     *     ScmPhysicalDeviceHealth_Max
     * } *PSCM_PD_HEALTH_STATUS
     * }
     */
    public static final AddressLayout PSCM_PD_HEALTH_STATUS = C_POINTER;
    private static final int ScmPhysicalDeviceOpStatus_Unknown = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS.ScmPhysicalDeviceOpStatus_Unknown = 0
     * }
     */
    public static int ScmPhysicalDeviceOpStatus_Unknown() {
        return ScmPhysicalDeviceOpStatus_Unknown;
    }
    private static final int ScmPhysicalDeviceOpStatus_Ok = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS.ScmPhysicalDeviceOpStatus_Ok = 1
     * }
     */
    public static int ScmPhysicalDeviceOpStatus_Ok() {
        return ScmPhysicalDeviceOpStatus_Ok;
    }
    private static final int ScmPhysicalDeviceOpStatus_PredictingFailure = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS.ScmPhysicalDeviceOpStatus_PredictingFailure = 2
     * }
     */
    public static int ScmPhysicalDeviceOpStatus_PredictingFailure() {
        return ScmPhysicalDeviceOpStatus_PredictingFailure;
    }
    private static final int ScmPhysicalDeviceOpStatus_InService = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS.ScmPhysicalDeviceOpStatus_InService = 3
     * }
     */
    public static int ScmPhysicalDeviceOpStatus_InService() {
        return ScmPhysicalDeviceOpStatus_InService;
    }
    private static final int ScmPhysicalDeviceOpStatus_HardwareError = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS.ScmPhysicalDeviceOpStatus_HardwareError = 4
     * }
     */
    public static int ScmPhysicalDeviceOpStatus_HardwareError() {
        return ScmPhysicalDeviceOpStatus_HardwareError;
    }
    private static final int ScmPhysicalDeviceOpStatus_NotUsable = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS.ScmPhysicalDeviceOpStatus_NotUsable = 5
     * }
     */
    public static int ScmPhysicalDeviceOpStatus_NotUsable() {
        return ScmPhysicalDeviceOpStatus_NotUsable;
    }
    private static final int ScmPhysicalDeviceOpStatus_TransientError = (int)6L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS.ScmPhysicalDeviceOpStatus_TransientError = 6
     * }
     */
    public static int ScmPhysicalDeviceOpStatus_TransientError() {
        return ScmPhysicalDeviceOpStatus_TransientError;
    }
    private static final int ScmPhysicalDeviceOpStatus_Missing = (int)7L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS.ScmPhysicalDeviceOpStatus_Missing = 7
     * }
     */
    public static int ScmPhysicalDeviceOpStatus_Missing() {
        return ScmPhysicalDeviceOpStatus_Missing;
    }
    private static final int ScmPhysicalDeviceOpStatus_Max = (int)8L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS.ScmPhysicalDeviceOpStatus_Max = 8
     * }
     */
    public static int ScmPhysicalDeviceOpStatus_Max() {
        return ScmPhysicalDeviceOpStatus_Max;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _SCM_PD_OPERATIONAL_STATUS {
     *     ScmPhysicalDeviceOpStatus_Unknown = 0,
     *     ScmPhysicalDeviceOpStatus_Ok,
     *     ScmPhysicalDeviceOpStatus_PredictingFailure,
     *     ScmPhysicalDeviceOpStatus_InService,
     *     ScmPhysicalDeviceOpStatus_HardwareError,
     *     ScmPhysicalDeviceOpStatus_NotUsable,
     *     ScmPhysicalDeviceOpStatus_TransientError,
     *     ScmPhysicalDeviceOpStatus_Missing,
     *     ScmPhysicalDeviceOpStatus_Max
     * } *PSCM_PD_OPERATIONAL_STATUS
     * }
     */
    public static final AddressLayout PSCM_PD_OPERATIONAL_STATUS = C_POINTER;
    private static final int ScmPhysicalDeviceOpReason_Unknown = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS_REASON.ScmPhysicalDeviceOpReason_Unknown = 0
     * }
     */
    public static int ScmPhysicalDeviceOpReason_Unknown() {
        return ScmPhysicalDeviceOpReason_Unknown;
    }
    private static final int ScmPhysicalDeviceOpReason_Media = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS_REASON.ScmPhysicalDeviceOpReason_Media = 1
     * }
     */
    public static int ScmPhysicalDeviceOpReason_Media() {
        return ScmPhysicalDeviceOpReason_Media;
    }
    private static final int ScmPhysicalDeviceOpReason_ThresholdExceeded = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS_REASON.ScmPhysicalDeviceOpReason_ThresholdExceeded = 2
     * }
     */
    public static int ScmPhysicalDeviceOpReason_ThresholdExceeded() {
        return ScmPhysicalDeviceOpReason_ThresholdExceeded;
    }
    private static final int ScmPhysicalDeviceOpReason_LostData = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS_REASON.ScmPhysicalDeviceOpReason_LostData = 3
     * }
     */
    public static int ScmPhysicalDeviceOpReason_LostData() {
        return ScmPhysicalDeviceOpReason_LostData;
    }
    private static final int ScmPhysicalDeviceOpReason_EnergySource = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS_REASON.ScmPhysicalDeviceOpReason_EnergySource = 4
     * }
     */
    public static int ScmPhysicalDeviceOpReason_EnergySource() {
        return ScmPhysicalDeviceOpReason_EnergySource;
    }
    private static final int ScmPhysicalDeviceOpReason_Configuration = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS_REASON.ScmPhysicalDeviceOpReason_Configuration = 5
     * }
     */
    public static int ScmPhysicalDeviceOpReason_Configuration() {
        return ScmPhysicalDeviceOpReason_Configuration;
    }
    private static final int ScmPhysicalDeviceOpReason_DeviceController = (int)6L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS_REASON.ScmPhysicalDeviceOpReason_DeviceController = 6
     * }
     */
    public static int ScmPhysicalDeviceOpReason_DeviceController() {
        return ScmPhysicalDeviceOpReason_DeviceController;
    }
    private static final int ScmPhysicalDeviceOpReason_MediaController = (int)7L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS_REASON.ScmPhysicalDeviceOpReason_MediaController = 7
     * }
     */
    public static int ScmPhysicalDeviceOpReason_MediaController() {
        return ScmPhysicalDeviceOpReason_MediaController;
    }
    private static final int ScmPhysicalDeviceOpReason_Component = (int)8L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS_REASON.ScmPhysicalDeviceOpReason_Component = 8
     * }
     */
    public static int ScmPhysicalDeviceOpReason_Component() {
        return ScmPhysicalDeviceOpReason_Component;
    }
    private static final int ScmPhysicalDeviceOpReason_BackgroundOperation = (int)9L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS_REASON.ScmPhysicalDeviceOpReason_BackgroundOperation = 9
     * }
     */
    public static int ScmPhysicalDeviceOpReason_BackgroundOperation() {
        return ScmPhysicalDeviceOpReason_BackgroundOperation;
    }
    private static final int ScmPhysicalDeviceOpReason_InvalidFirmware = (int)10L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS_REASON.ScmPhysicalDeviceOpReason_InvalidFirmware = 10
     * }
     */
    public static int ScmPhysicalDeviceOpReason_InvalidFirmware() {
        return ScmPhysicalDeviceOpReason_InvalidFirmware;
    }
    private static final int ScmPhysicalDeviceOpReason_HealthCheck = (int)11L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS_REASON.ScmPhysicalDeviceOpReason_HealthCheck = 11
     * }
     */
    public static int ScmPhysicalDeviceOpReason_HealthCheck() {
        return ScmPhysicalDeviceOpReason_HealthCheck;
    }
    private static final int ScmPhysicalDeviceOpReason_LostDataPersistence = (int)12L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS_REASON.ScmPhysicalDeviceOpReason_LostDataPersistence = 12
     * }
     */
    public static int ScmPhysicalDeviceOpReason_LostDataPersistence() {
        return ScmPhysicalDeviceOpReason_LostDataPersistence;
    }
    private static final int ScmPhysicalDeviceOpReason_DisabledByPlatform = (int)13L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS_REASON.ScmPhysicalDeviceOpReason_DisabledByPlatform = 13
     * }
     */
    public static int ScmPhysicalDeviceOpReason_DisabledByPlatform() {
        return ScmPhysicalDeviceOpReason_DisabledByPlatform;
    }
    private static final int ScmPhysicalDeviceOpReason_PermanentError = (int)14L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS_REASON.ScmPhysicalDeviceOpReason_PermanentError = 14
     * }
     */
    public static int ScmPhysicalDeviceOpReason_PermanentError() {
        return ScmPhysicalDeviceOpReason_PermanentError;
    }
    private static final int ScmPhysicalDeviceOpReason_LostWritePersistence = (int)15L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS_REASON.ScmPhysicalDeviceOpReason_LostWritePersistence = 15
     * }
     */
    public static int ScmPhysicalDeviceOpReason_LostWritePersistence() {
        return ScmPhysicalDeviceOpReason_LostWritePersistence;
    }
    private static final int ScmPhysicalDeviceOpReason_FatalError = (int)16L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS_REASON.ScmPhysicalDeviceOpReason_FatalError = 16
     * }
     */
    public static int ScmPhysicalDeviceOpReason_FatalError() {
        return ScmPhysicalDeviceOpReason_FatalError;
    }
    private static final int ScmPhysicalDeviceOpReason_DataPersistenceLossImminent = (int)17L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS_REASON.ScmPhysicalDeviceOpReason_DataPersistenceLossImminent = 17
     * }
     */
    public static int ScmPhysicalDeviceOpReason_DataPersistenceLossImminent() {
        return ScmPhysicalDeviceOpReason_DataPersistenceLossImminent;
    }
    private static final int ScmPhysicalDeviceOpReason_WritePersistenceLossImminent = (int)18L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS_REASON.ScmPhysicalDeviceOpReason_WritePersistenceLossImminent = 18
     * }
     */
    public static int ScmPhysicalDeviceOpReason_WritePersistenceLossImminent() {
        return ScmPhysicalDeviceOpReason_WritePersistenceLossImminent;
    }
    private static final int ScmPhysicalDeviceOpReason_MediaRemainingSpareBlock = (int)19L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS_REASON.ScmPhysicalDeviceOpReason_MediaRemainingSpareBlock = 19
     * }
     */
    public static int ScmPhysicalDeviceOpReason_MediaRemainingSpareBlock() {
        return ScmPhysicalDeviceOpReason_MediaRemainingSpareBlock;
    }
    private static final int ScmPhysicalDeviceOpReason_PerformanceDegradation = (int)20L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS_REASON.ScmPhysicalDeviceOpReason_PerformanceDegradation = 20
     * }
     */
    public static int ScmPhysicalDeviceOpReason_PerformanceDegradation() {
        return ScmPhysicalDeviceOpReason_PerformanceDegradation;
    }
    private static final int ScmPhysicalDeviceOpReason_ExcessiveTemperature = (int)21L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS_REASON.ScmPhysicalDeviceOpReason_ExcessiveTemperature = 21
     * }
     */
    public static int ScmPhysicalDeviceOpReason_ExcessiveTemperature() {
        return ScmPhysicalDeviceOpReason_ExcessiveTemperature;
    }
    private static final int ScmPhysicalDeviceOpReason_InternalFailure = (int)22L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS_REASON.ScmPhysicalDeviceOpReason_InternalFailure = 22
     * }
     */
    public static int ScmPhysicalDeviceOpReason_InternalFailure() {
        return ScmPhysicalDeviceOpReason_InternalFailure;
    }
    private static final int ScmPhysicalDeviceOpReason_Max = (int)23L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS_REASON.ScmPhysicalDeviceOpReason_Max = 23
     * }
     */
    public static int ScmPhysicalDeviceOpReason_Max() {
        return ScmPhysicalDeviceOpReason_Max;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _SCM_PD_OPERATIONAL_STATUS_REASON {
     *     ScmPhysicalDeviceOpReason_Unknown = 0,
     *     ScmPhysicalDeviceOpReason_Media,
     *     ScmPhysicalDeviceOpReason_ThresholdExceeded,
     *     ScmPhysicalDeviceOpReason_LostData,
     *     ScmPhysicalDeviceOpReason_EnergySource,
     *     ScmPhysicalDeviceOpReason_Configuration,
     *     ScmPhysicalDeviceOpReason_DeviceController,
     *     ScmPhysicalDeviceOpReason_MediaController,
     *     ScmPhysicalDeviceOpReason_Component,
     *     ScmPhysicalDeviceOpReason_BackgroundOperation,
     *     ScmPhysicalDeviceOpReason_InvalidFirmware,
     *     ScmPhysicalDeviceOpReason_HealthCheck,
     *     ScmPhysicalDeviceOpReason_LostDataPersistence,
     *     ScmPhysicalDeviceOpReason_DisabledByPlatform,
     *     ScmPhysicalDeviceOpReason_PermanentError,
     *     ScmPhysicalDeviceOpReason_LostWritePersistence,
     *     ScmPhysicalDeviceOpReason_FatalError,
     *     ScmPhysicalDeviceOpReason_DataPersistenceLossImminent,
     *     ScmPhysicalDeviceOpReason_WritePersistenceLossImminent,
     *     ScmPhysicalDeviceOpReason_MediaRemainingSpareBlock,
     *     ScmPhysicalDeviceOpReason_PerformanceDegradation,
     *     ScmPhysicalDeviceOpReason_ExcessiveTemperature,
     *     ScmPhysicalDeviceOpReason_InternalFailure,
     *     ScmPhysicalDeviceOpReason_Max
     * } *PSCM_PD_OPERATIONAL_STATUS_REASON
     * }
     */
    public static final AddressLayout PSCM_PD_OPERATIONAL_STATUS_REASON = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_PD_MANAGEMENT_STATUS {
     *     DWORD Version;
     *     DWORD Size;
     *     SCM_PD_HEALTH_STATUS Health;
     *     DWORD NumberOfOperationalStatus;
     *     DWORD NumberOfAdditionalReasons;
     *     SCM_PD_OPERATIONAL_STATUS OperationalStatus[16];
     *     SCM_PD_OPERATIONAL_STATUS_REASON AdditionalReasons[1];
     * } *PSCM_PD_MANAGEMENT_STATUS
     * }
     */
    public static final AddressLayout PSCM_PD_MANAGEMENT_STATUS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_PD_LOCATION_STRING {
     *     DWORD Version;
     *     DWORD Size;
     *     WCHAR Location[1];
     * } *PSCM_PD_LOCATION_STRING
     * }
     */
    public static final AddressLayout PSCM_PD_LOCATION_STRING = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_PD_FRU_ID_STRING {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD IdentifierSize;
     *     BYTE Identifier[1];
     * } *PSCM_PD_FRU_ID_STRING
     * }
     */
    public static final AddressLayout PSCM_PD_FRU_ID_STRING = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_PD_FIRMWARE_DOWNLOAD {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD Flags;
     *     BYTE Slot;
     *     BYTE Reserved[3];
     *     DWORD64 Offset;
     *     DWORD FirmwareImageSizeInBytes;
     *     BYTE FirmwareImage[1];
     * } *PSCM_PD_FIRMWARE_DOWNLOAD
     * }
     */
    public static final AddressLayout PSCM_PD_FIRMWARE_DOWNLOAD = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_PD_FIRMWARE_ACTIVATE {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD Flags;
     *     BYTE Slot;
     * } *PSCM_PD_FIRMWARE_ACTIVATE
     * }
     */
    public static final AddressLayout PSCM_PD_FIRMWARE_ACTIVATE = C_POINTER;
    private static final int ScmPdLastFwActivationStatus_None = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_LAST_FW_ACTIVATION_STATUS.ScmPdLastFwActivationStatus_None = 0
     * }
     */
    public static int ScmPdLastFwActivationStatus_None() {
        return ScmPdLastFwActivationStatus_None;
    }
    private static final int ScmPdLastFwActivationStatus_Success = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_LAST_FW_ACTIVATION_STATUS.ScmPdLastFwActivationStatus_Success = 1
     * }
     */
    public static int ScmPdLastFwActivationStatus_Success() {
        return ScmPdLastFwActivationStatus_Success;
    }
    private static final int ScmPdLastFwActivationStatus_FwNotFound = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_LAST_FW_ACTIVATION_STATUS.ScmPdLastFwActivationStatus_FwNotFound = 2
     * }
     */
    public static int ScmPdLastFwActivationStatus_FwNotFound() {
        return ScmPdLastFwActivationStatus_FwNotFound;
    }
    private static final int ScmPdLastFwActivationStatus_ColdRebootRequired = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_LAST_FW_ACTIVATION_STATUS.ScmPdLastFwActivationStatus_ColdRebootRequired = 3
     * }
     */
    public static int ScmPdLastFwActivationStatus_ColdRebootRequired() {
        return ScmPdLastFwActivationStatus_ColdRebootRequired;
    }
    private static final int ScmPdLastFwActivaitonStatus_ActivationInProgress = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_LAST_FW_ACTIVATION_STATUS.ScmPdLastFwActivaitonStatus_ActivationInProgress = 4
     * }
     */
    public static int ScmPdLastFwActivaitonStatus_ActivationInProgress() {
        return ScmPdLastFwActivaitonStatus_ActivationInProgress;
    }
    private static final int ScmPdLastFwActivaitonStatus_Retry = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_LAST_FW_ACTIVATION_STATUS.ScmPdLastFwActivaitonStatus_Retry = 5
     * }
     */
    public static int ScmPdLastFwActivaitonStatus_Retry() {
        return ScmPdLastFwActivaitonStatus_Retry;
    }
    private static final int ScmPdLastFwActivaitonStatus_FwUnsupported = (int)6L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_LAST_FW_ACTIVATION_STATUS.ScmPdLastFwActivaitonStatus_FwUnsupported = 6
     * }
     */
    public static int ScmPdLastFwActivaitonStatus_FwUnsupported() {
        return ScmPdLastFwActivaitonStatus_FwUnsupported;
    }
    private static final int ScmPdLastFwActivaitonStatus_UnknownError = (int)7L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_LAST_FW_ACTIVATION_STATUS.ScmPdLastFwActivaitonStatus_UnknownError = 7
     * }
     */
    public static int ScmPdLastFwActivaitonStatus_UnknownError() {
        return ScmPdLastFwActivaitonStatus_UnknownError;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _SCM_PD_LAST_FW_ACTIVATION_STATUS {
     *     ScmPdLastFwActivationStatus_None = 0,
     *     ScmPdLastFwActivationStatus_Success = 1,
     *     ScmPdLastFwActivationStatus_FwNotFound = 2,
     *     ScmPdLastFwActivationStatus_ColdRebootRequired = 3,
     *     ScmPdLastFwActivaitonStatus_ActivationInProgress = 4,
     *     ScmPdLastFwActivaitonStatus_Retry = 5,
     *     ScmPdLastFwActivaitonStatus_FwUnsupported = 6,
     *     ScmPdLastFwActivaitonStatus_UnknownError = 7
     * } *PSCM_PD_LAST_FW_ACTIVATION_STATUS
     * }
     */
    public static final AddressLayout PSCM_PD_LAST_FW_ACTIVATION_STATUS = C_POINTER;
    private static final int ScmPdFirmwareActivationState_Idle = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_FIRMWARE_ACTIVATION_STATE.ScmPdFirmwareActivationState_Idle = 0
     * }
     */
    public static int ScmPdFirmwareActivationState_Idle() {
        return ScmPdFirmwareActivationState_Idle;
    }
    private static final int ScmPdFirmwareActivationState_Armed = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_FIRMWARE_ACTIVATION_STATE.ScmPdFirmwareActivationState_Armed = 1
     * }
     */
    public static int ScmPdFirmwareActivationState_Armed() {
        return ScmPdFirmwareActivationState_Armed;
    }
    private static final int ScmPdFirmwareActivationState_Busy = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_FIRMWARE_ACTIVATION_STATE.ScmPdFirmwareActivationState_Busy = 2
     * }
     */
    public static int ScmPdFirmwareActivationState_Busy() {
        return ScmPdFirmwareActivationState_Busy;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _SCM_PD_FIRMWARE_ACTIVATION_STATE {
     *     ScmPdFirmwareActivationState_Idle = 0,
     *     ScmPdFirmwareActivationState_Armed = 1,
     *     ScmPdFirmwareActivationState_Busy = 2
     * } *PSCM_PD_FIRMWARE_ACTIVATION_STATE
     * }
     */
    public static final AddressLayout PSCM_PD_FIRMWARE_ACTIVATION_STATE = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_PD_RUNTIME_FW_ACTIVATION_INFO {
     *     DWORD Version;
     *     DWORD Size;
     *     SCM_PD_LAST_FW_ACTIVATION_STATUS LastFirmwareActivationStatus;
     *     SCM_PD_FIRMWARE_ACTIVATION_STATE FirmwareActivationState;
     * } *PSCM_PD_RUNTIME_FW_ACTIVATION_INFO
     * }
     */
    public static final AddressLayout PSCM_PD_RUNTIME_FW_ACTIVATION_INFO = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_PD_PASSTHROUGH_INPUT {
     *     DWORD Version;
     *     DWORD Size;
     *     GUID ProtocolGuid;
     *     DWORD DataSize;
     *     BYTE Data[1];
     * } *PSCM_PD_PASSTHROUGH_INPUT
     * }
     */
    public static final AddressLayout PSCM_PD_PASSTHROUGH_INPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_PD_PASSTHROUGH_OUTPUT {
     *     DWORD Version;
     *     DWORD Size;
     *     GUID ProtocolGuid;
     *     DWORD DataSize;
     *     BYTE Data[1];
     * } *PSCM_PD_PASSTHROUGH_OUTPUT
     * }
     */
    public static final AddressLayout PSCM_PD_PASSTHROUGH_OUTPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_PD_PASSTHROUGH_INVDIMM_INPUT {
     *     DWORD Opcode;
     *     DWORD OpcodeParametersLength;
     *     BYTE OpcodeParameters[1];
     * } *PSCM_PD_PASSTHROUGH_INVDIMM_INPUT
     * }
     */
    public static final AddressLayout PSCM_PD_PASSTHROUGH_INVDIMM_INPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT {
     *     WORD GeneralStatus;
     *     WORD ExtendedStatus;
     *     DWORD OutputDataLength;
     *     BYTE OutputData[1];
     * } *PSCM_PD_PASSTHROUGH_INVDIMM_OUTPUT
     * }
     */
    public static final AddressLayout PSCM_PD_PASSTHROUGH_INVDIMM_OUTPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_PD_REINITIALIZE_MEDIA_INPUT {
     *     DWORD Version;
     *     DWORD Size;
     *     struct {
     *         DWORD Overwrite : 1;
     *     } Options;
     * } *PSCM_PD_REINITIALIZE_MEDIA_INPUT
     * }
     */
    public static final AddressLayout PSCM_PD_REINITIALIZE_MEDIA_INPUT = C_POINTER;
    private static final int ScmPhysicalDeviceReinit_Success = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_MEDIA_REINITIALIZATION_STATUS.ScmPhysicalDeviceReinit_Success = 0
     * }
     */
    public static int ScmPhysicalDeviceReinit_Success() {
        return ScmPhysicalDeviceReinit_Success;
    }
    private static final int ScmPhysicalDeviceReinit_RebootNeeded = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_MEDIA_REINITIALIZATION_STATUS.ScmPhysicalDeviceReinit_RebootNeeded = 1
     * }
     */
    public static int ScmPhysicalDeviceReinit_RebootNeeded() {
        return ScmPhysicalDeviceReinit_RebootNeeded;
    }
    private static final int ScmPhysicalDeviceReinit_ColdBootNeeded = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_MEDIA_REINITIALIZATION_STATUS.ScmPhysicalDeviceReinit_ColdBootNeeded = 2
     * }
     */
    public static int ScmPhysicalDeviceReinit_ColdBootNeeded() {
        return ScmPhysicalDeviceReinit_ColdBootNeeded;
    }
    private static final int ScmPhysicalDeviceReinit_Max = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_MEDIA_REINITIALIZATION_STATUS.ScmPhysicalDeviceReinit_Max = 3
     * }
     */
    public static int ScmPhysicalDeviceReinit_Max() {
        return ScmPhysicalDeviceReinit_Max;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _SCM_PD_MEDIA_REINITIALIZATION_STATUS {
     *     ScmPhysicalDeviceReinit_Success = 0,
     *     ScmPhysicalDeviceReinit_RebootNeeded,
     *     ScmPhysicalDeviceReinit_ColdBootNeeded,
     *     ScmPhysicalDeviceReinit_Max
     * } *PSCM_PD_MEDIA_REINITIALIZATION_STATUS
     * }
     */
    public static final AddressLayout PSCM_PD_MEDIA_REINITIALIZATION_STATUS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_PD_REINITIALIZE_MEDIA_OUTPUT {
     *     DWORD Version;
     *     DWORD Size;
     *     SCM_PD_MEDIA_REINITIALIZATION_STATUS Status;
     * } *PSCM_PD_REINITIALIZE_MEDIA_OUTPUT
     * }
     */
    public static final AddressLayout PSCM_PD_REINITIALIZE_MEDIA_OUTPUT = C_POINTER;
    private static final int Unknown = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _MEDIA_TYPE.Unknown = 0
     * }
     */
    public static int Unknown() {
        return Unknown;
    }
    private static final int F5_1Pt2_512 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _MEDIA_TYPE.F5_1Pt2_512 = 1
     * }
     */
    public static int F5_1Pt2_512() {
        return F5_1Pt2_512;
    }
    private static final int F3_1Pt44_512 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _MEDIA_TYPE.F3_1Pt44_512 = 2
     * }
     */
    public static int F3_1Pt44_512() {
        return F3_1Pt44_512;
    }
    private static final int F3_2Pt88_512 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _MEDIA_TYPE.F3_2Pt88_512 = 3
     * }
     */
    public static int F3_2Pt88_512() {
        return F3_2Pt88_512;
    }
    private static final int F3_20Pt8_512 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _MEDIA_TYPE.F3_20Pt8_512 = 4
     * }
     */
    public static int F3_20Pt8_512() {
        return F3_20Pt8_512;
    }
    private static final int F3_720_512 = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _MEDIA_TYPE.F3_720_512 = 5
     * }
     */
    public static int F3_720_512() {
        return F3_720_512;
    }
    private static final int F5_360_512 = (int)6L;
    /**
     * {@snippet lang=c :
     * enum _MEDIA_TYPE.F5_360_512 = 6
     * }
     */
    public static int F5_360_512() {
        return F5_360_512;
    }
    private static final int F5_320_512 = (int)7L;
    /**
     * {@snippet lang=c :
     * enum _MEDIA_TYPE.F5_320_512 = 7
     * }
     */
    public static int F5_320_512() {
        return F5_320_512;
    }
    private static final int F5_320_1024 = (int)8L;
    /**
     * {@snippet lang=c :
     * enum _MEDIA_TYPE.F5_320_1024 = 8
     * }
     */
    public static int F5_320_1024() {
        return F5_320_1024;
    }
    private static final int F5_180_512 = (int)9L;
    /**
     * {@snippet lang=c :
     * enum _MEDIA_TYPE.F5_180_512 = 9
     * }
     */
    public static int F5_180_512() {
        return F5_180_512;
    }
    private static final int F5_160_512 = (int)10L;
    /**
     * {@snippet lang=c :
     * enum _MEDIA_TYPE.F5_160_512 = 10
     * }
     */
    public static int F5_160_512() {
        return F5_160_512;
    }
    private static final int RemovableMedia = (int)11L;
    /**
     * {@snippet lang=c :
     * enum _MEDIA_TYPE.RemovableMedia = 11
     * }
     */
    public static int RemovableMedia() {
        return RemovableMedia;
    }
    private static final int FixedMedia = (int)12L;
    /**
     * {@snippet lang=c :
     * enum _MEDIA_TYPE.FixedMedia = 12
     * }
     */
    public static int FixedMedia() {
        return FixedMedia;
    }
    private static final int F3_120M_512 = (int)13L;
    /**
     * {@snippet lang=c :
     * enum _MEDIA_TYPE.F3_120M_512 = 13
     * }
     */
    public static int F3_120M_512() {
        return F3_120M_512;
    }
    private static final int F3_640_512 = (int)14L;
    /**
     * {@snippet lang=c :
     * enum _MEDIA_TYPE.F3_640_512 = 14
     * }
     */
    public static int F3_640_512() {
        return F3_640_512;
    }
    private static final int F5_640_512 = (int)15L;
    /**
     * {@snippet lang=c :
     * enum _MEDIA_TYPE.F5_640_512 = 15
     * }
     */
    public static int F5_640_512() {
        return F5_640_512;
    }
    private static final int F5_720_512 = (int)16L;
    /**
     * {@snippet lang=c :
     * enum _MEDIA_TYPE.F5_720_512 = 16
     * }
     */
    public static int F5_720_512() {
        return F5_720_512;
    }
    private static final int F3_1Pt2_512 = (int)17L;
    /**
     * {@snippet lang=c :
     * enum _MEDIA_TYPE.F3_1Pt2_512 = 17
     * }
     */
    public static int F3_1Pt2_512() {
        return F3_1Pt2_512;
    }
    private static final int F3_1Pt23_1024 = (int)18L;
    /**
     * {@snippet lang=c :
     * enum _MEDIA_TYPE.F3_1Pt23_1024 = 18
     * }
     */
    public static int F3_1Pt23_1024() {
        return F3_1Pt23_1024;
    }
    private static final int F5_1Pt23_1024 = (int)19L;
    /**
     * {@snippet lang=c :
     * enum _MEDIA_TYPE.F5_1Pt23_1024 = 19
     * }
     */
    public static int F5_1Pt23_1024() {
        return F5_1Pt23_1024;
    }
    private static final int F3_128Mb_512 = (int)20L;
    /**
     * {@snippet lang=c :
     * enum _MEDIA_TYPE.F3_128Mb_512 = 20
     * }
     */
    public static int F3_128Mb_512() {
        return F3_128Mb_512;
    }
    private static final int F3_230Mb_512 = (int)21L;
    /**
     * {@snippet lang=c :
     * enum _MEDIA_TYPE.F3_230Mb_512 = 21
     * }
     */
    public static int F3_230Mb_512() {
        return F3_230Mb_512;
    }
    private static final int F8_256_128 = (int)22L;
    /**
     * {@snippet lang=c :
     * enum _MEDIA_TYPE.F8_256_128 = 22
     * }
     */
    public static int F8_256_128() {
        return F8_256_128;
    }
    private static final int F3_200Mb_512 = (int)23L;
    /**
     * {@snippet lang=c :
     * enum _MEDIA_TYPE.F3_200Mb_512 = 23
     * }
     */
    public static int F3_200Mb_512() {
        return F3_200Mb_512;
    }
    private static final int F3_240M_512 = (int)24L;
    /**
     * {@snippet lang=c :
     * enum _MEDIA_TYPE.F3_240M_512 = 24
     * }
     */
    public static int F3_240M_512() {
        return F3_240M_512;
    }
    private static final int F3_32M_512 = (int)25L;
    /**
     * {@snippet lang=c :
     * enum _MEDIA_TYPE.F3_32M_512 = 25
     * }
     */
    public static int F3_32M_512() {
        return F3_32M_512;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _MEDIA_TYPE {
     *     Unknown,
     *     F5_1Pt2_512,
     *     F3_1Pt44_512,
     *     F3_2Pt88_512,
     *     F3_20Pt8_512,
     *     F3_720_512,
     *     F5_360_512,
     *     F5_320_512,
     *     F5_320_1024,
     *     F5_180_512,
     *     F5_160_512,
     *     RemovableMedia,
     *     FixedMedia,
     *     F3_120M_512,
     *     F3_640_512,
     *     F5_640_512,
     *     F5_720_512,
     *     F3_1Pt2_512,
     *     F3_1Pt23_1024,
     *     F5_1Pt23_1024,
     *     F3_128Mb_512,
     *     F3_230Mb_512,
     *     F8_256_128,
     *     F3_200Mb_512,
     *     F3_240M_512,
     *     F3_32M_512
     * } *PMEDIA_TYPE
     * }
     */
    public static final AddressLayout PMEDIA_TYPE = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FORMAT_PARAMETERS {
     *     MEDIA_TYPE MediaType;
     *     DWORD StartCylinderNumber;
     *     DWORD EndCylinderNumber;
     *     DWORD StartHeadNumber;
     *     DWORD EndHeadNumber;
     * } *PFORMAT_PARAMETERS
     * }
     */
    public static final AddressLayout PFORMAT_PARAMETERS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef WORD BAD_TRACK_NUMBER
     * }
     */
    public static final OfShort BAD_TRACK_NUMBER = C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef WORD *PBAD_TRACK_NUMBER
     * }
     */
    public static final AddressLayout PBAD_TRACK_NUMBER = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FORMAT_EX_PARAMETERS {
     *     MEDIA_TYPE MediaType;
     *     DWORD StartCylinderNumber;
     *     DWORD EndCylinderNumber;
     *     DWORD StartHeadNumber;
     *     DWORD EndHeadNumber;
     *     WORD FormatGapLength;
     *     WORD SectorsPerTrack;
     *     WORD SectorNumber[1];
     * } *PFORMAT_EX_PARAMETERS
     * }
     */
    public static final AddressLayout PFORMAT_EX_PARAMETERS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DISK_GEOMETRY {
     *     LARGE_INTEGER Cylinders;
     *     MEDIA_TYPE MediaType;
     *     DWORD TracksPerCylinder;
     *     DWORD SectorsPerTrack;
     *     DWORD BytesPerSector;
     * } *PDISK_GEOMETRY
     * }
     */
    public static final AddressLayout PDISK_GEOMETRY = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PARTITION_INFORMATION {
     *     LARGE_INTEGER StartingOffset;
     *     LARGE_INTEGER PartitionLength;
     *     DWORD HiddenSectors;
     *     DWORD PartitionNumber;
     *     BYTE PartitionType;
     *     BOOLEAN BootIndicator;
     *     BOOLEAN RecognizedPartition;
     *     BOOLEAN RewritePartition;
     * } *PPARTITION_INFORMATION
     * }
     */
    public static final AddressLayout PPARTITION_INFORMATION = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SET_PARTITION_INFORMATION {
     *     BYTE PartitionType;
     * } *PSET_PARTITION_INFORMATION
     * }
     */
    public static final AddressLayout PSET_PARTITION_INFORMATION = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVE_LAYOUT_INFORMATION {
     *     DWORD PartitionCount;
     *     DWORD Signature;
     *     PARTITION_INFORMATION PartitionEntry[1];
     * } *PDRIVE_LAYOUT_INFORMATION
     * }
     */
    public static final AddressLayout PDRIVE_LAYOUT_INFORMATION = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _VERIFY_INFORMATION {
     *     LARGE_INTEGER StartingOffset;
     *     DWORD Length;
     * } *PVERIFY_INFORMATION
     * }
     */
    public static final AddressLayout PVERIFY_INFORMATION = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _REASSIGN_BLOCKS {
     *     WORD Reserved;
     *     WORD Count;
     *     DWORD BlockNumber[1];
     * } *PREASSIGN_BLOCKS
     * }
     */
    public static final AddressLayout PREASSIGN_BLOCKS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _REASSIGN_BLOCKS_EX {
     *     WORD Reserved;
     *     WORD Count;
     *     LARGE_INTEGER BlockNumber[1];
     * } *PREASSIGN_BLOCKS_EX
     * }
     */
    public static final AddressLayout PREASSIGN_BLOCKS_EX = C_POINTER;
    private static final int PARTITION_STYLE_MBR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _PARTITION_STYLE.PARTITION_STYLE_MBR = 0
     * }
     */
    public static int PARTITION_STYLE_MBR() {
        return PARTITION_STYLE_MBR;
    }
    private static final int PARTITION_STYLE_GPT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _PARTITION_STYLE.PARTITION_STYLE_GPT = 1
     * }
     */
    public static int PARTITION_STYLE_GPT() {
        return PARTITION_STYLE_GPT;
    }
    private static final int PARTITION_STYLE_RAW = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _PARTITION_STYLE.PARTITION_STYLE_RAW = 2
     * }
     */
    public static int PARTITION_STYLE_RAW() {
        return PARTITION_STYLE_RAW;
    }
    /**
     * {@snippet lang=c :
     * typedef struct _PARTITION_INFORMATION_GPT {
     *     GUID PartitionType;
     *     GUID PartitionId;
     *     DWORD64 Attributes;
     *     WCHAR Name[36];
     * } *PPARTITION_INFORMATION_GPT
     * }
     */
    public static final AddressLayout PPARTITION_INFORMATION_GPT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PARTITION_INFORMATION_MBR {
     *     BYTE PartitionType;
     *     BOOLEAN BootIndicator;
     *     BOOLEAN RecognizedPartition;
     *     DWORD HiddenSectors;
     *     GUID PartitionId;
     * } *PPARTITION_INFORMATION_MBR
     * }
     */
    public static final AddressLayout PPARTITION_INFORMATION_MBR = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SET_PARTITION_INFORMATION_EX {
     *     PARTITION_STYLE PartitionStyle;
     *     union {
     *         SET_PARTITION_INFORMATION_MBR Mbr;
     *         SET_PARTITION_INFORMATION_GPT Gpt;
     *     };
     * } *PSET_PARTITION_INFORMATION_EX
     * }
     */
    public static final AddressLayout PSET_PARTITION_INFORMATION_EX = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CREATE_DISK_GPT {
     *     GUID DiskId;
     *     DWORD MaxPartitionCount;
     * } *PCREATE_DISK_GPT
     * }
     */
    public static final AddressLayout PCREATE_DISK_GPT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CREATE_DISK_MBR {
     *     DWORD Signature;
     * } *PCREATE_DISK_MBR
     * }
     */
    public static final AddressLayout PCREATE_DISK_MBR = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CREATE_DISK {
     *     PARTITION_STYLE PartitionStyle;
     *     union {
     *         CREATE_DISK_MBR Mbr;
     *         CREATE_DISK_GPT Gpt;
     *     };
     * } *PCREATE_DISK
     * }
     */
    public static final AddressLayout PCREATE_DISK = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _GET_LENGTH_INFORMATION {
     *     LARGE_INTEGER Length;
     * } *PGET_LENGTH_INFORMATION
     * }
     */
    public static final AddressLayout PGET_LENGTH_INFORMATION = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PARTITION_INFORMATION_EX {
     *     PARTITION_STYLE PartitionStyle;
     *     LARGE_INTEGER StartingOffset;
     *     LARGE_INTEGER PartitionLength;
     *     DWORD PartitionNumber;
     *     BOOLEAN RewritePartition;
     *     BOOLEAN IsServicePartition;
     *     union {
     *         PARTITION_INFORMATION_MBR Mbr;
     *         PARTITION_INFORMATION_GPT Gpt;
     *     };
     * } *PPARTITION_INFORMATION_EX
     * }
     */
    public static final AddressLayout PPARTITION_INFORMATION_EX = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVE_LAYOUT_INFORMATION_GPT {
     *     GUID DiskId;
     *     LARGE_INTEGER StartingUsableOffset;
     *     LARGE_INTEGER UsableLength;
     *     DWORD MaxPartitionCount;
     * } *PDRIVE_LAYOUT_INFORMATION_GPT
     * }
     */
    public static final AddressLayout PDRIVE_LAYOUT_INFORMATION_GPT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVE_LAYOUT_INFORMATION_MBR {
     *     DWORD Signature;
     *     DWORD CheckSum;
     * } *PDRIVE_LAYOUT_INFORMATION_MBR
     * }
     */
    public static final AddressLayout PDRIVE_LAYOUT_INFORMATION_MBR = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVE_LAYOUT_INFORMATION_EX {
     *     DWORD PartitionStyle;
     *     DWORD PartitionCount;
     *     union {
     *         DRIVE_LAYOUT_INFORMATION_MBR Mbr;
     *         DRIVE_LAYOUT_INFORMATION_GPT Gpt;
     *     };
     *     PARTITION_INFORMATION_EX PartitionEntry[1];
     * } *PDRIVE_LAYOUT_INFORMATION_EX
     * }
     */
    public static final AddressLayout PDRIVE_LAYOUT_INFORMATION_EX = C_POINTER;
    private static final int DetectNone = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _DETECTION_TYPE.DetectNone = 0
     * }
     */
    public static int DetectNone() {
        return DetectNone;
    }
    private static final int DetectInt13 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _DETECTION_TYPE.DetectInt13 = 1
     * }
     */
    public static int DetectInt13() {
        return DetectInt13;
    }
    private static final int DetectExInt13 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _DETECTION_TYPE.DetectExInt13 = 2
     * }
     */
    public static int DetectExInt13() {
        return DetectExInt13;
    }
    /**
     * {@snippet lang=c :
     * typedef struct _DISK_INT13_INFO {
     *     WORD DriveSelect;
     *     DWORD MaxCylinders;
     *     WORD SectorsPerTrack;
     *     WORD MaxHeads;
     *     WORD NumberDrives;
     * } *PDISK_INT13_INFO
     * }
     */
    public static final AddressLayout PDISK_INT13_INFO = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DISK_EX_INT13_INFO {
     *     WORD ExBufferSize;
     *     WORD ExFlags;
     *     DWORD ExCylinders;
     *     DWORD ExHeads;
     *     DWORD ExSectorsPerTrack;
     *     DWORD64 ExSectorsPerDrive;
     *     WORD ExSectorSize;
     *     WORD ExReserved;
     * } *PDISK_EX_INT13_INFO
     * }
     */
    public static final AddressLayout PDISK_EX_INT13_INFO = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DISK_DETECTION_INFO {
     *     DWORD SizeOfDetectInfo;
     *     DETECTION_TYPE DetectionType;
     *     union {
     *         struct {
     *             DISK_INT13_INFO Int13;
     *             DISK_EX_INT13_INFO ExInt13;
     *         };
     *     };
     * } *PDISK_DETECTION_INFO
     * }
     */
    public static final AddressLayout PDISK_DETECTION_INFO = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DISK_PARTITION_INFO {
     *     DWORD SizeOfPartitionInfo;
     *     PARTITION_STYLE PartitionStyle;
     *     union {
     *         struct {
     *             DWORD Signature;
     *             DWORD CheckSum;
     *         } Mbr;
     *         struct {
     *             GUID DiskId;
     *         } Gpt;
     *     };
     * } *PDISK_PARTITION_INFO
     * }
     */
    public static final AddressLayout PDISK_PARTITION_INFO = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DISK_GEOMETRY_EX {
     *     DISK_GEOMETRY Geometry;
     *     LARGE_INTEGER DiskSize;
     *     BYTE Data[1];
     * } *PDISK_GEOMETRY_EX
     * }
     */
    public static final AddressLayout PDISK_GEOMETRY_EX = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DISK_CONTROLLER_NUMBER {
     *     DWORD ControllerNumber;
     *     DWORD DiskNumber;
     * } *PDISK_CONTROLLER_NUMBER
     * }
     */
    public static final AddressLayout PDISK_CONTROLLER_NUMBER = C_POINTER;
    private static final int EqualPriority = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.EqualPriority = 0
     * }
     */
    public static int EqualPriority() {
        return EqualPriority;
    }
    private static final int KeepPrefetchedData = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.KeepPrefetchedData = 1
     * }
     */
    public static int KeepPrefetchedData() {
        return KeepPrefetchedData;
    }
    private static final int KeepReadData = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.KeepReadData = 2
     * }
     */
    public static int KeepReadData() {
        return KeepReadData;
    }
    /**
     * {@snippet lang=c :
     * typedef struct _DISK_CACHE_INFORMATION {
     *     BOOLEAN ParametersSavable;
     *     BOOLEAN ReadCacheEnabled;
     *     BOOLEAN WriteCacheEnabled;
     *     DISK_CACHE_RETENTION_PRIORITY ReadRetentionPriority;
     *     DISK_CACHE_RETENTION_PRIORITY WriteRetentionPriority;
     *     WORD DisablePrefetchTransferLength;
     *     BOOLEAN PrefetchScalar;
     *     union {
     *         struct {
     *             WORD Minimum;
     *             WORD Maximum;
     *             WORD MaximumBlocks;
     *         } ScalarPrefetch;
     *         struct {
     *             WORD Minimum;
     *             WORD Maximum;
     *         } BlockPrefetch;
     *     };
     * } *PDISK_CACHE_INFORMATION
     * }
     */
    public static final AddressLayout PDISK_CACHE_INFORMATION = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DISK_GROW_PARTITION {
     *     DWORD PartitionNumber;
     *     LARGE_INTEGER BytesToGrow;
     * } *PDISK_GROW_PARTITION
     * }
     */
    public static final AddressLayout PDISK_GROW_PARTITION = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _HISTOGRAM_BUCKET {
     *     DWORD Reads;
     *     DWORD Writes;
     * } *PHISTOGRAM_BUCKET
     * }
     */
    public static final AddressLayout PHISTOGRAM_BUCKET = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DISK_HISTOGRAM {
     *     LARGE_INTEGER DiskSize;
     *     LARGE_INTEGER Start;
     *     LARGE_INTEGER End;
     *     LARGE_INTEGER Average;
     *     LARGE_INTEGER AverageRead;
     *     LARGE_INTEGER AverageWrite;
     *     DWORD Granularity;
     *     DWORD Size;
     *     DWORD ReadCount;
     *     DWORD WriteCount;
     *     PHISTOGRAM_BUCKET Histogram;
     * } *PDISK_HISTOGRAM
     * }
     */
    public static final AddressLayout PDISK_HISTOGRAM = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DISK_PERFORMANCE {
     *     LARGE_INTEGER BytesRead;
     *     LARGE_INTEGER BytesWritten;
     *     LARGE_INTEGER ReadTime;
     *     LARGE_INTEGER WriteTime;
     *     LARGE_INTEGER IdleTime;
     *     DWORD ReadCount;
     *     DWORD WriteCount;
     *     DWORD QueueDepth;
     *     DWORD SplitCount;
     *     LARGE_INTEGER QueryTime;
     *     DWORD StorageDeviceNumber;
     *     WCHAR StorageManagerName[8];
     * } *PDISK_PERFORMANCE
     * }
     */
    public static final AddressLayout PDISK_PERFORMANCE = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DISK_RECORD {
     *     LARGE_INTEGER ByteOffset;
     *     LARGE_INTEGER StartTime;
     *     LARGE_INTEGER EndTime;
     *     PVOID VirtualAddress;
     *     DWORD NumberOfBytes;
     *     BYTE DeviceNumber;
     *     BOOLEAN ReadRequest;
     * } *PDISK_RECORD
     * }
     */
    public static final AddressLayout PDISK_RECORD = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DISK_LOGGING {
     *     BYTE Function;
     *     PVOID BufferAddress;
     *     DWORD BufferSize;
     * } *PDISK_LOGGING
     * }
     */
    public static final AddressLayout PDISK_LOGGING = C_POINTER;
    private static final int RequestSize = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _BIN_TYPES.RequestSize = 0
     * }
     */
    public static int RequestSize() {
        return RequestSize;
    }
    private static final int RequestLocation = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _BIN_TYPES.RequestLocation = 1
     * }
     */
    public static int RequestLocation() {
        return RequestLocation;
    }
    /**
     * {@snippet lang=c :
     * typedef struct _BIN_RANGE {
     *     LARGE_INTEGER StartValue;
     *     LARGE_INTEGER Length;
     * } *PBIN_RANGE
     * }
     */
    public static final AddressLayout PBIN_RANGE = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PERF_BIN {
     *     DWORD NumberOfBins;
     *     DWORD TypeOfBin;
     *     BIN_RANGE BinsRanges[1];
     * } *PPERF_BIN
     * }
     */
    public static final AddressLayout PPERF_BIN = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _BIN_COUNT {
     *     BIN_RANGE BinRange;
     *     DWORD BinCount;
     * } *PBIN_COUNT
     * }
     */
    public static final AddressLayout PBIN_COUNT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _BIN_RESULTS {
     *     DWORD NumberOfBins;
     *     BIN_COUNT BinCounts[1];
     * } *PBIN_RESULTS
     * }
     */
    public static final AddressLayout PBIN_RESULTS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _GETVERSIONINPARAMS {
     *     BYTE bVersion;
     *     BYTE bRevision;
     *     BYTE bReserved;
     *     BYTE bIDEDeviceMap;
     *     DWORD fCapabilities;
     *     DWORD dwReserved[4];
     * } *PGETVERSIONINPARAMS
     * }
     */
    public static final AddressLayout PGETVERSIONINPARAMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _GETVERSIONINPARAMS {
     *     BYTE bVersion;
     *     BYTE bRevision;
     *     BYTE bReserved;
     *     BYTE bIDEDeviceMap;
     *     DWORD fCapabilities;
     *     DWORD dwReserved[4];
     * } *LPGETVERSIONINPARAMS
     * }
     */
    public static final AddressLayout LPGETVERSIONINPARAMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _IDEREGS {
     *     BYTE bFeaturesReg;
     *     BYTE bSectorCountReg;
     *     BYTE bSectorNumberReg;
     *     BYTE bCylLowReg;
     *     BYTE bCylHighReg;
     *     BYTE bDriveHeadReg;
     *     BYTE bCommandReg;
     *     BYTE bReserved;
     * } *PIDEREGS
     * }
     */
    public static final AddressLayout PIDEREGS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _IDEREGS {
     *     BYTE bFeaturesReg;
     *     BYTE bSectorCountReg;
     *     BYTE bSectorNumberReg;
     *     BYTE bCylLowReg;
     *     BYTE bCylHighReg;
     *     BYTE bDriveHeadReg;
     *     BYTE bCommandReg;
     *     BYTE bReserved;
     * } *LPIDEREGS
     * }
     */
    public static final AddressLayout LPIDEREGS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SENDCMDINPARAMS {
     *     DWORD cBufferSize;
     *     IDEREGS irDriveRegs;
     *     BYTE bDriveNumber;
     *     BYTE bReserved[3];
     *     DWORD dwReserved[4];
     *     BYTE bBuffer[1];
     * } *PSENDCMDINPARAMS
     * }
     */
    public static final AddressLayout PSENDCMDINPARAMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SENDCMDINPARAMS {
     *     DWORD cBufferSize;
     *     IDEREGS irDriveRegs;
     *     BYTE bDriveNumber;
     *     BYTE bReserved[3];
     *     DWORD dwReserved[4];
     *     BYTE bBuffer[1];
     * } *LPSENDCMDINPARAMS
     * }
     */
    public static final AddressLayout LPSENDCMDINPARAMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVERSTATUS {
     *     BYTE bDriverError;
     *     BYTE bIDEError;
     *     BYTE bReserved[2];
     *     DWORD dwReserved[2];
     * } *PDRIVERSTATUS
     * }
     */
    public static final AddressLayout PDRIVERSTATUS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVERSTATUS {
     *     BYTE bDriverError;
     *     BYTE bIDEError;
     *     BYTE bReserved[2];
     *     DWORD dwReserved[2];
     * } *LPDRIVERSTATUS
     * }
     */
    public static final AddressLayout LPDRIVERSTATUS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SENDCMDOUTPARAMS {
     *     DWORD cBufferSize;
     *     DRIVERSTATUS DriverStatus;
     *     BYTE bBuffer[1];
     * } *PSENDCMDOUTPARAMS
     * }
     */
    public static final AddressLayout PSENDCMDOUTPARAMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SENDCMDOUTPARAMS {
     *     DWORD cBufferSize;
     *     DRIVERSTATUS DriverStatus;
     *     BYTE bBuffer[1];
     * } *LPSENDCMDOUTPARAMS
     * }
     */
    public static final AddressLayout LPSENDCMDOUTPARAMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _GET_DISK_ATTRIBUTES {
     *     DWORD Version;
     *     DWORD Reserved1;
     *     DWORDLONG Attributes;
     * } *PGET_DISK_ATTRIBUTES
     * }
     */
    public static final AddressLayout PGET_DISK_ATTRIBUTES = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SET_DISK_ATTRIBUTES {
     *     DWORD Version;
     *     BOOLEAN Persist;
     *     BYTE Reserved1[3];
     *     DWORDLONG Attributes;
     *     DWORDLONG AttributesMask;
     *     DWORD Reserved2[4];
     * } *PSET_DISK_ATTRIBUTES
     * }
     */
    public static final AddressLayout PSET_DISK_ATTRIBUTES = C_POINTER;
    private static final int AllElements = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _ELEMENT_TYPE.AllElements = 0
     * }
     */
    public static int AllElements() {
        return AllElements;
    }
    private static final int ChangerTransport = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _ELEMENT_TYPE.ChangerTransport = 1
     * }
     */
    public static int ChangerTransport() {
        return ChangerTransport;
    }
    private static final int ChangerSlot = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _ELEMENT_TYPE.ChangerSlot = 2
     * }
     */
    public static int ChangerSlot() {
        return ChangerSlot;
    }
    private static final int ChangerIEPort = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _ELEMENT_TYPE.ChangerIEPort = 3
     * }
     */
    public static int ChangerIEPort() {
        return ChangerIEPort;
    }
    private static final int ChangerDrive = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _ELEMENT_TYPE.ChangerDrive = 4
     * }
     */
    public static int ChangerDrive() {
        return ChangerDrive;
    }
    private static final int ChangerDoor = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _ELEMENT_TYPE.ChangerDoor = 5
     * }
     */
    public static int ChangerDoor() {
        return ChangerDoor;
    }
    private static final int ChangerKeypad = (int)6L;
    /**
     * {@snippet lang=c :
     * enum _ELEMENT_TYPE.ChangerKeypad = 6
     * }
     */
    public static int ChangerKeypad() {
        return ChangerKeypad;
    }
    private static final int ChangerMaxElement = (int)7L;
    /**
     * {@snippet lang=c :
     * enum _ELEMENT_TYPE.ChangerMaxElement = 7
     * }
     */
    public static int ChangerMaxElement() {
        return ChangerMaxElement;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _ELEMENT_TYPE {
     *     AllElements,
     *     ChangerTransport,
     *     ChangerSlot,
     *     ChangerIEPort,
     *     ChangerDrive,
     *     ChangerDoor,
     *     ChangerKeypad,
     *     ChangerMaxElement
     * } *PELEMENT_TYPE
     * }
     */
    public static final AddressLayout PELEMENT_TYPE = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CHANGER_ELEMENT {
     *     ELEMENT_TYPE ElementType;
     *     DWORD ElementAddress;
     * } *PCHANGER_ELEMENT
     * }
     */
    public static final AddressLayout PCHANGER_ELEMENT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CHANGER_ELEMENT_LIST {
     *     CHANGER_ELEMENT Element;
     *     DWORD NumberOfElements;
     * } *PCHANGER_ELEMENT_LIST
     * }
     */
    public static final AddressLayout PCHANGER_ELEMENT_LIST = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _GET_CHANGER_PARAMETERS {
     *     DWORD Size;
     *     WORD NumberTransportElements;
     *     WORD NumberStorageElements;
     *     WORD NumberCleanerSlots;
     *     WORD NumberIEElements;
     *     WORD NumberDataTransferElements;
     *     WORD NumberOfDoors;
     *     WORD FirstSlotNumber;
     *     WORD FirstDriveNumber;
     *     WORD FirstTransportNumber;
     *     WORD FirstIEPortNumber;
     *     WORD FirstCleanerSlotAddress;
     *     WORD MagazineSize;
     *     DWORD DriveCleanTimeout;
     *     DWORD Features0;
     *     DWORD Features1;
     *     BYTE MoveFromTransport;
     *     BYTE MoveFromSlot;
     *     BYTE MoveFromIePort;
     *     BYTE MoveFromDrive;
     *     BYTE ExchangeFromTransport;
     *     BYTE ExchangeFromSlot;
     *     BYTE ExchangeFromIePort;
     *     BYTE ExchangeFromDrive;
     *     BYTE LockUnlockCapabilities;
     *     BYTE PositionCapabilities;
     *     BYTE Reserved1[2];
     *     DWORD Reserved2[2];
     * } *PGET_CHANGER_PARAMETERS
     * }
     */
    public static final AddressLayout PGET_CHANGER_PARAMETERS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CHANGER_PRODUCT_DATA {
     *     BYTE VendorId[8];
     *     BYTE ProductId[16];
     *     BYTE Revision[4];
     *     BYTE SerialNumber[32];
     *     BYTE DeviceType;
     * } *PCHANGER_PRODUCT_DATA
     * }
     */
    public static final AddressLayout PCHANGER_PRODUCT_DATA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CHANGER_SET_ACCESS {
     *     CHANGER_ELEMENT Element;
     *     DWORD Control;
     * } *PCHANGER_SET_ACCESS
     * }
     */
    public static final AddressLayout PCHANGER_SET_ACCESS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CHANGER_READ_ELEMENT_STATUS {
     *     CHANGER_ELEMENT_LIST ElementList;
     *     BOOLEAN VolumeTagInfo;
     * } *PCHANGER_READ_ELEMENT_STATUS
     * }
     */
    public static final AddressLayout PCHANGER_READ_ELEMENT_STATUS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CHANGER_ELEMENT_STATUS {
     *     CHANGER_ELEMENT Element;
     *     CHANGER_ELEMENT SrcElementAddress;
     *     DWORD Flags;
     *     DWORD ExceptionCode;
     *     BYTE TargetId;
     *     BYTE Lun;
     *     WORD Reserved;
     *     BYTE PrimaryVolumeID[36];
     *     BYTE AlternateVolumeID[36];
     * } *PCHANGER_ELEMENT_STATUS
     * }
     */
    public static final AddressLayout PCHANGER_ELEMENT_STATUS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CHANGER_ELEMENT_STATUS_EX {
     *     CHANGER_ELEMENT Element;
     *     CHANGER_ELEMENT SrcElementAddress;
     *     DWORD Flags;
     *     DWORD ExceptionCode;
     *     BYTE TargetId;
     *     BYTE Lun;
     *     WORD Reserved;
     *     BYTE PrimaryVolumeID[36];
     *     BYTE AlternateVolumeID[36];
     *     BYTE VendorIdentification[8];
     *     BYTE ProductIdentification[16];
     *     BYTE SerialNumber[32];
     * } *PCHANGER_ELEMENT_STATUS_EX
     * }
     */
    public static final AddressLayout PCHANGER_ELEMENT_STATUS_EX = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CHANGER_INITIALIZE_ELEMENT_STATUS {
     *     CHANGER_ELEMENT_LIST ElementList;
     *     BOOLEAN BarCodeScan;
     * } *PCHANGER_INITIALIZE_ELEMENT_STATUS
     * }
     */
    public static final AddressLayout PCHANGER_INITIALIZE_ELEMENT_STATUS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CHANGER_SET_POSITION {
     *     CHANGER_ELEMENT Transport;
     *     CHANGER_ELEMENT Destination;
     *     BOOLEAN Flip;
     * } *PCHANGER_SET_POSITION
     * }
     */
    public static final AddressLayout PCHANGER_SET_POSITION = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CHANGER_EXCHANGE_MEDIUM {
     *     CHANGER_ELEMENT Transport;
     *     CHANGER_ELEMENT Source;
     *     CHANGER_ELEMENT Destination1;
     *     CHANGER_ELEMENT Destination2;
     *     BOOLEAN Flip1;
     *     BOOLEAN Flip2;
     * } *PCHANGER_EXCHANGE_MEDIUM
     * }
     */
    public static final AddressLayout PCHANGER_EXCHANGE_MEDIUM = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CHANGER_MOVE_MEDIUM {
     *     CHANGER_ELEMENT Transport;
     *     CHANGER_ELEMENT Source;
     *     CHANGER_ELEMENT Destination;
     *     BOOLEAN Flip;
     * } *PCHANGER_MOVE_MEDIUM
     * }
     */
    public static final AddressLayout PCHANGER_MOVE_MEDIUM = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CHANGER_SEND_VOLUME_TAG_INFORMATION {
     *     CHANGER_ELEMENT StartingElement;
     *     DWORD ActionCode;
     *     BYTE VolumeIDTemplate[40];
     * } *PCHANGER_SEND_VOLUME_TAG_INFORMATION
     * }
     */
    public static final AddressLayout PCHANGER_SEND_VOLUME_TAG_INFORMATION = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _READ_ELEMENT_ADDRESS_INFO {
     *     DWORD NumberOfElements;
     *     CHANGER_ELEMENT_STATUS ElementStatus[1];
     * } *PREAD_ELEMENT_ADDRESS_INFO
     * }
     */
    public static final AddressLayout PREAD_ELEMENT_ADDRESS_INFO = C_POINTER;
    private static final int DeviceProblemNone = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _CHANGER_DEVICE_PROBLEM_TYPE.DeviceProblemNone = 0
     * }
     */
    public static int DeviceProblemNone() {
        return DeviceProblemNone;
    }
    private static final int DeviceProblemHardware = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _CHANGER_DEVICE_PROBLEM_TYPE.DeviceProblemHardware = 1
     * }
     */
    public static int DeviceProblemHardware() {
        return DeviceProblemHardware;
    }
    private static final int DeviceProblemCHMError = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _CHANGER_DEVICE_PROBLEM_TYPE.DeviceProblemCHMError = 2
     * }
     */
    public static int DeviceProblemCHMError() {
        return DeviceProblemCHMError;
    }
    private static final int DeviceProblemDoorOpen = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _CHANGER_DEVICE_PROBLEM_TYPE.DeviceProblemDoorOpen = 3
     * }
     */
    public static int DeviceProblemDoorOpen() {
        return DeviceProblemDoorOpen;
    }
    private static final int DeviceProblemCalibrationError = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _CHANGER_DEVICE_PROBLEM_TYPE.DeviceProblemCalibrationError = 4
     * }
     */
    public static int DeviceProblemCalibrationError() {
        return DeviceProblemCalibrationError;
    }
    private static final int DeviceProblemTargetFailure = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _CHANGER_DEVICE_PROBLEM_TYPE.DeviceProblemTargetFailure = 5
     * }
     */
    public static int DeviceProblemTargetFailure() {
        return DeviceProblemTargetFailure;
    }
    private static final int DeviceProblemCHMMoveError = (int)6L;
    /**
     * {@snippet lang=c :
     * enum _CHANGER_DEVICE_PROBLEM_TYPE.DeviceProblemCHMMoveError = 6
     * }
     */
    public static int DeviceProblemCHMMoveError() {
        return DeviceProblemCHMMoveError;
    }
    private static final int DeviceProblemCHMZeroError = (int)7L;
    /**
     * {@snippet lang=c :
     * enum _CHANGER_DEVICE_PROBLEM_TYPE.DeviceProblemCHMZeroError = 7
     * }
     */
    public static int DeviceProblemCHMZeroError() {
        return DeviceProblemCHMZeroError;
    }
    private static final int DeviceProblemCartridgeInsertError = (int)8L;
    /**
     * {@snippet lang=c :
     * enum _CHANGER_DEVICE_PROBLEM_TYPE.DeviceProblemCartridgeInsertError = 8
     * }
     */
    public static int DeviceProblemCartridgeInsertError() {
        return DeviceProblemCartridgeInsertError;
    }
    private static final int DeviceProblemPositionError = (int)9L;
    /**
     * {@snippet lang=c :
     * enum _CHANGER_DEVICE_PROBLEM_TYPE.DeviceProblemPositionError = 9
     * }
     */
    public static int DeviceProblemPositionError() {
        return DeviceProblemPositionError;
    }
    private static final int DeviceProblemSensorError = (int)10L;
    /**
     * {@snippet lang=c :
     * enum _CHANGER_DEVICE_PROBLEM_TYPE.DeviceProblemSensorError = 10
     * }
     */
    public static int DeviceProblemSensorError() {
        return DeviceProblemSensorError;
    }
    private static final int DeviceProblemCartridgeEjectError = (int)11L;
    /**
     * {@snippet lang=c :
     * enum _CHANGER_DEVICE_PROBLEM_TYPE.DeviceProblemCartridgeEjectError = 11
     * }
     */
    public static int DeviceProblemCartridgeEjectError() {
        return DeviceProblemCartridgeEjectError;
    }
    private static final int DeviceProblemGripperError = (int)12L;
    /**
     * {@snippet lang=c :
     * enum _CHANGER_DEVICE_PROBLEM_TYPE.DeviceProblemGripperError = 12
     * }
     */
    public static int DeviceProblemGripperError() {
        return DeviceProblemGripperError;
    }
    private static final int DeviceProblemDriveError = (int)13L;
    /**
     * {@snippet lang=c :
     * enum _CHANGER_DEVICE_PROBLEM_TYPE.DeviceProblemDriveError = 13
     * }
     */
    public static int DeviceProblemDriveError() {
        return DeviceProblemDriveError;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _CHANGER_DEVICE_PROBLEM_TYPE {
     *     DeviceProblemNone,
     *     DeviceProblemHardware,
     *     DeviceProblemCHMError,
     *     DeviceProblemDoorOpen,
     *     DeviceProblemCalibrationError,
     *     DeviceProblemTargetFailure,
     *     DeviceProblemCHMMoveError,
     *     DeviceProblemCHMZeroError,
     *     DeviceProblemCartridgeInsertError,
     *     DeviceProblemPositionError,
     *     DeviceProblemSensorError,
     *     DeviceProblemCartridgeEjectError,
     *     DeviceProblemGripperError,
     *     DeviceProblemDriveError
     * } *PCHANGER_DEVICE_PROBLEM_TYPE
     * }
     */
    public static final AddressLayout PCHANGER_DEVICE_PROBLEM_TYPE = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PATHNAME_BUFFER {
     *     DWORD PathNameLength;
     *     WCHAR Name[1];
     * } *PPATHNAME_BUFFER
     * }
     */
    public static final AddressLayout PPATHNAME_BUFFER = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FSCTL_QUERY_FAT_BPB_BUFFER {
     *     BYTE First0x24BytesOfBootSector[36];
     * } *PFSCTL_QUERY_FAT_BPB_BUFFER
     * }
     */
    public static final AddressLayout PFSCTL_QUERY_FAT_BPB_BUFFER = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     LARGE_INTEGER VolumeSerialNumber;
     *     LARGE_INTEGER NumberSectors;
     *     LARGE_INTEGER TotalClusters;
     *     LARGE_INTEGER FreeClusters;
     *     LARGE_INTEGER TotalReserved;
     *     DWORD BytesPerSector;
     *     DWORD BytesPerCluster;
     *     DWORD BytesPerFileRecordSegment;
     *     DWORD ClustersPerFileRecordSegment;
     *     LARGE_INTEGER MftValidDataLength;
     *     LARGE_INTEGER MftStartLcn;
     *     LARGE_INTEGER Mft2StartLcn;
     *     LARGE_INTEGER MftZoneStart;
     *     LARGE_INTEGER MftZoneEnd;
     * } *PNTFS_VOLUME_DATA_BUFFER
     * }
     */
    public static final AddressLayout PNTFS_VOLUME_DATA_BUFFER = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD ByteCount;
     *     WORD MajorVersion;
     *     WORD MinorVersion;
     *     DWORD BytesPerPhysicalSector;
     *     WORD LfsMajorVersion;
     *     WORD LfsMinorVersion;
     *     DWORD MaxDeviceTrimExtentCount;
     *     DWORD MaxDeviceTrimByteCount;
     *     DWORD MaxVolumeTrimExtentCount;
     *     DWORD MaxVolumeTrimByteCount;
     * } *PNTFS_EXTENDED_VOLUME_DATA
     * }
     */
    public static final AddressLayout PNTFS_EXTENDED_VOLUME_DATA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD ByteCount;
     *     DWORD MajorVersion;
     *     DWORD MinorVersion;
     *     DWORD BytesPerPhysicalSector;
     *     LARGE_INTEGER VolumeSerialNumber;
     *     LARGE_INTEGER NumberSectors;
     *     LARGE_INTEGER TotalClusters;
     *     LARGE_INTEGER FreeClusters;
     *     LARGE_INTEGER TotalReserved;
     *     DWORD BytesPerSector;
     *     DWORD BytesPerCluster;
     *     LARGE_INTEGER MaximumSizeOfResidentFile;
     *     WORD FastTierDataFillRatio;
     *     WORD SlowTierDataFillRatio;
     *     DWORD DestagesFastTierToSlowTierRate;
     *     LARGE_INTEGER Reserved[9];
     * } *PREFS_VOLUME_DATA_BUFFER
     * }
     */
    public static final AddressLayout PREFS_VOLUME_DATA_BUFFER = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     LARGE_INTEGER StartingLcn;
     * } *PSTARTING_LCN_INPUT_BUFFER
     * }
     */
    public static final AddressLayout PSTARTING_LCN_INPUT_BUFFER = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     LARGE_INTEGER StartingLcn;
     *     DWORD Flags;
     * } *PSTARTING_LCN_INPUT_BUFFER_EX
     * }
     */
    public static final AddressLayout PSTARTING_LCN_INPUT_BUFFER_EX = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     LARGE_INTEGER StartingLcn;
     *     LARGE_INTEGER BitmapSize;
     *     BYTE Buffer[1];
     * } *PVOLUME_BITMAP_BUFFER
     * }
     */
    public static final AddressLayout PVOLUME_BITMAP_BUFFER = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     LARGE_INTEGER StartingVcn;
     * } *PSTARTING_VCN_INPUT_BUFFER
     * }
     */
    public static final AddressLayout PSTARTING_VCN_INPUT_BUFFER = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct RETRIEVAL_POINTERS_BUFFER {
     *     DWORD ExtentCount;
     *     LARGE_INTEGER StartingVcn;
     *     struct {
     *         LARGE_INTEGER NextVcn;
     *         LARGE_INTEGER Lcn;
     *     } Extents[1];
     * } *PRETRIEVAL_POINTERS_BUFFER
     * }
     */
    public static final AddressLayout PRETRIEVAL_POINTERS_BUFFER = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct RETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER {
     *     DWORD ExtentCount;
     *     LARGE_INTEGER StartingVcn;
     *     struct {
     *         LARGE_INTEGER NextVcn;
     *         LARGE_INTEGER Lcn;
     *         DWORD ReferenceCount;
     *     } Extents[1];
     * } *PRETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER
     * }
     */
    public static final AddressLayout PRETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct RETRIEVAL_POINTER_COUNT {
     *     DWORD ExtentCount;
     * } *PRETRIEVAL_POINTER_COUNT
     * }
     */
    public static final AddressLayout PRETRIEVAL_POINTER_COUNT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     LARGE_INTEGER FileReferenceNumber;
     * } *PNTFS_FILE_RECORD_INPUT_BUFFER
     * }
     */
    public static final AddressLayout PNTFS_FILE_RECORD_INPUT_BUFFER = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     LARGE_INTEGER FileReferenceNumber;
     *     DWORD FileRecordLength;
     *     BYTE FileRecordBuffer[1];
     * } *PNTFS_FILE_RECORD_OUTPUT_BUFFER
     * }
     */
    public static final AddressLayout PNTFS_FILE_RECORD_OUTPUT_BUFFER = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     HANDLE FileHandle;
     *     LARGE_INTEGER StartingVcn;
     *     LARGE_INTEGER StartingLcn;
     *     DWORD ClusterCount;
     * } *PMOVE_FILE_DATA
     * }
     */
    public static final AddressLayout PMOVE_FILE_DATA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     HANDLE FileHandle;
     *     LARGE_INTEGER SourceFileRecord;
     *     LARGE_INTEGER TargetFileRecord;
     * } *PMOVE_FILE_RECORD_DATA
     * }
     */
    public static final AddressLayout PMOVE_FILE_RECORD_DATA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _MOVE_FILE_DATA32 {
     *     UINT32 FileHandle;
     *     LARGE_INTEGER StartingVcn;
     *     LARGE_INTEGER StartingLcn;
     *     DWORD ClusterCount;
     * } *PMOVE_FILE_DATA32
     * }
     */
    public static final AddressLayout PMOVE_FILE_DATA32 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD Restart;
     *     SID Sid;
     * } *PFIND_BY_SID_DATA
     * }
     */
    public static final AddressLayout PFIND_BY_SID_DATA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD NextEntryOffset;
     *     DWORD FileIndex;
     *     DWORD FileNameLength;
     *     WCHAR FileName[1];
     * } *PFIND_BY_SID_OUTPUT
     * }
     */
    public static final AddressLayout PFIND_BY_SID_OUTPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORDLONG StartFileReferenceNumber;
     *     USN LowUsn;
     *     USN HighUsn;
     * } *PMFT_ENUM_DATA_V0
     * }
     */
    public static final AddressLayout PMFT_ENUM_DATA_V0 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORDLONG StartFileReferenceNumber;
     *     USN LowUsn;
     *     USN HighUsn;
     *     WORD MinMajorVersion;
     *     WORD MaxMajorVersion;
     * } *PMFT_ENUM_DATA_V1
     * }
     */
    public static final AddressLayout PMFT_ENUM_DATA_V1 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef MFT_ENUM_DATA_V1 *PMFT_ENUM_DATA
     * }
     */
    public static final AddressLayout PMFT_ENUM_DATA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORDLONG MaximumSize;
     *     DWORDLONG AllocationDelta;
     * } *PCREATE_USN_JOURNAL_DATA
     * }
     */
    public static final AddressLayout PCREATE_USN_JOURNAL_DATA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     WORD MinMajorVersion;
     *     WORD MaxMajorVersion;
     * } *PREAD_FILE_USN_DATA
     * }
     */
    public static final AddressLayout PREAD_FILE_USN_DATA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     USN StartUsn;
     *     DWORD ReasonMask;
     *     DWORD ReturnOnlyOnClose;
     *     DWORDLONG Timeout;
     *     DWORDLONG BytesToWaitFor;
     *     DWORDLONG UsnJournalID;
     * } *PREAD_USN_JOURNAL_DATA_V0
     * }
     */
    public static final AddressLayout PREAD_USN_JOURNAL_DATA_V0 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     USN StartUsn;
     *     DWORD ReasonMask;
     *     DWORD ReturnOnlyOnClose;
     *     DWORDLONG Timeout;
     *     DWORDLONG BytesToWaitFor;
     *     DWORDLONG UsnJournalID;
     *     WORD MinMajorVersion;
     *     WORD MaxMajorVersion;
     * } *PREAD_USN_JOURNAL_DATA_V1
     * }
     */
    public static final AddressLayout PREAD_USN_JOURNAL_DATA_V1 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef READ_USN_JOURNAL_DATA_V1 *PREAD_USN_JOURNAL_DATA
     * }
     */
    public static final AddressLayout PREAD_USN_JOURNAL_DATA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD Flags;
     *     DWORD Unused;
     *     DWORDLONG ChunkSize;
     *     LONGLONG FileSizeThreshold;
     * } *PUSN_TRACK_MODIFIED_RANGES
     * }
     */
    public static final AddressLayout PUSN_TRACK_MODIFIED_RANGES = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     USN Usn;
     * } *PUSN_RANGE_TRACK_OUTPUT
     * }
     */
    public static final AddressLayout PUSN_RANGE_TRACK_OUTPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD RecordLength;
     *     WORD MajorVersion;
     *     WORD MinorVersion;
     *     DWORDLONG FileReferenceNumber;
     *     DWORDLONG ParentFileReferenceNumber;
     *     USN Usn;
     *     LARGE_INTEGER TimeStamp;
     *     DWORD Reason;
     *     DWORD SourceInfo;
     *     DWORD SecurityId;
     *     DWORD FileAttributes;
     *     WORD FileNameLength;
     *     WORD FileNameOffset;
     *     WCHAR FileName[1];
     * } *PUSN_RECORD_V2
     * }
     */
    public static final AddressLayout PUSN_RECORD_V2 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD RecordLength;
     *     WORD MajorVersion;
     *     WORD MinorVersion;
     *     FILE_ID_128 FileReferenceNumber;
     *     FILE_ID_128 ParentFileReferenceNumber;
     *     USN Usn;
     *     LARGE_INTEGER TimeStamp;
     *     DWORD Reason;
     *     DWORD SourceInfo;
     *     DWORD SecurityId;
     *     DWORD FileAttributes;
     *     WORD FileNameLength;
     *     WORD FileNameOffset;
     *     WCHAR FileName[1];
     * } *PUSN_RECORD_V3
     * }
     */
    public static final AddressLayout PUSN_RECORD_V3 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef USN_RECORD_V2 *PUSN_RECORD
     * }
     */
    public static final AddressLayout PUSN_RECORD = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD RecordLength;
     *     WORD MajorVersion;
     *     WORD MinorVersion;
     * } *PUSN_RECORD_COMMON_HEADER
     * }
     */
    public static final AddressLayout PUSN_RECORD_COMMON_HEADER = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     LONGLONG Offset;
     *     LONGLONG Length;
     * } *PUSN_RECORD_EXTENT
     * }
     */
    public static final AddressLayout PUSN_RECORD_EXTENT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     USN_RECORD_COMMON_HEADER Header;
     *     FILE_ID_128 FileReferenceNumber;
     *     FILE_ID_128 ParentFileReferenceNumber;
     *     USN Usn;
     *     DWORD Reason;
     *     DWORD SourceInfo;
     *     DWORD RemainingExtents;
     *     WORD NumberOfExtents;
     *     WORD ExtentSize;
     *     USN_RECORD_EXTENT Extents[1];
     * } *PUSN_RECORD_V4
     * }
     */
    public static final AddressLayout PUSN_RECORD_V4 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef union {
     *     USN_RECORD_COMMON_HEADER Header;
     *     USN_RECORD_V2 V2;
     *     USN_RECORD_V3 V3;
     *     USN_RECORD_V4 V4;
     * } *PUSN_RECORD_UNION
     * }
     */
    public static final AddressLayout PUSN_RECORD_UNION = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORDLONG UsnJournalID;
     *     USN FirstUsn;
     *     USN NextUsn;
     *     USN LowestValidUsn;
     *     USN MaxUsn;
     *     DWORDLONG MaximumSize;
     *     DWORDLONG AllocationDelta;
     * } *PUSN_JOURNAL_DATA_V0
     * }
     */
    public static final AddressLayout PUSN_JOURNAL_DATA_V0 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORDLONG UsnJournalID;
     *     USN FirstUsn;
     *     USN NextUsn;
     *     USN LowestValidUsn;
     *     USN MaxUsn;
     *     DWORDLONG MaximumSize;
     *     DWORDLONG AllocationDelta;
     *     WORD MinSupportedMajorVersion;
     *     WORD MaxSupportedMajorVersion;
     * } *PUSN_JOURNAL_DATA_V1
     * }
     */
    public static final AddressLayout PUSN_JOURNAL_DATA_V1 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORDLONG UsnJournalID;
     *     USN FirstUsn;
     *     USN NextUsn;
     *     USN LowestValidUsn;
     *     USN MaxUsn;
     *     DWORDLONG MaximumSize;
     *     DWORDLONG AllocationDelta;
     *     WORD MinSupportedMajorVersion;
     *     WORD MaxSupportedMajorVersion;
     *     DWORD Flags;
     *     DWORDLONG RangeTrackChunkSize;
     *     LONGLONG RangeTrackFileSizeThreshold;
     * } *PUSN_JOURNAL_DATA_V2
     * }
     */
    public static final AddressLayout PUSN_JOURNAL_DATA_V2 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef USN_JOURNAL_DATA_V1 *PUSN_JOURNAL_DATA
     * }
     */
    public static final AddressLayout PUSN_JOURNAL_DATA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORDLONG UsnJournalID;
     *     DWORD DeleteFlags;
     * } *PDELETE_USN_JOURNAL_DATA
     * }
     */
    public static final AddressLayout PDELETE_USN_JOURNAL_DATA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _MARK_HANDLE_INFO {
     *     union {
     *         DWORD UsnSourceInfo;
     *         DWORD CopyNumber;
     *     };
     *     HANDLE VolumeHandle;
     *     DWORD HandleInfo;
     * } *PMARK_HANDLE_INFO
     * }
     */
    public static final AddressLayout PMARK_HANDLE_INFO = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _MARK_HANDLE_INFO32 {
     *     union {
     *         DWORD UsnSourceInfo;
     *         DWORD CopyNumber;
     *     };
     *     UINT32 VolumeHandle;
     *     DWORD HandleInfo;
     * } *PMARK_HANDLE_INFO32
     * }
     */
    public static final AddressLayout PMARK_HANDLE_INFO32 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     ACCESS_MASK DesiredAccess;
     *     DWORD SecurityIds[1];
     * } *PBULK_SECURITY_TEST_DATA
     * }
     */
    public static final AddressLayout PBULK_SECURITY_TEST_DATA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_PREFETCH {
     *     DWORD Type;
     *     DWORD Count;
     *     DWORDLONG Prefetch[1];
     * } *PFILE_PREFETCH
     * }
     */
    public static final AddressLayout PFILE_PREFETCH = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_PREFETCH_EX {
     *     DWORD Type;
     *     DWORD Count;
     *     PVOID Context;
     *     DWORDLONG Prefetch[1];
     * } *PFILE_PREFETCH_EX
     * }
     */
    public static final AddressLayout PFILE_PREFETCH_EX = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILESYSTEM_STATISTICS {
     *     WORD FileSystemType;
     *     WORD Version;
     *     DWORD SizeOfCompleteStructure;
     *     DWORD UserFileReads;
     *     DWORD UserFileReadBytes;
     *     DWORD UserDiskReads;
     *     DWORD UserFileWrites;
     *     DWORD UserFileWriteBytes;
     *     DWORD UserDiskWrites;
     *     DWORD MetaDataReads;
     *     DWORD MetaDataReadBytes;
     *     DWORD MetaDataDiskReads;
     *     DWORD MetaDataWrites;
     *     DWORD MetaDataWriteBytes;
     *     DWORD MetaDataDiskWrites;
     * } *PFILESYSTEM_STATISTICS
     * }
     */
    public static final AddressLayout PFILESYSTEM_STATISTICS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FAT_STATISTICS {
     *     DWORD CreateHits;
     *     DWORD SuccessfulCreates;
     *     DWORD FailedCreates;
     *     DWORD NonCachedReads;
     *     DWORD NonCachedReadBytes;
     *     DWORD NonCachedWrites;
     *     DWORD NonCachedWriteBytes;
     *     DWORD NonCachedDiskReads;
     *     DWORD NonCachedDiskWrites;
     * } *PFAT_STATISTICS
     * }
     */
    public static final AddressLayout PFAT_STATISTICS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _EXFAT_STATISTICS {
     *     DWORD CreateHits;
     *     DWORD SuccessfulCreates;
     *     DWORD FailedCreates;
     *     DWORD NonCachedReads;
     *     DWORD NonCachedReadBytes;
     *     DWORD NonCachedWrites;
     *     DWORD NonCachedWriteBytes;
     *     DWORD NonCachedDiskReads;
     *     DWORD NonCachedDiskWrites;
     * } *PEXFAT_STATISTICS
     * }
     */
    public static final AddressLayout PEXFAT_STATISTICS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _NTFS_STATISTICS {
     *     DWORD LogFileFullExceptions;
     *     DWORD OtherExceptions;
     *     DWORD MftReads;
     *     DWORD MftReadBytes;
     *     DWORD MftWrites;
     *     DWORD MftWriteBytes;
     *     struct {
     *         WORD Write;
     *         WORD Create;
     *         WORD SetInfo;
     *         WORD Flush;
     *     } MftWritesUserLevel;
     *     WORD MftWritesFlushForLogFileFull;
     *     WORD MftWritesLazyWriter;
     *     WORD MftWritesUserRequest;
     *     DWORD Mft2Writes;
     *     DWORD Mft2WriteBytes;
     *     struct {
     *         WORD Write;
     *         WORD Create;
     *         WORD SetInfo;
     *         WORD Flush;
     *     } Mft2WritesUserLevel;
     *     WORD Mft2WritesFlushForLogFileFull;
     *     WORD Mft2WritesLazyWriter;
     *     WORD Mft2WritesUserRequest;
     *     DWORD RootIndexReads;
     *     DWORD RootIndexReadBytes;
     *     DWORD RootIndexWrites;
     *     DWORD RootIndexWriteBytes;
     *     DWORD BitmapReads;
     *     DWORD BitmapReadBytes;
     *     DWORD BitmapWrites;
     *     DWORD BitmapWriteBytes;
     *     WORD BitmapWritesFlushForLogFileFull;
     *     WORD BitmapWritesLazyWriter;
     *     WORD BitmapWritesUserRequest;
     *     struct {
     *         WORD Write;
     *         WORD Create;
     *         WORD SetInfo;
     *     } BitmapWritesUserLevel;
     *     DWORD MftBitmapReads;
     *     DWORD MftBitmapReadBytes;
     *     DWORD MftBitmapWrites;
     *     DWORD MftBitmapWriteBytes;
     *     WORD MftBitmapWritesFlushForLogFileFull;
     *     WORD MftBitmapWritesLazyWriter;
     *     WORD MftBitmapWritesUserRequest;
     *     struct {
     *         WORD Write;
     *         WORD Create;
     *         WORD SetInfo;
     *         WORD Flush;
     *     } MftBitmapWritesUserLevel;
     *     DWORD UserIndexReads;
     *     DWORD UserIndexReadBytes;
     *     DWORD UserIndexWrites;
     *     DWORD UserIndexWriteBytes;
     *     DWORD LogFileReads;
     *     DWORD LogFileReadBytes;
     *     DWORD LogFileWrites;
     *     DWORD LogFileWriteBytes;
     *     struct {
     *         DWORD Calls;
     *         DWORD Clusters;
     *         DWORD Hints;
     *         DWORD RunsReturned;
     *         DWORD HintsHonored;
     *         DWORD HintsClusters;
     *         DWORD Cache;
     *         DWORD CacheClusters;
     *         DWORD CacheMiss;
     *         DWORD CacheMissClusters;
     *     } Allocate;
     *     DWORD DiskResourcesExhausted;
     * } *PNTFS_STATISTICS
     * }
     */
    public static final AddressLayout PNTFS_STATISTICS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILESYSTEM_STATISTICS_EX {
     *     WORD FileSystemType;
     *     WORD Version;
     *     DWORD SizeOfCompleteStructure;
     *     DWORDLONG UserFileReads;
     *     DWORDLONG UserFileReadBytes;
     *     DWORDLONG UserDiskReads;
     *     DWORDLONG UserFileWrites;
     *     DWORDLONG UserFileWriteBytes;
     *     DWORDLONG UserDiskWrites;
     *     DWORDLONG MetaDataReads;
     *     DWORDLONG MetaDataReadBytes;
     *     DWORDLONG MetaDataDiskReads;
     *     DWORDLONG MetaDataWrites;
     *     DWORDLONG MetaDataWriteBytes;
     *     DWORDLONG MetaDataDiskWrites;
     * } *PFILESYSTEM_STATISTICS_EX
     * }
     */
    public static final AddressLayout PFILESYSTEM_STATISTICS_EX = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _NTFS_STATISTICS_EX {
     *     DWORD LogFileFullExceptions;
     *     DWORD OtherExceptions;
     *     DWORDLONG MftReads;
     *     DWORDLONG MftReadBytes;
     *     DWORDLONG MftWrites;
     *     DWORDLONG MftWriteBytes;
     *     struct {
     *         DWORD Write;
     *         DWORD Create;
     *         DWORD SetInfo;
     *         DWORD Flush;
     *     } MftWritesUserLevel;
     *     DWORD MftWritesFlushForLogFileFull;
     *     DWORD MftWritesLazyWriter;
     *     DWORD MftWritesUserRequest;
     *     DWORDLONG Mft2Writes;
     *     DWORDLONG Mft2WriteBytes;
     *     struct {
     *         DWORD Write;
     *         DWORD Create;
     *         DWORD SetInfo;
     *         DWORD Flush;
     *     } Mft2WritesUserLevel;
     *     DWORD Mft2WritesFlushForLogFileFull;
     *     DWORD Mft2WritesLazyWriter;
     *     DWORD Mft2WritesUserRequest;
     *     DWORDLONG RootIndexReads;
     *     DWORDLONG RootIndexReadBytes;
     *     DWORDLONG RootIndexWrites;
     *     DWORDLONG RootIndexWriteBytes;
     *     DWORDLONG BitmapReads;
     *     DWORDLONG BitmapReadBytes;
     *     DWORDLONG BitmapWrites;
     *     DWORDLONG BitmapWriteBytes;
     *     DWORD BitmapWritesFlushForLogFileFull;
     *     DWORD BitmapWritesLazyWriter;
     *     DWORD BitmapWritesUserRequest;
     *     struct {
     *         DWORD Write;
     *         DWORD Create;
     *         DWORD SetInfo;
     *         DWORD Flush;
     *     } BitmapWritesUserLevel;
     *     DWORDLONG MftBitmapReads;
     *     DWORDLONG MftBitmapReadBytes;
     *     DWORDLONG MftBitmapWrites;
     *     DWORDLONG MftBitmapWriteBytes;
     *     DWORD MftBitmapWritesFlushForLogFileFull;
     *     DWORD MftBitmapWritesLazyWriter;
     *     DWORD MftBitmapWritesUserRequest;
     *     struct {
     *         DWORD Write;
     *         DWORD Create;
     *         DWORD SetInfo;
     *         DWORD Flush;
     *     } MftBitmapWritesUserLevel;
     *     DWORDLONG UserIndexReads;
     *     DWORDLONG UserIndexReadBytes;
     *     DWORDLONG UserIndexWrites;
     *     DWORDLONG UserIndexWriteBytes;
     *     DWORDLONG LogFileReads;
     *     DWORDLONG LogFileReadBytes;
     *     DWORDLONG LogFileWrites;
     *     DWORDLONG LogFileWriteBytes;
     *     struct {
     *         DWORD Calls;
     *         DWORD RunsReturned;
     *         DWORD Hints;
     *         DWORD HintsHonored;
     *         DWORD Cache;
     *         DWORD CacheMiss;
     *         DWORDLONG Clusters;
     *         DWORDLONG HintsClusters;
     *         DWORDLONG CacheClusters;
     *         DWORDLONG CacheMissClusters;
     *     } Allocate;
     *     DWORD DiskResourcesExhausted;
     *     DWORDLONG VolumeTrimCount;
     *     DWORDLONG VolumeTrimTime;
     *     DWORDLONG VolumeTrimByteCount;
     *     DWORDLONG FileLevelTrimCount;
     *     DWORDLONG FileLevelTrimTime;
     *     DWORDLONG FileLevelTrimByteCount;
     *     DWORDLONG VolumeTrimSkippedCount;
     *     DWORDLONG VolumeTrimSkippedByteCount;
     *     DWORDLONG NtfsFillStatInfoFromMftRecordCalledCount;
     *     DWORDLONG NtfsFillStatInfoFromMftRecordBailedBecauseOfAttributeListCount;
     *     DWORDLONG NtfsFillStatInfoFromMftRecordBailedBecauseOfNonResReparsePointCount;
     * } *PNTFS_STATISTICS_EX
     * }
     */
    public static final AddressLayout PNTFS_STATISTICS_EX = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_OBJECTID_BUFFER {
     *     BYTE ObjectId[16];
     *     union {
     *         struct {
     *             BYTE BirthVolumeId[16];
     *             BYTE BirthObjectId[16];
     *             BYTE DomainId[16];
     *         };
     *         BYTE ExtendedInfo[48];
     *     };
     * } *PFILE_OBJECTID_BUFFER
     * }
     */
    public static final AddressLayout PFILE_OBJECTID_BUFFER = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_SET_SPARSE_BUFFER {
     *     BOOLEAN SetSparse;
     * } *PFILE_SET_SPARSE_BUFFER
     * }
     */
    public static final AddressLayout PFILE_SET_SPARSE_BUFFER = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_ZERO_DATA_INFORMATION {
     *     LARGE_INTEGER FileOffset;
     *     LARGE_INTEGER BeyondFinalZero;
     * } *PFILE_ZERO_DATA_INFORMATION
     * }
     */
    public static final AddressLayout PFILE_ZERO_DATA_INFORMATION = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_ZERO_DATA_INFORMATION_EX {
     *     LARGE_INTEGER FileOffset;
     *     LARGE_INTEGER BeyondFinalZero;
     *     DWORD Flags;
     * } *PFILE_ZERO_DATA_INFORMATION_EX
     * }
     */
    public static final AddressLayout PFILE_ZERO_DATA_INFORMATION_EX = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_ALLOCATED_RANGE_BUFFER {
     *     LARGE_INTEGER FileOffset;
     *     LARGE_INTEGER Length;
     * } *PFILE_ALLOCATED_RANGE_BUFFER
     * }
     */
    public static final AddressLayout PFILE_ALLOCATED_RANGE_BUFFER = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _ENCRYPTION_BUFFER {
     *     DWORD EncryptionOperation;
     *     BYTE Private[1];
     * } *PENCRYPTION_BUFFER
     * }
     */
    public static final AddressLayout PENCRYPTION_BUFFER = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DECRYPTION_STATUS_BUFFER {
     *     BOOLEAN NoEncryptedStreams;
     * } *PDECRYPTION_STATUS_BUFFER
     * }
     */
    public static final AddressLayout PDECRYPTION_STATUS_BUFFER = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _REQUEST_RAW_ENCRYPTED_DATA {
     *     LONGLONG FileOffset;
     *     DWORD Length;
     * } *PREQUEST_RAW_ENCRYPTED_DATA
     * }
     */
    public static final AddressLayout PREQUEST_RAW_ENCRYPTED_DATA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _ENCRYPTED_DATA_INFO {
     *     DWORDLONG StartingFileOffset;
     *     DWORD OutputBufferOffset;
     *     DWORD BytesWithinFileSize;
     *     DWORD BytesWithinValidDataLength;
     *     WORD CompressionFormat;
     *     BYTE DataUnitShift;
     *     BYTE ChunkShift;
     *     BYTE ClusterShift;
     *     BYTE EncryptionFormat;
     *     WORD NumberOfDataBlocks;
     *     DWORD DataBlockSize[1];
     * } *PENCRYPTED_DATA_INFO
     * }
     */
    public static final AddressLayout PENCRYPTED_DATA_INFO = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _EXTENDED_ENCRYPTED_DATA_INFO {
     *     DWORD ExtendedCode;
     *     DWORD Length;
     *     DWORD Flags;
     *     DWORD Reserved;
     * } *PEXTENDED_ENCRYPTED_DATA_INFO
     * }
     */
    public static final AddressLayout PEXTENDED_ENCRYPTED_DATA_INFO = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PLEX_READ_DATA_REQUEST {
     *     LARGE_INTEGER ByteOffset;
     *     DWORD ByteLength;
     *     DWORD PlexNumber;
     * } *PPLEX_READ_DATA_REQUEST
     * }
     */
    public static final AddressLayout PPLEX_READ_DATA_REQUEST = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SI_COPYFILE {
     *     DWORD SourceFileNameLength;
     *     DWORD DestinationFileNameLength;
     *     DWORD Flags;
     *     WCHAR FileNameBuffer[1];
     * } *PSI_COPYFILE
     * }
     */
    public static final AddressLayout PSI_COPYFILE = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_MAKE_COMPATIBLE_BUFFER {
     *     BOOLEAN CloseDisc;
     * } *PFILE_MAKE_COMPATIBLE_BUFFER
     * }
     */
    public static final AddressLayout PFILE_MAKE_COMPATIBLE_BUFFER = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_SET_DEFECT_MGMT_BUFFER {
     *     BOOLEAN Disable;
     * } *PFILE_SET_DEFECT_MGMT_BUFFER
     * }
     */
    public static final AddressLayout PFILE_SET_DEFECT_MGMT_BUFFER = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_QUERY_SPARING_BUFFER {
     *     DWORD SparingUnitBytes;
     *     BOOLEAN SoftwareSparing;
     *     DWORD TotalSpareBlocks;
     *     DWORD FreeSpareBlocks;
     * } *PFILE_QUERY_SPARING_BUFFER
     * }
     */
    public static final AddressLayout PFILE_QUERY_SPARING_BUFFER = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_QUERY_ON_DISK_VOL_INFO_BUFFER {
     *     LARGE_INTEGER DirectoryCount;
     *     LARGE_INTEGER FileCount;
     *     WORD FsFormatMajVersion;
     *     WORD FsFormatMinVersion;
     *     WCHAR FsFormatName[12];
     *     LARGE_INTEGER FormatTime;
     *     LARGE_INTEGER LastUpdateTime;
     *     WCHAR CopyrightInfo[34];
     *     WCHAR AbstractInfo[34];
     *     WCHAR FormattingImplementationInfo[34];
     *     WCHAR LastModifyingImplementationInfo[34];
     * } *PFILE_QUERY_ON_DISK_VOL_INFO_BUFFER
     * }
     */
    public static final AddressLayout PFILE_QUERY_ON_DISK_VOL_INFO_BUFFER = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef DWORDLONG CLSN
     * }
     */
    public static final OfLong CLSN = C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_INITIATE_REPAIR_OUTPUT_BUFFER {
     *     DWORDLONG Hint1;
     *     DWORDLONG Hint2;
     *     CLSN Clsn;
     *     DWORD Status;
     * } *PFILE_INITIATE_REPAIR_OUTPUT_BUFFER
     * }
     */
    public static final AddressLayout PFILE_INITIATE_REPAIR_OUTPUT_BUFFER = C_POINTER;
    private static final int ShrinkPrepare = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _SHRINK_VOLUME_REQUEST_TYPES.ShrinkPrepare = 1
     * }
     */
    public static int ShrinkPrepare() {
        return ShrinkPrepare;
    }
    private static final int ShrinkCommit = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _SHRINK_VOLUME_REQUEST_TYPES.ShrinkCommit = 2
     * }
     */
    public static int ShrinkCommit() {
        return ShrinkCommit;
    }
    private static final int ShrinkAbort = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _SHRINK_VOLUME_REQUEST_TYPES.ShrinkAbort = 3
     * }
     */
    public static int ShrinkAbort() {
        return ShrinkAbort;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _SHRINK_VOLUME_REQUEST_TYPES {
     *     ShrinkPrepare = 1,
     *     ShrinkCommit,
     *     ShrinkAbort
     * } *PSHRINK_VOLUME_REQUEST_TYPES
     * }
     */
    public static final AddressLayout PSHRINK_VOLUME_REQUEST_TYPES = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SHRINK_VOLUME_INFORMATION {
     *     SHRINK_VOLUME_REQUEST_TYPES ShrinkRequestType;
     *     DWORDLONG Flags;
     *     LONGLONG NewNumberOfSectors;
     * } *PSHRINK_VOLUME_INFORMATION
     * }
     */
    public static final AddressLayout PSHRINK_VOLUME_INFORMATION = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TXFS_MODIFY_RM {
     *     DWORD Flags;
     *     DWORD LogContainerCountMax;
     *     DWORD LogContainerCountMin;
     *     DWORD LogContainerCount;
     *     DWORD LogGrowthIncrement;
     *     DWORD LogAutoShrinkPercentage;
     *     DWORDLONG Reserved;
     *     WORD LoggingMode;
     * } *PTXFS_MODIFY_RM
     * }
     */
    public static final AddressLayout PTXFS_MODIFY_RM = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TXFS_QUERY_RM_INFORMATION {
     *     DWORD BytesRequired;
     *     DWORDLONG TailLsn;
     *     DWORDLONG CurrentLsn;
     *     DWORDLONG ArchiveTailLsn;
     *     DWORDLONG LogContainerSize;
     *     LARGE_INTEGER HighestVirtualClock;
     *     DWORD LogContainerCount;
     *     DWORD LogContainerCountMax;
     *     DWORD LogContainerCountMin;
     *     DWORD LogGrowthIncrement;
     *     DWORD LogAutoShrinkPercentage;
     *     DWORD Flags;
     *     WORD LoggingMode;
     *     WORD Reserved;
     *     DWORD RmState;
     *     DWORDLONG LogCapacity;
     *     DWORDLONG LogFree;
     *     DWORDLONG TopsSize;
     *     DWORDLONG TopsUsed;
     *     DWORDLONG TransactionCount;
     *     DWORDLONG OnePCCount;
     *     DWORDLONG TwoPCCount;
     *     DWORDLONG NumberLogFileFull;
     *     DWORDLONG OldestTransactionAge;
     *     GUID RMName;
     *     DWORD TmLogPathOffset;
     * } *PTXFS_QUERY_RM_INFORMATION
     * }
     */
    public static final AddressLayout PTXFS_QUERY_RM_INFORMATION = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TXFS_ROLLFORWARD_REDO_INFORMATION {
     *     LARGE_INTEGER LastVirtualClock;
     *     DWORDLONG LastRedoLsn;
     *     DWORDLONG HighestRecoveryLsn;
     *     DWORD Flags;
     * } *PTXFS_ROLLFORWARD_REDO_INFORMATION
     * }
     */
    public static final AddressLayout PTXFS_ROLLFORWARD_REDO_INFORMATION = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TXFS_START_RM_INFORMATION {
     *     DWORD Flags;
     *     DWORDLONG LogContainerSize;
     *     DWORD LogContainerCountMin;
     *     DWORD LogContainerCountMax;
     *     DWORD LogGrowthIncrement;
     *     DWORD LogAutoShrinkPercentage;
     *     DWORD TmLogPathOffset;
     *     WORD TmLogPathLength;
     *     WORD LoggingMode;
     *     WORD LogPathLength;
     *     WORD Reserved;
     *     WCHAR LogPath[1];
     * } *PTXFS_START_RM_INFORMATION
     * }
     */
    public static final AddressLayout PTXFS_START_RM_INFORMATION = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TXFS_GET_METADATA_INFO_OUT {
     *     struct {
     *         LONGLONG LowPart;
     *         LONGLONG HighPart;
     *     } TxfFileId;
     *     GUID LockingTransaction;
     *     DWORDLONG LastLsn;
     *     DWORD TransactionState;
     * } *PTXFS_GET_METADATA_INFO_OUT
     * }
     */
    public static final AddressLayout PTXFS_GET_METADATA_INFO_OUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY {
     *     DWORDLONG Offset;
     *     DWORD NameFlags;
     *     LONGLONG FileId;
     *     DWORD Reserved1;
     *     DWORD Reserved2;
     *     LONGLONG Reserved3;
     *     WCHAR FileName[1];
     * } *PTXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY
     * }
     */
    public static final AddressLayout PTXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TXFS_LIST_TRANSACTION_LOCKED_FILES {
     *     GUID KtmTransaction;
     *     DWORDLONG NumberOfFiles;
     *     DWORDLONG BufferSizeRequired;
     *     DWORDLONG Offset;
     * } *PTXFS_LIST_TRANSACTION_LOCKED_FILES
     * }
     */
    public static final AddressLayout PTXFS_LIST_TRANSACTION_LOCKED_FILES = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TXFS_LIST_TRANSACTIONS_ENTRY {
     *     GUID TransactionId;
     *     DWORD TransactionState;
     *     DWORD Reserved1;
     *     DWORD Reserved2;
     *     LONGLONG Reserved3;
     * } *PTXFS_LIST_TRANSACTIONS_ENTRY
     * }
     */
    public static final AddressLayout PTXFS_LIST_TRANSACTIONS_ENTRY = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TXFS_LIST_TRANSACTIONS {
     *     DWORDLONG NumberOfTransactions;
     *     DWORDLONG BufferSizeRequired;
     * } *PTXFS_LIST_TRANSACTIONS
     * }
     */
    public static final AddressLayout PTXFS_LIST_TRANSACTIONS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TXFS_READ_BACKUP_INFORMATION_OUT {
     *     union {
     *         DWORD BufferLength;
     *         BYTE Buffer[1];
     *     };
     * } *PTXFS_READ_BACKUP_INFORMATION_OUT
     * }
     */
    public static final AddressLayout PTXFS_READ_BACKUP_INFORMATION_OUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TXFS_WRITE_BACKUP_INFORMATION {
     *     BYTE Buffer[1];
     * } *PTXFS_WRITE_BACKUP_INFORMATION
     * }
     */
    public static final AddressLayout PTXFS_WRITE_BACKUP_INFORMATION = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TXFS_GET_TRANSACTED_VERSION {
     *     DWORD ThisBaseVersion;
     *     DWORD LatestVersion;
     *     WORD ThisMiniVersion;
     *     WORD FirstMiniVersion;
     *     WORD LatestMiniVersion;
     * } *PTXFS_GET_TRANSACTED_VERSION
     * }
     */
    public static final AddressLayout PTXFS_GET_TRANSACTED_VERSION = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TXFS_SAVEPOINT_INFORMATION {
     *     HANDLE KtmTransaction;
     *     DWORD ActionCode;
     *     DWORD SavepointId;
     * } *PTXFS_SAVEPOINT_INFORMATION
     * }
     */
    public static final AddressLayout PTXFS_SAVEPOINT_INFORMATION = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TXFS_CREATE_MINIVERSION_INFO {
     *     WORD StructureVersion;
     *     WORD StructureLength;
     *     DWORD BaseVersion;
     *     WORD MiniVersion;
     * } *PTXFS_CREATE_MINIVERSION_INFO
     * }
     */
    public static final AddressLayout PTXFS_CREATE_MINIVERSION_INFO = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TXFS_TRANSACTION_ACTIVE_INFO {
     *     BOOLEAN TransactionsActiveAtSnapshot;
     * } *PTXFS_TRANSACTION_ACTIVE_INFO
     * }
     */
    public static final AddressLayout PTXFS_TRANSACTION_ACTIVE_INFO = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _BOOT_AREA_INFO {
     *     DWORD BootSectorCount;
     *     struct {
     *         LARGE_INTEGER Offset;
     *     } BootSectors[2];
     * } *PBOOT_AREA_INFO
     * }
     */
    public static final AddressLayout PBOOT_AREA_INFO = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RETRIEVAL_POINTER_BASE {
     *     LARGE_INTEGER FileAreaOffset;
     * } *PRETRIEVAL_POINTER_BASE
     * }
     */
    public static final AddressLayout PRETRIEVAL_POINTER_BASE = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_FS_PERSISTENT_VOLUME_INFORMATION {
     *     DWORD VolumeFlags;
     *     DWORD FlagMask;
     *     DWORD Version;
     *     DWORD Reserved;
     * } *PFILE_FS_PERSISTENT_VOLUME_INFORMATION
     * }
     */
    public static final AddressLayout PFILE_FS_PERSISTENT_VOLUME_INFORMATION = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_SYSTEM_RECOGNITION_INFORMATION {
     *     CHAR FileSystem[9];
     * } *PFILE_SYSTEM_RECOGNITION_INFORMATION
     * }
     */
    public static final AddressLayout PFILE_SYSTEM_RECOGNITION_INFORMATION = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _REQUEST_OPLOCK_INPUT_BUFFER {
     *     WORD StructureVersion;
     *     WORD StructureLength;
     *     DWORD RequestedOplockLevel;
     *     DWORD Flags;
     * } *PREQUEST_OPLOCK_INPUT_BUFFER
     * }
     */
    public static final AddressLayout PREQUEST_OPLOCK_INPUT_BUFFER = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _REQUEST_OPLOCK_OUTPUT_BUFFER {
     *     WORD StructureVersion;
     *     WORD StructureLength;
     *     DWORD OriginalOplockLevel;
     *     DWORD NewOplockLevel;
     *     DWORD Flags;
     *     ACCESS_MASK AccessMode;
     *     WORD ShareMode;
     * } *PREQUEST_OPLOCK_OUTPUT_BUFFER
     * }
     */
    public static final AddressLayout PREQUEST_OPLOCK_OUTPUT_BUFFER = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _VIRTUAL_STORAGE_TYPE {
     *     DWORD DeviceId;
     *     GUID VendorId;
     * } *PVIRTUAL_STORAGE_TYPE
     * }
     */
    public static final AddressLayout PVIRTUAL_STORAGE_TYPE = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST {
     *     DWORD RequestLevel;
     *     DWORD RequestFlags;
     * } *PSTORAGE_QUERY_DEPENDENT_VOLUME_REQUEST
     * }
     */
    public static final AddressLayout PSTORAGE_QUERY_DEPENDENT_VOLUME_REQUEST = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY {
     *     DWORD EntryLength;
     *     DWORD DependencyTypeFlags;
     *     DWORD ProviderSpecificFlags;
     *     VIRTUAL_STORAGE_TYPE VirtualStorageType;
     * } *PSTORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY
     * }
     */
    public static final AddressLayout PSTORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY {
     *     DWORD EntryLength;
     *     DWORD DependencyTypeFlags;
     *     DWORD ProviderSpecificFlags;
     *     VIRTUAL_STORAGE_TYPE VirtualStorageType;
     *     DWORD AncestorLevel;
     *     DWORD HostVolumeNameOffset;
     *     DWORD HostVolumeNameSize;
     *     DWORD DependentVolumeNameOffset;
     *     DWORD DependentVolumeNameSize;
     *     DWORD RelativePathOffset;
     *     DWORD RelativePathSize;
     *     DWORD DependentDeviceNameOffset;
     *     DWORD DependentDeviceNameSize;
     * } *PSTORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY
     * }
     */
    public static final AddressLayout PSTORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE {
     *     DWORD ResponseLevel;
     *     DWORD NumberEntries;
     *     union {
     *         STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY Lev1Depends[];
     *         STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY Lev2Depends[];
     *     };
     * } *PSTORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE
     * }
     */
    public static final AddressLayout PSTORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SD_CHANGE_MACHINE_SID_INPUT {
     *     WORD CurrentMachineSIDOffset;
     *     WORD CurrentMachineSIDLength;
     *     WORD NewMachineSIDOffset;
     *     WORD NewMachineSIDLength;
     * } *PSD_CHANGE_MACHINE_SID_INPUT
     * }
     */
    public static final AddressLayout PSD_CHANGE_MACHINE_SID_INPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SD_CHANGE_MACHINE_SID_OUTPUT {
     *     DWORDLONG NumSDChangedSuccess;
     *     DWORDLONG NumSDChangedFail;
     *     DWORDLONG NumSDUnused;
     *     DWORDLONG NumSDTotal;
     *     DWORDLONG NumMftSDChangedSuccess;
     *     DWORDLONG NumMftSDChangedFail;
     *     DWORDLONG NumMftSDTotal;
     * } *PSD_CHANGE_MACHINE_SID_OUTPUT
     * }
     */
    public static final AddressLayout PSD_CHANGE_MACHINE_SID_OUTPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SD_QUERY_STATS_INPUT {
     *     DWORD Reserved;
     * } *PSD_QUERY_STATS_INPUT
     * }
     */
    public static final AddressLayout PSD_QUERY_STATS_INPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SD_QUERY_STATS_OUTPUT {
     *     DWORDLONG SdsStreamSize;
     *     DWORDLONG SdsAllocationSize;
     *     DWORDLONG SiiStreamSize;
     *     DWORDLONG SiiAllocationSize;
     *     DWORDLONG SdhStreamSize;
     *     DWORDLONG SdhAllocationSize;
     *     DWORDLONG NumSDTotal;
     *     DWORDLONG NumSDUnused;
     * } *PSD_QUERY_STATS_OUTPUT
     * }
     */
    public static final AddressLayout PSD_QUERY_STATS_OUTPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SD_ENUM_SDS_INPUT {
     *     DWORDLONG StartingOffset;
     *     DWORDLONG MaxSDEntriesToReturn;
     * } *PSD_ENUM_SDS_INPUT
     * }
     */
    public static final AddressLayout PSD_ENUM_SDS_INPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SD_ENUM_SDS_ENTRY {
     *     DWORD Hash;
     *     DWORD SecurityId;
     *     DWORDLONG Offset;
     *     DWORD Length;
     *     BYTE Descriptor[1];
     * } *PSD_ENUM_SDS_ENTRY
     * }
     */
    public static final AddressLayout PSD_ENUM_SDS_ENTRY = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SD_ENUM_SDS_OUTPUT {
     *     DWORDLONG NextOffset;
     *     DWORDLONG NumSDEntriesReturned;
     *     DWORDLONG NumSDBytesReturned;
     *     SD_ENUM_SDS_ENTRY SDEntry[1];
     * } *PSD_ENUM_SDS_OUTPUT
     * }
     */
    public static final AddressLayout PSD_ENUM_SDS_OUTPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SD_GLOBAL_CHANGE_INPUT {
     *     DWORD Flags;
     *     DWORD ChangeType;
     *     union {
     *         SD_CHANGE_MACHINE_SID_INPUT SdChange;
     *         SD_QUERY_STATS_INPUT SdQueryStats;
     *         SD_ENUM_SDS_INPUT SdEnumSds;
     *     };
     * } *PSD_GLOBAL_CHANGE_INPUT
     * }
     */
    public static final AddressLayout PSD_GLOBAL_CHANGE_INPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SD_GLOBAL_CHANGE_OUTPUT {
     *     DWORD Flags;
     *     DWORD ChangeType;
     *     union {
     *         SD_CHANGE_MACHINE_SID_OUTPUT SdChange;
     *         SD_QUERY_STATS_OUTPUT SdQueryStats;
     *         SD_ENUM_SDS_OUTPUT SdEnumSds;
     *     };
     * } *PSD_GLOBAL_CHANGE_OUTPUT
     * }
     */
    public static final AddressLayout PSD_GLOBAL_CHANGE_OUTPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _LOOKUP_STREAM_FROM_CLUSTER_INPUT {
     *     DWORD Flags;
     *     DWORD NumberOfClusters;
     *     LARGE_INTEGER Cluster[1];
     * } *PLOOKUP_STREAM_FROM_CLUSTER_INPUT
     * }
     */
    public static final AddressLayout PLOOKUP_STREAM_FROM_CLUSTER_INPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _LOOKUP_STREAM_FROM_CLUSTER_OUTPUT {
     *     DWORD Offset;
     *     DWORD NumberOfMatches;
     *     DWORD BufferSizeRequired;
     * } *PLOOKUP_STREAM_FROM_CLUSTER_OUTPUT
     * }
     */
    public static final AddressLayout PLOOKUP_STREAM_FROM_CLUSTER_OUTPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _LOOKUP_STREAM_FROM_CLUSTER_ENTRY {
     *     DWORD OffsetToNext;
     *     DWORD Flags;
     *     LARGE_INTEGER Reserved;
     *     LARGE_INTEGER Cluster;
     *     WCHAR FileName[1];
     * } *PLOOKUP_STREAM_FROM_CLUSTER_ENTRY
     * }
     */
    public static final AddressLayout PLOOKUP_STREAM_FROM_CLUSTER_ENTRY = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_TYPE_NOTIFICATION_INPUT {
     *     DWORD Flags;
     *     DWORD NumFileTypeIDs;
     *     GUID FileTypeID[1];
     * } *PFILE_TYPE_NOTIFICATION_INPUT
     * }
     */
    public static final AddressLayout PFILE_TYPE_NOTIFICATION_INPUT = C_POINTER;

    private static class FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE
     * }
     */
    public static GroupLayout FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE$layout() {
        return FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE
     * }
     */
    public static MemorySegment FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE() {
        return FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE
     * }
     */
    public static void FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE$constants.SEGMENT, 0L, FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE$constants.LAYOUT.byteSize());
    }

    private static class FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE
     * }
     */
    public static GroupLayout FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE$layout() {
        return FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE
     * }
     */
    public static MemorySegment FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE() {
        return FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE
     * }
     */
    public static void FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE$constants.SEGMENT, 0L, FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE$constants.LAYOUT.byteSize());
    }

    private static class FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE
     * }
     */
    public static GroupLayout FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE$layout() {
        return FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE
     * }
     */
    public static MemorySegment FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE() {
        return FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE
     * }
     */
    public static void FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE$constants.SEGMENT, 0L, FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef struct _CSV_MGMT_LOCK {
     *     DWORD Flags;
     * } *PCSV_MGMT_LOCK
     * }
     */
    public static final AddressLayout PCSV_MGMT_LOCK = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CSV_NAMESPACE_INFO {
     *     DWORD Version;
     *     DWORD DeviceNumber;
     *     LARGE_INTEGER StartingOffset;
     *     DWORD SectorSize;
     * } *PCSV_NAMESPACE_INFO
     * }
     */
    public static final AddressLayout PCSV_NAMESPACE_INFO = C_POINTER;
    private static final int CsvControlStartRedirectFile = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _CSV_CONTROL_OP.CsvControlStartRedirectFile = 2
     * }
     */
    public static int CsvControlStartRedirectFile() {
        return CsvControlStartRedirectFile;
    }
    private static final int CsvControlStopRedirectFile = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _CSV_CONTROL_OP.CsvControlStopRedirectFile = 3
     * }
     */
    public static int CsvControlStopRedirectFile() {
        return CsvControlStopRedirectFile;
    }
    private static final int CsvControlQueryRedirectState = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _CSV_CONTROL_OP.CsvControlQueryRedirectState = 4
     * }
     */
    public static int CsvControlQueryRedirectState() {
        return CsvControlQueryRedirectState;
    }
    private static final int CsvControlQueryFileRevision = (int)6L;
    /**
     * {@snippet lang=c :
     * enum _CSV_CONTROL_OP.CsvControlQueryFileRevision = 6
     * }
     */
    public static int CsvControlQueryFileRevision() {
        return CsvControlQueryFileRevision;
    }
    private static final int CsvControlQueryMdsPath = (int)8L;
    /**
     * {@snippet lang=c :
     * enum _CSV_CONTROL_OP.CsvControlQueryMdsPath = 8
     * }
     */
    public static int CsvControlQueryMdsPath() {
        return CsvControlQueryMdsPath;
    }
    private static final int CsvControlQueryFileRevisionFileId128 = (int)9L;
    /**
     * {@snippet lang=c :
     * enum _CSV_CONTROL_OP.CsvControlQueryFileRevisionFileId128 = 9
     * }
     */
    public static int CsvControlQueryFileRevisionFileId128() {
        return CsvControlQueryFileRevisionFileId128;
    }
    private static final int CsvControlQueryVolumeRedirectState = (int)10L;
    /**
     * {@snippet lang=c :
     * enum _CSV_CONTROL_OP.CsvControlQueryVolumeRedirectState = 10
     * }
     */
    public static int CsvControlQueryVolumeRedirectState() {
        return CsvControlQueryVolumeRedirectState;
    }
    private static final int CsvControlEnableUSNRangeModificationTracking = (int)13L;
    /**
     * {@snippet lang=c :
     * enum _CSV_CONTROL_OP.CsvControlEnableUSNRangeModificationTracking = 13
     * }
     */
    public static int CsvControlEnableUSNRangeModificationTracking() {
        return CsvControlEnableUSNRangeModificationTracking;
    }
    private static final int CsvControlMarkHandleLocalVolumeMount = (int)14L;
    /**
     * {@snippet lang=c :
     * enum _CSV_CONTROL_OP.CsvControlMarkHandleLocalVolumeMount = 14
     * }
     */
    public static int CsvControlMarkHandleLocalVolumeMount() {
        return CsvControlMarkHandleLocalVolumeMount;
    }
    private static final int CsvControlUnmarkHandleLocalVolumeMount = (int)15L;
    /**
     * {@snippet lang=c :
     * enum _CSV_CONTROL_OP.CsvControlUnmarkHandleLocalVolumeMount = 15
     * }
     */
    public static int CsvControlUnmarkHandleLocalVolumeMount() {
        return CsvControlUnmarkHandleLocalVolumeMount;
    }
    private static final int CsvControlGetCsvFsMdsPathV2 = (int)18L;
    /**
     * {@snippet lang=c :
     * enum _CSV_CONTROL_OP.CsvControlGetCsvFsMdsPathV2 = 18
     * }
     */
    public static int CsvControlGetCsvFsMdsPathV2() {
        return CsvControlGetCsvFsMdsPathV2;
    }
    private static final int CsvControlDisableCaching = (int)19L;
    /**
     * {@snippet lang=c :
     * enum _CSV_CONTROL_OP.CsvControlDisableCaching = 19
     * }
     */
    public static int CsvControlDisableCaching() {
        return CsvControlDisableCaching;
    }
    private static final int CsvControlEnableCaching = (int)20L;
    /**
     * {@snippet lang=c :
     * enum _CSV_CONTROL_OP.CsvControlEnableCaching = 20
     * }
     */
    public static int CsvControlEnableCaching() {
        return CsvControlEnableCaching;
    }
    private static final int CsvControlStartForceDFO = (int)21L;
    /**
     * {@snippet lang=c :
     * enum _CSV_CONTROL_OP.CsvControlStartForceDFO = 21
     * }
     */
    public static int CsvControlStartForceDFO() {
        return CsvControlStartForceDFO;
    }
    private static final int CsvControlStopForceDFO = (int)22L;
    /**
     * {@snippet lang=c :
     * enum _CSV_CONTROL_OP.CsvControlStopForceDFO = 22
     * }
     */
    public static int CsvControlStopForceDFO() {
        return CsvControlStopForceDFO;
    }
    private static final int CsvControlQueryMdsPathNoPause = (int)23L;
    /**
     * {@snippet lang=c :
     * enum _CSV_CONTROL_OP.CsvControlQueryMdsPathNoPause = 23
     * }
     */
    public static int CsvControlQueryMdsPathNoPause() {
        return CsvControlQueryMdsPathNoPause;
    }
    private static final int CsvControlSetVolumeId = (int)24L;
    /**
     * {@snippet lang=c :
     * enum _CSV_CONTROL_OP.CsvControlSetVolumeId = 24
     * }
     */
    public static int CsvControlSetVolumeId() {
        return CsvControlSetVolumeId;
    }
    private static final int CsvControlQueryVolumeId = (int)25L;
    /**
     * {@snippet lang=c :
     * enum _CSV_CONTROL_OP.CsvControlQueryVolumeId = 25
     * }
     */
    public static int CsvControlQueryVolumeId() {
        return CsvControlQueryVolumeId;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _CSV_CONTROL_OP {
     *     CsvControlStartRedirectFile = 2,
     *     CsvControlStopRedirectFile = 3,
     *     CsvControlQueryRedirectState = 4,
     *     CsvControlQueryFileRevision = 6,
     *     CsvControlQueryMdsPath = 8,
     *     CsvControlQueryFileRevisionFileId128 = 9,
     *     CsvControlQueryVolumeRedirectState = 10,
     *     CsvControlEnableUSNRangeModificationTracking = 13,
     *     CsvControlMarkHandleLocalVolumeMount = 14,
     *     CsvControlUnmarkHandleLocalVolumeMount = 15,
     *     CsvControlGetCsvFsMdsPathV2 = 18,
     *     CsvControlDisableCaching = 19,
     *     CsvControlEnableCaching = 20,
     *     CsvControlStartForceDFO = 21,
     *     CsvControlStopForceDFO = 22,
     *     CsvControlQueryMdsPathNoPause = 23,
     *     CsvControlSetVolumeId = 24,
     *     CsvControlQueryVolumeId = 25
     * } *PCSV_CONTROL_OP
     * }
     */
    public static final AddressLayout PCSV_CONTROL_OP = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CSV_CONTROL_PARAM {
     *     CSV_CONTROL_OP Operation;
     *     LONGLONG Unused;
     * } *PCSV_CONTROL_PARAM
     * }
     */
    public static final AddressLayout PCSV_CONTROL_PARAM = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CSV_QUERY_REDIRECT_STATE {
     *     DWORD MdsNodeId;
     *     DWORD DsNodeId;
     *     BOOLEAN FileRedirected;
     * } *PCSV_QUERY_REDIRECT_STATE
     * }
     */
    public static final AddressLayout PCSV_QUERY_REDIRECT_STATE = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CSV_QUERY_FILE_REVISION {
     *     LONGLONG FileId;
     *     LONGLONG FileRevision[3];
     * } *PCSV_QUERY_FILE_REVISION
     * }
     */
    public static final AddressLayout PCSV_QUERY_FILE_REVISION = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CSV_QUERY_FILE_REVISION_FILE_ID_128 {
     *     FILE_ID_128 FileId;
     *     LONGLONG FileRevision[3];
     * } *PCSV_QUERY_FILE_REVISION_FILE_ID_128
     * }
     */
    public static final AddressLayout PCSV_QUERY_FILE_REVISION_FILE_ID_128 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CSV_QUERY_MDS_PATH {
     *     DWORD MdsNodeId;
     *     DWORD DsNodeId;
     *     DWORD PathLength;
     *     WCHAR Path[1];
     * } *PCSV_QUERY_MDS_PATH
     * }
     */
    public static final AddressLayout PCSV_QUERY_MDS_PATH = C_POINTER;
    private static final int CsvFsDiskConnectivityNone = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _CSVFS_DISK_CONNECTIVITY.CsvFsDiskConnectivityNone = 0
     * }
     */
    public static int CsvFsDiskConnectivityNone() {
        return CsvFsDiskConnectivityNone;
    }
    private static final int CsvFsDiskConnectivityMdsNodeOnly = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _CSVFS_DISK_CONNECTIVITY.CsvFsDiskConnectivityMdsNodeOnly = 1
     * }
     */
    public static int CsvFsDiskConnectivityMdsNodeOnly() {
        return CsvFsDiskConnectivityMdsNodeOnly;
    }
    private static final int CsvFsDiskConnectivitySubsetOfNodes = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _CSVFS_DISK_CONNECTIVITY.CsvFsDiskConnectivitySubsetOfNodes = 2
     * }
     */
    public static int CsvFsDiskConnectivitySubsetOfNodes() {
        return CsvFsDiskConnectivitySubsetOfNodes;
    }
    private static final int CsvFsDiskConnectivityAllNodes = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _CSVFS_DISK_CONNECTIVITY.CsvFsDiskConnectivityAllNodes = 3
     * }
     */
    public static int CsvFsDiskConnectivityAllNodes() {
        return CsvFsDiskConnectivityAllNodes;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _CSVFS_DISK_CONNECTIVITY {
     *     CsvFsDiskConnectivityNone = 0,
     *     CsvFsDiskConnectivityMdsNodeOnly = 1,
     *     CsvFsDiskConnectivitySubsetOfNodes = 2,
     *     CsvFsDiskConnectivityAllNodes = 3
     * } *PCSVFS_DISK_CONNECTIVITY
     * }
     */
    public static final AddressLayout PCSVFS_DISK_CONNECTIVITY = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CSV_QUERY_VOLUME_REDIRECT_STATE {
     *     DWORD MdsNodeId;
     *     DWORD DsNodeId;
     *     BOOLEAN IsDiskConnected;
     *     BOOLEAN ClusterEnableDirectIo;
     *     CSVFS_DISK_CONNECTIVITY DiskConnectivity;
     * } *PCSV_QUERY_VOLUME_REDIRECT_STATE
     * }
     */
    public static final AddressLayout PCSV_QUERY_VOLUME_REDIRECT_STATE = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CSV_QUERY_MDS_PATH_V2 {
     *     LONGLONG Version;
     *     DWORD RequiredSize;
     *     DWORD MdsNodeId;
     *     DWORD DsNodeId;
     *     DWORD Flags;
     *     CSVFS_DISK_CONNECTIVITY DiskConnectivity;
     *     GUID VolumeId;
     *     DWORD IpAddressOffset;
     *     DWORD IpAddressLength;
     *     DWORD PathOffset;
     *     DWORD PathLength;
     * } *PCSV_QUERY_MDS_PATH_V2
     * }
     */
    public static final AddressLayout PCSV_QUERY_MDS_PATH_V2 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CSV_SET_VOLUME_ID {
     *     GUID VolumeId;
     * } *PCSV_SET_VOLUME_ID
     * }
     */
    public static final AddressLayout PCSV_SET_VOLUME_ID = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CSV_QUERY_VOLUME_ID {
     *     GUID VolumeId;
     * } *PCSV_QUERY_VOLUME_ID
     * }
     */
    public static final AddressLayout PCSV_QUERY_VOLUME_ID = C_POINTER;
    private static final int LMRQuerySessionInfo = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _LMR_QUERY_INFO_CLASS.LMRQuerySessionInfo = 1
     * }
     */
    public static int LMRQuerySessionInfo() {
        return LMRQuerySessionInfo;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _LMR_QUERY_INFO_CLASS {
     *     LMRQuerySessionInfo = 1
     * } *PLMR_QUERY_INFO_CLASS
     * }
     */
    public static final AddressLayout PLMR_QUERY_INFO_CLASS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _LMR_QUERY_INFO_PARAM {
     *     LMR_QUERY_INFO_CLASS Operation;
     * } *PLMR_QUERY_INFO_PARAM
     * }
     */
    public static final AddressLayout PLMR_QUERY_INFO_PARAM = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _LMR_QUERY_SESSION_INFO {
     *     UINT64 SessionId;
     * } *PLMR_QUERY_SESSION_INFO
     * }
     */
    public static final AddressLayout PLMR_QUERY_SESSION_INFO = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT {
     *     DWORDLONG VetoedFromAltitudeIntegral;
     *     DWORDLONG VetoedFromAltitudeDecimal;
     *     WCHAR Reason[256];
     * } *PCSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT
     * }
     */
    public static final AddressLayout PCSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT = C_POINTER;
    private static final int StorageReserveIdNone = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_RESERVE_ID.StorageReserveIdNone = 0
     * }
     */
    public static int StorageReserveIdNone() {
        return StorageReserveIdNone;
    }
    private static final int StorageReserveIdHard = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_RESERVE_ID.StorageReserveIdHard = 1
     * }
     */
    public static int StorageReserveIdHard() {
        return StorageReserveIdHard;
    }
    private static final int StorageReserveIdSoft = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_RESERVE_ID.StorageReserveIdSoft = 2
     * }
     */
    public static int StorageReserveIdSoft() {
        return StorageReserveIdSoft;
    }
    private static final int StorageReserveIdUpdateScratch = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_RESERVE_ID.StorageReserveIdUpdateScratch = 3
     * }
     */
    public static int StorageReserveIdUpdateScratch() {
        return StorageReserveIdUpdateScratch;
    }
    private static final int StorageReserveIdMax = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_RESERVE_ID.StorageReserveIdMax = 4
     * }
     */
    public static int StorageReserveIdMax() {
        return StorageReserveIdMax;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _STORAGE_RESERVE_ID {
     *     StorageReserveIdNone = 0,
     *     StorageReserveIdHard,
     *     StorageReserveIdSoft,
     *     StorageReserveIdUpdateScratch,
     *     StorageReserveIdMax
     * } *PSTORAGE_RESERVE_ID
     * }
     */
    public static final AddressLayout PSTORAGE_RESERVE_ID = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CSV_IS_OWNED_BY_CSVFS {
     *     BOOLEAN OwnedByCSVFS;
     * } *PCSV_IS_OWNED_BY_CSVFS
     * }
     */
    public static final AddressLayout PCSV_IS_OWNED_BY_CSVFS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_LEVEL_TRIM_RANGE {
     *     DWORDLONG Offset;
     *     DWORDLONG Length;
     * } *PFILE_LEVEL_TRIM_RANGE
     * }
     */
    public static final AddressLayout PFILE_LEVEL_TRIM_RANGE = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_LEVEL_TRIM {
     *     DWORD Key;
     *     DWORD NumRanges;
     *     FILE_LEVEL_TRIM_RANGE Ranges[1];
     * } *PFILE_LEVEL_TRIM
     * }
     */
    public static final AddressLayout PFILE_LEVEL_TRIM = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_LEVEL_TRIM_OUTPUT {
     *     DWORD NumRangesProcessed;
     * } *PFILE_LEVEL_TRIM_OUTPUT
     * }
     */
    public static final AddressLayout PFILE_LEVEL_TRIM_OUTPUT = C_POINTER;
    private static final int QUERY_FILE_LAYOUT_FILTER_TYPE_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _QUERY_FILE_LAYOUT_FILTER_TYPE.QUERY_FILE_LAYOUT_FILTER_TYPE_NONE = 0
     * }
     */
    public static int QUERY_FILE_LAYOUT_FILTER_TYPE_NONE() {
        return QUERY_FILE_LAYOUT_FILTER_TYPE_NONE;
    }
    private static final int QUERY_FILE_LAYOUT_FILTER_TYPE_CLUSTERS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _QUERY_FILE_LAYOUT_FILTER_TYPE.QUERY_FILE_LAYOUT_FILTER_TYPE_CLUSTERS = 1
     * }
     */
    public static int QUERY_FILE_LAYOUT_FILTER_TYPE_CLUSTERS() {
        return QUERY_FILE_LAYOUT_FILTER_TYPE_CLUSTERS;
    }
    private static final int QUERY_FILE_LAYOUT_FILTER_TYPE_FILEID = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _QUERY_FILE_LAYOUT_FILTER_TYPE.QUERY_FILE_LAYOUT_FILTER_TYPE_FILEID = 2
     * }
     */
    public static int QUERY_FILE_LAYOUT_FILTER_TYPE_FILEID() {
        return QUERY_FILE_LAYOUT_FILTER_TYPE_FILEID;
    }
    private static final int QUERY_FILE_LAYOUT_FILTER_TYPE_STORAGE_RESERVE_ID = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _QUERY_FILE_LAYOUT_FILTER_TYPE.QUERY_FILE_LAYOUT_FILTER_TYPE_STORAGE_RESERVE_ID = 3
     * }
     */
    public static int QUERY_FILE_LAYOUT_FILTER_TYPE_STORAGE_RESERVE_ID() {
        return QUERY_FILE_LAYOUT_FILTER_TYPE_STORAGE_RESERVE_ID;
    }
    private static final int QUERY_FILE_LAYOUT_NUM_FILTER_TYPES = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _QUERY_FILE_LAYOUT_FILTER_TYPE.QUERY_FILE_LAYOUT_NUM_FILTER_TYPES = 4
     * }
     */
    public static int QUERY_FILE_LAYOUT_NUM_FILTER_TYPES() {
        return QUERY_FILE_LAYOUT_NUM_FILTER_TYPES;
    }
    /**
     * {@snippet lang=c :
     * typedef struct _CLUSTER_RANGE {
     *     LARGE_INTEGER StartingCluster;
     *     LARGE_INTEGER ClusterCount;
     * } *PCLUSTER_RANGE
     * }
     */
    public static final AddressLayout PCLUSTER_RANGE = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_REFERENCE_RANGE {
     *     DWORDLONG StartingFileReferenceNumber;
     *     DWORDLONG EndingFileReferenceNumber;
     * } *PFILE_REFERENCE_RANGE
     * }
     */
    public static final AddressLayout PFILE_REFERENCE_RANGE = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _QUERY_FILE_LAYOUT_INPUT {
     *     union {
     *         DWORD FilterEntryCount;
     *         DWORD NumberOfPairs;
     *     };
     *     DWORD Flags;
     *     QUERY_FILE_LAYOUT_FILTER_TYPE FilterType;
     *     DWORD Reserved;
     *     union {
     *         CLUSTER_RANGE ClusterRanges[1];
     *         FILE_REFERENCE_RANGE FileReferenceRanges[1];
     *         STORAGE_RESERVE_ID StorageReserveIds[1];
     *     } Filter;
     * } *PQUERY_FILE_LAYOUT_INPUT
     * }
     */
    public static final AddressLayout PQUERY_FILE_LAYOUT_INPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _QUERY_FILE_LAYOUT_OUTPUT {
     *     DWORD FileEntryCount;
     *     DWORD FirstFileOffset;
     *     DWORD Flags;
     *     DWORD Reserved;
     * } *PQUERY_FILE_LAYOUT_OUTPUT
     * }
     */
    public static final AddressLayout PQUERY_FILE_LAYOUT_OUTPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_LAYOUT_ENTRY {
     *     DWORD Version;
     *     DWORD NextFileOffset;
     *     DWORD Flags;
     *     DWORD FileAttributes;
     *     DWORDLONG FileReferenceNumber;
     *     DWORD FirstNameOffset;
     *     DWORD FirstStreamOffset;
     *     DWORD ExtraInfoOffset;
     *     DWORD ExtraInfoLength;
     * } *PFILE_LAYOUT_ENTRY
     * }
     */
    public static final AddressLayout PFILE_LAYOUT_ENTRY = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_LAYOUT_NAME_ENTRY {
     *     DWORD NextNameOffset;
     *     DWORD Flags;
     *     DWORDLONG ParentFileReferenceNumber;
     *     DWORD FileNameLength;
     *     DWORD Reserved;
     *     WCHAR FileName[1];
     * } *PFILE_LAYOUT_NAME_ENTRY
     * }
     */
    public static final AddressLayout PFILE_LAYOUT_NAME_ENTRY = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_LAYOUT_INFO_ENTRY {
     *     struct {
     *         LARGE_INTEGER CreationTime;
     *         LARGE_INTEGER LastAccessTime;
     *         LARGE_INTEGER LastWriteTime;
     *         LARGE_INTEGER ChangeTime;
     *         DWORD FileAttributes;
     *     } BasicInformation;
     *     DWORD OwnerId;
     *     DWORD SecurityId;
     *     USN Usn;
     *     STORAGE_RESERVE_ID StorageReserveId;
     * } *PFILE_LAYOUT_INFO_ENTRY
     * }
     */
    public static final AddressLayout PFILE_LAYOUT_INFO_ENTRY = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STREAM_LAYOUT_ENTRY {
     *     DWORD Version;
     *     DWORD NextStreamOffset;
     *     DWORD Flags;
     *     DWORD ExtentInformationOffset;
     *     LARGE_INTEGER AllocationSize;
     *     LARGE_INTEGER EndOfFile;
     *     DWORD StreamInformationOffset;
     *     DWORD AttributeTypeCode;
     *     DWORD AttributeFlags;
     *     DWORD StreamIdentifierLength;
     *     WCHAR StreamIdentifier[1];
     * } *PSTREAM_LAYOUT_ENTRY
     * }
     */
    public static final AddressLayout PSTREAM_LAYOUT_ENTRY = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STREAM_EXTENT_ENTRY {
     *     DWORD Flags;
     *     union {
     *         RETRIEVAL_POINTERS_BUFFER RetrievalPointers;
     *     } ExtentInformation;
     * } *PSTREAM_EXTENT_ENTRY
     * }
     */
    public static final AddressLayout PSTREAM_EXTENT_ENTRY = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FSCTL_GET_INTEGRITY_INFORMATION_BUFFER {
     *     WORD ChecksumAlgorithm;
     *     WORD Reserved;
     *     DWORD Flags;
     *     DWORD ChecksumChunkSizeInBytes;
     *     DWORD ClusterSizeInBytes;
     * } *PFSCTL_GET_INTEGRITY_INFORMATION_BUFFER
     * }
     */
    public static final AddressLayout PFSCTL_GET_INTEGRITY_INFORMATION_BUFFER = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER {
     *     WORD ChecksumAlgorithm;
     *     WORD Reserved;
     *     DWORD Flags;
     * } *PFSCTL_SET_INTEGRITY_INFORMATION_BUFFER
     * }
     */
    public static final AddressLayout PFSCTL_SET_INTEGRITY_INFORMATION_BUFFER = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX {
     *     BYTE EnableIntegrity;
     *     BYTE KeepIntegrityStateUnchanged;
     *     WORD Reserved;
     *     DWORD Flags;
     *     BYTE Version;
     *     BYTE Reserved2[7];
     * } *PFSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX
     * }
     */
    public static final AddressLayout PFSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FSCTL_OFFLOAD_READ_INPUT {
     *     DWORD Size;
     *     DWORD Flags;
     *     DWORD TokenTimeToLive;
     *     DWORD Reserved;
     *     DWORDLONG FileOffset;
     *     DWORDLONG CopyLength;
     * } *PFSCTL_OFFLOAD_READ_INPUT
     * }
     */
    public static final AddressLayout PFSCTL_OFFLOAD_READ_INPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FSCTL_OFFLOAD_READ_OUTPUT {
     *     DWORD Size;
     *     DWORD Flags;
     *     DWORDLONG TransferLength;
     *     BYTE Token[512];
     * } *PFSCTL_OFFLOAD_READ_OUTPUT
     * }
     */
    public static final AddressLayout PFSCTL_OFFLOAD_READ_OUTPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FSCTL_OFFLOAD_WRITE_INPUT {
     *     DWORD Size;
     *     DWORD Flags;
     *     DWORDLONG FileOffset;
     *     DWORDLONG CopyLength;
     *     DWORDLONG TransferOffset;
     *     BYTE Token[512];
     * } *PFSCTL_OFFLOAD_WRITE_INPUT
     * }
     */
    public static final AddressLayout PFSCTL_OFFLOAD_WRITE_INPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FSCTL_OFFLOAD_WRITE_OUTPUT {
     *     DWORD Size;
     *     DWORD Flags;
     *     DWORDLONG LengthWritten;
     * } *PFSCTL_OFFLOAD_WRITE_OUTPUT
     * }
     */
    public static final AddressLayout PFSCTL_OFFLOAD_WRITE_OUTPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SET_PURGE_FAILURE_MODE_INPUT {
     *     DWORD Flags;
     * } *PSET_PURGE_FAILURE_MODE_INPUT
     * }
     */
    public static final AddressLayout PSET_PURGE_FAILURE_MODE_INPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _REPAIR_COPIES_INPUT {
     *     DWORD Size;
     *     DWORD Flags;
     *     LARGE_INTEGER FileOffset;
     *     DWORD Length;
     *     DWORD SourceCopy;
     *     DWORD NumberOfRepairCopies;
     *     DWORD RepairCopies[1];
     * } *PREPAIR_COPIES_INPUT
     * }
     */
    public static final AddressLayout PREPAIR_COPIES_INPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _REPAIR_COPIES_OUTPUT {
     *     DWORD Size;
     *     DWORD Status;
     *     LARGE_INTEGER ResumeFileOffset;
     * } *PREPAIR_COPIES_OUTPUT
     * }
     */
    public static final AddressLayout PREPAIR_COPIES_OUTPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_REGION_INFO {
     *     LONGLONG FileOffset;
     *     LONGLONG Length;
     *     DWORD Usage;
     *     DWORD Reserved;
     * } *PFILE_REGION_INFO
     * }
     */
    public static final AddressLayout PFILE_REGION_INFO = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_REGION_OUTPUT {
     *     DWORD Flags;
     *     DWORD TotalRegionEntryCount;
     *     DWORD RegionEntryCount;
     *     DWORD Reserved;
     *     FILE_REGION_INFO Region[1];
     * } *PFILE_REGION_OUTPUT
     * }
     */
    public static final AddressLayout PFILE_REGION_OUTPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_REGION_INPUT {
     *     LONGLONG FileOffset;
     *     LONGLONG Length;
     *     DWORD DesiredUsage;
     * } *PFILE_REGION_INPUT
     * }
     */
    public static final AddressLayout PFILE_REGION_INPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _WRITE_USN_REASON_INPUT {
     *     DWORD Flags;
     *     DWORD UsnReasonToWrite;
     * } *PWRITE_USN_REASON_INPUT
     * }
     */
    public static final AddressLayout PWRITE_USN_REASON_INPUT = C_POINTER;
    private static final int FileStorageTierMediaTypeUnspecified = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _FILE_STORAGE_TIER_MEDIA_TYPE.FileStorageTierMediaTypeUnspecified = 0
     * }
     */
    public static int FileStorageTierMediaTypeUnspecified() {
        return FileStorageTierMediaTypeUnspecified;
    }
    private static final int FileStorageTierMediaTypeDisk = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _FILE_STORAGE_TIER_MEDIA_TYPE.FileStorageTierMediaTypeDisk = 1
     * }
     */
    public static int FileStorageTierMediaTypeDisk() {
        return FileStorageTierMediaTypeDisk;
    }
    private static final int FileStorageTierMediaTypeSsd = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _FILE_STORAGE_TIER_MEDIA_TYPE.FileStorageTierMediaTypeSsd = 2
     * }
     */
    public static int FileStorageTierMediaTypeSsd() {
        return FileStorageTierMediaTypeSsd;
    }
    private static final int FileStorageTierMediaTypeScm = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _FILE_STORAGE_TIER_MEDIA_TYPE.FileStorageTierMediaTypeScm = 4
     * }
     */
    public static int FileStorageTierMediaTypeScm() {
        return FileStorageTierMediaTypeScm;
    }
    private static final int FileStorageTierMediaTypeMax = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _FILE_STORAGE_TIER_MEDIA_TYPE.FileStorageTierMediaTypeMax = 5
     * }
     */
    public static int FileStorageTierMediaTypeMax() {
        return FileStorageTierMediaTypeMax;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _FILE_STORAGE_TIER_MEDIA_TYPE {
     *     FileStorageTierMediaTypeUnspecified = 0,
     *     FileStorageTierMediaTypeDisk = 1,
     *     FileStorageTierMediaTypeSsd = 2,
     *     FileStorageTierMediaTypeScm = 4,
     *     FileStorageTierMediaTypeMax
     * } *PFILE_STORAGE_TIER_MEDIA_TYPE
     * }
     */
    public static final AddressLayout PFILE_STORAGE_TIER_MEDIA_TYPE = C_POINTER;
    private static final int FileStorageTierClassUnspecified = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _FILE_STORAGE_TIER_CLASS.FileStorageTierClassUnspecified = 0
     * }
     */
    public static int FileStorageTierClassUnspecified() {
        return FileStorageTierClassUnspecified;
    }
    private static final int FileStorageTierClassCapacity = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _FILE_STORAGE_TIER_CLASS.FileStorageTierClassCapacity = 1
     * }
     */
    public static int FileStorageTierClassCapacity() {
        return FileStorageTierClassCapacity;
    }
    private static final int FileStorageTierClassPerformance = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _FILE_STORAGE_TIER_CLASS.FileStorageTierClassPerformance = 2
     * }
     */
    public static int FileStorageTierClassPerformance() {
        return FileStorageTierClassPerformance;
    }
    private static final int FileStorageTierClassMax = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _FILE_STORAGE_TIER_CLASS.FileStorageTierClassMax = 3
     * }
     */
    public static int FileStorageTierClassMax() {
        return FileStorageTierClassMax;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _FILE_STORAGE_TIER_CLASS {
     *     FileStorageTierClassUnspecified = 0,
     *     FileStorageTierClassCapacity,
     *     FileStorageTierClassPerformance,
     *     FileStorageTierClassMax
     * } *PFILE_STORAGE_TIER_CLASS
     * }
     */
    public static final AddressLayout PFILE_STORAGE_TIER_CLASS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_STORAGE_TIER {
     *     GUID Id;
     *     WCHAR Name[256];
     *     WCHAR Description[256];
     *     DWORDLONG Flags;
     *     DWORDLONG ProvisionedCapacity;
     *     FILE_STORAGE_TIER_MEDIA_TYPE MediaType;
     *     FILE_STORAGE_TIER_CLASS Class;
     * } *PFILE_STORAGE_TIER
     * }
     */
    public static final AddressLayout PFILE_STORAGE_TIER = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FSCTL_QUERY_STORAGE_CLASSES_OUTPUT {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD Flags;
     *     DWORD TotalNumberOfTiers;
     *     DWORD NumberOfTiersReturned;
     *     FILE_STORAGE_TIER Tiers[1];
     * } *PFSCTL_QUERY_STORAGE_CLASSES_OUTPUT
     * }
     */
    public static final AddressLayout PFSCTL_QUERY_STORAGE_CLASSES_OUTPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STREAM_INFORMATION_ENTRY {
     *     DWORD Version;
     *     DWORD Flags;
     *     union _StreamInformation {
     *         struct _DesiredStorageClass {
     *             FILE_STORAGE_TIER_CLASS Class;
     *             DWORD Flags;
     *         } DesiredStorageClass;
     *         struct _DataStream {
     *             WORD Length;
     *             WORD Flags;
     *             DWORD Reserved;
     *             DWORDLONG Vdl;
     *         } DataStream;
     *         struct _Reparse {
     *             WORD Length;
     *             WORD Flags;
     *             DWORD ReparseDataSize;
     *             DWORD ReparseDataOffset;
     *         } Reparse;
     *         struct _Ea {
     *             WORD Length;
     *             WORD Flags;
     *             DWORD EaSize;
     *             DWORD EaInformationOffset;
     *         } Ea;
     *     } StreamInformation;
     * } *PSTREAM_INFORMATION_ENTRY
     * }
     */
    public static final AddressLayout PSTREAM_INFORMATION_ENTRY = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FSCTL_QUERY_REGION_INFO_INPUT {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD Flags;
     *     DWORD NumberOfTierIds;
     *     GUID TierIds[1];
     * } *PFSCTL_QUERY_REGION_INFO_INPUT
     * }
     */
    public static final AddressLayout PFSCTL_QUERY_REGION_INFO_INPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_STORAGE_TIER_REGION {
     *     GUID TierId;
     *     DWORDLONG Offset;
     *     DWORDLONG Length;
     * } *PFILE_STORAGE_TIER_REGION
     * }
     */
    public static final AddressLayout PFILE_STORAGE_TIER_REGION = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FSCTL_QUERY_REGION_INFO_OUTPUT {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD Flags;
     *     DWORD Reserved;
     *     DWORDLONG Alignment;
     *     DWORD TotalNumberOfRegions;
     *     DWORD NumberOfRegionsReturned;
     *     FILE_STORAGE_TIER_REGION Regions[1];
     * } *PFSCTL_QUERY_REGION_INFO_OUTPUT
     * }
     */
    public static final AddressLayout PFSCTL_QUERY_REGION_INFO_OUTPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_DESIRED_STORAGE_CLASS_INFORMATION {
     *     FILE_STORAGE_TIER_CLASS Class;
     *     DWORD Flags;
     * } *PFILE_DESIRED_STORAGE_CLASS_INFORMATION
     * }
     */
    public static final AddressLayout PFILE_DESIRED_STORAGE_CLASS_INFORMATION = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DUPLICATE_EXTENTS_DATA {
     *     HANDLE FileHandle;
     *     LARGE_INTEGER SourceFileOffset;
     *     LARGE_INTEGER TargetFileOffset;
     *     LARGE_INTEGER ByteCount;
     * } *PDUPLICATE_EXTENTS_DATA
     * }
     */
    public static final AddressLayout PDUPLICATE_EXTENTS_DATA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DUPLICATE_EXTENTS_DATA32 {
     *     UINT32 FileHandle;
     *     LARGE_INTEGER SourceFileOffset;
     *     LARGE_INTEGER TargetFileOffset;
     *     LARGE_INTEGER ByteCount;
     * } *PDUPLICATE_EXTENTS_DATA32
     * }
     */
    public static final AddressLayout PDUPLICATE_EXTENTS_DATA32 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DUPLICATE_EXTENTS_DATA_EX {
     *     SIZE_T Size;
     *     HANDLE FileHandle;
     *     LARGE_INTEGER SourceFileOffset;
     *     LARGE_INTEGER TargetFileOffset;
     *     LARGE_INTEGER ByteCount;
     *     DWORD Flags;
     * } *PDUPLICATE_EXTENTS_DATA_EX
     * }
     */
    public static final AddressLayout PDUPLICATE_EXTENTS_DATA_EX = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DUPLICATE_EXTENTS_DATA_EX32 {
     *     DWORD32 Size;
     *     DWORD32 FileHandle;
     *     LARGE_INTEGER SourceFileOffset;
     *     LARGE_INTEGER TargetFileOffset;
     *     LARGE_INTEGER ByteCount;
     *     DWORD Flags;
     * } *PDUPLICATE_EXTENTS_DATA_EX32
     * }
     */
    public static final AddressLayout PDUPLICATE_EXTENTS_DATA_EX32 = C_POINTER;
    private static final int FileSnapStateInactive = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _DUPLICATE_EXTENTS_STATE.FileSnapStateInactive = 0
     * }
     */
    public static int FileSnapStateInactive() {
        return FileSnapStateInactive;
    }
    private static final int FileSnapStateSource = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _DUPLICATE_EXTENTS_STATE.FileSnapStateSource = 1
     * }
     */
    public static int FileSnapStateSource() {
        return FileSnapStateSource;
    }
    private static final int FileSnapStateTarget = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _DUPLICATE_EXTENTS_STATE.FileSnapStateTarget = 2
     * }
     */
    public static int FileSnapStateTarget() {
        return FileSnapStateTarget;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _DUPLICATE_EXTENTS_STATE {
     *     FileSnapStateInactive = 0,
     *     FileSnapStateSource,
     *     FileSnapStateTarget
     * } *PDUPLICATE_EXTENTS_STATE
     * }
     */
    public static final AddressLayout PDUPLICATE_EXTENTS_STATE = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _ASYNC_DUPLICATE_EXTENTS_STATUS {
     *     DWORD Version;
     *     DUPLICATE_EXTENTS_STATE State;
     *     DWORDLONG SourceFileOffset;
     *     DWORDLONG TargetFileOffset;
     *     DWORDLONG ByteCount;
     *     DWORDLONG BytesDuplicated;
     * } *PASYNC_DUPLICATE_EXTENTS_STATUS
     * }
     */
    public static final AddressLayout PASYNC_DUPLICATE_EXTENTS_STATUS = C_POINTER;
    private static final int SmrGcStateInactive = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _REFS_SMR_VOLUME_GC_STATE.SmrGcStateInactive = 0
     * }
     */
    public static int SmrGcStateInactive() {
        return SmrGcStateInactive;
    }
    private static final int SmrGcStatePaused = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _REFS_SMR_VOLUME_GC_STATE.SmrGcStatePaused = 1
     * }
     */
    public static int SmrGcStatePaused() {
        return SmrGcStatePaused;
    }
    private static final int SmrGcStateActive = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _REFS_SMR_VOLUME_GC_STATE.SmrGcStateActive = 2
     * }
     */
    public static int SmrGcStateActive() {
        return SmrGcStateActive;
    }
    private static final int SmrGcStateActiveFullSpeed = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _REFS_SMR_VOLUME_GC_STATE.SmrGcStateActiveFullSpeed = 3
     * }
     */
    public static int SmrGcStateActiveFullSpeed() {
        return SmrGcStateActiveFullSpeed;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _REFS_SMR_VOLUME_GC_STATE {
     *     SmrGcStateInactive = 0,
     *     SmrGcStatePaused = 1,
     *     SmrGcStateActive = 2,
     *     SmrGcStateActiveFullSpeed = 3
     * } *PREFS_SMR_VOLUME_GC_STATE
     * }
     */
    public static final AddressLayout PREFS_SMR_VOLUME_GC_STATE = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _REFS_SMR_VOLUME_INFO_OUTPUT {
     *     DWORD Version;
     *     DWORD Flags;
     *     LARGE_INTEGER SizeOfRandomlyWritableTier;
     *     LARGE_INTEGER FreeSpaceInRandomlyWritableTier;
     *     LARGE_INTEGER SizeofSMRTier;
     *     LARGE_INTEGER FreeSpaceInSMRTier;
     *     LARGE_INTEGER UsableFreeSpaceInSMRTier;
     *     REFS_SMR_VOLUME_GC_STATE VolumeGcState;
     *     DWORD VolumeGcLastStatus;
     *     DWORD CurrentGcBandFillPercentage;
     *     DWORDLONG Unused[6];
     * } *PREFS_SMR_VOLUME_INFO_OUTPUT
     * }
     */
    public static final AddressLayout PREFS_SMR_VOLUME_INFO_OUTPUT = C_POINTER;
    private static final int SmrGcActionStart = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _REFS_SMR_VOLUME_GC_ACTION.SmrGcActionStart = 1
     * }
     */
    public static int SmrGcActionStart() {
        return SmrGcActionStart;
    }
    private static final int SmrGcActionStartFullSpeed = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _REFS_SMR_VOLUME_GC_ACTION.SmrGcActionStartFullSpeed = 2
     * }
     */
    public static int SmrGcActionStartFullSpeed() {
        return SmrGcActionStartFullSpeed;
    }
    private static final int SmrGcActionPause = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _REFS_SMR_VOLUME_GC_ACTION.SmrGcActionPause = 3
     * }
     */
    public static int SmrGcActionPause() {
        return SmrGcActionPause;
    }
    private static final int SmrGcActionStop = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _REFS_SMR_VOLUME_GC_ACTION.SmrGcActionStop = 4
     * }
     */
    public static int SmrGcActionStop() {
        return SmrGcActionStop;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _REFS_SMR_VOLUME_GC_ACTION {
     *     SmrGcActionStart = 1,
     *     SmrGcActionStartFullSpeed = 2,
     *     SmrGcActionPause = 3,
     *     SmrGcActionStop = 4
     * } *PREFS_SMR_VOLUME_GC_ACTION
     * }
     */
    public static final AddressLayout PREFS_SMR_VOLUME_GC_ACTION = C_POINTER;
    private static final int SmrGcMethodCompaction = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _REFS_SMR_VOLUME_GC_METHOD.SmrGcMethodCompaction = 1
     * }
     */
    public static int SmrGcMethodCompaction() {
        return SmrGcMethodCompaction;
    }
    private static final int SmrGcMethodCompression = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _REFS_SMR_VOLUME_GC_METHOD.SmrGcMethodCompression = 2
     * }
     */
    public static int SmrGcMethodCompression() {
        return SmrGcMethodCompression;
    }
    private static final int SmrGcMethodRotation = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _REFS_SMR_VOLUME_GC_METHOD.SmrGcMethodRotation = 3
     * }
     */
    public static int SmrGcMethodRotation() {
        return SmrGcMethodRotation;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _REFS_SMR_VOLUME_GC_METHOD {
     *     SmrGcMethodCompaction = 1,
     *     SmrGcMethodCompression = 2,
     *     SmrGcMethodRotation = 3
     * } *PREFS_SMR_VOLUME_GC_METHOD
     * }
     */
    public static final AddressLayout PREFS_SMR_VOLUME_GC_METHOD = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _REFS_SMR_VOLUME_GC_PARAMETERS {
     *     DWORD Version;
     *     DWORD Flags;
     *     REFS_SMR_VOLUME_GC_ACTION Action;
     *     REFS_SMR_VOLUME_GC_METHOD Method;
     *     DWORD IoGranularity;
     *     DWORD CompressionFormat;
     *     DWORDLONG Unused[8];
     * } *PREFS_SMR_VOLUME_GC_PARAMETERS
     * }
     */
    public static final AddressLayout PREFS_SMR_VOLUME_GC_PARAMETERS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER {
     *     DWORD OptimalWriteSize;
     *     DWORD StreamGranularitySize;
     *     DWORD StreamIdMin;
     *     DWORD StreamIdMax;
     * } *PSTREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER
     * }
     */
    public static final AddressLayout PSTREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STREAMS_ASSOCIATE_ID_INPUT_BUFFER {
     *     DWORD Flags;
     *     DWORD StreamId;
     * } *PSTREAMS_ASSOCIATE_ID_INPUT_BUFFER
     * }
     */
    public static final AddressLayout PSTREAMS_ASSOCIATE_ID_INPUT_BUFFER = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STREAMS_QUERY_ID_OUTPUT_BUFFER {
     *     DWORD StreamId;
     * } *PSTREAMS_QUERY_ID_OUTPUT_BUFFER
     * }
     */
    public static final AddressLayout PSTREAMS_QUERY_ID_OUTPUT_BUFFER = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _QUERY_BAD_RANGES_INPUT_RANGE {
     *     DWORDLONG StartOffset;
     *     DWORDLONG LengthInBytes;
     * } *PQUERY_BAD_RANGES_INPUT_RANGE
     * }
     */
    public static final AddressLayout PQUERY_BAD_RANGES_INPUT_RANGE = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _QUERY_BAD_RANGES_INPUT {
     *     DWORD Flags;
     *     DWORD NumRanges;
     *     QUERY_BAD_RANGES_INPUT_RANGE Ranges[1];
     * } *PQUERY_BAD_RANGES_INPUT
     * }
     */
    public static final AddressLayout PQUERY_BAD_RANGES_INPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _QUERY_BAD_RANGES_OUTPUT_RANGE {
     *     DWORD Flags;
     *     DWORD Reserved;
     *     DWORDLONG StartOffset;
     *     DWORDLONG LengthInBytes;
     * } *PQUERY_BAD_RANGES_OUTPUT_RANGE
     * }
     */
    public static final AddressLayout PQUERY_BAD_RANGES_OUTPUT_RANGE = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _QUERY_BAD_RANGES_OUTPUT {
     *     DWORD Flags;
     *     DWORD NumBadRanges;
     *     DWORDLONG NextOffsetToLookUp;
     *     QUERY_BAD_RANGES_OUTPUT_RANGE BadRanges[1];
     * } *PQUERY_BAD_RANGES_OUTPUT
     * }
     */
    public static final AddressLayout PQUERY_BAD_RANGES_OUTPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT {
     *     DWORD Flags;
     *     DWORD AlignmentShift;
     *     DWORDLONG FileOffsetToAlign;
     *     DWORD FallbackAlignmentShift;
     * } *PSET_DAX_ALLOC_ALIGNMENT_HINT_INPUT
     * }
     */
    public static final AddressLayout PSET_DAX_ALLOC_ALIGNMENT_HINT_INPUT = C_POINTER;
    private static final int VirtualStorageBehaviorUndefined = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _VIRTUAL_STORAGE_BEHAVIOR_CODE.VirtualStorageBehaviorUndefined = 0
     * }
     */
    public static int VirtualStorageBehaviorUndefined() {
        return VirtualStorageBehaviorUndefined;
    }
    private static final int VirtualStorageBehaviorCacheWriteThrough = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _VIRTUAL_STORAGE_BEHAVIOR_CODE.VirtualStorageBehaviorCacheWriteThrough = 1
     * }
     */
    public static int VirtualStorageBehaviorCacheWriteThrough() {
        return VirtualStorageBehaviorCacheWriteThrough;
    }
    private static final int VirtualStorageBehaviorCacheWriteBack = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _VIRTUAL_STORAGE_BEHAVIOR_CODE.VirtualStorageBehaviorCacheWriteBack = 2
     * }
     */
    public static int VirtualStorageBehaviorCacheWriteBack() {
        return VirtualStorageBehaviorCacheWriteBack;
    }
    private static final int VirtualStorageBehaviorStopIoProcessing = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _VIRTUAL_STORAGE_BEHAVIOR_CODE.VirtualStorageBehaviorStopIoProcessing = 3
     * }
     */
    public static int VirtualStorageBehaviorStopIoProcessing() {
        return VirtualStorageBehaviorStopIoProcessing;
    }
    private static final int VirtualStorageBehaviorRestartIoProcessing = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _VIRTUAL_STORAGE_BEHAVIOR_CODE.VirtualStorageBehaviorRestartIoProcessing = 4
     * }
     */
    public static int VirtualStorageBehaviorRestartIoProcessing() {
        return VirtualStorageBehaviorRestartIoProcessing;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _VIRTUAL_STORAGE_BEHAVIOR_CODE {
     *     VirtualStorageBehaviorUndefined = 0,
     *     VirtualStorageBehaviorCacheWriteThrough = 1,
     *     VirtualStorageBehaviorCacheWriteBack = 2,
     *     VirtualStorageBehaviorStopIoProcessing = 3,
     *     VirtualStorageBehaviorRestartIoProcessing = 4
     * } *PVIRTUAL_STORAGE_BEHAVIOR_CODE
     * }
     */
    public static final AddressLayout PVIRTUAL_STORAGE_BEHAVIOR_CODE = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _VIRTUAL_STORAGE_SET_BEHAVIOR_INPUT {
     *     DWORD Size;
     *     VIRTUAL_STORAGE_BEHAVIOR_CODE BehaviorCode;
     * } *PVIRTUAL_STORAGE_SET_BEHAVIOR_INPUT
     * }
     */
    public static final AddressLayout PVIRTUAL_STORAGE_SET_BEHAVIOR_INPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _ENCRYPTION_KEY_CTRL_INPUT {
     *     DWORD HeaderSize;
     *     DWORD StructureSize;
     *     WORD KeyOffset;
     *     WORD KeySize;
     *     DWORD DplLock;
     *     DWORDLONG DplUserId;
     *     DWORDLONG DplCredentialId;
     * } *PENCRYPTION_KEY_CTRL_INPUT
     * }
     */
    public static final AddressLayout PENCRYPTION_KEY_CTRL_INPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _WOF_EXTERNAL_INFO {
     *     DWORD Version;
     *     DWORD Provider;
     * } *PWOF_EXTERNAL_INFO
     * }
     */
    public static final AddressLayout PWOF_EXTERNAL_INFO = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _WOF_EXTERNAL_FILE_ID {
     *     FILE_ID_128 FileId;
     * } *PWOF_EXTERNAL_FILE_ID
     * }
     */
    public static final AddressLayout PWOF_EXTERNAL_FILE_ID = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _WOF_VERSION_INFO {
     *     DWORD WofVersion;
     * } *PWOF_VERSION_INFO
     * }
     */
    public static final AddressLayout PWOF_VERSION_INFO = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _WIM_PROVIDER_EXTERNAL_INFO {
     *     DWORD Version;
     *     DWORD Flags;
     *     LARGE_INTEGER DataSourceId;
     *     BYTE ResourceHash[20];
     * } *PWIM_PROVIDER_EXTERNAL_INFO
     * }
     */
    public static final AddressLayout PWIM_PROVIDER_EXTERNAL_INFO = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _WIM_PROVIDER_ADD_OVERLAY_INPUT {
     *     DWORD WimType;
     *     DWORD WimIndex;
     *     DWORD WimFileNameOffset;
     *     DWORD WimFileNameLength;
     * } *PWIM_PROVIDER_ADD_OVERLAY_INPUT
     * }
     */
    public static final AddressLayout PWIM_PROVIDER_ADD_OVERLAY_INPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _WIM_PROVIDER_UPDATE_OVERLAY_INPUT {
     *     LARGE_INTEGER DataSourceId;
     *     DWORD WimFileNameOffset;
     *     DWORD WimFileNameLength;
     * } *PWIM_PROVIDER_UPDATE_OVERLAY_INPUT
     * }
     */
    public static final AddressLayout PWIM_PROVIDER_UPDATE_OVERLAY_INPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _WIM_PROVIDER_REMOVE_OVERLAY_INPUT {
     *     LARGE_INTEGER DataSourceId;
     * } *PWIM_PROVIDER_REMOVE_OVERLAY_INPUT
     * }
     */
    public static final AddressLayout PWIM_PROVIDER_REMOVE_OVERLAY_INPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _WIM_PROVIDER_SUSPEND_OVERLAY_INPUT {
     *     LARGE_INTEGER DataSourceId;
     * } *PWIM_PROVIDER_SUSPEND_OVERLAY_INPUT
     * }
     */
    public static final AddressLayout PWIM_PROVIDER_SUSPEND_OVERLAY_INPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _WIM_PROVIDER_OVERLAY_ENTRY {
     *     DWORD NextEntryOffset;
     *     LARGE_INTEGER DataSourceId;
     *     GUID WimGuid;
     *     DWORD WimFileNameOffset;
     *     DWORD WimType;
     *     DWORD WimIndex;
     *     DWORD Flags;
     * } *PWIM_PROVIDER_OVERLAY_ENTRY
     * }
     */
    public static final AddressLayout PWIM_PROVIDER_OVERLAY_ENTRY = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_PROVIDER_EXTERNAL_INFO_V0 {
     *     DWORD Version;
     *     DWORD Algorithm;
     * } *PFILE_PROVIDER_EXTERNAL_INFO_V0
     * }
     */
    public static final AddressLayout PFILE_PROVIDER_EXTERNAL_INFO_V0 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_PROVIDER_EXTERNAL_INFO_V1 {
     *     DWORD Version;
     *     DWORD Algorithm;
     *     DWORD Flags;
     * } *PFILE_PROVIDER_EXTERNAL_INFO_V1
     * }
     */
    public static final AddressLayout PFILE_PROVIDER_EXTERNAL_INFO_V1 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PFILE_PROVIDER_EXTERNAL_INFO_V1 PFILE_PROVIDER_EXTERNAL_INFO
     * }
     */
    public static final AddressLayout PFILE_PROVIDER_EXTERNAL_INFO = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CONTAINER_VOLUME_STATE {
     *     DWORD Flags;
     * } *PCONTAINER_VOLUME_STATE
     * }
     */
    public static final AddressLayout PCONTAINER_VOLUME_STATE = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CONTAINER_ROOT_INFO_INPUT {
     *     DWORD Flags;
     * } *PCONTAINER_ROOT_INFO_INPUT
     * }
     */
    public static final AddressLayout PCONTAINER_ROOT_INFO_INPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CONTAINER_ROOT_INFO_OUTPUT {
     *     WORD ContainerRootIdLength;
     *     BYTE ContainerRootId[1];
     * } *PCONTAINER_ROOT_INFO_OUTPUT
     * }
     */
    public static final AddressLayout PCONTAINER_ROOT_INFO_OUTPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _VIRTUALIZATION_INSTANCE_INFO_INPUT {
     *     DWORD NumberOfWorkerThreads;
     *     DWORD Flags;
     * } *PVIRTUALIZATION_INSTANCE_INFO_INPUT
     * }
     */
    public static final AddressLayout PVIRTUALIZATION_INSTANCE_INFO_INPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _VIRTUALIZATION_INSTANCE_INFO_INPUT_EX {
     *     WORD HeaderSize;
     *     DWORD Flags;
     *     DWORD NotificationInfoSize;
     *     WORD NotificationInfoOffset;
     *     WORD ProviderMajorVersion;
     * } *PVIRTUALIZATION_INSTANCE_INFO_INPUT_EX
     * }
     */
    public static final AddressLayout PVIRTUALIZATION_INSTANCE_INFO_INPUT_EX = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _VIRTUALIZATION_INSTANCE_INFO_OUTPUT {
     *     GUID VirtualizationInstanceID;
     * } *PVIRTUALIZATION_INSTANCE_INFO_OUTPUT
     * }
     */
    public static final AddressLayout PVIRTUALIZATION_INSTANCE_INFO_OUTPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _GET_FILTER_FILE_IDENTIFIER_INPUT {
     *     WORD AltitudeLength;
     *     WCHAR Altitude[1];
     * } *PGET_FILTER_FILE_IDENTIFIER_INPUT
     * }
     */
    public static final AddressLayout PGET_FILTER_FILE_IDENTIFIER_INPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _GET_FILTER_FILE_IDENTIFIER_OUTPUT {
     *     WORD FilterFileIdentifierLength;
     *     BYTE FilterFileIdentifier[1];
     * } *PGET_FILTER_FILE_IDENTIFIER_OUTPUT
     * }
     */
    public static final AddressLayout PGET_FILTER_FILE_IDENTIFIER_OUTPUT = C_POINTER;
    private static final int FS_BPIO_OP_ENABLE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _FS_BPIO_OPERATIONS.FS_BPIO_OP_ENABLE = 1
     * }
     */
    public static int FS_BPIO_OP_ENABLE() {
        return FS_BPIO_OP_ENABLE;
    }
    private static final int FS_BPIO_OP_DISABLE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _FS_BPIO_OPERATIONS.FS_BPIO_OP_DISABLE = 2
     * }
     */
    public static int FS_BPIO_OP_DISABLE() {
        return FS_BPIO_OP_DISABLE;
    }
    private static final int FS_BPIO_OP_QUERY = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _FS_BPIO_OPERATIONS.FS_BPIO_OP_QUERY = 3
     * }
     */
    public static int FS_BPIO_OP_QUERY() {
        return FS_BPIO_OP_QUERY;
    }
    private static final int FS_BPIO_OP_VOLUME_STACK_PAUSE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _FS_BPIO_OPERATIONS.FS_BPIO_OP_VOLUME_STACK_PAUSE = 4
     * }
     */
    public static int FS_BPIO_OP_VOLUME_STACK_PAUSE() {
        return FS_BPIO_OP_VOLUME_STACK_PAUSE;
    }
    private static final int FS_BPIO_OP_VOLUME_STACK_RESUME = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _FS_BPIO_OPERATIONS.FS_BPIO_OP_VOLUME_STACK_RESUME = 5
     * }
     */
    public static int FS_BPIO_OP_VOLUME_STACK_RESUME() {
        return FS_BPIO_OP_VOLUME_STACK_RESUME;
    }
    private static final int FS_BPIO_OP_STREAM_PAUSE = (int)6L;
    /**
     * {@snippet lang=c :
     * enum _FS_BPIO_OPERATIONS.FS_BPIO_OP_STREAM_PAUSE = 6
     * }
     */
    public static int FS_BPIO_OP_STREAM_PAUSE() {
        return FS_BPIO_OP_STREAM_PAUSE;
    }
    private static final int FS_BPIO_OP_STREAM_RESUME = (int)7L;
    /**
     * {@snippet lang=c :
     * enum _FS_BPIO_OPERATIONS.FS_BPIO_OP_STREAM_RESUME = 7
     * }
     */
    public static int FS_BPIO_OP_STREAM_RESUME() {
        return FS_BPIO_OP_STREAM_RESUME;
    }
    private static final int FS_BPIO_OP_GET_INFO = (int)8L;
    /**
     * {@snippet lang=c :
     * enum _FS_BPIO_OPERATIONS.FS_BPIO_OP_GET_INFO = 8
     * }
     */
    public static int FS_BPIO_OP_GET_INFO() {
        return FS_BPIO_OP_GET_INFO;
    }
    private static final int FS_BPIO_OP_MAX_OPERATION = (int)9L;
    /**
     * {@snippet lang=c :
     * enum _FS_BPIO_OPERATIONS.FS_BPIO_OP_MAX_OPERATION = 9
     * }
     */
    public static int FS_BPIO_OP_MAX_OPERATION() {
        return FS_BPIO_OP_MAX_OPERATION;
    }
    private static final int FSBPIO_INFL_None = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _FS_BPIO_INFLAGS.FSBPIO_INFL_None = 0
     * }
     */
    public static int FSBPIO_INFL_None() {
        return FSBPIO_INFL_None;
    }
    private static final int FSBPIO_INFL_SKIP_STORAGE_STACK_QUERY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _FS_BPIO_INFLAGS.FSBPIO_INFL_SKIP_STORAGE_STACK_QUERY = 1
     * }
     */
    public static int FSBPIO_INFL_SKIP_STORAGE_STACK_QUERY() {
        return FSBPIO_INFL_SKIP_STORAGE_STACK_QUERY;
    }
    /**
     * {@snippet lang=c :
     * typedef struct _FS_BPIO_INPUT {
     *     FS_BPIO_OPERATIONS Operation;
     *     FS_BPIO_INFLAGS InFlags;
     *     DWORDLONG Reserved1;
     *     DWORDLONG Reserved2;
     * } *PFS_BPIO_INPUT
     * }
     */
    public static final AddressLayout PFS_BPIO_INPUT = C_POINTER;
    private static final int FSBPIO_OUTFL_None = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _FS_BPIO_OUTFLAGS.FSBPIO_OUTFL_None = 0
     * }
     */
    public static int FSBPIO_OUTFL_None() {
        return FSBPIO_OUTFL_None;
    }
    private static final int FSBPIO_OUTFL_VOLUME_STACK_BYPASS_PAUSED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _FS_BPIO_OUTFLAGS.FSBPIO_OUTFL_VOLUME_STACK_BYPASS_PAUSED = 1
     * }
     */
    public static int FSBPIO_OUTFL_VOLUME_STACK_BYPASS_PAUSED() {
        return FSBPIO_OUTFL_VOLUME_STACK_BYPASS_PAUSED;
    }
    private static final int FSBPIO_OUTFL_STREAM_BYPASS_PAUSED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _FS_BPIO_OUTFLAGS.FSBPIO_OUTFL_STREAM_BYPASS_PAUSED = 2
     * }
     */
    public static int FSBPIO_OUTFL_STREAM_BYPASS_PAUSED() {
        return FSBPIO_OUTFL_STREAM_BYPASS_PAUSED;
    }
    private static final int FSBPIO_OUTFL_FILTER_ATTACH_BLOCKED = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _FS_BPIO_OUTFLAGS.FSBPIO_OUTFL_FILTER_ATTACH_BLOCKED = 4
     * }
     */
    public static int FSBPIO_OUTFL_FILTER_ATTACH_BLOCKED() {
        return FSBPIO_OUTFL_FILTER_ATTACH_BLOCKED;
    }
    private static final int FSBPIO_OUTFL_COMPATIBLE_STORAGE_DRIVER = (int)8L;
    /**
     * {@snippet lang=c :
     * enum _FS_BPIO_OUTFLAGS.FSBPIO_OUTFL_COMPATIBLE_STORAGE_DRIVER = 8
     * }
     */
    public static int FSBPIO_OUTFL_COMPATIBLE_STORAGE_DRIVER() {
        return FSBPIO_OUTFL_COMPATIBLE_STORAGE_DRIVER;
    }
    /**
     * {@snippet lang=c :
     * typedef struct _FS_BPIO_RESULTS {
     *     DWORD OpStatus;
     *     WORD FailingDriverNameLen;
     *     WCHAR FailingDriverName[32];
     *     WORD FailureReasonLen;
     *     WCHAR FailureReason[128];
     * } *PFS_BPIO_RESULTS
     * }
     */
    public static final AddressLayout PFS_BPIO_RESULTS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FS_BPIO_INFO {
     *     DWORD ActiveBypassIoCount;
     *     WORD StorageDriverNameLen;
     *     WCHAR StorageDriverName[32];
     * } *PFS_BPIO_INFO
     * }
     */
    public static final AddressLayout PFS_BPIO_INFO = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FS_BPIO_OUTPUT {
     *     FS_BPIO_OPERATIONS Operation;
     *     FS_BPIO_OUTFLAGS OutFlags;
     *     DWORDLONG Reserved1;
     *     DWORDLONG Reserved2;
     *     union {
     *         FS_BPIO_RESULTS Enable;
     *         FS_BPIO_RESULTS Query;
     *         FS_BPIO_RESULTS VolumeStackResume;
     *         FS_BPIO_RESULTS StreamResume;
     *         FS_BPIO_INFO GetInfo;
     *     };
     * } *PFS_BPIO_OUTPUT
     * }
     */
    public static final AddressLayout PFS_BPIO_OUTPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SMB_SHARE_FLUSH_AND_PURGE_INPUT {
     *     WORD Version;
     * } *PSMB_SHARE_FLUSH_AND_PURGE_INPUT
     * }
     */
    public static final AddressLayout PSMB_SHARE_FLUSH_AND_PURGE_INPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const struct _SMB_SHARE_FLUSH_AND_PURGE_INPUT {
     *     WORD Version;
     * } *PCSMB_SHARE_FLUSH_AND_PURGE_INPUT
     * }
     */
    public static final AddressLayout PCSMB_SHARE_FLUSH_AND_PURGE_INPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SMB_SHARE_FLUSH_AND_PURGE_OUTPUT {
     *     DWORD cEntriesPurged;
     * } *PSMB_SHARE_FLUSH_AND_PURGE_OUTPUT
     * }
     */
    public static final AddressLayout PSMB_SHARE_FLUSH_AND_PURGE_OUTPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const struct _SMB_SHARE_FLUSH_AND_PURGE_OUTPUT {
     *     DWORD cEntriesPurged;
     * } *PCSMB_SHARE_FLUSH_AND_PURGE_OUTPUT
     * }
     */
    public static final AddressLayout PCSMB_SHARE_FLUSH_AND_PURGE_OUTPUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DISK_EXTENT {
     *     DWORD DiskNumber;
     *     LARGE_INTEGER StartingOffset;
     *     LARGE_INTEGER ExtentLength;
     * } *PDISK_EXTENT
     * }
     */
    public static final AddressLayout PDISK_EXTENT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _VOLUME_DISK_EXTENTS {
     *     DWORD NumberOfDiskExtents;
     *     DISK_EXTENT Extents[1];
     * } *PVOLUME_DISK_EXTENTS
     * }
     */
    public static final AddressLayout PVOLUME_DISK_EXTENTS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _VOLUME_GET_GPT_ATTRIBUTES_INFORMATION {
     *     DWORDLONG GptAttributes;
     * } *PVOLUME_GET_GPT_ATTRIBUTES_INFORMATION
     * }
     */
    public static final AddressLayout PVOLUME_GET_GPT_ATTRIBUTES_INFORMATION = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _IO_IRP_EXT_TRACK_OFFSET_HEADER {
     *     WORD Validation;
     *     WORD Flags;
     *     PIO_IRP_EXT_PROCESS_TRACKED_OFFSET_CALLBACK TrackedOffsetCallback;
     * } *PIO_IRP_EXT_TRACK_OFFSET_HEADER
     * }
     */
    public static final AddressLayout PIO_IRP_EXT_TRACK_OFFSET_HEADER = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef WORD UWORD
     * }
     */
    public static final OfShort UWORD = C_SHORT;

    private static class GUID_DEVINTERFACE_SMARTCARD_READER$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("GUID_DEVINTERFACE_SMARTCARD_READER").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_SMARTCARD_READER
     * }
     */
    public static GroupLayout GUID_DEVINTERFACE_SMARTCARD_READER$layout() {
        return GUID_DEVINTERFACE_SMARTCARD_READER$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_SMARTCARD_READER
     * }
     */
    public static MemorySegment GUID_DEVINTERFACE_SMARTCARD_READER() {
        return GUID_DEVINTERFACE_SMARTCARD_READER$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_SMARTCARD_READER
     * }
     */
    public static void GUID_DEVINTERFACE_SMARTCARD_READER(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_DEVINTERFACE_SMARTCARD_READER$constants.SEGMENT, 0L, GUID_DEVINTERFACE_SMARTCARD_READER$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef struct _SCARD_IO_REQUEST {
     *     DWORD dwProtocol;
     *     DWORD cbPciLength;
     * } *PSCARD_IO_REQUEST
     * }
     */
    public static final AddressLayout PSCARD_IO_REQUEST = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCARD_IO_REQUEST {
     *     DWORD dwProtocol;
     *     DWORD cbPciLength;
     * } *LPSCARD_IO_REQUEST
     * }
     */
    public static final AddressLayout LPSCARD_IO_REQUEST = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const SCARD_IO_REQUEST *LPCSCARD_IO_REQUEST
     * }
     */
    public static final AddressLayout LPCSCARD_IO_REQUEST = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCARD_T0_COMMAND {
     *     BYTE bCla;
     *     BYTE bIns;
     *     BYTE bP1;
     *     BYTE bP2;
     *     BYTE bP3;
     * } *LPSCARD_T0_COMMAND
     * }
     */
    public static final AddressLayout LPSCARD_T0_COMMAND = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef SCARD_T0_REQUEST *PSCARD_T0_REQUEST
     * }
     */
    public static final AddressLayout PSCARD_T0_REQUEST = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef SCARD_T0_REQUEST *LPSCARD_T0_REQUEST
     * }
     */
    public static final AddressLayout LPSCARD_T0_REQUEST = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef SCARD_T1_REQUEST *PSCARD_T1_REQUEST
     * }
     */
    public static final AddressLayout PSCARD_T1_REQUEST = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef SCARD_T1_REQUEST *LPSCARD_T1_REQUEST
     * }
     */
    public static final AddressLayout LPSCARD_T1_REQUEST = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const BYTE *LPCBYTE
     * }
     */
    public static final AddressLayout LPCBYTE = C_POINTER;

    private static class g_rgSCardT0Pci$constants {
        public static final GroupLayout LAYOUT = _SCARD_IO_REQUEST.layout();
        public static final MemorySegment SEGMENT = findOrThrow("g_rgSCardT0Pci").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const SCARD_IO_REQUEST g_rgSCardT0Pci
     * }
     */
    public static GroupLayout g_rgSCardT0Pci$layout() {
        return g_rgSCardT0Pci$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const SCARD_IO_REQUEST g_rgSCardT0Pci
     * }
     */
    public static MemorySegment g_rgSCardT0Pci() {
        return g_rgSCardT0Pci$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const SCARD_IO_REQUEST g_rgSCardT0Pci
     * }
     */
    public static void g_rgSCardT0Pci(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, g_rgSCardT0Pci$constants.SEGMENT, 0L, g_rgSCardT0Pci$constants.LAYOUT.byteSize());
    }

    private static class g_rgSCardT1Pci$constants {
        public static final GroupLayout LAYOUT = _SCARD_IO_REQUEST.layout();
        public static final MemorySegment SEGMENT = findOrThrow("g_rgSCardT1Pci").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const SCARD_IO_REQUEST g_rgSCardT1Pci
     * }
     */
    public static GroupLayout g_rgSCardT1Pci$layout() {
        return g_rgSCardT1Pci$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const SCARD_IO_REQUEST g_rgSCardT1Pci
     * }
     */
    public static MemorySegment g_rgSCardT1Pci() {
        return g_rgSCardT1Pci$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const SCARD_IO_REQUEST g_rgSCardT1Pci
     * }
     */
    public static void g_rgSCardT1Pci(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, g_rgSCardT1Pci$constants.SEGMENT, 0L, g_rgSCardT1Pci$constants.LAYOUT.byteSize());
    }

    private static class g_rgSCardRawPci$constants {
        public static final GroupLayout LAYOUT = _SCARD_IO_REQUEST.layout();
        public static final MemorySegment SEGMENT = findOrThrow("g_rgSCardRawPci").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const SCARD_IO_REQUEST g_rgSCardRawPci
     * }
     */
    public static GroupLayout g_rgSCardRawPci$layout() {
        return g_rgSCardRawPci$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const SCARD_IO_REQUEST g_rgSCardRawPci
     * }
     */
    public static MemorySegment g_rgSCardRawPci() {
        return g_rgSCardRawPci$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const SCARD_IO_REQUEST g_rgSCardRawPci
     * }
     */
    public static void g_rgSCardRawPci(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, g_rgSCardRawPci$constants.SEGMENT, 0L, g_rgSCardRawPci$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef ULONG_PTR SCARDCONTEXT
     * }
     */
    public static final OfLong SCARDCONTEXT = C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef SCARDCONTEXT *PSCARDCONTEXT
     * }
     */
    public static final AddressLayout PSCARDCONTEXT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef SCARDCONTEXT *LPSCARDCONTEXT
     * }
     */
    public static final AddressLayout LPSCARDCONTEXT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef ULONG_PTR SCARDHANDLE
     * }
     */
    public static final OfLong SCARDHANDLE = C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef SCARDHANDLE *PSCARDHANDLE
     * }
     */
    public static final AddressLayout PSCARDHANDLE = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef SCARDHANDLE *LPSCARDHANDLE
     * }
     */
    public static final AddressLayout LPSCARDHANDLE = C_POINTER;

    private static class SCardEstablishContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardEstablishContext"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardEstablishContext(DWORD dwScope, LPCVOID pvReserved1, LPCVOID pvReserved2, LPSCARDCONTEXT phContext)
     * }
     */
    public static FunctionDescriptor SCardEstablishContext$descriptor() {
        return SCardEstablishContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardEstablishContext(DWORD dwScope, LPCVOID pvReserved1, LPCVOID pvReserved2, LPSCARDCONTEXT phContext)
     * }
     */
    public static MethodHandle SCardEstablishContext$handle() {
        return SCardEstablishContext.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardEstablishContext(DWORD dwScope, LPCVOID pvReserved1, LPCVOID pvReserved2, LPSCARDCONTEXT phContext)
     * }
     */
    public static int SCardEstablishContext(int dwScope, MemorySegment pvReserved1, MemorySegment pvReserved2, MemorySegment phContext) {
        var mh$ = SCardEstablishContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardEstablishContext", dwScope, pvReserved1, pvReserved2, phContext);
            }
            return (int)mh$.invokeExact(dwScope, pvReserved1, pvReserved2, phContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardReleaseContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardReleaseContext"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardReleaseContext(SCARDCONTEXT hContext)
     * }
     */
    public static FunctionDescriptor SCardReleaseContext$descriptor() {
        return SCardReleaseContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardReleaseContext(SCARDCONTEXT hContext)
     * }
     */
    public static MethodHandle SCardReleaseContext$handle() {
        return SCardReleaseContext.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardReleaseContext(SCARDCONTEXT hContext)
     * }
     */
    public static int SCardReleaseContext(long hContext) {
        var mh$ = SCardReleaseContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardReleaseContext", hContext);
            }
            return (int)mh$.invokeExact(hContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardIsValidContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardIsValidContext"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardIsValidContext(SCARDCONTEXT hContext)
     * }
     */
    public static FunctionDescriptor SCardIsValidContext$descriptor() {
        return SCardIsValidContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardIsValidContext(SCARDCONTEXT hContext)
     * }
     */
    public static MethodHandle SCardIsValidContext$handle() {
        return SCardIsValidContext.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardIsValidContext(SCARDCONTEXT hContext)
     * }
     */
    public static int SCardIsValidContext(long hContext) {
        var mh$ = SCardIsValidContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardIsValidContext", hContext);
            }
            return (int)mh$.invokeExact(hContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardListReaderGroupsA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardListReaderGroupsA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardListReaderGroupsA(SCARDCONTEXT hContext, LPSTR mszGroups, LPDWORD pcchGroups)
     * }
     */
    public static FunctionDescriptor SCardListReaderGroupsA$descriptor() {
        return SCardListReaderGroupsA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardListReaderGroupsA(SCARDCONTEXT hContext, LPSTR mszGroups, LPDWORD pcchGroups)
     * }
     */
    public static MethodHandle SCardListReaderGroupsA$handle() {
        return SCardListReaderGroupsA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardListReaderGroupsA(SCARDCONTEXT hContext, LPSTR mszGroups, LPDWORD pcchGroups)
     * }
     */
    public static int SCardListReaderGroupsA(long hContext, MemorySegment mszGroups, MemorySegment pcchGroups) {
        var mh$ = SCardListReaderGroupsA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardListReaderGroupsA", hContext, mszGroups, pcchGroups);
            }
            return (int)mh$.invokeExact(hContext, mszGroups, pcchGroups);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardListReaderGroupsW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardListReaderGroupsW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardListReaderGroupsW(SCARDCONTEXT hContext, LPWSTR mszGroups, LPDWORD pcchGroups)
     * }
     */
    public static FunctionDescriptor SCardListReaderGroupsW$descriptor() {
        return SCardListReaderGroupsW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardListReaderGroupsW(SCARDCONTEXT hContext, LPWSTR mszGroups, LPDWORD pcchGroups)
     * }
     */
    public static MethodHandle SCardListReaderGroupsW$handle() {
        return SCardListReaderGroupsW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardListReaderGroupsW(SCARDCONTEXT hContext, LPWSTR mszGroups, LPDWORD pcchGroups)
     * }
     */
    public static int SCardListReaderGroupsW(long hContext, MemorySegment mszGroups, MemorySegment pcchGroups) {
        var mh$ = SCardListReaderGroupsW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardListReaderGroupsW", hContext, mszGroups, pcchGroups);
            }
            return (int)mh$.invokeExact(hContext, mszGroups, pcchGroups);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardListReadersA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardListReadersA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardListReadersA(SCARDCONTEXT hContext, LPCSTR mszGroups, LPSTR mszReaders, LPDWORD pcchReaders)
     * }
     */
    public static FunctionDescriptor SCardListReadersA$descriptor() {
        return SCardListReadersA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardListReadersA(SCARDCONTEXT hContext, LPCSTR mszGroups, LPSTR mszReaders, LPDWORD pcchReaders)
     * }
     */
    public static MethodHandle SCardListReadersA$handle() {
        return SCardListReadersA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardListReadersA(SCARDCONTEXT hContext, LPCSTR mszGroups, LPSTR mszReaders, LPDWORD pcchReaders)
     * }
     */
    public static int SCardListReadersA(long hContext, MemorySegment mszGroups, MemorySegment mszReaders, MemorySegment pcchReaders) {
        var mh$ = SCardListReadersA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardListReadersA", hContext, mszGroups, mszReaders, pcchReaders);
            }
            return (int)mh$.invokeExact(hContext, mszGroups, mszReaders, pcchReaders);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardListReadersW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardListReadersW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardListReadersW(SCARDCONTEXT hContext, LPCWSTR mszGroups, LPWSTR mszReaders, LPDWORD pcchReaders)
     * }
     */
    public static FunctionDescriptor SCardListReadersW$descriptor() {
        return SCardListReadersW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardListReadersW(SCARDCONTEXT hContext, LPCWSTR mszGroups, LPWSTR mszReaders, LPDWORD pcchReaders)
     * }
     */
    public static MethodHandle SCardListReadersW$handle() {
        return SCardListReadersW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardListReadersW(SCARDCONTEXT hContext, LPCWSTR mszGroups, LPWSTR mszReaders, LPDWORD pcchReaders)
     * }
     */
    public static int SCardListReadersW(long hContext, MemorySegment mszGroups, MemorySegment mszReaders, MemorySegment pcchReaders) {
        var mh$ = SCardListReadersW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardListReadersW", hContext, mszGroups, mszReaders, pcchReaders);
            }
            return (int)mh$.invokeExact(hContext, mszGroups, mszReaders, pcchReaders);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardListCardsA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardListCardsA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardListCardsA(SCARDCONTEXT hContext, LPCBYTE pbAtr, LPCGUID rgquidInterfaces, DWORD cguidInterfaceCount, CHAR *mszCards, LPDWORD pcchCards)
     * }
     */
    public static FunctionDescriptor SCardListCardsA$descriptor() {
        return SCardListCardsA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardListCardsA(SCARDCONTEXT hContext, LPCBYTE pbAtr, LPCGUID rgquidInterfaces, DWORD cguidInterfaceCount, CHAR *mszCards, LPDWORD pcchCards)
     * }
     */
    public static MethodHandle SCardListCardsA$handle() {
        return SCardListCardsA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardListCardsA(SCARDCONTEXT hContext, LPCBYTE pbAtr, LPCGUID rgquidInterfaces, DWORD cguidInterfaceCount, CHAR *mszCards, LPDWORD pcchCards)
     * }
     */
    public static int SCardListCardsA(long hContext, MemorySegment pbAtr, MemorySegment rgquidInterfaces, int cguidInterfaceCount, MemorySegment mszCards, MemorySegment pcchCards) {
        var mh$ = SCardListCardsA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardListCardsA", hContext, pbAtr, rgquidInterfaces, cguidInterfaceCount, mszCards, pcchCards);
            }
            return (int)mh$.invokeExact(hContext, pbAtr, rgquidInterfaces, cguidInterfaceCount, mszCards, pcchCards);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardListCardsW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardListCardsW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardListCardsW(SCARDCONTEXT hContext, LPCBYTE pbAtr, LPCGUID rgquidInterfaces, DWORD cguidInterfaceCount, WCHAR *mszCards, LPDWORD pcchCards)
     * }
     */
    public static FunctionDescriptor SCardListCardsW$descriptor() {
        return SCardListCardsW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardListCardsW(SCARDCONTEXT hContext, LPCBYTE pbAtr, LPCGUID rgquidInterfaces, DWORD cguidInterfaceCount, WCHAR *mszCards, LPDWORD pcchCards)
     * }
     */
    public static MethodHandle SCardListCardsW$handle() {
        return SCardListCardsW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardListCardsW(SCARDCONTEXT hContext, LPCBYTE pbAtr, LPCGUID rgquidInterfaces, DWORD cguidInterfaceCount, WCHAR *mszCards, LPDWORD pcchCards)
     * }
     */
    public static int SCardListCardsW(long hContext, MemorySegment pbAtr, MemorySegment rgquidInterfaces, int cguidInterfaceCount, MemorySegment mszCards, MemorySegment pcchCards) {
        var mh$ = SCardListCardsW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardListCardsW", hContext, pbAtr, rgquidInterfaces, cguidInterfaceCount, mszCards, pcchCards);
            }
            return (int)mh$.invokeExact(hContext, pbAtr, rgquidInterfaces, cguidInterfaceCount, mszCards, pcchCards);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardListInterfacesA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardListInterfacesA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardListInterfacesA(SCARDCONTEXT hContext, LPCSTR szCard, LPGUID pguidInterfaces, LPDWORD pcguidInterfaces)
     * }
     */
    public static FunctionDescriptor SCardListInterfacesA$descriptor() {
        return SCardListInterfacesA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardListInterfacesA(SCARDCONTEXT hContext, LPCSTR szCard, LPGUID pguidInterfaces, LPDWORD pcguidInterfaces)
     * }
     */
    public static MethodHandle SCardListInterfacesA$handle() {
        return SCardListInterfacesA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardListInterfacesA(SCARDCONTEXT hContext, LPCSTR szCard, LPGUID pguidInterfaces, LPDWORD pcguidInterfaces)
     * }
     */
    public static int SCardListInterfacesA(long hContext, MemorySegment szCard, MemorySegment pguidInterfaces, MemorySegment pcguidInterfaces) {
        var mh$ = SCardListInterfacesA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardListInterfacesA", hContext, szCard, pguidInterfaces, pcguidInterfaces);
            }
            return (int)mh$.invokeExact(hContext, szCard, pguidInterfaces, pcguidInterfaces);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardListInterfacesW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardListInterfacesW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardListInterfacesW(SCARDCONTEXT hContext, LPCWSTR szCard, LPGUID pguidInterfaces, LPDWORD pcguidInterfaces)
     * }
     */
    public static FunctionDescriptor SCardListInterfacesW$descriptor() {
        return SCardListInterfacesW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardListInterfacesW(SCARDCONTEXT hContext, LPCWSTR szCard, LPGUID pguidInterfaces, LPDWORD pcguidInterfaces)
     * }
     */
    public static MethodHandle SCardListInterfacesW$handle() {
        return SCardListInterfacesW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardListInterfacesW(SCARDCONTEXT hContext, LPCWSTR szCard, LPGUID pguidInterfaces, LPDWORD pcguidInterfaces)
     * }
     */
    public static int SCardListInterfacesW(long hContext, MemorySegment szCard, MemorySegment pguidInterfaces, MemorySegment pcguidInterfaces) {
        var mh$ = SCardListInterfacesW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardListInterfacesW", hContext, szCard, pguidInterfaces, pcguidInterfaces);
            }
            return (int)mh$.invokeExact(hContext, szCard, pguidInterfaces, pcguidInterfaces);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardGetProviderIdA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardGetProviderIdA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardGetProviderIdA(SCARDCONTEXT hContext, LPCSTR szCard, LPGUID pguidProviderId)
     * }
     */
    public static FunctionDescriptor SCardGetProviderIdA$descriptor() {
        return SCardGetProviderIdA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardGetProviderIdA(SCARDCONTEXT hContext, LPCSTR szCard, LPGUID pguidProviderId)
     * }
     */
    public static MethodHandle SCardGetProviderIdA$handle() {
        return SCardGetProviderIdA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardGetProviderIdA(SCARDCONTEXT hContext, LPCSTR szCard, LPGUID pguidProviderId)
     * }
     */
    public static int SCardGetProviderIdA(long hContext, MemorySegment szCard, MemorySegment pguidProviderId) {
        var mh$ = SCardGetProviderIdA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardGetProviderIdA", hContext, szCard, pguidProviderId);
            }
            return (int)mh$.invokeExact(hContext, szCard, pguidProviderId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardGetProviderIdW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardGetProviderIdW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardGetProviderIdW(SCARDCONTEXT hContext, LPCWSTR szCard, LPGUID pguidProviderId)
     * }
     */
    public static FunctionDescriptor SCardGetProviderIdW$descriptor() {
        return SCardGetProviderIdW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardGetProviderIdW(SCARDCONTEXT hContext, LPCWSTR szCard, LPGUID pguidProviderId)
     * }
     */
    public static MethodHandle SCardGetProviderIdW$handle() {
        return SCardGetProviderIdW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardGetProviderIdW(SCARDCONTEXT hContext, LPCWSTR szCard, LPGUID pguidProviderId)
     * }
     */
    public static int SCardGetProviderIdW(long hContext, MemorySegment szCard, MemorySegment pguidProviderId) {
        var mh$ = SCardGetProviderIdW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardGetProviderIdW", hContext, szCard, pguidProviderId);
            }
            return (int)mh$.invokeExact(hContext, szCard, pguidProviderId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardGetCardTypeProviderNameA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardGetCardTypeProviderNameA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardGetCardTypeProviderNameA(SCARDCONTEXT hContext, LPCSTR szCardName, DWORD dwProviderId, CHAR *szProvider, LPDWORD pcchProvider)
     * }
     */
    public static FunctionDescriptor SCardGetCardTypeProviderNameA$descriptor() {
        return SCardGetCardTypeProviderNameA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardGetCardTypeProviderNameA(SCARDCONTEXT hContext, LPCSTR szCardName, DWORD dwProviderId, CHAR *szProvider, LPDWORD pcchProvider)
     * }
     */
    public static MethodHandle SCardGetCardTypeProviderNameA$handle() {
        return SCardGetCardTypeProviderNameA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardGetCardTypeProviderNameA(SCARDCONTEXT hContext, LPCSTR szCardName, DWORD dwProviderId, CHAR *szProvider, LPDWORD pcchProvider)
     * }
     */
    public static int SCardGetCardTypeProviderNameA(long hContext, MemorySegment szCardName, int dwProviderId, MemorySegment szProvider, MemorySegment pcchProvider) {
        var mh$ = SCardGetCardTypeProviderNameA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardGetCardTypeProviderNameA", hContext, szCardName, dwProviderId, szProvider, pcchProvider);
            }
            return (int)mh$.invokeExact(hContext, szCardName, dwProviderId, szProvider, pcchProvider);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardGetCardTypeProviderNameW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardGetCardTypeProviderNameW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardGetCardTypeProviderNameW(SCARDCONTEXT hContext, LPCWSTR szCardName, DWORD dwProviderId, WCHAR *szProvider, LPDWORD pcchProvider)
     * }
     */
    public static FunctionDescriptor SCardGetCardTypeProviderNameW$descriptor() {
        return SCardGetCardTypeProviderNameW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardGetCardTypeProviderNameW(SCARDCONTEXT hContext, LPCWSTR szCardName, DWORD dwProviderId, WCHAR *szProvider, LPDWORD pcchProvider)
     * }
     */
    public static MethodHandle SCardGetCardTypeProviderNameW$handle() {
        return SCardGetCardTypeProviderNameW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardGetCardTypeProviderNameW(SCARDCONTEXT hContext, LPCWSTR szCardName, DWORD dwProviderId, WCHAR *szProvider, LPDWORD pcchProvider)
     * }
     */
    public static int SCardGetCardTypeProviderNameW(long hContext, MemorySegment szCardName, int dwProviderId, MemorySegment szProvider, MemorySegment pcchProvider) {
        var mh$ = SCardGetCardTypeProviderNameW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardGetCardTypeProviderNameW", hContext, szCardName, dwProviderId, szProvider, pcchProvider);
            }
            return (int)mh$.invokeExact(hContext, szCardName, dwProviderId, szProvider, pcchProvider);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardIntroduceReaderGroupA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardIntroduceReaderGroupA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardIntroduceReaderGroupA(SCARDCONTEXT hContext, LPCSTR szGroupName)
     * }
     */
    public static FunctionDescriptor SCardIntroduceReaderGroupA$descriptor() {
        return SCardIntroduceReaderGroupA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardIntroduceReaderGroupA(SCARDCONTEXT hContext, LPCSTR szGroupName)
     * }
     */
    public static MethodHandle SCardIntroduceReaderGroupA$handle() {
        return SCardIntroduceReaderGroupA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardIntroduceReaderGroupA(SCARDCONTEXT hContext, LPCSTR szGroupName)
     * }
     */
    public static int SCardIntroduceReaderGroupA(long hContext, MemorySegment szGroupName) {
        var mh$ = SCardIntroduceReaderGroupA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardIntroduceReaderGroupA", hContext, szGroupName);
            }
            return (int)mh$.invokeExact(hContext, szGroupName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardIntroduceReaderGroupW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardIntroduceReaderGroupW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardIntroduceReaderGroupW(SCARDCONTEXT hContext, LPCWSTR szGroupName)
     * }
     */
    public static FunctionDescriptor SCardIntroduceReaderGroupW$descriptor() {
        return SCardIntroduceReaderGroupW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardIntroduceReaderGroupW(SCARDCONTEXT hContext, LPCWSTR szGroupName)
     * }
     */
    public static MethodHandle SCardIntroduceReaderGroupW$handle() {
        return SCardIntroduceReaderGroupW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardIntroduceReaderGroupW(SCARDCONTEXT hContext, LPCWSTR szGroupName)
     * }
     */
    public static int SCardIntroduceReaderGroupW(long hContext, MemorySegment szGroupName) {
        var mh$ = SCardIntroduceReaderGroupW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardIntroduceReaderGroupW", hContext, szGroupName);
            }
            return (int)mh$.invokeExact(hContext, szGroupName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardForgetReaderGroupA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardForgetReaderGroupA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardForgetReaderGroupA(SCARDCONTEXT hContext, LPCSTR szGroupName)
     * }
     */
    public static FunctionDescriptor SCardForgetReaderGroupA$descriptor() {
        return SCardForgetReaderGroupA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardForgetReaderGroupA(SCARDCONTEXT hContext, LPCSTR szGroupName)
     * }
     */
    public static MethodHandle SCardForgetReaderGroupA$handle() {
        return SCardForgetReaderGroupA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardForgetReaderGroupA(SCARDCONTEXT hContext, LPCSTR szGroupName)
     * }
     */
    public static int SCardForgetReaderGroupA(long hContext, MemorySegment szGroupName) {
        var mh$ = SCardForgetReaderGroupA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardForgetReaderGroupA", hContext, szGroupName);
            }
            return (int)mh$.invokeExact(hContext, szGroupName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardForgetReaderGroupW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardForgetReaderGroupW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardForgetReaderGroupW(SCARDCONTEXT hContext, LPCWSTR szGroupName)
     * }
     */
    public static FunctionDescriptor SCardForgetReaderGroupW$descriptor() {
        return SCardForgetReaderGroupW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardForgetReaderGroupW(SCARDCONTEXT hContext, LPCWSTR szGroupName)
     * }
     */
    public static MethodHandle SCardForgetReaderGroupW$handle() {
        return SCardForgetReaderGroupW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardForgetReaderGroupW(SCARDCONTEXT hContext, LPCWSTR szGroupName)
     * }
     */
    public static int SCardForgetReaderGroupW(long hContext, MemorySegment szGroupName) {
        var mh$ = SCardForgetReaderGroupW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardForgetReaderGroupW", hContext, szGroupName);
            }
            return (int)mh$.invokeExact(hContext, szGroupName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardIntroduceReaderA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardIntroduceReaderA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardIntroduceReaderA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPCSTR szDeviceName)
     * }
     */
    public static FunctionDescriptor SCardIntroduceReaderA$descriptor() {
        return SCardIntroduceReaderA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardIntroduceReaderA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPCSTR szDeviceName)
     * }
     */
    public static MethodHandle SCardIntroduceReaderA$handle() {
        return SCardIntroduceReaderA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardIntroduceReaderA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPCSTR szDeviceName)
     * }
     */
    public static int SCardIntroduceReaderA(long hContext, MemorySegment szReaderName, MemorySegment szDeviceName) {
        var mh$ = SCardIntroduceReaderA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardIntroduceReaderA", hContext, szReaderName, szDeviceName);
            }
            return (int)mh$.invokeExact(hContext, szReaderName, szDeviceName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardIntroduceReaderW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardIntroduceReaderW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardIntroduceReaderW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPCWSTR szDeviceName)
     * }
     */
    public static FunctionDescriptor SCardIntroduceReaderW$descriptor() {
        return SCardIntroduceReaderW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardIntroduceReaderW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPCWSTR szDeviceName)
     * }
     */
    public static MethodHandle SCardIntroduceReaderW$handle() {
        return SCardIntroduceReaderW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardIntroduceReaderW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPCWSTR szDeviceName)
     * }
     */
    public static int SCardIntroduceReaderW(long hContext, MemorySegment szReaderName, MemorySegment szDeviceName) {
        var mh$ = SCardIntroduceReaderW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardIntroduceReaderW", hContext, szReaderName, szDeviceName);
            }
            return (int)mh$.invokeExact(hContext, szReaderName, szDeviceName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardForgetReaderA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardForgetReaderA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardForgetReaderA(SCARDCONTEXT hContext, LPCSTR szReaderName)
     * }
     */
    public static FunctionDescriptor SCardForgetReaderA$descriptor() {
        return SCardForgetReaderA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardForgetReaderA(SCARDCONTEXT hContext, LPCSTR szReaderName)
     * }
     */
    public static MethodHandle SCardForgetReaderA$handle() {
        return SCardForgetReaderA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardForgetReaderA(SCARDCONTEXT hContext, LPCSTR szReaderName)
     * }
     */
    public static int SCardForgetReaderA(long hContext, MemorySegment szReaderName) {
        var mh$ = SCardForgetReaderA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardForgetReaderA", hContext, szReaderName);
            }
            return (int)mh$.invokeExact(hContext, szReaderName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardForgetReaderW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardForgetReaderW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardForgetReaderW(SCARDCONTEXT hContext, LPCWSTR szReaderName)
     * }
     */
    public static FunctionDescriptor SCardForgetReaderW$descriptor() {
        return SCardForgetReaderW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardForgetReaderW(SCARDCONTEXT hContext, LPCWSTR szReaderName)
     * }
     */
    public static MethodHandle SCardForgetReaderW$handle() {
        return SCardForgetReaderW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardForgetReaderW(SCARDCONTEXT hContext, LPCWSTR szReaderName)
     * }
     */
    public static int SCardForgetReaderW(long hContext, MemorySegment szReaderName) {
        var mh$ = SCardForgetReaderW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardForgetReaderW", hContext, szReaderName);
            }
            return (int)mh$.invokeExact(hContext, szReaderName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardAddReaderToGroupA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardAddReaderToGroupA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardAddReaderToGroupA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPCSTR szGroupName)
     * }
     */
    public static FunctionDescriptor SCardAddReaderToGroupA$descriptor() {
        return SCardAddReaderToGroupA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardAddReaderToGroupA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPCSTR szGroupName)
     * }
     */
    public static MethodHandle SCardAddReaderToGroupA$handle() {
        return SCardAddReaderToGroupA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardAddReaderToGroupA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPCSTR szGroupName)
     * }
     */
    public static int SCardAddReaderToGroupA(long hContext, MemorySegment szReaderName, MemorySegment szGroupName) {
        var mh$ = SCardAddReaderToGroupA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardAddReaderToGroupA", hContext, szReaderName, szGroupName);
            }
            return (int)mh$.invokeExact(hContext, szReaderName, szGroupName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardAddReaderToGroupW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardAddReaderToGroupW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardAddReaderToGroupW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPCWSTR szGroupName)
     * }
     */
    public static FunctionDescriptor SCardAddReaderToGroupW$descriptor() {
        return SCardAddReaderToGroupW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardAddReaderToGroupW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPCWSTR szGroupName)
     * }
     */
    public static MethodHandle SCardAddReaderToGroupW$handle() {
        return SCardAddReaderToGroupW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardAddReaderToGroupW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPCWSTR szGroupName)
     * }
     */
    public static int SCardAddReaderToGroupW(long hContext, MemorySegment szReaderName, MemorySegment szGroupName) {
        var mh$ = SCardAddReaderToGroupW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardAddReaderToGroupW", hContext, szReaderName, szGroupName);
            }
            return (int)mh$.invokeExact(hContext, szReaderName, szGroupName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardRemoveReaderFromGroupA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardRemoveReaderFromGroupA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardRemoveReaderFromGroupA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPCSTR szGroupName)
     * }
     */
    public static FunctionDescriptor SCardRemoveReaderFromGroupA$descriptor() {
        return SCardRemoveReaderFromGroupA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardRemoveReaderFromGroupA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPCSTR szGroupName)
     * }
     */
    public static MethodHandle SCardRemoveReaderFromGroupA$handle() {
        return SCardRemoveReaderFromGroupA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardRemoveReaderFromGroupA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPCSTR szGroupName)
     * }
     */
    public static int SCardRemoveReaderFromGroupA(long hContext, MemorySegment szReaderName, MemorySegment szGroupName) {
        var mh$ = SCardRemoveReaderFromGroupA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardRemoveReaderFromGroupA", hContext, szReaderName, szGroupName);
            }
            return (int)mh$.invokeExact(hContext, szReaderName, szGroupName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardRemoveReaderFromGroupW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardRemoveReaderFromGroupW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardRemoveReaderFromGroupW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPCWSTR szGroupName)
     * }
     */
    public static FunctionDescriptor SCardRemoveReaderFromGroupW$descriptor() {
        return SCardRemoveReaderFromGroupW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardRemoveReaderFromGroupW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPCWSTR szGroupName)
     * }
     */
    public static MethodHandle SCardRemoveReaderFromGroupW$handle() {
        return SCardRemoveReaderFromGroupW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardRemoveReaderFromGroupW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPCWSTR szGroupName)
     * }
     */
    public static int SCardRemoveReaderFromGroupW(long hContext, MemorySegment szReaderName, MemorySegment szGroupName) {
        var mh$ = SCardRemoveReaderFromGroupW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardRemoveReaderFromGroupW", hContext, szReaderName, szGroupName);
            }
            return (int)mh$.invokeExact(hContext, szReaderName, szGroupName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardIntroduceCardTypeA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardIntroduceCardTypeA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardIntroduceCardTypeA(SCARDCONTEXT hContext, LPCSTR szCardName, LPCGUID pguidPrimaryProvider, LPCGUID rgguidInterfaces, DWORD dwInterfaceCount, LPCBYTE pbAtr, LPCBYTE pbAtrMask, DWORD cbAtrLen)
     * }
     */
    public static FunctionDescriptor SCardIntroduceCardTypeA$descriptor() {
        return SCardIntroduceCardTypeA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardIntroduceCardTypeA(SCARDCONTEXT hContext, LPCSTR szCardName, LPCGUID pguidPrimaryProvider, LPCGUID rgguidInterfaces, DWORD dwInterfaceCount, LPCBYTE pbAtr, LPCBYTE pbAtrMask, DWORD cbAtrLen)
     * }
     */
    public static MethodHandle SCardIntroduceCardTypeA$handle() {
        return SCardIntroduceCardTypeA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardIntroduceCardTypeA(SCARDCONTEXT hContext, LPCSTR szCardName, LPCGUID pguidPrimaryProvider, LPCGUID rgguidInterfaces, DWORD dwInterfaceCount, LPCBYTE pbAtr, LPCBYTE pbAtrMask, DWORD cbAtrLen)
     * }
     */
    public static int SCardIntroduceCardTypeA(long hContext, MemorySegment szCardName, MemorySegment pguidPrimaryProvider, MemorySegment rgguidInterfaces, int dwInterfaceCount, MemorySegment pbAtr, MemorySegment pbAtrMask, int cbAtrLen) {
        var mh$ = SCardIntroduceCardTypeA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardIntroduceCardTypeA", hContext, szCardName, pguidPrimaryProvider, rgguidInterfaces, dwInterfaceCount, pbAtr, pbAtrMask, cbAtrLen);
            }
            return (int)mh$.invokeExact(hContext, szCardName, pguidPrimaryProvider, rgguidInterfaces, dwInterfaceCount, pbAtr, pbAtrMask, cbAtrLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardIntroduceCardTypeW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardIntroduceCardTypeW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardIntroduceCardTypeW(SCARDCONTEXT hContext, LPCWSTR szCardName, LPCGUID pguidPrimaryProvider, LPCGUID rgguidInterfaces, DWORD dwInterfaceCount, LPCBYTE pbAtr, LPCBYTE pbAtrMask, DWORD cbAtrLen)
     * }
     */
    public static FunctionDescriptor SCardIntroduceCardTypeW$descriptor() {
        return SCardIntroduceCardTypeW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardIntroduceCardTypeW(SCARDCONTEXT hContext, LPCWSTR szCardName, LPCGUID pguidPrimaryProvider, LPCGUID rgguidInterfaces, DWORD dwInterfaceCount, LPCBYTE pbAtr, LPCBYTE pbAtrMask, DWORD cbAtrLen)
     * }
     */
    public static MethodHandle SCardIntroduceCardTypeW$handle() {
        return SCardIntroduceCardTypeW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardIntroduceCardTypeW(SCARDCONTEXT hContext, LPCWSTR szCardName, LPCGUID pguidPrimaryProvider, LPCGUID rgguidInterfaces, DWORD dwInterfaceCount, LPCBYTE pbAtr, LPCBYTE pbAtrMask, DWORD cbAtrLen)
     * }
     */
    public static int SCardIntroduceCardTypeW(long hContext, MemorySegment szCardName, MemorySegment pguidPrimaryProvider, MemorySegment rgguidInterfaces, int dwInterfaceCount, MemorySegment pbAtr, MemorySegment pbAtrMask, int cbAtrLen) {
        var mh$ = SCardIntroduceCardTypeW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardIntroduceCardTypeW", hContext, szCardName, pguidPrimaryProvider, rgguidInterfaces, dwInterfaceCount, pbAtr, pbAtrMask, cbAtrLen);
            }
            return (int)mh$.invokeExact(hContext, szCardName, pguidPrimaryProvider, rgguidInterfaces, dwInterfaceCount, pbAtr, pbAtrMask, cbAtrLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardSetCardTypeProviderNameA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardSetCardTypeProviderNameA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardSetCardTypeProviderNameA(SCARDCONTEXT hContext, LPCSTR szCardName, DWORD dwProviderId, LPCSTR szProvider)
     * }
     */
    public static FunctionDescriptor SCardSetCardTypeProviderNameA$descriptor() {
        return SCardSetCardTypeProviderNameA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardSetCardTypeProviderNameA(SCARDCONTEXT hContext, LPCSTR szCardName, DWORD dwProviderId, LPCSTR szProvider)
     * }
     */
    public static MethodHandle SCardSetCardTypeProviderNameA$handle() {
        return SCardSetCardTypeProviderNameA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardSetCardTypeProviderNameA(SCARDCONTEXT hContext, LPCSTR szCardName, DWORD dwProviderId, LPCSTR szProvider)
     * }
     */
    public static int SCardSetCardTypeProviderNameA(long hContext, MemorySegment szCardName, int dwProviderId, MemorySegment szProvider) {
        var mh$ = SCardSetCardTypeProviderNameA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardSetCardTypeProviderNameA", hContext, szCardName, dwProviderId, szProvider);
            }
            return (int)mh$.invokeExact(hContext, szCardName, dwProviderId, szProvider);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardSetCardTypeProviderNameW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardSetCardTypeProviderNameW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardSetCardTypeProviderNameW(SCARDCONTEXT hContext, LPCWSTR szCardName, DWORD dwProviderId, LPCWSTR szProvider)
     * }
     */
    public static FunctionDescriptor SCardSetCardTypeProviderNameW$descriptor() {
        return SCardSetCardTypeProviderNameW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardSetCardTypeProviderNameW(SCARDCONTEXT hContext, LPCWSTR szCardName, DWORD dwProviderId, LPCWSTR szProvider)
     * }
     */
    public static MethodHandle SCardSetCardTypeProviderNameW$handle() {
        return SCardSetCardTypeProviderNameW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardSetCardTypeProviderNameW(SCARDCONTEXT hContext, LPCWSTR szCardName, DWORD dwProviderId, LPCWSTR szProvider)
     * }
     */
    public static int SCardSetCardTypeProviderNameW(long hContext, MemorySegment szCardName, int dwProviderId, MemorySegment szProvider) {
        var mh$ = SCardSetCardTypeProviderNameW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardSetCardTypeProviderNameW", hContext, szCardName, dwProviderId, szProvider);
            }
            return (int)mh$.invokeExact(hContext, szCardName, dwProviderId, szProvider);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardForgetCardTypeA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardForgetCardTypeA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardForgetCardTypeA(SCARDCONTEXT hContext, LPCSTR szCardName)
     * }
     */
    public static FunctionDescriptor SCardForgetCardTypeA$descriptor() {
        return SCardForgetCardTypeA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardForgetCardTypeA(SCARDCONTEXT hContext, LPCSTR szCardName)
     * }
     */
    public static MethodHandle SCardForgetCardTypeA$handle() {
        return SCardForgetCardTypeA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardForgetCardTypeA(SCARDCONTEXT hContext, LPCSTR szCardName)
     * }
     */
    public static int SCardForgetCardTypeA(long hContext, MemorySegment szCardName) {
        var mh$ = SCardForgetCardTypeA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardForgetCardTypeA", hContext, szCardName);
            }
            return (int)mh$.invokeExact(hContext, szCardName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardForgetCardTypeW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardForgetCardTypeW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardForgetCardTypeW(SCARDCONTEXT hContext, LPCWSTR szCardName)
     * }
     */
    public static FunctionDescriptor SCardForgetCardTypeW$descriptor() {
        return SCardForgetCardTypeW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardForgetCardTypeW(SCARDCONTEXT hContext, LPCWSTR szCardName)
     * }
     */
    public static MethodHandle SCardForgetCardTypeW$handle() {
        return SCardForgetCardTypeW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardForgetCardTypeW(SCARDCONTEXT hContext, LPCWSTR szCardName)
     * }
     */
    public static int SCardForgetCardTypeW(long hContext, MemorySegment szCardName) {
        var mh$ = SCardForgetCardTypeW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardForgetCardTypeW", hContext, szCardName);
            }
            return (int)mh$.invokeExact(hContext, szCardName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardFreeMemory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardFreeMemory"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardFreeMemory(SCARDCONTEXT hContext, LPCVOID pvMem)
     * }
     */
    public static FunctionDescriptor SCardFreeMemory$descriptor() {
        return SCardFreeMemory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardFreeMemory(SCARDCONTEXT hContext, LPCVOID pvMem)
     * }
     */
    public static MethodHandle SCardFreeMemory$handle() {
        return SCardFreeMemory.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardFreeMemory(SCARDCONTEXT hContext, LPCVOID pvMem)
     * }
     */
    public static int SCardFreeMemory(long hContext, MemorySegment pvMem) {
        var mh$ = SCardFreeMemory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardFreeMemory", hContext, pvMem);
            }
            return (int)mh$.invokeExact(hContext, pvMem);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardAccessStartedEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardAccessStartedEvent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HANDLE SCardAccessStartedEvent()
     * }
     */
    public static FunctionDescriptor SCardAccessStartedEvent$descriptor() {
        return SCardAccessStartedEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HANDLE SCardAccessStartedEvent()
     * }
     */
    public static MethodHandle SCardAccessStartedEvent$handle() {
        return SCardAccessStartedEvent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HANDLE SCardAccessStartedEvent()
     * }
     */
    public static MemorySegment SCardAccessStartedEvent() {
        var mh$ = SCardAccessStartedEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardAccessStartedEvent");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardReleaseStartedEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardReleaseStartedEvent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void SCardReleaseStartedEvent()
     * }
     */
    public static FunctionDescriptor SCardReleaseStartedEvent$descriptor() {
        return SCardReleaseStartedEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void SCardReleaseStartedEvent()
     * }
     */
    public static MethodHandle SCardReleaseStartedEvent$handle() {
        return SCardReleaseStartedEvent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void SCardReleaseStartedEvent()
     * }
     */
    public static void SCardReleaseStartedEvent() {
        var mh$ = SCardReleaseStartedEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardReleaseStartedEvent");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     LPCSTR szReader;
     *     LPVOID pvUserData;
     *     DWORD dwCurrentState;
     *     DWORD dwEventState;
     *     DWORD cbAtr;
     *     BYTE rgbAtr[36];
     * } *PSCARD_READERSTATEA
     * }
     */
    public static final AddressLayout PSCARD_READERSTATEA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     LPCSTR szReader;
     *     LPVOID pvUserData;
     *     DWORD dwCurrentState;
     *     DWORD dwEventState;
     *     DWORD cbAtr;
     *     BYTE rgbAtr[36];
     * } *LPSCARD_READERSTATEA
     * }
     */
    public static final AddressLayout LPSCARD_READERSTATEA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     LPCWSTR szReader;
     *     LPVOID pvUserData;
     *     DWORD dwCurrentState;
     *     DWORD dwEventState;
     *     DWORD cbAtr;
     *     BYTE rgbAtr[36];
     * } *PSCARD_READERSTATEW
     * }
     */
    public static final AddressLayout PSCARD_READERSTATEW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     LPCWSTR szReader;
     *     LPVOID pvUserData;
     *     DWORD dwCurrentState;
     *     DWORD dwEventState;
     *     DWORD cbAtr;
     *     BYTE rgbAtr[36];
     * } *LPSCARD_READERSTATEW
     * }
     */
    public static final AddressLayout LPSCARD_READERSTATEW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PSCARD_READERSTATEA PSCARD_READERSTATE
     * }
     */
    public static final AddressLayout PSCARD_READERSTATE = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPSCARD_READERSTATEA LPSCARD_READERSTATE
     * }
     */
    public static final AddressLayout LPSCARD_READERSTATE = C_POINTER;

    private static class SCardLocateCardsA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardLocateCardsA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardLocateCardsA(SCARDCONTEXT hContext, LPCSTR mszCards, LPSCARD_READERSTATEA rgReaderStates, DWORD cReaders)
     * }
     */
    public static FunctionDescriptor SCardLocateCardsA$descriptor() {
        return SCardLocateCardsA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardLocateCardsA(SCARDCONTEXT hContext, LPCSTR mszCards, LPSCARD_READERSTATEA rgReaderStates, DWORD cReaders)
     * }
     */
    public static MethodHandle SCardLocateCardsA$handle() {
        return SCardLocateCardsA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardLocateCardsA(SCARDCONTEXT hContext, LPCSTR mszCards, LPSCARD_READERSTATEA rgReaderStates, DWORD cReaders)
     * }
     */
    public static int SCardLocateCardsA(long hContext, MemorySegment mszCards, MemorySegment rgReaderStates, int cReaders) {
        var mh$ = SCardLocateCardsA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardLocateCardsA", hContext, mszCards, rgReaderStates, cReaders);
            }
            return (int)mh$.invokeExact(hContext, mszCards, rgReaderStates, cReaders);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardLocateCardsW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardLocateCardsW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardLocateCardsW(SCARDCONTEXT hContext, LPCWSTR mszCards, LPSCARD_READERSTATEW rgReaderStates, DWORD cReaders)
     * }
     */
    public static FunctionDescriptor SCardLocateCardsW$descriptor() {
        return SCardLocateCardsW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardLocateCardsW(SCARDCONTEXT hContext, LPCWSTR mszCards, LPSCARD_READERSTATEW rgReaderStates, DWORD cReaders)
     * }
     */
    public static MethodHandle SCardLocateCardsW$handle() {
        return SCardLocateCardsW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardLocateCardsW(SCARDCONTEXT hContext, LPCWSTR mszCards, LPSCARD_READERSTATEW rgReaderStates, DWORD cReaders)
     * }
     */
    public static int SCardLocateCardsW(long hContext, MemorySegment mszCards, MemorySegment rgReaderStates, int cReaders) {
        var mh$ = SCardLocateCardsW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardLocateCardsW", hContext, mszCards, rgReaderStates, cReaders);
            }
            return (int)mh$.invokeExact(hContext, mszCards, rgReaderStates, cReaders);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _SCARD_ATRMASK {
     *     DWORD cbAtr;
     *     BYTE rgbAtr[36];
     *     BYTE rgbMask[36];
     * } *PSCARD_ATRMASK
     * }
     */
    public static final AddressLayout PSCARD_ATRMASK = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCARD_ATRMASK {
     *     DWORD cbAtr;
     *     BYTE rgbAtr[36];
     *     BYTE rgbMask[36];
     * } *LPSCARD_ATRMASK
     * }
     */
    public static final AddressLayout LPSCARD_ATRMASK = C_POINTER;

    private static class SCardLocateCardsByATRA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardLocateCardsByATRA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardLocateCardsByATRA(SCARDCONTEXT hContext, LPSCARD_ATRMASK rgAtrMasks, DWORD cAtrs, LPSCARD_READERSTATEA rgReaderStates, DWORD cReaders)
     * }
     */
    public static FunctionDescriptor SCardLocateCardsByATRA$descriptor() {
        return SCardLocateCardsByATRA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardLocateCardsByATRA(SCARDCONTEXT hContext, LPSCARD_ATRMASK rgAtrMasks, DWORD cAtrs, LPSCARD_READERSTATEA rgReaderStates, DWORD cReaders)
     * }
     */
    public static MethodHandle SCardLocateCardsByATRA$handle() {
        return SCardLocateCardsByATRA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardLocateCardsByATRA(SCARDCONTEXT hContext, LPSCARD_ATRMASK rgAtrMasks, DWORD cAtrs, LPSCARD_READERSTATEA rgReaderStates, DWORD cReaders)
     * }
     */
    public static int SCardLocateCardsByATRA(long hContext, MemorySegment rgAtrMasks, int cAtrs, MemorySegment rgReaderStates, int cReaders) {
        var mh$ = SCardLocateCardsByATRA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardLocateCardsByATRA", hContext, rgAtrMasks, cAtrs, rgReaderStates, cReaders);
            }
            return (int)mh$.invokeExact(hContext, rgAtrMasks, cAtrs, rgReaderStates, cReaders);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardLocateCardsByATRW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardLocateCardsByATRW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardLocateCardsByATRW(SCARDCONTEXT hContext, LPSCARD_ATRMASK rgAtrMasks, DWORD cAtrs, LPSCARD_READERSTATEW rgReaderStates, DWORD cReaders)
     * }
     */
    public static FunctionDescriptor SCardLocateCardsByATRW$descriptor() {
        return SCardLocateCardsByATRW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardLocateCardsByATRW(SCARDCONTEXT hContext, LPSCARD_ATRMASK rgAtrMasks, DWORD cAtrs, LPSCARD_READERSTATEW rgReaderStates, DWORD cReaders)
     * }
     */
    public static MethodHandle SCardLocateCardsByATRW$handle() {
        return SCardLocateCardsByATRW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardLocateCardsByATRW(SCARDCONTEXT hContext, LPSCARD_ATRMASK rgAtrMasks, DWORD cAtrs, LPSCARD_READERSTATEW rgReaderStates, DWORD cReaders)
     * }
     */
    public static int SCardLocateCardsByATRW(long hContext, MemorySegment rgAtrMasks, int cAtrs, MemorySegment rgReaderStates, int cReaders) {
        var mh$ = SCardLocateCardsByATRW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardLocateCardsByATRW", hContext, rgAtrMasks, cAtrs, rgReaderStates, cReaders);
            }
            return (int)mh$.invokeExact(hContext, rgAtrMasks, cAtrs, rgReaderStates, cReaders);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardGetStatusChangeA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_LONG,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardGetStatusChangeA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardGetStatusChangeA(SCARDCONTEXT hContext, DWORD dwTimeout, LPSCARD_READERSTATEA rgReaderStates, DWORD cReaders)
     * }
     */
    public static FunctionDescriptor SCardGetStatusChangeA$descriptor() {
        return SCardGetStatusChangeA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardGetStatusChangeA(SCARDCONTEXT hContext, DWORD dwTimeout, LPSCARD_READERSTATEA rgReaderStates, DWORD cReaders)
     * }
     */
    public static MethodHandle SCardGetStatusChangeA$handle() {
        return SCardGetStatusChangeA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardGetStatusChangeA(SCARDCONTEXT hContext, DWORD dwTimeout, LPSCARD_READERSTATEA rgReaderStates, DWORD cReaders)
     * }
     */
    public static int SCardGetStatusChangeA(long hContext, int dwTimeout, MemorySegment rgReaderStates, int cReaders) {
        var mh$ = SCardGetStatusChangeA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardGetStatusChangeA", hContext, dwTimeout, rgReaderStates, cReaders);
            }
            return (int)mh$.invokeExact(hContext, dwTimeout, rgReaderStates, cReaders);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardGetStatusChangeW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_LONG,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardGetStatusChangeW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardGetStatusChangeW(SCARDCONTEXT hContext, DWORD dwTimeout, LPSCARD_READERSTATEW rgReaderStates, DWORD cReaders)
     * }
     */
    public static FunctionDescriptor SCardGetStatusChangeW$descriptor() {
        return SCardGetStatusChangeW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardGetStatusChangeW(SCARDCONTEXT hContext, DWORD dwTimeout, LPSCARD_READERSTATEW rgReaderStates, DWORD cReaders)
     * }
     */
    public static MethodHandle SCardGetStatusChangeW$handle() {
        return SCardGetStatusChangeW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardGetStatusChangeW(SCARDCONTEXT hContext, DWORD dwTimeout, LPSCARD_READERSTATEW rgReaderStates, DWORD cReaders)
     * }
     */
    public static int SCardGetStatusChangeW(long hContext, int dwTimeout, MemorySegment rgReaderStates, int cReaders) {
        var mh$ = SCardGetStatusChangeW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardGetStatusChangeW", hContext, dwTimeout, rgReaderStates, cReaders);
            }
            return (int)mh$.invokeExact(hContext, dwTimeout, rgReaderStates, cReaders);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardCancel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardCancel"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardCancel(SCARDCONTEXT hContext)
     * }
     */
    public static FunctionDescriptor SCardCancel$descriptor() {
        return SCardCancel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardCancel(SCARDCONTEXT hContext)
     * }
     */
    public static MethodHandle SCardCancel$handle() {
        return SCardCancel.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardCancel(SCARDCONTEXT hContext)
     * }
     */
    public static int SCardCancel(long hContext) {
        var mh$ = SCardCancel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardCancel", hContext);
            }
            return (int)mh$.invokeExact(hContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardConnectA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardConnectA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardConnectA(SCARDCONTEXT hContext, LPCSTR szReader, DWORD dwShareMode, DWORD dwPreferredProtocols, LPSCARDHANDLE phCard, LPDWORD pdwActiveProtocol)
     * }
     */
    public static FunctionDescriptor SCardConnectA$descriptor() {
        return SCardConnectA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardConnectA(SCARDCONTEXT hContext, LPCSTR szReader, DWORD dwShareMode, DWORD dwPreferredProtocols, LPSCARDHANDLE phCard, LPDWORD pdwActiveProtocol)
     * }
     */
    public static MethodHandle SCardConnectA$handle() {
        return SCardConnectA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardConnectA(SCARDCONTEXT hContext, LPCSTR szReader, DWORD dwShareMode, DWORD dwPreferredProtocols, LPSCARDHANDLE phCard, LPDWORD pdwActiveProtocol)
     * }
     */
    public static int SCardConnectA(long hContext, MemorySegment szReader, int dwShareMode, int dwPreferredProtocols, MemorySegment phCard, MemorySegment pdwActiveProtocol) {
        var mh$ = SCardConnectA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardConnectA", hContext, szReader, dwShareMode, dwPreferredProtocols, phCard, pdwActiveProtocol);
            }
            return (int)mh$.invokeExact(hContext, szReader, dwShareMode, dwPreferredProtocols, phCard, pdwActiveProtocol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardConnectW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardConnectW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardConnectW(SCARDCONTEXT hContext, LPCWSTR szReader, DWORD dwShareMode, DWORD dwPreferredProtocols, LPSCARDHANDLE phCard, LPDWORD pdwActiveProtocol)
     * }
     */
    public static FunctionDescriptor SCardConnectW$descriptor() {
        return SCardConnectW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardConnectW(SCARDCONTEXT hContext, LPCWSTR szReader, DWORD dwShareMode, DWORD dwPreferredProtocols, LPSCARDHANDLE phCard, LPDWORD pdwActiveProtocol)
     * }
     */
    public static MethodHandle SCardConnectW$handle() {
        return SCardConnectW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardConnectW(SCARDCONTEXT hContext, LPCWSTR szReader, DWORD dwShareMode, DWORD dwPreferredProtocols, LPSCARDHANDLE phCard, LPDWORD pdwActiveProtocol)
     * }
     */
    public static int SCardConnectW(long hContext, MemorySegment szReader, int dwShareMode, int dwPreferredProtocols, MemorySegment phCard, MemorySegment pdwActiveProtocol) {
        var mh$ = SCardConnectW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardConnectW", hContext, szReader, dwShareMode, dwPreferredProtocols, phCard, pdwActiveProtocol);
            }
            return (int)mh$.invokeExact(hContext, szReader, dwShareMode, dwPreferredProtocols, phCard, pdwActiveProtocol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardReconnect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_LONG,
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardReconnect"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardReconnect(SCARDHANDLE hCard, DWORD dwShareMode, DWORD dwPreferredProtocols, DWORD dwInitialization, LPDWORD pdwActiveProtocol)
     * }
     */
    public static FunctionDescriptor SCardReconnect$descriptor() {
        return SCardReconnect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardReconnect(SCARDHANDLE hCard, DWORD dwShareMode, DWORD dwPreferredProtocols, DWORD dwInitialization, LPDWORD pdwActiveProtocol)
     * }
     */
    public static MethodHandle SCardReconnect$handle() {
        return SCardReconnect.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardReconnect(SCARDHANDLE hCard, DWORD dwShareMode, DWORD dwPreferredProtocols, DWORD dwInitialization, LPDWORD pdwActiveProtocol)
     * }
     */
    public static int SCardReconnect(long hCard, int dwShareMode, int dwPreferredProtocols, int dwInitialization, MemorySegment pdwActiveProtocol) {
        var mh$ = SCardReconnect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardReconnect", hCard, dwShareMode, dwPreferredProtocols, dwInitialization, pdwActiveProtocol);
            }
            return (int)mh$.invokeExact(hCard, dwShareMode, dwPreferredProtocols, dwInitialization, pdwActiveProtocol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardDisconnect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardDisconnect"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardDisconnect(SCARDHANDLE hCard, DWORD dwDisposition)
     * }
     */
    public static FunctionDescriptor SCardDisconnect$descriptor() {
        return SCardDisconnect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardDisconnect(SCARDHANDLE hCard, DWORD dwDisposition)
     * }
     */
    public static MethodHandle SCardDisconnect$handle() {
        return SCardDisconnect.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardDisconnect(SCARDHANDLE hCard, DWORD dwDisposition)
     * }
     */
    public static int SCardDisconnect(long hCard, int dwDisposition) {
        var mh$ = SCardDisconnect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardDisconnect", hCard, dwDisposition);
            }
            return (int)mh$.invokeExact(hCard, dwDisposition);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardBeginTransaction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardBeginTransaction"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardBeginTransaction(SCARDHANDLE hCard)
     * }
     */
    public static FunctionDescriptor SCardBeginTransaction$descriptor() {
        return SCardBeginTransaction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardBeginTransaction(SCARDHANDLE hCard)
     * }
     */
    public static MethodHandle SCardBeginTransaction$handle() {
        return SCardBeginTransaction.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardBeginTransaction(SCARDHANDLE hCard)
     * }
     */
    public static int SCardBeginTransaction(long hCard) {
        var mh$ = SCardBeginTransaction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardBeginTransaction", hCard);
            }
            return (int)mh$.invokeExact(hCard);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardEndTransaction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardEndTransaction"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardEndTransaction(SCARDHANDLE hCard, DWORD dwDisposition)
     * }
     */
    public static FunctionDescriptor SCardEndTransaction$descriptor() {
        return SCardEndTransaction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardEndTransaction(SCARDHANDLE hCard, DWORD dwDisposition)
     * }
     */
    public static MethodHandle SCardEndTransaction$handle() {
        return SCardEndTransaction.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardEndTransaction(SCARDHANDLE hCard, DWORD dwDisposition)
     * }
     */
    public static int SCardEndTransaction(long hCard, int dwDisposition) {
        var mh$ = SCardEndTransaction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardEndTransaction", hCard, dwDisposition);
            }
            return (int)mh$.invokeExact(hCard, dwDisposition);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardCancelTransaction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardCancelTransaction"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardCancelTransaction(SCARDHANDLE hCard)
     * }
     */
    public static FunctionDescriptor SCardCancelTransaction$descriptor() {
        return SCardCancelTransaction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardCancelTransaction(SCARDHANDLE hCard)
     * }
     */
    public static MethodHandle SCardCancelTransaction$handle() {
        return SCardCancelTransaction.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardCancelTransaction(SCARDHANDLE hCard)
     * }
     */
    public static int SCardCancelTransaction(long hCard) {
        var mh$ = SCardCancelTransaction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardCancelTransaction", hCard);
            }
            return (int)mh$.invokeExact(hCard);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardState {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardState"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardState(SCARDHANDLE hCard, LPDWORD pdwState, LPDWORD pdwProtocol, LPBYTE pbAtr, LPDWORD pcbAtrLen)
     * }
     */
    public static FunctionDescriptor SCardState$descriptor() {
        return SCardState.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardState(SCARDHANDLE hCard, LPDWORD pdwState, LPDWORD pdwProtocol, LPBYTE pbAtr, LPDWORD pcbAtrLen)
     * }
     */
    public static MethodHandle SCardState$handle() {
        return SCardState.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardState(SCARDHANDLE hCard, LPDWORD pdwState, LPDWORD pdwProtocol, LPBYTE pbAtr, LPDWORD pcbAtrLen)
     * }
     */
    public static int SCardState(long hCard, MemorySegment pdwState, MemorySegment pdwProtocol, MemorySegment pbAtr, MemorySegment pcbAtrLen) {
        var mh$ = SCardState.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardState", hCard, pdwState, pdwProtocol, pbAtr, pcbAtrLen);
            }
            return (int)mh$.invokeExact(hCard, pdwState, pdwProtocol, pbAtr, pcbAtrLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardStatusA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardStatusA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardStatusA(SCARDHANDLE hCard, LPSTR mszReaderNames, LPDWORD pcchReaderLen, LPDWORD pdwState, LPDWORD pdwProtocol, LPBYTE pbAtr, LPDWORD pcbAtrLen)
     * }
     */
    public static FunctionDescriptor SCardStatusA$descriptor() {
        return SCardStatusA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardStatusA(SCARDHANDLE hCard, LPSTR mszReaderNames, LPDWORD pcchReaderLen, LPDWORD pdwState, LPDWORD pdwProtocol, LPBYTE pbAtr, LPDWORD pcbAtrLen)
     * }
     */
    public static MethodHandle SCardStatusA$handle() {
        return SCardStatusA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardStatusA(SCARDHANDLE hCard, LPSTR mszReaderNames, LPDWORD pcchReaderLen, LPDWORD pdwState, LPDWORD pdwProtocol, LPBYTE pbAtr, LPDWORD pcbAtrLen)
     * }
     */
    public static int SCardStatusA(long hCard, MemorySegment mszReaderNames, MemorySegment pcchReaderLen, MemorySegment pdwState, MemorySegment pdwProtocol, MemorySegment pbAtr, MemorySegment pcbAtrLen) {
        var mh$ = SCardStatusA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardStatusA", hCard, mszReaderNames, pcchReaderLen, pdwState, pdwProtocol, pbAtr, pcbAtrLen);
            }
            return (int)mh$.invokeExact(hCard, mszReaderNames, pcchReaderLen, pdwState, pdwProtocol, pbAtr, pcbAtrLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardStatusW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardStatusW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardStatusW(SCARDHANDLE hCard, LPWSTR mszReaderNames, LPDWORD pcchReaderLen, LPDWORD pdwState, LPDWORD pdwProtocol, LPBYTE pbAtr, LPDWORD pcbAtrLen)
     * }
     */
    public static FunctionDescriptor SCardStatusW$descriptor() {
        return SCardStatusW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardStatusW(SCARDHANDLE hCard, LPWSTR mszReaderNames, LPDWORD pcchReaderLen, LPDWORD pdwState, LPDWORD pdwProtocol, LPBYTE pbAtr, LPDWORD pcbAtrLen)
     * }
     */
    public static MethodHandle SCardStatusW$handle() {
        return SCardStatusW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardStatusW(SCARDHANDLE hCard, LPWSTR mszReaderNames, LPDWORD pcchReaderLen, LPDWORD pdwState, LPDWORD pdwProtocol, LPBYTE pbAtr, LPDWORD pcbAtrLen)
     * }
     */
    public static int SCardStatusW(long hCard, MemorySegment mszReaderNames, MemorySegment pcchReaderLen, MemorySegment pdwState, MemorySegment pdwProtocol, MemorySegment pbAtr, MemorySegment pcbAtrLen) {
        var mh$ = SCardStatusW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardStatusW", hCard, mszReaderNames, pcchReaderLen, pdwState, pdwProtocol, pbAtr, pcbAtrLen);
            }
            return (int)mh$.invokeExact(hCard, mszReaderNames, pcchReaderLen, pdwState, pdwProtocol, pbAtr, pcbAtrLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardTransmit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardTransmit"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardTransmit(SCARDHANDLE hCard, LPCSCARD_IO_REQUEST pioSendPci, LPCBYTE pbSendBuffer, DWORD cbSendLength, LPSCARD_IO_REQUEST pioRecvPci, LPBYTE pbRecvBuffer, LPDWORD pcbRecvLength)
     * }
     */
    public static FunctionDescriptor SCardTransmit$descriptor() {
        return SCardTransmit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardTransmit(SCARDHANDLE hCard, LPCSCARD_IO_REQUEST pioSendPci, LPCBYTE pbSendBuffer, DWORD cbSendLength, LPSCARD_IO_REQUEST pioRecvPci, LPBYTE pbRecvBuffer, LPDWORD pcbRecvLength)
     * }
     */
    public static MethodHandle SCardTransmit$handle() {
        return SCardTransmit.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardTransmit(SCARDHANDLE hCard, LPCSCARD_IO_REQUEST pioSendPci, LPCBYTE pbSendBuffer, DWORD cbSendLength, LPSCARD_IO_REQUEST pioRecvPci, LPBYTE pbRecvBuffer, LPDWORD pcbRecvLength)
     * }
     */
    public static int SCardTransmit(long hCard, MemorySegment pioSendPci, MemorySegment pbSendBuffer, int cbSendLength, MemorySegment pioRecvPci, MemorySegment pbRecvBuffer, MemorySegment pcbRecvLength) {
        var mh$ = SCardTransmit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardTransmit", hCard, pioSendPci, pbSendBuffer, cbSendLength, pioRecvPci, pbRecvBuffer, pcbRecvLength);
            }
            return (int)mh$.invokeExact(hCard, pioSendPci, pbSendBuffer, cbSendLength, pioRecvPci, pbRecvBuffer, pcbRecvLength);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardGetTransmitCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardGetTransmitCount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardGetTransmitCount(SCARDHANDLE hCard, LPDWORD pcTransmitCount)
     * }
     */
    public static FunctionDescriptor SCardGetTransmitCount$descriptor() {
        return SCardGetTransmitCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardGetTransmitCount(SCARDHANDLE hCard, LPDWORD pcTransmitCount)
     * }
     */
    public static MethodHandle SCardGetTransmitCount$handle() {
        return SCardGetTransmitCount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardGetTransmitCount(SCARDHANDLE hCard, LPDWORD pcTransmitCount)
     * }
     */
    public static int SCardGetTransmitCount(long hCard, MemorySegment pcTransmitCount) {
        var mh$ = SCardGetTransmitCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardGetTransmitCount", hCard, pcTransmitCount);
            }
            return (int)mh$.invokeExact(hCard, pcTransmitCount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardControl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardControl"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardControl(SCARDHANDLE hCard, DWORD dwControlCode, LPCVOID lpInBuffer, DWORD cbInBufferSize, LPVOID lpOutBuffer, DWORD cbOutBufferSize, LPDWORD lpBytesReturned)
     * }
     */
    public static FunctionDescriptor SCardControl$descriptor() {
        return SCardControl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardControl(SCARDHANDLE hCard, DWORD dwControlCode, LPCVOID lpInBuffer, DWORD cbInBufferSize, LPVOID lpOutBuffer, DWORD cbOutBufferSize, LPDWORD lpBytesReturned)
     * }
     */
    public static MethodHandle SCardControl$handle() {
        return SCardControl.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardControl(SCARDHANDLE hCard, DWORD dwControlCode, LPCVOID lpInBuffer, DWORD cbInBufferSize, LPVOID lpOutBuffer, DWORD cbOutBufferSize, LPDWORD lpBytesReturned)
     * }
     */
    public static int SCardControl(long hCard, int dwControlCode, MemorySegment lpInBuffer, int cbInBufferSize, MemorySegment lpOutBuffer, int cbOutBufferSize, MemorySegment lpBytesReturned) {
        var mh$ = SCardControl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardControl", hCard, dwControlCode, lpInBuffer, cbInBufferSize, lpOutBuffer, cbOutBufferSize, lpBytesReturned);
            }
            return (int)mh$.invokeExact(hCard, dwControlCode, lpInBuffer, cbInBufferSize, lpOutBuffer, cbOutBufferSize, lpBytesReturned);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardGetAttrib {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardGetAttrib"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardGetAttrib(SCARDHANDLE hCard, DWORD dwAttrId, LPBYTE pbAttr, LPDWORD pcbAttrLen)
     * }
     */
    public static FunctionDescriptor SCardGetAttrib$descriptor() {
        return SCardGetAttrib.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardGetAttrib(SCARDHANDLE hCard, DWORD dwAttrId, LPBYTE pbAttr, LPDWORD pcbAttrLen)
     * }
     */
    public static MethodHandle SCardGetAttrib$handle() {
        return SCardGetAttrib.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardGetAttrib(SCARDHANDLE hCard, DWORD dwAttrId, LPBYTE pbAttr, LPDWORD pcbAttrLen)
     * }
     */
    public static int SCardGetAttrib(long hCard, int dwAttrId, MemorySegment pbAttr, MemorySegment pcbAttrLen) {
        var mh$ = SCardGetAttrib.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardGetAttrib", hCard, dwAttrId, pbAttr, pcbAttrLen);
            }
            return (int)mh$.invokeExact(hCard, dwAttrId, pbAttr, pcbAttrLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardSetAttrib {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_LONG,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardSetAttrib"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardSetAttrib(SCARDHANDLE hCard, DWORD dwAttrId, LPCBYTE pbAttr, DWORD cbAttrLen)
     * }
     */
    public static FunctionDescriptor SCardSetAttrib$descriptor() {
        return SCardSetAttrib.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardSetAttrib(SCARDHANDLE hCard, DWORD dwAttrId, LPCBYTE pbAttr, DWORD cbAttrLen)
     * }
     */
    public static MethodHandle SCardSetAttrib$handle() {
        return SCardSetAttrib.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardSetAttrib(SCARDHANDLE hCard, DWORD dwAttrId, LPCBYTE pbAttr, DWORD cbAttrLen)
     * }
     */
    public static int SCardSetAttrib(long hCard, int dwAttrId, MemorySegment pbAttr, int cbAttrLen) {
        var mh$ = SCardSetAttrib.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardSetAttrib", hCard, dwAttrId, pbAttr, cbAttrLen);
            }
            return (int)mh$.invokeExact(hCard, dwAttrId, pbAttr, cbAttrLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD dwStructSize;
     *     LPSTR lpstrGroupNames;
     *     DWORD nMaxGroupNames;
     *     LPCGUID rgguidInterfaces;
     *     DWORD cguidInterfaces;
     *     LPSTR lpstrCardNames;
     *     DWORD nMaxCardNames;
     *     LPOCNCHKPROC lpfnCheck;
     *     LPOCNCONNPROCA lpfnConnect;
     *     LPOCNDSCPROC lpfnDisconnect;
     *     LPVOID pvUserData;
     *     DWORD dwShareMode;
     *     DWORD dwPreferredProtocols;
     * } *POPENCARD_SEARCH_CRITERIAA
     * }
     */
    public static final AddressLayout POPENCARD_SEARCH_CRITERIAA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD dwStructSize;
     *     LPSTR lpstrGroupNames;
     *     DWORD nMaxGroupNames;
     *     LPCGUID rgguidInterfaces;
     *     DWORD cguidInterfaces;
     *     LPSTR lpstrCardNames;
     *     DWORD nMaxCardNames;
     *     LPOCNCHKPROC lpfnCheck;
     *     LPOCNCONNPROCA lpfnConnect;
     *     LPOCNDSCPROC lpfnDisconnect;
     *     LPVOID pvUserData;
     *     DWORD dwShareMode;
     *     DWORD dwPreferredProtocols;
     * } *LPOPENCARD_SEARCH_CRITERIAA
     * }
     */
    public static final AddressLayout LPOPENCARD_SEARCH_CRITERIAA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD dwStructSize;
     *     LPWSTR lpstrGroupNames;
     *     DWORD nMaxGroupNames;
     *     LPCGUID rgguidInterfaces;
     *     DWORD cguidInterfaces;
     *     LPWSTR lpstrCardNames;
     *     DWORD nMaxCardNames;
     *     LPOCNCHKPROC lpfnCheck;
     *     LPOCNCONNPROCW lpfnConnect;
     *     LPOCNDSCPROC lpfnDisconnect;
     *     LPVOID pvUserData;
     *     DWORD dwShareMode;
     *     DWORD dwPreferredProtocols;
     * } *POPENCARD_SEARCH_CRITERIAW
     * }
     */
    public static final AddressLayout POPENCARD_SEARCH_CRITERIAW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD dwStructSize;
     *     LPWSTR lpstrGroupNames;
     *     DWORD nMaxGroupNames;
     *     LPCGUID rgguidInterfaces;
     *     DWORD cguidInterfaces;
     *     LPWSTR lpstrCardNames;
     *     DWORD nMaxCardNames;
     *     LPOCNCHKPROC lpfnCheck;
     *     LPOCNCONNPROCW lpfnConnect;
     *     LPOCNDSCPROC lpfnDisconnect;
     *     LPVOID pvUserData;
     *     DWORD dwShareMode;
     *     DWORD dwPreferredProtocols;
     * } *LPOPENCARD_SEARCH_CRITERIAW
     * }
     */
    public static final AddressLayout LPOPENCARD_SEARCH_CRITERIAW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef POPENCARD_SEARCH_CRITERIAA POPENCARD_SEARCH_CRITERIA
     * }
     */
    public static final AddressLayout POPENCARD_SEARCH_CRITERIA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPOPENCARD_SEARCH_CRITERIAA LPOPENCARD_SEARCH_CRITERIA
     * }
     */
    public static final AddressLayout LPOPENCARD_SEARCH_CRITERIA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD dwStructSize;
     *     SCARDCONTEXT hSCardContext;
     *     HWND hwndOwner;
     *     DWORD dwFlags;
     *     LPCSTR lpstrTitle;
     *     LPCSTR lpstrSearchDesc;
     *     HICON hIcon;
     *     POPENCARD_SEARCH_CRITERIAA pOpenCardSearchCriteria;
     *     LPOCNCONNPROCA lpfnConnect;
     *     LPVOID pvUserData;
     *     DWORD dwShareMode;
     *     DWORD dwPreferredProtocols;
     *     LPSTR lpstrRdr;
     *     DWORD nMaxRdr;
     *     LPSTR lpstrCard;
     *     DWORD nMaxCard;
     *     DWORD dwActiveProtocol;
     *     SCARDHANDLE hCardHandle;
     * } *POPENCARDNAME_EXA
     * }
     */
    public static final AddressLayout POPENCARDNAME_EXA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD dwStructSize;
     *     SCARDCONTEXT hSCardContext;
     *     HWND hwndOwner;
     *     DWORD dwFlags;
     *     LPCSTR lpstrTitle;
     *     LPCSTR lpstrSearchDesc;
     *     HICON hIcon;
     *     POPENCARD_SEARCH_CRITERIAA pOpenCardSearchCriteria;
     *     LPOCNCONNPROCA lpfnConnect;
     *     LPVOID pvUserData;
     *     DWORD dwShareMode;
     *     DWORD dwPreferredProtocols;
     *     LPSTR lpstrRdr;
     *     DWORD nMaxRdr;
     *     LPSTR lpstrCard;
     *     DWORD nMaxCard;
     *     DWORD dwActiveProtocol;
     *     SCARDHANDLE hCardHandle;
     * } *LPOPENCARDNAME_EXA
     * }
     */
    public static final AddressLayout LPOPENCARDNAME_EXA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD dwStructSize;
     *     SCARDCONTEXT hSCardContext;
     *     HWND hwndOwner;
     *     DWORD dwFlags;
     *     LPCWSTR lpstrTitle;
     *     LPCWSTR lpstrSearchDesc;
     *     HICON hIcon;
     *     POPENCARD_SEARCH_CRITERIAW pOpenCardSearchCriteria;
     *     LPOCNCONNPROCW lpfnConnect;
     *     LPVOID pvUserData;
     *     DWORD dwShareMode;
     *     DWORD dwPreferredProtocols;
     *     LPWSTR lpstrRdr;
     *     DWORD nMaxRdr;
     *     LPWSTR lpstrCard;
     *     DWORD nMaxCard;
     *     DWORD dwActiveProtocol;
     *     SCARDHANDLE hCardHandle;
     * } *POPENCARDNAME_EXW
     * }
     */
    public static final AddressLayout POPENCARDNAME_EXW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD dwStructSize;
     *     SCARDCONTEXT hSCardContext;
     *     HWND hwndOwner;
     *     DWORD dwFlags;
     *     LPCWSTR lpstrTitle;
     *     LPCWSTR lpstrSearchDesc;
     *     HICON hIcon;
     *     POPENCARD_SEARCH_CRITERIAW pOpenCardSearchCriteria;
     *     LPOCNCONNPROCW lpfnConnect;
     *     LPVOID pvUserData;
     *     DWORD dwShareMode;
     *     DWORD dwPreferredProtocols;
     *     LPWSTR lpstrRdr;
     *     DWORD nMaxRdr;
     *     LPWSTR lpstrCard;
     *     DWORD nMaxCard;
     *     DWORD dwActiveProtocol;
     *     SCARDHANDLE hCardHandle;
     * } *LPOPENCARDNAME_EXW
     * }
     */
    public static final AddressLayout LPOPENCARDNAME_EXW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef POPENCARDNAME_EXA POPENCARDNAME_EX
     * }
     */
    public static final AddressLayout POPENCARDNAME_EX = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPOPENCARDNAME_EXA LPOPENCARDNAME_EX
     * }
     */
    public static final AddressLayout LPOPENCARDNAME_EX = C_POINTER;
    private static final int RSR_MATCH_TYPE_READER_AND_CONTAINER = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.RSR_MATCH_TYPE_READER_AND_CONTAINER = 1
     * }
     */
    public static int RSR_MATCH_TYPE_READER_AND_CONTAINER() {
        return RSR_MATCH_TYPE_READER_AND_CONTAINER;
    }
    private static final int RSR_MATCH_TYPE_SERIAL_NUMBER = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.RSR_MATCH_TYPE_SERIAL_NUMBER = 2
     * }
     */
    public static int RSR_MATCH_TYPE_SERIAL_NUMBER() {
        return RSR_MATCH_TYPE_SERIAL_NUMBER;
    }
    private static final int RSR_MATCH_TYPE_ALL_CARDS = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.RSR_MATCH_TYPE_ALL_CARDS = 3
     * }
     */
    public static int RSR_MATCH_TYPE_ALL_CARDS() {
        return RSR_MATCH_TYPE_ALL_CARDS;
    }
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD dwShareMode;
     *     DWORD dwPreferredProtocols;
     *     READER_SEL_REQUEST_MATCH_TYPE MatchType;
     *     union {
     *         struct {
     *             DWORD cbReaderNameOffset;
     *             DWORD cchReaderNameLength;
     *             DWORD cbContainerNameOffset;
     *             DWORD cchContainerNameLength;
     *             DWORD dwDesiredCardModuleVersion;
     *             DWORD dwCspFlags;
     *         } ReaderAndContainerParameter;
     *         struct {
     *             DWORD cbSerialNumberOffset;
     *             DWORD cbSerialNumberLength;
     *             DWORD dwDesiredCardModuleVersion;
     *         } SerialNumberParameter;
     *     };
     * } *PREADER_SEL_REQUEST
     * }
     */
    public static final AddressLayout PREADER_SEL_REQUEST = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD cbReaderNameOffset;
     *     DWORD cchReaderNameLength;
     *     DWORD cbCardNameOffset;
     *     DWORD cchCardNameLength;
     * } *PREADER_SEL_RESPONSE
     * }
     */
    public static final AddressLayout PREADER_SEL_RESPONSE = C_POINTER;

    private static class SCardUIDlgSelectCardA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardUIDlgSelectCardA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardUIDlgSelectCardA(LPOPENCARDNAME_EXA)
     * }
     */
    public static FunctionDescriptor SCardUIDlgSelectCardA$descriptor() {
        return SCardUIDlgSelectCardA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardUIDlgSelectCardA(LPOPENCARDNAME_EXA)
     * }
     */
    public static MethodHandle SCardUIDlgSelectCardA$handle() {
        return SCardUIDlgSelectCardA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardUIDlgSelectCardA(LPOPENCARDNAME_EXA)
     * }
     */
    public static int SCardUIDlgSelectCardA(MemorySegment x0) {
        var mh$ = SCardUIDlgSelectCardA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardUIDlgSelectCardA", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardUIDlgSelectCardW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardUIDlgSelectCardW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardUIDlgSelectCardW(LPOPENCARDNAME_EXW)
     * }
     */
    public static FunctionDescriptor SCardUIDlgSelectCardW$descriptor() {
        return SCardUIDlgSelectCardW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardUIDlgSelectCardW(LPOPENCARDNAME_EXW)
     * }
     */
    public static MethodHandle SCardUIDlgSelectCardW$handle() {
        return SCardUIDlgSelectCardW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardUIDlgSelectCardW(LPOPENCARDNAME_EXW)
     * }
     */
    public static int SCardUIDlgSelectCardW(MemorySegment x0) {
        var mh$ = SCardUIDlgSelectCardW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardUIDlgSelectCardW", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD dwStructSize;
     *     HWND hwndOwner;
     *     SCARDCONTEXT hSCardContext;
     *     LPSTR lpstrGroupNames;
     *     DWORD nMaxGroupNames;
     *     LPSTR lpstrCardNames;
     *     DWORD nMaxCardNames;
     *     LPCGUID rgguidInterfaces;
     *     DWORD cguidInterfaces;
     *     LPSTR lpstrRdr;
     *     DWORD nMaxRdr;
     *     LPSTR lpstrCard;
     *     DWORD nMaxCard;
     *     LPCSTR lpstrTitle;
     *     DWORD dwFlags;
     *     LPVOID pvUserData;
     *     DWORD dwShareMode;
     *     DWORD dwPreferredProtocols;
     *     DWORD dwActiveProtocol;
     *     LPOCNCONNPROCA lpfnConnect;
     *     LPOCNCHKPROC lpfnCheck;
     *     LPOCNDSCPROC lpfnDisconnect;
     *     SCARDHANDLE hCardHandle;
     * } *POPENCARDNAMEA
     * }
     */
    public static final AddressLayout POPENCARDNAMEA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD dwStructSize;
     *     HWND hwndOwner;
     *     SCARDCONTEXT hSCardContext;
     *     LPSTR lpstrGroupNames;
     *     DWORD nMaxGroupNames;
     *     LPSTR lpstrCardNames;
     *     DWORD nMaxCardNames;
     *     LPCGUID rgguidInterfaces;
     *     DWORD cguidInterfaces;
     *     LPSTR lpstrRdr;
     *     DWORD nMaxRdr;
     *     LPSTR lpstrCard;
     *     DWORD nMaxCard;
     *     LPCSTR lpstrTitle;
     *     DWORD dwFlags;
     *     LPVOID pvUserData;
     *     DWORD dwShareMode;
     *     DWORD dwPreferredProtocols;
     *     DWORD dwActiveProtocol;
     *     LPOCNCONNPROCA lpfnConnect;
     *     LPOCNCHKPROC lpfnCheck;
     *     LPOCNDSCPROC lpfnDisconnect;
     *     SCARDHANDLE hCardHandle;
     * } *LPOPENCARDNAMEA
     * }
     */
    public static final AddressLayout LPOPENCARDNAMEA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD dwStructSize;
     *     HWND hwndOwner;
     *     SCARDCONTEXT hSCardContext;
     *     LPWSTR lpstrGroupNames;
     *     DWORD nMaxGroupNames;
     *     LPWSTR lpstrCardNames;
     *     DWORD nMaxCardNames;
     *     LPCGUID rgguidInterfaces;
     *     DWORD cguidInterfaces;
     *     LPWSTR lpstrRdr;
     *     DWORD nMaxRdr;
     *     LPWSTR lpstrCard;
     *     DWORD nMaxCard;
     *     LPCWSTR lpstrTitle;
     *     DWORD dwFlags;
     *     LPVOID pvUserData;
     *     DWORD dwShareMode;
     *     DWORD dwPreferredProtocols;
     *     DWORD dwActiveProtocol;
     *     LPOCNCONNPROCW lpfnConnect;
     *     LPOCNCHKPROC lpfnCheck;
     *     LPOCNDSCPROC lpfnDisconnect;
     *     SCARDHANDLE hCardHandle;
     * } *POPENCARDNAMEW
     * }
     */
    public static final AddressLayout POPENCARDNAMEW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD dwStructSize;
     *     HWND hwndOwner;
     *     SCARDCONTEXT hSCardContext;
     *     LPWSTR lpstrGroupNames;
     *     DWORD nMaxGroupNames;
     *     LPWSTR lpstrCardNames;
     *     DWORD nMaxCardNames;
     *     LPCGUID rgguidInterfaces;
     *     DWORD cguidInterfaces;
     *     LPWSTR lpstrRdr;
     *     DWORD nMaxRdr;
     *     LPWSTR lpstrCard;
     *     DWORD nMaxCard;
     *     LPCWSTR lpstrTitle;
     *     DWORD dwFlags;
     *     LPVOID pvUserData;
     *     DWORD dwShareMode;
     *     DWORD dwPreferredProtocols;
     *     DWORD dwActiveProtocol;
     *     LPOCNCONNPROCW lpfnConnect;
     *     LPOCNCHKPROC lpfnCheck;
     *     LPOCNDSCPROC lpfnDisconnect;
     *     SCARDHANDLE hCardHandle;
     * } *LPOPENCARDNAMEW
     * }
     */
    public static final AddressLayout LPOPENCARDNAMEW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef POPENCARDNAMEA POPENCARDNAME
     * }
     */
    public static final AddressLayout POPENCARDNAME = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPOPENCARDNAMEA LPOPENCARDNAME
     * }
     */
    public static final AddressLayout LPOPENCARDNAME = C_POINTER;

    private static class GetOpenCardNameA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("GetOpenCardNameA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG GetOpenCardNameA(LPOPENCARDNAMEA)
     * }
     */
    public static FunctionDescriptor GetOpenCardNameA$descriptor() {
        return GetOpenCardNameA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG GetOpenCardNameA(LPOPENCARDNAMEA)
     * }
     */
    public static MethodHandle GetOpenCardNameA$handle() {
        return GetOpenCardNameA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG GetOpenCardNameA(LPOPENCARDNAMEA)
     * }
     */
    public static int GetOpenCardNameA(MemorySegment x0) {
        var mh$ = GetOpenCardNameA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetOpenCardNameA", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetOpenCardNameW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("GetOpenCardNameW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG GetOpenCardNameW(LPOPENCARDNAMEW)
     * }
     */
    public static FunctionDescriptor GetOpenCardNameW$descriptor() {
        return GetOpenCardNameW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG GetOpenCardNameW(LPOPENCARDNAMEW)
     * }
     */
    public static MethodHandle GetOpenCardNameW$handle() {
        return GetOpenCardNameW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG GetOpenCardNameW(LPOPENCARDNAMEW)
     * }
     */
    public static int GetOpenCardNameW(MemorySegment x0) {
        var mh$ = GetOpenCardNameW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetOpenCardNameW", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardDlgExtendedError {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardDlgExtendedError"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardDlgExtendedError()
     * }
     */
    public static FunctionDescriptor SCardDlgExtendedError$descriptor() {
        return SCardDlgExtendedError.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardDlgExtendedError()
     * }
     */
    public static MethodHandle SCardDlgExtendedError$handle() {
        return SCardDlgExtendedError.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardDlgExtendedError()
     * }
     */
    public static int SCardDlgExtendedError() {
        var mh$ = SCardDlgExtendedError.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardDlgExtendedError");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardReadCacheA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardReadCacheA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardReadCacheA(SCARDCONTEXT hContext, UUID *CardIdentifier, DWORD FreshnessCounter, LPSTR LookupName, PBYTE Data, DWORD *DataLen)
     * }
     */
    public static FunctionDescriptor SCardReadCacheA$descriptor() {
        return SCardReadCacheA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardReadCacheA(SCARDCONTEXT hContext, UUID *CardIdentifier, DWORD FreshnessCounter, LPSTR LookupName, PBYTE Data, DWORD *DataLen)
     * }
     */
    public static MethodHandle SCardReadCacheA$handle() {
        return SCardReadCacheA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardReadCacheA(SCARDCONTEXT hContext, UUID *CardIdentifier, DWORD FreshnessCounter, LPSTR LookupName, PBYTE Data, DWORD *DataLen)
     * }
     */
    public static int SCardReadCacheA(long hContext, MemorySegment CardIdentifier, int FreshnessCounter, MemorySegment LookupName, MemorySegment Data, MemorySegment DataLen) {
        var mh$ = SCardReadCacheA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardReadCacheA", hContext, CardIdentifier, FreshnessCounter, LookupName, Data, DataLen);
            }
            return (int)mh$.invokeExact(hContext, CardIdentifier, FreshnessCounter, LookupName, Data, DataLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardReadCacheW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardReadCacheW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardReadCacheW(SCARDCONTEXT hContext, UUID *CardIdentifier, DWORD FreshnessCounter, LPWSTR LookupName, PBYTE Data, DWORD *DataLen)
     * }
     */
    public static FunctionDescriptor SCardReadCacheW$descriptor() {
        return SCardReadCacheW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardReadCacheW(SCARDCONTEXT hContext, UUID *CardIdentifier, DWORD FreshnessCounter, LPWSTR LookupName, PBYTE Data, DWORD *DataLen)
     * }
     */
    public static MethodHandle SCardReadCacheW$handle() {
        return SCardReadCacheW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardReadCacheW(SCARDCONTEXT hContext, UUID *CardIdentifier, DWORD FreshnessCounter, LPWSTR LookupName, PBYTE Data, DWORD *DataLen)
     * }
     */
    public static int SCardReadCacheW(long hContext, MemorySegment CardIdentifier, int FreshnessCounter, MemorySegment LookupName, MemorySegment Data, MemorySegment DataLen) {
        var mh$ = SCardReadCacheW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardReadCacheW", hContext, CardIdentifier, FreshnessCounter, LookupName, Data, DataLen);
            }
            return (int)mh$.invokeExact(hContext, CardIdentifier, FreshnessCounter, LookupName, Data, DataLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardWriteCacheA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardWriteCacheA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardWriteCacheA(SCARDCONTEXT hContext, UUID *CardIdentifier, DWORD FreshnessCounter, LPSTR LookupName, PBYTE Data, DWORD DataLen)
     * }
     */
    public static FunctionDescriptor SCardWriteCacheA$descriptor() {
        return SCardWriteCacheA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardWriteCacheA(SCARDCONTEXT hContext, UUID *CardIdentifier, DWORD FreshnessCounter, LPSTR LookupName, PBYTE Data, DWORD DataLen)
     * }
     */
    public static MethodHandle SCardWriteCacheA$handle() {
        return SCardWriteCacheA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardWriteCacheA(SCARDCONTEXT hContext, UUID *CardIdentifier, DWORD FreshnessCounter, LPSTR LookupName, PBYTE Data, DWORD DataLen)
     * }
     */
    public static int SCardWriteCacheA(long hContext, MemorySegment CardIdentifier, int FreshnessCounter, MemorySegment LookupName, MemorySegment Data, int DataLen) {
        var mh$ = SCardWriteCacheA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardWriteCacheA", hContext, CardIdentifier, FreshnessCounter, LookupName, Data, DataLen);
            }
            return (int)mh$.invokeExact(hContext, CardIdentifier, FreshnessCounter, LookupName, Data, DataLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardWriteCacheW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardWriteCacheW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardWriteCacheW(SCARDCONTEXT hContext, UUID *CardIdentifier, DWORD FreshnessCounter, LPWSTR LookupName, PBYTE Data, DWORD DataLen)
     * }
     */
    public static FunctionDescriptor SCardWriteCacheW$descriptor() {
        return SCardWriteCacheW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardWriteCacheW(SCARDCONTEXT hContext, UUID *CardIdentifier, DWORD FreshnessCounter, LPWSTR LookupName, PBYTE Data, DWORD DataLen)
     * }
     */
    public static MethodHandle SCardWriteCacheW$handle() {
        return SCardWriteCacheW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardWriteCacheW(SCARDCONTEXT hContext, UUID *CardIdentifier, DWORD FreshnessCounter, LPWSTR LookupName, PBYTE Data, DWORD DataLen)
     * }
     */
    public static int SCardWriteCacheW(long hContext, MemorySegment CardIdentifier, int FreshnessCounter, MemorySegment LookupName, MemorySegment Data, int DataLen) {
        var mh$ = SCardWriteCacheW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardWriteCacheW", hContext, CardIdentifier, FreshnessCounter, LookupName, Data, DataLen);
            }
            return (int)mh$.invokeExact(hContext, CardIdentifier, FreshnessCounter, LookupName, Data, DataLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardGetReaderIconA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardGetReaderIconA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardGetReaderIconA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPBYTE pbIcon, LPDWORD pcbIcon)
     * }
     */
    public static FunctionDescriptor SCardGetReaderIconA$descriptor() {
        return SCardGetReaderIconA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardGetReaderIconA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPBYTE pbIcon, LPDWORD pcbIcon)
     * }
     */
    public static MethodHandle SCardGetReaderIconA$handle() {
        return SCardGetReaderIconA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardGetReaderIconA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPBYTE pbIcon, LPDWORD pcbIcon)
     * }
     */
    public static int SCardGetReaderIconA(long hContext, MemorySegment szReaderName, MemorySegment pbIcon, MemorySegment pcbIcon) {
        var mh$ = SCardGetReaderIconA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardGetReaderIconA", hContext, szReaderName, pbIcon, pcbIcon);
            }
            return (int)mh$.invokeExact(hContext, szReaderName, pbIcon, pcbIcon);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardGetReaderIconW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardGetReaderIconW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardGetReaderIconW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPBYTE pbIcon, LPDWORD pcbIcon)
     * }
     */
    public static FunctionDescriptor SCardGetReaderIconW$descriptor() {
        return SCardGetReaderIconW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardGetReaderIconW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPBYTE pbIcon, LPDWORD pcbIcon)
     * }
     */
    public static MethodHandle SCardGetReaderIconW$handle() {
        return SCardGetReaderIconW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardGetReaderIconW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPBYTE pbIcon, LPDWORD pcbIcon)
     * }
     */
    public static int SCardGetReaderIconW(long hContext, MemorySegment szReaderName, MemorySegment pbIcon, MemorySegment pcbIcon) {
        var mh$ = SCardGetReaderIconW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardGetReaderIconW", hContext, szReaderName, pbIcon, pcbIcon);
            }
            return (int)mh$.invokeExact(hContext, szReaderName, pbIcon, pcbIcon);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardGetDeviceTypeIdA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardGetDeviceTypeIdA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardGetDeviceTypeIdA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPDWORD pdwDeviceTypeId)
     * }
     */
    public static FunctionDescriptor SCardGetDeviceTypeIdA$descriptor() {
        return SCardGetDeviceTypeIdA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardGetDeviceTypeIdA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPDWORD pdwDeviceTypeId)
     * }
     */
    public static MethodHandle SCardGetDeviceTypeIdA$handle() {
        return SCardGetDeviceTypeIdA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardGetDeviceTypeIdA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPDWORD pdwDeviceTypeId)
     * }
     */
    public static int SCardGetDeviceTypeIdA(long hContext, MemorySegment szReaderName, MemorySegment pdwDeviceTypeId) {
        var mh$ = SCardGetDeviceTypeIdA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardGetDeviceTypeIdA", hContext, szReaderName, pdwDeviceTypeId);
            }
            return (int)mh$.invokeExact(hContext, szReaderName, pdwDeviceTypeId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardGetDeviceTypeIdW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardGetDeviceTypeIdW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardGetDeviceTypeIdW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPDWORD pdwDeviceTypeId)
     * }
     */
    public static FunctionDescriptor SCardGetDeviceTypeIdW$descriptor() {
        return SCardGetDeviceTypeIdW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardGetDeviceTypeIdW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPDWORD pdwDeviceTypeId)
     * }
     */
    public static MethodHandle SCardGetDeviceTypeIdW$handle() {
        return SCardGetDeviceTypeIdW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardGetDeviceTypeIdW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPDWORD pdwDeviceTypeId)
     * }
     */
    public static int SCardGetDeviceTypeIdW(long hContext, MemorySegment szReaderName, MemorySegment pdwDeviceTypeId) {
        var mh$ = SCardGetDeviceTypeIdW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardGetDeviceTypeIdW", hContext, szReaderName, pdwDeviceTypeId);
            }
            return (int)mh$.invokeExact(hContext, szReaderName, pdwDeviceTypeId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardGetReaderDeviceInstanceIdA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardGetReaderDeviceInstanceIdA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardGetReaderDeviceInstanceIdA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPSTR szDeviceInstanceId, LPDWORD pcchDeviceInstanceId)
     * }
     */
    public static FunctionDescriptor SCardGetReaderDeviceInstanceIdA$descriptor() {
        return SCardGetReaderDeviceInstanceIdA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardGetReaderDeviceInstanceIdA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPSTR szDeviceInstanceId, LPDWORD pcchDeviceInstanceId)
     * }
     */
    public static MethodHandle SCardGetReaderDeviceInstanceIdA$handle() {
        return SCardGetReaderDeviceInstanceIdA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardGetReaderDeviceInstanceIdA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPSTR szDeviceInstanceId, LPDWORD pcchDeviceInstanceId)
     * }
     */
    public static int SCardGetReaderDeviceInstanceIdA(long hContext, MemorySegment szReaderName, MemorySegment szDeviceInstanceId, MemorySegment pcchDeviceInstanceId) {
        var mh$ = SCardGetReaderDeviceInstanceIdA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardGetReaderDeviceInstanceIdA", hContext, szReaderName, szDeviceInstanceId, pcchDeviceInstanceId);
            }
            return (int)mh$.invokeExact(hContext, szReaderName, szDeviceInstanceId, pcchDeviceInstanceId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardGetReaderDeviceInstanceIdW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardGetReaderDeviceInstanceIdW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardGetReaderDeviceInstanceIdW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPWSTR szDeviceInstanceId, LPDWORD pcchDeviceInstanceId)
     * }
     */
    public static FunctionDescriptor SCardGetReaderDeviceInstanceIdW$descriptor() {
        return SCardGetReaderDeviceInstanceIdW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardGetReaderDeviceInstanceIdW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPWSTR szDeviceInstanceId, LPDWORD pcchDeviceInstanceId)
     * }
     */
    public static MethodHandle SCardGetReaderDeviceInstanceIdW$handle() {
        return SCardGetReaderDeviceInstanceIdW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardGetReaderDeviceInstanceIdW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPWSTR szDeviceInstanceId, LPDWORD pcchDeviceInstanceId)
     * }
     */
    public static int SCardGetReaderDeviceInstanceIdW(long hContext, MemorySegment szReaderName, MemorySegment szDeviceInstanceId, MemorySegment pcchDeviceInstanceId) {
        var mh$ = SCardGetReaderDeviceInstanceIdW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardGetReaderDeviceInstanceIdW", hContext, szReaderName, szDeviceInstanceId, pcchDeviceInstanceId);
            }
            return (int)mh$.invokeExact(hContext, szReaderName, szDeviceInstanceId, pcchDeviceInstanceId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardListReadersWithDeviceInstanceIdA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardListReadersWithDeviceInstanceIdA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardListReadersWithDeviceInstanceIdA(SCARDCONTEXT hContext, LPCSTR szDeviceInstanceId, LPSTR mszReaders, LPDWORD pcchReaders)
     * }
     */
    public static FunctionDescriptor SCardListReadersWithDeviceInstanceIdA$descriptor() {
        return SCardListReadersWithDeviceInstanceIdA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardListReadersWithDeviceInstanceIdA(SCARDCONTEXT hContext, LPCSTR szDeviceInstanceId, LPSTR mszReaders, LPDWORD pcchReaders)
     * }
     */
    public static MethodHandle SCardListReadersWithDeviceInstanceIdA$handle() {
        return SCardListReadersWithDeviceInstanceIdA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardListReadersWithDeviceInstanceIdA(SCARDCONTEXT hContext, LPCSTR szDeviceInstanceId, LPSTR mszReaders, LPDWORD pcchReaders)
     * }
     */
    public static int SCardListReadersWithDeviceInstanceIdA(long hContext, MemorySegment szDeviceInstanceId, MemorySegment mszReaders, MemorySegment pcchReaders) {
        var mh$ = SCardListReadersWithDeviceInstanceIdA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardListReadersWithDeviceInstanceIdA", hContext, szDeviceInstanceId, mszReaders, pcchReaders);
            }
            return (int)mh$.invokeExact(hContext, szDeviceInstanceId, mszReaders, pcchReaders);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardListReadersWithDeviceInstanceIdW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardListReadersWithDeviceInstanceIdW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardListReadersWithDeviceInstanceIdW(SCARDCONTEXT hContext, LPCWSTR szDeviceInstanceId, LPWSTR mszReaders, LPDWORD pcchReaders)
     * }
     */
    public static FunctionDescriptor SCardListReadersWithDeviceInstanceIdW$descriptor() {
        return SCardListReadersWithDeviceInstanceIdW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardListReadersWithDeviceInstanceIdW(SCARDCONTEXT hContext, LPCWSTR szDeviceInstanceId, LPWSTR mszReaders, LPDWORD pcchReaders)
     * }
     */
    public static MethodHandle SCardListReadersWithDeviceInstanceIdW$handle() {
        return SCardListReadersWithDeviceInstanceIdW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardListReadersWithDeviceInstanceIdW(SCARDCONTEXT hContext, LPCWSTR szDeviceInstanceId, LPWSTR mszReaders, LPDWORD pcchReaders)
     * }
     */
    public static int SCardListReadersWithDeviceInstanceIdW(long hContext, MemorySegment szDeviceInstanceId, MemorySegment mszReaders, MemorySegment pcchReaders) {
        var mh$ = SCardListReadersWithDeviceInstanceIdW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardListReadersWithDeviceInstanceIdW", hContext, szDeviceInstanceId, mszReaders, pcchReaders);
            }
            return (int)mh$.invokeExact(hContext, szDeviceInstanceId, mszReaders, pcchReaders);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardAudit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SCardAudit"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardAudit(SCARDCONTEXT hContext, DWORD dwEvent)
     * }
     */
    public static FunctionDescriptor SCardAudit$descriptor() {
        return SCardAudit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardAudit(SCARDCONTEXT hContext, DWORD dwEvent)
     * }
     */
    public static MethodHandle SCardAudit$handle() {
        return SCardAudit.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern LONG SCardAudit(SCARDCONTEXT hContext, DWORD dwEvent)
     * }
     */
    public static int SCardAudit(long hContext, int dwEvent) {
        var mh$ = SCardAudit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardAudit", hContext, dwEvent);
            }
            return (int)mh$.invokeExact(hContext, dwEvent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _PSP *HPROPSHEETPAGE
     * }
     */
    public static final AddressLayout HPROPSHEETPAGE = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPCDLGTEMPLATE PROPSHEETPAGE_RESOURCE
     * }
     */
    public static final AddressLayout PROPSHEETPAGE_RESOURCE = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PROPSHEETPAGEA_V1 {
     *     DWORD dwSize;
     *     DWORD dwFlags;
     *     HINSTANCE hInstance;
     *     union {
     *         LPCSTR pszTemplate;
     *         PROPSHEETPAGE_RESOURCE pResource;
     *     };
     *     union {
     *         HICON hIcon;
     *         LPCSTR pszIcon;
     *     };
     *     LPCSTR pszTitle;
     *     DLGPROC pfnDlgProc;
     *     LPARAM lParam;
     *     LPFNPSPCALLBACKA pfnCallback;
     *     UINT *pcRefParent;
     * } *LPPROPSHEETPAGEA_V1
     * }
     */
    public static final AddressLayout LPPROPSHEETPAGEA_V1 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const PROPSHEETPAGEA_V1 *LPCPROPSHEETPAGEA_V1
     * }
     */
    public static final AddressLayout LPCPROPSHEETPAGEA_V1 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PROPSHEETPAGEA_V2 {
     *     DWORD dwSize;
     *     DWORD dwFlags;
     *     HINSTANCE hInstance;
     *     union {
     *         LPCSTR pszTemplate;
     *         PROPSHEETPAGE_RESOURCE pResource;
     *     };
     *     union {
     *         HICON hIcon;
     *         LPCSTR pszIcon;
     *     };
     *     LPCSTR pszTitle;
     *     DLGPROC pfnDlgProc;
     *     LPARAM lParam;
     *     LPFNPSPCALLBACKA pfnCallback;
     *     UINT *pcRefParent;
     *     LPCSTR pszHeaderTitle;
     *     LPCSTR pszHeaderSubTitle;
     * } *LPPROPSHEETPAGEA_V2
     * }
     */
    public static final AddressLayout LPPROPSHEETPAGEA_V2 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const PROPSHEETPAGEA_V2 *LPCPROPSHEETPAGEA_V2
     * }
     */
    public static final AddressLayout LPCPROPSHEETPAGEA_V2 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PROPSHEETPAGEA_V3 {
     *     DWORD dwSize;
     *     DWORD dwFlags;
     *     HINSTANCE hInstance;
     *     union {
     *         LPCSTR pszTemplate;
     *         PROPSHEETPAGE_RESOURCE pResource;
     *     };
     *     union {
     *         HICON hIcon;
     *         LPCSTR pszIcon;
     *     };
     *     LPCSTR pszTitle;
     *     DLGPROC pfnDlgProc;
     *     LPARAM lParam;
     *     LPFNPSPCALLBACKA pfnCallback;
     *     UINT *pcRefParent;
     *     LPCSTR pszHeaderTitle;
     *     LPCSTR pszHeaderSubTitle;
     *     HANDLE hActCtx;
     * } *LPPROPSHEETPAGEA_V3
     * }
     */
    public static final AddressLayout LPPROPSHEETPAGEA_V3 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const PROPSHEETPAGEA_V3 *LPCPROPSHEETPAGEA_V3
     * }
     */
    public static final AddressLayout LPCPROPSHEETPAGEA_V3 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PROPSHEETPAGEA {
     *     DWORD dwSize;
     *     DWORD dwFlags;
     *     HINSTANCE hInstance;
     *     union {
     *         LPCSTR pszTemplate;
     *         PROPSHEETPAGE_RESOURCE pResource;
     *     };
     *     union {
     *         HICON hIcon;
     *         LPCSTR pszIcon;
     *     };
     *     LPCSTR pszTitle;
     *     DLGPROC pfnDlgProc;
     *     LPARAM lParam;
     *     LPFNPSPCALLBACKA pfnCallback;
     *     UINT *pcRefParent;
     *     LPCSTR pszHeaderTitle;
     *     LPCSTR pszHeaderSubTitle;
     *     HANDLE hActCtx;
     *     union {
     *         HBITMAP hbmHeader;
     *         LPCSTR pszbmHeader;
     *     };
     * } *LPPROPSHEETPAGEA_V4
     * }
     */
    public static final AddressLayout LPPROPSHEETPAGEA_V4 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const PROPSHEETPAGEA_V4 *LPCPROPSHEETPAGEA_V4
     * }
     */
    public static final AddressLayout LPCPROPSHEETPAGEA_V4 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PROPSHEETPAGEW_V1 {
     *     DWORD dwSize;
     *     DWORD dwFlags;
     *     HINSTANCE hInstance;
     *     union {
     *         LPCWSTR pszTemplate;
     *         PROPSHEETPAGE_RESOURCE pResource;
     *     };
     *     union {
     *         HICON hIcon;
     *         LPCWSTR pszIcon;
     *     };
     *     LPCWSTR pszTitle;
     *     DLGPROC pfnDlgProc;
     *     LPARAM lParam;
     *     LPFNPSPCALLBACKW pfnCallback;
     *     UINT *pcRefParent;
     * } *LPPROPSHEETPAGEW_V1
     * }
     */
    public static final AddressLayout LPPROPSHEETPAGEW_V1 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const PROPSHEETPAGEW_V1 *LPCPROPSHEETPAGEW_V1
     * }
     */
    public static final AddressLayout LPCPROPSHEETPAGEW_V1 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PROPSHEETPAGEW_V2 {
     *     DWORD dwSize;
     *     DWORD dwFlags;
     *     HINSTANCE hInstance;
     *     union {
     *         LPCWSTR pszTemplate;
     *         PROPSHEETPAGE_RESOURCE pResource;
     *     };
     *     union {
     *         HICON hIcon;
     *         LPCWSTR pszIcon;
     *     };
     *     LPCWSTR pszTitle;
     *     DLGPROC pfnDlgProc;
     *     LPARAM lParam;
     *     LPFNPSPCALLBACKW pfnCallback;
     *     UINT *pcRefParent;
     *     LPCWSTR pszHeaderTitle;
     *     LPCWSTR pszHeaderSubTitle;
     * } *LPPROPSHEETPAGEW_V2
     * }
     */
    public static final AddressLayout LPPROPSHEETPAGEW_V2 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const PROPSHEETPAGEW_V2 *LPCPROPSHEETPAGEW_V2
     * }
     */
    public static final AddressLayout LPCPROPSHEETPAGEW_V2 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PROPSHEETPAGEW_V3 {
     *     DWORD dwSize;
     *     DWORD dwFlags;
     *     HINSTANCE hInstance;
     *     union {
     *         LPCWSTR pszTemplate;
     *         PROPSHEETPAGE_RESOURCE pResource;
     *     };
     *     union {
     *         HICON hIcon;
     *         LPCWSTR pszIcon;
     *     };
     *     LPCWSTR pszTitle;
     *     DLGPROC pfnDlgProc;
     *     LPARAM lParam;
     *     LPFNPSPCALLBACKW pfnCallback;
     *     UINT *pcRefParent;
     *     LPCWSTR pszHeaderTitle;
     *     LPCWSTR pszHeaderSubTitle;
     *     HANDLE hActCtx;
     * } *LPPROPSHEETPAGEW_V3
     * }
     */
    public static final AddressLayout LPPROPSHEETPAGEW_V3 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const PROPSHEETPAGEW_V3 *LPCPROPSHEETPAGEW_V3
     * }
     */
    public static final AddressLayout LPCPROPSHEETPAGEW_V3 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PROPSHEETPAGEW {
     *     DWORD dwSize;
     *     DWORD dwFlags;
     *     HINSTANCE hInstance;
     *     union {
     *         LPCWSTR pszTemplate;
     *         PROPSHEETPAGE_RESOURCE pResource;
     *     };
     *     union {
     *         HICON hIcon;
     *         LPCWSTR pszIcon;
     *     };
     *     LPCWSTR pszTitle;
     *     DLGPROC pfnDlgProc;
     *     LPARAM lParam;
     *     LPFNPSPCALLBACKW pfnCallback;
     *     UINT *pcRefParent;
     *     LPCWSTR pszHeaderTitle;
     *     LPCWSTR pszHeaderSubTitle;
     *     HANDLE hActCtx;
     *     union {
     *         HBITMAP hbmHeader;
     *         LPCWSTR pszbmHeader;
     *     };
     * } *LPPROPSHEETPAGEW_V4
     * }
     */
    public static final AddressLayout LPPROPSHEETPAGEW_V4 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const PROPSHEETPAGEW_V4 *LPCPROPSHEETPAGEW_V4
     * }
     */
    public static final AddressLayout LPCPROPSHEETPAGEW_V4 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPROPSHEETPAGEA_V4 LPPROPSHEETPAGEA_LATEST
     * }
     */
    public static final AddressLayout LPPROPSHEETPAGEA_LATEST = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPROPSHEETPAGEW_V4 LPPROPSHEETPAGEW_LATEST
     * }
     */
    public static final AddressLayout LPPROPSHEETPAGEW_LATEST = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPCPROPSHEETPAGEA_V4 LPCPROPSHEETPAGEA_LATEST
     * }
     */
    public static final AddressLayout LPCPROPSHEETPAGEA_LATEST = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPCPROPSHEETPAGEW_V4 LPCPROPSHEETPAGEW_LATEST
     * }
     */
    public static final AddressLayout LPCPROPSHEETPAGEW_LATEST = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPROPSHEETPAGEA_V4 LPPROPSHEETPAGEA
     * }
     */
    public static final AddressLayout LPPROPSHEETPAGEA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPROPSHEETPAGEW_V4 LPPROPSHEETPAGEW
     * }
     */
    public static final AddressLayout LPPROPSHEETPAGEW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPCPROPSHEETPAGEA_V4 LPCPROPSHEETPAGEA
     * }
     */
    public static final AddressLayout LPCPROPSHEETPAGEA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPCPROPSHEETPAGEW_V4 LPCPROPSHEETPAGEW
     * }
     */
    public static final AddressLayout LPCPROPSHEETPAGEW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PROPSHEETHEADERA_V1 {
     *     DWORD dwSize;
     *     DWORD dwFlags;
     *     HWND hwndParent;
     *     HINSTANCE hInstance;
     *     union {
     *         HICON hIcon;
     *         LPCSTR pszIcon;
     *     };
     *     LPCSTR pszCaption;
     *     UINT nPages;
     *     union {
     *         UINT nStartPage;
     *         LPCSTR pStartPage;
     *     };
     *     union {
     *         LPCPROPSHEETPAGEA ppsp;
     *         HPROPSHEETPAGE *phpage;
     *     };
     *     PFNPROPSHEETCALLBACK pfnCallback;
     * } *LPPROPSHEETHEADERA_V1
     * }
     */
    public static final AddressLayout LPPROPSHEETHEADERA_V1 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const PROPSHEETHEADERA_V1 *LPCPROPSHEETHEADERA_V1
     * }
     */
    public static final AddressLayout LPCPROPSHEETHEADERA_V1 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PROPSHEETHEADERA_V2 {
     *     DWORD dwSize;
     *     DWORD dwFlags;
     *     HWND hwndParent;
     *     HINSTANCE hInstance;
     *     union {
     *         HICON hIcon;
     *         LPCSTR pszIcon;
     *     };
     *     LPCSTR pszCaption;
     *     UINT nPages;
     *     union {
     *         UINT nStartPage;
     *         LPCSTR pStartPage;
     *     };
     *     union {
     *         LPCPROPSHEETPAGEA ppsp;
     *         HPROPSHEETPAGE *phpage;
     *     };
     *     PFNPROPSHEETCALLBACK pfnCallback;
     *     union {
     *         HBITMAP hbmWatermark;
     *         LPCSTR pszbmWatermark;
     *     };
     *     HPALETTE hplWatermark;
     *     union {
     *         HBITMAP hbmHeader;
     *         LPCSTR pszbmHeader;
     *     };
     * } *LPPROPSHEETHEADERA_V2
     * }
     */
    public static final AddressLayout LPPROPSHEETHEADERA_V2 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const PROPSHEETHEADERA_V2 *LPCPROPSHEETHEADERA_V2
     * }
     */
    public static final AddressLayout LPCPROPSHEETHEADERA_V2 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PROPSHEETHEADERW_V1 {
     *     DWORD dwSize;
     *     DWORD dwFlags;
     *     HWND hwndParent;
     *     HINSTANCE hInstance;
     *     union {
     *         HICON hIcon;
     *         LPCWSTR pszIcon;
     *     };
     *     LPCWSTR pszCaption;
     *     UINT nPages;
     *     union {
     *         UINT nStartPage;
     *         LPCWSTR pStartPage;
     *     };
     *     union {
     *         LPCPROPSHEETPAGEW ppsp;
     *         HPROPSHEETPAGE *phpage;
     *     };
     *     PFNPROPSHEETCALLBACK pfnCallback;
     * } *LPPROPSHEETHEADERW_V1
     * }
     */
    public static final AddressLayout LPPROPSHEETHEADERW_V1 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const PROPSHEETHEADERW_V1 *LPCPROPSHEETHEADERW_V1
     * }
     */
    public static final AddressLayout LPCPROPSHEETHEADERW_V1 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PROPSHEETHEADERW_V2 {
     *     DWORD dwSize;
     *     DWORD dwFlags;
     *     HWND hwndParent;
     *     HINSTANCE hInstance;
     *     union {
     *         HICON hIcon;
     *         LPCWSTR pszIcon;
     *     };
     *     LPCWSTR pszCaption;
     *     UINT nPages;
     *     union {
     *         UINT nStartPage;
     *         LPCWSTR pStartPage;
     *     };
     *     union {
     *         LPCPROPSHEETPAGEW ppsp;
     *         HPROPSHEETPAGE *phpage;
     *     };
     *     PFNPROPSHEETCALLBACK pfnCallback;
     *     union {
     *         HBITMAP hbmWatermark;
     *         LPCWSTR pszbmWatermark;
     *     };
     *     HPALETTE hplWatermark;
     *     union {
     *         HBITMAP hbmHeader;
     *         LPCWSTR pszbmHeader;
     *     };
     * } *LPPROPSHEETHEADERW_V2
     * }
     */
    public static final AddressLayout LPPROPSHEETHEADERW_V2 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const PROPSHEETHEADERW_V2 *LPCPROPSHEETHEADERW_V2
     * }
     */
    public static final AddressLayout LPCPROPSHEETHEADERW_V2 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPROPSHEETHEADERA_V2 LPPROPSHEETHEADERA
     * }
     */
    public static final AddressLayout LPPROPSHEETHEADERA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPROPSHEETHEADERW_V2 LPPROPSHEETHEADERW
     * }
     */
    public static final AddressLayout LPPROPSHEETHEADERW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPCPROPSHEETHEADERA_V2 LPCPROPSHEETHEADERA
     * }
     */
    public static final AddressLayout LPCPROPSHEETHEADERA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPCPROPSHEETHEADERW_V2 LPCPROPSHEETHEADERW
     * }
     */
    public static final AddressLayout LPCPROPSHEETHEADERW = C_POINTER;

    private static class CreatePropertySheetPageA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CreatePropertySheetPageA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HPROPSHEETPAGE CreatePropertySheetPageA(LPCPROPSHEETPAGEA constPropSheetPagePointer)
     * }
     */
    public static FunctionDescriptor CreatePropertySheetPageA$descriptor() {
        return CreatePropertySheetPageA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HPROPSHEETPAGE CreatePropertySheetPageA(LPCPROPSHEETPAGEA constPropSheetPagePointer)
     * }
     */
    public static MethodHandle CreatePropertySheetPageA$handle() {
        return CreatePropertySheetPageA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HPROPSHEETPAGE CreatePropertySheetPageA(LPCPROPSHEETPAGEA constPropSheetPagePointer)
     * }
     */
    public static MemorySegment CreatePropertySheetPageA(MemorySegment constPropSheetPagePointer) {
        var mh$ = CreatePropertySheetPageA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreatePropertySheetPageA", constPropSheetPagePointer);
            }
            return (MemorySegment)mh$.invokeExact(constPropSheetPagePointer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreatePropertySheetPageW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CreatePropertySheetPageW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HPROPSHEETPAGE CreatePropertySheetPageW(LPCPROPSHEETPAGEW constPropSheetPagePointer)
     * }
     */
    public static FunctionDescriptor CreatePropertySheetPageW$descriptor() {
        return CreatePropertySheetPageW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HPROPSHEETPAGE CreatePropertySheetPageW(LPCPROPSHEETPAGEW constPropSheetPagePointer)
     * }
     */
    public static MethodHandle CreatePropertySheetPageW$handle() {
        return CreatePropertySheetPageW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HPROPSHEETPAGE CreatePropertySheetPageW(LPCPROPSHEETPAGEW constPropSheetPagePointer)
     * }
     */
    public static MemorySegment CreatePropertySheetPageW(MemorySegment constPropSheetPagePointer) {
        var mh$ = CreatePropertySheetPageW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreatePropertySheetPageW", constPropSheetPagePointer);
            }
            return (MemorySegment)mh$.invokeExact(constPropSheetPagePointer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DestroyPropertySheetPage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("DestroyPropertySheetPage"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL DestroyPropertySheetPage(HPROPSHEETPAGE)
     * }
     */
    public static FunctionDescriptor DestroyPropertySheetPage$descriptor() {
        return DestroyPropertySheetPage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL DestroyPropertySheetPage(HPROPSHEETPAGE)
     * }
     */
    public static MethodHandle DestroyPropertySheetPage$handle() {
        return DestroyPropertySheetPage.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL DestroyPropertySheetPage(HPROPSHEETPAGE)
     * }
     */
    public static int DestroyPropertySheetPage(MemorySegment x0) {
        var mh$ = DestroyPropertySheetPage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DestroyPropertySheetPage", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PropertySheetA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("PropertySheetA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * INT_PTR PropertySheetA(LPCPROPSHEETHEADERA)
     * }
     */
    public static FunctionDescriptor PropertySheetA$descriptor() {
        return PropertySheetA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * INT_PTR PropertySheetA(LPCPROPSHEETHEADERA)
     * }
     */
    public static MethodHandle PropertySheetA$handle() {
        return PropertySheetA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * INT_PTR PropertySheetA(LPCPROPSHEETHEADERA)
     * }
     */
    public static long PropertySheetA(MemorySegment x0) {
        var mh$ = PropertySheetA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PropertySheetA", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PropertySheetW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("PropertySheetW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * INT_PTR PropertySheetW(LPCPROPSHEETHEADERW)
     * }
     */
    public static FunctionDescriptor PropertySheetW$descriptor() {
        return PropertySheetW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * INT_PTR PropertySheetW(LPCPROPSHEETHEADERW)
     * }
     */
    public static MethodHandle PropertySheetW$handle() {
        return PropertySheetW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * INT_PTR PropertySheetW(LPCPROPSHEETHEADERW)
     * }
     */
    public static long PropertySheetW(MemorySegment x0) {
        var mh$ = PropertySheetW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PropertySheetW", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _PSHNOTIFY {
     *     NMHDR hdr;
     *     LPARAM lParam;
     * } *LPPSHNOTIFY
     * }
     */
    public static final AddressLayout LPPSHNOTIFY = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_1A {
     *     DWORD Flags;
     *     LPSTR pDescription;
     *     LPSTR pName;
     *     LPSTR pComment;
     * } *PPRINTER_INFO_1A
     * }
     */
    public static final AddressLayout PPRINTER_INFO_1A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_1A {
     *     DWORD Flags;
     *     LPSTR pDescription;
     *     LPSTR pName;
     *     LPSTR pComment;
     * } *LPPRINTER_INFO_1A
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_1A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_1W {
     *     DWORD Flags;
     *     LPWSTR pDescription;
     *     LPWSTR pName;
     *     LPWSTR pComment;
     * } *PPRINTER_INFO_1W
     * }
     */
    public static final AddressLayout PPRINTER_INFO_1W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_1W {
     *     DWORD Flags;
     *     LPWSTR pDescription;
     *     LPWSTR pName;
     *     LPWSTR pComment;
     * } *LPPRINTER_INFO_1W
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_1W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PPRINTER_INFO_1A PPRINTER_INFO_1
     * }
     */
    public static final AddressLayout PPRINTER_INFO_1 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPRINTER_INFO_1A LPPRINTER_INFO_1
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_1 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_2A {
     *     LPSTR pServerName;
     *     LPSTR pPrinterName;
     *     LPSTR pShareName;
     *     LPSTR pPortName;
     *     LPSTR pDriverName;
     *     LPSTR pComment;
     *     LPSTR pLocation;
     *     LPDEVMODEA pDevMode;
     *     LPSTR pSepFile;
     *     LPSTR pPrintProcessor;
     *     LPSTR pDatatype;
     *     LPSTR pParameters;
     *     PSECURITY_DESCRIPTOR pSecurityDescriptor;
     *     DWORD Attributes;
     *     DWORD Priority;
     *     DWORD DefaultPriority;
     *     DWORD StartTime;
     *     DWORD UntilTime;
     *     DWORD Status;
     *     DWORD cJobs;
     *     DWORD AveragePPM;
     * } *PPRINTER_INFO_2A
     * }
     */
    public static final AddressLayout PPRINTER_INFO_2A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_2A {
     *     LPSTR pServerName;
     *     LPSTR pPrinterName;
     *     LPSTR pShareName;
     *     LPSTR pPortName;
     *     LPSTR pDriverName;
     *     LPSTR pComment;
     *     LPSTR pLocation;
     *     LPDEVMODEA pDevMode;
     *     LPSTR pSepFile;
     *     LPSTR pPrintProcessor;
     *     LPSTR pDatatype;
     *     LPSTR pParameters;
     *     PSECURITY_DESCRIPTOR pSecurityDescriptor;
     *     DWORD Attributes;
     *     DWORD Priority;
     *     DWORD DefaultPriority;
     *     DWORD StartTime;
     *     DWORD UntilTime;
     *     DWORD Status;
     *     DWORD cJobs;
     *     DWORD AveragePPM;
     * } *LPPRINTER_INFO_2A
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_2A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_2W {
     *     LPWSTR pServerName;
     *     LPWSTR pPrinterName;
     *     LPWSTR pShareName;
     *     LPWSTR pPortName;
     *     LPWSTR pDriverName;
     *     LPWSTR pComment;
     *     LPWSTR pLocation;
     *     LPDEVMODEW pDevMode;
     *     LPWSTR pSepFile;
     *     LPWSTR pPrintProcessor;
     *     LPWSTR pDatatype;
     *     LPWSTR pParameters;
     *     PSECURITY_DESCRIPTOR pSecurityDescriptor;
     *     DWORD Attributes;
     *     DWORD Priority;
     *     DWORD DefaultPriority;
     *     DWORD StartTime;
     *     DWORD UntilTime;
     *     DWORD Status;
     *     DWORD cJobs;
     *     DWORD AveragePPM;
     * } *PPRINTER_INFO_2W
     * }
     */
    public static final AddressLayout PPRINTER_INFO_2W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_2W {
     *     LPWSTR pServerName;
     *     LPWSTR pPrinterName;
     *     LPWSTR pShareName;
     *     LPWSTR pPortName;
     *     LPWSTR pDriverName;
     *     LPWSTR pComment;
     *     LPWSTR pLocation;
     *     LPDEVMODEW pDevMode;
     *     LPWSTR pSepFile;
     *     LPWSTR pPrintProcessor;
     *     LPWSTR pDatatype;
     *     LPWSTR pParameters;
     *     PSECURITY_DESCRIPTOR pSecurityDescriptor;
     *     DWORD Attributes;
     *     DWORD Priority;
     *     DWORD DefaultPriority;
     *     DWORD StartTime;
     *     DWORD UntilTime;
     *     DWORD Status;
     *     DWORD cJobs;
     *     DWORD AveragePPM;
     * } *LPPRINTER_INFO_2W
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_2W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PPRINTER_INFO_2A PPRINTER_INFO_2
     * }
     */
    public static final AddressLayout PPRINTER_INFO_2 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPRINTER_INFO_2A LPPRINTER_INFO_2
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_2 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_3 {
     *     PSECURITY_DESCRIPTOR pSecurityDescriptor;
     * } *PPRINTER_INFO_3
     * }
     */
    public static final AddressLayout PPRINTER_INFO_3 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_3 {
     *     PSECURITY_DESCRIPTOR pSecurityDescriptor;
     * } *LPPRINTER_INFO_3
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_3 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_4A {
     *     LPSTR pPrinterName;
     *     LPSTR pServerName;
     *     DWORD Attributes;
     * } *PPRINTER_INFO_4A
     * }
     */
    public static final AddressLayout PPRINTER_INFO_4A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_4A {
     *     LPSTR pPrinterName;
     *     LPSTR pServerName;
     *     DWORD Attributes;
     * } *LPPRINTER_INFO_4A
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_4A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_4W {
     *     LPWSTR pPrinterName;
     *     LPWSTR pServerName;
     *     DWORD Attributes;
     * } *PPRINTER_INFO_4W
     * }
     */
    public static final AddressLayout PPRINTER_INFO_4W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_4W {
     *     LPWSTR pPrinterName;
     *     LPWSTR pServerName;
     *     DWORD Attributes;
     * } *LPPRINTER_INFO_4W
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_4W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PPRINTER_INFO_4A PPRINTER_INFO_4
     * }
     */
    public static final AddressLayout PPRINTER_INFO_4 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPRINTER_INFO_4A LPPRINTER_INFO_4
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_4 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_5A {
     *     LPSTR pPrinterName;
     *     LPSTR pPortName;
     *     DWORD Attributes;
     *     DWORD DeviceNotSelectedTimeout;
     *     DWORD TransmissionRetryTimeout;
     * } *PPRINTER_INFO_5A
     * }
     */
    public static final AddressLayout PPRINTER_INFO_5A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_5A {
     *     LPSTR pPrinterName;
     *     LPSTR pPortName;
     *     DWORD Attributes;
     *     DWORD DeviceNotSelectedTimeout;
     *     DWORD TransmissionRetryTimeout;
     * } *LPPRINTER_INFO_5A
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_5A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_5W {
     *     LPWSTR pPrinterName;
     *     LPWSTR pPortName;
     *     DWORD Attributes;
     *     DWORD DeviceNotSelectedTimeout;
     *     DWORD TransmissionRetryTimeout;
     * } *PPRINTER_INFO_5W
     * }
     */
    public static final AddressLayout PPRINTER_INFO_5W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_5W {
     *     LPWSTR pPrinterName;
     *     LPWSTR pPortName;
     *     DWORD Attributes;
     *     DWORD DeviceNotSelectedTimeout;
     *     DWORD TransmissionRetryTimeout;
     * } *LPPRINTER_INFO_5W
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_5W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PPRINTER_INFO_5A PPRINTER_INFO_5
     * }
     */
    public static final AddressLayout PPRINTER_INFO_5 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPRINTER_INFO_5A LPPRINTER_INFO_5
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_5 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_6 {
     *     DWORD dwStatus;
     * } *PPRINTER_INFO_6
     * }
     */
    public static final AddressLayout PPRINTER_INFO_6 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_6 {
     *     DWORD dwStatus;
     * } *LPPRINTER_INFO_6
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_6 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_7A {
     *     LPSTR pszObjectGUID;
     *     DWORD dwAction;
     * } *PPRINTER_INFO_7A
     * }
     */
    public static final AddressLayout PPRINTER_INFO_7A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_7A {
     *     LPSTR pszObjectGUID;
     *     DWORD dwAction;
     * } *LPPRINTER_INFO_7A
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_7A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_7W {
     *     LPWSTR pszObjectGUID;
     *     DWORD dwAction;
     * } *PPRINTER_INFO_7W
     * }
     */
    public static final AddressLayout PPRINTER_INFO_7W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_7W {
     *     LPWSTR pszObjectGUID;
     *     DWORD dwAction;
     * } *LPPRINTER_INFO_7W
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_7W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PPRINTER_INFO_7A PPRINTER_INFO_7
     * }
     */
    public static final AddressLayout PPRINTER_INFO_7 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPRINTER_INFO_7A LPPRINTER_INFO_7
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_7 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_8A {
     *     LPDEVMODEA pDevMode;
     * } *PPRINTER_INFO_8A
     * }
     */
    public static final AddressLayout PPRINTER_INFO_8A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_8A {
     *     LPDEVMODEA pDevMode;
     * } *LPPRINTER_INFO_8A
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_8A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_8W {
     *     LPDEVMODEW pDevMode;
     * } *PPRINTER_INFO_8W
     * }
     */
    public static final AddressLayout PPRINTER_INFO_8W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_8W {
     *     LPDEVMODEW pDevMode;
     * } *LPPRINTER_INFO_8W
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_8W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PPRINTER_INFO_8A PPRINTER_INFO_8
     * }
     */
    public static final AddressLayout PPRINTER_INFO_8 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPRINTER_INFO_8A LPPRINTER_INFO_8
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_8 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_9A {
     *     LPDEVMODEA pDevMode;
     * } *PPRINTER_INFO_9A
     * }
     */
    public static final AddressLayout PPRINTER_INFO_9A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_9A {
     *     LPDEVMODEA pDevMode;
     * } *LPPRINTER_INFO_9A
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_9A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_9W {
     *     LPDEVMODEW pDevMode;
     * } *PPRINTER_INFO_9W
     * }
     */
    public static final AddressLayout PPRINTER_INFO_9W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_9W {
     *     LPDEVMODEW pDevMode;
     * } *LPPRINTER_INFO_9W
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_9W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PPRINTER_INFO_9A PPRINTER_INFO_9
     * }
     */
    public static final AddressLayout PPRINTER_INFO_9 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPRINTER_INFO_9A LPPRINTER_INFO_9
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_9 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _JOB_INFO_1A {
     *     DWORD JobId;
     *     LPSTR pPrinterName;
     *     LPSTR pMachineName;
     *     LPSTR pUserName;
     *     LPSTR pDocument;
     *     LPSTR pDatatype;
     *     LPSTR pStatus;
     *     DWORD Status;
     *     DWORD Priority;
     *     DWORD Position;
     *     DWORD TotalPages;
     *     DWORD PagesPrinted;
     *     SYSTEMTIME Submitted;
     * } *PJOB_INFO_1A
     * }
     */
    public static final AddressLayout PJOB_INFO_1A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _JOB_INFO_1A {
     *     DWORD JobId;
     *     LPSTR pPrinterName;
     *     LPSTR pMachineName;
     *     LPSTR pUserName;
     *     LPSTR pDocument;
     *     LPSTR pDatatype;
     *     LPSTR pStatus;
     *     DWORD Status;
     *     DWORD Priority;
     *     DWORD Position;
     *     DWORD TotalPages;
     *     DWORD PagesPrinted;
     *     SYSTEMTIME Submitted;
     * } *LPJOB_INFO_1A
     * }
     */
    public static final AddressLayout LPJOB_INFO_1A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _JOB_INFO_1W {
     *     DWORD JobId;
     *     LPWSTR pPrinterName;
     *     LPWSTR pMachineName;
     *     LPWSTR pUserName;
     *     LPWSTR pDocument;
     *     LPWSTR pDatatype;
     *     LPWSTR pStatus;
     *     DWORD Status;
     *     DWORD Priority;
     *     DWORD Position;
     *     DWORD TotalPages;
     *     DWORD PagesPrinted;
     *     SYSTEMTIME Submitted;
     * } *PJOB_INFO_1W
     * }
     */
    public static final AddressLayout PJOB_INFO_1W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _JOB_INFO_1W {
     *     DWORD JobId;
     *     LPWSTR pPrinterName;
     *     LPWSTR pMachineName;
     *     LPWSTR pUserName;
     *     LPWSTR pDocument;
     *     LPWSTR pDatatype;
     *     LPWSTR pStatus;
     *     DWORD Status;
     *     DWORD Priority;
     *     DWORD Position;
     *     DWORD TotalPages;
     *     DWORD PagesPrinted;
     *     SYSTEMTIME Submitted;
     * } *LPJOB_INFO_1W
     * }
     */
    public static final AddressLayout LPJOB_INFO_1W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PJOB_INFO_1A PJOB_INFO_1
     * }
     */
    public static final AddressLayout PJOB_INFO_1 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPJOB_INFO_1A LPJOB_INFO_1
     * }
     */
    public static final AddressLayout LPJOB_INFO_1 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _JOB_INFO_2A {
     *     DWORD JobId;
     *     LPSTR pPrinterName;
     *     LPSTR pMachineName;
     *     LPSTR pUserName;
     *     LPSTR pDocument;
     *     LPSTR pNotifyName;
     *     LPSTR pDatatype;
     *     LPSTR pPrintProcessor;
     *     LPSTR pParameters;
     *     LPSTR pDriverName;
     *     LPDEVMODEA pDevMode;
     *     LPSTR pStatus;
     *     PSECURITY_DESCRIPTOR pSecurityDescriptor;
     *     DWORD Status;
     *     DWORD Priority;
     *     DWORD Position;
     *     DWORD StartTime;
     *     DWORD UntilTime;
     *     DWORD TotalPages;
     *     DWORD Size;
     *     SYSTEMTIME Submitted;
     *     DWORD Time;
     *     DWORD PagesPrinted;
     * } *PJOB_INFO_2A
     * }
     */
    public static final AddressLayout PJOB_INFO_2A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _JOB_INFO_2A {
     *     DWORD JobId;
     *     LPSTR pPrinterName;
     *     LPSTR pMachineName;
     *     LPSTR pUserName;
     *     LPSTR pDocument;
     *     LPSTR pNotifyName;
     *     LPSTR pDatatype;
     *     LPSTR pPrintProcessor;
     *     LPSTR pParameters;
     *     LPSTR pDriverName;
     *     LPDEVMODEA pDevMode;
     *     LPSTR pStatus;
     *     PSECURITY_DESCRIPTOR pSecurityDescriptor;
     *     DWORD Status;
     *     DWORD Priority;
     *     DWORD Position;
     *     DWORD StartTime;
     *     DWORD UntilTime;
     *     DWORD TotalPages;
     *     DWORD Size;
     *     SYSTEMTIME Submitted;
     *     DWORD Time;
     *     DWORD PagesPrinted;
     * } *LPJOB_INFO_2A
     * }
     */
    public static final AddressLayout LPJOB_INFO_2A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _JOB_INFO_2W {
     *     DWORD JobId;
     *     LPWSTR pPrinterName;
     *     LPWSTR pMachineName;
     *     LPWSTR pUserName;
     *     LPWSTR pDocument;
     *     LPWSTR pNotifyName;
     *     LPWSTR pDatatype;
     *     LPWSTR pPrintProcessor;
     *     LPWSTR pParameters;
     *     LPWSTR pDriverName;
     *     LPDEVMODEW pDevMode;
     *     LPWSTR pStatus;
     *     PSECURITY_DESCRIPTOR pSecurityDescriptor;
     *     DWORD Status;
     *     DWORD Priority;
     *     DWORD Position;
     *     DWORD StartTime;
     *     DWORD UntilTime;
     *     DWORD TotalPages;
     *     DWORD Size;
     *     SYSTEMTIME Submitted;
     *     DWORD Time;
     *     DWORD PagesPrinted;
     * } *PJOB_INFO_2W
     * }
     */
    public static final AddressLayout PJOB_INFO_2W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _JOB_INFO_2W {
     *     DWORD JobId;
     *     LPWSTR pPrinterName;
     *     LPWSTR pMachineName;
     *     LPWSTR pUserName;
     *     LPWSTR pDocument;
     *     LPWSTR pNotifyName;
     *     LPWSTR pDatatype;
     *     LPWSTR pPrintProcessor;
     *     LPWSTR pParameters;
     *     LPWSTR pDriverName;
     *     LPDEVMODEW pDevMode;
     *     LPWSTR pStatus;
     *     PSECURITY_DESCRIPTOR pSecurityDescriptor;
     *     DWORD Status;
     *     DWORD Priority;
     *     DWORD Position;
     *     DWORD StartTime;
     *     DWORD UntilTime;
     *     DWORD TotalPages;
     *     DWORD Size;
     *     SYSTEMTIME Submitted;
     *     DWORD Time;
     *     DWORD PagesPrinted;
     * } *LPJOB_INFO_2W
     * }
     */
    public static final AddressLayout LPJOB_INFO_2W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PJOB_INFO_2A PJOB_INFO_2
     * }
     */
    public static final AddressLayout PJOB_INFO_2 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPJOB_INFO_2A LPJOB_INFO_2
     * }
     */
    public static final AddressLayout LPJOB_INFO_2 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _JOB_INFO_3 {
     *     DWORD JobId;
     *     DWORD NextJobId;
     *     DWORD Reserved;
     * } *PJOB_INFO_3
     * }
     */
    public static final AddressLayout PJOB_INFO_3 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _JOB_INFO_3 {
     *     DWORD JobId;
     *     DWORD NextJobId;
     *     DWORD Reserved;
     * } *LPJOB_INFO_3
     * }
     */
    public static final AddressLayout LPJOB_INFO_3 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _JOB_INFO_4A {
     *     DWORD JobId;
     *     LPSTR pPrinterName;
     *     LPSTR pMachineName;
     *     LPSTR pUserName;
     *     LPSTR pDocument;
     *     LPSTR pNotifyName;
     *     LPSTR pDatatype;
     *     LPSTR pPrintProcessor;
     *     LPSTR pParameters;
     *     LPSTR pDriverName;
     *     LPDEVMODEA pDevMode;
     *     LPSTR pStatus;
     *     PSECURITY_DESCRIPTOR pSecurityDescriptor;
     *     DWORD Status;
     *     DWORD Priority;
     *     DWORD Position;
     *     DWORD StartTime;
     *     DWORD UntilTime;
     *     DWORD TotalPages;
     *     DWORD Size;
     *     SYSTEMTIME Submitted;
     *     DWORD Time;
     *     DWORD PagesPrinted;
     *     LONG SizeHigh;
     * } *PJOB_INFO_4A
     * }
     */
    public static final AddressLayout PJOB_INFO_4A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _JOB_INFO_4A {
     *     DWORD JobId;
     *     LPSTR pPrinterName;
     *     LPSTR pMachineName;
     *     LPSTR pUserName;
     *     LPSTR pDocument;
     *     LPSTR pNotifyName;
     *     LPSTR pDatatype;
     *     LPSTR pPrintProcessor;
     *     LPSTR pParameters;
     *     LPSTR pDriverName;
     *     LPDEVMODEA pDevMode;
     *     LPSTR pStatus;
     *     PSECURITY_DESCRIPTOR pSecurityDescriptor;
     *     DWORD Status;
     *     DWORD Priority;
     *     DWORD Position;
     *     DWORD StartTime;
     *     DWORD UntilTime;
     *     DWORD TotalPages;
     *     DWORD Size;
     *     SYSTEMTIME Submitted;
     *     DWORD Time;
     *     DWORD PagesPrinted;
     *     LONG SizeHigh;
     * } *LPJOB_INFO_4A
     * }
     */
    public static final AddressLayout LPJOB_INFO_4A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _JOB_INFO_4W {
     *     DWORD JobId;
     *     LPWSTR pPrinterName;
     *     LPWSTR pMachineName;
     *     LPWSTR pUserName;
     *     LPWSTR pDocument;
     *     LPWSTR pNotifyName;
     *     LPWSTR pDatatype;
     *     LPWSTR pPrintProcessor;
     *     LPWSTR pParameters;
     *     LPWSTR pDriverName;
     *     LPDEVMODEW pDevMode;
     *     LPWSTR pStatus;
     *     PSECURITY_DESCRIPTOR pSecurityDescriptor;
     *     DWORD Status;
     *     DWORD Priority;
     *     DWORD Position;
     *     DWORD StartTime;
     *     DWORD UntilTime;
     *     DWORD TotalPages;
     *     DWORD Size;
     *     SYSTEMTIME Submitted;
     *     DWORD Time;
     *     DWORD PagesPrinted;
     *     LONG SizeHigh;
     * } *PJOB_INFO_4W
     * }
     */
    public static final AddressLayout PJOB_INFO_4W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _JOB_INFO_4W {
     *     DWORD JobId;
     *     LPWSTR pPrinterName;
     *     LPWSTR pMachineName;
     *     LPWSTR pUserName;
     *     LPWSTR pDocument;
     *     LPWSTR pNotifyName;
     *     LPWSTR pDatatype;
     *     LPWSTR pPrintProcessor;
     *     LPWSTR pParameters;
     *     LPWSTR pDriverName;
     *     LPDEVMODEW pDevMode;
     *     LPWSTR pStatus;
     *     PSECURITY_DESCRIPTOR pSecurityDescriptor;
     *     DWORD Status;
     *     DWORD Priority;
     *     DWORD Position;
     *     DWORD StartTime;
     *     DWORD UntilTime;
     *     DWORD TotalPages;
     *     DWORD Size;
     *     SYSTEMTIME Submitted;
     *     DWORD Time;
     *     DWORD PagesPrinted;
     *     LONG SizeHigh;
     * } *LPJOB_INFO_4W
     * }
     */
    public static final AddressLayout LPJOB_INFO_4W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PJOB_INFO_4A PJOB_INFO_4
     * }
     */
    public static final AddressLayout PJOB_INFO_4 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPJOB_INFO_4A LPJOB_INFO_4
     * }
     */
    public static final AddressLayout LPJOB_INFO_4 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _ADDJOB_INFO_1A {
     *     LPSTR Path;
     *     DWORD JobId;
     * } *PADDJOB_INFO_1A
     * }
     */
    public static final AddressLayout PADDJOB_INFO_1A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _ADDJOB_INFO_1A {
     *     LPSTR Path;
     *     DWORD JobId;
     * } *LPADDJOB_INFO_1A
     * }
     */
    public static final AddressLayout LPADDJOB_INFO_1A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _ADDJOB_INFO_1W {
     *     LPWSTR Path;
     *     DWORD JobId;
     * } *PADDJOB_INFO_1W
     * }
     */
    public static final AddressLayout PADDJOB_INFO_1W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _ADDJOB_INFO_1W {
     *     LPWSTR Path;
     *     DWORD JobId;
     * } *LPADDJOB_INFO_1W
     * }
     */
    public static final AddressLayout LPADDJOB_INFO_1W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PADDJOB_INFO_1A PADDJOB_INFO_1
     * }
     */
    public static final AddressLayout PADDJOB_INFO_1 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPADDJOB_INFO_1A LPADDJOB_INFO_1
     * }
     */
    public static final AddressLayout LPADDJOB_INFO_1 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_1A {
     *     LPSTR pName;
     * } *PDRIVER_INFO_1A
     * }
     */
    public static final AddressLayout PDRIVER_INFO_1A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_1A {
     *     LPSTR pName;
     * } *LPDRIVER_INFO_1A
     * }
     */
    public static final AddressLayout LPDRIVER_INFO_1A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_1W {
     *     LPWSTR pName;
     * } *PDRIVER_INFO_1W
     * }
     */
    public static final AddressLayout PDRIVER_INFO_1W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_1W {
     *     LPWSTR pName;
     * } *LPDRIVER_INFO_1W
     * }
     */
    public static final AddressLayout LPDRIVER_INFO_1W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PDRIVER_INFO_1A PDRIVER_INFO_1
     * }
     */
    public static final AddressLayout PDRIVER_INFO_1 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPDRIVER_INFO_1A LPDRIVER_INFO_1
     * }
     */
    public static final AddressLayout LPDRIVER_INFO_1 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_2A {
     *     DWORD cVersion;
     *     LPSTR pName;
     *     LPSTR pEnvironment;
     *     LPSTR pDriverPath;
     *     LPSTR pDataFile;
     *     LPSTR pConfigFile;
     * } *PDRIVER_INFO_2A
     * }
     */
    public static final AddressLayout PDRIVER_INFO_2A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_2A {
     *     DWORD cVersion;
     *     LPSTR pName;
     *     LPSTR pEnvironment;
     *     LPSTR pDriverPath;
     *     LPSTR pDataFile;
     *     LPSTR pConfigFile;
     * } *LPDRIVER_INFO_2A
     * }
     */
    public static final AddressLayout LPDRIVER_INFO_2A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_2W {
     *     DWORD cVersion;
     *     LPWSTR pName;
     *     LPWSTR pEnvironment;
     *     LPWSTR pDriverPath;
     *     LPWSTR pDataFile;
     *     LPWSTR pConfigFile;
     * } *PDRIVER_INFO_2W
     * }
     */
    public static final AddressLayout PDRIVER_INFO_2W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_2W {
     *     DWORD cVersion;
     *     LPWSTR pName;
     *     LPWSTR pEnvironment;
     *     LPWSTR pDriverPath;
     *     LPWSTR pDataFile;
     *     LPWSTR pConfigFile;
     * } *LPDRIVER_INFO_2W
     * }
     */
    public static final AddressLayout LPDRIVER_INFO_2W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PDRIVER_INFO_2A PDRIVER_INFO_2
     * }
     */
    public static final AddressLayout PDRIVER_INFO_2 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPDRIVER_INFO_2A LPDRIVER_INFO_2
     * }
     */
    public static final AddressLayout LPDRIVER_INFO_2 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_3A {
     *     DWORD cVersion;
     *     LPSTR pName;
     *     LPSTR pEnvironment;
     *     LPSTR pDriverPath;
     *     LPSTR pDataFile;
     *     LPSTR pConfigFile;
     *     LPSTR pHelpFile;
     *     LPSTR pDependentFiles;
     *     LPSTR pMonitorName;
     *     LPSTR pDefaultDataType;
     * } *PDRIVER_INFO_3A
     * }
     */
    public static final AddressLayout PDRIVER_INFO_3A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_3A {
     *     DWORD cVersion;
     *     LPSTR pName;
     *     LPSTR pEnvironment;
     *     LPSTR pDriverPath;
     *     LPSTR pDataFile;
     *     LPSTR pConfigFile;
     *     LPSTR pHelpFile;
     *     LPSTR pDependentFiles;
     *     LPSTR pMonitorName;
     *     LPSTR pDefaultDataType;
     * } *LPDRIVER_INFO_3A
     * }
     */
    public static final AddressLayout LPDRIVER_INFO_3A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_3W {
     *     DWORD cVersion;
     *     LPWSTR pName;
     *     LPWSTR pEnvironment;
     *     LPWSTR pDriverPath;
     *     LPWSTR pDataFile;
     *     LPWSTR pConfigFile;
     *     LPWSTR pHelpFile;
     *     LPWSTR pDependentFiles;
     *     LPWSTR pMonitorName;
     *     LPWSTR pDefaultDataType;
     * } *PDRIVER_INFO_3W
     * }
     */
    public static final AddressLayout PDRIVER_INFO_3W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_3W {
     *     DWORD cVersion;
     *     LPWSTR pName;
     *     LPWSTR pEnvironment;
     *     LPWSTR pDriverPath;
     *     LPWSTR pDataFile;
     *     LPWSTR pConfigFile;
     *     LPWSTR pHelpFile;
     *     LPWSTR pDependentFiles;
     *     LPWSTR pMonitorName;
     *     LPWSTR pDefaultDataType;
     * } *LPDRIVER_INFO_3W
     * }
     */
    public static final AddressLayout LPDRIVER_INFO_3W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PDRIVER_INFO_3A PDRIVER_INFO_3
     * }
     */
    public static final AddressLayout PDRIVER_INFO_3 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPDRIVER_INFO_3A LPDRIVER_INFO_3
     * }
     */
    public static final AddressLayout LPDRIVER_INFO_3 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_4A {
     *     DWORD cVersion;
     *     LPSTR pName;
     *     LPSTR pEnvironment;
     *     LPSTR pDriverPath;
     *     LPSTR pDataFile;
     *     LPSTR pConfigFile;
     *     LPSTR pHelpFile;
     *     LPSTR pDependentFiles;
     *     LPSTR pMonitorName;
     *     LPSTR pDefaultDataType;
     *     LPSTR pszzPreviousNames;
     * } *PDRIVER_INFO_4A
     * }
     */
    public static final AddressLayout PDRIVER_INFO_4A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_4A {
     *     DWORD cVersion;
     *     LPSTR pName;
     *     LPSTR pEnvironment;
     *     LPSTR pDriverPath;
     *     LPSTR pDataFile;
     *     LPSTR pConfigFile;
     *     LPSTR pHelpFile;
     *     LPSTR pDependentFiles;
     *     LPSTR pMonitorName;
     *     LPSTR pDefaultDataType;
     *     LPSTR pszzPreviousNames;
     * } *LPDRIVER_INFO_4A
     * }
     */
    public static final AddressLayout LPDRIVER_INFO_4A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_4W {
     *     DWORD cVersion;
     *     LPWSTR pName;
     *     LPWSTR pEnvironment;
     *     LPWSTR pDriverPath;
     *     LPWSTR pDataFile;
     *     LPWSTR pConfigFile;
     *     LPWSTR pHelpFile;
     *     LPWSTR pDependentFiles;
     *     LPWSTR pMonitorName;
     *     LPWSTR pDefaultDataType;
     *     LPWSTR pszzPreviousNames;
     * } *PDRIVER_INFO_4W
     * }
     */
    public static final AddressLayout PDRIVER_INFO_4W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_4W {
     *     DWORD cVersion;
     *     LPWSTR pName;
     *     LPWSTR pEnvironment;
     *     LPWSTR pDriverPath;
     *     LPWSTR pDataFile;
     *     LPWSTR pConfigFile;
     *     LPWSTR pHelpFile;
     *     LPWSTR pDependentFiles;
     *     LPWSTR pMonitorName;
     *     LPWSTR pDefaultDataType;
     *     LPWSTR pszzPreviousNames;
     * } *LPDRIVER_INFO_4W
     * }
     */
    public static final AddressLayout LPDRIVER_INFO_4W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PDRIVER_INFO_4A PDRIVER_INFO_4
     * }
     */
    public static final AddressLayout PDRIVER_INFO_4 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPDRIVER_INFO_4A LPDRIVER_INFO_4
     * }
     */
    public static final AddressLayout LPDRIVER_INFO_4 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_5A {
     *     DWORD cVersion;
     *     LPSTR pName;
     *     LPSTR pEnvironment;
     *     LPSTR pDriverPath;
     *     LPSTR pDataFile;
     *     LPSTR pConfigFile;
     *     DWORD dwDriverAttributes;
     *     DWORD dwConfigVersion;
     *     DWORD dwDriverVersion;
     * } *PDRIVER_INFO_5A
     * }
     */
    public static final AddressLayout PDRIVER_INFO_5A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_5A {
     *     DWORD cVersion;
     *     LPSTR pName;
     *     LPSTR pEnvironment;
     *     LPSTR pDriverPath;
     *     LPSTR pDataFile;
     *     LPSTR pConfigFile;
     *     DWORD dwDriverAttributes;
     *     DWORD dwConfigVersion;
     *     DWORD dwDriverVersion;
     * } *LPDRIVER_INFO_5A
     * }
     */
    public static final AddressLayout LPDRIVER_INFO_5A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_5W {
     *     DWORD cVersion;
     *     LPWSTR pName;
     *     LPWSTR pEnvironment;
     *     LPWSTR pDriverPath;
     *     LPWSTR pDataFile;
     *     LPWSTR pConfigFile;
     *     DWORD dwDriverAttributes;
     *     DWORD dwConfigVersion;
     *     DWORD dwDriverVersion;
     * } *PDRIVER_INFO_5W
     * }
     */
    public static final AddressLayout PDRIVER_INFO_5W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_5W {
     *     DWORD cVersion;
     *     LPWSTR pName;
     *     LPWSTR pEnvironment;
     *     LPWSTR pDriverPath;
     *     LPWSTR pDataFile;
     *     LPWSTR pConfigFile;
     *     DWORD dwDriverAttributes;
     *     DWORD dwConfigVersion;
     *     DWORD dwDriverVersion;
     * } *LPDRIVER_INFO_5W
     * }
     */
    public static final AddressLayout LPDRIVER_INFO_5W = C_POINTER;
}

